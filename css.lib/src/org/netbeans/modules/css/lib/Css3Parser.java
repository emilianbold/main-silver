// $ANTLR 3.3 Nov 30, 2010 12:50:56 /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g 2013-08-20 13:19:07

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */
package org.netbeans.modules.css.lib;
    


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.debug.*;
import java.io.IOException;
public class Css3Parser extends DebugParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NAMESPACE_SYM", "SEMI", "IDENT", "STRING", "URI", "CHARSET_SYM", "IMPORT_SYM", "COMMA", "MEDIA_SYM", "LBRACE", "RBRACE", "AND", "ONLY", "NOT", "GEN", "LPAREN", "RPAREN", "COLON", "AT_IDENT", "MOZ_DOCUMENT_SYM", "MOZ_URL_PREFIX", "MOZ_DOMAIN", "MOZ_REGEXP", "WEBKIT_KEYFRAMES_SYM", "PERCENTAGE", "PAGE_SYM", "COUNTER_STYLE_SYM", "FONT_FACE_SYM", "TOPLEFTCORNER_SYM", "TOPLEFT_SYM", "TOPCENTER_SYM", "TOPRIGHT_SYM", "TOPRIGHTCORNER_SYM", "BOTTOMLEFTCORNER_SYM", "BOTTOMLEFT_SYM", "BOTTOMCENTER_SYM", "BOTTOMRIGHT_SYM", "BOTTOMRIGHTCORNER_SYM", "LEFTTOP_SYM", "LEFTMIDDLE_SYM", "LEFTBOTTOM_SYM", "RIGHTTOP_SYM", "RIGHTMIDDLE_SYM", "RIGHTBOTTOM_SYM", "SOLIDUS", "MINUS", "PLUS", "IMPORTANT_SYM", "GREATER", "TILDE", "HASH_SYMBOL", "HASH", "DOT", "LBRACKET", "DCOLON", "SASS_EXTEND_ONLY_SELECTOR", "STAR", "PIPE", "NAME", "LESS_AND", "OPEQ", "INCLUDES", "DASHMATCH", "BEGINS", "ENDS", "CONTAINS", "RBRACKET", "SASS_VAR", "NUMBER", "LENGTH", "EMS", "REM", "EXS", "ANGLE", "TIME", "FREQ", "RESOLUTION", "DIMENSION", "LESS_JS_STRING", "PERCENTAGE_SYMBOL", "WS", "NL", "COMMENT", "SASS_DEFAULT", "SASS_CONTENT", "SASS_MIXIN", "SASS_INCLUDE", "SASS_EXTEND", "SASS_DEBUG", "SASS_WARN", "SASS_IF", "SASS_ELSE", "SASS_FOR", "SASS_FUNCTION", "SASS_RETURN", "SASS_EACH", "SASS_WHILE", "OR", "CP_EQ", "CP_NOT_EQ", "LESS", "LESS_OR_EQ", "GREATER_OR_EQ", "CP_DOTS", "LESS_REST", "LESS_WHEN", "AT_SIGN", "SASS_OPTIONAL", "HEXCHAR", "NONASCII", "UNICODE", "ESCAPE", "NMSTART", "NMCHAR", "URL", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "CDO", "CDC", "EXCLAMATION_MARK", "INVALID", "LINE_COMMENT"
    };
    public static final int EOF=-1;
    public static final int NAMESPACE_SYM=4;
    public static final int SEMI=5;
    public static final int IDENT=6;
    public static final int STRING=7;
    public static final int URI=8;
    public static final int CHARSET_SYM=9;
    public static final int IMPORT_SYM=10;
    public static final int COMMA=11;
    public static final int MEDIA_SYM=12;
    public static final int LBRACE=13;
    public static final int RBRACE=14;
    public static final int AND=15;
    public static final int ONLY=16;
    public static final int NOT=17;
    public static final int GEN=18;
    public static final int LPAREN=19;
    public static final int RPAREN=20;
    public static final int COLON=21;
    public static final int AT_IDENT=22;
    public static final int MOZ_DOCUMENT_SYM=23;
    public static final int MOZ_URL_PREFIX=24;
    public static final int MOZ_DOMAIN=25;
    public static final int MOZ_REGEXP=26;
    public static final int WEBKIT_KEYFRAMES_SYM=27;
    public static final int PERCENTAGE=28;
    public static final int PAGE_SYM=29;
    public static final int COUNTER_STYLE_SYM=30;
    public static final int FONT_FACE_SYM=31;
    public static final int TOPLEFTCORNER_SYM=32;
    public static final int TOPLEFT_SYM=33;
    public static final int TOPCENTER_SYM=34;
    public static final int TOPRIGHT_SYM=35;
    public static final int TOPRIGHTCORNER_SYM=36;
    public static final int BOTTOMLEFTCORNER_SYM=37;
    public static final int BOTTOMLEFT_SYM=38;
    public static final int BOTTOMCENTER_SYM=39;
    public static final int BOTTOMRIGHT_SYM=40;
    public static final int BOTTOMRIGHTCORNER_SYM=41;
    public static final int LEFTTOP_SYM=42;
    public static final int LEFTMIDDLE_SYM=43;
    public static final int LEFTBOTTOM_SYM=44;
    public static final int RIGHTTOP_SYM=45;
    public static final int RIGHTMIDDLE_SYM=46;
    public static final int RIGHTBOTTOM_SYM=47;
    public static final int SOLIDUS=48;
    public static final int MINUS=49;
    public static final int PLUS=50;
    public static final int IMPORTANT_SYM=51;
    public static final int GREATER=52;
    public static final int TILDE=53;
    public static final int HASH_SYMBOL=54;
    public static final int HASH=55;
    public static final int DOT=56;
    public static final int LBRACKET=57;
    public static final int DCOLON=58;
    public static final int SASS_EXTEND_ONLY_SELECTOR=59;
    public static final int STAR=60;
    public static final int PIPE=61;
    public static final int NAME=62;
    public static final int LESS_AND=63;
    public static final int OPEQ=64;
    public static final int INCLUDES=65;
    public static final int DASHMATCH=66;
    public static final int BEGINS=67;
    public static final int ENDS=68;
    public static final int CONTAINS=69;
    public static final int RBRACKET=70;
    public static final int SASS_VAR=71;
    public static final int NUMBER=72;
    public static final int LENGTH=73;
    public static final int EMS=74;
    public static final int REM=75;
    public static final int EXS=76;
    public static final int ANGLE=77;
    public static final int TIME=78;
    public static final int FREQ=79;
    public static final int RESOLUTION=80;
    public static final int DIMENSION=81;
    public static final int LESS_JS_STRING=82;
    public static final int PERCENTAGE_SYMBOL=83;
    public static final int WS=84;
    public static final int NL=85;
    public static final int COMMENT=86;
    public static final int SASS_DEFAULT=87;
    public static final int SASS_CONTENT=88;
    public static final int SASS_MIXIN=89;
    public static final int SASS_INCLUDE=90;
    public static final int SASS_EXTEND=91;
    public static final int SASS_DEBUG=92;
    public static final int SASS_WARN=93;
    public static final int SASS_IF=94;
    public static final int SASS_ELSE=95;
    public static final int SASS_FOR=96;
    public static final int SASS_FUNCTION=97;
    public static final int SASS_RETURN=98;
    public static final int SASS_EACH=99;
    public static final int SASS_WHILE=100;
    public static final int OR=101;
    public static final int CP_EQ=102;
    public static final int CP_NOT_EQ=103;
    public static final int LESS=104;
    public static final int LESS_OR_EQ=105;
    public static final int GREATER_OR_EQ=106;
    public static final int CP_DOTS=107;
    public static final int LESS_REST=108;
    public static final int LESS_WHEN=109;
    public static final int AT_SIGN=110;
    public static final int SASS_OPTIONAL=111;
    public static final int HEXCHAR=112;
    public static final int NONASCII=113;
    public static final int UNICODE=114;
    public static final int ESCAPE=115;
    public static final int NMSTART=116;
    public static final int NMCHAR=117;
    public static final int URL=118;
    public static final int A=119;
    public static final int B=120;
    public static final int C=121;
    public static final int D=122;
    public static final int E=123;
    public static final int F=124;
    public static final int G=125;
    public static final int H=126;
    public static final int I=127;
    public static final int J=128;
    public static final int K=129;
    public static final int L=130;
    public static final int M=131;
    public static final int N=132;
    public static final int O=133;
    public static final int P=134;
    public static final int Q=135;
    public static final int R=136;
    public static final int S=137;
    public static final int T=138;
    public static final int U=139;
    public static final int V=140;
    public static final int W=141;
    public static final int X=142;
    public static final int Y=143;
    public static final int Z=144;
    public static final int CDO=145;
    public static final int CDC=146;
    public static final int EXCLAMATION_MARK=147;
    public static final int INVALID=148;
    public static final int LINE_COMMENT=149;

    // delegates
    // delegators

    public static final String[] ruleNames = new String[] {
        "invalidRule", "synpred24_Css3", "webkitKeyframes", "expressionPredicate", 
        "typeSelector", "synpred37_Css3", "synpred23_Css3", "namespacePrefix", 
        "sass_function_declaration", "generic_at_rule", "synpred22_Css3", 
        "cp_mixin_call_arg", "counterStyle", "term", "sass_else", "propertyValue", 
        "syncToDeclarationsRule", "media", "sass_nested_properties", "mediaQueryOperator", 
        "cssClass", "property", "synpred27_Css3", "body", "synpred4_Css3", 
        "sass_extend_only_selector", "synpred13_Css3", "synpred31_Css3", 
        "propertyDeclaration", "ws", "fnAttributeName", "webkitKeyframeSelectors", 
        "synpred26_Css3", "sass_control_block", "atRuleId", "synpred8_Css3", 
        "synpred12_Css3", "sass_content", "synpred28_Css3", "cp_arg", "margin_sym", 
        "synpred5_Css3", "hexColor", "cp_mixin_block", "synpred35_Css3", 
        "moz_document_function", "function", "charSet", "mediaType", "cp_expression_atom", 
        "imports", "bodyItem", "page", "mediaFeatureValue", "synpred30_Css3", 
        "less_condition_operator", "synpred36_Css3", "cp_math_expressions", 
        "margin", "syncToFollow", "pseudoPage", "sass_debug", "sass_if", 
        "mediaFeature", "vendorAtRule", "synpred16_Css3", "moz_document", 
        "pseudo", "mediaBodyItem", "synpred25_Css3", "slAttributeName", 
        "esPred", "cssId", "resourceIdentifier", "cp_mixin_name", "fnAttribute", 
        "synpred15_Css3", "operator", "less_selector_interpolation", "synpred18_Css3", 
        "unaryOperator", "mediaExpression", "charSetValue", "cp_variable", 
        "sass_for", "less_condition", "less_function_in_condition", "prio", 
        "webkitKeyframesBlock", "importItem", "functionName", "selector", 
        "less_fn_name", "combinator", "elementName", "synpred19_Css3", "namespacePrefixName", 
        "synpred38_Css3", "declarations", "sass_selector_interpolation_expression", 
        "synpred11_Css3", "mediaQueryList", "slAttributeValue", "synpred10_Css3", 
        "synpred3_Css3", "selectorsGroup", "cp_mixin_declaration", "sass_interpolation_expression_var", 
        "rule", "synpred33_Css3", "cp_math_expression", "syncTo_SEMI", "cp_math_expression_atom", 
        "synpred17_Css3", "sass_each", "cp_variable_declaration", "expression", 
        "synpred7_Css3", "cp_mixin_call", "synpred32_Css3", "cp_propertyValue", 
        "syncTo_RBRACE", "namespace", "cp_expression_list", "cp_expression_operator", 
        "mediaBody", "synpred14_Css3", "synpred9_Css3", "elementSubsequent", 
        "synpred29_Css3", "synpred2_Css3", "sass_control", "fnAttributes", 
        "synpred1_Css3", "less_mixin_guarded", "simpleSelectorSequence", 
        "at_rule", "namespaces", "synpred34_Css3", "sass_while", "cp_args_list", 
        "synpred21_Css3", "synpred20_Css3", "sass_control_expression", "styleSheet", 
        "slAttribute", "synpred6_Css3", "sass_extend", "sass_function_name", 
        "sass_function_return", "sass_declaration_interpolation_expression", 
        "fontFace", "cp_expression", "mediaQuery", "cp_term_symbol", "declaration", 
        "cp_mixin_call_args", "fnAttributeValue"
    };
    public static final boolean[] decisionCanBacktrack = new boolean[] {
        false, // invalid decision
        false, false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            true, false, false, false, false, false, true, false, false, 
            false, false, false, false, true, false, false, false, true, 
            false, false, true, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, true, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, true, false, false, false, false, true, false, 
            false, false, false, false, true, false, false, false, true, 
            false, false, false, false, false, false, false, false, true, 
            false, true, false, true, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, true, false, false, true, false, false, false, 
            false, false, false, false, false, false, false, false, true, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            true, false, false, false, true, false, false, false, false, 
            true, false, false, false, true, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, true, false, true, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false
    };

     
        public int ruleLevel = 0;
        public int getRuleLevel() { return ruleLevel; }
        public void incRuleLevel() { ruleLevel++; }
        public void decRuleLevel() { ruleLevel--; }
        public Css3Parser(TokenStream input) {
            this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState());
        }
        public Css3Parser(TokenStream input, int port, RecognizerSharedState state) {
            super(input, state);
            DebugEventSocketProxy proxy =
                new DebugEventSocketProxy(this, port, null);
            setDebugListener(proxy);
            try {
                proxy.handshake();
            }
            catch (IOException ioe) {
                reportError(ioe);
            }
        }
    public Css3Parser(TokenStream input, DebugEventListener dbg) {
        super(input, dbg, new RecognizerSharedState());

    }
    protected boolean evalPredicate(boolean result, String predicate) {
        dbg.semanticPredicate(result, predicate);
        return result;
    }


    public String[] getTokenNames() { return Css3Parser.tokenNames; }
    public String getGrammarFileName() { return "/Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g"; }



        protected boolean isLessSource() {
            return false;
        }
        
        protected boolean isScssSource() {
            return false;
        }
        
        private boolean isCssPreprocessorSource() {
            return isLessSource() || isScssSource();
        }

        private boolean tokenNameEquals(String tokenImage) {
            return tokenImage.equalsIgnoreCase(input.LT(1).getText());
        }

    /**
         * Use the current stacked followset to work out the valid tokens that
         * can follow on from the current point in the parse, then recover by
         * eating tokens that are not a member of the follow set we compute.
         *
         * This method is used whenever we wish to force a sync, even though
         * the parser has not yet checked LA(1) for alt selection. This is useful
         * in situations where only a subset of tokens can begin a new construct
         * (such as the start of a new statement in a block) and we want to
         * proactively detect garbage so that the current rule does not exit on
         * on an exception.
         *
         * We could override recover() to make this the default behavior but that
         * is too much like using a sledge hammer to crack a nut. We want finer
         * grained control of the recovery and error mechanisms.
         */
        protected void syncToSet()
        {
            // Compute the followset that is in context wherever we are in the
            // rule chain/stack
            //
             BitSet follow = state.following[state._fsp]; //computeContextSensitiveRuleFOLLOW();

             syncToSet(follow);
        }

        protected void syncToSet(BitSet follow)
        {
            int mark = -1;

            //create error-recovery node
            dbg.enterRule(getGrammarFileName(), "recovery");

            try {

                mark = input.mark();

                // Consume all tokens in the stream until we find a member of the follow
                // set, which means the next production should be guaranteed to be happy.
                //
                while (! follow.member(input.LA(1)) ) {

                    if  (input.LA(1) == Token.EOF) {

                        // Looks like we didn't find anything at all that can help us here
                        // so we need to rewind to where we were and let normal error handling
                        // bail out.
                        //
                        input.rewind();
                        mark = -1;
                        return;
                    }
                    input.consume();

                    // Now here, because you are consuming some tokens, yu will probably want
                    // to raise an error message such as "Spurious elements after the class member were discarded"
                    // using whatever your override of displayRecognitionError() routine does to record
                    // error messages. The exact error my depend on context etc.
                    //
                }
            } catch (Exception e) {

              // Just ignore any errors here, we will just let the recognizer
              // try to resync as normal - something must be very screwed.
              //
            }
            finally {
                dbg.exitRule(getGrammarFileName(), "recovery");

                // Always release the mark we took
                //
                if  (mark != -1) {
                    input.release(mark);
                }
            }
        }
        
        /**
             * synces to next RBRACE "}" taking nesting into account
             */
            protected void syncToRBRACE(int nest)
                {
                    
                    int mark = -1;
                    //create error-recovery node
                    //dbg.enterRule(getGrammarFileName(), "recovery");

                    try {
                        mark = input.mark();
                        for(;;) {
                            //read char
                            int c = input.LA(1);
                            
                            switch(c) {
                                case Token.EOF:
                                    input.rewind();
                                    mark = -1;
                                    return ;
                                case Css3Lexer.LBRACE:
                                    nest++;
                                    break;
                                case Css3Lexer.RBRACE:
                                    nest--;
                                    if(nest == 0) {
                                        //do not eat the final RBRACE
                                        return ;
                                    }
                            }
                            
                            input.consume();
                                                
                        }

                    } catch (Exception e) {

                      // Just ignore any errors here, we will just let the recognizer
                      // try to resync as normal - something must be very screwed.
                      //
                    }
                    finally {
                        if  (mark != -1) {
                            input.release(mark);
                        }
                        //dbg.exitRule(getGrammarFileName(), "recovery");
                    }
                }
        



    // $ANTLR start "styleSheet"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:321:1: styleSheet : ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF ;
    public final void styleSheet() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "styleSheet");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(321, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:322:5: ( ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:6: ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF
            {
            dbg.location(323,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:6: ( ws )?
            int alt1=2;
            try { dbg.enterSubRule(1);
            try { dbg.enterDecision(1, decisionCanBacktrack[1]);

            int LA1_0 = input.LA(1);

            if ( ((LA1_0>=WS && LA1_0<=COMMENT)) ) {
                alt1=1;
            }
            } finally {dbg.exitDecision(1);}

            switch (alt1) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:6: ws
                    {
                    dbg.location(323,6);
                    pushFollow(FOLLOW_ws_in_styleSheet125);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(1);}

            dbg.location(324,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:6: ( charSet ( ws )? )?
            int alt3=2;
            try { dbg.enterSubRule(3);
            try { dbg.enterDecision(3, decisionCanBacktrack[3]);

            try {
                isCyclicDecision = true;
                alt3 = dfa3.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(3);}

            switch (alt3) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:8: charSet ( ws )?
                    {
                    dbg.location(324,8);
                    pushFollow(FOLLOW_charSet_in_styleSheet135);
                    charSet();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(324,16);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:16: ( ws )?
                    int alt2=2;
                    try { dbg.enterSubRule(2);
                    try { dbg.enterDecision(2, decisionCanBacktrack[2]);

                    int LA2_0 = input.LA(1);

                    if ( ((LA2_0>=WS && LA2_0<=COMMENT)) ) {
                        alt2=1;
                    }
                    } finally {dbg.exitDecision(2);}

                    switch (alt2) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:16: ws
                            {
                            dbg.location(324,16);
                            pushFollow(FOLLOW_ws_in_styleSheet137);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(2);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(3);}

            dbg.location(325,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:9: ( imports )?
            int alt4=2;
            try { dbg.enterSubRule(4);
            try { dbg.enterDecision(4, decisionCanBacktrack[4]);

            try {
                isCyclicDecision = true;
                alt4 = dfa4.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(4);}

            switch (alt4) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:9: imports
                    {
                    dbg.location(325,9);
                    pushFollow(FOLLOW_imports_in_styleSheet151);
                    imports();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(4);}

            dbg.location(326,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:326:9: ( namespaces )?
            int alt5=2;
            try { dbg.enterSubRule(5);
            try { dbg.enterDecision(5, decisionCanBacktrack[5]);

            try {
                isCyclicDecision = true;
                alt5 = dfa5.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(5);}

            switch (alt5) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:326:9: namespaces
                    {
                    dbg.location(326,9);
                    pushFollow(FOLLOW_namespaces_in_styleSheet162);
                    namespaces();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(5);}

            dbg.location(327,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:9: ( body )?
            int alt6=2;
            try { dbg.enterSubRule(6);
            try { dbg.enterDecision(6, decisionCanBacktrack[6]);

            int LA6_0 = input.LA(1);

            if ( ((LA6_0>=NAMESPACE_SYM && LA6_0<=IDENT)||(LA6_0>=CHARSET_SYM && LA6_0<=MEDIA_SYM)||LA6_0==GEN||(LA6_0>=COLON && LA6_0<=MOZ_DOCUMENT_SYM)||LA6_0==WEBKIT_KEYFRAMES_SYM||(LA6_0>=PAGE_SYM && LA6_0<=RIGHTBOTTOM_SYM)||(LA6_0>=MINUS && LA6_0<=PLUS)||(LA6_0>=GREATER && LA6_0<=PIPE)||LA6_0==LESS_AND||(LA6_0>=RBRACKET && LA6_0<=SASS_VAR)||(LA6_0>=SASS_CONTENT && LA6_0<=SASS_WHILE)||LA6_0==AT_SIGN) ) {
                alt6=1;
            }
            } finally {dbg.exitDecision(6);}

            switch (alt6) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:9: body
                    {
                    dbg.location(327,9);
                    pushFollow(FOLLOW_body_in_styleSheet174);
                    body();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(6);}

            dbg.location(328,6);
            match(input,EOF,FOLLOW_EOF_in_styleSheet182); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(329, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "styleSheet");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "styleSheet"


    // $ANTLR start "namespaces"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:331:1: namespaces : ( namespace ( ws )? )+ ;
    public final void namespaces() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespaces");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(331, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:2: ( ( namespace ( ws )? )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:2: ( namespace ( ws )? )+
            {
            dbg.location(333,2);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:2: ( namespace ( ws )? )+
            int cnt8=0;
            try { dbg.enterSubRule(8);

            loop8:
            do {
                int alt8=2;
                try { dbg.enterDecision(8, decisionCanBacktrack[8]);

                try {
                    isCyclicDecision = true;
                    alt8 = dfa8.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(8);}

                switch (alt8) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:4: namespace ( ws )?
            	    {
            	    dbg.location(333,4);
            	    pushFollow(FOLLOW_namespace_in_namespaces199);
            	    namespace();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(333,14);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:14: ( ws )?
            	    int alt7=2;
            	    try { dbg.enterSubRule(7);
            	    try { dbg.enterDecision(7, decisionCanBacktrack[7]);

            	    int LA7_0 = input.LA(1);

            	    if ( ((LA7_0>=WS && LA7_0<=COMMENT)) ) {
            	        alt7=1;
            	    }
            	    } finally {dbg.exitDecision(7);}

            	    switch (alt7) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:14: ws
            	            {
            	            dbg.location(333,14);
            	            pushFollow(FOLLOW_ws_in_namespaces201);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(7);}


            	    }
            	    break;

            	default :
            	    if ( cnt8 >= 1 ) break loop8;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(8, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt8++;
            } while (true);
            } finally {dbg.exitSubRule(8);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(334, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespaces");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespaces"


    // $ANTLR start "namespace"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:1: namespace : NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI ;
    public final void namespace() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespace");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(336, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:3: ( NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:5: NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI
            {
            dbg.location(337,5);
            match(input,NAMESPACE_SYM,FOLLOW_NAMESPACE_SYM_in_namespace217); if (state.failed) return ;
            dbg.location(337,19);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:19: ( ws )?
            int alt9=2;
            try { dbg.enterSubRule(9);
            try { dbg.enterDecision(9, decisionCanBacktrack[9]);

            int LA9_0 = input.LA(1);

            if ( ((LA9_0>=WS && LA9_0<=COMMENT)) ) {
                alt9=1;
            }
            } finally {dbg.exitDecision(9);}

            switch (alt9) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:19: ws
                    {
                    dbg.location(337,19);
                    pushFollow(FOLLOW_ws_in_namespace219);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(9);}

            dbg.location(337,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:23: ( namespacePrefixName ( ws )? )?
            int alt11=2;
            try { dbg.enterSubRule(11);
            try { dbg.enterDecision(11, decisionCanBacktrack[11]);

            int LA11_0 = input.LA(1);

            if ( (LA11_0==IDENT) ) {
                alt11=1;
            }
            } finally {dbg.exitDecision(11);}

            switch (alt11) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:24: namespacePrefixName ( ws )?
                    {
                    dbg.location(337,24);
                    pushFollow(FOLLOW_namespacePrefixName_in_namespace223);
                    namespacePrefixName();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(337,44);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:44: ( ws )?
                    int alt10=2;
                    try { dbg.enterSubRule(10);
                    try { dbg.enterDecision(10, decisionCanBacktrack[10]);

                    int LA10_0 = input.LA(1);

                    if ( ((LA10_0>=WS && LA10_0<=COMMENT)) ) {
                        alt10=1;
                    }
                    } finally {dbg.exitDecision(10);}

                    switch (alt10) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:44: ws
                            {
                            dbg.location(337,44);
                            pushFollow(FOLLOW_ws_in_namespace225);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(10);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(11);}

            dbg.location(337,50);
            pushFollow(FOLLOW_resourceIdentifier_in_namespace230);
            resourceIdentifier();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(337,69);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:69: ( ws )?
            int alt12=2;
            try { dbg.enterSubRule(12);
            try { dbg.enterDecision(12, decisionCanBacktrack[12]);

            int LA12_0 = input.LA(1);

            if ( ((LA12_0>=WS && LA12_0<=COMMENT)) ) {
                alt12=1;
            }
            } finally {dbg.exitDecision(12);}

            switch (alt12) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:69: ws
                    {
                    dbg.location(337,69);
                    pushFollow(FOLLOW_ws_in_namespace232);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(12);}

            dbg.location(337,73);
            match(input,SEMI,FOLLOW_SEMI_in_namespace235); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(338, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespace");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespace"


    // $ANTLR start "namespacePrefixName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:340:1: namespacePrefixName : IDENT ;
    public final void namespacePrefixName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespacePrefixName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(340, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:341:3: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:341:5: IDENT
            {
            dbg.location(341,5);
            match(input,IDENT,FOLLOW_IDENT_in_namespacePrefixName248); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(342, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespacePrefixName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespacePrefixName"


    // $ANTLR start "resourceIdentifier"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:344:1: resourceIdentifier : ( STRING | URI );
    public final void resourceIdentifier() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "resourceIdentifier");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(344, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:345:3: ( STRING | URI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(345,3);
            if ( (input.LA(1)>=STRING && input.LA(1)<=URI) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(346, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "resourceIdentifier");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "resourceIdentifier"


    // $ANTLR start "charSet"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:348:1: charSet : CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI ;
    public final void charSet() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "charSet");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(348, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:5: ( CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:9: CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI
            {
            dbg.location(349,9);
            match(input,CHARSET_SYM,FOLLOW_CHARSET_SYM_in_charSet286); if (state.failed) return ;
            dbg.location(349,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:21: ( ws )?
            int alt13=2;
            try { dbg.enterSubRule(13);
            try { dbg.enterDecision(13, decisionCanBacktrack[13]);

            int LA13_0 = input.LA(1);

            if ( ((LA13_0>=WS && LA13_0<=COMMENT)) ) {
                alt13=1;
            }
            } finally {dbg.exitDecision(13);}

            switch (alt13) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:21: ws
                    {
                    dbg.location(349,21);
                    pushFollow(FOLLOW_ws_in_charSet288);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(13);}

            dbg.location(349,25);
            pushFollow(FOLLOW_charSetValue_in_charSet291);
            charSetValue();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(349,38);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:38: ( ws )?
            int alt14=2;
            try { dbg.enterSubRule(14);
            try { dbg.enterDecision(14, decisionCanBacktrack[14]);

            int LA14_0 = input.LA(1);

            if ( ((LA14_0>=WS && LA14_0<=COMMENT)) ) {
                alt14=1;
            }
            } finally {dbg.exitDecision(14);}

            switch (alt14) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:38: ws
                    {
                    dbg.location(349,38);
                    pushFollow(FOLLOW_ws_in_charSet293);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(14);}

            dbg.location(349,42);
            match(input,SEMI,FOLLOW_SEMI_in_charSet296); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(350, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "charSet");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "charSet"


    // $ANTLR start "charSetValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:1: charSetValue : STRING ;
    public final void charSetValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "charSetValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(352, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:353:2: ( STRING )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:353:4: STRING
            {
            dbg.location(353,4);
            match(input,STRING,FOLLOW_STRING_in_charSetValue310); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(354, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "charSetValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "charSetValue"


    // $ANTLR start "imports"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:356:1: imports : ( importItem ( ws )? SEMI ( ws )? )+ ;
    public final void imports() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "imports");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(356, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:357:2: ( ( importItem ( ws )? SEMI ( ws )? )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:2: ( importItem ( ws )? SEMI ( ws )? )+
            {
            dbg.location(358,2);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:2: ( importItem ( ws )? SEMI ( ws )? )+
            int cnt17=0;
            try { dbg.enterSubRule(17);

            loop17:
            do {
                int alt17=2;
                try { dbg.enterDecision(17, decisionCanBacktrack[17]);

                try {
                    isCyclicDecision = true;
                    alt17 = dfa17.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(17);}

                switch (alt17) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:4: importItem ( ws )? SEMI ( ws )?
            	    {
            	    dbg.location(358,4);
            	    pushFollow(FOLLOW_importItem_in_imports324);
            	    importItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(358,15);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:15: ( ws )?
            	    int alt15=2;
            	    try { dbg.enterSubRule(15);
            	    try { dbg.enterDecision(15, decisionCanBacktrack[15]);

            	    int LA15_0 = input.LA(1);

            	    if ( ((LA15_0>=WS && LA15_0<=COMMENT)) ) {
            	        alt15=1;
            	    }
            	    } finally {dbg.exitDecision(15);}

            	    switch (alt15) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:15: ws
            	            {
            	            dbg.location(358,15);
            	            pushFollow(FOLLOW_ws_in_imports326);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(15);}

            	    dbg.location(358,19);
            	    match(input,SEMI,FOLLOW_SEMI_in_imports329); if (state.failed) return ;
            	    dbg.location(358,24);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:24: ( ws )?
            	    int alt16=2;
            	    try { dbg.enterSubRule(16);
            	    try { dbg.enterDecision(16, decisionCanBacktrack[16]);

            	    int LA16_0 = input.LA(1);

            	    if ( ((LA16_0>=WS && LA16_0<=COMMENT)) ) {
            	        alt16=1;
            	    }
            	    } finally {dbg.exitDecision(16);}

            	    switch (alt16) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:24: ws
            	            {
            	            dbg.location(358,24);
            	            pushFollow(FOLLOW_ws_in_imports331);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(16);}


            	    }
            	    break;

            	default :
            	    if ( cnt17 >= 1 ) break loop17;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(17, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt17++;
            } while (true);
            } finally {dbg.exitSubRule(17);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(359, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "imports");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "imports"


    // $ANTLR start "importItem"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:361:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );
    public final void importItem() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "importItem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(361, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:362:5: ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? )
            int alt27=2;
            try { dbg.enterDecision(27, decisionCanBacktrack[27]);

            try {
                isCyclicDecision = true;
                alt27 = dfa27.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(27);}

            switch (alt27) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:9: IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    {
                    dbg.location(363,9);
                    match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem361); if (state.failed) return ;
                    dbg.location(363,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:20: ( ws )?
                    int alt18=2;
                    try { dbg.enterSubRule(18);
                    try { dbg.enterDecision(18, decisionCanBacktrack[18]);

                    int LA18_0 = input.LA(1);

                    if ( ((LA18_0>=WS && LA18_0<=COMMENT)) ) {
                        alt18=1;
                    }
                    } finally {dbg.exitDecision(18);}

                    switch (alt18) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:20: ws
                            {
                            dbg.location(363,20);
                            pushFollow(FOLLOW_ws_in_importItem363);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(18);}

                    dbg.location(363,24);
                    pushFollow(FOLLOW_resourceIdentifier_in_importItem366);
                    resourceIdentifier();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(363,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:43: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    int alt20=2;
                    try { dbg.enterSubRule(20);
                    try { dbg.enterDecision(20, decisionCanBacktrack[20]);

                    try {
                        isCyclicDecision = true;
                        alt20 = dfa20.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(20);}

                    switch (alt20) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:44: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
                            {
                            dbg.location(363,66);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:66: ( ws )?
                            int alt19=2;
                            try { dbg.enterSubRule(19);
                            try { dbg.enterDecision(19, decisionCanBacktrack[19]);

                            int LA19_0 = input.LA(1);

                            if ( ((LA19_0>=WS && LA19_0<=COMMENT)) ) {
                                alt19=1;
                            }
                            } finally {dbg.exitDecision(19);}

                            switch (alt19) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:66: ws
                                    {
                                    dbg.location(363,66);
                                    pushFollow(FOLLOW_ws_in_importItem376);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(19);}

                            dbg.location(363,70);
                            pushFollow(FOLLOW_mediaQueryList_in_importItem379);
                            mediaQueryList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(20);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:9: {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    {
                    dbg.location(366,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "importItem", "isScssSource()");
                    }
                    dbg.location(366,27);
                    match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem412); if (state.failed) return ;
                    dbg.location(366,38);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:38: ( ws )?
                    int alt21=2;
                    try { dbg.enterSubRule(21);
                    try { dbg.enterDecision(21, decisionCanBacktrack[21]);

                    int LA21_0 = input.LA(1);

                    if ( ((LA21_0>=WS && LA21_0<=COMMENT)) ) {
                        alt21=1;
                    }
                    } finally {dbg.exitDecision(21);}

                    switch (alt21) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:38: ws
                            {
                            dbg.location(366,38);
                            pushFollow(FOLLOW_ws_in_importItem414);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(21);}

                    dbg.location(366,42);
                    pushFollow(FOLLOW_resourceIdentifier_in_importItem417);
                    resourceIdentifier();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(366,61);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*
                    try { dbg.enterSubRule(24);

                    loop24:
                    do {
                        int alt24=2;
                        try { dbg.enterDecision(24, decisionCanBacktrack[24]);

                        try {
                            isCyclicDecision = true;
                            alt24 = dfa24.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(24);}

                        switch (alt24) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:62: ( ws )? COMMA ( ws )? resourceIdentifier
                    	    {
                    	    dbg.location(366,62);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:62: ( ws )?
                    	    int alt22=2;
                    	    try { dbg.enterSubRule(22);
                    	    try { dbg.enterDecision(22, decisionCanBacktrack[22]);

                    	    int LA22_0 = input.LA(1);

                    	    if ( ((LA22_0>=WS && LA22_0<=COMMENT)) ) {
                    	        alt22=1;
                    	    }
                    	    } finally {dbg.exitDecision(22);}

                    	    switch (alt22) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:62: ws
                    	            {
                    	            dbg.location(366,62);
                    	            pushFollow(FOLLOW_ws_in_importItem420);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(22);}

                    	    dbg.location(366,66);
                    	    match(input,COMMA,FOLLOW_COMMA_in_importItem423); if (state.failed) return ;
                    	    dbg.location(366,72);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:72: ( ws )?
                    	    int alt23=2;
                    	    try { dbg.enterSubRule(23);
                    	    try { dbg.enterDecision(23, decisionCanBacktrack[23]);

                    	    int LA23_0 = input.LA(1);

                    	    if ( ((LA23_0>=WS && LA23_0<=COMMENT)) ) {
                    	        alt23=1;
                    	    }
                    	    } finally {dbg.exitDecision(23);}

                    	    switch (alt23) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:72: ws
                    	            {
                    	            dbg.location(366,72);
                    	            pushFollow(FOLLOW_ws_in_importItem425);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(23);}

                    	    dbg.location(366,76);
                    	    pushFollow(FOLLOW_resourceIdentifier_in_importItem428);
                    	    resourceIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop24;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(24);}

                    dbg.location(366,97);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:97: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    int alt26=2;
                    try { dbg.enterSubRule(26);
                    try { dbg.enterDecision(26, decisionCanBacktrack[26]);

                    try {
                        isCyclicDecision = true;
                        alt26 = dfa26.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(26);}

                    switch (alt26) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:98: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
                            {
                            dbg.location(366,120);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:120: ( ws )?
                            int alt25=2;
                            try { dbg.enterSubRule(25);
                            try { dbg.enterDecision(25, decisionCanBacktrack[25]);

                            int LA25_0 = input.LA(1);

                            if ( ((LA25_0>=WS && LA25_0<=COMMENT)) ) {
                                alt25=1;
                            }
                            } finally {dbg.exitDecision(25);}

                            switch (alt25) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:120: ws
                                    {
                                    dbg.location(366,120);
                                    pushFollow(FOLLOW_ws_in_importItem440);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(25);}

                            dbg.location(366,124);
                            pushFollow(FOLLOW_mediaQueryList_in_importItem443);
                            mediaQueryList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(26);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(367, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "importItem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "importItem"


    // $ANTLR start "media"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:1: media : MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE ;
    public final void media() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "media");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(368, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:5: ( MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:7: MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE
            {
            dbg.location(369,7);
            match(input,MEDIA_SYM,FOLLOW_MEDIA_SYM_in_media461); if (state.failed) return ;
            dbg.location(369,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:17: ( ws )?
            int alt28=2;
            try { dbg.enterSubRule(28);
            try { dbg.enterDecision(28, decisionCanBacktrack[28]);

            int LA28_0 = input.LA(1);

            if ( ((LA28_0>=WS && LA28_0<=COMMENT)) ) {
                alt28=1;
            }
            } finally {dbg.exitDecision(28);}

            switch (alt28) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:17: ws
                    {
                    dbg.location(369,17);
                    pushFollow(FOLLOW_ws_in_media463);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(28);}

            dbg.location(370,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:370:5: ( mediaQueryList )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:371:10: mediaQueryList
            {
            dbg.location(371,10);
            pushFollow(FOLLOW_mediaQueryList_in_media482);
            mediaQueryList();

            state._fsp--;
            if (state.failed) return ;

            }

            dbg.location(372,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:7: ( ws )?
            int alt29=2;
            try { dbg.enterSubRule(29);
            try { dbg.enterDecision(29, decisionCanBacktrack[29]);

            int LA29_0 = input.LA(1);

            if ( ((LA29_0>=WS && LA29_0<=COMMENT)) ) {
                alt29=1;
            }
            } finally {dbg.exitDecision(29);}

            switch (alt29) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:7: ws
                    {
                    dbg.location(372,7);
                    pushFollow(FOLLOW_ws_in_media490);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(29);}

            dbg.location(373,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_media497); if (state.failed) return ;
            dbg.location(373,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:12: ( ws )?
            int alt30=2;
            try { dbg.enterSubRule(30);
            try { dbg.enterDecision(30, decisionCanBacktrack[30]);

            int LA30_0 = input.LA(1);

            if ( ((LA30_0>=WS && LA30_0<=COMMENT)) ) {
                alt30=1;
            }
            } finally {dbg.exitDecision(30);}

            switch (alt30) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:12: ws
                    {
                    dbg.location(373,12);
                    pushFollow(FOLLOW_ws_in_media499);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(30);}

            dbg.location(373,16);
            pushFollow(FOLLOW_syncToFollow_in_media502);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(374,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:374:9: ( mediaBody )?
            int alt31=2;
            try { dbg.enterSubRule(31);
            try { dbg.enterDecision(31, decisionCanBacktrack[31]);

            int LA31_0 = input.LA(1);

            if ( ((LA31_0>=NAMESPACE_SYM && LA31_0<=IDENT)||(LA31_0>=CHARSET_SYM && LA31_0<=MEDIA_SYM)||LA31_0==GEN||(LA31_0>=COLON && LA31_0<=MOZ_DOCUMENT_SYM)||LA31_0==WEBKIT_KEYFRAMES_SYM||(LA31_0>=PAGE_SYM && LA31_0<=RIGHTBOTTOM_SYM)||(LA31_0>=MINUS && LA31_0<=PLUS)||(LA31_0>=GREATER && LA31_0<=PIPE)||LA31_0==LESS_AND||(LA31_0>=RBRACKET && LA31_0<=SASS_VAR)||(LA31_0>=SASS_CONTENT && LA31_0<=SASS_WHILE)||LA31_0==AT_SIGN) ) {
                alt31=1;
            }
            } finally {dbg.exitDecision(31);}

            switch (alt31) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:374:9: mediaBody
                    {
                    dbg.location(374,9);
                    pushFollow(FOLLOW_mediaBody_in_media512);
                    mediaBody();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(31);}

            dbg.location(375,5);
            match(input,RBRACE,FOLLOW_RBRACE_in_media519); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(376, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "media");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "media"


    // $ANTLR start "mediaBody"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:378:1: mediaBody : ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
    public final void mediaBody() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaBody");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(378, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:5: ( ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:380:5: ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            {
            dbg.location(380,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:380:5: ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            int cnt36=0;
            try { dbg.enterSubRule(36);

            loop36:
            do {
                int alt36=3;
                try { dbg.enterDecision(36, decisionCanBacktrack[36]);

                int LA36_0 = input.LA(1);

                if ( (LA36_0==NAMESPACE_SYM||LA36_0==IDENT||(LA36_0>=CHARSET_SYM && LA36_0<=MEDIA_SYM)||LA36_0==GEN||(LA36_0>=COLON && LA36_0<=MOZ_DOCUMENT_SYM)||LA36_0==WEBKIT_KEYFRAMES_SYM||(LA36_0>=PAGE_SYM && LA36_0<=RIGHTBOTTOM_SYM)||(LA36_0>=MINUS && LA36_0<=PLUS)||(LA36_0>=GREATER && LA36_0<=PIPE)||LA36_0==LESS_AND||(LA36_0>=RBRACKET && LA36_0<=SASS_VAR)||(LA36_0>=SASS_CONTENT && LA36_0<=SASS_WHILE)||LA36_0==AT_SIGN) ) {
                    alt36=1;
                }
                else if ( (LA36_0==SEMI) ) {
                    alt36=2;
                }


                } finally {dbg.exitDecision(36);}

                switch (alt36) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:10: ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    {
            	    dbg.location(381,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:10: ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:12: mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
            	    {
            	    dbg.location(381,12);
            	    pushFollow(FOLLOW_mediaBodyItem_in_mediaBody557);
            	    mediaBodyItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(381,26);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:26: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
            	    int alt33=2;
            	    try { dbg.enterSubRule(33);
            	    try { dbg.enterDecision(33, decisionCanBacktrack[33]);

            	    try {
            	        isCyclicDecision = true;
            	        alt33 = dfa33.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(33);}

            	    switch (alt33) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:27: ( ( ws )? SEMI )=> ( ws )? SEMI
            	            {
            	            dbg.location(381,39);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:39: ( ws )?
            	            int alt32=2;
            	            try { dbg.enterSubRule(32);
            	            try { dbg.enterDecision(32, decisionCanBacktrack[32]);

            	            int LA32_0 = input.LA(1);

            	            if ( ((LA32_0>=WS && LA32_0<=COMMENT)) ) {
            	                alt32=1;
            	            }
            	            } finally {dbg.exitDecision(32);}

            	            switch (alt32) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:39: ws
            	                    {
            	                    dbg.location(381,39);
            	                    pushFollow(FOLLOW_ws_in_mediaBody567);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(32);}

            	            dbg.location(381,43);
            	            match(input,SEMI,FOLLOW_SEMI_in_mediaBody570); if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(33);}

            	    dbg.location(381,50);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:50: ( ws )?
            	    int alt34=2;
            	    try { dbg.enterSubRule(34);
            	    try { dbg.enterDecision(34, decisionCanBacktrack[34]);

            	    int LA34_0 = input.LA(1);

            	    if ( ((LA34_0>=WS && LA34_0<=COMMENT)) ) {
            	        alt34=1;
            	    }
            	    } finally {dbg.exitDecision(34);}

            	    switch (alt34) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:50: ws
            	            {
            	            dbg.location(381,50);
            	            pushFollow(FOLLOW_ws_in_mediaBody574);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(34);}


            	    }


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:10: ( SEMI ( ws )? )
            	    {
            	    dbg.location(383,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:10: ( SEMI ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:12: SEMI ( ws )?
            	    {
            	    dbg.location(383,12);
            	    match(input,SEMI,FOLLOW_SEMI_in_mediaBody601); if (state.failed) return ;
            	    dbg.location(383,17);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:17: ( ws )?
            	    int alt35=2;
            	    try { dbg.enterSubRule(35);
            	    try { dbg.enterDecision(35, decisionCanBacktrack[35]);

            	    int LA35_0 = input.LA(1);

            	    if ( ((LA35_0>=WS && LA35_0<=COMMENT)) ) {
            	        alt35=1;
            	    }
            	    } finally {dbg.exitDecision(35);}

            	    switch (alt35) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:17: ws
            	            {
            	            dbg.location(383,17);
            	            pushFollow(FOLLOW_ws_in_mediaBody603);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(35);}


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt36 >= 1 ) break loop36;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(36, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt36++;
            } while (true);
            } finally {dbg.exitSubRule(36);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(385, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaBody");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaBody"


    // $ANTLR start "mediaBodyItem"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:387:1: mediaBodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | {...}? sass_extend | {...}? sass_debug | {...}? sass_control | {...}? sass_content | rule | page | fontFace | vendorAtRule | media );
    public final void mediaBodyItem() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaBodyItem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(387, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:388:5: ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | {...}? sass_extend | {...}? sass_debug | {...}? sass_control | {...}? sass_content | rule | page | fontFace | vendorAtRule | media )
            int alt37=13;
            try { dbg.enterDecision(37, decisionCanBacktrack[37]);

            try {
                isCyclicDecision = true;
                alt37 = dfa37.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(37);}

            switch (alt37) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:5: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration
                    {
                    dbg.location(389,85);
                    pushFollow(FOLLOW_cp_mixin_declaration_in_mediaBodyItem669);
                    cp_mixin_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:390:7: ( cp_mixin_call )=> cp_mixin_call
                    {
                    dbg.location(390,24);
                    pushFollow(FOLLOW_cp_mixin_call_in_mediaBodyItem682);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:6: ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration
                    {
                    dbg.location(391,74);
                    pushFollow(FOLLOW_propertyDeclaration_in_mediaBodyItem720);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:6: ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration
                    {
                    dbg.location(392,87);
                    pushFollow(FOLLOW_propertyDeclaration_in_mediaBodyItem747);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:7: {...}? sass_extend
                    {
                    dbg.location(393,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(393,25);
                    pushFollow(FOLLOW_sass_extend_in_mediaBodyItem757);
                    sass_extend();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:7: {...}? sass_debug
                    {
                    dbg.location(394,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(394,25);
                    pushFollow(FOLLOW_sass_debug_in_mediaBodyItem767);
                    sass_debug();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:7: {...}? sass_control
                    {
                    dbg.location(395,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(395,25);
                    pushFollow(FOLLOW_sass_control_in_mediaBodyItem777);
                    sass_control();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:7: {...}? sass_content
                    {
                    dbg.location(396,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(396,25);
                    pushFollow(FOLLOW_sass_content_in_mediaBodyItem787);
                    sass_content();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:397:7: rule
                    {
                    dbg.location(397,7);
                    pushFollow(FOLLOW_rule_in_mediaBodyItem795);
                    rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:398:7: page
                    {
                    dbg.location(398,7);
                    pushFollow(FOLLOW_page_in_mediaBodyItem803);
                    page();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:399:7: fontFace
                    {
                    dbg.location(399,7);
                    pushFollow(FOLLOW_fontFace_in_mediaBodyItem811);
                    fontFace();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:400:7: vendorAtRule
                    {
                    dbg.location(400,7);
                    pushFollow(FOLLOW_vendorAtRule_in_mediaBodyItem819);
                    vendorAtRule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:7: media
                    {
                    dbg.location(402,7);
                    pushFollow(FOLLOW_media_in_mediaBodyItem832);
                    media();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(403, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaBodyItem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaBodyItem"


    // $ANTLR start "mediaQueryList"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:405:1: mediaQueryList : mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )* ;
    public final void mediaQueryList() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQueryList");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(405, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:2: ( mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:4: mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*
            {
            dbg.location(406,4);
            pushFollow(FOLLOW_mediaQuery_in_mediaQueryList846);
            mediaQuery();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(406,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:15: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*
            try { dbg.enterSubRule(40);

            loop40:
            do {
                int alt40=2;
                try { dbg.enterDecision(40, decisionCanBacktrack[40]);

                try {
                    isCyclicDecision = true;
                    alt40 = dfa40.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(40);}

                switch (alt40) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:17: ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery
            	    {
            	    dbg.location(406,31);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:31: ( ws )?
            	    int alt38=2;
            	    try { dbg.enterSubRule(38);
            	    try { dbg.enterDecision(38, decisionCanBacktrack[38]);

            	    int LA38_0 = input.LA(1);

            	    if ( ((LA38_0>=WS && LA38_0<=COMMENT)) ) {
            	        alt38=1;
            	    }
            	    } finally {dbg.exitDecision(38);}

            	    switch (alt38) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:31: ws
            	            {
            	            dbg.location(406,31);
            	            pushFollow(FOLLOW_ws_in_mediaQueryList858);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(38);}

            	    dbg.location(406,35);
            	    match(input,COMMA,FOLLOW_COMMA_in_mediaQueryList861); if (state.failed) return ;
            	    dbg.location(406,41);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:41: ( ws )?
            	    int alt39=2;
            	    try { dbg.enterSubRule(39);
            	    try { dbg.enterDecision(39, decisionCanBacktrack[39]);

            	    int LA39_0 = input.LA(1);

            	    if ( ((LA39_0>=WS && LA39_0<=COMMENT)) ) {
            	        alt39=1;
            	    }
            	    } finally {dbg.exitDecision(39);}

            	    switch (alt39) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:41: ws
            	            {
            	            dbg.location(406,41);
            	            pushFollow(FOLLOW_ws_in_mediaQueryList863);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(39);}

            	    dbg.location(406,45);
            	    pushFollow(FOLLOW_mediaQuery_in_mediaQueryList866);
            	    mediaQuery();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);
            } finally {dbg.exitSubRule(40);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(407, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQueryList");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQueryList"


    // $ANTLR start "mediaQuery"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:409:1: mediaQuery : ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )* | mediaExpression ( ( ws )? AND ( ws )? mediaExpression )* | {...}? cp_variable );
    public final void mediaQuery() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQuery");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(409, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:2: ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )* | mediaExpression ( ( ws )? AND ( ws )? mediaExpression )* | {...}? cp_variable )
            int alt49=3;
            try { dbg.enterDecision(49, decisionCanBacktrack[49]);

            switch ( input.LA(1) ) {
            case IDENT:
            case ONLY:
            case NOT:
            case GEN:
            case HASH_SYMBOL:
                {
                alt49=1;
                }
                break;
            case LPAREN:
                {
                alt49=2;
                }
                break;
            case NAMESPACE_SYM:
            case CHARSET_SYM:
            case IMPORT_SYM:
            case MEDIA_SYM:
            case AT_IDENT:
            case MOZ_DOCUMENT_SYM:
            case WEBKIT_KEYFRAMES_SYM:
            case PAGE_SYM:
            case COUNTER_STYLE_SYM:
            case FONT_FACE_SYM:
            case TOPLEFTCORNER_SYM:
            case TOPLEFT_SYM:
            case TOPCENTER_SYM:
            case TOPRIGHT_SYM:
            case TOPRIGHTCORNER_SYM:
            case BOTTOMLEFTCORNER_SYM:
            case BOTTOMLEFT_SYM:
            case BOTTOMCENTER_SYM:
            case BOTTOMRIGHT_SYM:
            case BOTTOMRIGHTCORNER_SYM:
            case LEFTTOP_SYM:
            case LEFTMIDDLE_SYM:
            case LEFTBOTTOM_SYM:
            case RIGHTTOP_SYM:
            case RIGHTMIDDLE_SYM:
            case RIGHTBOTTOM_SYM:
            case SASS_VAR:
            case SASS_CONTENT:
            case SASS_MIXIN:
            case SASS_INCLUDE:
            case SASS_EXTEND:
            case SASS_DEBUG:
            case SASS_WARN:
            case SASS_IF:
            case SASS_ELSE:
            case SASS_FOR:
            case SASS_FUNCTION:
            case SASS_RETURN:
            case SASS_EACH:
            case SASS_WHILE:
                {
                alt49=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(49);}

            switch (alt49) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:5: ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )*
                    {
                    dbg.location(411,5);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:5: ( mediaQueryOperator ( ws )? )?
                    int alt42=2;
                    try { dbg.enterSubRule(42);
                    try { dbg.enterDecision(42, decisionCanBacktrack[42]);

                    int LA42_0 = input.LA(1);

                    if ( ((LA42_0>=ONLY && LA42_0<=NOT)) ) {
                        alt42=1;
                    }
                    } finally {dbg.exitDecision(42);}

                    switch (alt42) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:6: mediaQueryOperator ( ws )?
                            {
                            dbg.location(411,6);
                            pushFollow(FOLLOW_mediaQueryOperator_in_mediaQuery887);
                            mediaQueryOperator();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(411,25);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:25: ( ws )?
                            int alt41=2;
                            try { dbg.enterSubRule(41);
                            try { dbg.enterDecision(41, decisionCanBacktrack[41]);

                            int LA41_0 = input.LA(1);

                            if ( ((LA41_0>=WS && LA41_0<=COMMENT)) ) {
                                alt41=1;
                            }
                            } finally {dbg.exitDecision(41);}

                            switch (alt41) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:25: ws
                                    {
                                    dbg.location(411,25);
                                    pushFollow(FOLLOW_ws_in_mediaQuery889);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(41);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(42);}

                    dbg.location(411,33);
                    pushFollow(FOLLOW_mediaType_in_mediaQuery896);
                    mediaType();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(411,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:43: ( ( ws )? AND ( ws )? mediaExpression )*
                    try { dbg.enterSubRule(45);

                    loop45:
                    do {
                        int alt45=2;
                        try { dbg.enterDecision(45, decisionCanBacktrack[45]);

                        try {
                            isCyclicDecision = true;
                            alt45 = dfa45.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(45);}

                        switch (alt45) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:45: ( ws )? AND ( ws )? mediaExpression
                    	    {
                    	    dbg.location(411,45);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:45: ( ws )?
                    	    int alt43=2;
                    	    try { dbg.enterSubRule(43);
                    	    try { dbg.enterDecision(43, decisionCanBacktrack[43]);

                    	    int LA43_0 = input.LA(1);

                    	    if ( ((LA43_0>=WS && LA43_0<=COMMENT)) ) {
                    	        alt43=1;
                    	    }
                    	    } finally {dbg.exitDecision(43);}

                    	    switch (alt43) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:45: ws
                    	            {
                    	            dbg.location(411,45);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery900);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(43);}

                    	    dbg.location(411,49);
                    	    match(input,AND,FOLLOW_AND_in_mediaQuery903); if (state.failed) return ;
                    	    dbg.location(411,53);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:53: ( ws )?
                    	    int alt44=2;
                    	    try { dbg.enterSubRule(44);
                    	    try { dbg.enterDecision(44, decisionCanBacktrack[44]);

                    	    int LA44_0 = input.LA(1);

                    	    if ( ((LA44_0>=WS && LA44_0<=COMMENT)) ) {
                    	        alt44=1;
                    	    }
                    	    } finally {dbg.exitDecision(44);}

                    	    switch (alt44) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:53: ws
                    	            {
                    	            dbg.location(411,53);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery905);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(44);}

                    	    dbg.location(411,57);
                    	    pushFollow(FOLLOW_mediaExpression_in_mediaQuery908);
                    	    mediaExpression();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop45;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(45);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:412:7: mediaExpression ( ( ws )? AND ( ws )? mediaExpression )*
                    {
                    dbg.location(412,7);
                    pushFollow(FOLLOW_mediaExpression_in_mediaQuery919);
                    mediaExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(412,23);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:412:23: ( ( ws )? AND ( ws )? mediaExpression )*
                    try { dbg.enterSubRule(48);

                    loop48:
                    do {
                        int alt48=2;
                        try { dbg.enterDecision(48, decisionCanBacktrack[48]);

                        try {
                            isCyclicDecision = true;
                            alt48 = dfa48.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(48);}

                        switch (alt48) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:412:25: ( ws )? AND ( ws )? mediaExpression
                    	    {
                    	    dbg.location(412,25);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:412:25: ( ws )?
                    	    int alt46=2;
                    	    try { dbg.enterSubRule(46);
                    	    try { dbg.enterDecision(46, decisionCanBacktrack[46]);

                    	    int LA46_0 = input.LA(1);

                    	    if ( ((LA46_0>=WS && LA46_0<=COMMENT)) ) {
                    	        alt46=1;
                    	    }
                    	    } finally {dbg.exitDecision(46);}

                    	    switch (alt46) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:412:25: ws
                    	            {
                    	            dbg.location(412,25);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery923);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(46);}

                    	    dbg.location(412,29);
                    	    match(input,AND,FOLLOW_AND_in_mediaQuery926); if (state.failed) return ;
                    	    dbg.location(412,33);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:412:33: ( ws )?
                    	    int alt47=2;
                    	    try { dbg.enterSubRule(47);
                    	    try { dbg.enterDecision(47, decisionCanBacktrack[47]);

                    	    int LA47_0 = input.LA(1);

                    	    if ( ((LA47_0>=WS && LA47_0<=COMMENT)) ) {
                    	        alt47=1;
                    	    }
                    	    } finally {dbg.exitDecision(47);}

                    	    switch (alt47) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:412:33: ws
                    	            {
                    	            dbg.location(412,33);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery928);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(47);}

                    	    dbg.location(412,37);
                    	    pushFollow(FOLLOW_mediaExpression_in_mediaQuery931);
                    	    mediaExpression();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop48;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(48);}


                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:7: {...}? cp_variable
                    {
                    dbg.location(413,7);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaQuery", "isLessSource()");
                    }
                    dbg.location(413,25);
                    pushFollow(FOLLOW_cp_variable_in_mediaQuery944);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(414, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQuery");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQuery"


    // $ANTLR start "mediaQueryOperator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:1: mediaQueryOperator : ( ONLY | NOT );
    public final void mediaQueryOperator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQueryOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(416, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:3: ( ONLY | NOT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(417,3);
            if ( (input.LA(1)>=ONLY && input.LA(1)<=NOT) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(418, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQueryOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQueryOperator"


    // $ANTLR start "mediaType"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:420:1: mediaType : ( IDENT | GEN | {...}? sass_interpolation_expression_var );
    public final void mediaType() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaType");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(420, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:2: ( IDENT | GEN | {...}? sass_interpolation_expression_var )
            int alt50=3;
            try { dbg.enterDecision(50, decisionCanBacktrack[50]);

            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt50=1;
                }
                break;
            case GEN:
                {
                alt50=2;
                }
                break;
            case HASH_SYMBOL:
                {
                alt50=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(50);}

            switch (alt50) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:4: IDENT
                    {
                    dbg.location(421,4);
                    match(input,IDENT,FOLLOW_IDENT_in_mediaType977); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:12: GEN
                    {
                    dbg.location(421,12);
                    match(input,GEN,FOLLOW_GEN_in_mediaType981); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:18: {...}? sass_interpolation_expression_var
                    {
                    dbg.location(421,18);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaType", "isCssPreprocessorSource()");
                    }
                    dbg.location(421,47);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaType987);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(422, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaType");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaType"


    // $ANTLR start "mediaExpression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:424:1: mediaExpression : LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN ;
    public final void mediaExpression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(424, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:425:5: ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:5: LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN
            {
            dbg.location(426,5);
            match(input,LPAREN,FOLLOW_LPAREN_in_mediaExpression1007); if (state.failed) return ;
            dbg.location(426,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:12: ( ws )?
            int alt51=2;
            try { dbg.enterSubRule(51);
            try { dbg.enterDecision(51, decisionCanBacktrack[51]);

            int LA51_0 = input.LA(1);

            if ( ((LA51_0>=WS && LA51_0<=COMMENT)) ) {
                alt51=1;
            }
            } finally {dbg.exitDecision(51);}

            switch (alt51) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:12: ws
                    {
                    dbg.location(426,12);
                    pushFollow(FOLLOW_ws_in_mediaExpression1009);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(51);}

            dbg.location(426,16);
            pushFollow(FOLLOW_mediaFeature_in_mediaExpression1012);
            mediaFeature();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(426,29);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:29: ( mediaFeatureValue )?
            int alt52=2;
            try { dbg.enterSubRule(52);
            try { dbg.enterDecision(52, decisionCanBacktrack[52]);

            try {
                isCyclicDecision = true;
                alt52 = dfa52.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(52);}

            switch (alt52) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:29: mediaFeatureValue
                    {
                    dbg.location(426,29);
                    pushFollow(FOLLOW_mediaFeatureValue_in_mediaExpression1014);
                    mediaFeatureValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(52);}

            dbg.location(426,48);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:48: ( ws )?
            int alt53=2;
            try { dbg.enterSubRule(53);
            try { dbg.enterDecision(53, decisionCanBacktrack[53]);

            int LA53_0 = input.LA(1);

            if ( ((LA53_0>=WS && LA53_0<=COMMENT)) ) {
                alt53=1;
            }
            } finally {dbg.exitDecision(53);}

            switch (alt53) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:48: ws
                    {
                    dbg.location(426,48);
                    pushFollow(FOLLOW_ws_in_mediaExpression1017);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(53);}

            dbg.location(426,52);
            match(input,RPAREN,FOLLOW_RPAREN_in_mediaExpression1020); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(427, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaExpression"


    // $ANTLR start "mediaFeatureValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:429:1: mediaFeatureValue : ( ws )? COLON ( ws )? ({...}? cp_expression | expression ) ;
    public final void mediaFeatureValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaFeatureValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(429, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:430:5: ( ( ws )? COLON ( ws )? ({...}? cp_expression | expression ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:5: ( ws )? COLON ( ws )? ({...}? cp_expression | expression )
            {
            dbg.location(431,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:5: ( ws )?
            int alt54=2;
            try { dbg.enterSubRule(54);
            try { dbg.enterDecision(54, decisionCanBacktrack[54]);

            int LA54_0 = input.LA(1);

            if ( ((LA54_0>=WS && LA54_0<=COMMENT)) ) {
                alt54=1;
            }
            } finally {dbg.exitDecision(54);}

            switch (alt54) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:5: ws
                    {
                    dbg.location(431,5);
                    pushFollow(FOLLOW_ws_in_mediaFeatureValue1045);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(54);}

            dbg.location(431,9);
            match(input,COLON,FOLLOW_COLON_in_mediaFeatureValue1048); if (state.failed) return ;
            dbg.location(431,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:15: ( ws )?
            int alt55=2;
            try { dbg.enterSubRule(55);
            try { dbg.enterDecision(55, decisionCanBacktrack[55]);

            int LA55_0 = input.LA(1);

            if ( ((LA55_0>=WS && LA55_0<=COMMENT)) ) {
                alt55=1;
            }
            } finally {dbg.exitDecision(55);}

            switch (alt55) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:15: ws
                    {
                    dbg.location(431,15);
                    pushFollow(FOLLOW_ws_in_mediaFeatureValue1050);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(55);}

            dbg.location(432,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:432:5: ({...}? cp_expression | expression )
            int alt56=2;
            try { dbg.enterSubRule(56);
            try { dbg.enterDecision(56, decisionCanBacktrack[56]);

            try {
                isCyclicDecision = true;
                alt56 = dfa56.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(56);}

            switch (alt56) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:433:9: {...}? cp_expression
                    {
                    dbg.location(433,9);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaFeatureValue", "isCssPreprocessorSource()");
                    }
                    dbg.location(433,38);
                    pushFollow(FOLLOW_cp_expression_in_mediaFeatureValue1070);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:435:9: expression
                    {
                    dbg.location(435,9);
                    pushFollow(FOLLOW_expression_in_mediaFeatureValue1090);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(56);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(437, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaFeatureValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaFeatureValue"


    // $ANTLR start "mediaFeature"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:1: mediaFeature : ( IDENT | GEN | {...}? ( cp_variable | sass_interpolation_expression_var ) );
    public final void mediaFeature() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaFeature");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(439, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:440:2: ( IDENT | GEN | {...}? ( cp_variable | sass_interpolation_expression_var ) )
            int alt58=3;
            try { dbg.enterDecision(58, decisionCanBacktrack[58]);

            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt58=1;
                }
                break;
            case GEN:
                {
                alt58=2;
                }
                break;
            case NAMESPACE_SYM:
            case CHARSET_SYM:
            case IMPORT_SYM:
            case MEDIA_SYM:
            case AT_IDENT:
            case MOZ_DOCUMENT_SYM:
            case WEBKIT_KEYFRAMES_SYM:
            case PAGE_SYM:
            case COUNTER_STYLE_SYM:
            case FONT_FACE_SYM:
            case TOPLEFTCORNER_SYM:
            case TOPLEFT_SYM:
            case TOPCENTER_SYM:
            case TOPRIGHT_SYM:
            case TOPRIGHTCORNER_SYM:
            case BOTTOMLEFTCORNER_SYM:
            case BOTTOMLEFT_SYM:
            case BOTTOMCENTER_SYM:
            case BOTTOMRIGHT_SYM:
            case BOTTOMRIGHTCORNER_SYM:
            case LEFTTOP_SYM:
            case LEFTMIDDLE_SYM:
            case LEFTBOTTOM_SYM:
            case RIGHTTOP_SYM:
            case RIGHTMIDDLE_SYM:
            case RIGHTBOTTOM_SYM:
            case HASH_SYMBOL:
            case SASS_VAR:
            case SASS_CONTENT:
            case SASS_MIXIN:
            case SASS_INCLUDE:
            case SASS_EXTEND:
            case SASS_DEBUG:
            case SASS_WARN:
            case SASS_IF:
            case SASS_ELSE:
            case SASS_FOR:
            case SASS_FUNCTION:
            case SASS_RETURN:
            case SASS_EACH:
            case SASS_WHILE:
                {
                alt58=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(58);}

            switch (alt58) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:440:4: IDENT
                    {
                    dbg.location(440,4);
                    match(input,IDENT,FOLLOW_IDENT_in_mediaFeature1111); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:440:12: GEN
                    {
                    dbg.location(440,12);
                    match(input,GEN,FOLLOW_GEN_in_mediaFeature1115); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:440:18: {...}? ( cp_variable | sass_interpolation_expression_var )
                    {
                    dbg.location(440,18);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaFeature", "isCssPreprocessorSource()");
                    }
                    dbg.location(440,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:440:47: ( cp_variable | sass_interpolation_expression_var )
                    int alt57=2;
                    try { dbg.enterSubRule(57);
                    try { dbg.enterDecision(57, decisionCanBacktrack[57]);

                    int LA57_0 = input.LA(1);

                    if ( (LA57_0==NAMESPACE_SYM||(LA57_0>=CHARSET_SYM && LA57_0<=IMPORT_SYM)||LA57_0==MEDIA_SYM||(LA57_0>=AT_IDENT && LA57_0<=MOZ_DOCUMENT_SYM)||LA57_0==WEBKIT_KEYFRAMES_SYM||(LA57_0>=PAGE_SYM && LA57_0<=RIGHTBOTTOM_SYM)||LA57_0==SASS_VAR||(LA57_0>=SASS_CONTENT && LA57_0<=SASS_WHILE)) ) {
                        alt57=1;
                    }
                    else if ( (LA57_0==HASH_SYMBOL) ) {
                        alt57=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 57, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(57);}

                    switch (alt57) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:440:49: cp_variable
                            {
                            dbg.location(440,49);
                            pushFollow(FOLLOW_cp_variable_in_mediaFeature1123);
                            cp_variable();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:440:63: sass_interpolation_expression_var
                            {
                            dbg.location(440,63);
                            pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaFeature1127);
                            sass_interpolation_expression_var();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(57);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(441, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaFeature");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaFeature"


    // $ANTLR start "body"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:443:2: body : ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
    public final void body() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "body");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(443, 2);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:5: ( ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:5: ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            {
            dbg.location(445,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:5: ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            int cnt63=0;
            try { dbg.enterSubRule(63);

            loop63:
            do {
                int alt63=3;
                try { dbg.enterDecision(63, decisionCanBacktrack[63]);

                int LA63_0 = input.LA(1);

                if ( (LA63_0==NAMESPACE_SYM||LA63_0==IDENT||(LA63_0>=CHARSET_SYM && LA63_0<=MEDIA_SYM)||LA63_0==GEN||(LA63_0>=COLON && LA63_0<=MOZ_DOCUMENT_SYM)||LA63_0==WEBKIT_KEYFRAMES_SYM||(LA63_0>=PAGE_SYM && LA63_0<=RIGHTBOTTOM_SYM)||(LA63_0>=MINUS && LA63_0<=PLUS)||(LA63_0>=GREATER && LA63_0<=PIPE)||LA63_0==LESS_AND||(LA63_0>=RBRACKET && LA63_0<=SASS_VAR)||(LA63_0>=SASS_CONTENT && LA63_0<=SASS_WHILE)||LA63_0==AT_SIGN) ) {
                    alt63=1;
                }
                else if ( (LA63_0==SEMI) ) {
                    alt63=2;
                }


                } finally {dbg.exitDecision(63);}

                switch (alt63) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:10: ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    {
            	    dbg.location(446,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:10: ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:12: bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
            	    {
            	    dbg.location(446,12);
            	    pushFollow(FOLLOW_bodyItem_in_body1164);
            	    bodyItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(446,21);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:21: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
            	    int alt60=2;
            	    try { dbg.enterSubRule(60);
            	    try { dbg.enterDecision(60, decisionCanBacktrack[60]);

            	    try {
            	        isCyclicDecision = true;
            	        alt60 = dfa60.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(60);}

            	    switch (alt60) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:22: ( ( ws )? SEMI )=> ( ws )? SEMI
            	            {
            	            dbg.location(446,34);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:34: ( ws )?
            	            int alt59=2;
            	            try { dbg.enterSubRule(59);
            	            try { dbg.enterDecision(59, decisionCanBacktrack[59]);

            	            int LA59_0 = input.LA(1);

            	            if ( ((LA59_0>=WS && LA59_0<=COMMENT)) ) {
            	                alt59=1;
            	            }
            	            } finally {dbg.exitDecision(59);}

            	            switch (alt59) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:34: ws
            	                    {
            	                    dbg.location(446,34);
            	                    pushFollow(FOLLOW_ws_in_body1174);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(59);}

            	            dbg.location(446,38);
            	            match(input,SEMI,FOLLOW_SEMI_in_body1177); if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(60);}

            	    dbg.location(446,45);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:45: ( ws )?
            	    int alt61=2;
            	    try { dbg.enterSubRule(61);
            	    try { dbg.enterDecision(61, decisionCanBacktrack[61]);

            	    int LA61_0 = input.LA(1);

            	    if ( ((LA61_0>=WS && LA61_0<=COMMENT)) ) {
            	        alt61=1;
            	    }
            	    } finally {dbg.exitDecision(61);}

            	    switch (alt61) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:45: ws
            	            {
            	            dbg.location(446,45);
            	            pushFollow(FOLLOW_ws_in_body1181);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(61);}


            	    }


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:10: ( SEMI ( ws )? )
            	    {
            	    dbg.location(448,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:10: ( SEMI ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:12: SEMI ( ws )?
            	    {
            	    dbg.location(448,12);
            	    match(input,SEMI,FOLLOW_SEMI_in_body1208); if (state.failed) return ;
            	    dbg.location(448,17);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:17: ( ws )?
            	    int alt62=2;
            	    try { dbg.enterSubRule(62);
            	    try { dbg.enterDecision(62, decisionCanBacktrack[62]);

            	    int LA62_0 = input.LA(1);

            	    if ( ((LA62_0>=WS && LA62_0<=COMMENT)) ) {
            	        alt62=1;
            	    }
            	    } finally {dbg.exitDecision(62);}

            	    switch (alt62) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:17: ws
            	            {
            	            dbg.location(448,17);
            	            pushFollow(FOLLOW_ws_in_body1210);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(62);}


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt63 >= 1 ) break loop63;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(63, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt63++;
            } while (true);
            } finally {dbg.exitSubRule(63);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(450, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "body");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "body"


    // $ANTLR start "bodyItem"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:452:1: bodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | {...}? ( cp_mixin_call ( ws )? SEMI )=> cp_mixin_call | {...}? ( cp_mixin_call )=> cp_mixin_call | rule | at_rule | {...}? cp_variable_declaration | {...}? importItem | {...}? sass_debug | {...}? sass_control | {...}? sass_function_declaration );
    public final void bodyItem() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "bodyItem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(452, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:5: ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | {...}? ( cp_mixin_call ( ws )? SEMI )=> cp_mixin_call | {...}? ( cp_mixin_call )=> cp_mixin_call | rule | at_rule | {...}? cp_variable_declaration | {...}? importItem | {...}? sass_debug | {...}? sass_control | {...}? sass_function_declaration )
            int alt64=10;
            try { dbg.enterDecision(64, decisionCanBacktrack[64]);

            try {
                isCyclicDecision = true;
                alt64 = dfa64.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(64);}

            switch (alt64) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:9: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration
                    {
                    dbg.location(454,96);
                    pushFollow(FOLLOW_cp_mixin_declaration_in_bodyItem1284);
                    cp_mixin_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:456:11: {...}? ( cp_mixin_call ( ws )? SEMI )=> cp_mixin_call
                    {
                    dbg.location(456,11);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isLessSource()");
                    }
                    dbg.location(456,55);
                    pushFollow(FOLLOW_cp_mixin_call_in_bodyItem1316);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:457:11: {...}? ( cp_mixin_call )=> cp_mixin_call
                    {
                    dbg.location(457,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(457,46);
                    pushFollow(FOLLOW_cp_mixin_call_in_bodyItem1334);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:458:8: rule
                    {
                    dbg.location(458,8);
                    pushFollow(FOLLOW_rule_in_bodyItem1343);
                    rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:11: at_rule
                    {
                    dbg.location(459,11);
                    pushFollow(FOLLOW_at_rule_in_bodyItem1355);
                    at_rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:460:11: {...}? cp_variable_declaration
                    {
                    dbg.location(460,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isCssPreprocessorSource()");
                    }
                    dbg.location(460,40);
                    pushFollow(FOLLOW_cp_variable_declaration_in_bodyItem1369);
                    cp_variable_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:11: {...}? importItem
                    {
                    dbg.location(462,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isCssPreprocessorSource()");
                    }
                    dbg.location(462,40);
                    pushFollow(FOLLOW_importItem_in_bodyItem1392);
                    importItem();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:463:11: {...}? sass_debug
                    {
                    dbg.location(463,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(463,29);
                    pushFollow(FOLLOW_sass_debug_in_bodyItem1406);
                    sass_debug();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:464:11: {...}? sass_control
                    {
                    dbg.location(464,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(464,29);
                    pushFollow(FOLLOW_sass_control_in_bodyItem1420);
                    sass_control();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:11: {...}? sass_function_declaration
                    {
                    dbg.location(465,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(465,29);
                    pushFollow(FOLLOW_sass_function_declaration_in_bodyItem1434);
                    sass_function_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(NL)); 
                
        }
        finally {
        }
        dbg.location(466, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bodyItem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "bodyItem"


    // $ANTLR start "at_rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:471:1: at_rule : ( media | page | counterStyle | fontFace | vendorAtRule );
    public final void at_rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "at_rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(471, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:472:5: ( media | page | counterStyle | fontFace | vendorAtRule )
            int alt65=5;
            try { dbg.enterDecision(65, decisionCanBacktrack[65]);

            switch ( input.LA(1) ) {
            case MEDIA_SYM:
                {
                alt65=1;
                }
                break;
            case PAGE_SYM:
                {
                alt65=2;
                }
                break;
            case COUNTER_STYLE_SYM:
                {
                alt65=3;
                }
                break;
            case FONT_FACE_SYM:
                {
                alt65=4;
                }
                break;
            case AT_IDENT:
            case MOZ_DOCUMENT_SYM:
            case WEBKIT_KEYFRAMES_SYM:
                {
                alt65=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(65);}

            switch (alt65) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:473:5: media
                    {
                    dbg.location(473,5);
                    pushFollow(FOLLOW_media_in_at_rule1464);
                    media();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:7: page
                    {
                    dbg.location(474,7);
                    pushFollow(FOLLOW_page_in_at_rule1472);
                    page();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:475:7: counterStyle
                    {
                    dbg.location(475,7);
                    pushFollow(FOLLOW_counterStyle_in_at_rule1480);
                    counterStyle();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:476:7: fontFace
                    {
                    dbg.location(476,7);
                    pushFollow(FOLLOW_fontFace_in_at_rule1488);
                    fontFace();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:477:7: vendorAtRule
                    {
                    dbg.location(477,7);
                    pushFollow(FOLLOW_vendorAtRule_in_at_rule1496);
                    vendorAtRule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(478, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "at_rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "at_rule"


    // $ANTLR start "vendorAtRule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:1: vendorAtRule : ( moz_document | webkitKeyframes | generic_at_rule );
    public final void vendorAtRule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "vendorAtRule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(480, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:481:1: ( moz_document | webkitKeyframes | generic_at_rule )
            int alt66=3;
            try { dbg.enterDecision(66, decisionCanBacktrack[66]);

            switch ( input.LA(1) ) {
            case MOZ_DOCUMENT_SYM:
                {
                alt66=1;
                }
                break;
            case WEBKIT_KEYFRAMES_SYM:
                {
                alt66=2;
                }
                break;
            case AT_IDENT:
                {
                alt66=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(66);}

            switch (alt66) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:481:3: moz_document
                    {
                    dbg.location(481,3);
                    pushFollow(FOLLOW_moz_document_in_vendorAtRule1513);
                    moz_document();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:481:18: webkitKeyframes
                    {
                    dbg.location(481,18);
                    pushFollow(FOLLOW_webkitKeyframes_in_vendorAtRule1517);
                    webkitKeyframes();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:481:36: generic_at_rule
                    {
                    dbg.location(481,36);
                    pushFollow(FOLLOW_generic_at_rule_in_vendorAtRule1521);
                    generic_at_rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(481, 51);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vendorAtRule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "vendorAtRule"


    // $ANTLR start "atRuleId"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:483:1: atRuleId : ( IDENT | STRING );
    public final void atRuleId() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "atRuleId");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(483, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:484:2: ( IDENT | STRING )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(484,2);
            if ( (input.LA(1)>=IDENT && input.LA(1)<=STRING) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(486, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "atRuleId");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "atRuleId"


    // $ANTLR start "generic_at_rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:1: generic_at_rule : AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE ;
    public final void generic_at_rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "generic_at_rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(488, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:489:5: ( AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:489:7: AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE
            {
            dbg.location(489,7);
            match(input,AT_IDENT,FOLLOW_AT_IDENT_in_generic_at_rule1557); if (state.failed) return ;
            dbg.location(489,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:489:16: ( ws )?
            int alt67=2;
            try { dbg.enterSubRule(67);
            try { dbg.enterDecision(67, decisionCanBacktrack[67]);

            int LA67_0 = input.LA(1);

            if ( ((LA67_0>=WS && LA67_0<=COMMENT)) ) {
                alt67=1;
            }
            } finally {dbg.exitDecision(67);}

            switch (alt67) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:489:16: ws
                    {
                    dbg.location(489,16);
                    pushFollow(FOLLOW_ws_in_generic_at_rule1559);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(67);}

            dbg.location(489,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:489:20: ( atRuleId ( ws )? )?
            int alt69=2;
            try { dbg.enterSubRule(69);
            try { dbg.enterDecision(69, decisionCanBacktrack[69]);

            int LA69_0 = input.LA(1);

            if ( ((LA69_0>=IDENT && LA69_0<=STRING)) ) {
                alt69=1;
            }
            } finally {dbg.exitDecision(69);}

            switch (alt69) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:489:22: atRuleId ( ws )?
                    {
                    dbg.location(489,22);
                    pushFollow(FOLLOW_atRuleId_in_generic_at_rule1564);
                    atRuleId();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(489,31);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:489:31: ( ws )?
                    int alt68=2;
                    try { dbg.enterSubRule(68);
                    try { dbg.enterDecision(68, decisionCanBacktrack[68]);

                    int LA68_0 = input.LA(1);

                    if ( ((LA68_0>=WS && LA68_0<=COMMENT)) ) {
                        alt68=1;
                    }
                    } finally {dbg.exitDecision(68);}

                    switch (alt68) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:489:31: ws
                            {
                            dbg.location(489,31);
                            pushFollow(FOLLOW_ws_in_generic_at_rule1566);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(68);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(69);}

            dbg.location(490,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_generic_at_rule1581); if (state.failed) return ;
            dbg.location(491,10);
            pushFollow(FOLLOW_syncTo_RBRACE_in_generic_at_rule1593);
            syncTo_RBRACE();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(492,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_generic_at_rule1603); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(493, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "generic_at_rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "generic_at_rule"


    // $ANTLR start "moz_document"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:1: moz_document : MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE ;
    public final void moz_document() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "moz_document");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(494, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:2: ( MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:496:2: MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE
            {
            dbg.location(496,2);
            match(input,MOZ_DOCUMENT_SYM,FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document1619); if (state.failed) return ;
            dbg.location(496,19);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:496:19: ( ws )?
            int alt70=2;
            try { dbg.enterSubRule(70);
            try { dbg.enterDecision(70, decisionCanBacktrack[70]);

            int LA70_0 = input.LA(1);

            if ( ((LA70_0>=WS && LA70_0<=COMMENT)) ) {
                alt70=1;
            }
            } finally {dbg.exitDecision(70);}

            switch (alt70) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:496:19: ws
                    {
                    dbg.location(496,19);
                    pushFollow(FOLLOW_ws_in_moz_document1621);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(70);}

            dbg.location(496,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:496:23: ( moz_document_function ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:496:25: moz_document_function ( ws )?
            {
            dbg.location(496,25);
            pushFollow(FOLLOW_moz_document_function_in_moz_document1626);
            moz_document_function();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(496,47);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:496:47: ( ws )?
            int alt71=2;
            try { dbg.enterSubRule(71);
            try { dbg.enterDecision(71, decisionCanBacktrack[71]);

            int LA71_0 = input.LA(1);

            if ( ((LA71_0>=WS && LA71_0<=COMMENT)) ) {
                alt71=1;
            }
            } finally {dbg.exitDecision(71);}

            switch (alt71) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:496:47: ws
                    {
                    dbg.location(496,47);
                    pushFollow(FOLLOW_ws_in_moz_document1628);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(71);}


            }

            dbg.location(496,52);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:496:52: ( COMMA ( ws )? moz_document_function ( ws )? )*
            try { dbg.enterSubRule(74);

            loop74:
            do {
                int alt74=2;
                try { dbg.enterDecision(74, decisionCanBacktrack[74]);

                int LA74_0 = input.LA(1);

                if ( (LA74_0==COMMA) ) {
                    alt74=1;
                }


                } finally {dbg.exitDecision(74);}

                switch (alt74) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:496:54: COMMA ( ws )? moz_document_function ( ws )?
            	    {
            	    dbg.location(496,54);
            	    match(input,COMMA,FOLLOW_COMMA_in_moz_document1634); if (state.failed) return ;
            	    dbg.location(496,60);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:496:60: ( ws )?
            	    int alt72=2;
            	    try { dbg.enterSubRule(72);
            	    try { dbg.enterDecision(72, decisionCanBacktrack[72]);

            	    int LA72_0 = input.LA(1);

            	    if ( ((LA72_0>=WS && LA72_0<=COMMENT)) ) {
            	        alt72=1;
            	    }
            	    } finally {dbg.exitDecision(72);}

            	    switch (alt72) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:496:60: ws
            	            {
            	            dbg.location(496,60);
            	            pushFollow(FOLLOW_ws_in_moz_document1636);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(72);}

            	    dbg.location(496,64);
            	    pushFollow(FOLLOW_moz_document_function_in_moz_document1639);
            	    moz_document_function();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(496,86);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:496:86: ( ws )?
            	    int alt73=2;
            	    try { dbg.enterSubRule(73);
            	    try { dbg.enterDecision(73, decisionCanBacktrack[73]);

            	    int LA73_0 = input.LA(1);

            	    if ( ((LA73_0>=WS && LA73_0<=COMMENT)) ) {
            	        alt73=1;
            	    }
            	    } finally {dbg.exitDecision(73);}

            	    switch (alt73) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:496:86: ws
            	            {
            	            dbg.location(496,86);
            	            pushFollow(FOLLOW_ws_in_moz_document1641);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(73);}


            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);
            } finally {dbg.exitSubRule(74);}

            dbg.location(497,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_moz_document1648); if (state.failed) return ;
            dbg.location(497,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:497:9: ( ws )?
            int alt75=2;
            try { dbg.enterSubRule(75);
            try { dbg.enterDecision(75, decisionCanBacktrack[75]);

            int LA75_0 = input.LA(1);

            if ( ((LA75_0>=WS && LA75_0<=COMMENT)) ) {
                alt75=1;
            }
            } finally {dbg.exitDecision(75);}

            switch (alt75) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:497:9: ws
                    {
                    dbg.location(497,9);
                    pushFollow(FOLLOW_ws_in_moz_document1650);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(75);}

            dbg.location(498,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:498:3: ( body )?
            int alt76=2;
            try { dbg.enterSubRule(76);
            try { dbg.enterDecision(76, decisionCanBacktrack[76]);

            int LA76_0 = input.LA(1);

            if ( ((LA76_0>=NAMESPACE_SYM && LA76_0<=IDENT)||(LA76_0>=CHARSET_SYM && LA76_0<=MEDIA_SYM)||LA76_0==GEN||(LA76_0>=COLON && LA76_0<=MOZ_DOCUMENT_SYM)||LA76_0==WEBKIT_KEYFRAMES_SYM||(LA76_0>=PAGE_SYM && LA76_0<=RIGHTBOTTOM_SYM)||(LA76_0>=MINUS && LA76_0<=PLUS)||(LA76_0>=GREATER && LA76_0<=PIPE)||LA76_0==LESS_AND||(LA76_0>=RBRACKET && LA76_0<=SASS_VAR)||(LA76_0>=SASS_CONTENT && LA76_0<=SASS_WHILE)||LA76_0==AT_SIGN) ) {
                alt76=1;
            }
            } finally {dbg.exitDecision(76);}

            switch (alt76) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:498:3: body
                    {
                    dbg.location(498,3);
                    pushFollow(FOLLOW_body_in_moz_document1655);
                    body();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(76);}

            dbg.location(499,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_moz_document1660); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(500, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moz_document");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "moz_document"


    // $ANTLR start "moz_document_function"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:1: moz_document_function : ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP );
    public final void moz_document_function() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "moz_document_function");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(502, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:503:2: ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(503,2);
            if ( input.LA(1)==URI||(input.LA(1)>=MOZ_URL_PREFIX && input.LA(1)<=MOZ_REGEXP) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(505, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moz_document_function");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "moz_document_function"


    // $ANTLR start "webkitKeyframes"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:1: webkitKeyframes : WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE ;
    public final void webkitKeyframes() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframes");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(508, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:509:2: ( WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:510:2: WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE
            {
            dbg.location(510,2);
            match(input,WEBKIT_KEYFRAMES_SYM,FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes1701); if (state.failed) return ;
            dbg.location(510,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:510:23: ( ws )?
            int alt77=2;
            try { dbg.enterSubRule(77);
            try { dbg.enterDecision(77, decisionCanBacktrack[77]);

            int LA77_0 = input.LA(1);

            if ( ((LA77_0>=WS && LA77_0<=COMMENT)) ) {
                alt77=1;
            }
            } finally {dbg.exitDecision(77);}

            switch (alt77) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:510:23: ws
                    {
                    dbg.location(510,23);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1703);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(77);}

            dbg.location(510,27);
            pushFollow(FOLLOW_atRuleId_in_webkitKeyframes1706);
            atRuleId();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(510,36);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:510:36: ( ws )?
            int alt78=2;
            try { dbg.enterSubRule(78);
            try { dbg.enterDecision(78, decisionCanBacktrack[78]);

            int LA78_0 = input.LA(1);

            if ( ((LA78_0>=WS && LA78_0<=COMMENT)) ) {
                alt78=1;
            }
            } finally {dbg.exitDecision(78);}

            switch (alt78) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:510:36: ws
                    {
                    dbg.location(510,36);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1708);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(78);}

            dbg.location(511,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframes1713); if (state.failed) return ;
            dbg.location(511,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:511:9: ( ws )?
            int alt79=2;
            try { dbg.enterSubRule(79);
            try { dbg.enterDecision(79, decisionCanBacktrack[79]);

            int LA79_0 = input.LA(1);

            if ( ((LA79_0>=WS && LA79_0<=COMMENT)) ) {
                alt79=1;
            }
            } finally {dbg.exitDecision(79);}

            switch (alt79) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:511:9: ws
                    {
                    dbg.location(511,9);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1715);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(79);}

            dbg.location(512,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:512:3: ( webkitKeyframesBlock ( ws )? )*
            try { dbg.enterSubRule(81);

            loop81:
            do {
                int alt81=2;
                try { dbg.enterDecision(81, decisionCanBacktrack[81]);

                int LA81_0 = input.LA(1);

                if ( (LA81_0==IDENT||LA81_0==PERCENTAGE) ) {
                    alt81=1;
                }


                } finally {dbg.exitDecision(81);}

                switch (alt81) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:512:5: webkitKeyframesBlock ( ws )?
            	    {
            	    dbg.location(512,5);
            	    pushFollow(FOLLOW_webkitKeyframesBlock_in_webkitKeyframes1722);
            	    webkitKeyframesBlock();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(512,26);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:512:26: ( ws )?
            	    int alt80=2;
            	    try { dbg.enterSubRule(80);
            	    try { dbg.enterDecision(80, decisionCanBacktrack[80]);

            	    int LA80_0 = input.LA(1);

            	    if ( ((LA80_0>=WS && LA80_0<=COMMENT)) ) {
            	        alt80=1;
            	    }
            	    } finally {dbg.exitDecision(80);}

            	    switch (alt80) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:512:26: ws
            	            {
            	            dbg.location(512,26);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframes1724);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(80);}


            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);
            } finally {dbg.exitSubRule(81);}

            dbg.location(513,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframes1731); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(514, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframes");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframes"


    // $ANTLR start "webkitKeyframesBlock"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:1: webkitKeyframesBlock : webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void webkitKeyframesBlock() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframesBlock");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(516, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:517:2: ( webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:518:2: webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(518,2);
            pushFollow(FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock1744);
            webkitKeyframeSelectors();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(518,26);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:518:26: ( ws )?
            int alt82=2;
            try { dbg.enterSubRule(82);
            try { dbg.enterDecision(82, decisionCanBacktrack[82]);

            int LA82_0 = input.LA(1);

            if ( ((LA82_0>=WS && LA82_0<=COMMENT)) ) {
                alt82=1;
            }
            } finally {dbg.exitDecision(82);}

            switch (alt82) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:518:26: ws
                    {
                    dbg.location(518,26);
                    pushFollow(FOLLOW_ws_in_webkitKeyframesBlock1746);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(82);}

            dbg.location(519,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframesBlock1750); if (state.failed) return ;
            dbg.location(519,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:519:10: ( ws )?
            int alt83=2;
            try { dbg.enterSubRule(83);
            try { dbg.enterDecision(83, decisionCanBacktrack[83]);

            int LA83_0 = input.LA(1);

            if ( ((LA83_0>=WS && LA83_0<=COMMENT)) ) {
                alt83=1;
            }
            } finally {dbg.exitDecision(83);}

            switch (alt83) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:519:10: ws
                    {
                    dbg.location(519,10);
                    pushFollow(FOLLOW_ws_in_webkitKeyframesBlock1753);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(83);}

            dbg.location(519,14);
            pushFollow(FOLLOW_syncToFollow_in_webkitKeyframesBlock1756);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(520,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:3: ( declarations )?
            int alt84=2;
            try { dbg.enterSubRule(84);
            try { dbg.enterDecision(84, decisionCanBacktrack[84]);

            int LA84_0 = input.LA(1);

            if ( ((LA84_0>=NAMESPACE_SYM && LA84_0<=IDENT)||(LA84_0>=CHARSET_SYM && LA84_0<=MEDIA_SYM)||LA84_0==GEN||(LA84_0>=COLON && LA84_0<=MOZ_DOCUMENT_SYM)||LA84_0==WEBKIT_KEYFRAMES_SYM||(LA84_0>=PAGE_SYM && LA84_0<=RIGHTBOTTOM_SYM)||(LA84_0>=MINUS && LA84_0<=PLUS)||(LA84_0>=GREATER && LA84_0<=PIPE)||LA84_0==LESS_AND||(LA84_0>=RBRACKET && LA84_0<=SASS_VAR)||(LA84_0>=SASS_CONTENT && LA84_0<=SASS_WHILE)||LA84_0==AT_SIGN) ) {
                alt84=1;
            }
            } finally {dbg.exitDecision(84);}

            switch (alt84) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:3: declarations
                    {
                    dbg.location(520,3);
                    pushFollow(FOLLOW_declarations_in_webkitKeyframesBlock1760);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(84);}

            dbg.location(521,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframesBlock1764); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(522, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframesBlock");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframesBlock"


    // $ANTLR start "webkitKeyframeSelectors"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:1: webkitKeyframeSelectors : ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )* ;
    public final void webkitKeyframeSelectors() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframeSelectors");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(524, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:525:2: ( ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:526:2: ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*
            {
            dbg.location(526,2);
            if ( input.LA(1)==IDENT||input.LA(1)==PERCENTAGE ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(526,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:526:25: ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*
            try { dbg.enterSubRule(87);

            loop87:
            do {
                int alt87=2;
                try { dbg.enterDecision(87, decisionCanBacktrack[87]);

                try {
                    isCyclicDecision = true;
                    alt87 = dfa87.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(87);}

                switch (alt87) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:526:27: ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE )
            	    {
            	    dbg.location(526,27);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:526:27: ( ws )?
            	    int alt85=2;
            	    try { dbg.enterSubRule(85);
            	    try { dbg.enterDecision(85, decisionCanBacktrack[85]);

            	    int LA85_0 = input.LA(1);

            	    if ( ((LA85_0>=WS && LA85_0<=COMMENT)) ) {
            	        alt85=1;
            	    }
            	    } finally {dbg.exitDecision(85);}

            	    switch (alt85) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:526:27: ws
            	            {
            	            dbg.location(526,27);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors1791);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(85);}

            	    dbg.location(526,31);
            	    match(input,COMMA,FOLLOW_COMMA_in_webkitKeyframeSelectors1794); if (state.failed) return ;
            	    dbg.location(526,37);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:526:37: ( ws )?
            	    int alt86=2;
            	    try { dbg.enterSubRule(86);
            	    try { dbg.enterDecision(86, decisionCanBacktrack[86]);

            	    int LA86_0 = input.LA(1);

            	    if ( ((LA86_0>=WS && LA86_0<=COMMENT)) ) {
            	        alt86=1;
            	    }
            	    } finally {dbg.exitDecision(86);}

            	    switch (alt86) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:526:37: ws
            	            {
            	            dbg.location(526,37);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors1796);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(86);}

            	    dbg.location(526,41);
            	    if ( input.LA(1)==IDENT||input.LA(1)==PERCENTAGE ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);
            } finally {dbg.exitSubRule(87);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(527, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframeSelectors");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframeSelectors"


    // $ANTLR start "page"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:529:1: page : PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE ;
    public final void page() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "page");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(529, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:5: ( PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:7: PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE
            {
            dbg.location(530,7);
            match(input,PAGE_SYM,FOLLOW_PAGE_SYM_in_page1828); if (state.failed) return ;
            dbg.location(530,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:16: ( ws )?
            int alt88=2;
            try { dbg.enterSubRule(88);
            try { dbg.enterDecision(88, decisionCanBacktrack[88]);

            int LA88_0 = input.LA(1);

            if ( ((LA88_0>=WS && LA88_0<=COMMENT)) ) {
                alt88=1;
            }
            } finally {dbg.exitDecision(88);}

            switch (alt88) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:16: ws
                    {
                    dbg.location(530,16);
                    pushFollow(FOLLOW_ws_in_page1830);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(88);}

            dbg.location(530,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:20: ( IDENT ( ws )? )?
            int alt90=2;
            try { dbg.enterSubRule(90);
            try { dbg.enterDecision(90, decisionCanBacktrack[90]);

            int LA90_0 = input.LA(1);

            if ( (LA90_0==IDENT) ) {
                alt90=1;
            }
            } finally {dbg.exitDecision(90);}

            switch (alt90) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:22: IDENT ( ws )?
                    {
                    dbg.location(530,22);
                    match(input,IDENT,FOLLOW_IDENT_in_page1835); if (state.failed) return ;
                    dbg.location(530,28);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:28: ( ws )?
                    int alt89=2;
                    try { dbg.enterSubRule(89);
                    try { dbg.enterDecision(89, decisionCanBacktrack[89]);

                    int LA89_0 = input.LA(1);

                    if ( ((LA89_0>=WS && LA89_0<=COMMENT)) ) {
                        alt89=1;
                    }
                    } finally {dbg.exitDecision(89);}

                    switch (alt89) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:28: ws
                            {
                            dbg.location(530,28);
                            pushFollow(FOLLOW_ws_in_page1837);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(89);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(90);}

            dbg.location(530,35);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:35: ( pseudoPage ( ws )? )?
            int alt92=2;
            try { dbg.enterSubRule(92);
            try { dbg.enterDecision(92, decisionCanBacktrack[92]);

            int LA92_0 = input.LA(1);

            if ( (LA92_0==COLON) ) {
                alt92=1;
            }
            } finally {dbg.exitDecision(92);}

            switch (alt92) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:36: pseudoPage ( ws )?
                    {
                    dbg.location(530,36);
                    pushFollow(FOLLOW_pseudoPage_in_page1844);
                    pseudoPage();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(530,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:47: ( ws )?
                    int alt91=2;
                    try { dbg.enterSubRule(91);
                    try { dbg.enterDecision(91, decisionCanBacktrack[91]);

                    int LA91_0 = input.LA(1);

                    if ( ((LA91_0>=WS && LA91_0<=COMMENT)) ) {
                        alt91=1;
                    }
                    } finally {dbg.exitDecision(91);}

                    switch (alt91) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:47: ws
                            {
                            dbg.location(530,47);
                            pushFollow(FOLLOW_ws_in_page1846);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(91);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(92);}

            dbg.location(531,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_page1859); if (state.failed) return ;
            dbg.location(531,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:531:16: ( ws )?
            int alt93=2;
            try { dbg.enterSubRule(93);
            try { dbg.enterDecision(93, decisionCanBacktrack[93]);

            int LA93_0 = input.LA(1);

            if ( ((LA93_0>=WS && LA93_0<=COMMENT)) ) {
                alt93=1;
            }
            } finally {dbg.exitDecision(93);}

            switch (alt93) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:531:16: ws
                    {
                    dbg.location(531,16);
                    pushFollow(FOLLOW_ws_in_page1861);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(93);}

            dbg.location(534,13);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:13: ( ( propertyDeclaration | margin ) ( ws )? )?
            int alt96=2;
            try { dbg.enterSubRule(96);
            try { dbg.enterDecision(96, decisionCanBacktrack[96]);

            int LA96_0 = input.LA(1);

            if ( (LA96_0==NAMESPACE_SYM||LA96_0==IDENT||(LA96_0>=CHARSET_SYM && LA96_0<=IMPORT_SYM)||LA96_0==MEDIA_SYM||LA96_0==GEN||(LA96_0>=AT_IDENT && LA96_0<=MOZ_DOCUMENT_SYM)||LA96_0==WEBKIT_KEYFRAMES_SYM||(LA96_0>=PAGE_SYM && LA96_0<=RIGHTBOTTOM_SYM)||LA96_0==MINUS||(LA96_0>=HASH_SYMBOL && LA96_0<=DOT)||LA96_0==STAR||LA96_0==SASS_VAR||(LA96_0>=SASS_CONTENT && LA96_0<=SASS_WHILE)) ) {
                alt96=1;
            }
            } finally {dbg.exitDecision(96);}

            switch (alt96) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:14: ( propertyDeclaration | margin ) ( ws )?
                    {
                    dbg.location(534,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:14: ( propertyDeclaration | margin )
                    int alt94=2;
                    try { dbg.enterSubRule(94);
                    try { dbg.enterDecision(94, decisionCanBacktrack[94]);

                    try {
                        isCyclicDecision = true;
                        alt94 = dfa94.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(94);}

                    switch (alt94) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:15: propertyDeclaration
                            {
                            dbg.location(534,15);
                            pushFollow(FOLLOW_propertyDeclaration_in_page1904);
                            propertyDeclaration();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:35: margin
                            {
                            dbg.location(534,35);
                            pushFollow(FOLLOW_margin_in_page1906);
                            margin();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(94);}

                    dbg.location(534,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:43: ( ws )?
                    int alt95=2;
                    try { dbg.enterSubRule(95);
                    try { dbg.enterDecision(95, decisionCanBacktrack[95]);

                    int LA95_0 = input.LA(1);

                    if ( ((LA95_0>=WS && LA95_0<=COMMENT)) ) {
                        alt95=1;
                    }
                    } finally {dbg.exitDecision(95);}

                    switch (alt95) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:43: ws
                            {
                            dbg.location(534,43);
                            pushFollow(FOLLOW_ws_in_page1909);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(95);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(96);}

            dbg.location(534,49);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:49: ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )*
            try { dbg.enterSubRule(101);

            loop101:
            do {
                int alt101=2;
                try { dbg.enterDecision(101, decisionCanBacktrack[101]);

                int LA101_0 = input.LA(1);

                if ( (LA101_0==SEMI) ) {
                    alt101=1;
                }


                } finally {dbg.exitDecision(101);}

                switch (alt101) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:50: SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )?
            	    {
            	    dbg.location(534,50);
            	    match(input,SEMI,FOLLOW_SEMI_in_page1915); if (state.failed) return ;
            	    dbg.location(534,55);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:55: ( ws )?
            	    int alt97=2;
            	    try { dbg.enterSubRule(97);
            	    try { dbg.enterDecision(97, decisionCanBacktrack[97]);

            	    int LA97_0 = input.LA(1);

            	    if ( ((LA97_0>=WS && LA97_0<=COMMENT)) ) {
            	        alt97=1;
            	    }
            	    } finally {dbg.exitDecision(97);}

            	    switch (alt97) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:55: ws
            	            {
            	            dbg.location(534,55);
            	            pushFollow(FOLLOW_ws_in_page1917);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(97);}

            	    dbg.location(534,59);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:59: ( ( propertyDeclaration | margin ) ( ws )? )?
            	    int alt100=2;
            	    try { dbg.enterSubRule(100);
            	    try { dbg.enterDecision(100, decisionCanBacktrack[100]);

            	    int LA100_0 = input.LA(1);

            	    if ( (LA100_0==NAMESPACE_SYM||LA100_0==IDENT||(LA100_0>=CHARSET_SYM && LA100_0<=IMPORT_SYM)||LA100_0==MEDIA_SYM||LA100_0==GEN||(LA100_0>=AT_IDENT && LA100_0<=MOZ_DOCUMENT_SYM)||LA100_0==WEBKIT_KEYFRAMES_SYM||(LA100_0>=PAGE_SYM && LA100_0<=RIGHTBOTTOM_SYM)||LA100_0==MINUS||(LA100_0>=HASH_SYMBOL && LA100_0<=DOT)||LA100_0==STAR||LA100_0==SASS_VAR||(LA100_0>=SASS_CONTENT && LA100_0<=SASS_WHILE)) ) {
            	        alt100=1;
            	    }
            	    } finally {dbg.exitDecision(100);}

            	    switch (alt100) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:60: ( propertyDeclaration | margin ) ( ws )?
            	            {
            	            dbg.location(534,60);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:60: ( propertyDeclaration | margin )
            	            int alt98=2;
            	            try { dbg.enterSubRule(98);
            	            try { dbg.enterDecision(98, decisionCanBacktrack[98]);

            	            try {
            	                isCyclicDecision = true;
            	                alt98 = dfa98.predict(input);
            	            }
            	            catch (NoViableAltException nvae) {
            	                dbg.recognitionException(nvae);
            	                throw nvae;
            	            }
            	            } finally {dbg.exitDecision(98);}

            	            switch (alt98) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:61: propertyDeclaration
            	                    {
            	                    dbg.location(534,61);
            	                    pushFollow(FOLLOW_propertyDeclaration_in_page1922);
            	                    propertyDeclaration();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;
            	                case 2 :
            	                    dbg.enterAlt(2);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:81: margin
            	                    {
            	                    dbg.location(534,81);
            	                    pushFollow(FOLLOW_margin_in_page1924);
            	                    margin();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(98);}

            	            dbg.location(534,89);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:89: ( ws )?
            	            int alt99=2;
            	            try { dbg.enterSubRule(99);
            	            try { dbg.enterDecision(99, decisionCanBacktrack[99]);

            	            int LA99_0 = input.LA(1);

            	            if ( ((LA99_0>=WS && LA99_0<=COMMENT)) ) {
            	                alt99=1;
            	            }
            	            } finally {dbg.exitDecision(99);}

            	            switch (alt99) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:89: ws
            	                    {
            	                    dbg.location(534,89);
            	                    pushFollow(FOLLOW_ws_in_page1927);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(99);}


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(100);}


            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);
            } finally {dbg.exitSubRule(101);}

            dbg.location(535,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_page1942); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(536, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "page");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "page"


    // $ANTLR start "counterStyle"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:538:1: counterStyle : COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
    public final void counterStyle() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "counterStyle");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(538, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:5: ( COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:7: COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
            {
            dbg.location(539,7);
            match(input,COUNTER_STYLE_SYM,FOLLOW_COUNTER_STYLE_SYM_in_counterStyle1963); if (state.failed) return ;
            dbg.location(539,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:25: ( ws )?
            int alt102=2;
            try { dbg.enterSubRule(102);
            try { dbg.enterDecision(102, decisionCanBacktrack[102]);

            int LA102_0 = input.LA(1);

            if ( ((LA102_0>=WS && LA102_0<=COMMENT)) ) {
                alt102=1;
            }
            } finally {dbg.exitDecision(102);}

            switch (alt102) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:25: ws
                    {
                    dbg.location(539,25);
                    pushFollow(FOLLOW_ws_in_counterStyle1965);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(102);}

            dbg.location(539,29);
            match(input,IDENT,FOLLOW_IDENT_in_counterStyle1968); if (state.failed) return ;
            dbg.location(539,35);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:35: ( ws )?
            int alt103=2;
            try { dbg.enterSubRule(103);
            try { dbg.enterDecision(103, decisionCanBacktrack[103]);

            int LA103_0 = input.LA(1);

            if ( ((LA103_0>=WS && LA103_0<=COMMENT)) ) {
                alt103=1;
            }
            } finally {dbg.exitDecision(103);}

            switch (alt103) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:35: ws
                    {
                    dbg.location(539,35);
                    pushFollow(FOLLOW_ws_in_counterStyle1970);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(103);}

            dbg.location(540,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_counterStyle1981); if (state.failed) return ;
            dbg.location(540,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:16: ( ws )?
            int alt104=2;
            try { dbg.enterSubRule(104);
            try { dbg.enterDecision(104, decisionCanBacktrack[104]);

            int LA104_0 = input.LA(1);

            if ( ((LA104_0>=WS && LA104_0<=COMMENT)) ) {
                alt104=1;
            }
            } finally {dbg.exitDecision(104);}

            switch (alt104) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:16: ws
                    {
                    dbg.location(540,16);
                    pushFollow(FOLLOW_ws_in_counterStyle1983);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(104);}

            dbg.location(540,20);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_counterStyle1986);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(541,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:541:3: ( declarations )?
            int alt105=2;
            try { dbg.enterSubRule(105);
            try { dbg.enterDecision(105, decisionCanBacktrack[105]);

            int LA105_0 = input.LA(1);

            if ( ((LA105_0>=NAMESPACE_SYM && LA105_0<=IDENT)||(LA105_0>=CHARSET_SYM && LA105_0<=MEDIA_SYM)||LA105_0==GEN||(LA105_0>=COLON && LA105_0<=MOZ_DOCUMENT_SYM)||LA105_0==WEBKIT_KEYFRAMES_SYM||(LA105_0>=PAGE_SYM && LA105_0<=RIGHTBOTTOM_SYM)||(LA105_0>=MINUS && LA105_0<=PLUS)||(LA105_0>=GREATER && LA105_0<=PIPE)||LA105_0==LESS_AND||(LA105_0>=RBRACKET && LA105_0<=SASS_VAR)||(LA105_0>=SASS_CONTENT && LA105_0<=SASS_WHILE)||LA105_0==AT_SIGN) ) {
                alt105=1;
            }
            } finally {dbg.exitDecision(105);}

            switch (alt105) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:541:3: declarations
                    {
                    dbg.location(541,3);
                    pushFollow(FOLLOW_declarations_in_counterStyle1990);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(105);}

            dbg.location(542,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_counterStyle2001); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(543, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "counterStyle");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "counterStyle"


    // $ANTLR start "fontFace"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:545:1: fontFace : FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
    public final void fontFace() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fontFace");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(545, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:546:5: ( FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:546:7: FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
            {
            dbg.location(546,7);
            match(input,FONT_FACE_SYM,FOLLOW_FONT_FACE_SYM_in_fontFace2022); if (state.failed) return ;
            dbg.location(546,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:546:21: ( ws )?
            int alt106=2;
            try { dbg.enterSubRule(106);
            try { dbg.enterDecision(106, decisionCanBacktrack[106]);

            int LA106_0 = input.LA(1);

            if ( ((LA106_0>=WS && LA106_0<=COMMENT)) ) {
                alt106=1;
            }
            } finally {dbg.exitDecision(106);}

            switch (alt106) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:546:21: ws
                    {
                    dbg.location(546,21);
                    pushFollow(FOLLOW_ws_in_fontFace2024);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(106);}

            dbg.location(547,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_fontFace2035); if (state.failed) return ;
            dbg.location(547,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:547:16: ( ws )?
            int alt107=2;
            try { dbg.enterSubRule(107);
            try { dbg.enterDecision(107, decisionCanBacktrack[107]);

            int LA107_0 = input.LA(1);

            if ( ((LA107_0>=WS && LA107_0<=COMMENT)) ) {
                alt107=1;
            }
            } finally {dbg.exitDecision(107);}

            switch (alt107) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:547:16: ws
                    {
                    dbg.location(547,16);
                    pushFollow(FOLLOW_ws_in_fontFace2037);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(107);}

            dbg.location(547,20);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_fontFace2040);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(548,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:548:3: ( declarations )?
            int alt108=2;
            try { dbg.enterSubRule(108);
            try { dbg.enterDecision(108, decisionCanBacktrack[108]);

            int LA108_0 = input.LA(1);

            if ( ((LA108_0>=NAMESPACE_SYM && LA108_0<=IDENT)||(LA108_0>=CHARSET_SYM && LA108_0<=MEDIA_SYM)||LA108_0==GEN||(LA108_0>=COLON && LA108_0<=MOZ_DOCUMENT_SYM)||LA108_0==WEBKIT_KEYFRAMES_SYM||(LA108_0>=PAGE_SYM && LA108_0<=RIGHTBOTTOM_SYM)||(LA108_0>=MINUS && LA108_0<=PLUS)||(LA108_0>=GREATER && LA108_0<=PIPE)||LA108_0==LESS_AND||(LA108_0>=RBRACKET && LA108_0<=SASS_VAR)||(LA108_0>=SASS_CONTENT && LA108_0<=SASS_WHILE)||LA108_0==AT_SIGN) ) {
                alt108=1;
            }
            } finally {dbg.exitDecision(108);}

            switch (alt108) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:548:3: declarations
                    {
                    dbg.location(548,3);
                    pushFollow(FOLLOW_declarations_in_fontFace2044);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(108);}

            dbg.location(549,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_fontFace2055); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(550, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fontFace");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fontFace"


    // $ANTLR start "margin"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:552:1: margin : margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
    public final void margin() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "margin");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(552, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:553:2: ( margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:553:4: margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
            {
            dbg.location(553,4);
            pushFollow(FOLLOW_margin_sym_in_margin2070);
            margin_sym();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(553,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:553:15: ( ws )?
            int alt109=2;
            try { dbg.enterSubRule(109);
            try { dbg.enterDecision(109, decisionCanBacktrack[109]);

            int LA109_0 = input.LA(1);

            if ( ((LA109_0>=WS && LA109_0<=COMMENT)) ) {
                alt109=1;
            }
            } finally {dbg.exitDecision(109);}

            switch (alt109) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:553:15: ws
                    {
                    dbg.location(553,15);
                    pushFollow(FOLLOW_ws_in_margin2072);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(109);}

            dbg.location(553,19);
            match(input,LBRACE,FOLLOW_LBRACE_in_margin2075); if (state.failed) return ;
            dbg.location(553,26);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:553:26: ( ws )?
            int alt110=2;
            try { dbg.enterSubRule(110);
            try { dbg.enterDecision(110, decisionCanBacktrack[110]);

            int LA110_0 = input.LA(1);

            if ( ((LA110_0>=WS && LA110_0<=COMMENT)) ) {
                alt110=1;
            }
            } finally {dbg.exitDecision(110);}

            switch (alt110) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:553:26: ws
                    {
                    dbg.location(553,26);
                    pushFollow(FOLLOW_ws_in_margin2077);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(110);}

            dbg.location(553,30);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_margin2080);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(553,53);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:553:53: ( declarations )?
            int alt111=2;
            try { dbg.enterSubRule(111);
            try { dbg.enterDecision(111, decisionCanBacktrack[111]);

            int LA111_0 = input.LA(1);

            if ( ((LA111_0>=NAMESPACE_SYM && LA111_0<=IDENT)||(LA111_0>=CHARSET_SYM && LA111_0<=MEDIA_SYM)||LA111_0==GEN||(LA111_0>=COLON && LA111_0<=MOZ_DOCUMENT_SYM)||LA111_0==WEBKIT_KEYFRAMES_SYM||(LA111_0>=PAGE_SYM && LA111_0<=RIGHTBOTTOM_SYM)||(LA111_0>=MINUS && LA111_0<=PLUS)||(LA111_0>=GREATER && LA111_0<=PIPE)||LA111_0==LESS_AND||(LA111_0>=RBRACKET && LA111_0<=SASS_VAR)||(LA111_0>=SASS_CONTENT && LA111_0<=SASS_WHILE)||LA111_0==AT_SIGN) ) {
                alt111=1;
            }
            } finally {dbg.exitDecision(111);}

            switch (alt111) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:553:53: declarations
                    {
                    dbg.location(553,53);
                    pushFollow(FOLLOW_declarations_in_margin2082);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(111);}

            dbg.location(553,67);
            match(input,RBRACE,FOLLOW_RBRACE_in_margin2085); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(554, 8);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "margin");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "margin"


    // $ANTLR start "margin_sym"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:556:1: margin_sym : ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM );
    public final void margin_sym() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "margin_sym");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(556, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:557:2: ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(557,2);
            if ( (input.LA(1)>=TOPLEFTCORNER_SYM && input.LA(1)<=RIGHTBOTTOM_SYM) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(574, 8);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "margin_sym");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "margin_sym"


    // $ANTLR start "pseudoPage"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:576:1: pseudoPage : COLON IDENT ;
    public final void pseudoPage() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "pseudoPage");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(576, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:577:5: ( COLON IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:577:7: COLON IDENT
            {
            dbg.location(577,7);
            match(input,COLON,FOLLOW_COLON_in_pseudoPage2314); if (state.failed) return ;
            dbg.location(577,13);
            match(input,IDENT,FOLLOW_IDENT_in_pseudoPage2316); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(578, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pseudoPage");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "pseudoPage"


    // $ANTLR start "operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:580:1: operator : ( SOLIDUS | COMMA );
    public final void operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(580, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:581:5: ( SOLIDUS | COMMA )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(581,5);
            if ( input.LA(1)==COMMA||input.LA(1)==SOLIDUS ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(583, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "operator"


    // $ANTLR start "unaryOperator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:585:1: unaryOperator : ( MINUS | PLUS );
    public final void unaryOperator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "unaryOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(585, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:586:5: ( MINUS | PLUS )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(586,5);
            if ( (input.LA(1)>=MINUS && input.LA(1)<=PLUS) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(588, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unaryOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "unaryOperator"


    // $ANTLR start "property"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:590:1: property : ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN | {...}? cp_variable );
    public final void property() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "property");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(590, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:591:5: ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN | {...}? cp_variable )
            int alt112=4;
            try { dbg.enterDecision(112, decisionCanBacktrack[112]);

            int LA112_0 = input.LA(1);

            if ( (LA112_0==HASH_SYMBOL) && (synpred13_Css3())) {
                alt112=1;
            }
            else if ( (LA112_0==IDENT) ) {
                int LA112_2 = input.LA(2);

                if ( (synpred13_Css3()) ) {
                    alt112=1;
                }
                else if ( (true) ) {
                    alt112=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA112_0==MINUS||(LA112_0>=HASH && LA112_0<=DOT)) && (synpred13_Css3())) {
                alt112=1;
            }
            else if ( (LA112_0==GEN) ) {
                alt112=3;
            }
            else if ( (LA112_0==NAMESPACE_SYM||(LA112_0>=CHARSET_SYM && LA112_0<=IMPORT_SYM)||LA112_0==MEDIA_SYM||(LA112_0>=AT_IDENT && LA112_0<=MOZ_DOCUMENT_SYM)||LA112_0==WEBKIT_KEYFRAMES_SYM||(LA112_0>=PAGE_SYM && LA112_0<=RIGHTBOTTOM_SYM)||LA112_0==SASS_VAR||(LA112_0>=SASS_CONTENT && LA112_0<=SASS_WHILE)) ) {
                alt112=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 112, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(112);}

            switch (alt112) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:595:5: ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression
                    {
                    dbg.location(595,49);
                    pushFollow(FOLLOW_sass_declaration_interpolation_expression_in_property2431);
                    sass_declaration_interpolation_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:596:7: IDENT
                    {
                    dbg.location(596,7);
                    match(input,IDENT,FOLLOW_IDENT_in_property2439); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:597:7: GEN
                    {
                    dbg.location(597,7);
                    match(input,GEN,FOLLOW_GEN_in_property2448); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:7: {...}? cp_variable
                    {
                    dbg.location(598,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "property", "isCssPreprocessorSource()");
                    }
                    dbg.location(598,36);
                    pushFollow(FOLLOW_cp_variable_in_property2459);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(COLON)); 
                
        }
        finally {
        }
        dbg.location(600, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "property");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "property"


    // $ANTLR start "rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:1: rule : selectorsGroup ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(605, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:606:5: ( selectorsGroup ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:607:5: selectorsGroup ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(607,5);
            pushFollow(FOLLOW_selectorsGroup_in_rule2498);
            selectorsGroup();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(607,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:607:20: ( ws )?
            int alt113=2;
            try { dbg.enterSubRule(113);
            try { dbg.enterDecision(113, decisionCanBacktrack[113]);

            int LA113_0 = input.LA(1);

            if ( ((LA113_0>=WS && LA113_0<=COMMENT)) ) {
                alt113=1;
            }
            } finally {dbg.exitDecision(113);}

            switch (alt113) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:607:20: ws
                    {
                    dbg.location(607,20);
                    pushFollow(FOLLOW_ws_in_rule2500);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(113);}

            dbg.location(608,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_rule2507); if (state.failed) return ;
            dbg.location(608,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:608:12: ( ws )?
            int alt114=2;
            try { dbg.enterSubRule(114);
            try { dbg.enterDecision(114, decisionCanBacktrack[114]);

            int LA114_0 = input.LA(1);

            if ( ((LA114_0>=WS && LA114_0<=COMMENT)) ) {
                alt114=1;
            }
            } finally {dbg.exitDecision(114);}

            switch (alt114) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:608:12: ws
                    {
                    dbg.location(608,12);
                    pushFollow(FOLLOW_ws_in_rule2509);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(114);}

            dbg.location(608,16);
            pushFollow(FOLLOW_syncToFollow_in_rule2512);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(609,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:9: ( declarations )?
            int alt115=2;
            try { dbg.enterSubRule(115);
            try { dbg.enterDecision(115, decisionCanBacktrack[115]);

            int LA115_0 = input.LA(1);

            if ( ((LA115_0>=NAMESPACE_SYM && LA115_0<=IDENT)||(LA115_0>=CHARSET_SYM && LA115_0<=MEDIA_SYM)||LA115_0==GEN||(LA115_0>=COLON && LA115_0<=MOZ_DOCUMENT_SYM)||LA115_0==WEBKIT_KEYFRAMES_SYM||(LA115_0>=PAGE_SYM && LA115_0<=RIGHTBOTTOM_SYM)||(LA115_0>=MINUS && LA115_0<=PLUS)||(LA115_0>=GREATER && LA115_0<=PIPE)||LA115_0==LESS_AND||(LA115_0>=RBRACKET && LA115_0<=SASS_VAR)||(LA115_0>=SASS_CONTENT && LA115_0<=SASS_WHILE)||LA115_0==AT_SIGN) ) {
                alt115=1;
            }
            } finally {dbg.exitDecision(115);}

            switch (alt115) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:9: declarations
                    {
                    dbg.location(609,9);
                    pushFollow(FOLLOW_declarations_in_rule2523);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(115);}

            dbg.location(610,5);
            match(input,RBRACE,FOLLOW_RBRACE_in_rule2530); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(RBRACE));
                    input.consume(); //consume the RBRACE as well   
                
        }
        finally {
        }
        dbg.location(611, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "rule"


    // $ANTLR start "declarations"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:618:1: declarations : ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
    public final void declarations() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "declarations");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(618, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:5: ( ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:620:5: ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            {
            dbg.location(620,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:620:5: ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            int cnt120=0;
            try { dbg.enterSubRule(120);

            loop120:
            do {
                int alt120=3;
                try { dbg.enterDecision(120, decisionCanBacktrack[120]);

                int LA120_0 = input.LA(1);

                if ( (LA120_0==NAMESPACE_SYM||LA120_0==IDENT||(LA120_0>=CHARSET_SYM && LA120_0<=MEDIA_SYM)||LA120_0==GEN||(LA120_0>=COLON && LA120_0<=MOZ_DOCUMENT_SYM)||LA120_0==WEBKIT_KEYFRAMES_SYM||(LA120_0>=PAGE_SYM && LA120_0<=RIGHTBOTTOM_SYM)||(LA120_0>=MINUS && LA120_0<=PLUS)||(LA120_0>=GREATER && LA120_0<=PIPE)||LA120_0==LESS_AND||(LA120_0>=RBRACKET && LA120_0<=SASS_VAR)||(LA120_0>=SASS_CONTENT && LA120_0<=SASS_WHILE)||LA120_0==AT_SIGN) ) {
                    alt120=1;
                }
                else if ( (LA120_0==SEMI) ) {
                    alt120=2;
                }


                } finally {dbg.exitDecision(120);}

                switch (alt120) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:10: ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    {
            	    dbg.location(621,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:10: ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:12: declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
            	    {
            	    dbg.location(621,12);
            	    pushFollow(FOLLOW_declaration_in_declarations2578);
            	    declaration();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(621,24);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:24: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
            	    int alt117=2;
            	    try { dbg.enterSubRule(117);
            	    try { dbg.enterDecision(117, decisionCanBacktrack[117]);

            	    try {
            	        isCyclicDecision = true;
            	        alt117 = dfa117.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(117);}

            	    switch (alt117) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:25: ( ( ws )? SEMI )=> ( ws )? SEMI
            	            {
            	            dbg.location(621,37);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:37: ( ws )?
            	            int alt116=2;
            	            try { dbg.enterSubRule(116);
            	            try { dbg.enterDecision(116, decisionCanBacktrack[116]);

            	            int LA116_0 = input.LA(1);

            	            if ( ((LA116_0>=WS && LA116_0<=COMMENT)) ) {
            	                alt116=1;
            	            }
            	            } finally {dbg.exitDecision(116);}

            	            switch (alt116) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:37: ws
            	                    {
            	                    dbg.location(621,37);
            	                    pushFollow(FOLLOW_ws_in_declarations2588);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(116);}

            	            dbg.location(621,41);
            	            match(input,SEMI,FOLLOW_SEMI_in_declarations2591); if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(117);}

            	    dbg.location(621,48);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:48: ( ws )?
            	    int alt118=2;
            	    try { dbg.enterSubRule(118);
            	    try { dbg.enterDecision(118, decisionCanBacktrack[118]);

            	    int LA118_0 = input.LA(1);

            	    if ( ((LA118_0>=WS && LA118_0<=COMMENT)) ) {
            	        alt118=1;
            	    }
            	    } finally {dbg.exitDecision(118);}

            	    switch (alt118) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:48: ws
            	            {
            	            dbg.location(621,48);
            	            pushFollow(FOLLOW_ws_in_declarations2595);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(118);}


            	    }


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:10: ( SEMI ( ws )? )
            	    {
            	    dbg.location(623,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:10: ( SEMI ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:12: SEMI ( ws )?
            	    {
            	    dbg.location(623,12);
            	    match(input,SEMI,FOLLOW_SEMI_in_declarations2622); if (state.failed) return ;
            	    dbg.location(623,17);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:17: ( ws )?
            	    int alt119=2;
            	    try { dbg.enterSubRule(119);
            	    try { dbg.enterDecision(119, decisionCanBacktrack[119]);

            	    int LA119_0 = input.LA(1);

            	    if ( ((LA119_0>=WS && LA119_0<=COMMENT)) ) {
            	        alt119=1;
            	    }
            	    } finally {dbg.exitDecision(119);}

            	    switch (alt119) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:17: ws
            	            {
            	            dbg.location(623,17);
            	            pushFollow(FOLLOW_ws_in_declarations2624);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(119);}


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt120 >= 1 ) break loop120;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(120, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt120++;
            } while (true);
            } finally {dbg.exitSubRule(120);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(625, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "declarations");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "declarations"


    // $ANTLR start "declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:1: declaration : ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( selectorsGroup ( ws )? LBRACE )=> rule | {...}? at_rule | {...}? sass_control | {...}? sass_extend | {...}? sass_debug | {...}? sass_content | {...}? sass_function_return | {...}? importItem | GEN );
    public final void declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(627, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:628:5: ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( selectorsGroup ( ws )? LBRACE )=> rule | {...}? at_rule | {...}? sass_control | {...}? sass_extend | {...}? sass_debug | {...}? sass_content | {...}? sass_function_return | {...}? importItem | GEN )
            int alt123=15;
            try { dbg.enterDecision(123, decisionCanBacktrack[123]);

            try {
                isCyclicDecision = true;
                alt123 = dfa123.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(123);}

            switch (alt123) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:5: ( cp_variable_declaration )=> cp_variable_declaration
                    {
                    dbg.location(629,32);
                    pushFollow(FOLLOW_cp_variable_declaration_in_declaration2659);
                    cp_variable_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:630:7: ( sass_nested_properties )=> sass_nested_properties
                    {
                    dbg.location(630,33);
                    pushFollow(FOLLOW_sass_nested_properties_in_declaration2672);
                    sass_nested_properties();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:631:7: ( propertyDeclaration )=> propertyDeclaration
                    {
                    dbg.location(631,30);
                    pushFollow(FOLLOW_propertyDeclaration_in_declaration2685);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:633:7: ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration
                    {
                    dbg.location(633,67);
                    pushFollow(FOLLOW_propertyDeclaration_in_declaration2725);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:7: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration
                    {
                    dbg.location(634,94);
                    pushFollow(FOLLOW_cp_mixin_declaration_in_declaration2771);
                    cp_mixin_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:7: ( cp_mixin_call )=> cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
                    {
                    dbg.location(635,24);
                    pushFollow(FOLLOW_cp_mixin_call_in_declaration2784);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(635,38);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:38: ( ( ws )? IMPORTANT_SYM )?
                    int alt122=2;
                    try { dbg.enterSubRule(122);
                    try { dbg.enterDecision(122, decisionCanBacktrack[122]);

                    try {
                        isCyclicDecision = true;
                        alt122 = dfa122.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(122);}

                    switch (alt122) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:39: ( ws )? IMPORTANT_SYM
                            {
                            dbg.location(635,39);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:39: ( ws )?
                            int alt121=2;
                            try { dbg.enterSubRule(121);
                            try { dbg.enterDecision(121, decisionCanBacktrack[121]);

                            int LA121_0 = input.LA(1);

                            if ( ((LA121_0>=WS && LA121_0<=COMMENT)) ) {
                                alt121=1;
                            }
                            } finally {dbg.exitDecision(121);}

                            switch (alt121) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:39: ws
                                    {
                                    dbg.location(635,39);
                                    pushFollow(FOLLOW_ws_in_declaration2787);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(121);}

                            dbg.location(635,43);
                            match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_declaration2790); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(122);}


                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:7: ( selectorsGroup ( ws )? LBRACE )=> rule
                    {
                    dbg.location(636,36);
                    pushFollow(FOLLOW_rule_in_declaration2809);
                    rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:637:7: {...}? at_rule
                    {
                    dbg.location(637,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isCssPreprocessorSource()");
                    }
                    dbg.location(637,36);
                    pushFollow(FOLLOW_at_rule_in_declaration2820);
                    at_rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:7: {...}? sass_control
                    {
                    dbg.location(638,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(638,25);
                    pushFollow(FOLLOW_sass_control_in_declaration2831);
                    sass_control();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:7: {...}? sass_extend
                    {
                    dbg.location(639,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(639,25);
                    pushFollow(FOLLOW_sass_extend_in_declaration2842);
                    sass_extend();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:7: {...}? sass_debug
                    {
                    dbg.location(640,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(640,25);
                    pushFollow(FOLLOW_sass_debug_in_declaration2853);
                    sass_debug();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:641:7: {...}? sass_content
                    {
                    dbg.location(641,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(641,25);
                    pushFollow(FOLLOW_sass_content_in_declaration2864);
                    sass_content();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:642:7: {...}? sass_function_return
                    {
                    dbg.location(642,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(642,25);
                    pushFollow(FOLLOW_sass_function_return_in_declaration2875);
                    sass_function_return();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:7: {...}? importItem
                    {
                    dbg.location(643,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(643,25);
                    pushFollow(FOLLOW_importItem_in_declaration2886);
                    importItem();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:644:7: GEN
                    {
                    dbg.location(644,7);
                    match(input,GEN,FOLLOW_GEN_in_declaration2895); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(SEMI));
                
        }
        finally {
        }
        dbg.location(645, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "declaration"


    // $ANTLR start "selectorsGroup"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:651:1: selectorsGroup : ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( ( ws )? COMMA ( ws )? selector )* );
    public final void selectorsGroup() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "selectorsGroup");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(651, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:652:5: ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( ( ws )? COMMA ( ws )? selector )* )
            int alt127=2;
            try { dbg.enterDecision(127, decisionCanBacktrack[127]);

            try {
                isCyclicDecision = true;
                alt127 = dfa127.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(127);}

            switch (alt127) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:9: ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression
                    {
                    dbg.location(654,60);
                    pushFollow(FOLLOW_sass_selector_interpolation_expression_in_selectorsGroup2963);
                    sass_selector_interpolation_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:9: selector ( ( ws )? COMMA ( ws )? selector )*
                    {
                    dbg.location(656,9);
                    pushFollow(FOLLOW_selector_in_selectorsGroup2976);
                    selector();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(656,18);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:18: ( ( ws )? COMMA ( ws )? selector )*
                    try { dbg.enterSubRule(126);

                    loop126:
                    do {
                        int alt126=2;
                        try { dbg.enterDecision(126, decisionCanBacktrack[126]);

                        try {
                            isCyclicDecision = true;
                            alt126 = dfa126.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(126);}

                        switch (alt126) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:19: ( ws )? COMMA ( ws )? selector
                    	    {
                    	    dbg.location(656,19);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:19: ( ws )?
                    	    int alt124=2;
                    	    try { dbg.enterSubRule(124);
                    	    try { dbg.enterDecision(124, decisionCanBacktrack[124]);

                    	    int LA124_0 = input.LA(1);

                    	    if ( ((LA124_0>=WS && LA124_0<=COMMENT)) ) {
                    	        alt124=1;
                    	    }
                    	    } finally {dbg.exitDecision(124);}

                    	    switch (alt124) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:19: ws
                    	            {
                    	            dbg.location(656,19);
                    	            pushFollow(FOLLOW_ws_in_selectorsGroup2979);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(124);}

                    	    dbg.location(656,23);
                    	    match(input,COMMA,FOLLOW_COMMA_in_selectorsGroup2982); if (state.failed) return ;
                    	    dbg.location(656,29);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:29: ( ws )?
                    	    int alt125=2;
                    	    try { dbg.enterSubRule(125);
                    	    try { dbg.enterDecision(125, decisionCanBacktrack[125]);

                    	    int LA125_0 = input.LA(1);

                    	    if ( ((LA125_0>=WS && LA125_0<=COMMENT)) ) {
                    	        alt125=1;
                    	    }
                    	    } finally {dbg.exitDecision(125);}

                    	    switch (alt125) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:29: ws
                    	            {
                    	            dbg.location(656,29);
                    	            pushFollow(FOLLOW_ws_in_selectorsGroup2984);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(125);}

                    	    dbg.location(656,33);
                    	    pushFollow(FOLLOW_selector_in_selectorsGroup2987);
                    	    selector();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop126;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(126);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(657, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "selectorsGroup");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "selectorsGroup"


    // $ANTLR start "selector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:659:1: selector : ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )* ;
    public final void selector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "selector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(659, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:5: ( ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:8: ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )*
            {
            dbg.location(660,8);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:8: ( combinator ( ws )? )?
            int alt129=2;
            try { dbg.enterSubRule(129);
            try { dbg.enterDecision(129, decisionCanBacktrack[129]);

            int LA129_0 = input.LA(1);

            if ( (LA129_0==PLUS||(LA129_0>=GREATER && LA129_0<=TILDE)) ) {
                alt129=1;
            }
            } finally {dbg.exitDecision(129);}

            switch (alt129) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:9: combinator ( ws )?
                    {
                    dbg.location(660,9);
                    pushFollow(FOLLOW_combinator_in_selector3016);
                    combinator();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(660,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:20: ( ws )?
                    int alt128=2;
                    try { dbg.enterSubRule(128);
                    try { dbg.enterDecision(128, decisionCanBacktrack[128]);

                    int LA128_0 = input.LA(1);

                    if ( ((LA128_0>=WS && LA128_0<=COMMENT)) ) {
                        alt128=1;
                    }
                    } finally {dbg.exitDecision(128);}

                    switch (alt128) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:20: ws
                            {
                            dbg.location(660,20);
                            pushFollow(FOLLOW_ws_in_selector3018);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(128);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(129);}

            dbg.location(660,26);
            pushFollow(FOLLOW_simpleSelectorSequence_in_selector3023);
            simpleSelectorSequence();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(660,49);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:49: ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )*
            try { dbg.enterSubRule(134);

            loop134:
            do {
                int alt134=2;
                try { dbg.enterDecision(134, decisionCanBacktrack[134]);

                try {
                    isCyclicDecision = true;
                    alt134 = dfa134.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(134);}

                switch (alt134) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:51: ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence
            	    {
            	    dbg.location(660,51);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:51: ( ( ( ws )? combinator ( ws )? ) | ( ws )? )
            	    int alt133=2;
            	    try { dbg.enterSubRule(133);
            	    try { dbg.enterDecision(133, decisionCanBacktrack[133]);

            	    try {
            	        isCyclicDecision = true;
            	        alt133 = dfa133.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(133);}

            	    switch (alt133) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:52: ( ( ws )? combinator ( ws )? )
            	            {
            	            dbg.location(660,52);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:52: ( ( ws )? combinator ( ws )? )
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:53: ( ws )? combinator ( ws )?
            	            {
            	            dbg.location(660,53);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:53: ( ws )?
            	            int alt130=2;
            	            try { dbg.enterSubRule(130);
            	            try { dbg.enterDecision(130, decisionCanBacktrack[130]);

            	            int LA130_0 = input.LA(1);

            	            if ( ((LA130_0>=WS && LA130_0<=COMMENT)) ) {
            	                alt130=1;
            	            }
            	            } finally {dbg.exitDecision(130);}

            	            switch (alt130) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:53: ws
            	                    {
            	                    dbg.location(660,53);
            	                    pushFollow(FOLLOW_ws_in_selector3029);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(130);}

            	            dbg.location(660,57);
            	            pushFollow(FOLLOW_combinator_in_selector3032);
            	            combinator();

            	            state._fsp--;
            	            if (state.failed) return ;
            	            dbg.location(660,68);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:68: ( ws )?
            	            int alt131=2;
            	            try { dbg.enterSubRule(131);
            	            try { dbg.enterDecision(131, decisionCanBacktrack[131]);

            	            int LA131_0 = input.LA(1);

            	            if ( ((LA131_0>=WS && LA131_0<=COMMENT)) ) {
            	                alt131=1;
            	            }
            	            } finally {dbg.exitDecision(131);}

            	            switch (alt131) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:68: ws
            	                    {
            	                    dbg.location(660,68);
            	                    pushFollow(FOLLOW_ws_in_selector3034);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(131);}


            	            }


            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:73: ( ws )?
            	            {
            	            dbg.location(660,73);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:73: ( ws )?
            	            int alt132=2;
            	            try { dbg.enterSubRule(132);
            	            try { dbg.enterDecision(132, decisionCanBacktrack[132]);

            	            int LA132_0 = input.LA(1);

            	            if ( ((LA132_0>=WS && LA132_0<=COMMENT)) ) {
            	                alt132=1;
            	            }
            	            } finally {dbg.exitDecision(132);}

            	            switch (alt132) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:73: ws
            	                    {
            	                    dbg.location(660,73);
            	                    pushFollow(FOLLOW_ws_in_selector3038);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(132);}


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(133);}

            	    dbg.location(660,78);
            	    pushFollow(FOLLOW_simpleSelectorSequence_in_selector3042);
            	    simpleSelectorSequence();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);
            } finally {dbg.exitSubRule(134);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(661, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "selector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "selector"


    // $ANTLR start "combinator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:663:1: combinator : ( PLUS | GREATER | TILDE );
    public final void combinator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "combinator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(663, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:5: ( PLUS | GREATER | TILDE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(664,5);
            if ( input.LA(1)==PLUS||(input.LA(1)>=GREATER && input.LA(1)<=TILDE) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(666, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "combinator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "combinator"


    // $ANTLR start "simpleSelectorSequence"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:1: simpleSelectorSequence : ( ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* ) | elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* );
    public final void simpleSelectorSequence() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "simpleSelectorSequence");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(668, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:669:2: ( ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* ) | elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
            int alt139=2;
            try { dbg.enterDecision(139, decisionCanBacktrack[139]);

            int LA139_0 = input.LA(1);

            if ( (LA139_0==IDENT||LA139_0==GEN||(LA139_0>=STAR && LA139_0<=PIPE)||LA139_0==LESS_AND) ) {
                alt139=1;
            }
            else if ( (LA139_0==COLON||(LA139_0>=HASH_SYMBOL && LA139_0<=SASS_EXTEND_ONLY_SELECTOR)||LA139_0==AT_SIGN) ) {
                alt139=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(139);}

            switch (alt139) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:2: ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
                    {
                    dbg.location(670,2);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:2: ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:4: typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    {
                    dbg.location(670,4);
                    pushFollow(FOLLOW_typeSelector_in_simpleSelectorSequence3095);
                    typeSelector();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(670,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:17: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    try { dbg.enterSubRule(136);

                    loop136:
                    do {
                        int alt136=2;
                        try { dbg.enterDecision(136, decisionCanBacktrack[136]);

                        try {
                            isCyclicDecision = true;
                            alt136 = dfa136.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(136);}

                        switch (alt136) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:18: ( ( ws )? esPred )=> ( ws )? elementSubsequent
                    	    {
                    	    dbg.location(670,32);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:32: ( ws )?
                    	    int alt135=2;
                    	    try { dbg.enterSubRule(135);
                    	    try { dbg.enterDecision(135, decisionCanBacktrack[135]);

                    	    int LA135_0 = input.LA(1);

                    	    if ( ((LA135_0>=WS && LA135_0<=COMMENT)) ) {
                    	        alt135=1;
                    	    }
                    	    } finally {dbg.exitDecision(135);}

                    	    switch (alt135) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:32: ws
                    	            {
                    	            dbg.location(670,32);
                    	            pushFollow(FOLLOW_ws_in_simpleSelectorSequence3105);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(135);}

                    	    dbg.location(670,36);
                    	    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3108);
                    	    elementSubsequent();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop136;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(136);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:2: elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    {
                    dbg.location(672,2);
                    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3119);
                    elementSubsequent();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(672,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:20: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    try { dbg.enterSubRule(138);

                    loop138:
                    do {
                        int alt138=2;
                        try { dbg.enterDecision(138, decisionCanBacktrack[138]);

                        try {
                            isCyclicDecision = true;
                            alt138 = dfa138.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(138);}

                        switch (alt138) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:21: ( ( ws )? esPred )=> ( ws )? elementSubsequent
                    	    {
                    	    dbg.location(672,35);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:35: ( ws )?
                    	    int alt137=2;
                    	    try { dbg.enterSubRule(137);
                    	    try { dbg.enterDecision(137, decisionCanBacktrack[137]);

                    	    int LA137_0 = input.LA(1);

                    	    if ( ((LA137_0>=WS && LA137_0<=COMMENT)) ) {
                    	        alt137=1;
                    	    }
                    	    } finally {dbg.exitDecision(137);}

                    	    switch (alt137) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:35: ws
                    	            {
                    	            dbg.location(672,35);
                    	            pushFollow(FOLLOW_ws_in_simpleSelectorSequence3129);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(137);}

                    	    dbg.location(672,39);
                    	    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3132);
                    	    elementSubsequent();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop138;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(138);}


                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                        reportError(rce);
                        consumeUntil(input, BitSet.of(LBRACE)); 
                    
        }
        finally {
        }
        dbg.location(673, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "simpleSelectorSequence");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "simpleSelectorSequence"


    // $ANTLR start "esPred"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:680:1: esPred : ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR );
    public final void esPred() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "esPred");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(680, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:681:5: ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(681,5);
            if ( input.LA(1)==COLON||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=SASS_EXTEND_ONLY_SELECTOR) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(682, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "esPred");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "esPred"


    // $ANTLR start "typeSelector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:684:1: typeSelector options {k=2; } : ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName ;
    public final void typeSelector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "typeSelector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(684, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:686:3: ( ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:686:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName
            {
            dbg.location(686,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:686:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )?
            int alt140=2;
            try { dbg.enterSubRule(140);
            try { dbg.enterDecision(140, decisionCanBacktrack[140]);

            int LA140_0 = input.LA(1);

            if ( (LA140_0==IDENT) ) {
                int LA140_1 = input.LA(2);

                if ( (synpred25_Css3()) ) {
                    alt140=1;
                }
            }
            else if ( (LA140_0==STAR) ) {
                int LA140_2 = input.LA(2);

                if ( (synpred25_Css3()) ) {
                    alt140=1;
                }
            }
            else if ( (LA140_0==PIPE) && (synpred25_Css3())) {
                alt140=1;
            }
            } finally {dbg.exitDecision(140);}

            switch (alt140) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:686:7: ( ( IDENT | STAR )? PIPE )=> namespacePrefix
                    {
                    dbg.location(686,31);
                    pushFollow(FOLLOW_namespacePrefix_in_typeSelector3245);
                    namespacePrefix();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(140);}

            dbg.location(686,49);
            pushFollow(FOLLOW_elementName_in_typeSelector3249);
            elementName();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(687, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "typeSelector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "typeSelector"


    // $ANTLR start "namespacePrefix"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:689:1: namespacePrefix : ( namespacePrefixName | STAR )? PIPE ;
    public final void namespacePrefix() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespacePrefix");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(689, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:3: ( ( namespacePrefixName | STAR )? PIPE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:5: ( namespacePrefixName | STAR )? PIPE
            {
            dbg.location(690,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:5: ( namespacePrefixName | STAR )?
            int alt141=3;
            try { dbg.enterSubRule(141);
            try { dbg.enterDecision(141, decisionCanBacktrack[141]);

            int LA141_0 = input.LA(1);

            if ( (LA141_0==IDENT) ) {
                alt141=1;
            }
            else if ( (LA141_0==STAR) ) {
                alt141=2;
            }
            } finally {dbg.exitDecision(141);}

            switch (alt141) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:7: namespacePrefixName
                    {
                    dbg.location(690,7);
                    pushFollow(FOLLOW_namespacePrefixName_in_namespacePrefix3264);
                    namespacePrefixName();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:29: STAR
                    {
                    dbg.location(690,29);
                    match(input,STAR,FOLLOW_STAR_in_namespacePrefix3268); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(141);}

            dbg.location(690,36);
            match(input,PIPE,FOLLOW_PIPE_in_namespacePrefix3272); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(691, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespacePrefix");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespacePrefix"


    // $ANTLR start "elementSubsequent"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:694:1: elementSubsequent : ({...}? sass_extend_only_selector | {...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo ) ;
    public final void elementSubsequent() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "elementSubsequent");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(694, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:695:5: ( ({...}? sass_extend_only_selector | {...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:5: ({...}? sass_extend_only_selector | {...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo )
            {
            dbg.location(696,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:5: ({...}? sass_extend_only_selector | {...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo )
            int alt142=6;
            try { dbg.enterSubRule(142);
            try { dbg.enterDecision(142, decisionCanBacktrack[142]);

            switch ( input.LA(1) ) {
            case SASS_EXTEND_ONLY_SELECTOR:
                {
                alt142=1;
                }
                break;
            case AT_SIGN:
                {
                alt142=2;
                }
                break;
            case HASH_SYMBOL:
            case HASH:
                {
                alt142=3;
                }
                break;
            case DOT:
                {
                alt142=4;
                }
                break;
            case LBRACKET:
                {
                alt142=5;
                }
                break;
            case COLON:
            case DCOLON:
                {
                alt142=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(142);}

            switch (alt142) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:697:9: {...}? sass_extend_only_selector
                    {
                    dbg.location(697,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "elementSubsequent", "isScssSource()");
                    }
                    dbg.location(697,27);
                    pushFollow(FOLLOW_sass_extend_only_selector_in_elementSubsequent3311);
                    sass_extend_only_selector();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:698:11: {...}? less_selector_interpolation
                    {
                    dbg.location(698,11);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "elementSubsequent", "isLessSource()");
                    }
                    dbg.location(698,29);
                    pushFollow(FOLLOW_less_selector_interpolation_in_elementSubsequent3325);
                    less_selector_interpolation();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:699:8: cssId
                    {
                    dbg.location(699,8);
                    pushFollow(FOLLOW_cssId_in_elementSubsequent3335);
                    cssId();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:700:8: cssClass
                    {
                    dbg.location(700,8);
                    pushFollow(FOLLOW_cssClass_in_elementSubsequent3344);
                    cssClass();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:701:11: slAttribute
                    {
                    dbg.location(701,11);
                    pushFollow(FOLLOW_slAttribute_in_elementSubsequent3356);
                    slAttribute();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:702:11: pseudo
                    {
                    dbg.location(702,11);
                    pushFollow(FOLLOW_pseudo_in_elementSubsequent3368);
                    pseudo();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(142);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(704, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "elementSubsequent");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "elementSubsequent"


    // $ANTLR start "cssId"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:707:1: cssId : ( HASH | ( HASH_SYMBOL ( NAME | {...}? less_selector_interpolation ) ) );
    public final void cssId() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cssId");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(707, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:5: ( HASH | ( HASH_SYMBOL ( NAME | {...}? less_selector_interpolation ) ) )
            int alt144=2;
            try { dbg.enterDecision(144, decisionCanBacktrack[144]);

            int LA144_0 = input.LA(1);

            if ( (LA144_0==HASH) ) {
                alt144=1;
            }
            else if ( (LA144_0==HASH_SYMBOL) ) {
                alt144=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(144);}

            switch (alt144) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:7: HASH
                    {
                    dbg.location(708,7);
                    match(input,HASH,FOLLOW_HASH_in_cssId3396); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:710:9: ( HASH_SYMBOL ( NAME | {...}? less_selector_interpolation ) )
                    {
                    dbg.location(710,9);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:710:9: ( HASH_SYMBOL ( NAME | {...}? less_selector_interpolation ) )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:710:11: HASH_SYMBOL ( NAME | {...}? less_selector_interpolation )
                    {
                    dbg.location(710,11);
                    match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_cssId3418); if (state.failed) return ;
                    dbg.location(711,13);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:711:13: ( NAME | {...}? less_selector_interpolation )
                    int alt143=2;
                    try { dbg.enterSubRule(143);
                    try { dbg.enterDecision(143, decisionCanBacktrack[143]);

                    int LA143_0 = input.LA(1);

                    if ( (LA143_0==NAME) ) {
                        alt143=1;
                    }
                    else if ( (LA143_0==AT_SIGN) ) {
                        alt143=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 143, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(143);}

                    switch (alt143) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:711:15: NAME
                            {
                            dbg.location(711,15);
                            match(input,NAME,FOLLOW_NAME_in_cssId3435); if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:712:17: {...}? less_selector_interpolation
                            {
                            dbg.location(712,17);
                            if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                throw new FailedPredicateException(input, "cssId", "isLessSource()");
                            }
                            dbg.location(712,35);
                            pushFollow(FOLLOW_less_selector_interpolation_in_cssId3456);
                            less_selector_interpolation();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(143);}


                    }


                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(WS, IDENT, LBRACE)); 
                
        }
        finally {
        }
        dbg.location(715, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cssId");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cssId"


    // $ANTLR start "cssClass"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:721:1: cssClass : DOT ( IDENT | GEN | {...}? less_selector_interpolation ) ;
    public final void cssClass() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cssClass");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(721, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:722:5: ( DOT ( IDENT | GEN | {...}? less_selector_interpolation ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:722:7: DOT ( IDENT | GEN | {...}? less_selector_interpolation )
            {
            dbg.location(722,7);
            match(input,DOT,FOLLOW_DOT_in_cssClass3508); if (state.failed) return ;
            dbg.location(723,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:723:9: ( IDENT | GEN | {...}? less_selector_interpolation )
            int alt145=3;
            try { dbg.enterSubRule(145);
            try { dbg.enterDecision(145, decisionCanBacktrack[145]);

            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt145=1;
                }
                break;
            case GEN:
                {
                alt145=2;
                }
                break;
            case AT_SIGN:
                {
                alt145=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(145);}

            switch (alt145) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:724:13: IDENT
                    {
                    dbg.location(724,13);
                    match(input,IDENT,FOLLOW_IDENT_in_cssClass3534); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:725:15: GEN
                    {
                    dbg.location(725,15);
                    match(input,GEN,FOLLOW_GEN_in_cssClass3551); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:726:15: {...}? less_selector_interpolation
                    {
                    dbg.location(726,15);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cssClass", "isLessSource()");
                    }
                    dbg.location(726,33);
                    pushFollow(FOLLOW_less_selector_interpolation_in_cssClass3571);
                    less_selector_interpolation();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(145);}


            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(WS, IDENT, LBRACE)); 
                
        }
        finally {
        }
        dbg.location(728, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cssClass");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cssClass"


    // $ANTLR start "elementName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:735:1: elementName : ( IDENT | GEN | LESS_AND | STAR );
    public final void elementName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "elementName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(735, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:736:5: ( IDENT | GEN | LESS_AND | STAR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(736,5);
            if ( input.LA(1)==IDENT||input.LA(1)==GEN||input.LA(1)==STAR||input.LA(1)==LESS_AND ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(737, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "elementName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "elementName"


    // $ANTLR start "slAttribute"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:1: slAttribute : LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET ;
    public final void slAttribute() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttribute");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(739, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:740:5: ( LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:740:7: LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET
            {
            dbg.location(740,7);
            match(input,LBRACKET,FOLLOW_LBRACKET_in_slAttribute3642); if (state.failed) return ;
            dbg.location(741,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:741:6: ( namespacePrefix )?
            int alt146=2;
            try { dbg.enterSubRule(146);
            try { dbg.enterDecision(146, decisionCanBacktrack[146]);

            int LA146_0 = input.LA(1);

            if ( (LA146_0==IDENT) ) {
                int LA146_1 = input.LA(2);

                if ( (LA146_1==PIPE) ) {
                    alt146=1;
                }
            }
            else if ( ((LA146_0>=STAR && LA146_0<=PIPE)) ) {
                alt146=1;
            }
            } finally {dbg.exitDecision(146);}

            switch (alt146) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:741:6: namespacePrefix
                    {
                    dbg.location(741,6);
                    pushFollow(FOLLOW_namespacePrefix_in_slAttribute3649);
                    namespacePrefix();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(146);}

            dbg.location(741,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:741:23: ( ws )?
            int alt147=2;
            try { dbg.enterSubRule(147);
            try { dbg.enterDecision(147, decisionCanBacktrack[147]);

            int LA147_0 = input.LA(1);

            if ( ((LA147_0>=WS && LA147_0<=COMMENT)) ) {
                alt147=1;
            }
            } finally {dbg.exitDecision(147);}

            switch (alt147) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:741:23: ws
                    {
                    dbg.location(741,23);
                    pushFollow(FOLLOW_ws_in_slAttribute3652);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(147);}

            dbg.location(742,9);
            pushFollow(FOLLOW_slAttributeName_in_slAttribute3663);
            slAttributeName();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(742,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:25: ( ws )?
            int alt148=2;
            try { dbg.enterSubRule(148);
            try { dbg.enterDecision(148, decisionCanBacktrack[148]);

            int LA148_0 = input.LA(1);

            if ( ((LA148_0>=WS && LA148_0<=COMMENT)) ) {
                alt148=1;
            }
            } finally {dbg.exitDecision(148);}

            switch (alt148) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:25: ws
                    {
                    dbg.location(742,25);
                    pushFollow(FOLLOW_ws_in_slAttribute3665);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(148);}

            dbg.location(744,13);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:744:13: ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )?
            int alt151=2;
            try { dbg.enterSubRule(151);
            try { dbg.enterDecision(151, decisionCanBacktrack[151]);

            int LA151_0 = input.LA(1);

            if ( ((LA151_0>=OPEQ && LA151_0<=CONTAINS)) ) {
                alt151=1;
            }
            } finally {dbg.exitDecision(151);}

            switch (alt151) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:745:17: ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )?
                    {
                    dbg.location(745,17);
                    if ( (input.LA(1)>=OPEQ && input.LA(1)<=CONTAINS) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(753,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:753:17: ( ws )?
                    int alt149=2;
                    try { dbg.enterSubRule(149);
                    try { dbg.enterDecision(149, decisionCanBacktrack[149]);

                    int LA149_0 = input.LA(1);

                    if ( ((LA149_0>=WS && LA149_0<=COMMENT)) ) {
                        alt149=1;
                    }
                    } finally {dbg.exitDecision(149);}

                    switch (alt149) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:753:17: ws
                            {
                            dbg.location(753,17);
                            pushFollow(FOLLOW_ws_in_slAttribute3887);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(149);}

                    dbg.location(754,17);
                    pushFollow(FOLLOW_slAttributeValue_in_slAttribute3906);
                    slAttributeValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(755,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:755:17: ( ws )?
                    int alt150=2;
                    try { dbg.enterSubRule(150);
                    try { dbg.enterDecision(150, decisionCanBacktrack[150]);

                    int LA150_0 = input.LA(1);

                    if ( ((LA150_0>=WS && LA150_0<=COMMENT)) ) {
                        alt150=1;
                    }
                    } finally {dbg.exitDecision(150);}

                    switch (alt150) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:755:17: ws
                            {
                            dbg.location(755,17);
                            pushFollow(FOLLOW_ws_in_slAttribute3924);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(150);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(151);}

            dbg.location(758,7);
            match(input,RBRACKET,FOLLOW_RBRACKET_in_slAttribute3953); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(IDENT, LBRACE)); 
                
        }
        finally {
        }
        dbg.location(759, 1);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttribute");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttribute"


    // $ANTLR start "slAttributeName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:766:1: slAttributeName : IDENT ;
    public final void slAttributeName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttributeName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(766, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:2: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:4: IDENT
            {
            dbg.location(767,4);
            match(input,IDENT,FOLLOW_IDENT_in_slAttributeName3969); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(768, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttributeName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttributeName"


    // $ANTLR start "slAttributeValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:770:1: slAttributeValue : ( IDENT | STRING ) ;
    public final void slAttributeValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttributeValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(770, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:771:2: ( ( IDENT | STRING ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:772:2: ( IDENT | STRING )
            {
            dbg.location(772,2);
            if ( (input.LA(1)>=IDENT && input.LA(1)<=STRING) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(776, 9);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttributeValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttributeValue"


    // $ANTLR start "pseudo"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:1: pseudo : ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) ) ;
    public final void pseudo() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "pseudo");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(778, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:5: ( ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:7: ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) )
            {
            dbg.location(779,7);
            if ( input.LA(1)==COLON||input.LA(1)==DCOLON ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(780,14);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:14: ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) )
            int alt160=2;
            try { dbg.enterSubRule(160);
            try { dbg.enterDecision(160, decisionCanBacktrack[160]);

            int LA160_0 = input.LA(1);

            if ( (LA160_0==IDENT||LA160_0==GEN) ) {
                alt160=1;
            }
            else if ( (LA160_0==NOT) ) {
                alt160=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(160);}

            switch (alt160) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:781:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
                    {
                    dbg.location(781,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:781:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:21: ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
                    {
                    dbg.location(782,21);
                    if ( input.LA(1)==IDENT||input.LA(1)==GEN ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(783,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:783:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
                    int alt156=2;
                    try { dbg.enterSubRule(156);
                    try { dbg.enterDecision(156, decisionCanBacktrack[156]);

                    try {
                        isCyclicDecision = true;
                        alt156 = dfa156.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(156);}

                    switch (alt156) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:784:25: ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN
                            {
                            dbg.location(784,25);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:784:25: ( ws )?
                            int alt152=2;
                            try { dbg.enterSubRule(152);
                            try { dbg.enterDecision(152, decisionCanBacktrack[152]);

                            int LA152_0 = input.LA(1);

                            if ( ((LA152_0>=WS && LA152_0<=COMMENT)) ) {
                                alt152=1;
                            }
                            } finally {dbg.exitDecision(152);}

                            switch (alt152) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:784:25: ws
                                    {
                                    dbg.location(784,25);
                                    pushFollow(FOLLOW_ws_in_pseudo4164);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(152);}

                            dbg.location(784,29);
                            match(input,LPAREN,FOLLOW_LPAREN_in_pseudo4167); if (state.failed) return ;
                            dbg.location(784,36);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:784:36: ( ws )?
                            int alt153=2;
                            try { dbg.enterSubRule(153);
                            try { dbg.enterDecision(153, decisionCanBacktrack[153]);

                            int LA153_0 = input.LA(1);

                            if ( ((LA153_0>=WS && LA153_0<=COMMENT)) ) {
                                alt153=1;
                            }
                            } finally {dbg.exitDecision(153);}

                            switch (alt153) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:784:36: ws
                                    {
                                    dbg.location(784,36);
                                    pushFollow(FOLLOW_ws_in_pseudo4169);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(153);}

                            dbg.location(784,40);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:784:40: ( ( expression ( ws )? ) | STAR )?
                            int alt155=3;
                            try { dbg.enterSubRule(155);
                            try { dbg.enterDecision(155, decisionCanBacktrack[155]);

                            int LA155_0 = input.LA(1);

                            if ( (LA155_0==NAMESPACE_SYM||(LA155_0>=IDENT && LA155_0<=IMPORT_SYM)||LA155_0==MEDIA_SYM||LA155_0==GEN||(LA155_0>=AT_IDENT && LA155_0<=MOZ_DOCUMENT_SYM)||(LA155_0>=WEBKIT_KEYFRAMES_SYM && LA155_0<=RIGHTBOTTOM_SYM)||(LA155_0>=MINUS && LA155_0<=PLUS)||(LA155_0>=TILDE && LA155_0<=HASH)||(LA155_0>=SASS_VAR && LA155_0<=PERCENTAGE_SYMBOL)||(LA155_0>=SASS_CONTENT && LA155_0<=SASS_WHILE)) ) {
                                alt155=1;
                            }
                            else if ( (LA155_0==STAR) ) {
                                alt155=2;
                            }
                            } finally {dbg.exitDecision(155);}

                            switch (alt155) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:784:42: ( expression ( ws )? )
                                    {
                                    dbg.location(784,42);
                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:784:42: ( expression ( ws )? )
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:784:43: expression ( ws )?
                                    {
                                    dbg.location(784,43);
                                    pushFollow(FOLLOW_expression_in_pseudo4175);
                                    expression();

                                    state._fsp--;
                                    if (state.failed) return ;
                                    dbg.location(784,54);
                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:784:54: ( ws )?
                                    int alt154=2;
                                    try { dbg.enterSubRule(154);
                                    try { dbg.enterDecision(154, decisionCanBacktrack[154]);

                                    int LA154_0 = input.LA(1);

                                    if ( ((LA154_0>=WS && LA154_0<=COMMENT)) ) {
                                        alt154=1;
                                    }
                                    } finally {dbg.exitDecision(154);}

                                    switch (alt154) {
                                        case 1 :
                                            dbg.enterAlt(1);

                                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:784:54: ws
                                            {
                                            dbg.location(784,54);
                                            pushFollow(FOLLOW_ws_in_pseudo4177);
                                            ws();

                                            state._fsp--;
                                            if (state.failed) return ;

                                            }
                                            break;

                                    }
                                    } finally {dbg.exitSubRule(154);}


                                    }


                                    }
                                    break;
                                case 2 :
                                    dbg.enterAlt(2);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:784:61: STAR
                                    {
                                    dbg.location(784,61);
                                    match(input,STAR,FOLLOW_STAR_in_pseudo4183); if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(155);}

                            dbg.location(784,69);
                            match(input,RPAREN,FOLLOW_RPAREN_in_pseudo4188); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(156);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:17: ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN )
                    {
                    dbg.location(788,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:17: ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:19: NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN
                    {
                    dbg.location(788,19);
                    match(input,NOT,FOLLOW_NOT_in_pseudo4267); if (state.failed) return ;
                    dbg.location(788,23);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:23: ( ws )?
                    int alt157=2;
                    try { dbg.enterSubRule(157);
                    try { dbg.enterDecision(157, decisionCanBacktrack[157]);

                    int LA157_0 = input.LA(1);

                    if ( ((LA157_0>=WS && LA157_0<=COMMENT)) ) {
                        alt157=1;
                    }
                    } finally {dbg.exitDecision(157);}

                    switch (alt157) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:23: ws
                            {
                            dbg.location(788,23);
                            pushFollow(FOLLOW_ws_in_pseudo4269);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(157);}

                    dbg.location(788,27);
                    match(input,LPAREN,FOLLOW_LPAREN_in_pseudo4272); if (state.failed) return ;
                    dbg.location(788,34);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:34: ( ws )?
                    int alt158=2;
                    try { dbg.enterSubRule(158);
                    try { dbg.enterDecision(158, decisionCanBacktrack[158]);

                    int LA158_0 = input.LA(1);

                    if ( ((LA158_0>=WS && LA158_0<=COMMENT)) ) {
                        alt158=1;
                    }
                    } finally {dbg.exitDecision(158);}

                    switch (alt158) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:34: ws
                            {
                            dbg.location(788,34);
                            pushFollow(FOLLOW_ws_in_pseudo4274);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(158);}

                    dbg.location(788,38);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:38: ( simpleSelectorSequence )?
                    int alt159=2;
                    try { dbg.enterSubRule(159);
                    try { dbg.enterDecision(159, decisionCanBacktrack[159]);

                    int LA159_0 = input.LA(1);

                    if ( (LA159_0==IDENT||LA159_0==GEN||LA159_0==COLON||(LA159_0>=HASH_SYMBOL && LA159_0<=PIPE)||LA159_0==LESS_AND||LA159_0==AT_SIGN) ) {
                        alt159=1;
                    }
                    } finally {dbg.exitDecision(159);}

                    switch (alt159) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:38: simpleSelectorSequence
                            {
                            dbg.location(788,38);
                            pushFollow(FOLLOW_simpleSelectorSequence_in_pseudo4277);
                            simpleSelectorSequence();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(159);}

                    dbg.location(788,62);
                    match(input,RPAREN,FOLLOW_RPAREN_in_pseudo4280); if (state.failed) return ;

                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(160);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(790, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pseudo");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "pseudo"


    // $ANTLR start "propertyDeclaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:1: propertyDeclaration : ( ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? | {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue );
    public final void propertyDeclaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "propertyDeclaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(792, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:793:5: ( ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? | {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue )
            int alt169=2;
            try { dbg.enterDecision(169, decisionCanBacktrack[169]);

            try {
                isCyclicDecision = true;
                alt169 = dfa169.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(169);}

            switch (alt169) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:794:5: ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )?
                    {
                    dbg.location(794,5);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:794:5: ( STAR )?
                    int alt161=2;
                    try { dbg.enterSubRule(161);
                    try { dbg.enterDecision(161, decisionCanBacktrack[161]);

                    int LA161_0 = input.LA(1);

                    if ( (LA161_0==STAR) ) {
                        alt161=1;
                    }
                    } finally {dbg.exitDecision(161);}

                    switch (alt161) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:794:5: STAR
                            {
                            dbg.location(794,5);
                            match(input,STAR,FOLLOW_STAR_in_propertyDeclaration4319); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(161);}

                    dbg.location(794,11);
                    pushFollow(FOLLOW_property_in_propertyDeclaration4322);
                    property();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(794,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:794:20: ( ws )?
                    int alt162=2;
                    try { dbg.enterSubRule(162);
                    try { dbg.enterDecision(162, decisionCanBacktrack[162]);

                    int LA162_0 = input.LA(1);

                    if ( ((LA162_0>=WS && LA162_0<=COMMENT)) ) {
                        alt162=1;
                    }
                    } finally {dbg.exitDecision(162);}

                    switch (alt162) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:794:20: ws
                            {
                            dbg.location(794,20);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration4324);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(162);}

                    dbg.location(794,24);
                    match(input,COLON,FOLLOW_COLON_in_propertyDeclaration4327); if (state.failed) return ;
                    dbg.location(794,30);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:794:30: ( ws )?
                    int alt163=2;
                    try { dbg.enterSubRule(163);
                    try { dbg.enterDecision(163, decisionCanBacktrack[163]);

                    int LA163_0 = input.LA(1);

                    if ( ((LA163_0>=WS && LA163_0<=COMMENT)) ) {
                        alt163=1;
                    }
                    } finally {dbg.exitDecision(163);}

                    switch (alt163) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:794:30: ws
                            {
                            dbg.location(794,30);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration4329);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(163);}

                    dbg.location(794,34);
                    pushFollow(FOLLOW_propertyValue_in_propertyDeclaration4332);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(794,48);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:794:48: ( ( ws )? prio )?
                    int alt165=2;
                    try { dbg.enterSubRule(165);
                    try { dbg.enterDecision(165, decisionCanBacktrack[165]);

                    try {
                        isCyclicDecision = true;
                        alt165 = dfa165.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(165);}

                    switch (alt165) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:794:49: ( ws )? prio
                            {
                            dbg.location(794,49);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:794:49: ( ws )?
                            int alt164=2;
                            try { dbg.enterSubRule(164);
                            try { dbg.enterDecision(164, decisionCanBacktrack[164]);

                            int LA164_0 = input.LA(1);

                            if ( ((LA164_0>=WS && LA164_0<=COMMENT)) ) {
                                alt164=1;
                            }
                            } finally {dbg.exitDecision(164);}

                            switch (alt164) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:794:49: ws
                                    {
                                    dbg.location(794,49);
                                    pushFollow(FOLLOW_ws_in_propertyDeclaration4335);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(164);}

                            dbg.location(794,53);
                            pushFollow(FOLLOW_prio_in_propertyDeclaration4338);
                            prio();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(165);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:795:7: {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue
                    {
                    dbg.location(795,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "propertyDeclaration", "isCssPreprocessorSource()");
                    }
                    dbg.location(795,36);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:795:36: ( STAR )?
                    int alt166=2;
                    try { dbg.enterSubRule(166);
                    try { dbg.enterDecision(166, decisionCanBacktrack[166]);

                    int LA166_0 = input.LA(1);

                    if ( (LA166_0==STAR) ) {
                        alt166=1;
                    }
                    } finally {dbg.exitDecision(166);}

                    switch (alt166) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:795:36: STAR
                            {
                            dbg.location(795,36);
                            match(input,STAR,FOLLOW_STAR_in_propertyDeclaration4350); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(166);}

                    dbg.location(795,42);
                    pushFollow(FOLLOW_property_in_propertyDeclaration4353);
                    property();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(795,51);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:795:51: ( ws )?
                    int alt167=2;
                    try { dbg.enterSubRule(167);
                    try { dbg.enterDecision(167, decisionCanBacktrack[167]);

                    int LA167_0 = input.LA(1);

                    if ( ((LA167_0>=WS && LA167_0<=COMMENT)) ) {
                        alt167=1;
                    }
                    } finally {dbg.exitDecision(167);}

                    switch (alt167) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:795:51: ws
                            {
                            dbg.location(795,51);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration4355);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(167);}

                    dbg.location(795,55);
                    match(input,COLON,FOLLOW_COLON_in_propertyDeclaration4358); if (state.failed) return ;
                    dbg.location(795,61);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:795:61: ( ws )?
                    int alt168=2;
                    try { dbg.enterSubRule(168);
                    try { dbg.enterDecision(168, decisionCanBacktrack[168]);

                    int LA168_0 = input.LA(1);

                    if ( ((LA168_0>=WS && LA168_0<=COMMENT)) ) {
                        alt168=1;
                    }
                    } finally {dbg.exitDecision(168);}

                    switch (alt168) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:795:61: ws
                            {
                            dbg.location(795,61);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration4360);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(168);}

                    dbg.location(795,65);
                    pushFollow(FOLLOW_cp_propertyValue_in_propertyDeclaration4363);
                    cp_propertyValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    //recovery: if an mismatched token occures inside a declaration is found,
                    //then skip all tokens until an end of the rule is found represented by right curly brace
                    consumeUntil(input, BitSet.of(SEMI, RBRACE)); 
                
        }
        finally {
        }
        dbg.location(796, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "propertyDeclaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "propertyDeclaration"


    // $ANTLR start "cp_propertyValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:805:1: cp_propertyValue : ({...}? cp_expression_list | propertyValue );
    public final void cp_propertyValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_propertyValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(805, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:806:5: ({...}? cp_expression_list | propertyValue )
            int alt170=2;
            try { dbg.enterDecision(170, decisionCanBacktrack[170]);

            try {
                isCyclicDecision = true;
                alt170 = dfa170.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(170);}

            switch (alt170) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:807:5: {...}? cp_expression_list
                    {
                    dbg.location(807,5);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_propertyValue", "isCssPreprocessorSource()");
                    }
                    dbg.location(807,34);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_propertyValue4398);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:808:7: propertyValue
                    {
                    dbg.location(808,7);
                    pushFollow(FOLLOW_propertyValue_in_cp_propertyValue4406);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(809, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_propertyValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_propertyValue"


    // $ANTLR start "propertyValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:811:1: propertyValue : expression ;
    public final void propertyValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "propertyValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(811, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:812:2: ( expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:813:9: expression
            {
            dbg.location(813,9);
            pushFollow(FOLLOW_expression_in_propertyValue4428);
            expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(814, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "propertyValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "propertyValue"


    // $ANTLR start "expressionPredicate"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:1: expressionPredicate options {k=1; } : (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) ;
    public final void expressionPredicate() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "expressionPredicate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(817, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:819:5: ( (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:820:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE )
            {
            dbg.location(820,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:820:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+
            int cnt171=0;
            try { dbg.enterSubRule(171);

            loop171:
            do {
                int alt171=2;
                try { dbg.enterDecision(171, decisionCanBacktrack[171]);

                int LA171_0 = input.LA(1);

                if ( (LA171_0==NAMESPACE_SYM||(LA171_0>=IDENT && LA171_0<=MEDIA_SYM)||(LA171_0>=AND && LA171_0<=COLON)||(LA171_0>=MOZ_DOCUMENT_SYM && LA171_0<=RIGHTBOTTOM_SYM)||(LA171_0>=MINUS && LA171_0<=SASS_EXTEND_ONLY_SELECTOR)||(LA171_0>=PIPE && LA171_0<=RBRACKET)||(LA171_0>=NUMBER && LA171_0<=LINE_COMMENT)) ) {
                    alt171=1;
                }


                } finally {dbg.exitDecision(171);}

                switch (alt171) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:820:7: ~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR )
            	    {
            	    dbg.location(820,7);
            	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=COLON)||(input.LA(1)>=MOZ_DOCUMENT_SYM && input.LA(1)<=RIGHTBOTTOM_SYM)||(input.LA(1)>=MINUS && input.LA(1)<=SASS_EXTEND_ONLY_SELECTOR)||(input.LA(1)>=PIPE && input.LA(1)<=RBRACKET)||(input.LA(1)>=NUMBER && input.LA(1)<=LINE_COMMENT) ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt171 >= 1 ) break loop171;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(171, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt171++;
            } while (true);
            } finally {dbg.exitSubRule(171);}

            dbg.location(820,76);
            if ( input.LA(1)==SEMI||input.LA(1)==RBRACE ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(821, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "expressionPredicate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "expressionPredicate"


    // $ANTLR start "syncToDeclarationsRule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:825:1: syncToDeclarationsRule : ;
    public final void syncToDeclarationsRule() throws RecognitionException {

                //why sync to DOT? - LESS allows class rules nested
                syncToSet(BitSet.of(IDENT, RBRACE, STAR, DOT)); 
            
        try { dbg.enterRule(getGrammarFileName(), "syncToDeclarationsRule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(825, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:830:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:6: 
            {
            }

        }
        finally {
        }
        dbg.location(831, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncToDeclarationsRule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncToDeclarationsRule"


    // $ANTLR start "syncTo_RBRACE"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:833:1: syncTo_RBRACE : ;
    public final void syncTo_RBRACE() throws RecognitionException {

                syncToRBRACE(1); //initial nest == 1
            
        try { dbg.enterRule(getGrammarFileName(), "syncTo_RBRACE");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(833, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:837:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:6: 
            {
            }

        }
        finally {
        }
        dbg.location(838, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncTo_RBRACE");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncTo_RBRACE"


    // $ANTLR start "syncTo_SEMI"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:1: syncTo_SEMI : SEMI ;
    public final void syncTo_SEMI() throws RecognitionException {

                syncToSet(BitSet.of(SEMI)); 
            
        try { dbg.enterRule(getGrammarFileName(), "syncTo_SEMI");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(840, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:844:6: ( SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:845:13: SEMI
            {
            dbg.location(845,13);
            match(input,SEMI,FOLLOW_SEMI_in_syncTo_SEMI4615); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(846, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncTo_SEMI");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncTo_SEMI"


    // $ANTLR start "syncToFollow"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:849:1: syncToFollow : ;
    public final void syncToFollow() throws RecognitionException {

                syncToSet();
            
        try { dbg.enterRule(getGrammarFileName(), "syncToFollow");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(849, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:853:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:854:6: 
            {
            }

        }
        finally {
        }
        dbg.location(854, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncToFollow");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncToFollow"


    // $ANTLR start "prio"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:856:1: prio : IMPORTANT_SYM ;
    public final void prio() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "prio");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(856, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:857:5: ( IMPORTANT_SYM )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:857:7: IMPORTANT_SYM
            {
            dbg.location(857,7);
            match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_prio4670); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(858, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prio");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "prio"


    // $ANTLR start "expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:860:1: expression : term ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )* ;
    public final void expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(860, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:5: ( term ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:7: term ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )*
            {
            dbg.location(861,7);
            pushFollow(FOLLOW_term_in_expression4691);
            term();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(861,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )*
            try { dbg.enterSubRule(175);

            loop175:
            do {
                int alt175=2;
                try { dbg.enterDecision(175, decisionCanBacktrack[175]);

                try {
                    isCyclicDecision = true;
                    alt175 = dfa175.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(175);}

                switch (alt175) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:14: ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term
            	    {
            	    dbg.location(861,66);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:66: ( ws | ( ( ws )? operator ( ws )? ) | )
            	    int alt174=3;
            	    try { dbg.enterSubRule(174);
            	    try { dbg.enterDecision(174, decisionCanBacktrack[174]);

            	    try {
            	        isCyclicDecision = true;
            	        alt174 = dfa174.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(174);}

            	    switch (alt174) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:68: ws
            	            {
            	            dbg.location(861,68);
            	            pushFollow(FOLLOW_ws_in_expression4723);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:73: ( ( ws )? operator ( ws )? )
            	            {
            	            dbg.location(861,73);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:73: ( ( ws )? operator ( ws )? )
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:74: ( ws )? operator ( ws )?
            	            {
            	            dbg.location(861,74);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:74: ( ws )?
            	            int alt172=2;
            	            try { dbg.enterSubRule(172);
            	            try { dbg.enterDecision(172, decisionCanBacktrack[172]);

            	            int LA172_0 = input.LA(1);

            	            if ( ((LA172_0>=WS && LA172_0<=COMMENT)) ) {
            	                alt172=1;
            	            }
            	            } finally {dbg.exitDecision(172);}

            	            switch (alt172) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:74: ws
            	                    {
            	                    dbg.location(861,74);
            	                    pushFollow(FOLLOW_ws_in_expression4728);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(172);}

            	            dbg.location(861,78);
            	            pushFollow(FOLLOW_operator_in_expression4731);
            	            operator();

            	            state._fsp--;
            	            if (state.failed) return ;
            	            dbg.location(861,87);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:87: ( ws )?
            	            int alt173=2;
            	            try { dbg.enterSubRule(173);
            	            try { dbg.enterDecision(173, decisionCanBacktrack[173]);

            	            int LA173_0 = input.LA(1);

            	            if ( ((LA173_0>=WS && LA173_0<=COMMENT)) ) {
            	                alt173=1;
            	            }
            	            } finally {dbg.exitDecision(173);}

            	            switch (alt173) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:87: ws
            	                    {
            	                    dbg.location(861,87);
            	                    pushFollow(FOLLOW_ws_in_expression4733);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(173);}


            	            }


            	            }
            	            break;
            	        case 3 :
            	            dbg.enterAlt(3);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:107: 
            	            {
            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(174);}

            	    dbg.location(861,109);
            	    pushFollow(FOLLOW_term_in_expression4742);
            	    term();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop175;
                }
            } while (true);
            } finally {dbg.exitSubRule(175);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(862, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "expression"


    // $ANTLR start "term"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:864:1: term : ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | {...}? TILDE STRING | {...}? LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol ) ;
    public final void term() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "term");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(864, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:5: ( ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | {...}? TILDE STRING | {...}? LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:866:5: ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | {...}? TILDE STRING | {...}? LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol )
            {
            dbg.location(866,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:866:5: ( unaryOperator ( ws )? )?
            int alt177=2;
            try { dbg.enterSubRule(177);
            try { dbg.enterDecision(177, decisionCanBacktrack[177]);

            int LA177_0 = input.LA(1);

            if ( ((LA177_0>=MINUS && LA177_0<=PLUS)) ) {
                alt177=1;
            }
            } finally {dbg.exitDecision(177);}

            switch (alt177) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:866:7: unaryOperator ( ws )?
                    {
                    dbg.location(866,7);
                    pushFollow(FOLLOW_unaryOperator_in_term4772);
                    unaryOperator();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(866,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:866:21: ( ws )?
                    int alt176=2;
                    try { dbg.enterSubRule(176);
                    try { dbg.enterDecision(176, decisionCanBacktrack[176]);

                    int LA176_0 = input.LA(1);

                    if ( ((LA176_0>=WS && LA176_0<=COMMENT)) ) {
                        alt176=1;
                    }
                    } finally {dbg.exitDecision(176);}

                    switch (alt176) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:866:21: ws
                            {
                            dbg.location(866,21);
                            pushFollow(FOLLOW_ws_in_term4774);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(176);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(177);}

            dbg.location(867,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:867:5: ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | {...}? TILDE STRING | {...}? LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol )
            int alt178=22;
            try { dbg.enterSubRule(178);
            try { dbg.enterDecision(178, decisionCanBacktrack[178]);

            try {
                isCyclicDecision = true;
                alt178 = dfa178.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(178);}

            switch (alt178) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:868:9: ( functionName ( ws )? LPAREN )=> function
                    {
                    dbg.location(868,36);
                    pushFollow(FOLLOW_function_in_term4803);
                    function();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:11: IDENT
                    {
                    dbg.location(869,11);
                    match(input,IDENT,FOLLOW_IDENT_in_term4816); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:870:11: NUMBER
                    {
                    dbg.location(870,11);
                    match(input,NUMBER,FOLLOW_NUMBER_in_term4828); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:871:11: PERCENTAGE
                    {
                    dbg.location(871,11);
                    match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_term4840); if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:872:11: LENGTH
                    {
                    dbg.location(872,11);
                    match(input,LENGTH,FOLLOW_LENGTH_in_term4852); if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:873:11: EMS
                    {
                    dbg.location(873,11);
                    match(input,EMS,FOLLOW_EMS_in_term4864); if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:874:11: REM
                    {
                    dbg.location(874,11);
                    match(input,REM,FOLLOW_REM_in_term4876); if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:875:11: EXS
                    {
                    dbg.location(875,11);
                    match(input,EXS,FOLLOW_EXS_in_term4888); if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:876:11: ANGLE
                    {
                    dbg.location(876,11);
                    match(input,ANGLE,FOLLOW_ANGLE_in_term4900); if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:877:11: TIME
                    {
                    dbg.location(877,11);
                    match(input,TIME,FOLLOW_TIME_in_term4912); if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:878:11: FREQ
                    {
                    dbg.location(878,11);
                    match(input,FREQ,FOLLOW_FREQ_in_term4924); if (state.failed) return ;

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:879:11: RESOLUTION
                    {
                    dbg.location(879,11);
                    match(input,RESOLUTION,FOLLOW_RESOLUTION_in_term4936); if (state.failed) return ;

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:880:11: DIMENSION
                    {
                    dbg.location(880,11);
                    match(input,DIMENSION,FOLLOW_DIMENSION_in_term4948); if (state.failed) return ;

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:881:11: STRING
                    {
                    dbg.location(881,11);
                    match(input,STRING,FOLLOW_STRING_in_term4965); if (state.failed) return ;

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:882:11: {...}? TILDE STRING
                    {
                    dbg.location(882,11);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isLessSource()");
                    }
                    dbg.location(882,29);
                    match(input,TILDE,FOLLOW_TILDE_in_term4979); if (state.failed) return ;
                    dbg.location(882,35);
                    match(input,STRING,FOLLOW_STRING_in_term4981); if (state.failed) return ;

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:883:11: {...}? LESS_JS_STRING
                    {
                    dbg.location(883,11);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isLessSource()");
                    }
                    dbg.location(883,29);
                    match(input,LESS_JS_STRING,FOLLOW_LESS_JS_STRING_in_term4996); if (state.failed) return ;

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:884:11: GEN
                    {
                    dbg.location(884,11);
                    match(input,GEN,FOLLOW_GEN_in_term5008); if (state.failed) return ;

                    }
                    break;
                case 18 :
                    dbg.enterAlt(18);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:885:11: URI
                    {
                    dbg.location(885,11);
                    match(input,URI,FOLLOW_URI_in_term5020); if (state.failed) return ;

                    }
                    break;
                case 19 :
                    dbg.enterAlt(19);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:886:11: hexColor
                    {
                    dbg.location(886,11);
                    pushFollow(FOLLOW_hexColor_in_term5032);
                    hexColor();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 20 :
                    dbg.enterAlt(20);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:887:11: {...}? cp_variable
                    {
                    dbg.location(887,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
                    }
                    dbg.location(887,40);
                    pushFollow(FOLLOW_cp_variable_in_term5046);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 21 :
                    dbg.enterAlt(21);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:888:11: {...}? sass_interpolation_expression_var
                    {
                    dbg.location(888,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
                    }
                    dbg.location(888,40);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_term5060);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 22 :
                    dbg.enterAlt(22);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:889:11: {...}? cp_term_symbol
                    {
                    dbg.location(889,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
                    }
                    dbg.location(889,40);
                    pushFollow(FOLLOW_cp_term_symbol_in_term5074);
                    cp_term_symbol();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(178);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(891, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "term");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "term"


    // $ANTLR start "cp_term_symbol"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:1: cp_term_symbol : PERCENTAGE_SYMBOL ;
    public final void cp_term_symbol() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_term_symbol");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(896, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:897:5: ( PERCENTAGE_SYMBOL )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:897:7: PERCENTAGE_SYMBOL
            {
            dbg.location(897,7);
            match(input,PERCENTAGE_SYMBOL,FOLLOW_PERCENTAGE_SYMBOL_in_cp_term_symbol5101); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(898, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_term_symbol");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_term_symbol"


    // $ANTLR start "function"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:1: function : functionName ( ws )? LPAREN ( ws )? ( fnAttributes | ) RPAREN ;
    public final void function() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "function");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(900, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:2: ( functionName ( ws )? LPAREN ( ws )? ( fnAttributes | ) RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:5: functionName ( ws )? LPAREN ( ws )? ( fnAttributes | ) RPAREN
            {
            dbg.location(901,5);
            pushFollow(FOLLOW_functionName_in_function5117);
            functionName();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(901,18);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:18: ( ws )?
            int alt179=2;
            try { dbg.enterSubRule(179);
            try { dbg.enterDecision(179, decisionCanBacktrack[179]);

            int LA179_0 = input.LA(1);

            if ( ((LA179_0>=WS && LA179_0<=COMMENT)) ) {
                alt179=1;
            }
            } finally {dbg.exitDecision(179);}

            switch (alt179) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:18: ws
                    {
                    dbg.location(901,18);
                    pushFollow(FOLLOW_ws_in_function5119);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(179);}

            dbg.location(902,3);
            match(input,LPAREN,FOLLOW_LPAREN_in_function5124); if (state.failed) return ;
            dbg.location(902,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:902:10: ( ws )?
            int alt180=2;
            try { dbg.enterSubRule(180);
            try { dbg.enterDecision(180, decisionCanBacktrack[180]);

            int LA180_0 = input.LA(1);

            if ( ((LA180_0>=WS && LA180_0<=COMMENT)) ) {
                alt180=1;
            }
            } finally {dbg.exitDecision(180);}

            switch (alt180) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:902:10: ws
                    {
                    dbg.location(902,10);
                    pushFollow(FOLLOW_ws_in_function5126);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(180);}

            dbg.location(903,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:903:3: ( fnAttributes | )
            int alt181=2;
            try { dbg.enterSubRule(181);
            try { dbg.enterDecision(181, decisionCanBacktrack[181]);

            int LA181_0 = input.LA(1);

            if ( (LA181_0==NAMESPACE_SYM||(LA181_0>=IDENT && LA181_0<=IMPORT_SYM)||LA181_0==MEDIA_SYM||(LA181_0>=NOT && LA181_0<=LPAREN)||(LA181_0>=AT_IDENT && LA181_0<=MOZ_DOCUMENT_SYM)||(LA181_0>=WEBKIT_KEYFRAMES_SYM && LA181_0<=RIGHTBOTTOM_SYM)||(LA181_0>=MINUS && LA181_0<=IMPORTANT_SYM)||(LA181_0>=TILDE && LA181_0<=HASH)||(LA181_0>=SASS_VAR && LA181_0<=PERCENTAGE_SYMBOL)||(LA181_0>=SASS_CONTENT && LA181_0<=SASS_WHILE)) ) {
                alt181=1;
            }
            else if ( (LA181_0==RPAREN) ) {
                alt181=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(181);}

            switch (alt181) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:904:21: fnAttributes
                    {
                    dbg.location(904,21);
                    pushFollow(FOLLOW_fnAttributes_in_function5153);
                    fnAttributes();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:906:3: 
                    {
                    }
                    break;

            }
            } finally {dbg.exitSubRule(181);}

            dbg.location(907,3);
            match(input,RPAREN,FOLLOW_RPAREN_in_function5184); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(RPAREN, SEMI, RBRACE)); 

        }
        finally {
        }
        dbg.location(908, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "function");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "function"


    // $ANTLR start "functionName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:914:1: functionName : ( IDENT COLON )? IDENT ( DOT IDENT )* ;
    public final void functionName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "functionName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(914, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:2: ( ( IDENT COLON )? IDENT ( DOT IDENT )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:919:9: ( IDENT COLON )? IDENT ( DOT IDENT )*
            {
            dbg.location(919,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:919:9: ( IDENT COLON )?
            int alt182=2;
            try { dbg.enterSubRule(182);
            try { dbg.enterDecision(182, decisionCanBacktrack[182]);

            int LA182_0 = input.LA(1);

            if ( (LA182_0==IDENT) ) {
                int LA182_1 = input.LA(2);

                if ( (LA182_1==COLON) ) {
                    alt182=1;
                }
            }
            } finally {dbg.exitDecision(182);}

            switch (alt182) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:919:10: IDENT COLON
                    {
                    dbg.location(919,10);
                    match(input,IDENT,FOLLOW_IDENT_in_functionName5241); if (state.failed) return ;
                    dbg.location(919,16);
                    match(input,COLON,FOLLOW_COLON_in_functionName5243); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(182);}

            dbg.location(919,24);
            match(input,IDENT,FOLLOW_IDENT_in_functionName5247); if (state.failed) return ;
            dbg.location(919,30);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:919:30: ( DOT IDENT )*
            try { dbg.enterSubRule(183);

            loop183:
            do {
                int alt183=2;
                try { dbg.enterDecision(183, decisionCanBacktrack[183]);

                int LA183_0 = input.LA(1);

                if ( (LA183_0==DOT) ) {
                    alt183=1;
                }


                } finally {dbg.exitDecision(183);}

                switch (alt183) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:919:31: DOT IDENT
            	    {
            	    dbg.location(919,31);
            	    match(input,DOT,FOLLOW_DOT_in_functionName5250); if (state.failed) return ;
            	    dbg.location(919,35);
            	    match(input,IDENT,FOLLOW_IDENT_in_functionName5252); if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop183;
                }
            } while (true);
            } finally {dbg.exitSubRule(183);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(920, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "functionName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "functionName"


    // $ANTLR start "fnAttributes"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:922:1: fnAttributes : fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )? ;
    public final void fnAttributes() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributes");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(922, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:923:5: ( fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:924:5: fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )?
            {
            dbg.location(924,5);
            pushFollow(FOLLOW_fnAttribute_in_fnAttributes5276);
            fnAttribute();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(924,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:924:17: ( ( ws )? COMMA ( ws )? fnAttribute )*
            try { dbg.enterSubRule(186);

            loop186:
            do {
                int alt186=2;
                try { dbg.enterDecision(186, decisionCanBacktrack[186]);

                try {
                    isCyclicDecision = true;
                    alt186 = dfa186.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(186);}

                switch (alt186) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:924:18: ( ws )? COMMA ( ws )? fnAttribute
            	    {
            	    dbg.location(924,18);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:924:18: ( ws )?
            	    int alt184=2;
            	    try { dbg.enterSubRule(184);
            	    try { dbg.enterDecision(184, decisionCanBacktrack[184]);

            	    int LA184_0 = input.LA(1);

            	    if ( ((LA184_0>=WS && LA184_0<=COMMENT)) ) {
            	        alt184=1;
            	    }
            	    } finally {dbg.exitDecision(184);}

            	    switch (alt184) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:924:18: ws
            	            {
            	            dbg.location(924,18);
            	            pushFollow(FOLLOW_ws_in_fnAttributes5279);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(184);}

            	    dbg.location(924,22);
            	    match(input,COMMA,FOLLOW_COMMA_in_fnAttributes5282); if (state.failed) return ;
            	    dbg.location(924,28);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:924:28: ( ws )?
            	    int alt185=2;
            	    try { dbg.enterSubRule(185);
            	    try { dbg.enterDecision(185, decisionCanBacktrack[185]);

            	    int LA185_0 = input.LA(1);

            	    if ( ((LA185_0>=WS && LA185_0<=COMMENT)) ) {
            	        alt185=1;
            	    }
            	    } finally {dbg.exitDecision(185);}

            	    switch (alt185) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:924:28: ws
            	            {
            	            dbg.location(924,28);
            	            pushFollow(FOLLOW_ws_in_fnAttributes5284);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(185);}

            	    dbg.location(924,32);
            	    pushFollow(FOLLOW_fnAttribute_in_fnAttributes5287);
            	    fnAttribute();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop186;
                }
            } while (true);
            } finally {dbg.exitSubRule(186);}

            dbg.location(924,46);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:924:46: ( ws )?
            int alt187=2;
            try { dbg.enterSubRule(187);
            try { dbg.enterDecision(187, decisionCanBacktrack[187]);

            int LA187_0 = input.LA(1);

            if ( ((LA187_0>=WS && LA187_0<=COMMENT)) ) {
                alt187=1;
            }
            } finally {dbg.exitDecision(187);}

            switch (alt187) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:924:46: ws
                    {
                    dbg.location(924,46);
                    pushFollow(FOLLOW_ws_in_fnAttributes5291);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(187);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(925, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributes");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributes"


    // $ANTLR start "fnAttribute"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:927:1: fnAttribute : ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | {...}? cp_expression | expression );
    public final void fnAttribute() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttribute");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(927, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:2: ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | {...}? cp_expression | expression )
            int alt190=3;
            try { dbg.enterDecision(190, decisionCanBacktrack[190]);

            try {
                isCyclicDecision = true;
                alt190 = dfa190.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(190);}

            switch (alt190) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:929:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue
                    {
                    dbg.location(929,46);
                    pushFollow(FOLLOW_fnAttributeName_in_fnAttribute5329);
                    fnAttributeName();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(929,62);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:929:62: ( ws )?
                    int alt188=2;
                    try { dbg.enterSubRule(188);
                    try { dbg.enterDecision(188, decisionCanBacktrack[188]);

                    int LA188_0 = input.LA(1);

                    if ( ((LA188_0>=WS && LA188_0<=COMMENT)) ) {
                        alt188=1;
                    }
                    } finally {dbg.exitDecision(188);}

                    switch (alt188) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:929:62: ws
                            {
                            dbg.location(929,62);
                            pushFollow(FOLLOW_ws_in_fnAttribute5331);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(188);}

                    dbg.location(929,66);
                    if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(929,79);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:929:79: ( ws )?
                    int alt189=2;
                    try { dbg.enterSubRule(189);
                    try { dbg.enterDecision(189, decisionCanBacktrack[189]);

                    int LA189_0 = input.LA(1);

                    if ( ((LA189_0>=WS && LA189_0<=COMMENT)) ) {
                        alt189=1;
                    }
                    } finally {dbg.exitDecision(189);}

                    switch (alt189) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:929:79: ws
                            {
                            dbg.location(929,79);
                            pushFollow(FOLLOW_ws_in_fnAttribute5340);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(189);}

                    dbg.location(929,83);
                    pushFollow(FOLLOW_fnAttributeValue_in_fnAttribute5343);
                    fnAttributeValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:930:11: {...}? cp_expression
                    {
                    dbg.location(930,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "fnAttribute", "isCssPreprocessorSource()");
                    }
                    dbg.location(930,40);
                    pushFollow(FOLLOW_cp_expression_in_fnAttribute5357);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:931:11: expression
                    {
                    dbg.location(931,11);
                    pushFollow(FOLLOW_expression_in_fnAttribute5369);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(932, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttribute");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttribute"


    // $ANTLR start "fnAttributeName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:1: fnAttributeName : ( IDENT ( DOT IDENT )* | {...}? cp_variable );
    public final void fnAttributeName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributeName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(934, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:935:2: ( IDENT ( DOT IDENT )* | {...}? cp_variable )
            int alt192=2;
            try { dbg.enterDecision(192, decisionCanBacktrack[192]);

            int LA192_0 = input.LA(1);

            if ( (LA192_0==IDENT) ) {
                alt192=1;
            }
            else if ( (LA192_0==NAMESPACE_SYM||(LA192_0>=CHARSET_SYM && LA192_0<=IMPORT_SYM)||LA192_0==MEDIA_SYM||(LA192_0>=AT_IDENT && LA192_0<=MOZ_DOCUMENT_SYM)||LA192_0==WEBKIT_KEYFRAMES_SYM||(LA192_0>=PAGE_SYM && LA192_0<=RIGHTBOTTOM_SYM)||LA192_0==SASS_VAR||(LA192_0>=SASS_CONTENT && LA192_0<=SASS_WHILE)) ) {
                alt192=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 192, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(192);}

            switch (alt192) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:936:13: IDENT ( DOT IDENT )*
                    {
                    dbg.location(936,13);
                    match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName5397); if (state.failed) return ;
                    dbg.location(936,19);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:936:19: ( DOT IDENT )*
                    try { dbg.enterSubRule(191);

                    loop191:
                    do {
                        int alt191=2;
                        try { dbg.enterDecision(191, decisionCanBacktrack[191]);

                        int LA191_0 = input.LA(1);

                        if ( (LA191_0==DOT) ) {
                            alt191=1;
                        }


                        } finally {dbg.exitDecision(191);}

                        switch (alt191) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:936:20: DOT IDENT
                    	    {
                    	    dbg.location(936,20);
                    	    match(input,DOT,FOLLOW_DOT_in_fnAttributeName5400); if (state.failed) return ;
                    	    dbg.location(936,24);
                    	    match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName5402); if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop191;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(191);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:937:15: {...}? cp_variable
                    {
                    dbg.location(937,15);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "fnAttributeName", "isCssPreprocessorSource()");
                    }
                    dbg.location(937,44);
                    pushFollow(FOLLOW_cp_variable_in_fnAttributeName5422);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(938, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributeName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributeName"


    // $ANTLR start "fnAttributeValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:1: fnAttributeValue : ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )* | {...}? cp_math_expression );
    public final void fnAttributeValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributeValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(940, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:941:2: ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )* | {...}? cp_math_expression )
            int alt197=2;
            try { dbg.enterDecision(197, decisionCanBacktrack[197]);

            try {
                isCyclicDecision = true;
                alt197 = dfa197.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(197);}

            switch (alt197) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:13: term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )*
                    {
                    dbg.location(942,13);
                    pushFollow(FOLLOW_term_in_fnAttributeValue5447);
                    term();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(942,18);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )*
                    try { dbg.enterSubRule(196);

                    loop196:
                    do {
                        int alt196=2;
                        try { dbg.enterDecision(196, decisionCanBacktrack[196]);

                        try {
                            isCyclicDecision = true;
                            alt196 = dfa196.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(196);}

                        switch (alt196) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term
                    	    {
                    	    dbg.location(942,71);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )
                    	    int alt195=3;
                    	    try { dbg.enterSubRule(195);
                    	    try { dbg.enterDecision(195, decisionCanBacktrack[195]);

                    	    try {
                    	        isCyclicDecision = true;
                    	        alt195 = dfa195.predict(input);
                    	    }
                    	    catch (NoViableAltException nvae) {
                    	        dbg.recognitionException(nvae);
                    	        throw nvae;
                    	    }
                    	    } finally {dbg.exitDecision(195);}

                    	    switch (alt195) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:73: ws
                    	            {
                    	            dbg.location(942,73);
                    	            pushFollow(FOLLOW_ws_in_fnAttributeValue5479);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;
                    	        case 2 :
                    	            dbg.enterAlt(2);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:78: ( ( ws )? SOLIDUS ( ws )? )
                    	            {
                    	            dbg.location(942,78);
                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:78: ( ( ws )? SOLIDUS ( ws )? )
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:79: ( ws )? SOLIDUS ( ws )?
                    	            {
                    	            dbg.location(942,79);
                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:79: ( ws )?
                    	            int alt193=2;
                    	            try { dbg.enterSubRule(193);
                    	            try { dbg.enterDecision(193, decisionCanBacktrack[193]);

                    	            int LA193_0 = input.LA(1);

                    	            if ( ((LA193_0>=WS && LA193_0<=COMMENT)) ) {
                    	                alt193=1;
                    	            }
                    	            } finally {dbg.exitDecision(193);}

                    	            switch (alt193) {
                    	                case 1 :
                    	                    dbg.enterAlt(1);

                    	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:79: ws
                    	                    {
                    	                    dbg.location(942,79);
                    	                    pushFollow(FOLLOW_ws_in_fnAttributeValue5484);
                    	                    ws();

                    	                    state._fsp--;
                    	                    if (state.failed) return ;

                    	                    }
                    	                    break;

                    	            }
                    	            } finally {dbg.exitSubRule(193);}

                    	            dbg.location(942,83);
                    	            match(input,SOLIDUS,FOLLOW_SOLIDUS_in_fnAttributeValue5487); if (state.failed) return ;
                    	            dbg.location(942,91);
                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:91: ( ws )?
                    	            int alt194=2;
                    	            try { dbg.enterSubRule(194);
                    	            try { dbg.enterDecision(194, decisionCanBacktrack[194]);

                    	            int LA194_0 = input.LA(1);

                    	            if ( ((LA194_0>=WS && LA194_0<=COMMENT)) ) {
                    	                alt194=1;
                    	            }
                    	            } finally {dbg.exitDecision(194);}

                    	            switch (alt194) {
                    	                case 1 :
                    	                    dbg.enterAlt(1);

                    	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:91: ws
                    	                    {
                    	                    dbg.location(942,91);
                    	                    pushFollow(FOLLOW_ws_in_fnAttributeValue5489);
                    	                    ws();

                    	                    state._fsp--;
                    	                    if (state.failed) return ;

                    	                    }
                    	                    break;

                    	            }
                    	            } finally {dbg.exitSubRule(194);}


                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            dbg.enterAlt(3);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:111: 
                    	            {
                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(195);}

                    	    dbg.location(942,113);
                    	    pushFollow(FOLLOW_term_in_fnAttributeValue5498);
                    	    term();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop196;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(196);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:15: {...}? cp_math_expression
                    {
                    dbg.location(943,15);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "fnAttributeValue", "isCssPreprocessorSource()");
                    }
                    dbg.location(943,44);
                    pushFollow(FOLLOW_cp_math_expression_in_fnAttributeValue5519);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(944, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributeValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributeValue"


    // $ANTLR start "hexColor"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:1: hexColor : HASH ;
    public final void hexColor() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "hexColor");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(946, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:5: ( HASH )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:7: HASH
            {
            dbg.location(947,7);
            match(input,HASH,FOLLOW_HASH_in_hexColor5537); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(948, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hexColor");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "hexColor"


    // $ANTLR start "ws"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:1: ws : ( WS | NL | COMMENT )+ ;
    public final void ws() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "ws");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(950, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:5: ( ( WS | NL | COMMENT )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:7: ( WS | NL | COMMENT )+
            {
            dbg.location(951,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:7: ( WS | NL | COMMENT )+
            int cnt198=0;
            try { dbg.enterSubRule(198);

            loop198:
            do {
                int alt198=2;
                try { dbg.enterDecision(198, decisionCanBacktrack[198]);

                int LA198_0 = input.LA(1);

                if ( ((LA198_0>=WS && LA198_0<=COMMENT)) ) {
                    alt198=1;
                }


                } finally {dbg.exitDecision(198);}

                switch (alt198) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            	    {
            	    dbg.location(951,7);
            	    if ( (input.LA(1)>=WS && input.LA(1)<=COMMENT) ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt198 >= 1 ) break loop198;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(198, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt198++;
            } while (true);
            } finally {dbg.exitSubRule(198);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(952, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ws");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "ws"


    // $ANTLR start "cp_variable_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:957:1: cp_variable_declaration : ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list | {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )? );
    public final void cp_variable_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_variable_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(957, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:958:5: ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list | {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )? )
            int alt205=2;
            try { dbg.enterDecision(205, decisionCanBacktrack[205]);

            int LA205_0 = input.LA(1);

            if ( (LA205_0==NAMESPACE_SYM||(LA205_0>=CHARSET_SYM && LA205_0<=IMPORT_SYM)||LA205_0==MEDIA_SYM||(LA205_0>=AT_IDENT && LA205_0<=MOZ_DOCUMENT_SYM)||LA205_0==WEBKIT_KEYFRAMES_SYM||(LA205_0>=PAGE_SYM && LA205_0<=RIGHTBOTTOM_SYM)||(LA205_0>=SASS_CONTENT && LA205_0<=SASS_WHILE)) ) {
                int LA205_1 = input.LA(2);

                if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
                    alt205=1;
                }
                else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
                    alt205=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 205, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA205_0==SASS_VAR) ) {
                int LA205_2 = input.LA(2);

                if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
                    alt205=1;
                }
                else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
                    alt205=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 205, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 205, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(205);}

            switch (alt205) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:959:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list
                    {
                    dbg.location(959,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable_declaration", "isLessSource()");
                    }
                    dbg.location(959,27);
                    pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration5606);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(959,39);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:959:39: ( ws )?
                    int alt199=2;
                    try { dbg.enterSubRule(199);
                    try { dbg.enterDecision(199, decisionCanBacktrack[199]);

                    int LA199_0 = input.LA(1);

                    if ( ((LA199_0>=WS && LA199_0<=COMMENT)) ) {
                        alt199=1;
                    }
                    } finally {dbg.exitDecision(199);}

                    switch (alt199) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:959:39: ws
                            {
                            dbg.location(959,39);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5608);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(199);}

                    dbg.location(959,43);
                    match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration5611); if (state.failed) return ;
                    dbg.location(959,49);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:959:49: ( ws )?
                    int alt200=2;
                    try { dbg.enterSubRule(200);
                    try { dbg.enterDecision(200, decisionCanBacktrack[200]);

                    int LA200_0 = input.LA(1);

                    if ( ((LA200_0>=WS && LA200_0<=COMMENT)) ) {
                        alt200=1;
                    }
                    } finally {dbg.exitDecision(200);}

                    switch (alt200) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:959:49: ws
                            {
                            dbg.location(959,49);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5613);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(200);}

                    dbg.location(959,53);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration5616);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )?
                    {
                    dbg.location(961,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable_declaration", "isScssSource()");
                    }
                    dbg.location(961,27);
                    pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration5639);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(961,39);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:39: ( ws )?
                    int alt201=2;
                    try { dbg.enterSubRule(201);
                    try { dbg.enterDecision(201, decisionCanBacktrack[201]);

                    int LA201_0 = input.LA(1);

                    if ( ((LA201_0>=WS && LA201_0<=COMMENT)) ) {
                        alt201=1;
                    }
                    } finally {dbg.exitDecision(201);}

                    switch (alt201) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:39: ws
                            {
                            dbg.location(961,39);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5641);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(201);}

                    dbg.location(961,43);
                    match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration5644); if (state.failed) return ;
                    dbg.location(961,49);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:49: ( ws )?
                    int alt202=2;
                    try { dbg.enterSubRule(202);
                    try { dbg.enterDecision(202, decisionCanBacktrack[202]);

                    int LA202_0 = input.LA(1);

                    if ( ((LA202_0>=WS && LA202_0<=COMMENT)) ) {
                        alt202=1;
                    }
                    } finally {dbg.exitDecision(202);}

                    switch (alt202) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:49: ws
                            {
                            dbg.location(961,49);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5646);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(202);}

                    dbg.location(961,53);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration5649);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(961,72);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:72: ( ( ws )? SASS_DEFAULT )?
                    int alt204=2;
                    try { dbg.enterSubRule(204);
                    try { dbg.enterDecision(204, decisionCanBacktrack[204]);

                    try {
                        isCyclicDecision = true;
                        alt204 = dfa204.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(204);}

                    switch (alt204) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:73: ( ws )? SASS_DEFAULT
                            {
                            dbg.location(961,73);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:73: ( ws )?
                            int alt203=2;
                            try { dbg.enterSubRule(203);
                            try { dbg.enterDecision(203, decisionCanBacktrack[203]);

                            int LA203_0 = input.LA(1);

                            if ( ((LA203_0>=WS && LA203_0<=COMMENT)) ) {
                                alt203=1;
                            }
                            } finally {dbg.exitDecision(203);}

                            switch (alt203) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:73: ws
                                    {
                                    dbg.location(961,73);
                                    pushFollow(FOLLOW_ws_in_cp_variable_declaration5652);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(203);}

                            dbg.location(961,77);
                            match(input,SASS_DEFAULT,FOLLOW_SASS_DEFAULT_in_cp_variable_declaration5655); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(204);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(962, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_variable_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_variable_declaration"


    // $ANTLR start "cp_variable"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:965:1: cp_variable : ({...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE ) | {...}? ( SASS_VAR ) );
    public final void cp_variable() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_variable");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(965, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:5: ({...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE ) | {...}? ( SASS_VAR ) )
            int alt206=2;
            try { dbg.enterDecision(206, decisionCanBacktrack[206]);

            int LA206_0 = input.LA(1);

            if ( (LA206_0==NAMESPACE_SYM||(LA206_0>=CHARSET_SYM && LA206_0<=IMPORT_SYM)||LA206_0==MEDIA_SYM||(LA206_0>=AT_IDENT && LA206_0<=MOZ_DOCUMENT_SYM)||LA206_0==WEBKIT_KEYFRAMES_SYM||(LA206_0>=PAGE_SYM && LA206_0<=RIGHTBOTTOM_SYM)||(LA206_0>=SASS_CONTENT && LA206_0<=SASS_WHILE)) ) {
                alt206=1;
            }
            else if ( (LA206_0==SASS_VAR) ) {
                alt206=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 206, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(206);}

            switch (alt206) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:968:9: {...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE )
                    {
                    dbg.location(968,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable", "isLessSource()");
                    }
                    dbg.location(968,27);
                    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=CHARSET_SYM && input.LA(1)<=IMPORT_SYM)||input.LA(1)==MEDIA_SYM||(input.LA(1)>=AT_IDENT && input.LA(1)<=MOZ_DOCUMENT_SYM)||input.LA(1)==WEBKIT_KEYFRAMES_SYM||(input.LA(1)>=PAGE_SYM && input.LA(1)<=RIGHTBOTTOM_SYM)||(input.LA(1)>=SASS_CONTENT && input.LA(1)<=SASS_WHILE) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:970:9: {...}? ( SASS_VAR )
                    {
                    dbg.location(970,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable", "isScssSource()");
                    }
                    dbg.location(970,27);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:970:27: ( SASS_VAR )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:970:29: SASS_VAR
                    {
                    dbg.location(970,29);
                    match(input,SASS_VAR,FOLLOW_SASS_VAR_in_cp_variable5876); if (state.failed) return ;

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(971, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_variable");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_variable"


    // $ANTLR start "cp_expression_list"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:974:1: cp_expression_list : cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* ;
    public final void cp_expression_list() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression_list");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(974, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:975:5: ( cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:976:5: cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
            {
            dbg.location(976,5);
            pushFollow(FOLLOW_cp_expression_in_cp_expression_list5904);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(977,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:977:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
            try { dbg.enterSubRule(209);

            loop209:
            do {
                int alt209=2;
                try { dbg.enterDecision(209, decisionCanBacktrack[209]);

                try {
                    isCyclicDecision = true;
                    alt209 = dfa209.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(209);}

                switch (alt209) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:977:6: ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression
            	    {
            	    dbg.location(977,37);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:977:37: ( ws )?
            	    int alt207=2;
            	    try { dbg.enterSubRule(207);
            	    try { dbg.enterDecision(207, decisionCanBacktrack[207]);

            	    int LA207_0 = input.LA(1);

            	    if ( ((LA207_0>=WS && LA207_0<=COMMENT)) ) {
            	        alt207=1;
            	    }
            	    } finally {dbg.exitDecision(207);}

            	    switch (alt207) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:977:37: ws
            	            {
            	            dbg.location(977,37);
            	            pushFollow(FOLLOW_ws_in_cp_expression_list5923);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(207);}

            	    dbg.location(977,41);
            	    match(input,COMMA,FOLLOW_COMMA_in_cp_expression_list5926); if (state.failed) return ;
            	    dbg.location(977,47);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:977:47: ( ws )?
            	    int alt208=2;
            	    try { dbg.enterSubRule(208);
            	    try { dbg.enterDecision(208, decisionCanBacktrack[208]);

            	    int LA208_0 = input.LA(1);

            	    if ( ((LA208_0>=WS && LA208_0<=COMMENT)) ) {
            	        alt208=1;
            	    }
            	    } finally {dbg.exitDecision(208);}

            	    switch (alt208) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:977:47: ws
            	            {
            	            dbg.location(977,47);
            	            pushFollow(FOLLOW_ws_in_cp_expression_list5928);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(208);}

            	    dbg.location(977,51);
            	    pushFollow(FOLLOW_cp_expression_in_cp_expression_list5931);
            	    cp_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop209;
                }
            } while (true);
            } finally {dbg.exitSubRule(209);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(978, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression_list");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression_list"


    // $ANTLR start "cp_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:990:1: cp_expression : cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* ;
    public final void cp_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(990, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:5: ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:992:5: cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
            {
            dbg.location(992,5);
            pushFollow(FOLLOW_cp_expression_atom_in_cp_expression5968);
            cp_expression_atom();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(993,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:993:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
            try { dbg.enterSubRule(213);

            loop213:
            do {
                int alt213=3;
                try { dbg.enterDecision(213, decisionCanBacktrack[213]);

                try {
                    isCyclicDecision = true;
                    alt213 = dfa213.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(213);}

                switch (alt213) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:994:9: ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom
            	    {
            	    dbg.location(994,39);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:994:39: ( ( ws )? cp_expression_operator ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:994:40: ( ws )? cp_expression_operator ( ws )?
            	    {
            	    dbg.location(994,40);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:994:40: ( ws )?
            	    int alt210=2;
            	    try { dbg.enterSubRule(210);
            	    try { dbg.enterDecision(210, decisionCanBacktrack[210]);

            	    int LA210_0 = input.LA(1);

            	    if ( ((LA210_0>=WS && LA210_0<=COMMENT)) ) {
            	        alt210=1;
            	    }
            	    } finally {dbg.exitDecision(210);}

            	    switch (alt210) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:994:40: ws
            	            {
            	            dbg.location(994,40);
            	            pushFollow(FOLLOW_ws_in_cp_expression5994);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(210);}

            	    dbg.location(994,44);
            	    pushFollow(FOLLOW_cp_expression_operator_in_cp_expression5997);
            	    cp_expression_operator();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(994,67);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:994:67: ( ws )?
            	    int alt211=2;
            	    try { dbg.enterSubRule(211);
            	    try { dbg.enterDecision(211, decisionCanBacktrack[211]);

            	    int LA211_0 = input.LA(1);

            	    if ( ((LA211_0>=WS && LA211_0<=COMMENT)) ) {
            	        alt211=1;
            	    }
            	    } finally {dbg.exitDecision(211);}

            	    switch (alt211) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:994:67: ws
            	            {
            	            dbg.location(994,67);
            	            pushFollow(FOLLOW_ws_in_cp_expression5999);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(211);}


            	    }

            	    dbg.location(994,72);
            	    pushFollow(FOLLOW_cp_expression_atom_in_cp_expression6003);
            	    cp_expression_atom();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:995:11: ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom
            	    {
            	    dbg.location(995,37);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:995:37: ( ws )?
            	    int alt212=2;
            	    try { dbg.enterSubRule(212);
            	    try { dbg.enterDecision(212, decisionCanBacktrack[212]);

            	    int LA212_0 = input.LA(1);

            	    if ( ((LA212_0>=WS && LA212_0<=COMMENT)) ) {
            	        alt212=1;
            	    }
            	    } finally {dbg.exitDecision(212);}

            	    switch (alt212) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:995:37: ws
            	            {
            	            dbg.location(995,37);
            	            pushFollow(FOLLOW_ws_in_cp_expression6023);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(212);}

            	    dbg.location(995,41);
            	    pushFollow(FOLLOW_cp_expression_atom_in_cp_expression6026);
            	    cp_expression_atom();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop213;
                }
            } while (true);
            } finally {dbg.exitSubRule(213);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(997, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression"


    // $ANTLR start "cp_expression_operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:999:1: cp_expression_operator : ( OR | AND | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ );
    public final void cp_expression_operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression_operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(999, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1000:5: ( OR | AND | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(1000,5);
            if ( input.LA(1)==AND||input.LA(1)==GREATER||(input.LA(1)>=OR && input.LA(1)<=GREATER_OR_EQ) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1002, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression_operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression_operator"


    // $ANTLR start "cp_expression_atom"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1004:1: cp_expression_atom : ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN ) ;
    public final void cp_expression_atom() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression_atom");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1004, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1005:5: ( ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1006:9: ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN )
            {
            dbg.location(1006,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1006:9: ( NOT ( ws )? )?
            int alt215=2;
            try { dbg.enterSubRule(215);
            try { dbg.enterDecision(215, decisionCanBacktrack[215]);

            int LA215_0 = input.LA(1);

            if ( (LA215_0==NOT) ) {
                alt215=1;
            }
            } finally {dbg.exitDecision(215);}

            switch (alt215) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1006:10: NOT ( ws )?
                    {
                    dbg.location(1006,10);
                    match(input,NOT,FOLLOW_NOT_in_cp_expression_atom6117); if (state.failed) return ;
                    dbg.location(1006,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1006:14: ( ws )?
                    int alt214=2;
                    try { dbg.enterSubRule(214);
                    try { dbg.enterDecision(214, decisionCanBacktrack[214]);

                    int LA214_0 = input.LA(1);

                    if ( ((LA214_0>=WS && LA214_0<=COMMENT)) ) {
                        alt214=1;
                    }
                    } finally {dbg.exitDecision(214);}

                    switch (alt214) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1006:14: ws
                            {
                            dbg.location(1006,14);
                            pushFollow(FOLLOW_ws_in_cp_expression_atom6119);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(214);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(215);}

            dbg.location(1007,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1007:9: ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN )
            int alt218=2;
            try { dbg.enterSubRule(218);
            try { dbg.enterDecision(218, decisionCanBacktrack[218]);

            try {
                isCyclicDecision = true;
                alt218 = dfa218.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(218);}

            switch (alt218) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1008:13: ( cp_math_expression )=> cp_math_expression
                    {
                    dbg.location(1008,35);
                    pushFollow(FOLLOW_cp_math_expression_in_cp_expression_atom6151);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1009:15: LPAREN ( ws )? cp_expression_list ( ws )? RPAREN
                    {
                    dbg.location(1009,15);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_expression_atom6167); if (state.failed) return ;
                    dbg.location(1009,22);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1009:22: ( ws )?
                    int alt216=2;
                    try { dbg.enterSubRule(216);
                    try { dbg.enterDecision(216, decisionCanBacktrack[216]);

                    int LA216_0 = input.LA(1);

                    if ( ((LA216_0>=WS && LA216_0<=COMMENT)) ) {
                        alt216=1;
                    }
                    } finally {dbg.exitDecision(216);}

                    switch (alt216) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1009:22: ws
                            {
                            dbg.location(1009,22);
                            pushFollow(FOLLOW_ws_in_cp_expression_atom6169);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(216);}

                    dbg.location(1009,26);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_expression_atom6172);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1009,45);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1009:45: ( ws )?
                    int alt217=2;
                    try { dbg.enterSubRule(217);
                    try { dbg.enterDecision(217, decisionCanBacktrack[217]);

                    int LA217_0 = input.LA(1);

                    if ( ((LA217_0>=WS && LA217_0<=COMMENT)) ) {
                        alt217=1;
                    }
                    } finally {dbg.exitDecision(217);}

                    switch (alt217) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1009:45: ws
                            {
                            dbg.location(1009,45);
                            pushFollow(FOLLOW_ws_in_cp_expression_atom6174);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(217);}

                    dbg.location(1009,49);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_expression_atom6177); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(218);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1011, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression_atom");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression_atom"


    // $ANTLR start "cp_math_expressions"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:1: cp_math_expressions : cp_math_expression ( ws cp_math_expression )* ;
    public final void cp_math_expressions() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_math_expressions");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1014, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1015:5: ( cp_math_expression ( ws cp_math_expression )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1016:5: cp_math_expression ( ws cp_math_expression )*
            {
            dbg.location(1016,5);
            pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions6209);
            cp_math_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1017,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1017:5: ( ws cp_math_expression )*
            try { dbg.enterSubRule(219);

            loop219:
            do {
                int alt219=2;
                try { dbg.enterDecision(219, decisionCanBacktrack[219]);

                int LA219_0 = input.LA(1);

                if ( ((LA219_0>=WS && LA219_0<=COMMENT)) ) {
                    alt219=1;
                }


                } finally {dbg.exitDecision(219);}

                switch (alt219) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1017:6: ws cp_math_expression
            	    {
            	    dbg.location(1017,6);
            	    pushFollow(FOLLOW_ws_in_cp_math_expressions6216);
            	    ws();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(1017,9);
            	    pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions6218);
            	    cp_math_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop219;
                }
            } while (true);
            } finally {dbg.exitSubRule(219);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1018, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_math_expressions");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_math_expressions"


    // $ANTLR start "cp_math_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:1: cp_math_expression : cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* ;
    public final void cp_math_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_math_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1032, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:5: ( cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:10: cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
            {
            dbg.location(1033,10);
            pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression6252);
            cp_math_expression_atom();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1034,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1034:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
            try { dbg.enterSubRule(222);

            loop222:
            do {
                int alt222=2;
                try { dbg.enterDecision(222, decisionCanBacktrack[222]);

                try {
                    isCyclicDecision = true;
                    alt222 = dfa222.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(222);}

                switch (alt222) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom
            	    {
            	    dbg.location(1035,48);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:48: ( ws )?
            	    int alt220=2;
            	    try { dbg.enterSubRule(220);
            	    try { dbg.enterDecision(220, decisionCanBacktrack[220]);

            	    int LA220_0 = input.LA(1);

            	    if ( ((LA220_0>=WS && LA220_0<=COMMENT)) ) {
            	        alt220=1;
            	    }
            	    } finally {dbg.exitDecision(220);}

            	    switch (alt220) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:48: ws
            	            {
            	            dbg.location(1035,48);
            	            pushFollow(FOLLOW_ws_in_cp_math_expression6295);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(220);}

            	    dbg.location(1035,52);
            	    if ( (input.LA(1)>=SOLIDUS && input.LA(1)<=PLUS)||input.LA(1)==STAR ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1035,78);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:78: ( ws )?
            	    int alt221=2;
            	    try { dbg.enterSubRule(221);
            	    try { dbg.enterDecision(221, decisionCanBacktrack[221]);

            	    int LA221_0 = input.LA(1);

            	    if ( ((LA221_0>=WS && LA221_0<=COMMENT)) ) {
            	        alt221=1;
            	    }
            	    } finally {dbg.exitDecision(221);}

            	    switch (alt221) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:78: ws
            	            {
            	            dbg.location(1035,78);
            	            pushFollow(FOLLOW_ws_in_cp_math_expression6308);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(221);}

            	    dbg.location(1035,82);
            	    pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression6311);
            	    cp_math_expression_atom();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop222;
                }
            } while (true);
            } finally {dbg.exitSubRule(222);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1037, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_math_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_math_expression"


    // $ANTLR start "cp_math_expression_atom"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );
    public final void cp_math_expression_atom() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_math_expression_atom");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1039, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1040:5: ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN )
            int alt227=3;
            try { dbg.enterDecision(227, decisionCanBacktrack[227]);

            try {
                isCyclicDecision = true;
                alt227 = dfa227.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(227);}

            switch (alt227) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:5: term
                    {
                    dbg.location(1041,5);
                    pushFollow(FOLLOW_term_in_cp_math_expression_atom6349);
                    term();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1042:7: IMPORTANT_SYM
                    {
                    dbg.location(1042,7);
                    match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom6357); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:7: ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN
                    {
                    dbg.location(1043,7);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:7: ( unaryOperator ( ws )? )?
                    int alt224=2;
                    try { dbg.enterSubRule(224);
                    try { dbg.enterDecision(224, decisionCanBacktrack[224]);

                    int LA224_0 = input.LA(1);

                    if ( ((LA224_0>=MINUS && LA224_0<=PLUS)) ) {
                        alt224=1;
                    }
                    } finally {dbg.exitDecision(224);}

                    switch (alt224) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:9: unaryOperator ( ws )?
                            {
                            dbg.location(1043,9);
                            pushFollow(FOLLOW_unaryOperator_in_cp_math_expression_atom6368);
                            unaryOperator();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(1043,23);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:23: ( ws )?
                            int alt223=2;
                            try { dbg.enterSubRule(223);
                            try { dbg.enterDecision(223, decisionCanBacktrack[223]);

                            int LA223_0 = input.LA(1);

                            if ( ((LA223_0>=WS && LA223_0<=COMMENT)) ) {
                                alt223=1;
                            }
                            } finally {dbg.exitDecision(223);}

                            switch (alt223) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:23: ws
                                    {
                                    dbg.location(1043,23);
                                    pushFollow(FOLLOW_ws_in_cp_math_expression_atom6370);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(223);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(224);}

                    dbg.location(1043,30);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_math_expression_atom6376); if (state.failed) return ;
                    dbg.location(1043,37);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:37: ( ws )?
                    int alt225=2;
                    try { dbg.enterSubRule(225);
                    try { dbg.enterDecision(225, decisionCanBacktrack[225]);

                    int LA225_0 = input.LA(1);

                    if ( ((LA225_0>=WS && LA225_0<=COMMENT)) ) {
                        alt225=1;
                    }
                    } finally {dbg.exitDecision(225);}

                    switch (alt225) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:37: ws
                            {
                            dbg.location(1043,37);
                            pushFollow(FOLLOW_ws_in_cp_math_expression_atom6378);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(225);}

                    dbg.location(1043,41);
                    pushFollow(FOLLOW_cp_math_expression_in_cp_math_expression_atom6381);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1043,60);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:60: ( ws )?
                    int alt226=2;
                    try { dbg.enterSubRule(226);
                    try { dbg.enterDecision(226, decisionCanBacktrack[226]);

                    int LA226_0 = input.LA(1);

                    if ( ((LA226_0>=WS && LA226_0<=COMMENT)) ) {
                        alt226=1;
                    }
                    } finally {dbg.exitDecision(226);}

                    switch (alt226) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:60: ws
                            {
                            dbg.location(1043,60);
                            pushFollow(FOLLOW_ws_in_cp_math_expression_atom6383);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(226);}

                    dbg.location(1043,64);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_math_expression_atom6386); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1044, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_math_expression_atom");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_math_expression_atom"


    // $ANTLR start "cp_mixin_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1052:1: cp_mixin_declaration : ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block ;
    public final void cp_mixin_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1052, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:5: ( ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1054:5: ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block
            {
            dbg.location(1054,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1054:5: ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? )
            int alt237=2;
            try { dbg.enterSubRule(237);
            try { dbg.enterDecision(237, decisionCanBacktrack[237]);

            int LA237_0 = input.LA(1);

            if ( (LA237_0==DOT) ) {
                alt237=1;
            }
            else if ( (LA237_0==SASS_MIXIN) ) {
                alt237=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 237, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(237);}

            switch (alt237) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:9: {...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )?
                    {
                    dbg.location(1055,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_declaration", "isLessSource()");
                    }
                    dbg.location(1055,27);
                    match(input,DOT,FOLLOW_DOT_in_cp_mixin_declaration6426); if (state.failed) return ;
                    dbg.location(1055,31);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration6428);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1055,45);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:45: ( ws )?
                    int alt228=2;
                    try { dbg.enterSubRule(228);
                    try { dbg.enterDecision(228, decisionCanBacktrack[228]);

                    int LA228_0 = input.LA(1);

                    if ( ((LA228_0>=WS && LA228_0<=COMMENT)) ) {
                        alt228=1;
                    }
                    } finally {dbg.exitDecision(228);}

                    switch (alt228) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:45: ws
                            {
                            dbg.location(1055,45);
                            pushFollow(FOLLOW_ws_in_cp_mixin_declaration6430);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(228);}

                    dbg.location(1055,49);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration6433); if (state.failed) return ;
                    dbg.location(1055,56);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:56: ( ws )?
                    int alt229=2;
                    try { dbg.enterSubRule(229);
                    try { dbg.enterDecision(229, decisionCanBacktrack[229]);

                    int LA229_0 = input.LA(1);

                    if ( ((LA229_0>=WS && LA229_0<=COMMENT)) ) {
                        alt229=1;
                    }
                    } finally {dbg.exitDecision(229);}

                    switch (alt229) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:56: ws
                            {
                            dbg.location(1055,56);
                            pushFollow(FOLLOW_ws_in_cp_mixin_declaration6435);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(229);}

                    dbg.location(1055,60);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:60: ( cp_args_list )?
                    int alt230=2;
                    try { dbg.enterSubRule(230);
                    try { dbg.enterDecision(230, decisionCanBacktrack[230]);

                    int LA230_0 = input.LA(1);

                    if ( (LA230_0==NAMESPACE_SYM||(LA230_0>=CHARSET_SYM && LA230_0<=IMPORT_SYM)||LA230_0==MEDIA_SYM||(LA230_0>=AT_IDENT && LA230_0<=MOZ_DOCUMENT_SYM)||LA230_0==WEBKIT_KEYFRAMES_SYM||(LA230_0>=PAGE_SYM && LA230_0<=RIGHTBOTTOM_SYM)||LA230_0==SASS_VAR||(LA230_0>=SASS_CONTENT && LA230_0<=SASS_WHILE)||(LA230_0>=CP_DOTS && LA230_0<=LESS_REST)) ) {
                        alt230=1;
                    }
                    } finally {dbg.exitDecision(230);}

                    switch (alt230) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:60: cp_args_list
                            {
                            dbg.location(1055,60);
                            pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration6438);
                            cp_args_list();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(230);}

                    dbg.location(1055,74);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration6441); if (state.failed) return ;
                    dbg.location(1055,81);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:81: ( ( ws )? less_mixin_guarded )?
                    int alt232=2;
                    try { dbg.enterSubRule(232);
                    try { dbg.enterDecision(232, decisionCanBacktrack[232]);

                    try {
                        isCyclicDecision = true;
                        alt232 = dfa232.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(232);}

                    switch (alt232) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:82: ( ws )? less_mixin_guarded
                            {
                            dbg.location(1055,82);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:82: ( ws )?
                            int alt231=2;
                            try { dbg.enterSubRule(231);
                            try { dbg.enterDecision(231, decisionCanBacktrack[231]);

                            int LA231_0 = input.LA(1);

                            if ( ((LA231_0>=WS && LA231_0<=COMMENT)) ) {
                                alt231=1;
                            }
                            } finally {dbg.exitDecision(231);}

                            switch (alt231) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:82: ws
                                    {
                                    dbg.location(1055,82);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6444);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(231);}

                            dbg.location(1055,86);
                            pushFollow(FOLLOW_less_mixin_guarded_in_cp_mixin_declaration6447);
                            less_mixin_guarded();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(232);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1057:9: {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
                    {
                    dbg.location(1057,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_declaration", "isScssSource()");
                    }
                    dbg.location(1057,27);
                    match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_cp_mixin_declaration6471); if (state.failed) return ;
                    dbg.location(1057,38);
                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6473);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1057,41);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration6475);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1057,55);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1057:55: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
                    int alt236=2;
                    try { dbg.enterSubRule(236);
                    try { dbg.enterDecision(236, decisionCanBacktrack[236]);

                    try {
                        isCyclicDecision = true;
                        alt236 = dfa236.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(236);}

                    switch (alt236) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1057:56: ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN
                            {
                            dbg.location(1057,56);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1057:56: ( ws )?
                            int alt233=2;
                            try { dbg.enterSubRule(233);
                            try { dbg.enterDecision(233, decisionCanBacktrack[233]);

                            int LA233_0 = input.LA(1);

                            if ( ((LA233_0>=WS && LA233_0<=COMMENT)) ) {
                                alt233=1;
                            }
                            } finally {dbg.exitDecision(233);}

                            switch (alt233) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1057:56: ws
                                    {
                                    dbg.location(1057,56);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6478);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(233);}

                            dbg.location(1057,60);
                            match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration6481); if (state.failed) return ;
                            dbg.location(1057,67);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1057:67: ( ws )?
                            int alt234=2;
                            try { dbg.enterSubRule(234);
                            try { dbg.enterDecision(234, decisionCanBacktrack[234]);

                            int LA234_0 = input.LA(1);

                            if ( ((LA234_0>=WS && LA234_0<=COMMENT)) ) {
                                alt234=1;
                            }
                            } finally {dbg.exitDecision(234);}

                            switch (alt234) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1057:67: ws
                                    {
                                    dbg.location(1057,67);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6483);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(234);}

                            dbg.location(1057,71);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1057:71: ( cp_args_list )?
                            int alt235=2;
                            try { dbg.enterSubRule(235);
                            try { dbg.enterDecision(235, decisionCanBacktrack[235]);

                            int LA235_0 = input.LA(1);

                            if ( (LA235_0==NAMESPACE_SYM||(LA235_0>=CHARSET_SYM && LA235_0<=IMPORT_SYM)||LA235_0==MEDIA_SYM||(LA235_0>=AT_IDENT && LA235_0<=MOZ_DOCUMENT_SYM)||LA235_0==WEBKIT_KEYFRAMES_SYM||(LA235_0>=PAGE_SYM && LA235_0<=RIGHTBOTTOM_SYM)||LA235_0==SASS_VAR||(LA235_0>=SASS_CONTENT && LA235_0<=SASS_WHILE)||(LA235_0>=CP_DOTS && LA235_0<=LESS_REST)) ) {
                                alt235=1;
                            }
                            } finally {dbg.exitDecision(235);}

                            switch (alt235) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1057:71: cp_args_list
                                    {
                                    dbg.location(1057,71);
                                    pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration6486);
                                    cp_args_list();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(235);}

                            dbg.location(1057,85);
                            match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration6489); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(236);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(237);}

            dbg.location(1059,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:5: ( ws )?
            int alt238=2;
            try { dbg.enterSubRule(238);
            try { dbg.enterDecision(238, decisionCanBacktrack[238]);

            int LA238_0 = input.LA(1);

            if ( ((LA238_0>=WS && LA238_0<=COMMENT)) ) {
                alt238=1;
            }
            } finally {dbg.exitDecision(238);}

            switch (alt238) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:5: ws
                    {
                    dbg.location(1059,5);
                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6503);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(238);}

            dbg.location(1059,9);
            pushFollow(FOLLOW_cp_mixin_block_in_cp_mixin_declaration6506);
            cp_mixin_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1060, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_declaration"


    // $ANTLR start "cp_mixin_call"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1064:1: cp_mixin_call : ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? ) ;
    public final void cp_mixin_call() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1064, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:5: ( ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1066:5: ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? )
            {
            dbg.location(1066,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1066:5: ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? )
            int alt249=2;
            try { dbg.enterSubRule(249);
            try { dbg.enterDecision(249, decisionCanBacktrack[249]);

            int LA249_0 = input.LA(1);

            if ( (LA249_0==DOT) ) {
                alt249=1;
            }
            else if ( (LA249_0==SASS_INCLUDE) ) {
                alt249=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 249, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(249);}

            switch (alt249) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:9: {...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
                    {
                    dbg.location(1067,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_call", "isLessSource()");
                    }
                    dbg.location(1067,27);
                    match(input,DOT,FOLLOW_DOT_in_cp_mixin_call6546); if (state.failed) return ;
                    dbg.location(1067,31);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call6548);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1067,45);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:45: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
                    int alt242=2;
                    try { dbg.enterSubRule(242);
                    try { dbg.enterDecision(242, decisionCanBacktrack[242]);

                    try {
                        isCyclicDecision = true;
                        alt242 = dfa242.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(242);}

                    switch (alt242) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:46: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
                            {
                            dbg.location(1067,46);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:46: ( ws )?
                            int alt239=2;
                            try { dbg.enterSubRule(239);
                            try { dbg.enterDecision(239, decisionCanBacktrack[239]);

                            int LA239_0 = input.LA(1);

                            if ( ((LA239_0>=WS && LA239_0<=COMMENT)) ) {
                                alt239=1;
                            }
                            } finally {dbg.exitDecision(239);}

                            switch (alt239) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:46: ws
                                    {
                                    dbg.location(1067,46);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6551);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(239);}

                            dbg.location(1067,50);
                            match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call6554); if (state.failed) return ;
                            dbg.location(1067,57);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:57: ( ws )?
                            int alt240=2;
                            try { dbg.enterSubRule(240);
                            try { dbg.enterDecision(240, decisionCanBacktrack[240]);

                            int LA240_0 = input.LA(1);

                            if ( ((LA240_0>=WS && LA240_0<=COMMENT)) ) {
                                alt240=1;
                            }
                            } finally {dbg.exitDecision(240);}

                            switch (alt240) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:57: ws
                                    {
                                    dbg.location(1067,57);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6556);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(240);}

                            dbg.location(1067,61);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:61: ( cp_mixin_call_args )?
                            int alt241=2;
                            try { dbg.enterSubRule(241);
                            try { dbg.enterDecision(241, decisionCanBacktrack[241]);

                            int LA241_0 = input.LA(1);

                            if ( (LA241_0==NAMESPACE_SYM||(LA241_0>=IDENT && LA241_0<=IMPORT_SYM)||LA241_0==MEDIA_SYM||(LA241_0>=NOT && LA241_0<=LPAREN)||(LA241_0>=AT_IDENT && LA241_0<=MOZ_DOCUMENT_SYM)||(LA241_0>=WEBKIT_KEYFRAMES_SYM && LA241_0<=RIGHTBOTTOM_SYM)||(LA241_0>=MINUS && LA241_0<=IMPORTANT_SYM)||(LA241_0>=TILDE && LA241_0<=HASH)||(LA241_0>=SASS_VAR && LA241_0<=PERCENTAGE_SYMBOL)||(LA241_0>=SASS_CONTENT && LA241_0<=SASS_WHILE)) ) {
                                alt241=1;
                            }
                            } finally {dbg.exitDecision(241);}

                            switch (alt241) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:61: cp_mixin_call_args
                                    {
                                    dbg.location(1067,61);
                                    pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call6559);
                                    cp_mixin_call_args();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(241);}

                            dbg.location(1067,81);
                            match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call6562); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(242);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1069:9: {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )?
                    {
                    dbg.location(1069,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_call", "isScssSource()");
                    }
                    dbg.location(1069,27);
                    match(input,SASS_INCLUDE,FOLLOW_SASS_INCLUDE_in_cp_mixin_call6586); if (state.failed) return ;
                    dbg.location(1069,40);
                    pushFollow(FOLLOW_ws_in_cp_mixin_call6588);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1069,43);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call6590);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1069,57);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1069:57: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
                    int alt246=2;
                    try { dbg.enterSubRule(246);
                    try { dbg.enterDecision(246, decisionCanBacktrack[246]);

                    try {
                        isCyclicDecision = true;
                        alt246 = dfa246.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(246);}

                    switch (alt246) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1069:58: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
                            {
                            dbg.location(1069,58);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1069:58: ( ws )?
                            int alt243=2;
                            try { dbg.enterSubRule(243);
                            try { dbg.enterDecision(243, decisionCanBacktrack[243]);

                            int LA243_0 = input.LA(1);

                            if ( ((LA243_0>=WS && LA243_0<=COMMENT)) ) {
                                alt243=1;
                            }
                            } finally {dbg.exitDecision(243);}

                            switch (alt243) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1069:58: ws
                                    {
                                    dbg.location(1069,58);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6593);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(243);}

                            dbg.location(1069,62);
                            match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call6596); if (state.failed) return ;
                            dbg.location(1069,69);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1069:69: ( ws )?
                            int alt244=2;
                            try { dbg.enterSubRule(244);
                            try { dbg.enterDecision(244, decisionCanBacktrack[244]);

                            int LA244_0 = input.LA(1);

                            if ( ((LA244_0>=WS && LA244_0<=COMMENT)) ) {
                                alt244=1;
                            }
                            } finally {dbg.exitDecision(244);}

                            switch (alt244) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1069:69: ws
                                    {
                                    dbg.location(1069,69);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6598);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(244);}

                            dbg.location(1069,73);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1069:73: ( cp_mixin_call_args )?
                            int alt245=2;
                            try { dbg.enterSubRule(245);
                            try { dbg.enterDecision(245, decisionCanBacktrack[245]);

                            int LA245_0 = input.LA(1);

                            if ( (LA245_0==NAMESPACE_SYM||(LA245_0>=IDENT && LA245_0<=IMPORT_SYM)||LA245_0==MEDIA_SYM||(LA245_0>=NOT && LA245_0<=LPAREN)||(LA245_0>=AT_IDENT && LA245_0<=MOZ_DOCUMENT_SYM)||(LA245_0>=WEBKIT_KEYFRAMES_SYM && LA245_0<=RIGHTBOTTOM_SYM)||(LA245_0>=MINUS && LA245_0<=IMPORTANT_SYM)||(LA245_0>=TILDE && LA245_0<=HASH)||(LA245_0>=SASS_VAR && LA245_0<=PERCENTAGE_SYMBOL)||(LA245_0>=SASS_CONTENT && LA245_0<=SASS_WHILE)) ) {
                                alt245=1;
                            }
                            } finally {dbg.exitDecision(245);}

                            switch (alt245) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1069:73: cp_mixin_call_args
                                    {
                                    dbg.location(1069,73);
                                    pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call6601);
                                    cp_mixin_call_args();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(245);}

                            dbg.location(1069,93);
                            match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call6604); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(246);}

                    dbg.location(1069,102);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1069:102: ( ( ws )? cp_mixin_block )?
                    int alt248=2;
                    try { dbg.enterSubRule(248);
                    try { dbg.enterDecision(248, decisionCanBacktrack[248]);

                    try {
                        isCyclicDecision = true;
                        alt248 = dfa248.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(248);}

                    switch (alt248) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1069:103: ( ws )? cp_mixin_block
                            {
                            dbg.location(1069,103);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1069:103: ( ws )?
                            int alt247=2;
                            try { dbg.enterSubRule(247);
                            try { dbg.enterDecision(247, decisionCanBacktrack[247]);

                            int LA247_0 = input.LA(1);

                            if ( ((LA247_0>=WS && LA247_0<=COMMENT)) ) {
                                alt247=1;
                            }
                            } finally {dbg.exitDecision(247);}

                            switch (alt247) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1069:103: ws
                                    {
                                    dbg.location(1069,103);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6609);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(247);}

                            dbg.location(1069,107);
                            pushFollow(FOLLOW_cp_mixin_block_in_cp_mixin_call6612);
                            cp_mixin_block();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(248);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(249);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1071, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call"


    // $ANTLR start "cp_mixin_block"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:1: cp_mixin_block : LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void cp_mixin_block() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_block");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1073, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1074:5: ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:5: LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(1075,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_cp_mixin_block6645); if (state.failed) return ;
            dbg.location(1075,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:12: ( ws )?
            int alt250=2;
            try { dbg.enterSubRule(250);
            try { dbg.enterDecision(250, decisionCanBacktrack[250]);

            int LA250_0 = input.LA(1);

            if ( ((LA250_0>=WS && LA250_0<=COMMENT)) ) {
                alt250=1;
            }
            } finally {dbg.exitDecision(250);}

            switch (alt250) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:12: ws
                    {
                    dbg.location(1075,12);
                    pushFollow(FOLLOW_ws_in_cp_mixin_block6647);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(250);}

            dbg.location(1075,16);
            pushFollow(FOLLOW_syncToFollow_in_cp_mixin_block6650);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1076,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1076:9: ( declarations )?
            int alt251=2;
            try { dbg.enterSubRule(251);
            try { dbg.enterDecision(251, decisionCanBacktrack[251]);

            int LA251_0 = input.LA(1);

            if ( ((LA251_0>=NAMESPACE_SYM && LA251_0<=IDENT)||(LA251_0>=CHARSET_SYM && LA251_0<=MEDIA_SYM)||LA251_0==GEN||(LA251_0>=COLON && LA251_0<=MOZ_DOCUMENT_SYM)||LA251_0==WEBKIT_KEYFRAMES_SYM||(LA251_0>=PAGE_SYM && LA251_0<=RIGHTBOTTOM_SYM)||(LA251_0>=MINUS && LA251_0<=PLUS)||(LA251_0>=GREATER && LA251_0<=PIPE)||LA251_0==LESS_AND||(LA251_0>=RBRACKET && LA251_0<=SASS_VAR)||(LA251_0>=SASS_CONTENT && LA251_0<=SASS_WHILE)||LA251_0==AT_SIGN) ) {
                alt251=1;
            }
            } finally {dbg.exitDecision(251);}

            switch (alt251) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1076:9: declarations
                    {
                    dbg.location(1076,9);
                    pushFollow(FOLLOW_declarations_in_cp_mixin_block6660);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(251);}

            dbg.location(1077,5);
            match(input,RBRACE,FOLLOW_RBRACE_in_cp_mixin_block6667); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1078, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_block");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_block"


    // $ANTLR start "cp_mixin_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:1: cp_mixin_name : IDENT ;
    public final void cp_mixin_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1080, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1081:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1082:5: IDENT
            {
            dbg.location(1082,5);
            match(input,IDENT,FOLLOW_IDENT_in_cp_mixin_name6696); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1083, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_name"


    // $ANTLR start "cp_mixin_call_args"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1085:1: cp_mixin_call_args : cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS )? ;
    public final void cp_mixin_call_args() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_args");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1085, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1086:5: ( cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1089:5: cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS )?
            {
            dbg.location(1089,5);
            pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6732);
            cp_mixin_call_arg();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1089,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1089:23: ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )*
            try { dbg.enterSubRule(253);

            loop253:
            do {
                int alt253=2;
                try { dbg.enterDecision(253, decisionCanBacktrack[253]);

                int LA253_0 = input.LA(1);

                if ( (LA253_0==SEMI||LA253_0==COMMA) ) {
                    alt253=1;
                }


                } finally {dbg.exitDecision(253);}

                switch (alt253) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1089:25: ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg
            	    {
            	    dbg.location(1089,25);
            	    if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1089,40);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1089:40: ( ws )?
            	    int alt252=2;
            	    try { dbg.enterSubRule(252);
            	    try { dbg.enterDecision(252, decisionCanBacktrack[252]);

            	    int LA252_0 = input.LA(1);

            	    if ( ((LA252_0>=WS && LA252_0<=COMMENT)) ) {
            	        alt252=1;
            	    }
            	    } finally {dbg.exitDecision(252);}

            	    switch (alt252) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1089:40: ws
            	            {
            	            dbg.location(1089,40);
            	            pushFollow(FOLLOW_ws_in_cp_mixin_call_args6744);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(252);}

            	    dbg.location(1089,44);
            	    pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6747);
            	    cp_mixin_call_arg();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop253;
                }
            } while (true);
            } finally {dbg.exitSubRule(253);}

            dbg.location(1089,65);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1089:65: ( CP_DOTS )?
            int alt254=2;
            try { dbg.enterSubRule(254);
            try { dbg.enterDecision(254, decisionCanBacktrack[254]);

            int LA254_0 = input.LA(1);

            if ( (LA254_0==CP_DOTS) ) {
                alt254=1;
            }
            } finally {dbg.exitDecision(254);}

            switch (alt254) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1089:65: CP_DOTS
                    {
                    dbg.location(1089,65);
                    match(input,CP_DOTS,FOLLOW_CP_DOTS_in_cp_mixin_call_args6752); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(254);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1090, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call_args");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call_args"


    // $ANTLR start "cp_mixin_call_arg"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:1: cp_mixin_call_arg : ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? ;
    public final void cp_mixin_call_arg() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_arg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1092, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:5: ( ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )?
            {
            dbg.location(1094,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )
            int alt257=2;
            try { dbg.enterSubRule(257);
            try { dbg.enterDecision(257, decisionCanBacktrack[257]);

            try {
                isCyclicDecision = true;
                alt257 = dfa257.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(257);}

            switch (alt257) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1095:9: cp_variable ( ws )? COLON ( ws )? cp_expression
                    {
                    dbg.location(1095,9);
                    pushFollow(FOLLOW_cp_variable_in_cp_mixin_call_arg6791);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1095,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1095:21: ( ws )?
                    int alt255=2;
                    try { dbg.enterSubRule(255);
                    try { dbg.enterDecision(255, decisionCanBacktrack[255]);

                    int LA255_0 = input.LA(1);

                    if ( ((LA255_0>=WS && LA255_0<=COMMENT)) ) {
                        alt255=1;
                    }
                    } finally {dbg.exitDecision(255);}

                    switch (alt255) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1095:21: ws
                            {
                            dbg.location(1095,21);
                            pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6793);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(255);}

                    dbg.location(1095,25);
                    match(input,COLON,FOLLOW_COLON_in_cp_mixin_call_arg6796); if (state.failed) return ;
                    dbg.location(1095,31);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1095:31: ( ws )?
                    int alt256=2;
                    try { dbg.enterSubRule(256);
                    try { dbg.enterDecision(256, decisionCanBacktrack[256]);

                    int LA256_0 = input.LA(1);

                    if ( ((LA256_0>=WS && LA256_0<=COMMENT)) ) {
                        alt256=1;
                    }
                    } finally {dbg.exitDecision(256);}

                    switch (alt256) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1095:31: ws
                            {
                            dbg.location(1095,31);
                            pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6798);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(256);}

                    dbg.location(1095,35);
                    pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg6801);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:11: cp_expression
                    {
                    dbg.location(1096,11);
                    pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg6813);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(257);}

            dbg.location(1097,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:7: ( ws )?
            int alt258=2;
            try { dbg.enterSubRule(258);
            try { dbg.enterDecision(258, decisionCanBacktrack[258]);

            int LA258_0 = input.LA(1);

            if ( ((LA258_0>=WS && LA258_0<=COMMENT)) ) {
                alt258=1;
            }
            } finally {dbg.exitDecision(258);}

            switch (alt258) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:7: ws
                    {
                    dbg.location(1097,7);
                    pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6821);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(258);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1098, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call_arg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call_arg"


    // $ANTLR start "cp_args_list"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1101:1: cp_args_list : ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )? ) | ( CP_DOTS | LESS_REST ) );
    public final void cp_args_list() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_args_list");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1101, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:5: ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )? ) | ( CP_DOTS | LESS_REST ) )
            int alt264=2;
            try { dbg.enterDecision(264, decisionCanBacktrack[264]);

            int LA264_0 = input.LA(1);

            if ( (LA264_0==NAMESPACE_SYM||(LA264_0>=CHARSET_SYM && LA264_0<=IMPORT_SYM)||LA264_0==MEDIA_SYM||(LA264_0>=AT_IDENT && LA264_0<=MOZ_DOCUMENT_SYM)||LA264_0==WEBKIT_KEYFRAMES_SYM||(LA264_0>=PAGE_SYM && LA264_0<=RIGHTBOTTOM_SYM)||LA264_0==SASS_VAR||(LA264_0>=SASS_CONTENT && LA264_0<=SASS_WHILE)) ) {
                alt264=1;
            }
            else if ( ((LA264_0>=CP_DOTS && LA264_0<=LESS_REST)) ) {
                alt264=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 264, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(264);}

            switch (alt264) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1109:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )? )
                    {
                    dbg.location(1109,5);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1109:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )? )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1109:7: cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )?
                    {
                    dbg.location(1109,7);
                    pushFollow(FOLLOW_cp_arg_in_cp_args_list6873);
                    cp_arg();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1109,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1109:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*
                    try { dbg.enterSubRule(260);

                    loop260:
                    do {
                        int alt260=2;
                        try { dbg.enterDecision(260, decisionCanBacktrack[260]);

                        try {
                            isCyclicDecision = true;
                            alt260 = dfa260.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(260);}

                        switch (alt260) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1109:16: ( COMMA | SEMI ) ( ws )? cp_arg
                    	    {
                    	    dbg.location(1109,16);
                    	    if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
                    	        input.consume();
                    	        state.errorRecovery=false;state.failed=false;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return ;}
                    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                    	        dbg.recognitionException(mse);
                    	        throw mse;
                    	    }

                    	    dbg.location(1109,33);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1109:33: ( ws )?
                    	    int alt259=2;
                    	    try { dbg.enterSubRule(259);
                    	    try { dbg.enterDecision(259, decisionCanBacktrack[259]);

                    	    int LA259_0 = input.LA(1);

                    	    if ( ((LA259_0>=WS && LA259_0<=COMMENT)) ) {
                    	        alt259=1;
                    	    }
                    	    } finally {dbg.exitDecision(259);}

                    	    switch (alt259) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1109:33: ws
                    	            {
                    	            dbg.location(1109,33);
                    	            pushFollow(FOLLOW_ws_in_cp_args_list6887);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(259);}

                    	    dbg.location(1109,37);
                    	    pushFollow(FOLLOW_cp_arg_in_cp_args_list6890);
                    	    cp_arg();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop260;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(260);}

                    dbg.location(1109,46);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1109:46: ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )?
                    int alt263=2;
                    try { dbg.enterSubRule(263);
                    try { dbg.enterDecision(263, decisionCanBacktrack[263]);

                    int LA263_0 = input.LA(1);

                    if ( (LA263_0==SEMI||LA263_0==COMMA||(LA263_0>=CP_DOTS && LA263_0<=LESS_REST)) ) {
                        alt263=1;
                    }
                    } finally {dbg.exitDecision(263);}

                    switch (alt263) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1109:48: ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST )
                            {
                            dbg.location(1109,48);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1109:48: ( ( COMMA | SEMI ) ( ws )? )?
                            int alt262=2;
                            try { dbg.enterSubRule(262);
                            try { dbg.enterDecision(262, decisionCanBacktrack[262]);

                            int LA262_0 = input.LA(1);

                            if ( (LA262_0==SEMI||LA262_0==COMMA) ) {
                                alt262=1;
                            }
                            } finally {dbg.exitDecision(262);}

                            switch (alt262) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1109:50: ( COMMA | SEMI ) ( ws )?
                                    {
                                    dbg.location(1109,50);
                                    if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
                                        input.consume();
                                        state.errorRecovery=false;state.failed=false;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return ;}
                                        MismatchedSetException mse = new MismatchedSetException(null,input);
                                        dbg.recognitionException(mse);
                                        throw mse;
                                    }

                                    dbg.location(1109,65);
                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1109:65: ( ws )?
                                    int alt261=2;
                                    try { dbg.enterSubRule(261);
                                    try { dbg.enterDecision(261, decisionCanBacktrack[261]);

                                    int LA261_0 = input.LA(1);

                                    if ( ((LA261_0>=WS && LA261_0<=COMMENT)) ) {
                                        alt261=1;
                                    }
                                    } finally {dbg.exitDecision(261);}

                                    switch (alt261) {
                                        case 1 :
                                            dbg.enterAlt(1);

                                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1109:65: ws
                                            {
                                            dbg.location(1109,65);
                                            pushFollow(FOLLOW_ws_in_cp_args_list6906);
                                            ws();

                                            state._fsp--;
                                            if (state.failed) return ;

                                            }
                                            break;

                                    }
                                    } finally {dbg.exitSubRule(261);}


                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(262);}

                            dbg.location(1109,72);
                            if ( (input.LA(1)>=CP_DOTS && input.LA(1)<=LESS_REST) ) {
                                input.consume();
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                dbg.recognitionException(mse);
                                throw mse;
                            }


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(263);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:5: ( CP_DOTS | LESS_REST )
                    {
                    dbg.location(1111,5);
                    if ( (input.LA(1)>=CP_DOTS && input.LA(1)<=LESS_REST) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1112, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_args_list");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_args_list"


    // $ANTLR start "cp_arg"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:1: cp_arg : cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? ;
    public final void cp_arg() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_arg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1115, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1116:5: ( cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:5: cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )?
            {
            dbg.location(1117,5);
            pushFollow(FOLLOW_cp_variable_in_cp_arg6966);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1117,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:17: ( ws )?
            int alt265=2;
            try { dbg.enterSubRule(265);
            try { dbg.enterDecision(265, decisionCanBacktrack[265]);

            int LA265_0 = input.LA(1);

            if ( ((LA265_0>=WS && LA265_0<=COMMENT)) ) {
                alt265=1;
            }
            } finally {dbg.exitDecision(265);}

            switch (alt265) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:17: ws
                    {
                    dbg.location(1117,17);
                    pushFollow(FOLLOW_ws_in_cp_arg6968);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(265);}

            dbg.location(1117,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:21: ( COLON ( ws )? cp_expression ( ws )? )?
            int alt268=2;
            try { dbg.enterSubRule(268);
            try { dbg.enterDecision(268, decisionCanBacktrack[268]);

            int LA268_0 = input.LA(1);

            if ( (LA268_0==COLON) ) {
                alt268=1;
            }
            } finally {dbg.exitDecision(268);}

            switch (alt268) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:23: COLON ( ws )? cp_expression ( ws )?
                    {
                    dbg.location(1117,23);
                    match(input,COLON,FOLLOW_COLON_in_cp_arg6973); if (state.failed) return ;
                    dbg.location(1117,29);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:29: ( ws )?
                    int alt266=2;
                    try { dbg.enterSubRule(266);
                    try { dbg.enterDecision(266, decisionCanBacktrack[266]);

                    int LA266_0 = input.LA(1);

                    if ( ((LA266_0>=WS && LA266_0<=COMMENT)) ) {
                        alt266=1;
                    }
                    } finally {dbg.exitDecision(266);}

                    switch (alt266) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:29: ws
                            {
                            dbg.location(1117,29);
                            pushFollow(FOLLOW_ws_in_cp_arg6975);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(266);}

                    dbg.location(1117,33);
                    pushFollow(FOLLOW_cp_expression_in_cp_arg6978);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1117,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:47: ( ws )?
                    int alt267=2;
                    try { dbg.enterSubRule(267);
                    try { dbg.enterDecision(267, decisionCanBacktrack[267]);

                    int LA267_0 = input.LA(1);

                    if ( ((LA267_0>=WS && LA267_0<=COMMENT)) ) {
                        alt267=1;
                    }
                    } finally {dbg.exitDecision(267);}

                    switch (alt267) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:47: ws
                            {
                            dbg.location(1117,47);
                            pushFollow(FOLLOW_ws_in_cp_arg6980);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(267);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(268);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1118, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_arg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_arg"


    // $ANTLR start "less_mixin_guarded"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1122:1: less_mixin_guarded : LESS_WHEN ( ws )? less_condition ( ( COMMA | AND ) ( ws )? less_condition )* ;
    public final void less_mixin_guarded() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_mixin_guarded");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1122, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1123:5: ( LESS_WHEN ( ws )? less_condition ( ( COMMA | AND ) ( ws )? less_condition )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1124:5: LESS_WHEN ( ws )? less_condition ( ( COMMA | AND ) ( ws )? less_condition )*
            {
            dbg.location(1124,5);
            match(input,LESS_WHEN,FOLLOW_LESS_WHEN_in_less_mixin_guarded7006); if (state.failed) return ;
            dbg.location(1124,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1124:15: ( ws )?
            int alt269=2;
            try { dbg.enterSubRule(269);
            try { dbg.enterDecision(269, decisionCanBacktrack[269]);

            int LA269_0 = input.LA(1);

            if ( ((LA269_0>=WS && LA269_0<=COMMENT)) ) {
                alt269=1;
            }
            } finally {dbg.exitDecision(269);}

            switch (alt269) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1124:15: ws
                    {
                    dbg.location(1124,15);
                    pushFollow(FOLLOW_ws_in_less_mixin_guarded7008);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(269);}

            dbg.location(1124,19);
            pushFollow(FOLLOW_less_condition_in_less_mixin_guarded7011);
            less_condition();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1124,34);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1124:34: ( ( COMMA | AND ) ( ws )? less_condition )*
            try { dbg.enterSubRule(271);

            loop271:
            do {
                int alt271=2;
                try { dbg.enterDecision(271, decisionCanBacktrack[271]);

                int LA271_0 = input.LA(1);

                if ( (LA271_0==COMMA||LA271_0==AND) ) {
                    alt271=1;
                }


                } finally {dbg.exitDecision(271);}

                switch (alt271) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1124:36: ( COMMA | AND ) ( ws )? less_condition
            	    {
            	    dbg.location(1124,36);
            	    if ( input.LA(1)==COMMA||input.LA(1)==AND ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1124,50);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1124:50: ( ws )?
            	    int alt270=2;
            	    try { dbg.enterSubRule(270);
            	    try { dbg.enterDecision(270, decisionCanBacktrack[270]);

            	    int LA270_0 = input.LA(1);

            	    if ( ((LA270_0>=WS && LA270_0<=COMMENT)) ) {
            	        alt270=1;
            	    }
            	    } finally {dbg.exitDecision(270);}

            	    switch (alt270) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1124:50: ws
            	            {
            	            dbg.location(1124,50);
            	            pushFollow(FOLLOW_ws_in_less_mixin_guarded7023);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(270);}

            	    dbg.location(1124,54);
            	    pushFollow(FOLLOW_less_condition_in_less_mixin_guarded7026);
            	    less_condition();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop271;
                }
            } while (true);
            } finally {dbg.exitSubRule(271);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1125, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_mixin_guarded");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_mixin_guarded"


    // $ANTLR start "less_condition"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1129:1: less_condition : ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN ;
    public final void less_condition() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_condition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1129, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:5: ( ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:5: ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN
            {
            dbg.location(1131,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:5: ( NOT ( ws )? )?
            int alt273=2;
            try { dbg.enterSubRule(273);
            try { dbg.enterDecision(273, decisionCanBacktrack[273]);

            int LA273_0 = input.LA(1);

            if ( (LA273_0==NOT) ) {
                alt273=1;
            }
            } finally {dbg.exitDecision(273);}

            switch (alt273) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:6: NOT ( ws )?
                    {
                    dbg.location(1131,6);
                    match(input,NOT,FOLLOW_NOT_in_less_condition7056); if (state.failed) return ;
                    dbg.location(1131,10);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:10: ( ws )?
                    int alt272=2;
                    try { dbg.enterSubRule(272);
                    try { dbg.enterDecision(272, decisionCanBacktrack[272]);

                    int LA272_0 = input.LA(1);

                    if ( ((LA272_0>=WS && LA272_0<=COMMENT)) ) {
                        alt272=1;
                    }
                    } finally {dbg.exitDecision(272);}

                    switch (alt272) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:10: ws
                            {
                            dbg.location(1131,10);
                            pushFollow(FOLLOW_ws_in_less_condition7058);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(272);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(273);}

            dbg.location(1132,5);
            match(input,LPAREN,FOLLOW_LPAREN_in_less_condition7067); if (state.failed) return ;
            dbg.location(1132,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:12: ( ws )?
            int alt274=2;
            try { dbg.enterSubRule(274);
            try { dbg.enterDecision(274, decisionCanBacktrack[274]);

            int LA274_0 = input.LA(1);

            if ( ((LA274_0>=WS && LA274_0<=COMMENT)) ) {
                alt274=1;
            }
            } finally {dbg.exitDecision(274);}

            switch (alt274) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:12: ws
                    {
                    dbg.location(1132,12);
                    pushFollow(FOLLOW_ws_in_less_condition7069);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(274);}

            dbg.location(1133,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1133:9: ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:14: ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )?
            {
            dbg.location(1134,14);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:14: ( cp_variable | less_function_in_condition )
            int alt275=2;
            try { dbg.enterSubRule(275);
            try { dbg.enterDecision(275, decisionCanBacktrack[275]);

            int LA275_0 = input.LA(1);

            if ( (LA275_0==NAMESPACE_SYM||(LA275_0>=CHARSET_SYM && LA275_0<=IMPORT_SYM)||LA275_0==MEDIA_SYM||(LA275_0>=AT_IDENT && LA275_0<=MOZ_DOCUMENT_SYM)||LA275_0==WEBKIT_KEYFRAMES_SYM||(LA275_0>=PAGE_SYM && LA275_0<=RIGHTBOTTOM_SYM)||LA275_0==SASS_VAR||(LA275_0>=SASS_CONTENT && LA275_0<=SASS_WHILE)) ) {
                alt275=1;
            }
            else if ( (LA275_0==IDENT) ) {
                alt275=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 275, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(275);}

            switch (alt275) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:15: cp_variable
                    {
                    dbg.location(1134,15);
                    pushFollow(FOLLOW_cp_variable_in_less_condition7097);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:29: less_function_in_condition
                    {
                    dbg.location(1134,29);
                    pushFollow(FOLLOW_less_function_in_condition_in_less_condition7101);
                    less_function_in_condition();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(275);}

            dbg.location(1134,57);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:57: ( ws )?
            int alt276=2;
            try { dbg.enterSubRule(276);
            try { dbg.enterDecision(276, decisionCanBacktrack[276]);

            int LA276_0 = input.LA(1);

            if ( ((LA276_0>=WS && LA276_0<=COMMENT)) ) {
                alt276=1;
            }
            } finally {dbg.exitDecision(276);}

            switch (alt276) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:57: ws
                    {
                    dbg.location(1134,57);
                    pushFollow(FOLLOW_ws_in_less_condition7104);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(276);}

            dbg.location(1134,61);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:61: ( less_condition_operator ( ws )? cp_math_expression )?
            int alt278=2;
            try { dbg.enterSubRule(278);
            try { dbg.enterDecision(278, decisionCanBacktrack[278]);

            int LA278_0 = input.LA(1);

            if ( (LA278_0==GREATER||LA278_0==OPEQ||(LA278_0>=LESS && LA278_0<=GREATER_OR_EQ)) ) {
                alt278=1;
            }
            } finally {dbg.exitDecision(278);}

            switch (alt278) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:62: less_condition_operator ( ws )? cp_math_expression
                    {
                    dbg.location(1134,62);
                    pushFollow(FOLLOW_less_condition_operator_in_less_condition7108);
                    less_condition_operator();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1134,86);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:86: ( ws )?
                    int alt277=2;
                    try { dbg.enterSubRule(277);
                    try { dbg.enterDecision(277, decisionCanBacktrack[277]);

                    int LA277_0 = input.LA(1);

                    if ( ((LA277_0>=WS && LA277_0<=COMMENT)) ) {
                        alt277=1;
                    }
                    } finally {dbg.exitDecision(277);}

                    switch (alt277) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:86: ws
                            {
                            dbg.location(1134,86);
                            pushFollow(FOLLOW_ws_in_less_condition7110);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(277);}

                    dbg.location(1134,90);
                    pushFollow(FOLLOW_cp_math_expression_in_less_condition7113);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(278);}


            }

            dbg.location(1136,5);
            match(input,RPAREN,FOLLOW_RPAREN_in_less_condition7139); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1137, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_condition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_condition"


    // $ANTLR start "less_function_in_condition"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1140:1: less_function_in_condition : less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN ;
    public final void less_function_in_condition() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_function_in_condition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1140, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1141:5: ( less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:5: less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN
            {
            dbg.location(1142,5);
            pushFollow(FOLLOW_less_fn_name_in_less_function_in_condition7165);
            less_fn_name();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1142,18);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:18: ( ws )?
            int alt279=2;
            try { dbg.enterSubRule(279);
            try { dbg.enterDecision(279, decisionCanBacktrack[279]);

            int LA279_0 = input.LA(1);

            if ( ((LA279_0>=WS && LA279_0<=COMMENT)) ) {
                alt279=1;
            }
            } finally {dbg.exitDecision(279);}

            switch (alt279) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:18: ws
                    {
                    dbg.location(1142,18);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition7167);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(279);}

            dbg.location(1142,22);
            match(input,LPAREN,FOLLOW_LPAREN_in_less_function_in_condition7170); if (state.failed) return ;
            dbg.location(1142,29);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:29: ( ws )?
            int alt280=2;
            try { dbg.enterSubRule(280);
            try { dbg.enterDecision(280, decisionCanBacktrack[280]);

            int LA280_0 = input.LA(1);

            if ( ((LA280_0>=WS && LA280_0<=COMMENT)) ) {
                alt280=1;
            }
            } finally {dbg.exitDecision(280);}

            switch (alt280) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:29: ws
                    {
                    dbg.location(1142,29);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition7172);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(280);}

            dbg.location(1142,33);
            pushFollow(FOLLOW_cp_variable_in_less_function_in_condition7175);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1142,45);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:45: ( ws )?
            int alt281=2;
            try { dbg.enterSubRule(281);
            try { dbg.enterDecision(281, decisionCanBacktrack[281]);

            int LA281_0 = input.LA(1);

            if ( ((LA281_0>=WS && LA281_0<=COMMENT)) ) {
                alt281=1;
            }
            } finally {dbg.exitDecision(281);}

            switch (alt281) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:45: ws
                    {
                    dbg.location(1142,45);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition7177);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(281);}

            dbg.location(1142,49);
            match(input,RPAREN,FOLLOW_RPAREN_in_less_function_in_condition7180); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1143, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_function_in_condition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_function_in_condition"


    // $ANTLR start "less_fn_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:1: less_fn_name : IDENT ;
    public final void less_fn_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_fn_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1146, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1147:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1148:5: IDENT
            {
            dbg.location(1148,5);
            match(input,IDENT,FOLLOW_IDENT_in_less_fn_name7202); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1149, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_fn_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_fn_name"


    // $ANTLR start "less_condition_operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1151:1: less_condition_operator : ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ );
    public final void less_condition_operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_condition_operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1151, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1152:5: ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(1152,5);
            if ( input.LA(1)==GREATER||input.LA(1)==OPEQ||(input.LA(1)>=LESS && input.LA(1)<=GREATER_OR_EQ) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1154, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_condition_operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_condition_operator"


    // $ANTLR start "less_selector_interpolation"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1156:1: less_selector_interpolation : AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE ;
    public final void less_selector_interpolation() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_selector_interpolation");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1156, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1157:5: ( AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1158:5: AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE
            {
            dbg.location(1158,5);
            match(input,AT_SIGN,FOLLOW_AT_SIGN_in_less_selector_interpolation7264); if (state.failed) return ;
            dbg.location(1158,13);
            match(input,LBRACE,FOLLOW_LBRACE_in_less_selector_interpolation7266); if (state.failed) return ;
            dbg.location(1158,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1158:20: ( ws )?
            int alt282=2;
            try { dbg.enterSubRule(282);
            try { dbg.enterDecision(282, decisionCanBacktrack[282]);

            int LA282_0 = input.LA(1);

            if ( ((LA282_0>=WS && LA282_0<=COMMENT)) ) {
                alt282=1;
            }
            } finally {dbg.exitDecision(282);}

            switch (alt282) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1158:20: ws
                    {
                    dbg.location(1158,20);
                    pushFollow(FOLLOW_ws_in_less_selector_interpolation7268);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(282);}

            dbg.location(1158,24);
            match(input,IDENT,FOLLOW_IDENT_in_less_selector_interpolation7271); if (state.failed) return ;
            dbg.location(1158,30);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1158:30: ( ws )?
            int alt283=2;
            try { dbg.enterSubRule(283);
            try { dbg.enterDecision(283, decisionCanBacktrack[283]);

            int LA283_0 = input.LA(1);

            if ( ((LA283_0>=WS && LA283_0<=COMMENT)) ) {
                alt283=1;
            }
            } finally {dbg.exitDecision(283);}

            switch (alt283) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1158:30: ws
                    {
                    dbg.location(1158,30);
                    pushFollow(FOLLOW_ws_in_less_selector_interpolation7273);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(283);}

            dbg.location(1158,34);
            match(input,RBRACE,FOLLOW_RBRACE_in_less_selector_interpolation7276); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1159, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_selector_interpolation");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_selector_interpolation"


    // $ANTLR start "sass_selector_interpolation_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1166:1: sass_selector_interpolation_expression : ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )* ;
    public final void sass_selector_interpolation_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_selector_interpolation_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1166, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1167:5: ( ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )*
            {
            dbg.location(1168,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) )
            int alt284=2;
            try { dbg.enterSubRule(284);
            try { dbg.enterDecision(284, decisionCanBacktrack[284]);

            int LA284_0 = input.LA(1);

            if ( (LA284_0==HASH_SYMBOL) ) {
                int LA284_1 = input.LA(2);

                if ( (synpred35_Css3()) ) {
                    alt284=1;
                }
                else if ( (true) ) {
                    alt284=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 284, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA284_0==IDENT||LA284_0==COMMA||LA284_0==COLON||LA284_0==MINUS||LA284_0==GREATER||(LA284_0>=HASH && LA284_0<=LBRACKET)||LA284_0==STAR||LA284_0==LESS_AND||LA284_0==RBRACKET) ) {
                alt284=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 284, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(284);}

            switch (alt284) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1169:13: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
                    {
                    dbg.location(1169,50);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7325);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:13: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET )
                    {
                    dbg.location(1171,13);
                    if ( input.LA(1)==IDENT||input.LA(1)==COMMA||input.LA(1)==COLON||input.LA(1)==MINUS||input.LA(1)==GREATER||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=LBRACKET)||input.LA(1)==STAR||input.LA(1)==LESS_AND||input.LA(1)==RBRACKET ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(284);}

            dbg.location(1173,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1173:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )*
            try { dbg.enterSubRule(287);

            loop287:
            do {
                int alt287=2;
                try { dbg.enterDecision(287, decisionCanBacktrack[287]);

                try {
                    isCyclicDecision = true;
                    alt287 = dfa287.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(287);}

                switch (alt287) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1174:13: ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) )
            	    {
            	    dbg.location(1174,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1174:13: ( ws )?
            	    int alt285=2;
            	    try { dbg.enterSubRule(285);
            	    try { dbg.enterDecision(285, decisionCanBacktrack[285]);

            	    int LA285_0 = input.LA(1);

            	    if ( ((LA285_0>=WS && LA285_0<=COMMENT)) ) {
            	        alt285=1;
            	    }
            	    } finally {dbg.exitDecision(285);}

            	    switch (alt285) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1174:13: ws
            	            {
            	            dbg.location(1174,13);
            	            pushFollow(FOLLOW_ws_in_sass_selector_interpolation_expression7435);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(285);}

            	    dbg.location(1175,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1175:13: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) )
            	    int alt286=2;
            	    try { dbg.enterSubRule(286);
            	    try { dbg.enterDecision(286, decisionCanBacktrack[286]);

            	    int LA286_0 = input.LA(1);

            	    if ( (LA286_0==HASH_SYMBOL) ) {
            	        int LA286_1 = input.LA(2);

            	        if ( (synpred36_Css3()) ) {
            	            alt286=1;
            	        }
            	        else if ( (true) ) {
            	            alt286=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return ;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 286, 1, input);

            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA286_0==IDENT||LA286_0==COMMA||LA286_0==COLON||LA286_0==MINUS||LA286_0==GREATER||(LA286_0>=HASH && LA286_0<=LBRACKET)||LA286_0==STAR||LA286_0==LESS_AND||LA286_0==RBRACKET) ) {
            	        alt286=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 286, 0, input);

            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(286);}

            	    switch (alt286) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1176:17: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
            	            {
            	            dbg.location(1176,54);
            	            pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7472);
            	            sass_interpolation_expression_var();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1178:17: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET )
            	            {
            	            dbg.location(1178,17);
            	            if ( input.LA(1)==IDENT||input.LA(1)==COMMA||input.LA(1)==COLON||input.LA(1)==MINUS||input.LA(1)==GREATER||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=LBRACKET)||input.LA(1)==STAR||input.LA(1)==LESS_AND||input.LA(1)==RBRACKET ) {
            	                input.consume();
            	                state.errorRecovery=false;state.failed=false;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                MismatchedSetException mse = new MismatchedSetException(null,input);
            	                dbg.recognitionException(mse);
            	                throw mse;
            	            }


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(286);}


            	    }
            	    break;

            	default :
            	    break loop287;
                }
            } while (true);
            } finally {dbg.exitSubRule(287);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1182, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_selector_interpolation_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_selector_interpolation_expression"


    // $ANTLR start "sass_declaration_interpolation_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1184:1: sass_declaration_interpolation_expression : ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )* ;
    public final void sass_declaration_interpolation_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_declaration_interpolation_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1184, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1185:5: ( ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1186:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*
            {
            dbg.location(1186,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1186:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            int alt288=2;
            try { dbg.enterSubRule(288);
            try { dbg.enterDecision(288, decisionCanBacktrack[288]);

            int LA288_0 = input.LA(1);

            if ( (LA288_0==HASH_SYMBOL) ) {
                int LA288_1 = input.LA(2);

                if ( (LA288_1==LBRACE) && (synpred37_Css3())) {
                    alt288=1;
                }
                else if ( (LA288_1==IDENT||LA288_1==COLON||LA288_1==MINUS||(LA288_1>=HASH_SYMBOL && LA288_1<=DOT)||(LA288_1>=WS && LA288_1<=COMMENT)) ) {
                    alt288=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 288, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA288_0==IDENT||LA288_0==MINUS||(LA288_0>=HASH && LA288_0<=DOT)) ) {
                alt288=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 288, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(288);}

            switch (alt288) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1187:13: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
                    {
                    dbg.location(1187,50);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7628);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1189:13: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH )
                    {
                    dbg.location(1189,13);
                    if ( input.LA(1)==IDENT||input.LA(1)==MINUS||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=DOT) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(288);}

            dbg.location(1191,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1191:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*
            try { dbg.enterSubRule(291);

            loop291:
            do {
                int alt291=2;
                try { dbg.enterDecision(291, decisionCanBacktrack[291]);

                try {
                    isCyclicDecision = true;
                    alt291 = dfa291.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(291);}

                switch (alt291) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:13: ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            	    {
            	    dbg.location(1192,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:13: ( ws )?
            	    int alt289=2;
            	    try { dbg.enterSubRule(289);
            	    try { dbg.enterDecision(289, decisionCanBacktrack[289]);

            	    int LA289_0 = input.LA(1);

            	    if ( ((LA289_0>=WS && LA289_0<=COMMENT)) ) {
            	        alt289=1;
            	    }
            	    } finally {dbg.exitDecision(289);}

            	    switch (alt289) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:13: ws
            	            {
            	            dbg.location(1192,13);
            	            pushFollow(FOLLOW_ws_in_sass_declaration_interpolation_expression7709);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(289);}

            	    dbg.location(1193,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1193:13: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            	    int alt290=2;
            	    try { dbg.enterSubRule(290);
            	    try { dbg.enterDecision(290, decisionCanBacktrack[290]);

            	    int LA290_0 = input.LA(1);

            	    if ( (LA290_0==HASH_SYMBOL) ) {
            	        int LA290_1 = input.LA(2);

            	        if ( (LA290_1==LBRACE) && (synpred38_Css3())) {
            	            alt290=1;
            	        }
            	        else if ( (LA290_1==IDENT||LA290_1==COLON||LA290_1==MINUS||(LA290_1>=HASH_SYMBOL && LA290_1<=DOT)||(LA290_1>=WS && LA290_1<=COMMENT)) ) {
            	            alt290=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return ;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 290, 1, input);

            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA290_0==IDENT||LA290_0==MINUS||(LA290_0>=HASH && LA290_0<=DOT)) ) {
            	        alt290=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 290, 0, input);

            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(290);}

            	    switch (alt290) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1194:17: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
            	            {
            	            dbg.location(1194,54);
            	            pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7746);
            	            sass_interpolation_expression_var();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1196:17: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH )
            	            {
            	            dbg.location(1196,17);
            	            if ( input.LA(1)==IDENT||input.LA(1)==MINUS||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=DOT) ) {
            	                input.consume();
            	                state.errorRecovery=false;state.failed=false;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                MismatchedSetException mse = new MismatchedSetException(null,input);
            	                dbg.recognitionException(mse);
            	                throw mse;
            	            }


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(290);}


            	    }
            	    break;

            	default :
            	    break loop291;
                }
            } while (true);
            } finally {dbg.exitSubRule(291);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1200, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_declaration_interpolation_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_declaration_interpolation_expression"


    // $ANTLR start "sass_interpolation_expression_var"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1202:1: sass_interpolation_expression_var : HASH_SYMBOL LBRACE cp_expression RBRACE ;
    public final void sass_interpolation_expression_var() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_interpolation_expression_var");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1202, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1203:5: ( HASH_SYMBOL LBRACE cp_expression RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:9: HASH_SYMBOL LBRACE cp_expression RBRACE
            {
            dbg.location(1204,9);
            match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var7855); if (state.failed) return ;
            dbg.location(1204,21);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_interpolation_expression_var7857); if (state.failed) return ;
            dbg.location(1204,28);
            pushFollow(FOLLOW_cp_expression_in_sass_interpolation_expression_var7859);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1204,42);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_interpolation_expression_var7861); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1205, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_interpolation_expression_var");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_interpolation_expression_var"


    // $ANTLR start "sass_nested_properties"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1225:1: sass_nested_properties : property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void sass_nested_properties() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_nested_properties");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1225, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:5: ( property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:5: property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(1227,5);
            pushFollow(FOLLOW_property_in_sass_nested_properties7905);
            property();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1227,14);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:14: ( ws )?
            int alt292=2;
            try { dbg.enterSubRule(292);
            try { dbg.enterDecision(292, decisionCanBacktrack[292]);

            int LA292_0 = input.LA(1);

            if ( ((LA292_0>=WS && LA292_0<=COMMENT)) ) {
                alt292=1;
            }
            } finally {dbg.exitDecision(292);}

            switch (alt292) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:14: ws
                    {
                    dbg.location(1227,14);
                    pushFollow(FOLLOW_ws_in_sass_nested_properties7907);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(292);}

            dbg.location(1227,18);
            match(input,COLON,FOLLOW_COLON_in_sass_nested_properties7910); if (state.failed) return ;
            dbg.location(1227,24);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:24: ( ws )?
            int alt293=2;
            try { dbg.enterSubRule(293);
            try { dbg.enterDecision(293, decisionCanBacktrack[293]);

            int LA293_0 = input.LA(1);

            if ( ((LA293_0>=WS && LA293_0<=COMMENT)) ) {
                alt293=1;
            }
            } finally {dbg.exitDecision(293);}

            switch (alt293) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:24: ws
                    {
                    dbg.location(1227,24);
                    pushFollow(FOLLOW_ws_in_sass_nested_properties7912);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(293);}

            dbg.location(1227,28);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:28: ( propertyValue ( ws )? )?
            int alt295=2;
            try { dbg.enterSubRule(295);
            try { dbg.enterDecision(295, decisionCanBacktrack[295]);

            int LA295_0 = input.LA(1);

            if ( (LA295_0==NAMESPACE_SYM||(LA295_0>=IDENT && LA295_0<=IMPORT_SYM)||LA295_0==MEDIA_SYM||LA295_0==GEN||(LA295_0>=AT_IDENT && LA295_0<=MOZ_DOCUMENT_SYM)||(LA295_0>=WEBKIT_KEYFRAMES_SYM && LA295_0<=RIGHTBOTTOM_SYM)||(LA295_0>=MINUS && LA295_0<=PLUS)||(LA295_0>=TILDE && LA295_0<=HASH)||(LA295_0>=SASS_VAR && LA295_0<=PERCENTAGE_SYMBOL)||(LA295_0>=SASS_CONTENT && LA295_0<=SASS_WHILE)) ) {
                alt295=1;
            }
            } finally {dbg.exitDecision(295);}

            switch (alt295) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:29: propertyValue ( ws )?
                    {
                    dbg.location(1227,29);
                    pushFollow(FOLLOW_propertyValue_in_sass_nested_properties7916);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1227,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:43: ( ws )?
                    int alt294=2;
                    try { dbg.enterSubRule(294);
                    try { dbg.enterDecision(294, decisionCanBacktrack[294]);

                    int LA294_0 = input.LA(1);

                    if ( ((LA294_0>=WS && LA294_0<=COMMENT)) ) {
                        alt294=1;
                    }
                    } finally {dbg.exitDecision(294);}

                    switch (alt294) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:43: ws
                            {
                            dbg.location(1227,43);
                            pushFollow(FOLLOW_ws_in_sass_nested_properties7918);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(294);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(295);}

            dbg.location(1227,49);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_nested_properties7923); if (state.failed) return ;
            dbg.location(1227,56);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:56: ( ws )?
            int alt296=2;
            try { dbg.enterSubRule(296);
            try { dbg.enterDecision(296, decisionCanBacktrack[296]);

            int LA296_0 = input.LA(1);

            if ( ((LA296_0>=WS && LA296_0<=COMMENT)) ) {
                alt296=1;
            }
            } finally {dbg.exitDecision(296);}

            switch (alt296) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:56: ws
                    {
                    dbg.location(1227,56);
                    pushFollow(FOLLOW_ws_in_sass_nested_properties7925);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(296);}

            dbg.location(1227,60);
            pushFollow(FOLLOW_syncToFollow_in_sass_nested_properties7928);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1227,73);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:73: ( declarations )?
            int alt297=2;
            try { dbg.enterSubRule(297);
            try { dbg.enterDecision(297, decisionCanBacktrack[297]);

            int LA297_0 = input.LA(1);

            if ( ((LA297_0>=NAMESPACE_SYM && LA297_0<=IDENT)||(LA297_0>=CHARSET_SYM && LA297_0<=MEDIA_SYM)||LA297_0==GEN||(LA297_0>=COLON && LA297_0<=MOZ_DOCUMENT_SYM)||LA297_0==WEBKIT_KEYFRAMES_SYM||(LA297_0>=PAGE_SYM && LA297_0<=RIGHTBOTTOM_SYM)||(LA297_0>=MINUS && LA297_0<=PLUS)||(LA297_0>=GREATER && LA297_0<=PIPE)||LA297_0==LESS_AND||(LA297_0>=RBRACKET && LA297_0<=SASS_VAR)||(LA297_0>=SASS_CONTENT && LA297_0<=SASS_WHILE)||LA297_0==AT_SIGN) ) {
                alt297=1;
            }
            } finally {dbg.exitDecision(297);}

            switch (alt297) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:73: declarations
                    {
                    dbg.location(1227,73);
                    pushFollow(FOLLOW_declarations_in_sass_nested_properties7930);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(297);}

            dbg.location(1227,87);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_nested_properties7933); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1228, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_nested_properties");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_nested_properties"


    // $ANTLR start "sass_extend"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:1: sass_extend : SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )? ;
    public final void sass_extend() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_extend");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1230, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:5: ( SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:5: SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )?
            {
            dbg.location(1232,5);
            match(input,SASS_EXTEND,FOLLOW_SASS_EXTEND_in_sass_extend7954); if (state.failed) return ;
            dbg.location(1232,17);
            pushFollow(FOLLOW_ws_in_sass_extend7956);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1232,20);
            pushFollow(FOLLOW_simpleSelectorSequence_in_sass_extend7958);
            simpleSelectorSequence();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1232,43);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:43: ( ( ws )? SASS_OPTIONAL )?
            int alt299=2;
            try { dbg.enterSubRule(299);
            try { dbg.enterDecision(299, decisionCanBacktrack[299]);

            try {
                isCyclicDecision = true;
                alt299 = dfa299.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(299);}

            switch (alt299) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:44: ( ws )? SASS_OPTIONAL
                    {
                    dbg.location(1232,44);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:44: ( ws )?
                    int alt298=2;
                    try { dbg.enterSubRule(298);
                    try { dbg.enterDecision(298, decisionCanBacktrack[298]);

                    int LA298_0 = input.LA(1);

                    if ( ((LA298_0>=WS && LA298_0<=COMMENT)) ) {
                        alt298=1;
                    }
                    } finally {dbg.exitDecision(298);}

                    switch (alt298) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:44: ws
                            {
                            dbg.location(1232,44);
                            pushFollow(FOLLOW_ws_in_sass_extend7961);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(298);}

                    dbg.location(1232,48);
                    match(input,SASS_OPTIONAL,FOLLOW_SASS_OPTIONAL_in_sass_extend7964); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(299);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1233, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_extend");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_extend"


    // $ANTLR start "sass_extend_only_selector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:1: sass_extend_only_selector : SASS_EXTEND_ONLY_SELECTOR ;
    public final void sass_extend_only_selector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_extend_only_selector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1235, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1236:5: ( SASS_EXTEND_ONLY_SELECTOR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1237:5: SASS_EXTEND_ONLY_SELECTOR
            {
            dbg.location(1237,5);
            match(input,SASS_EXTEND_ONLY_SELECTOR,FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector7991); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1238, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_extend_only_selector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_extend_only_selector"


    // $ANTLR start "sass_debug"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:1: sass_debug : ( SASS_DEBUG | SASS_WARN ) ws cp_expression ;
    public final void sass_debug() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_debug");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1240, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1241:5: ( ( SASS_DEBUG | SASS_WARN ) ws cp_expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:5: ( SASS_DEBUG | SASS_WARN ) ws cp_expression
            {
            dbg.location(1242,5);
            if ( (input.LA(1)>=SASS_DEBUG && input.LA(1)<=SASS_WARN) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(1242,32);
            pushFollow(FOLLOW_ws_in_sass_debug8022);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1242,35);
            pushFollow(FOLLOW_cp_expression_in_sass_debug8024);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1243, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_debug");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_debug"


    // $ANTLR start "sass_control"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1245:1: sass_control : ( sass_if | sass_for | sass_each | sass_while );
    public final void sass_control() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1245, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1246:5: ( sass_if | sass_for | sass_each | sass_while )
            int alt300=4;
            try { dbg.enterDecision(300, decisionCanBacktrack[300]);

            switch ( input.LA(1) ) {
            case SASS_IF:
                {
                alt300=1;
                }
                break;
            case SASS_FOR:
                {
                alt300=2;
                }
                break;
            case SASS_EACH:
                {
                alt300=3;
                }
                break;
            case SASS_WHILE:
                {
                alt300=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 300, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(300);}

            switch (alt300) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:5: sass_if
                    {
                    dbg.location(1247,5);
                    pushFollow(FOLLOW_sass_if_in_sass_control8049);
                    sass_if();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:15: sass_for
                    {
                    dbg.location(1247,15);
                    pushFollow(FOLLOW_sass_for_in_sass_control8053);
                    sass_for();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:26: sass_each
                    {
                    dbg.location(1247,26);
                    pushFollow(FOLLOW_sass_each_in_sass_control8057);
                    sass_each();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:38: sass_while
                    {
                    dbg.location(1247,38);
                    pushFollow(FOLLOW_sass_while_in_sass_control8061);
                    sass_while();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1248, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control"


    // $ANTLR start "sass_if"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1250:1: sass_if : SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? ;
    public final void sass_if() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_if");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1250, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1251:5: ( SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:5: SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
            {
            dbg.location(1252,5);
            match(input,SASS_IF,FOLLOW_SASS_IF_in_sass_if8082); if (state.failed) return ;
            dbg.location(1252,13);
            pushFollow(FOLLOW_ws_in_sass_if8084);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1252,16);
            pushFollow(FOLLOW_sass_control_expression_in_sass_if8086);
            sass_control_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1252,40);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:40: ( ws )?
            int alt301=2;
            try { dbg.enterSubRule(301);
            try { dbg.enterDecision(301, decisionCanBacktrack[301]);

            int LA301_0 = input.LA(1);

            if ( ((LA301_0>=WS && LA301_0<=COMMENT)) ) {
                alt301=1;
            }
            } finally {dbg.exitDecision(301);}

            switch (alt301) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:40: ws
                    {
                    dbg.location(1252,40);
                    pushFollow(FOLLOW_ws_in_sass_if8088);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(301);}

            dbg.location(1252,44);
            pushFollow(FOLLOW_sass_control_block_in_sass_if8091);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1252,63);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:63: ( ( ws )? sass_else )?
            int alt303=2;
            try { dbg.enterSubRule(303);
            try { dbg.enterDecision(303, decisionCanBacktrack[303]);

            try {
                isCyclicDecision = true;
                alt303 = dfa303.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(303);}

            switch (alt303) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:64: ( ws )? sass_else
                    {
                    dbg.location(1252,64);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:64: ( ws )?
                    int alt302=2;
                    try { dbg.enterSubRule(302);
                    try { dbg.enterDecision(302, decisionCanBacktrack[302]);

                    int LA302_0 = input.LA(1);

                    if ( ((LA302_0>=WS && LA302_0<=COMMENT)) ) {
                        alt302=1;
                    }
                    } finally {dbg.exitDecision(302);}

                    switch (alt302) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:64: ws
                            {
                            dbg.location(1252,64);
                            pushFollow(FOLLOW_ws_in_sass_if8094);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(302);}

                    dbg.location(1252,68);
                    pushFollow(FOLLOW_sass_else_in_sass_if8097);
                    sass_else();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(303);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1253, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_if");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_if"


    // $ANTLR start "sass_else"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1255:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );
    public final void sass_else() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_else");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1255, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:5: ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
            int alt310=2;
            try { dbg.enterDecision(310, decisionCanBacktrack[310]);

            try {
                isCyclicDecision = true;
                alt310 = dfa310.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(310);}

            switch (alt310) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1257:5: SASS_ELSE ( ws )? sass_control_block
                    {
                    dbg.location(1257,5);
                    match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else8124); if (state.failed) return ;
                    dbg.location(1257,15);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1257:15: ( ws )?
                    int alt304=2;
                    try { dbg.enterSubRule(304);
                    try { dbg.enterDecision(304, decisionCanBacktrack[304]);

                    int LA304_0 = input.LA(1);

                    if ( ((LA304_0>=WS && LA304_0<=COMMENT)) ) {
                        alt304=1;
                    }
                    } finally {dbg.exitDecision(304);}

                    switch (alt304) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1257:15: ws
                            {
                            dbg.location(1257,15);
                            pushFollow(FOLLOW_ws_in_sass_else8126);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(304);}

                    dbg.location(1257,19);
                    pushFollow(FOLLOW_sass_control_block_in_sass_else8129);
                    sass_control_block();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:5: SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
                    {
                    dbg.location(1259,5);
                    match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else8142); if (state.failed) return ;
                    dbg.location(1259,15);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:15: ( ws )?
                    int alt305=2;
                    try { dbg.enterSubRule(305);
                    try { dbg.enterDecision(305, decisionCanBacktrack[305]);

                    int LA305_0 = input.LA(1);

                    if ( ((LA305_0>=WS && LA305_0<=COMMENT)) ) {
                        alt305=1;
                    }
                    } finally {dbg.exitDecision(305);}

                    switch (alt305) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:15: ws
                            {
                            dbg.location(1259,15);
                            pushFollow(FOLLOW_ws_in_sass_else8144);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(305);}

                    dbg.location(1259,19);
                    if ( !(evalPredicate(tokenNameEquals("if"),"tokenNameEquals(\"if\")")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "sass_else", "tokenNameEquals(\"if\")");
                    }
                    dbg.location(1259,44);
                    match(input,IDENT,FOLLOW_IDENT_in_sass_else8149); if (state.failed) return ;
                    dbg.location(1259,59);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:59: ( ws )?
                    int alt306=2;
                    try { dbg.enterSubRule(306);
                    try { dbg.enterDecision(306, decisionCanBacktrack[306]);

                    int LA306_0 = input.LA(1);

                    if ( ((LA306_0>=WS && LA306_0<=COMMENT)) ) {
                        alt306=1;
                    }
                    } finally {dbg.exitDecision(306);}

                    switch (alt306) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:59: ws
                            {
                            dbg.location(1259,59);
                            pushFollow(FOLLOW_ws_in_sass_else8153);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(306);}

                    dbg.location(1259,63);
                    pushFollow(FOLLOW_sass_control_expression_in_sass_else8156);
                    sass_control_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1259,87);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:87: ( ws )?
                    int alt307=2;
                    try { dbg.enterSubRule(307);
                    try { dbg.enterDecision(307, decisionCanBacktrack[307]);

                    int LA307_0 = input.LA(1);

                    if ( ((LA307_0>=WS && LA307_0<=COMMENT)) ) {
                        alt307=1;
                    }
                    } finally {dbg.exitDecision(307);}

                    switch (alt307) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:87: ws
                            {
                            dbg.location(1259,87);
                            pushFollow(FOLLOW_ws_in_sass_else8158);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(307);}

                    dbg.location(1259,91);
                    pushFollow(FOLLOW_sass_control_block_in_sass_else8161);
                    sass_control_block();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1259,110);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:110: ( ( ws )? sass_else )?
                    int alt309=2;
                    try { dbg.enterSubRule(309);
                    try { dbg.enterDecision(309, decisionCanBacktrack[309]);

                    try {
                        isCyclicDecision = true;
                        alt309 = dfa309.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(309);}

                    switch (alt309) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:111: ( ws )? sass_else
                            {
                            dbg.location(1259,111);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:111: ( ws )?
                            int alt308=2;
                            try { dbg.enterSubRule(308);
                            try { dbg.enterDecision(308, decisionCanBacktrack[308]);

                            int LA308_0 = input.LA(1);

                            if ( ((LA308_0>=WS && LA308_0<=COMMENT)) ) {
                                alt308=1;
                            }
                            } finally {dbg.exitDecision(308);}

                            switch (alt308) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:111: ws
                                    {
                                    dbg.location(1259,111);
                                    pushFollow(FOLLOW_ws_in_sass_else8164);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(308);}

                            dbg.location(1259,115);
                            pushFollow(FOLLOW_sass_else_in_sass_else8167);
                            sass_else();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(309);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1260, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_else");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_else"


    // $ANTLR start "sass_control_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1262:1: sass_control_expression : cp_expression ;
    public final void sass_control_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1262, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:5: ( cp_expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:5: cp_expression
            {
            dbg.location(1264,5);
            pushFollow(FOLLOW_cp_expression_in_sass_control_expression8190);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1265, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control_expression"


    // $ANTLR start "sass_for"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1267:1: sass_for : SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block ;
    public final void sass_for() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_for");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1267, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1268:5: ( SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:5: SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block
            {
            dbg.location(1269,5);
            match(input,SASS_FOR,FOLLOW_SASS_FOR_in_sass_for8215); if (state.failed) return ;
            dbg.location(1269,14);
            pushFollow(FOLLOW_ws_in_sass_for8217);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1269,17);
            pushFollow(FOLLOW_cp_variable_in_sass_for8219);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1269,29);
            pushFollow(FOLLOW_ws_in_sass_for8221);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1269,32);
            if ( !(evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"from\")");
            }
            dbg.location(1269,59);
            match(input,IDENT,FOLLOW_IDENT_in_sass_for8225); if (state.failed) return ;
            dbg.location(1269,74);
            pushFollow(FOLLOW_ws_in_sass_for8229);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1269,77);
            pushFollow(FOLLOW_cp_math_expression_in_sass_for8231);
            cp_math_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1269,96);
            pushFollow(FOLLOW_ws_in_sass_for8233);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1269,99);
            if ( !(evalPredicate(tokenNameEquals("to")|tokenNameEquals("through"),"tokenNameEquals(\"to\")|tokenNameEquals(\"through\")")) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"to\")|tokenNameEquals(\"through\")");
            }
            dbg.location(1269,151);
            match(input,IDENT,FOLLOW_IDENT_in_sass_for8237); if (state.failed) return ;
            dbg.location(1269,173);
            pushFollow(FOLLOW_ws_in_sass_for8241);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1269,176);
            pushFollow(FOLLOW_cp_math_expression_in_sass_for8243);
            cp_math_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1269,195);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:195: ( ws )?
            int alt311=2;
            try { dbg.enterSubRule(311);
            try { dbg.enterDecision(311, decisionCanBacktrack[311]);

            int LA311_0 = input.LA(1);

            if ( ((LA311_0>=WS && LA311_0<=COMMENT)) ) {
                alt311=1;
            }
            } finally {dbg.exitDecision(311);}

            switch (alt311) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:195: ws
                    {
                    dbg.location(1269,195);
                    pushFollow(FOLLOW_ws_in_sass_for8245);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(311);}

            dbg.location(1269,199);
            pushFollow(FOLLOW_sass_control_block_in_sass_for8248);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1270, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_for");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_for"


    // $ANTLR start "sass_each"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1272:1: sass_each : SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block ;
    public final void sass_each() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_each");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1272, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1273:5: ( SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1274:5: SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block
            {
            dbg.location(1274,5);
            match(input,SASS_EACH,FOLLOW_SASS_EACH_in_sass_each8269); if (state.failed) return ;
            dbg.location(1274,15);
            pushFollow(FOLLOW_ws_in_sass_each8271);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1274,18);
            pushFollow(FOLLOW_cp_variable_in_sass_each8273);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1274,30);
            pushFollow(FOLLOW_ws_in_sass_each8275);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1274,33);
            if ( !(evalPredicate(tokenNameEquals("in"),"tokenNameEquals(\"in\")")) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "sass_each", "tokenNameEquals(\"in\")");
            }
            dbg.location(1274,58);
            match(input,IDENT,FOLLOW_IDENT_in_sass_each8279); if (state.failed) return ;
            dbg.location(1274,71);
            pushFollow(FOLLOW_ws_in_sass_each8283);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1274,74);
            pushFollow(FOLLOW_cp_expression_list_in_sass_each8285);
            cp_expression_list();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1274,93);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1274:93: ( ws )?
            int alt312=2;
            try { dbg.enterSubRule(312);
            try { dbg.enterDecision(312, decisionCanBacktrack[312]);

            int LA312_0 = input.LA(1);

            if ( ((LA312_0>=WS && LA312_0<=COMMENT)) ) {
                alt312=1;
            }
            } finally {dbg.exitDecision(312);}

            switch (alt312) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1274:93: ws
                    {
                    dbg.location(1274,93);
                    pushFollow(FOLLOW_ws_in_sass_each8287);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(312);}

            dbg.location(1274,97);
            pushFollow(FOLLOW_sass_control_block_in_sass_each8290);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1275, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_each");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_each"


    // $ANTLR start "sass_while"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1277:1: sass_while : SASS_WHILE ws sass_control_expression ( ws )? sass_control_block ;
    public final void sass_while() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_while");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1277, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1278:5: ( SASS_WHILE ws sass_control_expression ( ws )? sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1279:5: SASS_WHILE ws sass_control_expression ( ws )? sass_control_block
            {
            dbg.location(1279,5);
            match(input,SASS_WHILE,FOLLOW_SASS_WHILE_in_sass_while8315); if (state.failed) return ;
            dbg.location(1279,16);
            pushFollow(FOLLOW_ws_in_sass_while8317);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1279,19);
            pushFollow(FOLLOW_sass_control_expression_in_sass_while8319);
            sass_control_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1279,43);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1279:43: ( ws )?
            int alt313=2;
            try { dbg.enterSubRule(313);
            try { dbg.enterDecision(313, decisionCanBacktrack[313]);

            int LA313_0 = input.LA(1);

            if ( ((LA313_0>=WS && LA313_0<=COMMENT)) ) {
                alt313=1;
            }
            } finally {dbg.exitDecision(313);}

            switch (alt313) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1279:43: ws
                    {
                    dbg.location(1279,43);
                    pushFollow(FOLLOW_ws_in_sass_while8321);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(313);}

            dbg.location(1279,47);
            pushFollow(FOLLOW_sass_control_block_in_sass_while8324);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1280, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_while");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_while"


    // $ANTLR start "sass_control_block"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1282:1: sass_control_block : LBRACE ( ws )? ( declarations )? RBRACE ;
    public final void sass_control_block() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control_block");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1282, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1283:5: ( LBRACE ( ws )? ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1284:5: LBRACE ( ws )? ( declarations )? RBRACE
            {
            dbg.location(1284,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_control_block8345); if (state.failed) return ;
            dbg.location(1284,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1284:12: ( ws )?
            int alt314=2;
            try { dbg.enterSubRule(314);
            try { dbg.enterDecision(314, decisionCanBacktrack[314]);

            int LA314_0 = input.LA(1);

            if ( ((LA314_0>=WS && LA314_0<=COMMENT)) ) {
                alt314=1;
            }
            } finally {dbg.exitDecision(314);}

            switch (alt314) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1284:12: ws
                    {
                    dbg.location(1284,12);
                    pushFollow(FOLLOW_ws_in_sass_control_block8347);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(314);}

            dbg.location(1284,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1284:16: ( declarations )?
            int alt315=2;
            try { dbg.enterSubRule(315);
            try { dbg.enterDecision(315, decisionCanBacktrack[315]);

            int LA315_0 = input.LA(1);

            if ( ((LA315_0>=NAMESPACE_SYM && LA315_0<=IDENT)||(LA315_0>=CHARSET_SYM && LA315_0<=MEDIA_SYM)||LA315_0==GEN||(LA315_0>=COLON && LA315_0<=MOZ_DOCUMENT_SYM)||LA315_0==WEBKIT_KEYFRAMES_SYM||(LA315_0>=PAGE_SYM && LA315_0<=RIGHTBOTTOM_SYM)||(LA315_0>=MINUS && LA315_0<=PLUS)||(LA315_0>=GREATER && LA315_0<=PIPE)||LA315_0==LESS_AND||(LA315_0>=RBRACKET && LA315_0<=SASS_VAR)||(LA315_0>=SASS_CONTENT && LA315_0<=SASS_WHILE)||LA315_0==AT_SIGN) ) {
                alt315=1;
            }
            } finally {dbg.exitDecision(315);}

            switch (alt315) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1284:16: declarations
                    {
                    dbg.location(1284,16);
                    pushFollow(FOLLOW_declarations_in_sass_control_block8350);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(315);}

            dbg.location(1284,30);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_control_block8353); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1285, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control_block");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control_block"


    // $ANTLR start "sass_function_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1287:1: sass_function_declaration : SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE ;
    public final void sass_function_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1287, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1288:5: ( SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:5: SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE
            {
            dbg.location(1293,5);
            match(input,SASS_FUNCTION,FOLLOW_SASS_FUNCTION_in_sass_function_declaration8399); if (state.failed) return ;
            dbg.location(1293,19);
            pushFollow(FOLLOW_ws_in_sass_function_declaration8401);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1293,22);
            pushFollow(FOLLOW_sass_function_name_in_sass_function_declaration8403);
            sass_function_name();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1293,41);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:41: ( ws )?
            int alt316=2;
            try { dbg.enterSubRule(316);
            try { dbg.enterDecision(316, decisionCanBacktrack[316]);

            int LA316_0 = input.LA(1);

            if ( ((LA316_0>=WS && LA316_0<=COMMENT)) ) {
                alt316=1;
            }
            } finally {dbg.exitDecision(316);}

            switch (alt316) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:41: ws
                    {
                    dbg.location(1293,41);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration8405);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(316);}

            dbg.location(1293,45);
            match(input,LPAREN,FOLLOW_LPAREN_in_sass_function_declaration8408); if (state.failed) return ;
            dbg.location(1293,52);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:52: ( cp_args_list )?
            int alt317=2;
            try { dbg.enterSubRule(317);
            try { dbg.enterDecision(317, decisionCanBacktrack[317]);

            int LA317_0 = input.LA(1);

            if ( (LA317_0==NAMESPACE_SYM||(LA317_0>=CHARSET_SYM && LA317_0<=IMPORT_SYM)||LA317_0==MEDIA_SYM||(LA317_0>=AT_IDENT && LA317_0<=MOZ_DOCUMENT_SYM)||LA317_0==WEBKIT_KEYFRAMES_SYM||(LA317_0>=PAGE_SYM && LA317_0<=RIGHTBOTTOM_SYM)||LA317_0==SASS_VAR||(LA317_0>=SASS_CONTENT && LA317_0<=SASS_WHILE)||(LA317_0>=CP_DOTS && LA317_0<=LESS_REST)) ) {
                alt317=1;
            }
            } finally {dbg.exitDecision(317);}

            switch (alt317) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:52: cp_args_list
                    {
                    dbg.location(1293,52);
                    pushFollow(FOLLOW_cp_args_list_in_sass_function_declaration8410);
                    cp_args_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(317);}

            dbg.location(1293,66);
            match(input,RPAREN,FOLLOW_RPAREN_in_sass_function_declaration8413); if (state.failed) return ;
            dbg.location(1293,73);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:73: ( ws )?
            int alt318=2;
            try { dbg.enterSubRule(318);
            try { dbg.enterDecision(318, decisionCanBacktrack[318]);

            int LA318_0 = input.LA(1);

            if ( ((LA318_0>=WS && LA318_0<=COMMENT)) ) {
                alt318=1;
            }
            } finally {dbg.exitDecision(318);}

            switch (alt318) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:73: ws
                    {
                    dbg.location(1293,73);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration8415);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(318);}

            dbg.location(1293,77);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_function_declaration8418); if (state.failed) return ;
            dbg.location(1293,84);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:84: ( ws )?
            int alt319=2;
            try { dbg.enterSubRule(319);
            try { dbg.enterDecision(319, decisionCanBacktrack[319]);

            int LA319_0 = input.LA(1);

            if ( ((LA319_0>=WS && LA319_0<=COMMENT)) ) {
                alt319=1;
            }
            } finally {dbg.exitDecision(319);}

            switch (alt319) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:84: ws
                    {
                    dbg.location(1293,84);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration8420);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(319);}

            dbg.location(1293,88);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:88: ( declarations )?
            int alt320=2;
            try { dbg.enterSubRule(320);
            try { dbg.enterDecision(320, decisionCanBacktrack[320]);

            int LA320_0 = input.LA(1);

            if ( ((LA320_0>=NAMESPACE_SYM && LA320_0<=IDENT)||(LA320_0>=CHARSET_SYM && LA320_0<=MEDIA_SYM)||LA320_0==GEN||(LA320_0>=COLON && LA320_0<=MOZ_DOCUMENT_SYM)||LA320_0==WEBKIT_KEYFRAMES_SYM||(LA320_0>=PAGE_SYM && LA320_0<=RIGHTBOTTOM_SYM)||(LA320_0>=MINUS && LA320_0<=PLUS)||(LA320_0>=GREATER && LA320_0<=PIPE)||LA320_0==LESS_AND||(LA320_0>=RBRACKET && LA320_0<=SASS_VAR)||(LA320_0>=SASS_CONTENT && LA320_0<=SASS_WHILE)||LA320_0==AT_SIGN) ) {
                alt320=1;
            }
            } finally {dbg.exitDecision(320);}

            switch (alt320) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:88: declarations
                    {
                    dbg.location(1293,88);
                    pushFollow(FOLLOW_declarations_in_sass_function_declaration8423);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(320);}

            dbg.location(1293,102);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_function_declaration8426); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1294, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_declaration"


    // $ANTLR start "sass_function_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:1: sass_function_name : IDENT ;
    public final void sass_function_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1296, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1298:5: IDENT
            {
            dbg.location(1298,5);
            match(input,IDENT,FOLLOW_IDENT_in_sass_function_name8451); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1299, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_name"


    // $ANTLR start "sass_function_return"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:1: sass_function_return : SASS_RETURN ws cp_expression ;
    public final void sass_function_return() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_return");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1301, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1302:5: ( SASS_RETURN ws cp_expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1303:5: SASS_RETURN ws cp_expression
            {
            dbg.location(1303,5);
            match(input,SASS_RETURN,FOLLOW_SASS_RETURN_in_sass_function_return8472); if (state.failed) return ;
            dbg.location(1303,17);
            pushFollow(FOLLOW_ws_in_sass_function_return8474);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1303,20);
            pushFollow(FOLLOW_cp_expression_in_sass_function_return8476);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1304, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_return");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_return"


    // $ANTLR start "sass_content"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1306:1: sass_content : SASS_CONTENT ;
    public final void sass_content() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_content");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1306, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1307:5: ( SASS_CONTENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1308:5: SASS_CONTENT
            {
            dbg.location(1308,5);
            match(input,SASS_CONTENT,FOLLOW_SASS_CONTENT_in_sass_content8501); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1309, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_content");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_content"

    // $ANTLR start synpred1_Css3
    public final void synpred1_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:44: ( ( ws )? mediaQueryList )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:45: ( ws )? mediaQueryList
        {
        dbg.location(363,45);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:45: ( ws )?
        int alt321=2;
        try { dbg.enterSubRule(321);
        try { dbg.enterDecision(321, decisionCanBacktrack[321]);

        int LA321_0 = input.LA(1);

        if ( ((LA321_0>=WS && LA321_0<=COMMENT)) ) {
            alt321=1;
        }
        } finally {dbg.exitDecision(321);}

        switch (alt321) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:45: ws
                {
                dbg.location(363,45);
                pushFollow(FOLLOW_ws_in_synpred1_Css3370);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(321);}

        dbg.location(363,49);
        pushFollow(FOLLOW_mediaQueryList_in_synpred1_Css3373);
        mediaQueryList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_Css3

    // $ANTLR start synpred2_Css3
    public final void synpred2_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:98: ( ( ws )? mediaQueryList )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:99: ( ws )? mediaQueryList
        {
        dbg.location(366,99);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:99: ( ws )?
        int alt322=2;
        try { dbg.enterSubRule(322);
        try { dbg.enterDecision(322, decisionCanBacktrack[322]);

        int LA322_0 = input.LA(1);

        if ( ((LA322_0>=WS && LA322_0<=COMMENT)) ) {
            alt322=1;
        }
        } finally {dbg.exitDecision(322);}

        switch (alt322) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:99: ws
                {
                dbg.location(366,99);
                pushFollow(FOLLOW_ws_in_synpred2_Css3434);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(322);}

        dbg.location(366,103);
        pushFollow(FOLLOW_mediaQueryList_in_synpred2_Css3437);
        mediaQueryList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_Css3

    // $ANTLR start synpred3_Css3
    public final void synpred3_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:27: ( ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:28: ( ws )? SEMI
        {
        dbg.location(381,28);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:28: ( ws )?
        int alt323=2;
        try { dbg.enterSubRule(323);
        try { dbg.enterDecision(323, decisionCanBacktrack[323]);

        int LA323_0 = input.LA(1);

        if ( ((LA323_0>=WS && LA323_0<=COMMENT)) ) {
            alt323=1;
        }
        } finally {dbg.exitDecision(323);}

        switch (alt323) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:28: ws
                {
                dbg.location(381,28);
                pushFollow(FOLLOW_ws_in_synpred3_Css3561);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(323);}

        dbg.location(381,32);
        match(input,SEMI,FOLLOW_SEMI_in_synpred3_Css3564); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_Css3

    // $ANTLR start synpred4_Css3
    public final void synpred4_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:5: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )
        int alt327=2;
        try { dbg.enterDecision(327, decisionCanBacktrack[327]);

        int LA327_0 = input.LA(1);

        if ( (LA327_0==SASS_MIXIN) ) {
            alt327=1;
        }
        else if ( (LA327_0==DOT) ) {
            alt327=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 327, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(327);}

        switch (alt327) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:6: SASS_MIXIN
                {
                dbg.location(389,6);
                match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred4_Css3635); if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:19: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE )
                {
                dbg.location(389,19);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:19: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:20: DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE
                {
                dbg.location(389,20);
                match(input,DOT,FOLLOW_DOT_in_synpred4_Css3640); if (state.failed) return ;
                dbg.location(389,24);
                match(input,IDENT,FOLLOW_IDENT_in_synpred4_Css3642); if (state.failed) return ;
                dbg.location(389,30);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:30: ( ws )?
                int alt324=2;
                try { dbg.enterSubRule(324);
                try { dbg.enterDecision(324, decisionCanBacktrack[324]);

                int LA324_0 = input.LA(1);

                if ( ((LA324_0>=WS && LA324_0<=COMMENT)) ) {
                    alt324=1;
                }
                } finally {dbg.exitDecision(324);}

                switch (alt324) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:30: ws
                        {
                        dbg.location(389,30);
                        pushFollow(FOLLOW_ws_in_synpred4_Css3644);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(324);}

                dbg.location(389,34);
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred4_Css3647); if (state.failed) return ;
                dbg.location(389,41);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:41: (~ RPAREN )*
                try { dbg.enterSubRule(325);

                loop325:
                do {
                    int alt325=2;
                    try { dbg.enterDecision(325, decisionCanBacktrack[325]);

                    int LA325_0 = input.LA(1);

                    if ( ((LA325_0>=NAMESPACE_SYM && LA325_0<=LPAREN)||(LA325_0>=COLON && LA325_0<=LINE_COMMENT)) ) {
                        alt325=1;
                    }


                    } finally {dbg.exitDecision(325);}

                    switch (alt325) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:42: ~ RPAREN
                	    {
                	    dbg.location(389,42);
                	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=LPAREN)||(input.LA(1)>=COLON && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop325;
                    }
                } while (true);
                } finally {dbg.exitSubRule(325);}

                dbg.location(389,52);
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred4_Css3655); if (state.failed) return ;
                dbg.location(389,59);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:59: (~ ( LBRACE | SEMI ) )*
                try { dbg.enterSubRule(326);

                loop326:
                do {
                    int alt326=2;
                    try { dbg.enterDecision(326, decisionCanBacktrack[326]);

                    int LA326_0 = input.LA(1);

                    if ( (LA326_0==NAMESPACE_SYM||(LA326_0>=IDENT && LA326_0<=MEDIA_SYM)||(LA326_0>=RBRACE && LA326_0<=LINE_COMMENT)) ) {
                        alt326=1;
                    }


                    } finally {dbg.exitDecision(326);}

                    switch (alt326) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:59: ~ ( LBRACE | SEMI )
                	    {
                	    dbg.location(389,59);
                	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=RBRACE && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop326;
                    }
                } while (true);
                } finally {dbg.exitSubRule(326);}

                dbg.location(389,75);
                match(input,LBRACE,FOLLOW_LBRACE_in_synpred4_Css3665); if (state.failed) return ;

                }


                }
                break;

        }}
    // $ANTLR end synpred4_Css3

    // $ANTLR start synpred5_Css3
    public final void synpred5_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:390:7: ( cp_mixin_call )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:390:8: cp_mixin_call
        {
        dbg.location(390,8);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred5_Css3679);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_Css3

    // $ANTLR start synpred6_Css3
    public final void synpred6_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:6: ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:8: (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI
        {
        dbg.location(391,8);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:8: (~ ( LBRACE | SEMI | RBRACE | COLON ) )+
        int cnt328=0;
        try { dbg.enterSubRule(328);

        loop328:
        do {
            int alt328=2;
            try { dbg.enterDecision(328, decisionCanBacktrack[328]);

            int LA328_0 = input.LA(1);

            if ( (LA328_0==NAMESPACE_SYM||(LA328_0>=IDENT && LA328_0<=MEDIA_SYM)||(LA328_0>=AND && LA328_0<=RPAREN)||(LA328_0>=AT_IDENT && LA328_0<=LINE_COMMENT)) ) {
                alt328=1;
            }


            } finally {dbg.exitDecision(328);}

            switch (alt328) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:8: ~ ( LBRACE | SEMI | RBRACE | COLON )
        	    {
        	    dbg.location(391,8);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=RPAREN)||(input.LA(1)>=AT_IDENT && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt328 >= 1 ) break loop328;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(328, input);
                    dbg.recognitionException(eee);

                    throw eee;
            }
            cnt328++;
        } while (true);
        } finally {dbg.exitSubRule(328);}

        dbg.location(391,37);
        match(input,COLON,FOLLOW_COLON_in_synpred6_Css3704); if (state.failed) return ;
        dbg.location(391,43);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:43: (~ ( SEMI | LBRACE | RBRACE ) )+
        int cnt329=0;
        try { dbg.enterSubRule(329);

        loop329:
        do {
            int alt329=2;
            try { dbg.enterDecision(329, decisionCanBacktrack[329]);

            int LA329_0 = input.LA(1);

            if ( (LA329_0==NAMESPACE_SYM||(LA329_0>=IDENT && LA329_0<=MEDIA_SYM)||(LA329_0>=AND && LA329_0<=LINE_COMMENT)) ) {
                alt329=1;
            }


            } finally {dbg.exitDecision(329);}

            switch (alt329) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:43: ~ ( SEMI | LBRACE | RBRACE )
        	    {
        	    dbg.location(391,43);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt329 >= 1 ) break loop329;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(329, input);
                    dbg.recognitionException(eee);

                    throw eee;
            }
            cnt329++;
        } while (true);
        } finally {dbg.exitSubRule(329);}

        dbg.location(391,66);
        match(input,SEMI,FOLLOW_SEMI_in_synpred6_Css3716); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_Css3

    // $ANTLR start synpred7_Css3
    public final void synpred7_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:6: ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:8: sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI
        {
        dbg.location(392,8);
        pushFollow(FOLLOW_sass_declaration_interpolation_expression_in_synpred7_Css3729);
        sass_declaration_interpolation_expression();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(392,50);
        match(input,COLON,FOLLOW_COLON_in_synpred7_Css3731); if (state.failed) return ;
        dbg.location(392,56);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:56: (~ ( SEMI | LBRACE | RBRACE ) )+
        int cnt330=0;
        try { dbg.enterSubRule(330);

        loop330:
        do {
            int alt330=2;
            try { dbg.enterDecision(330, decisionCanBacktrack[330]);

            int LA330_0 = input.LA(1);

            if ( (LA330_0==NAMESPACE_SYM||(LA330_0>=IDENT && LA330_0<=MEDIA_SYM)||(LA330_0>=AND && LA330_0<=LINE_COMMENT)) ) {
                alt330=1;
            }


            } finally {dbg.exitDecision(330);}

            switch (alt330) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:56: ~ ( SEMI | LBRACE | RBRACE )
        	    {
        	    dbg.location(392,56);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt330 >= 1 ) break loop330;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(330, input);
                    dbg.recognitionException(eee);

                    throw eee;
            }
            cnt330++;
        } while (true);
        } finally {dbg.exitSubRule(330);}

        dbg.location(392,79);
        match(input,SEMI,FOLLOW_SEMI_in_synpred7_Css3743); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_Css3

    // $ANTLR start synpred8_Css3
    public final void synpred8_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:17: ( ( ws )? COMMA )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:18: ( ws )? COMMA
        {
        dbg.location(406,18);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:18: ( ws )?
        int alt331=2;
        try { dbg.enterSubRule(331);
        try { dbg.enterDecision(331, decisionCanBacktrack[331]);

        int LA331_0 = input.LA(1);

        if ( ((LA331_0>=WS && LA331_0<=COMMENT)) ) {
            alt331=1;
        }
        } finally {dbg.exitDecision(331);}

        switch (alt331) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:18: ws
                {
                dbg.location(406,18);
                pushFollow(FOLLOW_ws_in_synpred8_Css3851);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(331);}

        dbg.location(406,22);
        match(input,COMMA,FOLLOW_COMMA_in_synpred8_Css3854); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_Css3

    // $ANTLR start synpred9_Css3
    public final void synpred9_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:22: ( ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:23: ( ws )? SEMI
        {
        dbg.location(446,23);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:23: ( ws )?
        int alt332=2;
        try { dbg.enterSubRule(332);
        try { dbg.enterDecision(332, decisionCanBacktrack[332]);

        int LA332_0 = input.LA(1);

        if ( ((LA332_0>=WS && LA332_0<=COMMENT)) ) {
            alt332=1;
        }
        } finally {dbg.exitDecision(332);}

        switch (alt332) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:23: ws
                {
                dbg.location(446,23);
                pushFollow(FOLLOW_ws_in_synpred9_Css31168);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(332);}

        dbg.location(446,27);
        match(input,SEMI,FOLLOW_SEMI_in_synpred9_Css31171); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_Css3

    // $ANTLR start synpred10_Css3
    public final void synpred10_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:9: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )
        int alt336=2;
        try { dbg.enterDecision(336, decisionCanBacktrack[336]);

        int LA336_0 = input.LA(1);

        if ( (LA336_0==SASS_MIXIN) ) {
            alt336=1;
        }
        else if ( (LA336_0==DOT) ) {
            alt336=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 336, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(336);}

        switch (alt336) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:10: SASS_MIXIN
                {
                dbg.location(454,10);
                match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred10_Css31248); if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:23: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE )
                {
                dbg.location(454,23);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:23: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:24: DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE
                {
                dbg.location(454,24);
                match(input,DOT,FOLLOW_DOT_in_synpred10_Css31253); if (state.failed) return ;
                dbg.location(454,28);
                match(input,IDENT,FOLLOW_IDENT_in_synpred10_Css31255); if (state.failed) return ;
                dbg.location(454,34);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:34: ( ws )?
                int alt333=2;
                try { dbg.enterSubRule(333);
                try { dbg.enterDecision(333, decisionCanBacktrack[333]);

                int LA333_0 = input.LA(1);

                if ( ((LA333_0>=WS && LA333_0<=COMMENT)) ) {
                    alt333=1;
                }
                } finally {dbg.exitDecision(333);}

                switch (alt333) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:34: ws
                        {
                        dbg.location(454,34);
                        pushFollow(FOLLOW_ws_in_synpred10_Css31257);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(333);}

                dbg.location(454,38);
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred10_Css31260); if (state.failed) return ;
                dbg.location(454,45);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:45: (~ RPAREN )*
                try { dbg.enterSubRule(334);

                loop334:
                do {
                    int alt334=2;
                    try { dbg.enterDecision(334, decisionCanBacktrack[334]);

                    int LA334_0 = input.LA(1);

                    if ( ((LA334_0>=NAMESPACE_SYM && LA334_0<=LPAREN)||(LA334_0>=COLON && LA334_0<=LINE_COMMENT)) ) {
                        alt334=1;
                    }


                    } finally {dbg.exitDecision(334);}

                    switch (alt334) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:46: ~ RPAREN
                	    {
                	    dbg.location(454,46);
                	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=LPAREN)||(input.LA(1)>=COLON && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop334;
                    }
                } while (true);
                } finally {dbg.exitSubRule(334);}

                dbg.location(454,56);
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred10_Css31268); if (state.failed) return ;
                dbg.location(454,63);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:63: (~ ( LBRACE | RBRACE | SEMI ) )*
                try { dbg.enterSubRule(335);

                loop335:
                do {
                    int alt335=2;
                    try { dbg.enterDecision(335, decisionCanBacktrack[335]);

                    int LA335_0 = input.LA(1);

                    if ( (LA335_0==NAMESPACE_SYM||(LA335_0>=IDENT && LA335_0<=MEDIA_SYM)||(LA335_0>=AND && LA335_0<=LINE_COMMENT)) ) {
                        alt335=1;
                    }


                    } finally {dbg.exitDecision(335);}

                    switch (alt335) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:63: ~ ( LBRACE | RBRACE | SEMI )
                	    {
                	    dbg.location(454,63);
                	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop335;
                    }
                } while (true);
                } finally {dbg.exitSubRule(335);}

                dbg.location(454,86);
                match(input,LBRACE,FOLLOW_LBRACE_in_synpred10_Css31280); if (state.failed) return ;

                }


                }
                break;

        }}
    // $ANTLR end synpred10_Css3

    // $ANTLR start synpred13_Css3
    public final void synpred13_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:595:5: ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:595:6: (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE
        {
        dbg.location(595,6);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:595:6: (~ ( HASH_SYMBOL | COLON ) )*
        try { dbg.enterSubRule(338);

        loop338:
        do {
            int alt338=2;
            try { dbg.enterDecision(338, decisionCanBacktrack[338]);

            int LA338_0 = input.LA(1);

            if ( ((LA338_0>=NAMESPACE_SYM && LA338_0<=RPAREN)||(LA338_0>=AT_IDENT && LA338_0<=TILDE)||(LA338_0>=HASH && LA338_0<=LINE_COMMENT)) ) {
                alt338=1;
            }


            } finally {dbg.exitDecision(338);}

            switch (alt338) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:595:6: ~ ( HASH_SYMBOL | COLON )
        	    {
        	    dbg.location(595,6);
        	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=RPAREN)||(input.LA(1)>=AT_IDENT && input.LA(1)<=TILDE)||(input.LA(1)>=HASH && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop338;
            }
        } while (true);
        } finally {dbg.exitSubRule(338);}

        dbg.location(595,28);
        match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_synpred13_Css32426); if (state.failed) return ;
        dbg.location(595,40);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred13_Css32428); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_Css3

    // $ANTLR start synpred14_Css3
    public final void synpred14_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:25: ( ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:26: ( ws )? SEMI
        {
        dbg.location(621,26);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:26: ( ws )?
        int alt339=2;
        try { dbg.enterSubRule(339);
        try { dbg.enterDecision(339, decisionCanBacktrack[339]);

        int LA339_0 = input.LA(1);

        if ( ((LA339_0>=WS && LA339_0<=COMMENT)) ) {
            alt339=1;
        }
        } finally {dbg.exitDecision(339);}

        switch (alt339) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:26: ws
                {
                dbg.location(621,26);
                pushFollow(FOLLOW_ws_in_synpred14_Css32582);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(339);}

        dbg.location(621,30);
        match(input,SEMI,FOLLOW_SEMI_in_synpred14_Css32585); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_Css3

    // $ANTLR start synpred15_Css3
    public final void synpred15_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:5: ( cp_variable_declaration )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:6: cp_variable_declaration
        {
        dbg.location(629,6);
        pushFollow(FOLLOW_cp_variable_declaration_in_synpred15_Css32656);
        cp_variable_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_Css3

    // $ANTLR start synpred16_Css3
    public final void synpred16_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:630:7: ( sass_nested_properties )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:630:8: sass_nested_properties
        {
        dbg.location(630,8);
        pushFollow(FOLLOW_sass_nested_properties_in_synpred16_Css32669);
        sass_nested_properties();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_Css3

    // $ANTLR start synpred17_Css3
    public final void synpred17_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:631:7: ( propertyDeclaration )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:631:8: propertyDeclaration
        {
        dbg.location(631,8);
        pushFollow(FOLLOW_propertyDeclaration_in_synpred17_Css32682);
        propertyDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_Css3

    // $ANTLR start synpred18_Css3
    public final void synpred18_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:633:7: ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:633:8: property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI )
        {
        dbg.location(633,8);
        pushFollow(FOLLOW_property_in_synpred18_Css32700);
        property();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(633,17);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:633:17: ( ws )?
        int alt340=2;
        try { dbg.enterSubRule(340);
        try { dbg.enterDecision(340, decisionCanBacktrack[340]);

        int LA340_0 = input.LA(1);

        if ( ((LA340_0>=WS && LA340_0<=COMMENT)) ) {
            alt340=1;
        }
        } finally {dbg.exitDecision(340);}

        switch (alt340) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:633:17: ws
                {
                dbg.location(633,17);
                pushFollow(FOLLOW_ws_in_synpred18_Css32702);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(340);}

        dbg.location(633,21);
        match(input,COLON,FOLLOW_COLON_in_synpred18_Css32705); if (state.failed) return ;
        dbg.location(633,27);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:633:27: (~ ( LBRACE | SEMI | RBRACE ) )*
        try { dbg.enterSubRule(341);

        loop341:
        do {
            int alt341=2;
            try { dbg.enterDecision(341, decisionCanBacktrack[341]);

            int LA341_0 = input.LA(1);

            if ( (LA341_0==NAMESPACE_SYM||(LA341_0>=IDENT && LA341_0<=MEDIA_SYM)||(LA341_0>=AND && LA341_0<=LINE_COMMENT)) ) {
                alt341=1;
            }


            } finally {dbg.exitDecision(341);}

            switch (alt341) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:633:27: ~ ( LBRACE | SEMI | RBRACE )
        	    {
        	    dbg.location(633,27);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop341;
            }
        } while (true);
        } finally {dbg.exitSubRule(341);}

        dbg.location(633,50);
        if ( input.LA(1)==SEMI||input.LA(1)==RBRACE ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred18_Css3

    // $ANTLR start synpred19_Css3
    public final void synpred19_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:7: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )
        int alt345=2;
        try { dbg.enterDecision(345, decisionCanBacktrack[345]);

        int LA345_0 = input.LA(1);

        if ( (LA345_0==SASS_MIXIN) ) {
            alt345=1;
        }
        else if ( (LA345_0==DOT) ) {
            alt345=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 345, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(345);}

        switch (alt345) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:8: SASS_MIXIN
                {
                dbg.location(634,8);
                match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred19_Css32735); if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:21: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE )
                {
                dbg.location(634,21);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:21: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:22: DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE
                {
                dbg.location(634,22);
                match(input,DOT,FOLLOW_DOT_in_synpred19_Css32740); if (state.failed) return ;
                dbg.location(634,26);
                match(input,IDENT,FOLLOW_IDENT_in_synpred19_Css32742); if (state.failed) return ;
                dbg.location(634,32);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:32: ( ws )?
                int alt342=2;
                try { dbg.enterSubRule(342);
                try { dbg.enterDecision(342, decisionCanBacktrack[342]);

                int LA342_0 = input.LA(1);

                if ( ((LA342_0>=WS && LA342_0<=COMMENT)) ) {
                    alt342=1;
                }
                } finally {dbg.exitDecision(342);}

                switch (alt342) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:32: ws
                        {
                        dbg.location(634,32);
                        pushFollow(FOLLOW_ws_in_synpred19_Css32744);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(342);}

                dbg.location(634,36);
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred19_Css32747); if (state.failed) return ;
                dbg.location(634,43);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:43: (~ RPAREN )*
                try { dbg.enterSubRule(343);

                loop343:
                do {
                    int alt343=2;
                    try { dbg.enterDecision(343, decisionCanBacktrack[343]);

                    int LA343_0 = input.LA(1);

                    if ( ((LA343_0>=NAMESPACE_SYM && LA343_0<=LPAREN)||(LA343_0>=COLON && LA343_0<=LINE_COMMENT)) ) {
                        alt343=1;
                    }


                    } finally {dbg.exitDecision(343);}

                    switch (alt343) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:44: ~ RPAREN
                	    {
                	    dbg.location(634,44);
                	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=LPAREN)||(input.LA(1)>=COLON && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop343;
                    }
                } while (true);
                } finally {dbg.exitSubRule(343);}

                dbg.location(634,54);
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred19_Css32755); if (state.failed) return ;
                dbg.location(634,61);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:61: (~ ( LBRACE | SEMI | RBRACE ) )*
                try { dbg.enterSubRule(344);

                loop344:
                do {
                    int alt344=2;
                    try { dbg.enterDecision(344, decisionCanBacktrack[344]);

                    int LA344_0 = input.LA(1);

                    if ( (LA344_0==NAMESPACE_SYM||(LA344_0>=IDENT && LA344_0<=MEDIA_SYM)||(LA344_0>=AND && LA344_0<=LINE_COMMENT)) ) {
                        alt344=1;
                    }


                    } finally {dbg.exitDecision(344);}

                    switch (alt344) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:61: ~ ( LBRACE | SEMI | RBRACE )
                	    {
                	    dbg.location(634,61);
                	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop344;
                    }
                } while (true);
                } finally {dbg.exitSubRule(344);}

                dbg.location(634,84);
                match(input,LBRACE,FOLLOW_LBRACE_in_synpred19_Css32767); if (state.failed) return ;

                }


                }
                break;

        }}
    // $ANTLR end synpred19_Css3

    // $ANTLR start synpred20_Css3
    public final void synpred20_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:7: ( cp_mixin_call )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:8: cp_mixin_call
        {
        dbg.location(635,8);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred20_Css32781);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_Css3

    // $ANTLR start synpred21_Css3
    public final void synpred21_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:7: ( selectorsGroup ( ws )? LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:8: selectorsGroup ( ws )? LBRACE
        {
        dbg.location(636,8);
        pushFollow(FOLLOW_selectorsGroup_in_synpred21_Css32801);
        selectorsGroup();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(636,23);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:23: ( ws )?
        int alt346=2;
        try { dbg.enterSubRule(346);
        try { dbg.enterDecision(346, decisionCanBacktrack[346]);

        int LA346_0 = input.LA(1);

        if ( ((LA346_0>=WS && LA346_0<=COMMENT)) ) {
            alt346=1;
        }
        } finally {dbg.exitDecision(346);}

        switch (alt346) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:23: ws
                {
                dbg.location(636,23);
                pushFollow(FOLLOW_ws_in_synpred21_Css32803);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(346);}

        dbg.location(636,27);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred21_Css32806); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_Css3

    // $ANTLR start synpred22_Css3
    public final void synpred22_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:9: ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:11: (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE
        {
        dbg.location(654,11);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:11: (~ ( HASH_SYMBOL | LBRACE ) )*
        try { dbg.enterSubRule(347);

        loop347:
        do {
            int alt347=2;
            try { dbg.enterDecision(347, decisionCanBacktrack[347]);

            int LA347_0 = input.LA(1);

            if ( ((LA347_0>=NAMESPACE_SYM && LA347_0<=MEDIA_SYM)||(LA347_0>=RBRACE && LA347_0<=TILDE)||(LA347_0>=HASH && LA347_0<=LINE_COMMENT)) ) {
                alt347=1;
            }


            } finally {dbg.exitDecision(347);}

            switch (alt347) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:11: ~ ( HASH_SYMBOL | LBRACE )
        	    {
        	    dbg.location(654,11);
        	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=RBRACE && input.LA(1)<=TILDE)||(input.LA(1)>=HASH && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop347;
            }
        } while (true);
        } finally {dbg.exitSubRule(347);}

        dbg.location(654,38);
        match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_synpred22_Css32957); if (state.failed) return ;
        dbg.location(654,50);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred22_Css32959); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_Css3

    // $ANTLR start synpred23_Css3
    public final void synpred23_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:18: ( ( ws )? esPred )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:19: ( ws )? esPred
        {
        dbg.location(670,19);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:19: ( ws )?
        int alt348=2;
        try { dbg.enterSubRule(348);
        try { dbg.enterDecision(348, decisionCanBacktrack[348]);

        int LA348_0 = input.LA(1);

        if ( ((LA348_0>=WS && LA348_0<=COMMENT)) ) {
            alt348=1;
        }
        } finally {dbg.exitDecision(348);}

        switch (alt348) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:19: ws
                {
                dbg.location(670,19);
                pushFollow(FOLLOW_ws_in_synpred23_Css33099);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(348);}

        dbg.location(670,23);
        pushFollow(FOLLOW_esPred_in_synpred23_Css33102);
        esPred();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_Css3

    // $ANTLR start synpred24_Css3
    public final void synpred24_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:21: ( ( ws )? esPred )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:22: ( ws )? esPred
        {
        dbg.location(672,22);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:22: ( ws )?
        int alt349=2;
        try { dbg.enterSubRule(349);
        try { dbg.enterDecision(349, decisionCanBacktrack[349]);

        int LA349_0 = input.LA(1);

        if ( ((LA349_0>=WS && LA349_0<=COMMENT)) ) {
            alt349=1;
        }
        } finally {dbg.exitDecision(349);}

        switch (alt349) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:22: ws
                {
                dbg.location(672,22);
                pushFollow(FOLLOW_ws_in_synpred24_Css33123);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(349);}

        dbg.location(672,26);
        pushFollow(FOLLOW_esPred_in_synpred24_Css33126);
        esPred();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_Css3

    // $ANTLR start synpred25_Css3
    public final void synpred25_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:686:7: ( ( IDENT | STAR )? PIPE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:686:8: ( IDENT | STAR )? PIPE
        {
        dbg.location(686,8);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:686:8: ( IDENT | STAR )?
        int alt350=2;
        try { dbg.enterSubRule(350);
        try { dbg.enterDecision(350, decisionCanBacktrack[350]);

        int LA350_0 = input.LA(1);

        if ( (LA350_0==IDENT||LA350_0==STAR) ) {
            alt350=1;
        }
        } finally {dbg.exitDecision(350);}

        switch (alt350) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
                {
                dbg.location(686,8);
                if ( input.LA(1)==IDENT||input.LA(1)==STAR ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    dbg.recognitionException(mse);
                    throw mse;
                }


                }
                break;

        }
        } finally {dbg.exitSubRule(350);}

        dbg.location(686,24);
        match(input,PIPE,FOLLOW_PIPE_in_synpred25_Css33242); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred25_Css3

    // $ANTLR start synpred26_Css3
    public final void synpred26_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:14: ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:15: ( ws | ( ( ws )? operator ( ws )? ) | ) term
        {
        dbg.location(861,15);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:15: ( ws | ( ( ws )? operator ( ws )? ) | )
        int alt353=3;
        try { dbg.enterSubRule(353);
        try { dbg.enterDecision(353, decisionCanBacktrack[353]);

        try {
            isCyclicDecision = true;
            alt353 = dfa353.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(353);}

        switch (alt353) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:17: ws
                {
                dbg.location(861,17);
                pushFollow(FOLLOW_ws_in_synpred26_Css34698);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:22: ( ( ws )? operator ( ws )? )
                {
                dbg.location(861,22);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:22: ( ( ws )? operator ( ws )? )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:23: ( ws )? operator ( ws )?
                {
                dbg.location(861,23);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:23: ( ws )?
                int alt351=2;
                try { dbg.enterSubRule(351);
                try { dbg.enterDecision(351, decisionCanBacktrack[351]);

                int LA351_0 = input.LA(1);

                if ( ((LA351_0>=WS && LA351_0<=COMMENT)) ) {
                    alt351=1;
                }
                } finally {dbg.exitDecision(351);}

                switch (alt351) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:23: ws
                        {
                        dbg.location(861,23);
                        pushFollow(FOLLOW_ws_in_synpred26_Css34703);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(351);}

                dbg.location(861,27);
                pushFollow(FOLLOW_operator_in_synpred26_Css34706);
                operator();

                state._fsp--;
                if (state.failed) return ;
                dbg.location(861,36);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:36: ( ws )?
                int alt352=2;
                try { dbg.enterSubRule(352);
                try { dbg.enterDecision(352, decisionCanBacktrack[352]);

                int LA352_0 = input.LA(1);

                if ( ((LA352_0>=WS && LA352_0<=COMMENT)) ) {
                    alt352=1;
                }
                } finally {dbg.exitDecision(352);}

                switch (alt352) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:36: ws
                        {
                        dbg.location(861,36);
                        pushFollow(FOLLOW_ws_in_synpred26_Css34708);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(352);}


                }


                }
                break;
            case 3 :
                dbg.enterAlt(3);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:56: 
                {
                }
                break;

        }
        } finally {dbg.exitSubRule(353);}

        dbg.location(861,58);
        pushFollow(FOLLOW_term_in_synpred26_Css34717);
        term();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_Css3

    // $ANTLR start synpred27_Css3
    public final void synpred27_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:868:9: ( functionName ( ws )? LPAREN )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:868:10: functionName ( ws )? LPAREN
        {
        dbg.location(868,10);
        pushFollow(FOLLOW_functionName_in_synpred27_Css34795);
        functionName();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(868,23);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:868:23: ( ws )?
        int alt354=2;
        try { dbg.enterSubRule(354);
        try { dbg.enterDecision(354, decisionCanBacktrack[354]);

        int LA354_0 = input.LA(1);

        if ( ((LA354_0>=WS && LA354_0<=COMMENT)) ) {
            alt354=1;
        }
        } finally {dbg.exitDecision(354);}

        switch (alt354) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:868:23: ws
                {
                dbg.location(868,23);
                pushFollow(FOLLOW_ws_in_synpred27_Css34797);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(354);}

        dbg.location(868,27);
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred27_Css34800); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_Css3

    // $ANTLR start synpred28_Css3
    public final void synpred28_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:929:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:929:10: fnAttributeName ( ws )? ( OPEQ | COLON )
        {
        dbg.location(929,10);
        pushFollow(FOLLOW_fnAttributeName_in_synpred28_Css35316);
        fnAttributeName();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(929,26);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:929:26: ( ws )?
        int alt355=2;
        try { dbg.enterSubRule(355);
        try { dbg.enterDecision(355, decisionCanBacktrack[355]);

        int LA355_0 = input.LA(1);

        if ( ((LA355_0>=WS && LA355_0<=COMMENT)) ) {
            alt355=1;
        }
        } finally {dbg.exitDecision(355);}

        switch (alt355) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:929:26: ws
                {
                dbg.location(929,26);
                pushFollow(FOLLOW_ws_in_synpred28_Css35318);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(355);}

        dbg.location(929,30);
        if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred28_Css3

    // $ANTLR start synpred29_Css3
    public final void synpred29_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term
        {
        dbg.location(942,21);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )
        int alt358=3;
        try { dbg.enterSubRule(358);
        try { dbg.enterDecision(358, decisionCanBacktrack[358]);

        try {
            isCyclicDecision = true;
            alt358 = dfa358.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(358);}

        switch (alt358) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:23: ws
                {
                dbg.location(942,23);
                pushFollow(FOLLOW_ws_in_synpred29_Css35454);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:28: ( ( ws )? SOLIDUS ( ws )? )
                {
                dbg.location(942,28);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:28: ( ( ws )? SOLIDUS ( ws )? )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:29: ( ws )? SOLIDUS ( ws )?
                {
                dbg.location(942,29);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:29: ( ws )?
                int alt356=2;
                try { dbg.enterSubRule(356);
                try { dbg.enterDecision(356, decisionCanBacktrack[356]);

                int LA356_0 = input.LA(1);

                if ( ((LA356_0>=WS && LA356_0<=COMMENT)) ) {
                    alt356=1;
                }
                } finally {dbg.exitDecision(356);}

                switch (alt356) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:29: ws
                        {
                        dbg.location(942,29);
                        pushFollow(FOLLOW_ws_in_synpred29_Css35459);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(356);}

                dbg.location(942,33);
                match(input,SOLIDUS,FOLLOW_SOLIDUS_in_synpred29_Css35462); if (state.failed) return ;
                dbg.location(942,41);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:41: ( ws )?
                int alt357=2;
                try { dbg.enterSubRule(357);
                try { dbg.enterDecision(357, decisionCanBacktrack[357]);

                int LA357_0 = input.LA(1);

                if ( ((LA357_0>=WS && LA357_0<=COMMENT)) ) {
                    alt357=1;
                }
                } finally {dbg.exitDecision(357);}

                switch (alt357) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:41: ws
                        {
                        dbg.location(942,41);
                        pushFollow(FOLLOW_ws_in_synpred29_Css35464);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(357);}


                }


                }
                break;
            case 3 :
                dbg.enterAlt(3);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:61: 
                {
                }
                break;

        }
        } finally {dbg.exitSubRule(358);}

        dbg.location(942,63);
        pushFollow(FOLLOW_term_in_synpred29_Css35473);
        term();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_Css3

    // $ANTLR start synpred30_Css3
    public final void synpred30_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:977:6: ( ( ws )? COMMA ( ws )? cp_expression )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:977:7: ( ws )? COMMA ( ws )? cp_expression
        {
        dbg.location(977,7);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:977:7: ( ws )?
        int alt359=2;
        try { dbg.enterSubRule(359);
        try { dbg.enterDecision(359, decisionCanBacktrack[359]);

        int LA359_0 = input.LA(1);

        if ( ((LA359_0>=WS && LA359_0<=COMMENT)) ) {
            alt359=1;
        }
        } finally {dbg.exitDecision(359);}

        switch (alt359) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:977:7: ws
                {
                dbg.location(977,7);
                pushFollow(FOLLOW_ws_in_synpred30_Css35912);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(359);}

        dbg.location(977,11);
        match(input,COMMA,FOLLOW_COMMA_in_synpred30_Css35915); if (state.failed) return ;
        dbg.location(977,17);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:977:17: ( ws )?
        int alt360=2;
        try { dbg.enterSubRule(360);
        try { dbg.enterDecision(360, decisionCanBacktrack[360]);

        int LA360_0 = input.LA(1);

        if ( ((LA360_0>=WS && LA360_0<=COMMENT)) ) {
            alt360=1;
        }
        } finally {dbg.exitDecision(360);}

        switch (alt360) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:977:17: ws
                {
                dbg.location(977,17);
                pushFollow(FOLLOW_ws_in_synpred30_Css35917);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(360);}

        dbg.location(977,21);
        pushFollow(FOLLOW_cp_expression_in_synpred30_Css35920);
        cp_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_Css3

    // $ANTLR start synpred31_Css3
    public final void synpred31_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:994:9: ( ( ws )? cp_expression_operator )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:994:10: ( ws )? cp_expression_operator
        {
        dbg.location(994,10);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:994:10: ( ws )?
        int alt361=2;
        try { dbg.enterSubRule(361);
        try { dbg.enterDecision(361, decisionCanBacktrack[361]);

        int LA361_0 = input.LA(1);

        if ( ((LA361_0>=WS && LA361_0<=COMMENT)) ) {
            alt361=1;
        }
        } finally {dbg.exitDecision(361);}

        switch (alt361) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:994:10: ws
                {
                dbg.location(994,10);
                pushFollow(FOLLOW_ws_in_synpred31_Css35987);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(361);}

        dbg.location(994,14);
        pushFollow(FOLLOW_cp_expression_operator_in_synpred31_Css35990);
        cp_expression_operator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_Css3

    // $ANTLR start synpred32_Css3
    public final void synpred32_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:995:11: ( ( ws )? cp_expression_atom )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:995:12: ( ws )? cp_expression_atom
        {
        dbg.location(995,12);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:995:12: ( ws )?
        int alt362=2;
        try { dbg.enterSubRule(362);
        try { dbg.enterDecision(362, decisionCanBacktrack[362]);

        int LA362_0 = input.LA(1);

        if ( ((LA362_0>=WS && LA362_0<=COMMENT)) ) {
            alt362=1;
        }
        } finally {dbg.exitDecision(362);}

        switch (alt362) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:995:12: ws
                {
                dbg.location(995,12);
                pushFollow(FOLLOW_ws_in_synpred32_Css36017);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(362);}

        dbg.location(995,16);
        pushFollow(FOLLOW_cp_expression_atom_in_synpred32_Css36020);
        cp_expression_atom();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_Css3

    // $ANTLR start synpred33_Css3
    public final void synpred33_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1008:13: ( cp_math_expression )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1008:14: cp_math_expression
        {
        dbg.location(1008,14);
        pushFollow(FOLLOW_cp_math_expression_in_synpred33_Css36148);
        cp_math_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_Css3

    // $ANTLR start synpred34_Css3
    public final void synpred34_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:14: ( ws )? ( PLUS | MINUS | STAR | SOLIDUS )
        {
        dbg.location(1035,14);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:14: ( ws )?
        int alt363=2;
        try { dbg.enterSubRule(363);
        try { dbg.enterDecision(363, decisionCanBacktrack[363]);

        int LA363_0 = input.LA(1);

        if ( ((LA363_0>=WS && LA363_0<=COMMENT)) ) {
            alt363=1;
        }
        } finally {dbg.exitDecision(363);}

        switch (alt363) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:14: ws
                {
                dbg.location(1035,14);
                pushFollow(FOLLOW_ws_in_synpred34_Css36279);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(363);}

        dbg.location(1035,18);
        if ( (input.LA(1)>=SOLIDUS && input.LA(1)<=PLUS)||input.LA(1)==STAR ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred34_Css3

    // $ANTLR start synpred35_Css3
    public final void synpred35_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1169:13: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1169:14: sass_interpolation_expression_var
        {
        dbg.location(1169,14);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred35_Css37322);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_Css3

    // $ANTLR start synpred36_Css3
    public final void synpred36_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1176:17: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1176:18: sass_interpolation_expression_var
        {
        dbg.location(1176,18);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred36_Css37469);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_Css3

    // $ANTLR start synpred37_Css3
    public final void synpred37_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1187:13: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1187:14: sass_interpolation_expression_var
        {
        dbg.location(1187,14);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred37_Css37625);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred37_Css3

    // $ANTLR start synpred38_Css3
    public final void synpred38_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1194:17: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1194:18: sass_interpolation_expression_var
        {
        dbg.location(1194,18);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred38_Css37743);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_Css3

    // Delegated rules

    public final boolean synpred5_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred5_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred26_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred36_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred10_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred20_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred16_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred18_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred35_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred29_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred14_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred25_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred8_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred15_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred38_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred24_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred21_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred9_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred34_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred33_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred4_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred17_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred7_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred37_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred27_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred30_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred23_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred6_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred3_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred2_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred28_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred13_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred1_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred32_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred31_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred19_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred22_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA3 dfa3 = new DFA3(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA17 dfa17 = new DFA17(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA24 dfa24 = new DFA24(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA60 dfa60 = new DFA60(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA136 dfa136 = new DFA136(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA156 dfa156 = new DFA156(this);
    protected DFA169 dfa169 = new DFA169(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA170 dfa170 = new DFA170(this);
    protected DFA175 dfa175 = new DFA175(this);
    protected DFA174 dfa174 = new DFA174(this);
    protected DFA178 dfa178 = new DFA178(this);
    protected DFA186 dfa186 = new DFA186(this);
    protected DFA190 dfa190 = new DFA190(this);
    protected DFA197 dfa197 = new DFA197(this);
    protected DFA196 dfa196 = new DFA196(this);
    protected DFA195 dfa195 = new DFA195(this);
    protected DFA204 dfa204 = new DFA204(this);
    protected DFA209 dfa209 = new DFA209(this);
    protected DFA213 dfa213 = new DFA213(this);
    protected DFA218 dfa218 = new DFA218(this);
    protected DFA222 dfa222 = new DFA222(this);
    protected DFA227 dfa227 = new DFA227(this);
    protected DFA232 dfa232 = new DFA232(this);
    protected DFA236 dfa236 = new DFA236(this);
    protected DFA242 dfa242 = new DFA242(this);
    protected DFA246 dfa246 = new DFA246(this);
    protected DFA248 dfa248 = new DFA248(this);
    protected DFA257 dfa257 = new DFA257(this);
    protected DFA260 dfa260 = new DFA260(this);
    protected DFA287 dfa287 = new DFA287(this);
    protected DFA291 dfa291 = new DFA291(this);
    protected DFA299 dfa299 = new DFA299(this);
    protected DFA303 dfa303 = new DFA303(this);
    protected DFA310 dfa310 = new DFA310(this);
    protected DFA309 dfa309 = new DFA309(this);
    protected DFA353 dfa353 = new DFA353(this);
    protected DFA358 dfa358 = new DFA358(this);
    static final String DFA3_eotS =
        "\5\uffff";
    static final String DFA3_eofS =
        "\1\2\4\uffff";
    static final String DFA3_minS =
        "\1\4\1\7\1\uffff\1\7\1\uffff";
    static final String DFA3_maxS =
        "\1\156\1\126\1\uffff\1\126\1\uffff";
    static final String DFA3_acceptS =
        "\2\uffff\1\2\1\uffff\1\1";
    static final String DFA3_specialS =
        "\5\uffff}>";
    static final String[] DFA3_transitionS = {
            "\3\2\2\uffff\1\1\3\2\5\uffff\1\2\2\uffff\3\2\3\uffff\1\2\1\uffff"+
            "\23\2\1\uffff\2\2\1\uffff\12\2\1\uffff\1\2\6\uffff\2\2\20\uffff"+
            "\15\2\11\uffff\1\2",
            "\1\4\15\uffff\1\2\76\uffff\3\3",
            "",
            "\1\4\15\uffff\1\2\76\uffff\3\3",
            ""
    };

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "324:6: ( charSet ( ws )? )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA4_eotS =
        "\47\uffff";
    static final String DFA4_eofS =
        "\1\2\46\uffff";
    static final String DFA4_minS =
        "\1\4\1\0\45\uffff";
    static final String DFA4_maxS =
        "\1\156\1\0\45\uffff";
    static final String DFA4_acceptS =
        "\2\uffff\1\2\43\uffff\1\1";
    static final String DFA4_specialS =
        "\1\uffff\1\0\45\uffff}>";
    static final String[] DFA4_transitionS = {
            "\3\2\2\uffff\1\2\1\1\2\2\5\uffff\1\2\2\uffff\3\2\3\uffff\1\2"+
            "\1\uffff\23\2\1\uffff\2\2\1\uffff\12\2\1\uffff\1\2\6\uffff\2"+
            "\2\20\uffff\15\2\11\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "325:9: ( imports )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))),""))) ) {s = 38;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA5_eotS =
        "\5\uffff";
    static final String DFA5_eofS =
        "\1\2\4\uffff";
    static final String DFA5_minS =
        "\1\4\1\6\1\uffff\1\6\1\uffff";
    static final String DFA5_maxS =
        "\1\156\1\126\1\uffff\1\126\1\uffff";
    static final String DFA5_acceptS =
        "\2\uffff\1\2\1\uffff\1\1";
    static final String DFA5_specialS =
        "\5\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\1\2\2\2\uffff\4\2\5\uffff\1\2\2\uffff\3\2\3\uffff\1\2\1\uffff"+
            "\23\2\1\uffff\2\2\1\uffff\12\2\1\uffff\1\2\6\uffff\2\2\20\uffff"+
            "\15\2\11\uffff\1\2",
            "\3\4\14\uffff\1\2\76\uffff\3\3",
            "",
            "\3\4\14\uffff\1\2\76\uffff\3\3",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "326:9: ( namespaces )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA8_eotS =
        "\5\uffff";
    static final String DFA8_eofS =
        "\1\1\4\uffff";
    static final String DFA8_minS =
        "\1\4\1\uffff\2\6\1\uffff";
    static final String DFA8_maxS =
        "\1\156\1\uffff\2\126\1\uffff";
    static final String DFA8_acceptS =
        "\1\uffff\1\2\2\uffff\1\1";
    static final String DFA8_specialS =
        "\5\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\2\2\1\2\uffff\4\1\5\uffff\1\1\2\uffff\3\1\3\uffff\1\1\1\uffff"+
            "\23\1\1\uffff\2\1\1\uffff\12\1\1\uffff\1\1\6\uffff\2\1\20\uffff"+
            "\15\1\11\uffff\1\1",
            "",
            "\3\4\14\uffff\1\1\76\uffff\3\3",
            "\3\4\14\uffff\1\1\76\uffff\3\3",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "()+ loopback of 333:2: ( namespace ( ws )? )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA17_eotS =
        "\47\uffff";
    static final String DFA17_eofS =
        "\1\1\46\uffff";
    static final String DFA17_minS =
        "\1\4\32\uffff\1\0\13\uffff";
    static final String DFA17_maxS =
        "\1\156\32\uffff\1\0\13\uffff";
    static final String DFA17_acceptS =
        "\1\uffff\1\2\44\uffff\1\1";
    static final String DFA17_specialS =
        "\33\uffff\1\0\13\uffff}>";
    static final String[] DFA17_transitionS = {
            "\3\1\2\uffff\1\1\1\33\2\1\5\uffff\1\1\2\uffff\3\1\3\uffff\1"+
            "\1\1\uffff\23\1\1\uffff\2\1\1\uffff\12\1\1\uffff\1\1\6\uffff"+
            "\2\1\20\uffff\15\1\11\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA17_eot = DFA.unpackEncodedString(DFA17_eotS);
    static final short[] DFA17_eof = DFA.unpackEncodedString(DFA17_eofS);
    static final char[] DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_minS);
    static final char[] DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_maxS);
    static final short[] DFA17_accept = DFA.unpackEncodedString(DFA17_acceptS);
    static final short[] DFA17_special = DFA.unpackEncodedString(DFA17_specialS);
    static final short[][] DFA17_transition;

    static {
        int numStates = DFA17_transitionS.length;
        DFA17_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA17_transition[i] = DFA.unpackEncodedString(DFA17_transitionS[i]);
        }
    }

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = DFA17_eot;
            this.eof = DFA17_eof;
            this.min = DFA17_min;
            this.max = DFA17_max;
            this.accept = DFA17_accept;
            this.special = DFA17_special;
            this.transition = DFA17_transition;
        }
        public String getDescription() {
            return "()+ loopback of 358:2: ( importItem ( ws )? SEMI ( ws )? )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA17_27 = input.LA(1);

                         
                        int index17_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))),""))) ) {s = 38;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 1;}

                         
                        input.seek(index17_27);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA27_eotS =
        "\7\uffff";
    static final String DFA27_eofS =
        "\7\uffff";
    static final String DFA27_minS =
        "\1\12\2\7\2\0\2\uffff";
    static final String DFA27_maxS =
        "\1\12\2\126\2\0\2\uffff";
    static final String DFA27_acceptS =
        "\5\uffff\1\1\1\2";
    static final String DFA27_specialS =
        "\3\uffff\1\1\1\0\2\uffff}>";
    static final String[] DFA27_transitionS = {
            "\1\1",
            "\2\3\113\uffff\3\2",
            "\2\4\113\uffff\3\2",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA27_eot = DFA.unpackEncodedString(DFA27_eotS);
    static final short[] DFA27_eof = DFA.unpackEncodedString(DFA27_eofS);
    static final char[] DFA27_min = DFA.unpackEncodedStringToUnsignedChars(DFA27_minS);
    static final char[] DFA27_max = DFA.unpackEncodedStringToUnsignedChars(DFA27_maxS);
    static final short[] DFA27_accept = DFA.unpackEncodedString(DFA27_acceptS);
    static final short[] DFA27_special = DFA.unpackEncodedString(DFA27_specialS);
    static final short[][] DFA27_transition;

    static {
        int numStates = DFA27_transitionS.length;
        DFA27_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA27_transition[i] = DFA.unpackEncodedString(DFA27_transitionS[i]);
        }
    }

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;
        }
        public String getDescription() {
            return "361:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA27_4 = input.LA(1);

                         
                        int index27_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isScssSource(),"isScssSource()"),""))) ) {s = 5;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 6;}

                         
                        input.seek(index27_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA27_3 = input.LA(1);

                         
                        int index27_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isScssSource(),"isScssSource()"),""))) ) {s = 5;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 6;}

                         
                        input.seek(index27_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 27, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA20_eotS =
        "\55\uffff";
    static final String DFA20_eofS =
        "\1\11\54\uffff";
    static final String DFA20_minS =
        "\1\4\1\0\1\uffff\3\0\1\uffff\2\0\4\uffff\2\0\14\uffff\16\0\1\uffff"+
        "\3\0";
    static final String DFA20_maxS =
        "\1\156\1\0\1\uffff\3\0\1\uffff\2\0\4\uffff\2\0\14\uffff\16\0\1\uffff"+
        "\3\0";
    static final String DFA20_acceptS =
        "\2\uffff\1\1\3\uffff\1\1\2\uffff\1\2\43\uffff";
    static final String DFA20_specialS =
        "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\uffff\1\5\1\6\4\uffff\1\7\1\10\14"+
        "\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1"+
        "\24\1\25\1\26\1\uffff\1\27\1\30\1\31}>";
    static final String[] DFA20_transitionS = {
            "\1\54\1\11\1\3\2\uffff\1\54\1\41\1\11\1\16\1\uffff\1\11\1\uffff"+
            "\2\2\1\4\1\6\1\uffff\1\11\1\40\1\36\3\uffff\1\37\1\uffff\1\33"+
            "\1\34\1\35\20\54\1\uffff\2\11\1\uffff\2\11\1\5\7\11\1\uffff"+
            "\1\11\6\uffff\1\11\1\10\14\uffff\3\1\1\uffff\1\52\1\7\1\15\1"+
            "\50\2\42\1\43\1\54\1\44\1\47\1\53\1\45\1\46\11\uffff\1\11",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "363:43: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA20_0 = input.LA(1);

                         
                        int index20_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA20_0>=WS && LA20_0<=COMMENT)) ) {s = 1;}

                        else if ( ((LA20_0>=ONLY && LA20_0<=NOT)) && (synpred1_Css3())) {s = 2;}

                        else if ( (LA20_0==IDENT) ) {s = 3;}

                        else if ( (LA20_0==GEN) ) {s = 4;}

                        else if ( (LA20_0==HASH_SYMBOL) ) {s = 5;}

                        else if ( (LA20_0==LPAREN) && (synpred1_Css3())) {s = 6;}

                        else if ( (LA20_0==SASS_MIXIN) ) {s = 7;}

                        else if ( (LA20_0==SASS_VAR) ) {s = 8;}

                        else if ( (LA20_0==EOF||LA20_0==SEMI||LA20_0==COMMA||LA20_0==RBRACE||LA20_0==COLON||(LA20_0>=MINUS && LA20_0<=PLUS)||(LA20_0>=GREATER && LA20_0<=TILDE)||(LA20_0>=HASH && LA20_0<=PIPE)||LA20_0==LESS_AND||LA20_0==RBRACKET||LA20_0==AT_SIGN) ) {s = 9;}

                        else if ( (LA20_0==SASS_INCLUDE) ) {s = 13;}

                        else if ( (LA20_0==MEDIA_SYM) ) {s = 14;}

                        else if ( (LA20_0==PAGE_SYM) ) {s = 27;}

                        else if ( (LA20_0==COUNTER_STYLE_SYM) ) {s = 28;}

                        else if ( (LA20_0==FONT_FACE_SYM) ) {s = 29;}

                        else if ( (LA20_0==MOZ_DOCUMENT_SYM) ) {s = 30;}

                        else if ( (LA20_0==WEBKIT_KEYFRAMES_SYM) ) {s = 31;}

                        else if ( (LA20_0==AT_IDENT) ) {s = 32;}

                        else if ( (LA20_0==IMPORT_SYM) ) {s = 33;}

                        else if ( ((LA20_0>=SASS_DEBUG && LA20_0<=SASS_WARN)) ) {s = 34;}

                        else if ( (LA20_0==SASS_IF) ) {s = 35;}

                        else if ( (LA20_0==SASS_FOR) ) {s = 36;}

                        else if ( (LA20_0==SASS_EACH) ) {s = 37;}

                        else if ( (LA20_0==SASS_WHILE) ) {s = 38;}

                        else if ( (LA20_0==SASS_FUNCTION) ) {s = 39;}

                        else if ( (LA20_0==SASS_EXTEND) ) {s = 40;}

                        else if ( (LA20_0==SASS_CONTENT) ) {s = 42;}

                        else if ( (LA20_0==SASS_RETURN) ) {s = 43;}

                        else if ( (LA20_0==NAMESPACE_SYM||LA20_0==CHARSET_SYM||(LA20_0>=TOPLEFTCORNER_SYM && LA20_0<=RIGHTBOTTOM_SYM)||LA20_0==SASS_ELSE) ) {s = 44;}

                         
                        input.seek(index20_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA20_1 = input.LA(1);

                         
                        int index20_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA20_3 = input.LA(1);

                         
                        int index20_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA20_4 = input.LA(1);

                         
                        int index20_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA20_5 = input.LA(1);

                         
                        int index20_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred1_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA20_7 = input.LA(1);

                         
                        int index20_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA20_8 = input.LA(1);

                         
                        int index20_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 9;}

                         
                        input.seek(index20_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA20_13 = input.LA(1);

                         
                        int index20_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA20_14 = input.LA(1);

                         
                        int index20_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA20_27 = input.LA(1);

                         
                        int index20_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_27);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA20_28 = input.LA(1);

                         
                        int index20_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_28);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA20_29 = input.LA(1);

                         
                        int index20_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_29);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA20_30 = input.LA(1);

                         
                        int index20_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_30);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA20_31 = input.LA(1);

                         
                        int index20_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_31);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA20_32 = input.LA(1);

                         
                        int index20_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_32);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA20_33 = input.LA(1);

                         
                        int index20_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( ((((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_33);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA20_34 = input.LA(1);

                         
                        int index20_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_34);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA20_35 = input.LA(1);

                         
                        int index20_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_35);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA20_36 = input.LA(1);

                         
                        int index20_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_36);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA20_37 = input.LA(1);

                         
                        int index20_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_37);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA20_38 = input.LA(1);

                         
                        int index20_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_38);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA20_39 = input.LA(1);

                         
                        int index20_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_39);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA20_40 = input.LA(1);

                         
                        int index20_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( ((((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_40);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA20_42 = input.LA(1);

                         
                        int index20_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( ((((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_42);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA20_43 = input.LA(1);

                         
                        int index20_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( ((((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_43);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA20_44 = input.LA(1);

                         
                        int index20_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_44);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA24_eotS =
        "\6\uffff";
    static final String DFA24_eofS =
        "\2\2\4\uffff";
    static final String DFA24_minS =
        "\2\4\1\uffff\2\6\1\uffff";
    static final String DFA24_maxS =
        "\2\156\1\uffff\2\126\1\uffff";
    static final String DFA24_acceptS =
        "\2\uffff\1\2\2\uffff\1\1";
    static final String DFA24_specialS =
        "\6\uffff}>";
    static final String[] DFA24_transitionS = {
            "\3\2\2\uffff\2\2\1\3\1\2\1\uffff\1\2\1\uffff\4\2\1\uffff\3\2"+
            "\3\uffff\1\2\1\uffff\23\2\1\uffff\2\2\1\uffff\12\2\1\uffff\1"+
            "\2\6\uffff\2\2\14\uffff\3\1\1\uffff\15\2\11\uffff\1\2",
            "\3\2\2\uffff\2\2\1\3\1\2\1\uffff\1\2\1\uffff\4\2\1\uffff\3"+
            "\2\3\uffff\1\2\1\uffff\23\2\1\uffff\2\2\1\uffff\12\2\1\uffff"+
            "\1\2\6\uffff\2\2\14\uffff\3\1\1\uffff\15\2\11\uffff\1\2",
            "",
            "\1\2\2\5\2\uffff\1\2\1\uffff\1\2\7\uffff\1\2\33\uffff\1\2\2"+
            "\uffff\1\2\1\uffff\4\2\2\uffff\1\2\2\uffff\1\2\6\uffff\1\2\15"+
            "\uffff\3\4",
            "\1\2\2\5\2\uffff\1\2\1\uffff\1\2\7\uffff\1\2\33\uffff\1\2\2"+
            "\uffff\1\2\1\uffff\4\2\2\uffff\1\2\2\uffff\1\2\6\uffff\1\2\15"+
            "\uffff\3\4",
            ""
    };

    static final short[] DFA24_eot = DFA.unpackEncodedString(DFA24_eotS);
    static final short[] DFA24_eof = DFA.unpackEncodedString(DFA24_eofS);
    static final char[] DFA24_min = DFA.unpackEncodedStringToUnsignedChars(DFA24_minS);
    static final char[] DFA24_max = DFA.unpackEncodedStringToUnsignedChars(DFA24_maxS);
    static final short[] DFA24_accept = DFA.unpackEncodedString(DFA24_acceptS);
    static final short[] DFA24_special = DFA.unpackEncodedString(DFA24_specialS);
    static final short[][] DFA24_transition;

    static {
        int numStates = DFA24_transitionS.length;
        DFA24_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA24_transition[i] = DFA.unpackEncodedString(DFA24_transitionS[i]);
        }
    }

    class DFA24 extends DFA {

        public DFA24(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 24;
            this.eot = DFA24_eot;
            this.eof = DFA24_eof;
            this.min = DFA24_min;
            this.max = DFA24_max;
            this.accept = DFA24_accept;
            this.special = DFA24_special;
            this.transition = DFA24_transition;
        }
        public String getDescription() {
            return "()* loopback of 366:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA26_eotS =
        "\55\uffff";
    static final String DFA26_eofS =
        "\1\11\54\uffff";
    static final String DFA26_minS =
        "\1\4\1\0\1\uffff\3\0\1\uffff\2\0\4\uffff\2\0\14\uffff\16\0\1\uffff"+
        "\3\0";
    static final String DFA26_maxS =
        "\1\156\1\0\1\uffff\3\0\1\uffff\2\0\4\uffff\2\0\14\uffff\16\0\1\uffff"+
        "\3\0";
    static final String DFA26_acceptS =
        "\2\uffff\1\1\3\uffff\1\1\2\uffff\1\2\43\uffff";
    static final String DFA26_specialS =
        "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\uffff\1\5\1\6\4\uffff\1\7\1\10\14"+
        "\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1"+
        "\24\1\25\1\26\1\uffff\1\27\1\30\1\31}>";
    static final String[] DFA26_transitionS = {
            "\1\54\1\11\1\3\2\uffff\1\54\1\41\1\11\1\16\1\uffff\1\11\1\uffff"+
            "\2\2\1\4\1\6\1\uffff\1\11\1\40\1\36\3\uffff\1\37\1\uffff\1\33"+
            "\1\34\1\35\20\54\1\uffff\2\11\1\uffff\2\11\1\5\7\11\1\uffff"+
            "\1\11\6\uffff\1\11\1\10\14\uffff\3\1\1\uffff\1\52\1\7\1\15\1"+
            "\50\2\42\1\43\1\54\1\44\1\47\1\53\1\45\1\46\11\uffff\1\11",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "366:97: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_0 = input.LA(1);

                         
                        int index26_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA26_0>=WS && LA26_0<=COMMENT)) ) {s = 1;}

                        else if ( ((LA26_0>=ONLY && LA26_0<=NOT)) && (synpred2_Css3())) {s = 2;}

                        else if ( (LA26_0==IDENT) ) {s = 3;}

                        else if ( (LA26_0==GEN) ) {s = 4;}

                        else if ( (LA26_0==HASH_SYMBOL) ) {s = 5;}

                        else if ( (LA26_0==LPAREN) && (synpred2_Css3())) {s = 6;}

                        else if ( (LA26_0==SASS_MIXIN) ) {s = 7;}

                        else if ( (LA26_0==SASS_VAR) ) {s = 8;}

                        else if ( (LA26_0==EOF||LA26_0==SEMI||LA26_0==COMMA||LA26_0==RBRACE||LA26_0==COLON||(LA26_0>=MINUS && LA26_0<=PLUS)||(LA26_0>=GREATER && LA26_0<=TILDE)||(LA26_0>=HASH && LA26_0<=PIPE)||LA26_0==LESS_AND||LA26_0==RBRACKET||LA26_0==AT_SIGN) ) {s = 9;}

                        else if ( (LA26_0==SASS_INCLUDE) ) {s = 13;}

                        else if ( (LA26_0==MEDIA_SYM) ) {s = 14;}

                        else if ( (LA26_0==PAGE_SYM) ) {s = 27;}

                        else if ( (LA26_0==COUNTER_STYLE_SYM) ) {s = 28;}

                        else if ( (LA26_0==FONT_FACE_SYM) ) {s = 29;}

                        else if ( (LA26_0==MOZ_DOCUMENT_SYM) ) {s = 30;}

                        else if ( (LA26_0==WEBKIT_KEYFRAMES_SYM) ) {s = 31;}

                        else if ( (LA26_0==AT_IDENT) ) {s = 32;}

                        else if ( (LA26_0==IMPORT_SYM) ) {s = 33;}

                        else if ( ((LA26_0>=SASS_DEBUG && LA26_0<=SASS_WARN)) ) {s = 34;}

                        else if ( (LA26_0==SASS_IF) ) {s = 35;}

                        else if ( (LA26_0==SASS_FOR) ) {s = 36;}

                        else if ( (LA26_0==SASS_EACH) ) {s = 37;}

                        else if ( (LA26_0==SASS_WHILE) ) {s = 38;}

                        else if ( (LA26_0==SASS_FUNCTION) ) {s = 39;}

                        else if ( (LA26_0==SASS_EXTEND) ) {s = 40;}

                        else if ( (LA26_0==SASS_CONTENT) ) {s = 42;}

                        else if ( (LA26_0==SASS_RETURN) ) {s = 43;}

                        else if ( (LA26_0==NAMESPACE_SYM||LA26_0==CHARSET_SYM||(LA26_0>=TOPLEFTCORNER_SYM && LA26_0<=RIGHTBOTTOM_SYM)||LA26_0==SASS_ELSE) ) {s = 44;}

                         
                        input.seek(index26_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_1 = input.LA(1);

                         
                        int index26_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_3 = input.LA(1);

                         
                        int index26_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_4 = input.LA(1);

                         
                        int index26_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA26_5 = input.LA(1);

                         
                        int index26_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA26_7 = input.LA(1);

                         
                        int index26_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA26_8 = input.LA(1);

                         
                        int index26_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 9;}

                         
                        input.seek(index26_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA26_13 = input.LA(1);

                         
                        int index26_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA26_14 = input.LA(1);

                         
                        int index26_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA26_27 = input.LA(1);

                         
                        int index26_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_27);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA26_28 = input.LA(1);

                         
                        int index26_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_28);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA26_29 = input.LA(1);

                         
                        int index26_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_29);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA26_30 = input.LA(1);

                         
                        int index26_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_30);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA26_31 = input.LA(1);

                         
                        int index26_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_31);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA26_32 = input.LA(1);

                         
                        int index26_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_32);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA26_33 = input.LA(1);

                         
                        int index26_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_33);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA26_34 = input.LA(1);

                         
                        int index26_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_34);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA26_35 = input.LA(1);

                         
                        int index26_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_35);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA26_36 = input.LA(1);

                         
                        int index26_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_36);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA26_37 = input.LA(1);

                         
                        int index26_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_37);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA26_38 = input.LA(1);

                         
                        int index26_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_38);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA26_39 = input.LA(1);

                         
                        int index26_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_39);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA26_40 = input.LA(1);

                         
                        int index26_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_40);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA26_42 = input.LA(1);

                         
                        int index26_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_42);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA26_43 = input.LA(1);

                         
                        int index26_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_43);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA26_44 = input.LA(1);

                         
                        int index26_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_44);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA33_eotS =
        "\5\uffff";
    static final String DFA33_eofS =
        "\5\uffff";
    static final String DFA33_minS =
        "\2\4\1\0\2\uffff";
    static final String DFA33_maxS =
        "\2\156\1\0\2\uffff";
    static final String DFA33_acceptS =
        "\3\uffff\1\2\1\1";
    static final String DFA33_specialS =
        "\2\uffff\1\0\2\uffff}>";
    static final String[] DFA33_transitionS = {
            "\1\3\1\2\1\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3"+
            "\3\uffff\1\3\1\uffff\23\3\1\uffff\2\3\1\uffff\12\3\1\uffff\1"+
            "\3\6\uffff\2\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\3\1\2\1\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3"+
            "\3\3\uffff\1\3\1\uffff\23\3\1\uffff\2\3\1\uffff\12\3\1\uffff"+
            "\1\3\6\uffff\2\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
    static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
    static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
    static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
    static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
    static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
    static final short[][] DFA33_transition;

    static {
        int numStates = DFA33_transitionS.length;
        DFA33_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
        }
    }

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;
        }
        public String getDescription() {
            return "381:26: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA33_2 = input.LA(1);

                         
                        int index33_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_Css3()) ) {s = 4;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index33_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 33, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA37_eotS =
        "\57\uffff";
    static final String DFA37_eofS =
        "\57\uffff";
    static final String DFA37_minS =
        "\1\4\21\0\7\uffff\1\0\3\uffff\6\0\14\uffff";
    static final String DFA37_maxS =
        "\1\156\21\0\7\uffff\1\0\3\uffff\6\0\14\uffff";
    static final String DFA37_acceptS =
        "\22\uffff\1\11\20\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\12\1"+
        "\13\1\14\1\15";
    static final String DFA37_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\7\uffff\1\21\3\uffff\1\22\1\23\1\24\1\25\1"+
        "\26\1\27\14\uffff}>";
    static final String[] DFA37_transitionS = {
            "\1\42\1\uffff\1\6\2\uffff\2\42\1\22\1\41\5\uffff\1\10\2\uffff"+
            "\1\22\1\40\1\36\3\uffff\1\37\1\uffff\1\21\1\42\1\35\20\42\1"+
            "\uffff\1\31\1\22\1\uffff\2\22\1\5\1\7\1\1\3\22\1\4\1\22\1\uffff"+
            "\1\22\6\uffff\1\22\1\12\20\uffff\1\20\1\2\1\3\1\11\2\13\1\14"+
            "\1\42\1\15\2\42\1\16\1\17\11\uffff\1\22",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA37_eot = DFA.unpackEncodedString(DFA37_eotS);
    static final short[] DFA37_eof = DFA.unpackEncodedString(DFA37_eofS);
    static final char[] DFA37_min = DFA.unpackEncodedStringToUnsignedChars(DFA37_minS);
    static final char[] DFA37_max = DFA.unpackEncodedStringToUnsignedChars(DFA37_maxS);
    static final short[] DFA37_accept = DFA.unpackEncodedString(DFA37_acceptS);
    static final short[] DFA37_special = DFA.unpackEncodedString(DFA37_specialS);
    static final short[][] DFA37_transition;

    static {
        int numStates = DFA37_transitionS.length;
        DFA37_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA37_transition[i] = DFA.unpackEncodedString(DFA37_transitionS[i]);
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = DFA37_eot;
            this.eof = DFA37_eof;
            this.min = DFA37_min;
            this.max = DFA37_max;
            this.accept = DFA37_accept;
            this.special = DFA37_special;
            this.transition = DFA37_transition;
        }
        public String getDescription() {
            return "387:1: mediaBodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | {...}? sass_extend | {...}? sass_debug | {...}? sass_control | {...}? sass_content | rule | page | fontFace | vendorAtRule | media );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA37_1 = input.LA(1);

                         
                        int index37_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred4_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 35;}

                        else if ( ((synpred5_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 36;}

                        else if ( (((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred6_Css3())) ) {s = 37;}

                        else if ( (((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred7_Css3())) ) {s = 38;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index37_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA37_2 = input.LA(1);

                         
                        int index37_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred4_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 35;}

                        else if ( ((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                         
                        input.seek(index37_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA37_3 = input.LA(1);

                         
                        int index37_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 36;}

                        else if ( ((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                         
                        input.seek(index37_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA37_4 = input.LA(1);

                         
                        int index37_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred6_Css3())) ) {s = 37;}

                        else if ( (((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred7_Css3())) ) {s = 38;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index37_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA37_5 = input.LA(1);

                         
                        int index37_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred6_Css3())) ) {s = 37;}

                        else if ( (((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred7_Css3())) ) {s = 38;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index37_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA37_6 = input.LA(1);

                         
                        int index37_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred6_Css3())) ) {s = 37;}

                        else if ( (((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred7_Css3())) ) {s = 38;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index37_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA37_7 = input.LA(1);

                         
                        int index37_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred6_Css3())) ) {s = 37;}

                        else if ( (((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred7_Css3())) ) {s = 38;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index37_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA37_8 = input.LA(1);

                         
                        int index37_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred6_Css3())) ) {s = 37;}

                        else if ( (((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred7_Css3())) ) {s = 38;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index37_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA37_9 = input.LA(1);

                         
                        int index37_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 39;}

                         
                        input.seek(index37_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA37_10 = input.LA(1);

                         
                        int index37_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 37;}

                        else if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 38;}

                         
                        input.seek(index37_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA37_11 = input.LA(1);

                         
                        int index37_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 40;}

                         
                        input.seek(index37_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA37_12 = input.LA(1);

                         
                        int index37_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 41;}

                         
                        input.seek(index37_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA37_13 = input.LA(1);

                         
                        int index37_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 41;}

                         
                        input.seek(index37_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA37_14 = input.LA(1);

                         
                        int index37_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 41;}

                         
                        input.seek(index37_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA37_15 = input.LA(1);

                         
                        int index37_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 41;}

                         
                        input.seek(index37_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA37_16 = input.LA(1);

                         
                        int index37_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 42;}

                         
                        input.seek(index37_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA37_17 = input.LA(1);

                         
                        int index37_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index37_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA37_25 = input.LA(1);

                         
                        int index37_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred6_Css3())) ) {s = 37;}

                        else if ( (((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred7_Css3())) ) {s = 38;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index37_25);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA37_29 = input.LA(1);

                         
                        int index37_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (true) ) {s = 44;}

                         
                        input.seek(index37_29);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA37_30 = input.LA(1);

                         
                        int index37_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index37_30);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA37_31 = input.LA(1);

                         
                        int index37_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index37_31);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA37_32 = input.LA(1);

                         
                        int index37_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index37_32);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA37_33 = input.LA(1);

                         
                        int index37_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (true) ) {s = 46;}

                         
                        input.seek(index37_33);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA37_34 = input.LA(1);

                         
                        int index37_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                         
                        input.seek(index37_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 37, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA40_eotS =
        "\56\uffff";
    static final String DFA40_eofS =
        "\1\2\55\uffff";
    static final String DFA40_minS =
        "\1\4\1\0\45\uffff\1\0\6\uffff";
    static final String DFA40_maxS =
        "\1\156\1\0\45\uffff\1\0\6\uffff";
    static final String DFA40_acceptS =
        "\2\uffff\1\2\52\uffff\1\1";
    static final String DFA40_specialS =
        "\1\uffff\1\0\45\uffff\1\1\6\uffff}>";
    static final String[] DFA40_transitionS = {
            "\3\2\2\uffff\2\2\1\47\3\2\3\uffff\1\2\2\uffff\3\2\3\uffff\1"+
            "\2\1\uffff\23\2\1\uffff\2\2\1\uffff\12\2\1\uffff\1\2\6\uffff"+
            "\2\2\14\uffff\3\1\1\uffff\15\2\11\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "()* loopback of 406:15: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA40_1 = input.LA(1);

                         
                        int index40_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index40_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA40_39 = input.LA(1);

                         
                        int index40_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index40_39);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA45_eotS =
        "\4\uffff";
    static final String DFA45_eofS =
        "\2\2\2\uffff";
    static final String DFA45_minS =
        "\2\4\2\uffff";
    static final String DFA45_maxS =
        "\2\156\2\uffff";
    static final String DFA45_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA45_specialS =
        "\4\uffff}>";
    static final String[] DFA45_transitionS = {
            "\3\2\2\uffff\6\2\1\3\2\uffff\1\2\2\uffff\3\2\3\uffff\1\2\1\uffff"+
            "\23\2\1\uffff\2\2\1\uffff\12\2\1\uffff\1\2\6\uffff\2\2\14\uffff"+
            "\3\1\1\uffff\15\2\11\uffff\1\2",
            "\3\2\2\uffff\6\2\1\3\2\uffff\1\2\2\uffff\3\2\3\uffff\1\2\1"+
            "\uffff\23\2\1\uffff\2\2\1\uffff\12\2\1\uffff\1\2\6\uffff\2\2"+
            "\14\uffff\3\1\1\uffff\15\2\11\uffff\1\2",
            "",
            ""
    };

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "()* loopback of 411:43: ( ( ws )? AND ( ws )? mediaExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA48_eotS =
        "\4\uffff";
    static final String DFA48_eofS =
        "\2\2\2\uffff";
    static final String DFA48_minS =
        "\2\4\2\uffff";
    static final String DFA48_maxS =
        "\2\156\2\uffff";
    static final String DFA48_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA48_specialS =
        "\4\uffff}>";
    static final String[] DFA48_transitionS = {
            "\3\2\2\uffff\6\2\1\3\2\uffff\1\2\2\uffff\3\2\3\uffff\1\2\1\uffff"+
            "\23\2\1\uffff\2\2\1\uffff\12\2\1\uffff\1\2\6\uffff\2\2\14\uffff"+
            "\3\1\1\uffff\15\2\11\uffff\1\2",
            "\3\2\2\uffff\6\2\1\3\2\uffff\1\2\2\uffff\3\2\3\uffff\1\2\1"+
            "\uffff\23\2\1\uffff\2\2\1\uffff\12\2\1\uffff\1\2\6\uffff\2\2"+
            "\14\uffff\3\1\1\uffff\15\2\11\uffff\1\2",
            "",
            ""
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "()* loopback of 412:23: ( ( ws )? AND ( ws )? mediaExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA52_eotS =
        "\4\uffff";
    static final String DFA52_eofS =
        "\4\uffff";
    static final String DFA52_minS =
        "\2\24\2\uffff";
    static final String DFA52_maxS =
        "\2\126\2\uffff";
    static final String DFA52_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA52_specialS =
        "\4\uffff}>";
    static final String[] DFA52_transitionS = {
            "\1\3\1\2\76\uffff\3\1",
            "\1\3\1\2\76\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "426:29: ( mediaFeatureValue )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA56_eotS =
        "\34\uffff";
    static final String DFA56_eofS =
        "\34\uffff";
    static final String DFA56_minS =
        "\1\4\1\uffff\27\0\3\uffff";
    static final String DFA56_maxS =
        "\1\144\1\uffff\27\0\3\uffff";
    static final String DFA56_acceptS =
        "\1\uffff\1\1\31\uffff\1\2";
    static final String DFA56_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\3\uffff}>";
    static final String[] DFA56_transitionS = {
            "\1\25\1\uffff\1\3\1\17\1\23\2\25\1\uffff\1\25\4\uffff\1\1\1"+
            "\22\1\1\2\uffff\2\25\3\uffff\1\25\1\5\23\25\1\uffff\2\2\1\1"+
            "\1\uffff\1\20\1\27\1\24\17\uffff\1\26\1\4\1\6\1\7\1\10\1\11"+
            "\1\12\1\13\1\14\1\15\1\16\1\21\1\30\4\uffff\15\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "432:5: ({...}? cp_expression | expression )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA56_2 = input.LA(1);

                         
                        int index56_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA56_3 = input.LA(1);

                         
                        int index56_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA56_4 = input.LA(1);

                         
                        int index56_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA56_5 = input.LA(1);

                         
                        int index56_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA56_6 = input.LA(1);

                         
                        int index56_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA56_7 = input.LA(1);

                         
                        int index56_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA56_8 = input.LA(1);

                         
                        int index56_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA56_9 = input.LA(1);

                         
                        int index56_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA56_10 = input.LA(1);

                         
                        int index56_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA56_11 = input.LA(1);

                         
                        int index56_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA56_12 = input.LA(1);

                         
                        int index56_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA56_13 = input.LA(1);

                         
                        int index56_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA56_14 = input.LA(1);

                         
                        int index56_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA56_15 = input.LA(1);

                         
                        int index56_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA56_16 = input.LA(1);

                         
                        int index56_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 27;}

                         
                        input.seek(index56_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA56_17 = input.LA(1);

                         
                        int index56_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 27;}

                         
                        input.seek(index56_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA56_18 = input.LA(1);

                         
                        int index56_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA56_19 = input.LA(1);

                         
                        int index56_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA56_20 = input.LA(1);

                         
                        int index56_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA56_21 = input.LA(1);

                         
                        int index56_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 27;}

                         
                        input.seek(index56_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA56_22 = input.LA(1);

                         
                        int index56_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 27;}

                         
                        input.seek(index56_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA56_23 = input.LA(1);

                         
                        int index56_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 27;}

                         
                        input.seek(index56_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA56_24 = input.LA(1);

                         
                        int index56_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 27;}

                         
                        input.seek(index56_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 56, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA60_eotS =
        "\5\uffff";
    static final String DFA60_eofS =
        "\2\3\3\uffff";
    static final String DFA60_minS =
        "\2\4\1\0\2\uffff";
    static final String DFA60_maxS =
        "\2\156\1\0\2\uffff";
    static final String DFA60_acceptS =
        "\3\uffff\1\2\1\1";
    static final String DFA60_specialS =
        "\2\uffff\1\0\2\uffff}>";
    static final String[] DFA60_transitionS = {
            "\1\3\1\2\1\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3"+
            "\3\uffff\1\3\1\uffff\23\3\1\uffff\2\3\1\uffff\12\3\1\uffff\1"+
            "\3\6\uffff\2\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\3\1\2\1\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3"+
            "\3\3\uffff\1\3\1\uffff\23\3\1\uffff\2\3\1\uffff\12\3\1\uffff"+
            "\1\3\6\uffff\2\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_eotS);
    static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_eofS);
    static final char[] DFA60_min = DFA.unpackEncodedStringToUnsignedChars(DFA60_minS);
    static final char[] DFA60_max = DFA.unpackEncodedStringToUnsignedChars(DFA60_maxS);
    static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_acceptS);
    static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_specialS);
    static final short[][] DFA60_transition;

    static {
        int numStates = DFA60_transitionS.length;
        DFA60_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA60_transition[i] = DFA.unpackEncodedString(DFA60_transitionS[i]);
        }
    }

    class DFA60 extends DFA {

        public DFA60(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = DFA60_eot;
            this.eof = DFA60_eof;
            this.min = DFA60_min;
            this.max = DFA60_max;
            this.accept = DFA60_accept;
            this.special = DFA60_special;
            this.transition = DFA60_transition;
        }
        public String getDescription() {
            return "446:21: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA60_2 = input.LA(1);

                         
                        int index60_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_Css3()) ) {s = 4;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index60_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 60, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA64_eotS =
        "\63\uffff";
    static final String DFA64_eofS =
        "\56\uffff\1\15\3\uffff\1\15";
    static final String DFA64_minS =
        "\1\4\1\6\2\25\1\uffff\1\4\2\6\1\15\1\10\2\6\1\7\1\uffff\6\25\3\6"+
        "\1\4\1\uffff\1\6\1\4\1\6\1\15\1\10\2\6\1\7\1\uffff\5\4\2\6\4\uffff"+
        "\1\0\1\4\3\uffff\1\4";
    static final String DFA64_maxS =
        "\2\156\2\126\1\uffff\1\144\7\126\1\uffff\6\126\1\156\2\126\1\144"+
        "\1\uffff\1\126\1\144\6\126\1\uffff\5\144\1\126\1\156\4\uffff\1\0"+
        "\1\156\3\uffff\1\156";
    static final String DFA64_acceptS =
        "\4\uffff\1\4\10\uffff\1\6\12\uffff\1\5\10\uffff\1\7\7\uffff\1\1"+
        "\1\2\1\3\1\1\2\uffff\1\10\1\11\1\12\1\uffff";
    static final String DFA64_specialS =
        "\24\uffff\1\0\1\2\22\uffff\1\1\4\uffff\1\3\5\uffff}>";
    static final String[] DFA64_transitionS = {
            "\1\15\1\uffff\1\4\2\uffff\1\15\1\14\1\4\1\5\5\uffff\1\4\2\uffff"+
            "\1\4\1\13\1\11\3\uffff\1\12\1\uffff\1\6\1\7\1\10\20\15\1\uffff"+
            "\2\4\1\uffff\4\4\1\1\5\4\1\uffff\1\4\6\uffff\1\4\1\15\20\uffff"+
            "\1\15\1\2\1\3\1\15\2\16\1\17\1\15\1\20\1\23\1\15\1\21\1\22\11"+
            "\uffff\1\4",
            "\1\24\4\uffff\1\4\1\uffff\1\4\4\uffff\1\4\2\uffff\1\4\33\uffff"+
            "\1\4\2\uffff\1\4\1\uffff\4\4\2\uffff\1\4\2\uffff\1\4\6\uffff"+
            "\1\4\15\uffff\3\4\27\uffff\1\4",
            "\1\15\76\uffff\3\25",
            "\1\15\76\uffff\3\26",
            "",
            "\1\30\1\uffff\1\30\2\uffff\2\30\1\uffff\1\30\3\uffff\4\30\1"+
            "\uffff\1\15\2\30\3\uffff\1\30\1\uffff\23\30\6\uffff\1\30\20"+
            "\uffff\1\30\14\uffff\3\27\1\uffff\15\30",
            "\1\30\6\uffff\1\30\7\uffff\1\32\76\uffff\3\31",
            "\1\30\16\uffff\1\15\76\uffff\3\33",
            "\1\30\7\uffff\1\15\76\uffff\3\34",
            "\1\30\14\uffff\1\15\2\uffff\3\30\71\uffff\3\35",
            "\2\30\15\uffff\1\15\76\uffff\3\36",
            "\2\30\5\uffff\1\30\7\uffff\1\15\76\uffff\3\37",
            "\2\41\14\uffff\1\15\76\uffff\3\40",
            "",
            "\1\15\76\uffff\3\42",
            "\1\15\76\uffff\3\43",
            "\1\15\76\uffff\3\44",
            "\1\15\76\uffff\3\45",
            "\1\15\76\uffff\3\46",
            "\1\15\76\uffff\3\47",
            "\1\4\4\uffff\1\4\1\uffff\1\4\4\uffff\1\4\1\51\1\uffff\1\4\33"+
            "\uffff\2\4\1\uffff\12\4\1\uffff\1\4\6\uffff\1\4\15\uffff\3\50"+
            "\27\uffff\1\4",
            "\1\54\16\uffff\1\15\76\uffff\3\25",
            "\1\55\16\uffff\1\15\76\uffff\3\26",
            "\1\30\1\uffff\1\30\2\uffff\2\30\1\uffff\1\30\3\uffff\4\30\1"+
            "\uffff\1\15\2\30\3\uffff\1\30\1\uffff\23\30\6\uffff\1\30\20"+
            "\uffff\1\30\14\uffff\3\27\1\uffff\15\30",
            "",
            "\1\30\6\uffff\1\30\7\uffff\1\32\76\uffff\3\31",
            "\1\15\1\uffff\1\56\4\15\1\uffff\1\15\4\uffff\3\15\2\uffff\2"+
            "\15\3\uffff\25\15\1\uffff\3\15\1\uffff\3\15\17\uffff\20\15\1"+
            "\uffff\15\15",
            "\1\30\16\uffff\1\15\76\uffff\3\33",
            "\1\30\7\uffff\1\15\76\uffff\3\34",
            "\1\30\14\uffff\1\15\2\uffff\3\30\71\uffff\3\35",
            "\2\30\15\uffff\1\15\76\uffff\3\36",
            "\2\30\5\uffff\1\30\7\uffff\1\15\76\uffff\3\37",
            "\2\41\14\uffff\1\15\76\uffff\3\40",
            "",
            "\1\57\1\uffff\5\57\1\uffff\1\57\4\uffff\3\57\1\uffff\1\15\2"+
            "\57\3\uffff\25\57\1\uffff\3\57\1\uffff\3\57\17\uffff\15\57\3"+
            "\42\1\uffff\15\57",
            "\1\60\1\uffff\5\60\1\uffff\1\60\4\uffff\3\60\1\uffff\1\15\2"+
            "\60\3\uffff\25\60\1\uffff\3\60\1\uffff\3\60\17\uffff\15\60\3"+
            "\43\1\uffff\15\60",
            "\1\60\4\uffff\2\60\1\uffff\1\60\10\uffff\1\15\2\60\3\uffff"+
            "\1\60\1\uffff\23\60\27\uffff\1\60\14\uffff\3\44\1\uffff\15\60",
            "\1\60\4\uffff\2\60\1\uffff\1\60\10\uffff\1\15\2\60\3\uffff"+
            "\1\60\1\uffff\23\60\27\uffff\1\60\14\uffff\3\45\1\uffff\15\60",
            "\1\60\1\uffff\5\60\1\uffff\1\60\4\uffff\3\60\1\uffff\1\15\2"+
            "\60\3\uffff\25\60\1\uffff\3\60\1\uffff\3\60\17\uffff\15\60\3"+
            "\46\1\uffff\15\60",
            "\1\61\16\uffff\1\15\76\uffff\3\47",
            "\1\4\4\uffff\1\4\1\uffff\1\4\4\uffff\1\4\1\51\1\uffff\1\4\33"+
            "\uffff\2\4\1\uffff\12\4\1\uffff\1\4\6\uffff\1\4\15\uffff\3\50"+
            "\27\uffff\1\4",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\11\15\1\30\2\15\1\uffff\3\15\1\uffff\3\15\3\uffff\43\15\1"+
            "\uffff\1\15\6\uffff\16\15\3\62\24\15\3\uffff\1\15",
            "",
            "",
            "",
            "\11\15\1\30\2\15\1\uffff\3\15\1\uffff\3\15\3\uffff\43\15\1"+
            "\uffff\1\15\6\uffff\16\15\3\62\24\15\3\uffff\1\15"
    };

    static final short[] DFA64_eot = DFA.unpackEncodedString(DFA64_eotS);
    static final short[] DFA64_eof = DFA.unpackEncodedString(DFA64_eofS);
    static final char[] DFA64_min = DFA.unpackEncodedStringToUnsignedChars(DFA64_minS);
    static final char[] DFA64_max = DFA.unpackEncodedStringToUnsignedChars(DFA64_maxS);
    static final short[] DFA64_accept = DFA.unpackEncodedString(DFA64_acceptS);
    static final short[] DFA64_special = DFA.unpackEncodedString(DFA64_specialS);
    static final short[][] DFA64_transition;

    static {
        int numStates = DFA64_transitionS.length;
        DFA64_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA64_transition[i] = DFA.unpackEncodedString(DFA64_transitionS[i]);
        }
    }

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = DFA64_eot;
            this.eof = DFA64_eof;
            this.min = DFA64_min;
            this.max = DFA64_max;
            this.accept = DFA64_accept;
            this.special = DFA64_special;
            this.transition = DFA64_transition;
        }
        public String getDescription() {
            return "452:1: bodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | {...}? ( cp_mixin_call ( ws )? SEMI )=> cp_mixin_call | {...}? ( cp_mixin_call )=> cp_mixin_call | rule | at_rule | {...}? cp_variable_declaration | {...}? importItem | {...}? sass_debug | {...}? sass_control | {...}? sass_function_declaration );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA64_20 = input.LA(1);

                         
                        int index64_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA64_20>=WS && LA64_20<=COMMENT)) ) {s = 40;}

                        else if ( (LA64_20==LPAREN) && (synpred10_Css3())) {s = 41;}

                        else if ( (LA64_20==IDENT||LA64_20==COMMA||LA64_20==LBRACE||LA64_20==GEN||LA64_20==COLON||(LA64_20>=MINUS && LA64_20<=PLUS)||(LA64_20>=GREATER && LA64_20<=PIPE)||LA64_20==LESS_AND||LA64_20==RBRACKET||LA64_20==AT_SIGN) ) {s = 4;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 42;}

                        else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 43;}

                         
                        input.seek(index64_20);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA64_40 = input.LA(1);

                         
                        int index64_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA64_40==LPAREN) && (synpred10_Css3())) {s = 41;}

                        else if ( ((LA64_40>=WS && LA64_40<=COMMENT)) ) {s = 40;}

                        else if ( (LA64_40==IDENT||LA64_40==COMMA||LA64_40==LBRACE||LA64_40==GEN||LA64_40==COLON||(LA64_40>=MINUS && LA64_40<=PLUS)||(LA64_40>=GREATER && LA64_40<=PIPE)||LA64_40==LESS_AND||LA64_40==RBRACKET||LA64_40==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index64_40);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA64_21 = input.LA(1);

                         
                        int index64_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA64_21==IDENT) && (synpred10_Css3())) {s = 44;}

                        else if ( ((LA64_21>=WS && LA64_21<=COMMENT)) ) {s = 21;}

                        else if ( (LA64_21==COLON) ) {s = 13;}

                         
                        input.seek(index64_21);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA64_45 = input.LA(1);

                         
                        int index64_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 42;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 43;}

                         
                        input.seek(index64_45);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 64, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA87_eotS =
        "\4\uffff";
    static final String DFA87_eofS =
        "\4\uffff";
    static final String DFA87_minS =
        "\2\13\2\uffff";
    static final String DFA87_maxS =
        "\2\126\2\uffff";
    static final String DFA87_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA87_specialS =
        "\4\uffff}>";
    static final String[] DFA87_transitionS = {
            "\1\3\1\uffff\1\2\106\uffff\3\1",
            "\1\3\1\uffff\1\2\106\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "()* loopback of 526:25: ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA94_eotS =
        "\5\uffff";
    static final String DFA94_eofS =
        "\5\uffff";
    static final String DFA94_minS =
        "\1\4\1\uffff\2\15\1\uffff";
    static final String DFA94_maxS =
        "\1\144\1\uffff\2\126\1\uffff";
    static final String DFA94_acceptS =
        "\1\uffff\1\1\2\uffff\1\2";
    static final String DFA94_specialS =
        "\5\uffff}>";
    static final String[] DFA94_transitionS = {
            "\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\5\uffff\1\1\3\uffff"+
            "\2\1\3\uffff\1\1\1\uffff\3\1\20\2\1\uffff\1\1\4\uffff\3\1\3"+
            "\uffff\1\1\12\uffff\1\1\20\uffff\15\1",
            "",
            "\1\4\7\uffff\1\1\76\uffff\3\3",
            "\1\4\7\uffff\1\1\76\uffff\3\3",
            ""
    };

    static final short[] DFA94_eot = DFA.unpackEncodedString(DFA94_eotS);
    static final short[] DFA94_eof = DFA.unpackEncodedString(DFA94_eofS);
    static final char[] DFA94_min = DFA.unpackEncodedStringToUnsignedChars(DFA94_minS);
    static final char[] DFA94_max = DFA.unpackEncodedStringToUnsignedChars(DFA94_maxS);
    static final short[] DFA94_accept = DFA.unpackEncodedString(DFA94_acceptS);
    static final short[] DFA94_special = DFA.unpackEncodedString(DFA94_specialS);
    static final short[][] DFA94_transition;

    static {
        int numStates = DFA94_transitionS.length;
        DFA94_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA94_transition[i] = DFA.unpackEncodedString(DFA94_transitionS[i]);
        }
    }

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = DFA94_eot;
            this.eof = DFA94_eof;
            this.min = DFA94_min;
            this.max = DFA94_max;
            this.accept = DFA94_accept;
            this.special = DFA94_special;
            this.transition = DFA94_transition;
        }
        public String getDescription() {
            return "534:14: ( propertyDeclaration | margin )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA98_eotS =
        "\5\uffff";
    static final String DFA98_eofS =
        "\5\uffff";
    static final String DFA98_minS =
        "\1\4\1\uffff\2\15\1\uffff";
    static final String DFA98_maxS =
        "\1\144\1\uffff\2\126\1\uffff";
    static final String DFA98_acceptS =
        "\1\uffff\1\1\2\uffff\1\2";
    static final String DFA98_specialS =
        "\5\uffff}>";
    static final String[] DFA98_transitionS = {
            "\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\5\uffff\1\1\3\uffff"+
            "\2\1\3\uffff\1\1\1\uffff\3\1\20\2\1\uffff\1\1\4\uffff\3\1\3"+
            "\uffff\1\1\12\uffff\1\1\20\uffff\15\1",
            "",
            "\1\4\7\uffff\1\1\76\uffff\3\3",
            "\1\4\7\uffff\1\1\76\uffff\3\3",
            ""
    };

    static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_eotS);
    static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_eofS);
    static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_minS);
    static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_maxS);
    static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_acceptS);
    static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_specialS);
    static final short[][] DFA98_transition;

    static {
        int numStates = DFA98_transitionS.length;
        DFA98_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA98_transition[i] = DFA.unpackEncodedString(DFA98_transitionS[i]);
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;
        }
        public String getDescription() {
            return "534:60: ( propertyDeclaration | margin )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA117_eotS =
        "\5\uffff";
    static final String DFA117_eofS =
        "\5\uffff";
    static final String DFA117_minS =
        "\2\4\1\0\2\uffff";
    static final String DFA117_maxS =
        "\2\156\1\0\2\uffff";
    static final String DFA117_acceptS =
        "\3\uffff\1\2\1\1";
    static final String DFA117_specialS =
        "\2\uffff\1\0\2\uffff}>";
    static final String[] DFA117_transitionS = {
            "\1\3\1\2\1\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3"+
            "\3\uffff\1\3\1\uffff\23\3\1\uffff\2\3\1\uffff\12\3\1\uffff\1"+
            "\3\6\uffff\2\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\3\1\2\1\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3"+
            "\3\3\uffff\1\3\1\uffff\23\3\1\uffff\2\3\1\uffff\12\3\1\uffff"+
            "\1\3\6\uffff\2\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "621:24: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA117_2 = input.LA(1);

                         
                        int index117_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_Css3()) ) {s = 4;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index117_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA123_eotS =
        "\64\uffff";
    static final String DFA123_eofS =
        "\64\uffff";
    static final String DFA123_minS =
        "\1\4\12\0\7\uffff\1\0\3\uffff\20\0\16\uffff";
    static final String DFA123_maxS =
        "\1\156\12\0\7\uffff\1\0\3\uffff\20\0\16\uffff";
    static final String DFA123_acceptS =
        "\13\uffff\7\7\1\uffff\3\7\20\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\17"+
        "\1\10\1\11\1\12\1\13\1\14\1\15\1\16";
    static final String DFA123_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\7\uffff\1\13\3\uffff"+
        "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\16\uffff}>";
    static final String[] DFA123_transitionS = {
            "\1\45\1\uffff\1\4\2\uffff\1\45\1\44\1\24\1\12\5\uffff\1\6\2"+
            "\uffff\1\23\1\33\1\31\3\uffff\1\32\1\uffff\1\26\1\27\1\30\20"+
            "\45\1\uffff\1\22\1\15\1\uffff\1\13\1\15\1\3\1\10\1\5\1\17\1"+
            "\25\1\20\1\7\1\16\1\uffff\1\14\6\uffff\1\24\1\2\20\uffff\1\42"+
            "\1\1\1\11\1\40\2\41\1\34\1\45\1\35\1\45\1\43\1\36\1\37\11\uffff"+
            "\1\21",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "627:1: declaration : ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( selectorsGroup ( ws )? LBRACE )=> rule | {...}? at_rule | {...}? sass_control | {...}? sass_extend | {...}? sass_debug | {...}? sass_content | {...}? sass_function_return | {...}? importItem | GEN );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA123_0 = input.LA(1);

                         
                        int index123_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA123_0==SASS_MIXIN) ) {s = 1;}

                        else if ( (LA123_0==SASS_VAR) ) {s = 2;}

                        else if ( (LA123_0==HASH_SYMBOL) ) {s = 3;}

                        else if ( (LA123_0==IDENT) ) {s = 4;}

                        else if ( (LA123_0==DOT) ) {s = 5;}

                        else if ( (LA123_0==GEN) ) {s = 6;}

                        else if ( (LA123_0==STAR) ) {s = 7;}

                        else if ( (LA123_0==HASH) ) {s = 8;}

                        else if ( (LA123_0==SASS_INCLUDE) ) {s = 9;}

                        else if ( (LA123_0==MEDIA_SYM) ) {s = 10;}

                        else if ( (LA123_0==GREATER) && (synpred21_Css3())) {s = 11;}

                        else if ( (LA123_0==LESS_AND) && (synpred21_Css3())) {s = 12;}

                        else if ( (LA123_0==PLUS||LA123_0==TILDE) && (synpred21_Css3())) {s = 13;}

                        else if ( (LA123_0==PIPE) && (synpred21_Css3())) {s = 14;}

                        else if ( (LA123_0==LBRACKET) && (synpred21_Css3())) {s = 15;}

                        else if ( (LA123_0==SASS_EXTEND_ONLY_SELECTOR) && (synpred21_Css3())) {s = 16;}

                        else if ( (LA123_0==AT_SIGN) && (synpred21_Css3())) {s = 17;}

                        else if ( (LA123_0==MINUS) ) {s = 18;}

                        else if ( (LA123_0==COLON) && (synpred21_Css3())) {s = 19;}

                        else if ( (LA123_0==COMMA||LA123_0==RBRACKET) && (synpred21_Css3())) {s = 20;}

                        else if ( (LA123_0==DCOLON) && (synpred21_Css3())) {s = 21;}

                        else if ( (LA123_0==PAGE_SYM) ) {s = 22;}

                        else if ( (LA123_0==COUNTER_STYLE_SYM) ) {s = 23;}

                        else if ( (LA123_0==FONT_FACE_SYM) ) {s = 24;}

                        else if ( (LA123_0==MOZ_DOCUMENT_SYM) ) {s = 25;}

                        else if ( (LA123_0==WEBKIT_KEYFRAMES_SYM) ) {s = 26;}

                        else if ( (LA123_0==AT_IDENT) ) {s = 27;}

                        else if ( (LA123_0==SASS_IF) ) {s = 28;}

                        else if ( (LA123_0==SASS_FOR) ) {s = 29;}

                        else if ( (LA123_0==SASS_EACH) ) {s = 30;}

                        else if ( (LA123_0==SASS_WHILE) ) {s = 31;}

                        else if ( (LA123_0==SASS_EXTEND) ) {s = 32;}

                        else if ( ((LA123_0>=SASS_DEBUG && LA123_0<=SASS_WARN)) ) {s = 33;}

                        else if ( (LA123_0==SASS_CONTENT) ) {s = 34;}

                        else if ( (LA123_0==SASS_RETURN) ) {s = 35;}

                        else if ( (LA123_0==IMPORT_SYM) ) {s = 36;}

                        else if ( (LA123_0==NAMESPACE_SYM||LA123_0==CHARSET_SYM||(LA123_0>=TOPLEFTCORNER_SYM && LA123_0<=RIGHTBOTTOM_SYM)||LA123_0==SASS_ELSE||LA123_0==SASS_FUNCTION) ) {s = 37;}

                         
                        input.seek(index123_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA123_1 = input.LA(1);

                         
                        int index123_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( ((synpred19_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 42;}

                         
                        input.seek(index123_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA123_2 = input.LA(1);

                         
                        int index123_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 39;}

                        else if ( ((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||(((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 40;}

                        else if ( (((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 41;}

                         
                        input.seek(index123_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA123_3 = input.LA(1);

                         
                        int index123_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Css3()) ) {s = 39;}

                        else if ( ((synpred17_Css3()||(synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 40;}

                        else if ( ((synpred18_Css3()||(synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 41;}

                        else if ( (synpred21_Css3()) ) {s = 21;}

                         
                        input.seek(index123_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA123_4 = input.LA(1);

                         
                        int index123_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Css3()) ) {s = 39;}

                        else if ( ((synpred17_Css3()||(synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 40;}

                        else if ( ((synpred18_Css3()||(synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 41;}

                        else if ( (synpred21_Css3()) ) {s = 21;}

                         
                        input.seek(index123_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA123_5 = input.LA(1);

                         
                        int index123_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Css3()) ) {s = 39;}

                        else if ( ((synpred17_Css3()||(synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 40;}

                        else if ( ((synpred18_Css3()||(synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 41;}

                        else if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 42;}

                        else if ( ((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 43;}

                        else if ( (synpred21_Css3()) ) {s = 21;}

                         
                        input.seek(index123_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA123_6 = input.LA(1);

                         
                        int index123_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Css3()) ) {s = 39;}

                        else if ( ((synpred17_Css3()||(synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 40;}

                        else if ( ((synpred18_Css3()||(synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 41;}

                        else if ( (synpred21_Css3()) ) {s = 21;}

                        else if ( (true) ) {s = 44;}

                         
                        input.seek(index123_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA123_7 = input.LA(1);

                         
                        int index123_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred17_Css3()||(synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 40;}

                        else if ( ((synpred18_Css3()||(synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 41;}

                        else if ( (synpred21_Css3()) ) {s = 21;}

                         
                        input.seek(index123_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA123_8 = input.LA(1);

                         
                        int index123_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Css3()) ) {s = 39;}

                        else if ( ((synpred17_Css3()||(synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 40;}

                        else if ( ((synpred18_Css3()||(synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 41;}

                        else if ( (synpred21_Css3()) ) {s = 21;}

                         
                        input.seek(index123_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA123_9 = input.LA(1);

                         
                        int index123_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( ((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 43;}

                         
                        input.seek(index123_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA123_10 = input.LA(1);

                         
                        int index123_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 45;}

                         
                        input.seek(index123_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA123_18 = input.LA(1);

                         
                        int index123_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Css3()) ) {s = 39;}

                        else if ( ((synpred17_Css3()||(synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 40;}

                        else if ( ((synpred18_Css3()||(synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 41;}

                        else if ( (synpred21_Css3()) ) {s = 21;}

                         
                        input.seek(index123_18);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA123_22 = input.LA(1);

                         
                        int index123_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 45;}

                         
                        input.seek(index123_22);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA123_23 = input.LA(1);

                         
                        int index123_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 45;}

                         
                        input.seek(index123_23);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA123_24 = input.LA(1);

                         
                        int index123_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 45;}

                         
                        input.seek(index123_24);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA123_25 = input.LA(1);

                         
                        int index123_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 45;}

                         
                        input.seek(index123_25);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA123_26 = input.LA(1);

                         
                        int index123_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 45;}

                         
                        input.seek(index123_26);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA123_27 = input.LA(1);

                         
                        int index123_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 45;}

                         
                        input.seek(index123_27);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA123_28 = input.LA(1);

                         
                        int index123_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 46;}

                         
                        input.seek(index123_28);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA123_29 = input.LA(1);

                         
                        int index123_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 46;}

                         
                        input.seek(index123_29);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA123_30 = input.LA(1);

                         
                        int index123_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 46;}

                         
                        input.seek(index123_30);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA123_31 = input.LA(1);

                         
                        int index123_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 46;}

                         
                        input.seek(index123_31);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA123_32 = input.LA(1);

                         
                        int index123_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 47;}

                         
                        input.seek(index123_32);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA123_33 = input.LA(1);

                         
                        int index123_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 48;}

                         
                        input.seek(index123_33);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA123_34 = input.LA(1);

                         
                        int index123_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 49;}

                         
                        input.seek(index123_34);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA123_35 = input.LA(1);

                         
                        int index123_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 50;}

                         
                        input.seek(index123_35);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA123_36 = input.LA(1);

                         
                        int index123_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 51;}

                         
                        input.seek(index123_36);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA123_37 = input.LA(1);

                         
                        int index123_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                         
                        input.seek(index123_37);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 123, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA122_eotS =
        "\4\uffff";
    static final String DFA122_eofS =
        "\4\uffff";
    static final String DFA122_minS =
        "\2\4\2\uffff";
    static final String DFA122_maxS =
        "\2\156\2\uffff";
    static final String DFA122_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA122_specialS =
        "\4\uffff}>";
    static final String[] DFA122_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\2\3\1\2\12\3\1\uffff\1\3\6\uffff\2"+
            "\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\2\3\1\2\12\3\1\uffff\1\3\6\uffff\2"+
            "\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA122_eot = DFA.unpackEncodedString(DFA122_eotS);
    static final short[] DFA122_eof = DFA.unpackEncodedString(DFA122_eofS);
    static final char[] DFA122_min = DFA.unpackEncodedStringToUnsignedChars(DFA122_minS);
    static final char[] DFA122_max = DFA.unpackEncodedStringToUnsignedChars(DFA122_maxS);
    static final short[] DFA122_accept = DFA.unpackEncodedString(DFA122_acceptS);
    static final short[] DFA122_special = DFA.unpackEncodedString(DFA122_specialS);
    static final short[][] DFA122_transition;

    static {
        int numStates = DFA122_transitionS.length;
        DFA122_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA122_transition[i] = DFA.unpackEncodedString(DFA122_transitionS[i]);
        }
    }

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = DFA122_eot;
            this.eof = DFA122_eof;
            this.min = DFA122_min;
            this.max = DFA122_max;
            this.accept = DFA122_accept;
            this.special = DFA122_special;
            this.transition = DFA122_transition;
        }
        public String getDescription() {
            return "635:38: ( ( ws )? IMPORTANT_SYM )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA127_eotS =
        "\43\uffff";
    static final String DFA127_eofS =
        "\43\uffff";
    static final String DFA127_minS =
        "\3\6\1\0\1\uffff\3\0\3\6\5\uffff\2\6\1\0\1\uffff\3\0\3\6\1\0\3\6"+
        "\1\0\1\uffff\2\6\1\0";
    static final String DFA127_maxS =
        "\3\156\1\0\1\uffff\3\0\1\156\2\126\5\uffff\2\156\1\0\1\uffff\3\0"+
        "\1\156\2\126\1\0\3\126\1\0\1\uffff\2\126\1\0";
    static final String DFA127_acceptS =
        "\4\uffff\1\2\6\uffff\5\1\3\uffff\1\1\13\uffff\1\1\3\uffff";
    static final String DFA127_specialS =
        "\1\2\1\20\1\1\1\10\1\uffff\1\5\1\27\1\0\1\24\1\4\1\32\5\uffff\1"+
        "\25\1\30\1\6\1\uffff\1\14\1\22\1\31\1\12\1\26\1\21\1\13\1\7\1\3"+
        "\1\17\1\11\1\uffff\1\16\1\15\1\23}>";
    static final String[] DFA127_transitionS = {
            "\1\3\4\uffff\1\13\6\uffff\1\4\2\uffff\1\12\33\uffff\1\13\1\4"+
            "\1\uffff\1\2\1\4\1\1\1\7\1\10\1\11\2\4\1\5\1\4\1\uffff\1\6\6"+
            "\uffff\1\13\47\uffff\1\4",
            "\1\17\4\uffff\1\17\1\uffff\1\14\7\uffff\1\17\33\uffff\1\17"+
            "\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\1\uffff\1\4\1\17"+
            "\6\uffff\1\17\15\uffff\3\15\27\uffff\1\4",
            "\1\22\4\uffff\1\17\1\uffff\1\23\4\uffff\1\4\2\uffff\1\31\33"+
            "\uffff\1\17\2\uffff\1\17\1\uffff\1\21\1\26\1\27\1\30\2\4\1\24"+
            "\1\4\1\uffff\1\25\6\uffff\1\17\15\uffff\3\20\27\uffff\1\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\32\4\uffff\1\17\1\uffff\1\23\4\uffff\1\4\2\uffff\1\17\33"+
            "\uffff\1\17\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff"+
            "\1\17\6\uffff\1\17\15\uffff\3\15\27\uffff\1\4",
            "\1\34\4\uffff\1\17\1\uffff\1\23\7\uffff\1\17\33\uffff\1\17"+
            "\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\35\1\4\1\uffff\1\17"+
            "\6\uffff\1\17\15\uffff\3\33",
            "\1\36\4\uffff\1\17\1\uffff\1\23\3\uffff\2\4\2\uffff\1\17\33"+
            "\uffff\1\17\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff"+
            "\1\17\6\uffff\1\17\15\uffff\3\15",
            "",
            "",
            "",
            "",
            "",
            "\1\22\4\uffff\1\17\1\uffff\1\23\4\uffff\1\4\2\uffff\1\31\33"+
            "\uffff\1\17\2\uffff\1\17\1\uffff\1\21\1\26\1\27\1\30\2\4\1\24"+
            "\1\4\1\uffff\1\25\6\uffff\1\17\15\uffff\3\20\27\uffff\1\4",
            "\1\17\4\uffff\1\17\1\uffff\1\37\7\uffff\1\17\33\uffff\1\17"+
            "\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\1\uffff\1\4\1\17"+
            "\6\uffff\1\17\15\uffff\3\15\27\uffff\1\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\32\4\uffff\1\17\1\uffff\1\23\4\uffff\1\4\2\uffff\1\17\33"+
            "\uffff\1\17\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff"+
            "\1\17\6\uffff\1\17\15\uffff\3\15\27\uffff\1\4",
            "\1\34\4\uffff\1\17\1\uffff\1\23\7\uffff\1\17\33\uffff\1\17"+
            "\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\35\1\4\1\uffff\1\17"+
            "\6\uffff\1\17\15\uffff\3\33",
            "\1\36\4\uffff\1\17\1\uffff\1\23\3\uffff\2\4\2\uffff\1\17\33"+
            "\uffff\1\17\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff"+
            "\1\17\6\uffff\1\17\15\uffff\3\15",
            "\1\uffff",
            "\1\40\4\uffff\1\17\1\uffff\1\23\7\uffff\1\17\33\uffff\1\17"+
            "\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff\1\17\6"+
            "\uffff\1\17\15\uffff\3\33",
            "\1\17\4\uffff\1\17\1\uffff\1\23\7\uffff\1\17\33\uffff\1\17"+
            "\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\1\4\1\uffff\1\17"+
            "\6\4\1\42\15\uffff\3\41",
            "\1\17\4\uffff\1\17\1\uffff\1\23\7\uffff\1\17\33\uffff\1\17"+
            "\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\1\4\1\uffff\1\17"+
            "\6\uffff\1\17\15\uffff\3\15",
            "\1\uffff",
            "",
            "\1\17\4\uffff\1\17\1\uffff\1\23\7\uffff\1\17\33\uffff\1\17"+
            "\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff\1\17\6"+
            "\4\1\42\15\uffff\3\41",
            "\1\17\4\uffff\1\17\1\uffff\1\23\7\uffff\1\17\33\uffff\1\17"+
            "\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff\1\17\6"+
            "\4\1\42\15\uffff\3\41",
            "\1\uffff"
    };

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "651:1: selectorsGroup : ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( ( ws )? COMMA ( ws )? selector )* );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA127_7 = input.LA(1);

                         
                        int index127_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index127_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA127_2 = input.LA(1);

                         
                        int index127_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA127_2>=WS && LA127_2<=COMMENT)) ) {s = 16;}

                        else if ( (LA127_2==HASH_SYMBOL) ) {s = 17;}

                        else if ( (LA127_2==IDENT) ) {s = 18;}

                        else if ( (LA127_2==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA127_2==STAR) ) {s = 20;}

                        else if ( (LA127_2==LESS_AND) ) {s = 21;}

                        else if ( (LA127_2==GEN||(LA127_2>=DCOLON && LA127_2<=SASS_EXTEND_ONLY_SELECTOR)||LA127_2==PIPE||LA127_2==AT_SIGN) ) {s = 4;}

                        else if ( (LA127_2==HASH) ) {s = 22;}

                        else if ( (LA127_2==DOT) ) {s = 23;}

                        else if ( (LA127_2==LBRACKET) ) {s = 24;}

                        else if ( (LA127_2==COLON) ) {s = 25;}

                        else if ( (LA127_2==COMMA||LA127_2==MINUS||LA127_2==GREATER||LA127_2==RBRACKET) && (synpred22_Css3())) {s = 15;}

                         
                        input.seek(index127_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA127_0 = input.LA(1);

                         
                        int index127_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA127_0==HASH_SYMBOL) ) {s = 1;}

                        else if ( (LA127_0==GREATER) ) {s = 2;}

                        else if ( (LA127_0==IDENT) ) {s = 3;}

                        else if ( (LA127_0==GEN||LA127_0==PLUS||LA127_0==TILDE||(LA127_0>=DCOLON && LA127_0<=SASS_EXTEND_ONLY_SELECTOR)||LA127_0==PIPE||LA127_0==AT_SIGN) ) {s = 4;}

                        else if ( (LA127_0==STAR) ) {s = 5;}

                        else if ( (LA127_0==LESS_AND) ) {s = 6;}

                        else if ( (LA127_0==HASH) ) {s = 7;}

                        else if ( (LA127_0==DOT) ) {s = 8;}

                        else if ( (LA127_0==LBRACKET) ) {s = 9;}

                        else if ( (LA127_0==COLON) ) {s = 10;}

                        else if ( (LA127_0==COMMA||LA127_0==MINUS||LA127_0==RBRACKET) && (synpred22_Css3())) {s = 11;}

                         
                        input.seek(index127_0);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA127_28 = input.LA(1);

                         
                        int index127_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA127_28>=WS && LA127_28<=COMMENT)) ) {s = 33;}

                        else if ( (LA127_28==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA127_28==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA127_28==RBRACKET) ) {s = 34;}

                        else if ( (LA127_28==PIPE||(LA127_28>=OPEQ && LA127_28<=CONTAINS)) ) {s = 4;}

                        else if ( (LA127_28==IDENT||LA127_28==COMMA||LA127_28==COLON||LA127_28==MINUS||LA127_28==GREATER||(LA127_28>=HASH && LA127_28<=LBRACKET)||LA127_28==STAR||LA127_28==LESS_AND) && (synpred22_Css3())) {s = 15;}

                         
                        input.seek(index127_28);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA127_9 = input.LA(1);

                         
                        int index127_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA127_9>=WS && LA127_9<=COMMENT)) ) {s = 27;}

                        else if ( (LA127_9==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA127_9==IDENT) ) {s = 28;}

                        else if ( (LA127_9==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA127_9==STAR) ) {s = 29;}

                        else if ( (LA127_9==COMMA||LA127_9==COLON||LA127_9==MINUS||LA127_9==GREATER||(LA127_9>=HASH && LA127_9<=LBRACKET)||LA127_9==LESS_AND||LA127_9==RBRACKET) && (synpred22_Css3())) {s = 15;}

                        else if ( (LA127_9==PIPE) ) {s = 4;}

                         
                        input.seek(index127_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA127_5 = input.LA(1);

                         
                        int index127_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index127_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA127_18 = input.LA(1);

                         
                        int index127_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index127_18);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA127_27 = input.LA(1);

                         
                        int index127_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA127_27==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA127_27==IDENT) ) {s = 32;}

                        else if ( ((LA127_27>=WS && LA127_27<=COMMENT)) ) {s = 27;}

                        else if ( (LA127_27==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA127_27==COMMA||LA127_27==COLON||LA127_27==MINUS||LA127_27==GREATER||(LA127_27>=HASH && LA127_27<=LBRACKET)||LA127_27==STAR||LA127_27==LESS_AND||LA127_27==RBRACKET) && (synpred22_Css3())) {s = 15;}

                         
                        input.seek(index127_27);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA127_3 = input.LA(1);

                         
                        int index127_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index127_3);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA127_30 = input.LA(1);

                         
                        int index127_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index127_30);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA127_23 = input.LA(1);

                         
                        int index127_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA127_23>=WS && LA127_23<=COMMENT)) && (synpred22_Css3())) {s = 13;}

                        else if ( (LA127_23==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA127_23==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA127_23==IDENT) ) {s = 26;}

                        else if ( (LA127_23==COMMA||LA127_23==COLON||LA127_23==MINUS||LA127_23==GREATER||(LA127_23>=HASH && LA127_23<=LBRACKET)||LA127_23==STAR||LA127_23==LESS_AND||LA127_23==RBRACKET) && (synpred22_Css3())) {s = 15;}

                        else if ( (LA127_23==GEN||LA127_23==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index127_23);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA127_26 = input.LA(1);

                         
                        int index127_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index127_26);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA127_20 = input.LA(1);

                         
                        int index127_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index127_20);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA127_33 = input.LA(1);

                         
                        int index127_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA127_33==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( ((LA127_33>=WS && LA127_33<=COMMENT)) ) {s = 33;}

                        else if ( (LA127_33==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA127_33==RBRACKET) ) {s = 34;}

                        else if ( ((LA127_33>=OPEQ && LA127_33<=CONTAINS)) ) {s = 4;}

                        else if ( (LA127_33==IDENT||LA127_33==COMMA||LA127_33==COLON||LA127_33==MINUS||LA127_33==GREATER||(LA127_33>=HASH && LA127_33<=LBRACKET)||LA127_33==STAR||LA127_33==LESS_AND) && (synpred22_Css3())) {s = 15;}

                         
                        input.seek(index127_33);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA127_32 = input.LA(1);

                         
                        int index127_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA127_32>=WS && LA127_32<=COMMENT)) ) {s = 33;}

                        else if ( (LA127_32==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA127_32==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA127_32==RBRACKET) ) {s = 34;}

                        else if ( ((LA127_32>=OPEQ && LA127_32<=CONTAINS)) ) {s = 4;}

                        else if ( (LA127_32==IDENT||LA127_32==COMMA||LA127_32==COLON||LA127_32==MINUS||LA127_32==GREATER||(LA127_32>=HASH && LA127_32<=LBRACKET)||LA127_32==STAR||LA127_32==LESS_AND) && (synpred22_Css3())) {s = 15;}

                         
                        input.seek(index127_32);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA127_29 = input.LA(1);

                         
                        int index127_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA127_29>=WS && LA127_29<=COMMENT)) && (synpred22_Css3())) {s = 13;}

                        else if ( (LA127_29==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA127_29==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA127_29==IDENT||LA127_29==COMMA||LA127_29==COLON||LA127_29==MINUS||LA127_29==GREATER||(LA127_29>=HASH && LA127_29<=LBRACKET)||LA127_29==STAR||LA127_29==LESS_AND||LA127_29==RBRACKET) && (synpred22_Css3())) {s = 15;}

                        else if ( (LA127_29==PIPE) ) {s = 4;}

                         
                        input.seek(index127_29);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA127_1 = input.LA(1);

                         
                        int index127_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA127_1==LBRACE) && (synpred22_Css3())) {s = 12;}

                        else if ( ((LA127_1>=WS && LA127_1<=COMMENT)) && (synpred22_Css3())) {s = 13;}

                        else if ( (LA127_1==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA127_1==IDENT||LA127_1==COMMA||LA127_1==COLON||LA127_1==MINUS||LA127_1==GREATER||(LA127_1>=HASH && LA127_1<=LBRACKET)||LA127_1==STAR||LA127_1==LESS_AND||LA127_1==RBRACKET) && (synpred22_Css3())) {s = 15;}

                        else if ( (LA127_1==NAME||LA127_1==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index127_1);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA127_25 = input.LA(1);

                         
                        int index127_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA127_25>=WS && LA127_25<=COMMENT)) && (synpred22_Css3())) {s = 13;}

                        else if ( (LA127_25==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA127_25==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA127_25==IDENT) ) {s = 30;}

                        else if ( (LA127_25==COMMA||LA127_25==COLON||LA127_25==MINUS||LA127_25==GREATER||(LA127_25>=HASH && LA127_25<=LBRACKET)||LA127_25==STAR||LA127_25==LESS_AND||LA127_25==RBRACKET) && (synpred22_Css3())) {s = 15;}

                        else if ( ((LA127_25>=NOT && LA127_25<=GEN)) ) {s = 4;}

                         
                        input.seek(index127_25);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA127_21 = input.LA(1);

                         
                        int index127_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index127_21);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA127_34 = input.LA(1);

                         
                        int index127_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index127_34);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA127_8 = input.LA(1);

                         
                        int index127_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA127_8>=WS && LA127_8<=COMMENT)) && (synpred22_Css3())) {s = 13;}

                        else if ( (LA127_8==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA127_8==IDENT) ) {s = 26;}

                        else if ( (LA127_8==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA127_8==COMMA||LA127_8==COLON||LA127_8==MINUS||LA127_8==GREATER||(LA127_8>=HASH && LA127_8<=LBRACKET)||LA127_8==STAR||LA127_8==LESS_AND||LA127_8==RBRACKET) && (synpred22_Css3())) {s = 15;}

                        else if ( (LA127_8==GEN||LA127_8==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index127_8);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA127_16 = input.LA(1);

                         
                        int index127_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA127_16==HASH_SYMBOL) ) {s = 17;}

                        else if ( (LA127_16==IDENT) ) {s = 18;}

                        else if ( ((LA127_16>=WS && LA127_16<=COMMENT)) ) {s = 16;}

                        else if ( (LA127_16==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA127_16==STAR) ) {s = 20;}

                        else if ( (LA127_16==LESS_AND) ) {s = 21;}

                        else if ( (LA127_16==GEN||(LA127_16>=DCOLON && LA127_16<=SASS_EXTEND_ONLY_SELECTOR)||LA127_16==PIPE||LA127_16==AT_SIGN) ) {s = 4;}

                        else if ( (LA127_16==HASH) ) {s = 22;}

                        else if ( (LA127_16==DOT) ) {s = 23;}

                        else if ( (LA127_16==LBRACKET) ) {s = 24;}

                        else if ( (LA127_16==COLON) ) {s = 25;}

                        else if ( (LA127_16==COMMA||LA127_16==MINUS||LA127_16==GREATER||LA127_16==RBRACKET) && (synpred22_Css3())) {s = 15;}

                         
                        input.seek(index127_16);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA127_24 = input.LA(1);

                         
                        int index127_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA127_24>=WS && LA127_24<=COMMENT)) ) {s = 27;}

                        else if ( (LA127_24==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA127_24==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA127_24==IDENT) ) {s = 28;}

                        else if ( (LA127_24==STAR) ) {s = 29;}

                        else if ( (LA127_24==COMMA||LA127_24==COLON||LA127_24==MINUS||LA127_24==GREATER||(LA127_24>=HASH && LA127_24<=LBRACKET)||LA127_24==LESS_AND||LA127_24==RBRACKET) && (synpred22_Css3())) {s = 15;}

                        else if ( (LA127_24==PIPE) ) {s = 4;}

                         
                        input.seek(index127_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA127_6 = input.LA(1);

                         
                        int index127_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index127_6);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA127_17 = input.LA(1);

                         
                        int index127_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA127_17==LBRACE) && (synpred22_Css3())) {s = 31;}

                        else if ( ((LA127_17>=WS && LA127_17<=COMMENT)) && (synpred22_Css3())) {s = 13;}

                        else if ( (LA127_17==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA127_17==IDENT||LA127_17==COMMA||LA127_17==COLON||LA127_17==MINUS||LA127_17==GREATER||(LA127_17>=HASH && LA127_17<=LBRACKET)||LA127_17==STAR||LA127_17==LESS_AND||LA127_17==RBRACKET) && (synpred22_Css3())) {s = 15;}

                        else if ( (LA127_17==NAME||LA127_17==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index127_17);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA127_22 = input.LA(1);

                         
                        int index127_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index127_22);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA127_10 = input.LA(1);

                         
                        int index127_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA127_10>=WS && LA127_10<=COMMENT)) && (synpred22_Css3())) {s = 13;}

                        else if ( (LA127_10==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA127_10==IDENT) ) {s = 30;}

                        else if ( (LA127_10==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA127_10==COMMA||LA127_10==COLON||LA127_10==MINUS||LA127_10==GREATER||(LA127_10>=HASH && LA127_10<=LBRACKET)||LA127_10==STAR||LA127_10==LESS_AND||LA127_10==RBRACKET) && (synpred22_Css3())) {s = 15;}

                        else if ( ((LA127_10>=NOT && LA127_10<=GEN)) ) {s = 4;}

                         
                        input.seek(index127_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 127, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA126_eotS =
        "\4\uffff";
    static final String DFA126_eofS =
        "\4\uffff";
    static final String DFA126_minS =
        "\2\13\2\uffff";
    static final String DFA126_maxS =
        "\2\126\2\uffff";
    static final String DFA126_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA126_specialS =
        "\4\uffff}>";
    static final String[] DFA126_transitionS = {
            "\1\3\1\uffff\1\2\106\uffff\3\1",
            "\1\3\1\uffff\1\2\106\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA126_eot = DFA.unpackEncodedString(DFA126_eotS);
    static final short[] DFA126_eof = DFA.unpackEncodedString(DFA126_eofS);
    static final char[] DFA126_min = DFA.unpackEncodedStringToUnsignedChars(DFA126_minS);
    static final char[] DFA126_max = DFA.unpackEncodedStringToUnsignedChars(DFA126_maxS);
    static final short[] DFA126_accept = DFA.unpackEncodedString(DFA126_acceptS);
    static final short[] DFA126_special = DFA.unpackEncodedString(DFA126_specialS);
    static final short[][] DFA126_transition;

    static {
        int numStates = DFA126_transitionS.length;
        DFA126_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA126_transition[i] = DFA.unpackEncodedString(DFA126_transitionS[i]);
        }
    }

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = DFA126_eot;
            this.eof = DFA126_eof;
            this.min = DFA126_min;
            this.max = DFA126_max;
            this.accept = DFA126_accept;
            this.special = DFA126_special;
            this.transition = DFA126_transition;
        }
        public String getDescription() {
            return "()* loopback of 656:18: ( ( ws )? COMMA ( ws )? selector )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA134_eotS =
        "\4\uffff";
    static final String DFA134_eofS =
        "\4\uffff";
    static final String DFA134_minS =
        "\2\6\2\uffff";
    static final String DFA134_maxS =
        "\2\156\2\uffff";
    static final String DFA134_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA134_specialS =
        "\4\uffff}>";
    static final String[] DFA134_transitionS = {
            "\1\3\4\uffff\1\2\1\uffff\1\2\4\uffff\1\3\2\uffff\1\3\34\uffff"+
            "\1\3\1\uffff\12\3\1\uffff\1\3\24\uffff\3\1\27\uffff\1\3",
            "\1\3\4\uffff\1\2\1\uffff\1\2\4\uffff\1\3\2\uffff\1\3\34\uffff"+
            "\1\3\1\uffff\12\3\1\uffff\1\3\24\uffff\3\1\27\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "()* loopback of 660:49: ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA133_eotS =
        "\4\uffff";
    static final String DFA133_eofS =
        "\4\uffff";
    static final String DFA133_minS =
        "\2\6\2\uffff";
    static final String DFA133_maxS =
        "\2\156\2\uffff";
    static final String DFA133_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA133_specialS =
        "\4\uffff}>";
    static final String[] DFA133_transitionS = {
            "\1\3\13\uffff\1\3\2\uffff\1\3\34\uffff\1\2\1\uffff\2\2\10\3"+
            "\1\uffff\1\3\24\uffff\3\1\27\uffff\1\3",
            "\1\3\13\uffff\1\3\2\uffff\1\3\34\uffff\1\2\1\uffff\2\2\10\3"+
            "\1\uffff\1\3\24\uffff\3\1\27\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "660:51: ( ( ( ws )? combinator ( ws )? ) | ( ws )? )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA136_eotS =
        "\56\uffff";
    static final String DFA136_eofS =
        "\56\uffff";
    static final String DFA136_minS =
        "\1\4\1\0\5\uffff\7\0\24\uffff\1\0\13\uffff";
    static final String DFA136_maxS =
        "\1\157\1\0\5\uffff\7\0\24\uffff\1\0\13\uffff";
    static final String DFA136_acceptS =
        "\2\uffff\1\2\52\uffff\1\1";
    static final String DFA136_specialS =
        "\1\uffff\1\0\5\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\24\uffff\1\10\13"+
        "\uffff}>";
    static final String[] DFA136_transitionS = {
            "\3\2\2\uffff\6\2\3\uffff\1\2\1\uffff\1\2\1\15\2\2\3\uffff\1"+
            "\2\1\uffff\23\2\1\uffff\2\2\1\uffff\2\2\1\12\1\11\1\13\1\14"+
            "\1\42\1\7\2\2\1\uffff\1\2\6\uffff\2\2\14\uffff\3\1\1\uffff\15"+
            "\2\11\uffff\1\10\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA136_eot = DFA.unpackEncodedString(DFA136_eotS);
    static final short[] DFA136_eof = DFA.unpackEncodedString(DFA136_eofS);
    static final char[] DFA136_min = DFA.unpackEncodedStringToUnsignedChars(DFA136_minS);
    static final char[] DFA136_max = DFA.unpackEncodedStringToUnsignedChars(DFA136_maxS);
    static final short[] DFA136_accept = DFA.unpackEncodedString(DFA136_acceptS);
    static final short[] DFA136_special = DFA.unpackEncodedString(DFA136_specialS);
    static final short[][] DFA136_transition;

    static {
        int numStates = DFA136_transitionS.length;
        DFA136_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA136_transition[i] = DFA.unpackEncodedString(DFA136_transitionS[i]);
        }
    }

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = DFA136_eot;
            this.eof = DFA136_eof;
            this.min = DFA136_min;
            this.max = DFA136_max;
            this.accept = DFA136_accept;
            this.special = DFA136_special;
            this.transition = DFA136_transition;
        }
        public String getDescription() {
            return "()* loopback of 670:17: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA136_1 = input.LA(1);

                         
                        int index136_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index136_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA136_7 = input.LA(1);

                         
                        int index136_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred23_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 45;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 2;}

                         
                        input.seek(index136_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA136_8 = input.LA(1);

                         
                        int index136_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 45;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 2;}

                         
                        input.seek(index136_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA136_9 = input.LA(1);

                         
                        int index136_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index136_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA136_10 = input.LA(1);

                         
                        int index136_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index136_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA136_11 = input.LA(1);

                         
                        int index136_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index136_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA136_12 = input.LA(1);

                         
                        int index136_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index136_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA136_13 = input.LA(1);

                         
                        int index136_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index136_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA136_34 = input.LA(1);

                         
                        int index136_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index136_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 136, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA138_eotS =
        "\56\uffff";
    static final String DFA138_eofS =
        "\56\uffff";
    static final String DFA138_minS =
        "\1\4\1\0\5\uffff\7\0\24\uffff\1\0\13\uffff";
    static final String DFA138_maxS =
        "\1\157\1\0\5\uffff\7\0\24\uffff\1\0\13\uffff";
    static final String DFA138_acceptS =
        "\2\uffff\1\2\52\uffff\1\1";
    static final String DFA138_specialS =
        "\1\uffff\1\0\5\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\24\uffff\1\10\13"+
        "\uffff}>";
    static final String[] DFA138_transitionS = {
            "\3\2\2\uffff\6\2\3\uffff\1\2\1\uffff\1\2\1\15\2\2\3\uffff\1"+
            "\2\1\uffff\23\2\1\uffff\2\2\1\uffff\2\2\1\12\1\11\1\13\1\14"+
            "\1\42\1\7\2\2\1\uffff\1\2\6\uffff\2\2\14\uffff\3\1\1\uffff\15"+
            "\2\11\uffff\1\10\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA138_eot = DFA.unpackEncodedString(DFA138_eotS);
    static final short[] DFA138_eof = DFA.unpackEncodedString(DFA138_eofS);
    static final char[] DFA138_min = DFA.unpackEncodedStringToUnsignedChars(DFA138_minS);
    static final char[] DFA138_max = DFA.unpackEncodedStringToUnsignedChars(DFA138_maxS);
    static final short[] DFA138_accept = DFA.unpackEncodedString(DFA138_acceptS);
    static final short[] DFA138_special = DFA.unpackEncodedString(DFA138_specialS);
    static final short[][] DFA138_transition;

    static {
        int numStates = DFA138_transitionS.length;
        DFA138_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA138_transition[i] = DFA.unpackEncodedString(DFA138_transitionS[i]);
        }
    }

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = DFA138_eot;
            this.eof = DFA138_eof;
            this.min = DFA138_min;
            this.max = DFA138_max;
            this.accept = DFA138_accept;
            this.special = DFA138_special;
            this.transition = DFA138_transition;
        }
        public String getDescription() {
            return "()* loopback of 672:20: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA138_1 = input.LA(1);

                         
                        int index138_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index138_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA138_7 = input.LA(1);

                         
                        int index138_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred24_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 45;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 2;}

                         
                        input.seek(index138_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA138_8 = input.LA(1);

                         
                        int index138_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred24_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 45;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 2;}

                         
                        input.seek(index138_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA138_9 = input.LA(1);

                         
                        int index138_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index138_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA138_10 = input.LA(1);

                         
                        int index138_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index138_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA138_11 = input.LA(1);

                         
                        int index138_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index138_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA138_12 = input.LA(1);

                         
                        int index138_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index138_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA138_13 = input.LA(1);

                         
                        int index138_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index138_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA138_34 = input.LA(1);

                         
                        int index138_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index138_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 138, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA156_eotS =
        "\4\uffff";
    static final String DFA156_eofS =
        "\4\uffff";
    static final String DFA156_minS =
        "\2\4\2\uffff";
    static final String DFA156_maxS =
        "\2\157\2\uffff";
    static final String DFA156_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA156_specialS =
        "\4\uffff}>";
    static final String[] DFA156_transitionS = {
            "\3\3\2\uffff\6\3\3\uffff\1\3\1\2\4\3\3\uffff\1\3\1\uffff\23"+
            "\3\1\uffff\2\3\1\uffff\12\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\2\3",
            "\3\3\2\uffff\6\3\3\uffff\1\3\1\2\1\uffff\3\3\3\uffff\1\3\1"+
            "\uffff\23\3\1\uffff\2\3\1\uffff\12\3\1\uffff\1\3\6\uffff\2\3"+
            "\14\uffff\3\1\1\uffff\15\3\11\uffff\2\3",
            "",
            ""
    };

    static final short[] DFA156_eot = DFA.unpackEncodedString(DFA156_eotS);
    static final short[] DFA156_eof = DFA.unpackEncodedString(DFA156_eofS);
    static final char[] DFA156_min = DFA.unpackEncodedStringToUnsignedChars(DFA156_minS);
    static final char[] DFA156_max = DFA.unpackEncodedStringToUnsignedChars(DFA156_maxS);
    static final short[] DFA156_accept = DFA.unpackEncodedString(DFA156_acceptS);
    static final short[] DFA156_special = DFA.unpackEncodedString(DFA156_specialS);
    static final short[][] DFA156_transition;

    static {
        int numStates = DFA156_transitionS.length;
        DFA156_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA156_transition[i] = DFA.unpackEncodedString(DFA156_transitionS[i]);
        }
    }

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;
        }
        public String getDescription() {
            return "783:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA169_eotS =
        "\12\uffff";
    static final String DFA169_eofS =
        "\12\uffff";
    static final String DFA169_minS =
        "\1\4\7\0\2\uffff";
    static final String DFA169_maxS =
        "\1\144\7\0\2\uffff";
    static final String DFA169_acceptS =
        "\10\uffff\1\1\1\2";
    static final String DFA169_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\uffff}>";
    static final String[] DFA169_transitionS = {
            "\1\6\1\uffff\1\3\2\uffff\2\6\1\uffff\1\6\5\uffff\1\5\3\uffff"+
            "\2\6\3\uffff\1\6\1\uffff\23\6\1\uffff\1\4\4\uffff\1\2\2\4\3"+
            "\uffff\1\1\12\uffff\1\7\20\uffff\15\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA169_eot = DFA.unpackEncodedString(DFA169_eotS);
    static final short[] DFA169_eof = DFA.unpackEncodedString(DFA169_eofS);
    static final char[] DFA169_min = DFA.unpackEncodedStringToUnsignedChars(DFA169_minS);
    static final char[] DFA169_max = DFA.unpackEncodedStringToUnsignedChars(DFA169_maxS);
    static final short[] DFA169_accept = DFA.unpackEncodedString(DFA169_acceptS);
    static final short[] DFA169_special = DFA.unpackEncodedString(DFA169_specialS);
    static final short[][] DFA169_transition;

    static {
        int numStates = DFA169_transitionS.length;
        DFA169_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA169_transition[i] = DFA.unpackEncodedString(DFA169_transitionS[i]);
        }
    }

    class DFA169 extends DFA {

        public DFA169(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 169;
            this.eot = DFA169_eot;
            this.eof = DFA169_eof;
            this.min = DFA169_min;
            this.max = DFA169_max;
            this.accept = DFA169_accept;
            this.special = DFA169_special;
            this.transition = DFA169_transition;
        }
        public String getDescription() {
            return "792:1: propertyDeclaration : ( ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? | {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA169_1 = input.LA(1);

                         
                        int index169_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index169_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA169_2 = input.LA(1);

                         
                        int index169_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index169_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA169_3 = input.LA(1);

                         
                        int index169_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index169_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA169_4 = input.LA(1);

                         
                        int index169_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index169_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA169_5 = input.LA(1);

                         
                        int index169_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index169_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA169_6 = input.LA(1);

                         
                        int index169_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 8;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 9;}

                         
                        input.seek(index169_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA169_7 = input.LA(1);

                         
                        int index169_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 8;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 9;}

                         
                        input.seek(index169_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 169, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA165_eotS =
        "\4\uffff";
    static final String DFA165_eofS =
        "\1\3\3\uffff";
    static final String DFA165_minS =
        "\2\4\2\uffff";
    static final String DFA165_maxS =
        "\2\156\2\uffff";
    static final String DFA165_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA165_specialS =
        "\4\uffff}>";
    static final String[] DFA165_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\2\3\1\2\12\3\1\uffff\1\3\6\uffff\2"+
            "\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\2\3\1\2\12\3\1\uffff\1\3\6\uffff\2"+
            "\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA165_eot = DFA.unpackEncodedString(DFA165_eotS);
    static final short[] DFA165_eof = DFA.unpackEncodedString(DFA165_eofS);
    static final char[] DFA165_min = DFA.unpackEncodedStringToUnsignedChars(DFA165_minS);
    static final char[] DFA165_max = DFA.unpackEncodedStringToUnsignedChars(DFA165_maxS);
    static final short[] DFA165_accept = DFA.unpackEncodedString(DFA165_acceptS);
    static final short[] DFA165_special = DFA.unpackEncodedString(DFA165_specialS);
    static final short[][] DFA165_transition;

    static {
        int numStates = DFA165_transitionS.length;
        DFA165_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA165_transition[i] = DFA.unpackEncodedString(DFA165_transitionS[i]);
        }
    }

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = DFA165_eot;
            this.eof = DFA165_eof;
            this.min = DFA165_min;
            this.max = DFA165_max;
            this.accept = DFA165_accept;
            this.special = DFA165_special;
            this.transition = DFA165_transition;
        }
        public String getDescription() {
            return "794:48: ( ( ws )? prio )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA170_eotS =
        "\34\uffff";
    static final String DFA170_eofS =
        "\34\uffff";
    static final String DFA170_minS =
        "\1\4\1\uffff\27\0\3\uffff";
    static final String DFA170_maxS =
        "\1\144\1\uffff\27\0\3\uffff";
    static final String DFA170_acceptS =
        "\1\uffff\1\1\31\uffff\1\2";
    static final String DFA170_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\3\uffff}>";
    static final String[] DFA170_transitionS = {
            "\1\25\1\uffff\1\3\1\17\1\23\2\25\1\uffff\1\25\4\uffff\1\1\1"+
            "\22\1\1\2\uffff\2\25\3\uffff\1\25\1\5\23\25\1\uffff\2\2\1\1"+
            "\1\uffff\1\20\1\27\1\24\17\uffff\1\26\1\4\1\6\1\7\1\10\1\11"+
            "\1\12\1\13\1\14\1\15\1\16\1\21\1\30\4\uffff\15\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA170_eot = DFA.unpackEncodedString(DFA170_eotS);
    static final short[] DFA170_eof = DFA.unpackEncodedString(DFA170_eofS);
    static final char[] DFA170_min = DFA.unpackEncodedStringToUnsignedChars(DFA170_minS);
    static final char[] DFA170_max = DFA.unpackEncodedStringToUnsignedChars(DFA170_maxS);
    static final short[] DFA170_accept = DFA.unpackEncodedString(DFA170_acceptS);
    static final short[] DFA170_special = DFA.unpackEncodedString(DFA170_specialS);
    static final short[][] DFA170_transition;

    static {
        int numStates = DFA170_transitionS.length;
        DFA170_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA170_transition[i] = DFA.unpackEncodedString(DFA170_transitionS[i]);
        }
    }

    class DFA170 extends DFA {

        public DFA170(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 170;
            this.eot = DFA170_eot;
            this.eof = DFA170_eof;
            this.min = DFA170_min;
            this.max = DFA170_max;
            this.accept = DFA170_accept;
            this.special = DFA170_special;
            this.transition = DFA170_transition;
        }
        public String getDescription() {
            return "805:1: cp_propertyValue : ({...}? cp_expression_list | propertyValue );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA170_2 = input.LA(1);

                         
                        int index170_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index170_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA170_3 = input.LA(1);

                         
                        int index170_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index170_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA170_4 = input.LA(1);

                         
                        int index170_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index170_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA170_5 = input.LA(1);

                         
                        int index170_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index170_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA170_6 = input.LA(1);

                         
                        int index170_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index170_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA170_7 = input.LA(1);

                         
                        int index170_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index170_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA170_8 = input.LA(1);

                         
                        int index170_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index170_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA170_9 = input.LA(1);

                         
                        int index170_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index170_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA170_10 = input.LA(1);

                         
                        int index170_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index170_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA170_11 = input.LA(1);

                         
                        int index170_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index170_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA170_12 = input.LA(1);

                         
                        int index170_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index170_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA170_13 = input.LA(1);

                         
                        int index170_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index170_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA170_14 = input.LA(1);

                         
                        int index170_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index170_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA170_15 = input.LA(1);

                         
                        int index170_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index170_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA170_16 = input.LA(1);

                         
                        int index170_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 27;}

                         
                        input.seek(index170_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA170_17 = input.LA(1);

                         
                        int index170_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 27;}

                         
                        input.seek(index170_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA170_18 = input.LA(1);

                         
                        int index170_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index170_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA170_19 = input.LA(1);

                         
                        int index170_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index170_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA170_20 = input.LA(1);

                         
                        int index170_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index170_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA170_21 = input.LA(1);

                         
                        int index170_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 27;}

                         
                        input.seek(index170_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA170_22 = input.LA(1);

                         
                        int index170_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 27;}

                         
                        input.seek(index170_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA170_23 = input.LA(1);

                         
                        int index170_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 27;}

                         
                        input.seek(index170_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA170_24 = input.LA(1);

                         
                        int index170_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 27;}

                         
                        input.seek(index170_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 170, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA175_eotS =
        "\77\uffff";
    static final String DFA175_eofS =
        "\1\2\76\uffff";
    static final String DFA175_minS =
        "\1\4\1\0\5\uffff\2\0\1\uffff\15\0\2\uffff\1\0\4\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\11\0\4\uffff\1\0\17\uffff";
    static final String DFA175_maxS =
        "\1\156\1\0\5\uffff\2\0\1\uffff\15\0\2\uffff\1\0\4\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\11\0\4\uffff\1\0\17\uffff";
    static final String DFA175_acceptS =
        "\2\uffff\1\2\53\uffff\1\1\1\uffff\17\1";
    static final String DFA175_specialS =
        "\1\0\1\1\5\uffff\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\2\uffff\1\21\4\uffff\1\22\1\uffff"+
        "\1\23\1\uffff\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\4\uffff"+
        "\1\35\17\uffff}>";
    static final String[] DFA175_transitionS = {
            "\1\52\1\2\1\13\1\73\1\75\1\52\1\51\1\40\1\46\2\2\3\uffff\1\15"+
            "\1\uffff\2\2\1\45\1\43\3\uffff\1\44\1\61\1\26\1\47\1\42\20\52"+
            "\1\56\1\36\1\31\2\2\1\57\1\12\1\14\6\2\1\uffff\1\2\6\uffff\1"+
            "\2\1\17\1\60\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1"+
            "\74\1\76\3\1\1\uffff\1\25\1\7\1\10\1\16\2\20\1\21\1\52\1\22"+
            "\1\52\1\50\1\23\1\24\11\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA175_eot = DFA.unpackEncodedString(DFA175_eotS);
    static final short[] DFA175_eof = DFA.unpackEncodedString(DFA175_eofS);
    static final char[] DFA175_min = DFA.unpackEncodedStringToUnsignedChars(DFA175_minS);
    static final char[] DFA175_max = DFA.unpackEncodedStringToUnsignedChars(DFA175_maxS);
    static final short[] DFA175_accept = DFA.unpackEncodedString(DFA175_acceptS);
    static final short[] DFA175_special = DFA.unpackEncodedString(DFA175_specialS);
    static final short[][] DFA175_transition;

    static {
        int numStates = DFA175_transitionS.length;
        DFA175_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA175_transition[i] = DFA.unpackEncodedString(DFA175_transitionS[i]);
        }
    }

    class DFA175 extends DFA {

        public DFA175(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 175;
            this.eot = DFA175_eot;
            this.eof = DFA175_eof;
            this.min = DFA175_min;
            this.max = DFA175_max;
            this.accept = DFA175_accept;
            this.special = DFA175_special;
            this.transition = DFA175_transition;
        }
        public String getDescription() {
            return "()* loopback of 861:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA175_0 = input.LA(1);

                         
                        int index175_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA175_0>=WS && LA175_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA175_0==EOF||LA175_0==SEMI||(LA175_0>=LBRACE && LA175_0<=RBRACE)||(LA175_0>=RPAREN && LA175_0<=COLON)||(LA175_0>=IMPORTANT_SYM && LA175_0<=GREATER)||(LA175_0>=DOT && LA175_0<=PIPE)||LA175_0==LESS_AND||LA175_0==RBRACKET||LA175_0==AT_SIGN) ) {s = 2;}

                        else if ( (LA175_0==SASS_MIXIN) ) {s = 7;}

                        else if ( (LA175_0==SASS_INCLUDE) ) {s = 8;}

                        else if ( (LA175_0==HASH_SYMBOL) ) {s = 10;}

                        else if ( (LA175_0==IDENT) ) {s = 11;}

                        else if ( (LA175_0==HASH) ) {s = 12;}

                        else if ( (LA175_0==GEN) ) {s = 13;}

                        else if ( (LA175_0==SASS_EXTEND) ) {s = 14;}

                        else if ( (LA175_0==SASS_VAR) ) {s = 15;}

                        else if ( ((LA175_0>=SASS_DEBUG && LA175_0<=SASS_WARN)) ) {s = 16;}

                        else if ( (LA175_0==SASS_IF) ) {s = 17;}

                        else if ( (LA175_0==SASS_FOR) ) {s = 18;}

                        else if ( (LA175_0==SASS_EACH) ) {s = 19;}

                        else if ( (LA175_0==SASS_WHILE) ) {s = 20;}

                        else if ( (LA175_0==SASS_CONTENT) ) {s = 21;}

                        else if ( (LA175_0==PAGE_SYM) ) {s = 22;}

                        else if ( (LA175_0==PLUS) ) {s = 25;}

                        else if ( (LA175_0==MINUS) ) {s = 30;}

                        else if ( (LA175_0==COMMA) ) {s = 32;}

                        else if ( (LA175_0==FONT_FACE_SYM) ) {s = 34;}

                        else if ( (LA175_0==MOZ_DOCUMENT_SYM) ) {s = 35;}

                        else if ( (LA175_0==WEBKIT_KEYFRAMES_SYM) ) {s = 36;}

                        else if ( (LA175_0==AT_IDENT) ) {s = 37;}

                        else if ( (LA175_0==MEDIA_SYM) ) {s = 38;}

                        else if ( (LA175_0==COUNTER_STYLE_SYM) ) {s = 39;}

                        else if ( (LA175_0==SASS_RETURN) ) {s = 40;}

                        else if ( (LA175_0==IMPORT_SYM) ) {s = 41;}

                        else if ( (LA175_0==NAMESPACE_SYM||LA175_0==CHARSET_SYM||(LA175_0>=TOPLEFTCORNER_SYM && LA175_0<=RIGHTBOTTOM_SYM)||LA175_0==SASS_ELSE||LA175_0==SASS_FUNCTION) ) {s = 42;}

                        else if ( (LA175_0==SOLIDUS) && (synpred26_Css3())) {s = 46;}

                        else if ( (LA175_0==TILDE) ) {s = 47;}

                        else if ( (LA175_0==NUMBER) && (synpred26_Css3())) {s = 48;}

                        else if ( (LA175_0==PERCENTAGE) && (synpred26_Css3())) {s = 49;}

                        else if ( (LA175_0==LENGTH) && (synpred26_Css3())) {s = 50;}

                        else if ( (LA175_0==EMS) && (synpred26_Css3())) {s = 51;}

                        else if ( (LA175_0==REM) && (synpred26_Css3())) {s = 52;}

                        else if ( (LA175_0==EXS) && (synpred26_Css3())) {s = 53;}

                        else if ( (LA175_0==ANGLE) && (synpred26_Css3())) {s = 54;}

                        else if ( (LA175_0==TIME) && (synpred26_Css3())) {s = 55;}

                        else if ( (LA175_0==FREQ) && (synpred26_Css3())) {s = 56;}

                        else if ( (LA175_0==RESOLUTION) && (synpred26_Css3())) {s = 57;}

                        else if ( (LA175_0==DIMENSION) && (synpred26_Css3())) {s = 58;}

                        else if ( (LA175_0==STRING) && (synpred26_Css3())) {s = 59;}

                        else if ( (LA175_0==LESS_JS_STRING) && (synpred26_Css3())) {s = 60;}

                        else if ( (LA175_0==URI) && (synpred26_Css3())) {s = 61;}

                        else if ( (LA175_0==PERCENTAGE_SYMBOL) && (synpred26_Css3())) {s = 62;}

                         
                        input.seek(index175_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA175_1 = input.LA(1);

                         
                        int index175_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA175_7 = input.LA(1);

                         
                        int index175_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index175_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA175_8 = input.LA(1);

                         
                        int index175_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index175_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA175_10 = input.LA(1);

                         
                        int index175_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA175_11 = input.LA(1);

                         
                        int index175_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA175_12 = input.LA(1);

                         
                        int index175_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA175_13 = input.LA(1);

                         
                        int index175_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA175_14 = input.LA(1);

                         
                        int index175_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index175_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA175_15 = input.LA(1);

                         
                        int index175_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}

                         
                        input.seek(index175_15);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA175_16 = input.LA(1);

                         
                        int index175_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index175_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA175_17 = input.LA(1);

                         
                        int index175_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index175_17);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA175_18 = input.LA(1);

                         
                        int index175_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index175_18);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA175_19 = input.LA(1);

                         
                        int index175_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index175_19);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA175_20 = input.LA(1);

                         
                        int index175_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index175_20);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA175_21 = input.LA(1);

                         
                        int index175_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index175_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA175_22 = input.LA(1);

                         
                        int index175_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_22);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA175_25 = input.LA(1);

                         
                        int index175_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_25);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA175_30 = input.LA(1);

                         
                        int index175_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_30);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA175_32 = input.LA(1);

                         
                        int index175_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_32);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA175_34 = input.LA(1);

                         
                        int index175_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_34);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA175_35 = input.LA(1);

                         
                        int index175_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_35);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA175_36 = input.LA(1);

                         
                        int index175_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_36);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA175_37 = input.LA(1);

                         
                        int index175_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_37);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA175_38 = input.LA(1);

                         
                        int index175_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_38);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA175_39 = input.LA(1);

                         
                        int index175_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index175_39);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA175_40 = input.LA(1);

                         
                        int index175_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index175_40);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA175_41 = input.LA(1);

                         
                        int index175_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index175_41);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA175_42 = input.LA(1);

                         
                        int index175_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index175_42);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA175_47 = input.LA(1);

                         
                        int index175_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_47);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 175, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA174_eotS =
        "\5\uffff";
    static final String DFA174_eofS =
        "\5\uffff";
    static final String DFA174_minS =
        "\2\4\3\uffff";
    static final String DFA174_maxS =
        "\2\144\3\uffff";
    static final String DFA174_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA174_specialS =
        "\5\uffff}>";
    static final String[] DFA174_transitionS = {
            "\1\3\1\uffff\5\3\1\2\1\3\5\uffff\1\3\3\uffff\2\3\3\uffff\25"+
            "\3\1\2\2\3\2\uffff\3\3\17\uffff\15\3\3\1\1\uffff\15\3",
            "\1\4\1\uffff\5\4\1\2\1\4\5\uffff\1\4\3\uffff\2\4\3\uffff\25"+
            "\4\1\2\2\4\2\uffff\3\4\17\uffff\15\4\3\1\1\uffff\15\4",
            "",
            "",
            ""
    };

    static final short[] DFA174_eot = DFA.unpackEncodedString(DFA174_eotS);
    static final short[] DFA174_eof = DFA.unpackEncodedString(DFA174_eofS);
    static final char[] DFA174_min = DFA.unpackEncodedStringToUnsignedChars(DFA174_minS);
    static final char[] DFA174_max = DFA.unpackEncodedStringToUnsignedChars(DFA174_maxS);
    static final short[] DFA174_accept = DFA.unpackEncodedString(DFA174_acceptS);
    static final short[] DFA174_special = DFA.unpackEncodedString(DFA174_specialS);
    static final short[][] DFA174_transition;

    static {
        int numStates = DFA174_transitionS.length;
        DFA174_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA174_transition[i] = DFA.unpackEncodedString(DFA174_transitionS[i]);
        }
    }

    class DFA174 extends DFA {

        public DFA174(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 174;
            this.eot = DFA174_eot;
            this.eof = DFA174_eof;
            this.min = DFA174_min;
            this.max = DFA174_max;
            this.accept = DFA174_accept;
            this.special = DFA174_special;
            this.transition = DFA174_transition;
        }
        public String getDescription() {
            return "861:66: ( ws | ( ( ws )? operator ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA178_eotS =
        "\31\uffff";
    static final String DFA178_eofS =
        "\31\uffff";
    static final String DFA178_minS =
        "\1\4\1\0\27\uffff";
    static final String DFA178_maxS =
        "\1\144\1\0\27\uffff";
    static final String DFA178_acceptS =
        "\2\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
        "\1\17\1\20\1\21\1\22\1\23\1\24\1\uffff\1\25\1\26\1\1\1\2";
    static final String DFA178_specialS =
        "\1\uffff\1\0\27\uffff}>";
    static final String[] DFA178_transitionS = {
            "\1\23\1\uffff\1\1\1\15\1\21\2\23\1\uffff\1\23\5\uffff\1\20\3"+
            "\uffff\2\23\3\uffff\1\23\1\3\23\23\5\uffff\1\16\1\25\1\22\17"+
            "\uffff\1\23\1\2\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\17"+
            "\1\26\4\uffff\15\23",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA178_eot = DFA.unpackEncodedString(DFA178_eotS);
    static final short[] DFA178_eof = DFA.unpackEncodedString(DFA178_eofS);
    static final char[] DFA178_min = DFA.unpackEncodedStringToUnsignedChars(DFA178_minS);
    static final char[] DFA178_max = DFA.unpackEncodedStringToUnsignedChars(DFA178_maxS);
    static final short[] DFA178_accept = DFA.unpackEncodedString(DFA178_acceptS);
    static final short[] DFA178_special = DFA.unpackEncodedString(DFA178_specialS);
    static final short[][] DFA178_transition;

    static {
        int numStates = DFA178_transitionS.length;
        DFA178_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA178_transition[i] = DFA.unpackEncodedString(DFA178_transitionS[i]);
        }
    }

    class DFA178 extends DFA {

        public DFA178(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 178;
            this.eot = DFA178_eot;
            this.eof = DFA178_eof;
            this.min = DFA178_min;
            this.max = DFA178_max;
            this.accept = DFA178_accept;
            this.special = DFA178_special;
            this.transition = DFA178_transition;
        }
        public String getDescription() {
            return "867:5: ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | {...}? TILDE STRING | {...}? LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA178_1 = input.LA(1);

                         
                        int index178_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index178_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 178, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA186_eotS =
        "\4\uffff";
    static final String DFA186_eofS =
        "\4\uffff";
    static final String DFA186_minS =
        "\2\13\2\uffff";
    static final String DFA186_maxS =
        "\2\126\2\uffff";
    static final String DFA186_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA186_specialS =
        "\4\uffff}>";
    static final String[] DFA186_transitionS = {
            "\1\3\10\uffff\1\2\77\uffff\3\1",
            "\1\3\10\uffff\1\2\77\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA186_eot = DFA.unpackEncodedString(DFA186_eotS);
    static final short[] DFA186_eof = DFA.unpackEncodedString(DFA186_eofS);
    static final char[] DFA186_min = DFA.unpackEncodedStringToUnsignedChars(DFA186_minS);
    static final char[] DFA186_max = DFA.unpackEncodedStringToUnsignedChars(DFA186_maxS);
    static final short[] DFA186_accept = DFA.unpackEncodedString(DFA186_acceptS);
    static final short[] DFA186_special = DFA.unpackEncodedString(DFA186_specialS);
    static final short[][] DFA186_transition;

    static {
        int numStates = DFA186_transitionS.length;
        DFA186_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA186_transition[i] = DFA.unpackEncodedString(DFA186_transitionS[i]);
        }
    }

    class DFA186 extends DFA {

        public DFA186(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 186;
            this.eot = DFA186_eot;
            this.eof = DFA186_eof;
            this.min = DFA186_min;
            this.max = DFA186_max;
            this.accept = DFA186_accept;
            this.special = DFA186_special;
            this.transition = DFA186_transition;
        }
        public String getDescription() {
            return "()* loopback of 924:17: ( ( ws )? COMMA ( ws )? fnAttribute )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA190_eotS =
        "\35\uffff";
    static final String DFA190_eofS =
        "\35\uffff";
    static final String DFA190_minS =
        "\1\4\3\0\1\uffff\24\0\4\uffff";
    static final String DFA190_maxS =
        "\1\144\3\0\1\uffff\24\0\4\uffff";
    static final String DFA190_acceptS =
        "\4\uffff\1\2\26\uffff\1\1\1\3";
    static final String DFA190_specialS =
        "\1\uffff\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\4\uffff}>";
    static final String[] DFA190_transitionS = {
            "\1\2\1\uffff\1\1\1\21\1\25\2\2\1\uffff\1\2\4\uffff\1\4\1\24"+
            "\1\4\2\uffff\2\2\3\uffff\1\2\1\7\23\2\1\uffff\2\5\1\4\1\uffff"+
            "\1\22\1\27\1\26\17\uffff\1\3\1\6\1\10\1\11\1\12\1\13\1\14\1"+
            "\15\1\16\1\17\1\20\1\23\1\30\4\uffff\15\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA190_eot = DFA.unpackEncodedString(DFA190_eotS);
    static final short[] DFA190_eof = DFA.unpackEncodedString(DFA190_eofS);
    static final char[] DFA190_min = DFA.unpackEncodedStringToUnsignedChars(DFA190_minS);
    static final char[] DFA190_max = DFA.unpackEncodedStringToUnsignedChars(DFA190_maxS);
    static final short[] DFA190_accept = DFA.unpackEncodedString(DFA190_acceptS);
    static final short[] DFA190_special = DFA.unpackEncodedString(DFA190_specialS);
    static final short[][] DFA190_transition;

    static {
        int numStates = DFA190_transitionS.length;
        DFA190_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA190_transition[i] = DFA.unpackEncodedString(DFA190_transitionS[i]);
        }
    }

    class DFA190 extends DFA {

        public DFA190(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 190;
            this.eot = DFA190_eot;
            this.eof = DFA190_eof;
            this.min = DFA190_min;
            this.max = DFA190_max;
            this.accept = DFA190_accept;
            this.special = DFA190_special;
            this.transition = DFA190_transition;
        }
        public String getDescription() {
            return "927:1: fnAttribute : ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | {...}? cp_expression | expression );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA190_1 = input.LA(1);

                         
                        int index190_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Css3()) ) {s = 27;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index190_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA190_2 = input.LA(1);

                         
                        int index190_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 27;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 4;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 28;}

                         
                        input.seek(index190_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA190_3 = input.LA(1);

                         
                        int index190_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 27;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 4;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 28;}

                         
                        input.seek(index190_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA190_5 = input.LA(1);

                         
                        int index190_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index190_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA190_6 = input.LA(1);

                         
                        int index190_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index190_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA190_7 = input.LA(1);

                         
                        int index190_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index190_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA190_8 = input.LA(1);

                         
                        int index190_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index190_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA190_9 = input.LA(1);

                         
                        int index190_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index190_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA190_10 = input.LA(1);

                         
                        int index190_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index190_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA190_11 = input.LA(1);

                         
                        int index190_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index190_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA190_12 = input.LA(1);

                         
                        int index190_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index190_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA190_13 = input.LA(1);

                         
                        int index190_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index190_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA190_14 = input.LA(1);

                         
                        int index190_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index190_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA190_15 = input.LA(1);

                         
                        int index190_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index190_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA190_16 = input.LA(1);

                         
                        int index190_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index190_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA190_17 = input.LA(1);

                         
                        int index190_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index190_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA190_18 = input.LA(1);

                         
                        int index190_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 4;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 28;}

                         
                        input.seek(index190_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA190_19 = input.LA(1);

                         
                        int index190_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 4;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 28;}

                         
                        input.seek(index190_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA190_20 = input.LA(1);

                         
                        int index190_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index190_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA190_21 = input.LA(1);

                         
                        int index190_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index190_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA190_22 = input.LA(1);

                         
                        int index190_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index190_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA190_23 = input.LA(1);

                         
                        int index190_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 28;}

                         
                        input.seek(index190_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA190_24 = input.LA(1);

                         
                        int index190_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 28;}

                         
                        input.seek(index190_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 190, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA197_eotS =
        "\33\uffff";
    static final String DFA197_eofS =
        "\33\uffff";
    static final String DFA197_minS =
        "\1\4\27\0\3\uffff";
    static final String DFA197_maxS =
        "\1\144\27\0\3\uffff";
    static final String DFA197_acceptS =
        "\30\uffff\1\2\1\uffff\1\1";
    static final String DFA197_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\3\uffff}>";
    static final String[] DFA197_transitionS = {
            "\1\24\1\uffff\1\2\1\16\1\22\2\24\1\uffff\1\24\5\uffff\1\21\1"+
            "\30\2\uffff\2\24\3\uffff\1\24\1\4\23\24\1\uffff\2\1\1\30\1\uffff"+
            "\1\17\1\26\1\23\17\uffff\1\25\1\3\1\5\1\6\1\7\1\10\1\11\1\12"+
            "\1\13\1\14\1\15\1\20\1\27\4\uffff\15\24",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA197_eot = DFA.unpackEncodedString(DFA197_eotS);
    static final short[] DFA197_eof = DFA.unpackEncodedString(DFA197_eofS);
    static final char[] DFA197_min = DFA.unpackEncodedStringToUnsignedChars(DFA197_minS);
    static final char[] DFA197_max = DFA.unpackEncodedStringToUnsignedChars(DFA197_maxS);
    static final short[] DFA197_accept = DFA.unpackEncodedString(DFA197_acceptS);
    static final short[] DFA197_special = DFA.unpackEncodedString(DFA197_specialS);
    static final short[][] DFA197_transition;

    static {
        int numStates = DFA197_transitionS.length;
        DFA197_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA197_transition[i] = DFA.unpackEncodedString(DFA197_transitionS[i]);
        }
    }

    class DFA197 extends DFA {

        public DFA197(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 197;
            this.eot = DFA197_eot;
            this.eof = DFA197_eof;
            this.min = DFA197_min;
            this.max = DFA197_max;
            this.accept = DFA197_accept;
            this.special = DFA197_special;
            this.transition = DFA197_transition;
        }
        public String getDescription() {
            return "940:1: fnAttributeValue : ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )* | {...}? cp_math_expression );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA197_1 = input.LA(1);

                         
                        int index197_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index197_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA197_2 = input.LA(1);

                         
                        int index197_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index197_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA197_3 = input.LA(1);

                         
                        int index197_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index197_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA197_4 = input.LA(1);

                         
                        int index197_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index197_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA197_5 = input.LA(1);

                         
                        int index197_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index197_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA197_6 = input.LA(1);

                         
                        int index197_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index197_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA197_7 = input.LA(1);

                         
                        int index197_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index197_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA197_8 = input.LA(1);

                         
                        int index197_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index197_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA197_9 = input.LA(1);

                         
                        int index197_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index197_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA197_10 = input.LA(1);

                         
                        int index197_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index197_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA197_11 = input.LA(1);

                         
                        int index197_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index197_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA197_12 = input.LA(1);

                         
                        int index197_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index197_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA197_13 = input.LA(1);

                         
                        int index197_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index197_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA197_14 = input.LA(1);

                         
                        int index197_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index197_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA197_15 = input.LA(1);

                         
                        int index197_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 26;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 24;}

                         
                        input.seek(index197_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA197_16 = input.LA(1);

                         
                        int index197_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 26;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 24;}

                         
                        input.seek(index197_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA197_17 = input.LA(1);

                         
                        int index197_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index197_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA197_18 = input.LA(1);

                         
                        int index197_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index197_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA197_19 = input.LA(1);

                         
                        int index197_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index197_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA197_20 = input.LA(1);

                         
                        int index197_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 26;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 24;}

                         
                        input.seek(index197_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA197_21 = input.LA(1);

                         
                        int index197_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 26;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 24;}

                         
                        input.seek(index197_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA197_22 = input.LA(1);

                         
                        int index197_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index197_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA197_23 = input.LA(1);

                         
                        int index197_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index197_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 197, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA196_eotS =
        "\41\uffff";
    static final String DFA196_eofS =
        "\41\uffff";
    static final String DFA196_minS =
        "\2\4\37\uffff";
    static final String DFA196_maxS =
        "\2\144\37\uffff";
    static final String DFA196_acceptS =
        "\2\uffff\1\2\36\1";
    static final String DFA196_specialS =
        "\1\0\1\1\37\uffff}>";
    static final String[] DFA196_transitionS = {
            "\1\27\1\uffff\1\5\1\21\1\25\2\27\1\2\1\27\5\uffff\1\24\1\uffff"+
            "\1\2\1\uffff\2\27\3\uffff\1\27\1\7\23\27\1\3\2\4\2\uffff\1\22"+
            "\1\31\1\26\17\uffff\1\30\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1"+
            "\16\1\17\1\20\1\23\1\32\3\1\1\uffff\15\27",
            "\1\35\1\uffff\1\5\1\21\1\25\2\35\1\2\1\35\5\uffff\1\24\1\uffff"+
            "\1\2\1\uffff\2\35\3\uffff\1\35\1\7\23\35\1\3\2\4\2\uffff\1\33"+
            "\1\37\1\26\17\uffff\1\36\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1"+
            "\16\1\17\1\20\1\34\1\40\3\1\1\uffff\15\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA196_eot = DFA.unpackEncodedString(DFA196_eotS);
    static final short[] DFA196_eof = DFA.unpackEncodedString(DFA196_eofS);
    static final char[] DFA196_min = DFA.unpackEncodedStringToUnsignedChars(DFA196_minS);
    static final char[] DFA196_max = DFA.unpackEncodedStringToUnsignedChars(DFA196_maxS);
    static final short[] DFA196_accept = DFA.unpackEncodedString(DFA196_acceptS);
    static final short[] DFA196_special = DFA.unpackEncodedString(DFA196_specialS);
    static final short[][] DFA196_transition;

    static {
        int numStates = DFA196_transitionS.length;
        DFA196_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA196_transition[i] = DFA.unpackEncodedString(DFA196_transitionS[i]);
        }
    }

    class DFA196 extends DFA {

        public DFA196(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 196;
            this.eot = DFA196_eot;
            this.eof = DFA196_eof;
            this.min = DFA196_min;
            this.max = DFA196_max;
            this.accept = DFA196_accept;
            this.special = DFA196_special;
            this.transition = DFA196_transition;
        }
        public String getDescription() {
            return "()* loopback of 942:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA196_0 = input.LA(1);

                         
                        int index196_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA196_0>=WS && LA196_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA196_0==COMMA||LA196_0==RPAREN) ) {s = 2;}

                        else if ( (LA196_0==SOLIDUS) && (synpred29_Css3())) {s = 3;}

                        else if ( ((LA196_0>=MINUS && LA196_0<=PLUS)) && (synpred29_Css3())) {s = 4;}

                        else if ( (LA196_0==IDENT) && (synpred29_Css3())) {s = 5;}

                        else if ( (LA196_0==NUMBER) && (synpred29_Css3())) {s = 6;}

                        else if ( (LA196_0==PERCENTAGE) && (synpred29_Css3())) {s = 7;}

                        else if ( (LA196_0==LENGTH) && (synpred29_Css3())) {s = 8;}

                        else if ( (LA196_0==EMS) && (synpred29_Css3())) {s = 9;}

                        else if ( (LA196_0==REM) && (synpred29_Css3())) {s = 10;}

                        else if ( (LA196_0==EXS) && (synpred29_Css3())) {s = 11;}

                        else if ( (LA196_0==ANGLE) && (synpred29_Css3())) {s = 12;}

                        else if ( (LA196_0==TIME) && (synpred29_Css3())) {s = 13;}

                        else if ( (LA196_0==FREQ) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA196_0==RESOLUTION) && (synpred29_Css3())) {s = 15;}

                        else if ( (LA196_0==DIMENSION) && (synpred29_Css3())) {s = 16;}

                        else if ( (LA196_0==STRING) && (synpred29_Css3())) {s = 17;}

                        else if ( (LA196_0==TILDE) && (synpred29_Css3())) {s = 18;}

                        else if ( (LA196_0==LESS_JS_STRING) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA196_0==GEN) && (synpred29_Css3())) {s = 20;}

                        else if ( (LA196_0==URI) && (synpred29_Css3())) {s = 21;}

                        else if ( (LA196_0==HASH) && (synpred29_Css3())) {s = 22;}

                        else if ( (LA196_0==NAMESPACE_SYM||(LA196_0>=CHARSET_SYM && LA196_0<=IMPORT_SYM)||LA196_0==MEDIA_SYM||(LA196_0>=AT_IDENT && LA196_0<=MOZ_DOCUMENT_SYM)||LA196_0==WEBKIT_KEYFRAMES_SYM||(LA196_0>=PAGE_SYM && LA196_0<=RIGHTBOTTOM_SYM)||(LA196_0>=SASS_CONTENT && LA196_0<=SASS_WHILE)) && (synpred29_Css3())) {s = 23;}

                        else if ( (LA196_0==SASS_VAR) && (synpred29_Css3())) {s = 24;}

                        else if ( (LA196_0==HASH_SYMBOL) && (synpred29_Css3())) {s = 25;}

                        else if ( (LA196_0==PERCENTAGE_SYMBOL) && (synpred29_Css3())) {s = 26;}

                         
                        input.seek(index196_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA196_1 = input.LA(1);

                         
                        int index196_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1==COMMA||LA196_1==RPAREN) ) {s = 2;}

                        else if ( ((LA196_1>=WS && LA196_1<=COMMENT)) ) {s = 1;}

                        else if ( ((LA196_1>=MINUS && LA196_1<=PLUS)) && (synpred29_Css3())) {s = 4;}

                        else if ( (LA196_1==IDENT) && (synpred29_Css3())) {s = 5;}

                        else if ( (LA196_1==NUMBER) && (synpred29_Css3())) {s = 6;}

                        else if ( (LA196_1==PERCENTAGE) && (synpred29_Css3())) {s = 7;}

                        else if ( (LA196_1==LENGTH) && (synpred29_Css3())) {s = 8;}

                        else if ( (LA196_1==EMS) && (synpred29_Css3())) {s = 9;}

                        else if ( (LA196_1==REM) && (synpred29_Css3())) {s = 10;}

                        else if ( (LA196_1==EXS) && (synpred29_Css3())) {s = 11;}

                        else if ( (LA196_1==ANGLE) && (synpred29_Css3())) {s = 12;}

                        else if ( (LA196_1==TIME) && (synpred29_Css3())) {s = 13;}

                        else if ( (LA196_1==FREQ) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA196_1==RESOLUTION) && (synpred29_Css3())) {s = 15;}

                        else if ( (LA196_1==DIMENSION) && (synpred29_Css3())) {s = 16;}

                        else if ( (LA196_1==STRING) && (synpred29_Css3())) {s = 17;}

                        else if ( (LA196_1==TILDE) && (synpred29_Css3())) {s = 27;}

                        else if ( (LA196_1==LESS_JS_STRING) && (synpred29_Css3())) {s = 28;}

                        else if ( (LA196_1==GEN) && (synpred29_Css3())) {s = 20;}

                        else if ( (LA196_1==URI) && (synpred29_Css3())) {s = 21;}

                        else if ( (LA196_1==HASH) && (synpred29_Css3())) {s = 22;}

                        else if ( (LA196_1==NAMESPACE_SYM||(LA196_1>=CHARSET_SYM && LA196_1<=IMPORT_SYM)||LA196_1==MEDIA_SYM||(LA196_1>=AT_IDENT && LA196_1<=MOZ_DOCUMENT_SYM)||LA196_1==WEBKIT_KEYFRAMES_SYM||(LA196_1>=PAGE_SYM && LA196_1<=RIGHTBOTTOM_SYM)||(LA196_1>=SASS_CONTENT && LA196_1<=SASS_WHILE)) && (synpred29_Css3())) {s = 29;}

                        else if ( (LA196_1==SASS_VAR) && (synpred29_Css3())) {s = 30;}

                        else if ( (LA196_1==HASH_SYMBOL) && (synpred29_Css3())) {s = 31;}

                        else if ( (LA196_1==PERCENTAGE_SYMBOL) && (synpred29_Css3())) {s = 32;}

                        else if ( (LA196_1==SOLIDUS) && (synpred29_Css3())) {s = 3;}

                         
                        input.seek(index196_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 196, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA195_eotS =
        "\5\uffff";
    static final String DFA195_eofS =
        "\5\uffff";
    static final String DFA195_minS =
        "\2\4\3\uffff";
    static final String DFA195_maxS =
        "\2\144\3\uffff";
    static final String DFA195_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA195_specialS =
        "\5\uffff}>";
    static final String[] DFA195_transitionS = {
            "\1\3\1\uffff\5\3\1\uffff\1\3\5\uffff\1\3\3\uffff\2\3\3\uffff"+
            "\25\3\1\2\2\3\2\uffff\3\3\17\uffff\15\3\3\1\1\uffff\15\3",
            "\1\4\1\uffff\5\4\1\uffff\1\4\5\uffff\1\4\3\uffff\2\4\3\uffff"+
            "\25\4\1\2\2\4\2\uffff\3\4\17\uffff\15\4\3\1\1\uffff\15\4",
            "",
            "",
            ""
    };

    static final short[] DFA195_eot = DFA.unpackEncodedString(DFA195_eotS);
    static final short[] DFA195_eof = DFA.unpackEncodedString(DFA195_eofS);
    static final char[] DFA195_min = DFA.unpackEncodedStringToUnsignedChars(DFA195_minS);
    static final char[] DFA195_max = DFA.unpackEncodedStringToUnsignedChars(DFA195_maxS);
    static final short[] DFA195_accept = DFA.unpackEncodedString(DFA195_acceptS);
    static final short[] DFA195_special = DFA.unpackEncodedString(DFA195_specialS);
    static final short[][] DFA195_transition;

    static {
        int numStates = DFA195_transitionS.length;
        DFA195_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA195_transition[i] = DFA.unpackEncodedString(DFA195_transitionS[i]);
        }
    }

    class DFA195 extends DFA {

        public DFA195(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 195;
            this.eot = DFA195_eot;
            this.eof = DFA195_eof;
            this.min = DFA195_min;
            this.max = DFA195_max;
            this.accept = DFA195_accept;
            this.special = DFA195_special;
            this.transition = DFA195_transition;
        }
        public String getDescription() {
            return "942:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA204_eotS =
        "\4\uffff";
    static final String DFA204_eofS =
        "\2\3\2\uffff";
    static final String DFA204_minS =
        "\2\4\2\uffff";
    static final String DFA204_maxS =
        "\2\156\2\uffff";
    static final String DFA204_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA204_specialS =
        "\4\uffff}>";
    static final String[] DFA204_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\2\3\1\uffff\12\3\1\uffff\1\3\6\uffff"+
            "\2\3\14\uffff\3\1\1\2\15\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\2\3\1\uffff\12\3\1\uffff\1\3\6\uffff"+
            "\2\3\14\uffff\3\1\1\2\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA204_eot = DFA.unpackEncodedString(DFA204_eotS);
    static final short[] DFA204_eof = DFA.unpackEncodedString(DFA204_eofS);
    static final char[] DFA204_min = DFA.unpackEncodedStringToUnsignedChars(DFA204_minS);
    static final char[] DFA204_max = DFA.unpackEncodedStringToUnsignedChars(DFA204_maxS);
    static final short[] DFA204_accept = DFA.unpackEncodedString(DFA204_acceptS);
    static final short[] DFA204_special = DFA.unpackEncodedString(DFA204_specialS);
    static final short[][] DFA204_transition;

    static {
        int numStates = DFA204_transitionS.length;
        DFA204_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA204_transition[i] = DFA.unpackEncodedString(DFA204_transitionS[i]);
        }
    }

    class DFA204 extends DFA {

        public DFA204(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 204;
            this.eot = DFA204_eot;
            this.eof = DFA204_eof;
            this.min = DFA204_min;
            this.max = DFA204_max;
            this.accept = DFA204_accept;
            this.special = DFA204_special;
            this.transition = DFA204_transition;
        }
        public String getDescription() {
            return "961:72: ( ( ws )? SASS_DEFAULT )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA209_eotS =
        "\60\uffff";
    static final String DFA209_eofS =
        "\1\2\57\uffff";
    static final String DFA209_minS =
        "\1\4\1\0\34\uffff\1\0\21\uffff";
    static final String DFA209_maxS =
        "\1\156\1\0\34\uffff\1\0\21\uffff";
    static final String DFA209_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA209_specialS =
        "\1\uffff\1\0\34\uffff\1\1\21\uffff}>";
    static final String[] DFA209_transitionS = {
            "\3\2\2\uffff\2\2\1\36\3\2\3\uffff\1\2\1\uffff\4\2\3\uffff\1"+
            "\2\1\uffff\23\2\1\uffff\2\2\1\uffff\12\2\1\uffff\1\2\6\uffff"+
            "\2\2\14\uffff\3\1\16\2\11\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA209_eot = DFA.unpackEncodedString(DFA209_eotS);
    static final short[] DFA209_eof = DFA.unpackEncodedString(DFA209_eofS);
    static final char[] DFA209_min = DFA.unpackEncodedStringToUnsignedChars(DFA209_minS);
    static final char[] DFA209_max = DFA.unpackEncodedStringToUnsignedChars(DFA209_maxS);
    static final short[] DFA209_accept = DFA.unpackEncodedString(DFA209_acceptS);
    static final short[] DFA209_special = DFA.unpackEncodedString(DFA209_specialS);
    static final short[][] DFA209_transition;

    static {
        int numStates = DFA209_transitionS.length;
        DFA209_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA209_transition[i] = DFA.unpackEncodedString(DFA209_transitionS[i]);
        }
    }

    class DFA209 extends DFA {

        public DFA209(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 209;
            this.eot = DFA209_eot;
            this.eof = DFA209_eof;
            this.min = DFA209_min;
            this.max = DFA209_max;
            this.accept = DFA209_accept;
            this.special = DFA209_special;
            this.transition = DFA209_transition;
        }
        public String getDescription() {
            return "()* loopback of 977:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA209_1 = input.LA(1);

                         
                        int index209_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index209_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA209_30 = input.LA(1);

                         
                        int index209_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index209_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 209, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA213_eotS =
        "\105\uffff";
    static final String DFA213_eofS =
        "\1\2\104\uffff";
    static final String DFA213_minS =
        "\1\4\1\0\5\uffff\2\0\1\uffff\16\0\1\uffff\1\0\4\uffff\1\0\3\uffff"+
        "\11\0\1\uffff\1\0\6\uffff\1\0\21\uffff";
    static final String DFA213_maxS =
        "\1\156\1\0\5\uffff\2\0\1\uffff\16\0\1\uffff\1\0\4\uffff\1\0\3\uffff"+
        "\11\0\1\uffff\1\0\6\uffff\1\0\21\uffff";
    static final String DFA213_acceptS =
        "\2\uffff\1\3\56\uffff\1\1\1\2\1\uffff\21\2";
    static final String DFA213_specialS =
        "\1\0\1\1\5\uffff\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\uffff\1\22\4\uffff\1\23\3"+
        "\uffff\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\uffff\1\35"+
        "\6\uffff\1\36\21\uffff}>";
    static final String[] DFA213_transitionS = {
            "\1\54\1\2\1\13\1\77\1\101\1\54\1\51\1\2\1\46\2\2\1\61\1\uffff"+
            "\1\62\1\15\1\104\2\2\1\45\1\43\3\uffff\1\44\1\65\1\26\1\47\1"+
            "\42\20\54\1\uffff\1\36\1\31\1\103\1\27\1\63\1\12\1\14\6\2\1"+
            "\uffff\1\2\6\uffff\1\2\1\17\1\64\1\66\1\67\1\70\1\71\1\72\1"+
            "\73\1\74\1\75\1\76\1\100\1\102\3\1\1\2\1\25\1\7\1\10\1\16\2"+
            "\20\1\21\1\54\1\22\1\52\1\50\1\23\1\24\6\61\2\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA213_eot = DFA.unpackEncodedString(DFA213_eotS);
    static final short[] DFA213_eof = DFA.unpackEncodedString(DFA213_eofS);
    static final char[] DFA213_min = DFA.unpackEncodedStringToUnsignedChars(DFA213_minS);
    static final char[] DFA213_max = DFA.unpackEncodedStringToUnsignedChars(DFA213_maxS);
    static final short[] DFA213_accept = DFA.unpackEncodedString(DFA213_acceptS);
    static final short[] DFA213_special = DFA.unpackEncodedString(DFA213_specialS);
    static final short[][] DFA213_transition;

    static {
        int numStates = DFA213_transitionS.length;
        DFA213_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA213_transition[i] = DFA.unpackEncodedString(DFA213_transitionS[i]);
        }
    }

    class DFA213 extends DFA {

        public DFA213(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 213;
            this.eot = DFA213_eot;
            this.eof = DFA213_eof;
            this.min = DFA213_min;
            this.max = DFA213_max;
            this.accept = DFA213_accept;
            this.special = DFA213_special;
            this.transition = DFA213_transition;
        }
        public String getDescription() {
            return "()* loopback of 993:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA213_0 = input.LA(1);

                         
                        int index213_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA213_0>=WS && LA213_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA213_0==EOF||LA213_0==SEMI||LA213_0==COMMA||(LA213_0>=LBRACE && LA213_0<=RBRACE)||(LA213_0>=RPAREN && LA213_0<=COLON)||(LA213_0>=DOT && LA213_0<=PIPE)||LA213_0==LESS_AND||LA213_0==RBRACKET||LA213_0==SASS_DEFAULT||(LA213_0>=CP_DOTS && LA213_0<=LESS_REST)||LA213_0==AT_SIGN) ) {s = 2;}

                        else if ( (LA213_0==SASS_MIXIN) ) {s = 7;}

                        else if ( (LA213_0==SASS_INCLUDE) ) {s = 8;}

                        else if ( (LA213_0==HASH_SYMBOL) ) {s = 10;}

                        else if ( (LA213_0==IDENT) ) {s = 11;}

                        else if ( (LA213_0==HASH) ) {s = 12;}

                        else if ( (LA213_0==GEN) ) {s = 13;}

                        else if ( (LA213_0==SASS_EXTEND) ) {s = 14;}

                        else if ( (LA213_0==SASS_VAR) ) {s = 15;}

                        else if ( ((LA213_0>=SASS_DEBUG && LA213_0<=SASS_WARN)) ) {s = 16;}

                        else if ( (LA213_0==SASS_IF) ) {s = 17;}

                        else if ( (LA213_0==SASS_FOR) ) {s = 18;}

                        else if ( (LA213_0==SASS_EACH) ) {s = 19;}

                        else if ( (LA213_0==SASS_WHILE) ) {s = 20;}

                        else if ( (LA213_0==SASS_CONTENT) ) {s = 21;}

                        else if ( (LA213_0==PAGE_SYM) ) {s = 22;}

                        else if ( (LA213_0==GREATER) ) {s = 23;}

                        else if ( (LA213_0==PLUS) ) {s = 25;}

                        else if ( (LA213_0==MINUS) ) {s = 30;}

                        else if ( (LA213_0==FONT_FACE_SYM) ) {s = 34;}

                        else if ( (LA213_0==MOZ_DOCUMENT_SYM) ) {s = 35;}

                        else if ( (LA213_0==WEBKIT_KEYFRAMES_SYM) ) {s = 36;}

                        else if ( (LA213_0==AT_IDENT) ) {s = 37;}

                        else if ( (LA213_0==MEDIA_SYM) ) {s = 38;}

                        else if ( (LA213_0==COUNTER_STYLE_SYM) ) {s = 39;}

                        else if ( (LA213_0==SASS_RETURN) ) {s = 40;}

                        else if ( (LA213_0==IMPORT_SYM) ) {s = 41;}

                        else if ( (LA213_0==SASS_FUNCTION) ) {s = 42;}

                        else if ( (LA213_0==NAMESPACE_SYM||LA213_0==CHARSET_SYM||(LA213_0>=TOPLEFTCORNER_SYM && LA213_0<=RIGHTBOTTOM_SYM)||LA213_0==SASS_ELSE) ) {s = 44;}

                        else if ( (LA213_0==AND||(LA213_0>=OR && LA213_0<=GREATER_OR_EQ)) && (synpred31_Css3())) {s = 49;}

                        else if ( (LA213_0==NOT) && (synpred32_Css3())) {s = 50;}

                        else if ( (LA213_0==TILDE) ) {s = 51;}

                        else if ( (LA213_0==NUMBER) && (synpred32_Css3())) {s = 52;}

                        else if ( (LA213_0==PERCENTAGE) && (synpred32_Css3())) {s = 53;}

                        else if ( (LA213_0==LENGTH) && (synpred32_Css3())) {s = 54;}

                        else if ( (LA213_0==EMS) && (synpred32_Css3())) {s = 55;}

                        else if ( (LA213_0==REM) && (synpred32_Css3())) {s = 56;}

                        else if ( (LA213_0==EXS) && (synpred32_Css3())) {s = 57;}

                        else if ( (LA213_0==ANGLE) && (synpred32_Css3())) {s = 58;}

                        else if ( (LA213_0==TIME) && (synpred32_Css3())) {s = 59;}

                        else if ( (LA213_0==FREQ) && (synpred32_Css3())) {s = 60;}

                        else if ( (LA213_0==RESOLUTION) && (synpred32_Css3())) {s = 61;}

                        else if ( (LA213_0==DIMENSION) && (synpred32_Css3())) {s = 62;}

                        else if ( (LA213_0==STRING) && (synpred32_Css3())) {s = 63;}

                        else if ( (LA213_0==LESS_JS_STRING) && (synpred32_Css3())) {s = 64;}

                        else if ( (LA213_0==URI) && (synpred32_Css3())) {s = 65;}

                        else if ( (LA213_0==PERCENTAGE_SYMBOL) && (synpred32_Css3())) {s = 66;}

                        else if ( (LA213_0==IMPORTANT_SYM) && (synpred32_Css3())) {s = 67;}

                        else if ( (LA213_0==LPAREN) && (synpred32_Css3())) {s = 68;}

                         
                        input.seek(index213_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA213_1 = input.LA(1);

                         
                        int index213_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_Css3()) ) {s = 49;}

                        else if ( (synpred32_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index213_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA213_7 = input.LA(1);

                         
                        int index213_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index213_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA213_8 = input.LA(1);

                         
                        int index213_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index213_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA213_10 = input.LA(1);

                         
                        int index213_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index213_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA213_11 = input.LA(1);

                         
                        int index213_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index213_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA213_12 = input.LA(1);

                         
                        int index213_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index213_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA213_13 = input.LA(1);

                         
                        int index213_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index213_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA213_14 = input.LA(1);

                         
                        int index213_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index213_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA213_15 = input.LA(1);

                         
                        int index213_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 68;}

                        else if ( ((((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}

                         
                        input.seek(index213_15);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA213_16 = input.LA(1);

                         
                        int index213_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index213_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA213_17 = input.LA(1);

                         
                        int index213_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index213_17);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA213_18 = input.LA(1);

                         
                        int index213_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index213_18);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA213_19 = input.LA(1);

                         
                        int index213_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index213_19);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA213_20 = input.LA(1);

                         
                        int index213_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index213_20);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA213_21 = input.LA(1);

                         
                        int index213_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index213_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA213_22 = input.LA(1);

                         
                        int index213_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index213_22);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA213_23 = input.LA(1);

                         
                        int index213_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_Css3()) ) {s = 49;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index213_23);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA213_25 = input.LA(1);

                         
                        int index213_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index213_25);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA213_30 = input.LA(1);

                         
                        int index213_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index213_30);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA213_34 = input.LA(1);

                         
                        int index213_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index213_34);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA213_35 = input.LA(1);

                         
                        int index213_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index213_35);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA213_36 = input.LA(1);

                         
                        int index213_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index213_36);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA213_37 = input.LA(1);

                         
                        int index213_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index213_37);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA213_38 = input.LA(1);

                         
                        int index213_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index213_38);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA213_39 = input.LA(1);

                         
                        int index213_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index213_39);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA213_40 = input.LA(1);

                         
                        int index213_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index213_40);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA213_41 = input.LA(1);

                         
                        int index213_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index213_41);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA213_42 = input.LA(1);

                         
                        int index213_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index213_42);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA213_44 = input.LA(1);

                         
                        int index213_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index213_44);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA213_51 = input.LA(1);

                         
                        int index213_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred32_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index213_51);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 213, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA218_eotS =
        "\33\uffff";
    static final String DFA218_eofS =
        "\33\uffff";
    static final String DFA218_minS =
        "\1\4\30\uffff\1\0\1\uffff";
    static final String DFA218_maxS =
        "\1\144\30\uffff\1\0\1\uffff";
    static final String DFA218_acceptS =
        "\1\uffff\30\1\1\uffff\1\2";
    static final String DFA218_specialS =
        "\1\0\30\uffff\1\1\1\uffff}>";
    static final String[] DFA218_transitionS = {
            "\1\24\1\uffff\1\2\1\16\1\22\2\24\1\uffff\1\24\5\uffff\1\21\1"+
            "\31\2\uffff\2\24\3\uffff\1\24\1\4\23\24\1\uffff\2\1\1\30\1\uffff"+
            "\1\17\1\26\1\23\17\uffff\1\25\1\3\1\5\1\6\1\7\1\10\1\11\1\12"+
            "\1\13\1\14\1\15\1\20\1\27\4\uffff\15\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA218_eot = DFA.unpackEncodedString(DFA218_eotS);
    static final short[] DFA218_eof = DFA.unpackEncodedString(DFA218_eofS);
    static final char[] DFA218_min = DFA.unpackEncodedStringToUnsignedChars(DFA218_minS);
    static final char[] DFA218_max = DFA.unpackEncodedStringToUnsignedChars(DFA218_maxS);
    static final short[] DFA218_accept = DFA.unpackEncodedString(DFA218_acceptS);
    static final short[] DFA218_special = DFA.unpackEncodedString(DFA218_specialS);
    static final short[][] DFA218_transition;

    static {
        int numStates = DFA218_transitionS.length;
        DFA218_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA218_transition[i] = DFA.unpackEncodedString(DFA218_transitionS[i]);
        }
    }

    class DFA218 extends DFA {

        public DFA218(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 218;
            this.eot = DFA218_eot;
            this.eof = DFA218_eof;
            this.min = DFA218_min;
            this.max = DFA218_max;
            this.accept = DFA218_accept;
            this.special = DFA218_special;
            this.transition = DFA218_transition;
        }
        public String getDescription() {
            return "1007:9: ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA218_0 = input.LA(1);

                         
                        int index218_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA218_0>=MINUS && LA218_0<=PLUS)) && (synpred33_Css3())) {s = 1;}

                        else if ( (LA218_0==IDENT) && (synpred33_Css3())) {s = 2;}

                        else if ( (LA218_0==NUMBER) && (synpred33_Css3())) {s = 3;}

                        else if ( (LA218_0==PERCENTAGE) && (synpred33_Css3())) {s = 4;}

                        else if ( (LA218_0==LENGTH) && (synpred33_Css3())) {s = 5;}

                        else if ( (LA218_0==EMS) && (synpred33_Css3())) {s = 6;}

                        else if ( (LA218_0==REM) && (synpred33_Css3())) {s = 7;}

                        else if ( (LA218_0==EXS) && (synpred33_Css3())) {s = 8;}

                        else if ( (LA218_0==ANGLE) && (synpred33_Css3())) {s = 9;}

                        else if ( (LA218_0==TIME) && (synpred33_Css3())) {s = 10;}

                        else if ( (LA218_0==FREQ) && (synpred33_Css3())) {s = 11;}

                        else if ( (LA218_0==RESOLUTION) && (synpred33_Css3())) {s = 12;}

                        else if ( (LA218_0==DIMENSION) && (synpred33_Css3())) {s = 13;}

                        else if ( (LA218_0==STRING) && (synpred33_Css3())) {s = 14;}

                        else if ( (LA218_0==TILDE) && (synpred33_Css3())) {s = 15;}

                        else if ( (LA218_0==LESS_JS_STRING) && (synpred33_Css3())) {s = 16;}

                        else if ( (LA218_0==GEN) && (synpred33_Css3())) {s = 17;}

                        else if ( (LA218_0==URI) && (synpred33_Css3())) {s = 18;}

                        else if ( (LA218_0==HASH) && (synpred33_Css3())) {s = 19;}

                        else if ( (LA218_0==NAMESPACE_SYM||(LA218_0>=CHARSET_SYM && LA218_0<=IMPORT_SYM)||LA218_0==MEDIA_SYM||(LA218_0>=AT_IDENT && LA218_0<=MOZ_DOCUMENT_SYM)||LA218_0==WEBKIT_KEYFRAMES_SYM||(LA218_0>=PAGE_SYM && LA218_0<=RIGHTBOTTOM_SYM)||(LA218_0>=SASS_CONTENT && LA218_0<=SASS_WHILE)) && (synpred33_Css3())) {s = 20;}

                        else if ( (LA218_0==SASS_VAR) && (synpred33_Css3())) {s = 21;}

                        else if ( (LA218_0==HASH_SYMBOL) && (synpred33_Css3())) {s = 22;}

                        else if ( (LA218_0==PERCENTAGE_SYMBOL) && (synpred33_Css3())) {s = 23;}

                        else if ( (LA218_0==IMPORTANT_SYM) && (synpred33_Css3())) {s = 24;}

                        else if ( (LA218_0==LPAREN) ) {s = 25;}

                         
                        input.seek(index218_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA218_25 = input.LA(1);

                         
                        int index218_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_Css3()) ) {s = 24;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index218_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 218, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA222_eotS =
        "\106\uffff";
    static final String DFA222_eofS =
        "\1\2\105\uffff";
    static final String DFA222_minS =
        "\1\4\1\0\4\uffff\1\0\35\uffff\2\0\40\uffff";
    static final String DFA222_maxS =
        "\1\156\1\0\4\uffff\1\0\35\uffff\2\0\40\uffff";
    static final String DFA222_acceptS =
        "\2\uffff\1\2\102\uffff\1\1";
    static final String DFA222_specialS =
        "\1\0\1\1\4\uffff\1\2\35\uffff\1\3\1\4\40\uffff}>";
    static final String[] DFA222_transitionS = {
            "\14\2\1\uffff\7\2\3\uffff\25\2\1\105\1\6\1\45\11\2\1\44\1\2"+
            "\1\uffff\1\2\6\uffff\16\2\3\1\26\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA222_eot = DFA.unpackEncodedString(DFA222_eotS);
    static final short[] DFA222_eof = DFA.unpackEncodedString(DFA222_eofS);
    static final char[] DFA222_min = DFA.unpackEncodedStringToUnsignedChars(DFA222_minS);
    static final char[] DFA222_max = DFA.unpackEncodedStringToUnsignedChars(DFA222_maxS);
    static final short[] DFA222_accept = DFA.unpackEncodedString(DFA222_acceptS);
    static final short[] DFA222_special = DFA.unpackEncodedString(DFA222_specialS);
    static final short[][] DFA222_transition;

    static {
        int numStates = DFA222_transitionS.length;
        DFA222_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA222_transition[i] = DFA.unpackEncodedString(DFA222_transitionS[i]);
        }
    }

    class DFA222 extends DFA {

        public DFA222(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 222;
            this.eot = DFA222_eot;
            this.eof = DFA222_eof;
            this.min = DFA222_min;
            this.max = DFA222_max;
            this.accept = DFA222_accept;
            this.special = DFA222_special;
            this.transition = DFA222_transition;
        }
        public String getDescription() {
            return "()* loopback of 1034:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA222_0 = input.LA(1);

                         
                        int index222_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA222_0>=WS && LA222_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA222_0==EOF||(LA222_0>=NAMESPACE_SYM && LA222_0<=AND)||(LA222_0>=NOT && LA222_0<=MOZ_DOCUMENT_SYM)||(LA222_0>=WEBKIT_KEYFRAMES_SYM && LA222_0<=RIGHTBOTTOM_SYM)||(LA222_0>=IMPORTANT_SYM && LA222_0<=SASS_EXTEND_ONLY_SELECTOR)||LA222_0==PIPE||LA222_0==LESS_AND||(LA222_0>=RBRACKET && LA222_0<=PERCENTAGE_SYMBOL)||(LA222_0>=SASS_DEFAULT && LA222_0<=LESS_REST)||LA222_0==AT_SIGN) ) {s = 2;}

                        else if ( (LA222_0==MINUS) ) {s = 6;}

                        else if ( (LA222_0==STAR) ) {s = 36;}

                        else if ( (LA222_0==PLUS) ) {s = 37;}

                        else if ( (LA222_0==SOLIDUS) && (synpred34_Css3())) {s = 69;}

                         
                        input.seek(index222_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA222_1 = input.LA(1);

                         
                        int index222_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index222_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA222_6 = input.LA(1);

                         
                        int index222_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index222_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA222_36 = input.LA(1);

                         
                        int index222_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index222_36);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA222_37 = input.LA(1);

                         
                        int index222_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index222_37);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 222, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA227_eotS =
        "\6\uffff";
    static final String DFA227_eofS =
        "\6\uffff";
    static final String DFA227_minS =
        "\2\4\3\uffff\1\4";
    static final String DFA227_maxS =
        "\2\144\3\uffff\1\144";
    static final String DFA227_acceptS =
        "\2\uffff\1\1\1\2\1\3\1\uffff";
    static final String DFA227_specialS =
        "\6\uffff}>";
    static final String[] DFA227_transitionS = {
            "\1\2\1\uffff\5\2\1\uffff\1\2\5\uffff\1\2\1\4\2\uffff\2\2\3\uffff"+
            "\25\2\1\uffff\2\1\1\3\1\uffff\3\2\17\uffff\15\2\4\uffff\15\2",
            "\1\2\1\uffff\5\2\1\uffff\1\2\5\uffff\1\2\1\4\2\uffff\2\2\3"+
            "\uffff\25\2\5\uffff\3\2\17\uffff\15\2\3\5\1\uffff\15\2",
            "",
            "",
            "",
            "\1\2\1\uffff\5\2\1\uffff\1\2\5\uffff\1\2\1\4\2\uffff\2\2\3"+
            "\uffff\25\2\5\uffff\3\2\17\uffff\15\2\3\5\1\uffff\15\2"
    };

    static final short[] DFA227_eot = DFA.unpackEncodedString(DFA227_eotS);
    static final short[] DFA227_eof = DFA.unpackEncodedString(DFA227_eofS);
    static final char[] DFA227_min = DFA.unpackEncodedStringToUnsignedChars(DFA227_minS);
    static final char[] DFA227_max = DFA.unpackEncodedStringToUnsignedChars(DFA227_maxS);
    static final short[] DFA227_accept = DFA.unpackEncodedString(DFA227_acceptS);
    static final short[] DFA227_special = DFA.unpackEncodedString(DFA227_specialS);
    static final short[][] DFA227_transition;

    static {
        int numStates = DFA227_transitionS.length;
        DFA227_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA227_transition[i] = DFA.unpackEncodedString(DFA227_transitionS[i]);
        }
    }

    class DFA227 extends DFA {

        public DFA227(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 227;
            this.eot = DFA227_eot;
            this.eof = DFA227_eof;
            this.min = DFA227_min;
            this.max = DFA227_max;
            this.accept = DFA227_accept;
            this.special = DFA227_special;
            this.transition = DFA227_transition;
        }
        public String getDescription() {
            return "1039:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA232_eotS =
        "\4\uffff";
    static final String DFA232_eofS =
        "\4\uffff";
    static final String DFA232_minS =
        "\2\15\2\uffff";
    static final String DFA232_maxS =
        "\2\155\2\uffff";
    static final String DFA232_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA232_specialS =
        "\4\uffff}>";
    static final String[] DFA232_transitionS = {
            "\1\3\106\uffff\3\1\26\uffff\1\2",
            "\1\3\106\uffff\3\1\26\uffff\1\2",
            "",
            ""
    };

    static final short[] DFA232_eot = DFA.unpackEncodedString(DFA232_eotS);
    static final short[] DFA232_eof = DFA.unpackEncodedString(DFA232_eofS);
    static final char[] DFA232_min = DFA.unpackEncodedStringToUnsignedChars(DFA232_minS);
    static final char[] DFA232_max = DFA.unpackEncodedStringToUnsignedChars(DFA232_maxS);
    static final short[] DFA232_accept = DFA.unpackEncodedString(DFA232_acceptS);
    static final short[] DFA232_special = DFA.unpackEncodedString(DFA232_specialS);
    static final short[][] DFA232_transition;

    static {
        int numStates = DFA232_transitionS.length;
        DFA232_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA232_transition[i] = DFA.unpackEncodedString(DFA232_transitionS[i]);
        }
    }

    class DFA232 extends DFA {

        public DFA232(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 232;
            this.eot = DFA232_eot;
            this.eof = DFA232_eof;
            this.min = DFA232_min;
            this.max = DFA232_max;
            this.accept = DFA232_accept;
            this.special = DFA232_special;
            this.transition = DFA232_transition;
        }
        public String getDescription() {
            return "1055:81: ( ( ws )? less_mixin_guarded )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA236_eotS =
        "\4\uffff";
    static final String DFA236_eofS =
        "\4\uffff";
    static final String DFA236_minS =
        "\2\15\2\uffff";
    static final String DFA236_maxS =
        "\2\126\2\uffff";
    static final String DFA236_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA236_specialS =
        "\4\uffff}>";
    static final String[] DFA236_transitionS = {
            "\1\3\5\uffff\1\2\100\uffff\3\1",
            "\1\3\5\uffff\1\2\100\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA236_eot = DFA.unpackEncodedString(DFA236_eotS);
    static final short[] DFA236_eof = DFA.unpackEncodedString(DFA236_eofS);
    static final char[] DFA236_min = DFA.unpackEncodedStringToUnsignedChars(DFA236_minS);
    static final char[] DFA236_max = DFA.unpackEncodedStringToUnsignedChars(DFA236_maxS);
    static final short[] DFA236_accept = DFA.unpackEncodedString(DFA236_acceptS);
    static final short[] DFA236_special = DFA.unpackEncodedString(DFA236_specialS);
    static final short[][] DFA236_transition;

    static {
        int numStates = DFA236_transitionS.length;
        DFA236_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA236_transition[i] = DFA.unpackEncodedString(DFA236_transitionS[i]);
        }
    }

    class DFA236 extends DFA {

        public DFA236(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 236;
            this.eot = DFA236_eot;
            this.eof = DFA236_eof;
            this.min = DFA236_min;
            this.max = DFA236_max;
            this.accept = DFA236_accept;
            this.special = DFA236_special;
            this.transition = DFA236_transition;
        }
        public String getDescription() {
            return "1057:55: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA242_eotS =
        "\4\uffff";
    static final String DFA242_eofS =
        "\2\3\2\uffff";
    static final String DFA242_minS =
        "\2\4\2\uffff";
    static final String DFA242_maxS =
        "\2\156\2\uffff";
    static final String DFA242_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA242_specialS =
        "\4\uffff}>";
    static final String[] DFA242_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\1\2\1\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\1\2\1\uffff\3\3\3"+
            "\uffff\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3"+
            "\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA242_eot = DFA.unpackEncodedString(DFA242_eotS);
    static final short[] DFA242_eof = DFA.unpackEncodedString(DFA242_eofS);
    static final char[] DFA242_min = DFA.unpackEncodedStringToUnsignedChars(DFA242_minS);
    static final char[] DFA242_max = DFA.unpackEncodedStringToUnsignedChars(DFA242_maxS);
    static final short[] DFA242_accept = DFA.unpackEncodedString(DFA242_acceptS);
    static final short[] DFA242_special = DFA.unpackEncodedString(DFA242_specialS);
    static final short[][] DFA242_transition;

    static {
        int numStates = DFA242_transitionS.length;
        DFA242_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA242_transition[i] = DFA.unpackEncodedString(DFA242_transitionS[i]);
        }
    }

    class DFA242 extends DFA {

        public DFA242(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 242;
            this.eot = DFA242_eot;
            this.eof = DFA242_eof;
            this.min = DFA242_min;
            this.max = DFA242_max;
            this.accept = DFA242_accept;
            this.special = DFA242_special;
            this.transition = DFA242_transition;
        }
        public String getDescription() {
            return "1067:45: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA246_eotS =
        "\4\uffff";
    static final String DFA246_eofS =
        "\2\3\2\uffff";
    static final String DFA246_minS =
        "\2\4\2\uffff";
    static final String DFA246_maxS =
        "\2\156\2\uffff";
    static final String DFA246_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA246_specialS =
        "\4\uffff}>";
    static final String[] DFA246_transitionS = {
            "\3\3\2\uffff\6\3\3\uffff\1\3\1\2\1\uffff\3\3\3\uffff\1\3\1\uffff"+
            "\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff\3\1\1\uffff"+
            "\15\3\11\uffff\1\3",
            "\3\3\2\uffff\6\3\3\uffff\1\3\1\2\1\uffff\3\3\3\uffff\1\3\1"+
            "\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff\3"+
            "\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA246_eot = DFA.unpackEncodedString(DFA246_eotS);
    static final short[] DFA246_eof = DFA.unpackEncodedString(DFA246_eofS);
    static final char[] DFA246_min = DFA.unpackEncodedStringToUnsignedChars(DFA246_minS);
    static final char[] DFA246_max = DFA.unpackEncodedStringToUnsignedChars(DFA246_maxS);
    static final short[] DFA246_accept = DFA.unpackEncodedString(DFA246_acceptS);
    static final short[] DFA246_special = DFA.unpackEncodedString(DFA246_specialS);
    static final short[][] DFA246_transition;

    static {
        int numStates = DFA246_transitionS.length;
        DFA246_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA246_transition[i] = DFA.unpackEncodedString(DFA246_transitionS[i]);
        }
    }

    class DFA246 extends DFA {

        public DFA246(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 246;
            this.eot = DFA246_eot;
            this.eof = DFA246_eof;
            this.min = DFA246_min;
            this.max = DFA246_max;
            this.accept = DFA246_accept;
            this.special = DFA246_special;
            this.transition = DFA246_transition;
        }
        public String getDescription() {
            return "1069:57: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA248_eotS =
        "\4\uffff";
    static final String DFA248_eofS =
        "\2\3\2\uffff";
    static final String DFA248_minS =
        "\2\4\2\uffff";
    static final String DFA248_maxS =
        "\2\156\2\uffff";
    static final String DFA248_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA248_specialS =
        "\4\uffff}>";
    static final String[] DFA248_transitionS = {
            "\3\3\2\uffff\4\3\1\2\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff\1\3"+
            "\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\2\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff\1"+
            "\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA248_eot = DFA.unpackEncodedString(DFA248_eotS);
    static final short[] DFA248_eof = DFA.unpackEncodedString(DFA248_eofS);
    static final char[] DFA248_min = DFA.unpackEncodedStringToUnsignedChars(DFA248_minS);
    static final char[] DFA248_max = DFA.unpackEncodedStringToUnsignedChars(DFA248_maxS);
    static final short[] DFA248_accept = DFA.unpackEncodedString(DFA248_acceptS);
    static final short[] DFA248_special = DFA.unpackEncodedString(DFA248_specialS);
    static final short[][] DFA248_transition;

    static {
        int numStates = DFA248_transitionS.length;
        DFA248_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA248_transition[i] = DFA.unpackEncodedString(DFA248_transitionS[i]);
        }
    }

    class DFA248 extends DFA {

        public DFA248(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 248;
            this.eot = DFA248_eot;
            this.eof = DFA248_eof;
            this.min = DFA248_min;
            this.max = DFA248_max;
            this.accept = DFA248_accept;
            this.special = DFA248_special;
            this.transition = DFA248_transition;
        }
        public String getDescription() {
            return "1069:102: ( ( ws )? cp_mixin_block )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA257_eotS =
        "\7\uffff";
    static final String DFA257_eofS =
        "\7\uffff";
    static final String DFA257_minS =
        "\3\4\1\uffff\1\4\1\uffff\1\4";
    static final String DFA257_maxS =
        "\1\144\2\153\1\uffff\1\153\1\uffff\1\153";
    static final String DFA257_acceptS =
        "\3\uffff\1\2\1\uffff\1\1\1\uffff";
    static final String DFA257_specialS =
        "\7\uffff}>";
    static final String[] DFA257_transitionS = {
            "\1\1\1\uffff\3\3\2\1\1\uffff\1\1\4\uffff\3\3\2\uffff\2\1\3\uffff"+
            "\1\1\1\3\23\1\1\uffff\3\3\1\uffff\3\3\17\uffff\1\2\14\3\4\uffff"+
            "\15\1",
            "\11\3\2\uffff\1\3\1\uffff\4\3\1\5\2\3\3\uffff\35\3\4\uffff"+
            "\1\3\12\uffff\15\3\3\4\1\uffff\24\3",
            "\11\3\2\uffff\1\3\1\uffff\4\3\1\5\2\3\3\uffff\35\3\4\uffff"+
            "\1\3\12\uffff\15\3\3\6\1\uffff\24\3",
            "",
            "\11\3\2\uffff\1\3\1\uffff\4\3\1\5\2\3\3\uffff\35\3\4\uffff"+
            "\1\3\12\uffff\15\3\3\4\1\uffff\24\3",
            "",
            "\11\3\2\uffff\1\3\1\uffff\4\3\1\5\2\3\3\uffff\35\3\4\uffff"+
            "\1\3\12\uffff\15\3\3\6\1\uffff\24\3"
    };

    static final short[] DFA257_eot = DFA.unpackEncodedString(DFA257_eotS);
    static final short[] DFA257_eof = DFA.unpackEncodedString(DFA257_eofS);
    static final char[] DFA257_min = DFA.unpackEncodedStringToUnsignedChars(DFA257_minS);
    static final char[] DFA257_max = DFA.unpackEncodedStringToUnsignedChars(DFA257_maxS);
    static final short[] DFA257_accept = DFA.unpackEncodedString(DFA257_acceptS);
    static final short[] DFA257_special = DFA.unpackEncodedString(DFA257_specialS);
    static final short[][] DFA257_transition;

    static {
        int numStates = DFA257_transitionS.length;
        DFA257_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA257_transition[i] = DFA.unpackEncodedString(DFA257_transitionS[i]);
        }
    }

    class DFA257 extends DFA {

        public DFA257(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 257;
            this.eot = DFA257_eot;
            this.eof = DFA257_eof;
            this.min = DFA257_min;
            this.max = DFA257_max;
            this.accept = DFA257_accept;
            this.special = DFA257_special;
            this.transition = DFA257_transition;
        }
        public String getDescription() {
            return "1094:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA260_eotS =
        "\5\uffff";
    static final String DFA260_eofS =
        "\5\uffff";
    static final String DFA260_minS =
        "\1\5\1\4\1\uffff\1\4\1\uffff";
    static final String DFA260_maxS =
        "\2\154\1\uffff\1\154\1\uffff";
    static final String DFA260_acceptS =
        "\2\uffff\1\2\1\uffff\1\1";
    static final String DFA260_specialS =
        "\5\uffff}>";
    static final String[] DFA260_transitionS = {
            "\1\1\5\uffff\1\1\10\uffff\1\2\126\uffff\2\2",
            "\1\4\4\uffff\2\4\1\uffff\1\4\11\uffff\2\4\3\uffff\1\4\1\uffff"+
            "\23\4\27\uffff\1\4\14\uffff\3\3\1\uffff\15\4\6\uffff\2\2",
            "",
            "\1\4\4\uffff\2\4\1\uffff\1\4\11\uffff\2\4\3\uffff\1\4\1\uffff"+
            "\23\4\27\uffff\1\4\14\uffff\3\3\1\uffff\15\4\6\uffff\2\2",
            ""
    };

    static final short[] DFA260_eot = DFA.unpackEncodedString(DFA260_eotS);
    static final short[] DFA260_eof = DFA.unpackEncodedString(DFA260_eofS);
    static final char[] DFA260_min = DFA.unpackEncodedStringToUnsignedChars(DFA260_minS);
    static final char[] DFA260_max = DFA.unpackEncodedStringToUnsignedChars(DFA260_maxS);
    static final short[] DFA260_accept = DFA.unpackEncodedString(DFA260_acceptS);
    static final short[] DFA260_special = DFA.unpackEncodedString(DFA260_specialS);
    static final short[][] DFA260_transition;

    static {
        int numStates = DFA260_transitionS.length;
        DFA260_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA260_transition[i] = DFA.unpackEncodedString(DFA260_transitionS[i]);
        }
    }

    class DFA260 extends DFA {

        public DFA260(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 260;
            this.eot = DFA260_eot;
            this.eof = DFA260_eof;
            this.min = DFA260_min;
            this.max = DFA260_max;
            this.accept = DFA260_accept;
            this.special = DFA260_special;
            this.transition = DFA260_transition;
        }
        public String getDescription() {
            return "()* loopback of 1109:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA287_eotS =
        "\4\uffff";
    static final String DFA287_eofS =
        "\4\uffff";
    static final String DFA287_minS =
        "\2\6\2\uffff";
    static final String DFA287_maxS =
        "\2\126\2\uffff";
    static final String DFA287_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA287_specialS =
        "\4\uffff}>";
    static final String[] DFA287_transitionS = {
            "\1\3\4\uffff\1\3\1\uffff\1\2\7\uffff\1\3\33\uffff\1\3\2\uffff"+
            "\1\3\1\uffff\4\3\2\uffff\1\3\2\uffff\1\3\6\uffff\1\3\15\uffff"+
            "\3\1",
            "\1\3\4\uffff\1\3\1\uffff\1\2\7\uffff\1\3\33\uffff\1\3\2\uffff"+
            "\1\3\1\uffff\4\3\2\uffff\1\3\2\uffff\1\3\6\uffff\1\3\15\uffff"+
            "\3\1",
            "",
            ""
    };

    static final short[] DFA287_eot = DFA.unpackEncodedString(DFA287_eotS);
    static final short[] DFA287_eof = DFA.unpackEncodedString(DFA287_eofS);
    static final char[] DFA287_min = DFA.unpackEncodedStringToUnsignedChars(DFA287_minS);
    static final char[] DFA287_max = DFA.unpackEncodedStringToUnsignedChars(DFA287_maxS);
    static final short[] DFA287_accept = DFA.unpackEncodedString(DFA287_acceptS);
    static final short[] DFA287_special = DFA.unpackEncodedString(DFA287_specialS);
    static final short[][] DFA287_transition;

    static {
        int numStates = DFA287_transitionS.length;
        DFA287_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA287_transition[i] = DFA.unpackEncodedString(DFA287_transitionS[i]);
        }
    }

    class DFA287 extends DFA {

        public DFA287(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 287;
            this.eot = DFA287_eot;
            this.eof = DFA287_eof;
            this.min = DFA287_min;
            this.max = DFA287_max;
            this.accept = DFA287_accept;
            this.special = DFA287_special;
            this.transition = DFA287_transition;
        }
        public String getDescription() {
            return "()* loopback of 1173:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA291_eotS =
        "\4\uffff";
    static final String DFA291_eofS =
        "\4\uffff";
    static final String DFA291_minS =
        "\2\6\2\uffff";
    static final String DFA291_maxS =
        "\2\126\2\uffff";
    static final String DFA291_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA291_specialS =
        "\4\uffff}>";
    static final String[] DFA291_transitionS = {
            "\1\3\16\uffff\1\2\33\uffff\1\3\4\uffff\3\3\33\uffff\3\1",
            "\1\3\16\uffff\1\2\33\uffff\1\3\4\uffff\3\3\33\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA291_eot = DFA.unpackEncodedString(DFA291_eotS);
    static final short[] DFA291_eof = DFA.unpackEncodedString(DFA291_eofS);
    static final char[] DFA291_min = DFA.unpackEncodedStringToUnsignedChars(DFA291_minS);
    static final char[] DFA291_max = DFA.unpackEncodedStringToUnsignedChars(DFA291_maxS);
    static final short[] DFA291_accept = DFA.unpackEncodedString(DFA291_acceptS);
    static final short[] DFA291_special = DFA.unpackEncodedString(DFA291_specialS);
    static final short[][] DFA291_transition;

    static {
        int numStates = DFA291_transitionS.length;
        DFA291_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA291_transition[i] = DFA.unpackEncodedString(DFA291_transitionS[i]);
        }
    }

    class DFA291 extends DFA {

        public DFA291(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 291;
            this.eot = DFA291_eot;
            this.eof = DFA291_eof;
            this.min = DFA291_min;
            this.max = DFA291_max;
            this.accept = DFA291_accept;
            this.special = DFA291_special;
            this.transition = DFA291_transition;
        }
        public String getDescription() {
            return "()* loopback of 1191:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA299_eotS =
        "\4\uffff";
    static final String DFA299_eofS =
        "\4\uffff";
    static final String DFA299_minS =
        "\2\4\2\uffff";
    static final String DFA299_maxS =
        "\2\157\2\uffff";
    static final String DFA299_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA299_specialS =
        "\4\uffff}>";
    static final String[] DFA299_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\2\3\1\uffff\12\3\1\uffff\1\3\6\uffff"+
            "\2\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3\1\2",
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\2\3\1\uffff\12\3\1\uffff\1\3\6\uffff"+
            "\2\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3\1\2",
            "",
            ""
    };

    static final short[] DFA299_eot = DFA.unpackEncodedString(DFA299_eotS);
    static final short[] DFA299_eof = DFA.unpackEncodedString(DFA299_eofS);
    static final char[] DFA299_min = DFA.unpackEncodedStringToUnsignedChars(DFA299_minS);
    static final char[] DFA299_max = DFA.unpackEncodedStringToUnsignedChars(DFA299_maxS);
    static final short[] DFA299_accept = DFA.unpackEncodedString(DFA299_acceptS);
    static final short[] DFA299_special = DFA.unpackEncodedString(DFA299_specialS);
    static final short[][] DFA299_transition;

    static {
        int numStates = DFA299_transitionS.length;
        DFA299_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA299_transition[i] = DFA.unpackEncodedString(DFA299_transitionS[i]);
        }
    }

    class DFA299 extends DFA {

        public DFA299(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 299;
            this.eot = DFA299_eot;
            this.eof = DFA299_eof;
            this.min = DFA299_min;
            this.max = DFA299_max;
            this.accept = DFA299_accept;
            this.special = DFA299_special;
            this.transition = DFA299_transition;
        }
        public String getDescription() {
            return "1232:43: ( ( ws )? SASS_OPTIONAL )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA303_eotS =
        "\10\uffff";
    static final String DFA303_eofS =
        "\2\3\6\uffff";
    static final String DFA303_minS =
        "\2\4\1\6\1\uffff\2\6\1\uffff\1\6";
    static final String DFA303_maxS =
        "\2\156\1\126\1\uffff\2\126\1\uffff\1\126";
    static final String DFA303_acceptS =
        "\3\uffff\1\2\2\uffff\1\1\1\uffff";
    static final String DFA303_specialS =
        "\10\uffff}>";
    static final String[] DFA303_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\2\3\1\uffff\12\3\1\uffff\1\3\6\uffff"+
            "\2\3\14\uffff\3\1\1\uffff\7\3\1\2\5\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\2\3\1\uffff\12\3\1\uffff\1\3\6\uffff"+
            "\2\3\14\uffff\3\1\1\uffff\7\3\1\4\5\3\11\uffff\1\3",
            "\1\6\6\uffff\1\6\7\uffff\1\3\76\uffff\3\5",
            "",
            "\1\6\6\uffff\1\6\7\uffff\1\3\76\uffff\3\7",
            "\1\6\6\uffff\1\6\7\uffff\1\3\76\uffff\3\5",
            "",
            "\1\6\6\uffff\1\6\7\uffff\1\3\76\uffff\3\7"
    };

    static final short[] DFA303_eot = DFA.unpackEncodedString(DFA303_eotS);
    static final short[] DFA303_eof = DFA.unpackEncodedString(DFA303_eofS);
    static final char[] DFA303_min = DFA.unpackEncodedStringToUnsignedChars(DFA303_minS);
    static final char[] DFA303_max = DFA.unpackEncodedStringToUnsignedChars(DFA303_maxS);
    static final short[] DFA303_accept = DFA.unpackEncodedString(DFA303_acceptS);
    static final short[] DFA303_special = DFA.unpackEncodedString(DFA303_specialS);
    static final short[][] DFA303_transition;

    static {
        int numStates = DFA303_transitionS.length;
        DFA303_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA303_transition[i] = DFA.unpackEncodedString(DFA303_transitionS[i]);
        }
    }

    class DFA303 extends DFA {

        public DFA303(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 303;
            this.eot = DFA303_eot;
            this.eof = DFA303_eof;
            this.min = DFA303_min;
            this.max = DFA303_max;
            this.accept = DFA303_accept;
            this.special = DFA303_special;
            this.transition = DFA303_transition;
        }
        public String getDescription() {
            return "1252:63: ( ( ws )? sass_else )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA310_eotS =
        "\5\uffff";
    static final String DFA310_eofS =
        "\5\uffff";
    static final String DFA310_minS =
        "\1\137\2\6\2\uffff";
    static final String DFA310_maxS =
        "\1\137\2\126\2\uffff";
    static final String DFA310_acceptS =
        "\3\uffff\1\1\1\2";
    static final String DFA310_specialS =
        "\5\uffff}>";
    static final String[] DFA310_transitionS = {
            "\1\1",
            "\1\4\6\uffff\1\3\106\uffff\3\2",
            "\1\4\6\uffff\1\3\106\uffff\3\2",
            "",
            ""
    };

    static final short[] DFA310_eot = DFA.unpackEncodedString(DFA310_eotS);
    static final short[] DFA310_eof = DFA.unpackEncodedString(DFA310_eofS);
    static final char[] DFA310_min = DFA.unpackEncodedStringToUnsignedChars(DFA310_minS);
    static final char[] DFA310_max = DFA.unpackEncodedStringToUnsignedChars(DFA310_maxS);
    static final short[] DFA310_accept = DFA.unpackEncodedString(DFA310_acceptS);
    static final short[] DFA310_special = DFA.unpackEncodedString(DFA310_specialS);
    static final short[][] DFA310_transition;

    static {
        int numStates = DFA310_transitionS.length;
        DFA310_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA310_transition[i] = DFA.unpackEncodedString(DFA310_transitionS[i]);
        }
    }

    class DFA310 extends DFA {

        public DFA310(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 310;
            this.eot = DFA310_eot;
            this.eof = DFA310_eof;
            this.min = DFA310_min;
            this.max = DFA310_max;
            this.accept = DFA310_accept;
            this.special = DFA310_special;
            this.transition = DFA310_transition;
        }
        public String getDescription() {
            return "1255:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA309_eotS =
        "\10\uffff";
    static final String DFA309_eofS =
        "\2\3\6\uffff";
    static final String DFA309_minS =
        "\2\4\1\6\1\uffff\2\6\1\uffff\1\6";
    static final String DFA309_maxS =
        "\2\156\1\126\1\uffff\2\126\1\uffff\1\126";
    static final String DFA309_acceptS =
        "\3\uffff\1\2\2\uffff\1\1\1\uffff";
    static final String DFA309_specialS =
        "\10\uffff}>";
    static final String[] DFA309_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\2\3\1\uffff\12\3\1\uffff\1\3\6\uffff"+
            "\2\3\14\uffff\3\1\1\uffff\7\3\1\2\5\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\2\3\1\uffff\12\3\1\uffff\1\3\6\uffff"+
            "\2\3\14\uffff\3\1\1\uffff\7\3\1\4\5\3\11\uffff\1\3",
            "\1\6\6\uffff\1\6\7\uffff\1\3\76\uffff\3\5",
            "",
            "\1\6\6\uffff\1\6\7\uffff\1\3\76\uffff\3\7",
            "\1\6\6\uffff\1\6\7\uffff\1\3\76\uffff\3\5",
            "",
            "\1\6\6\uffff\1\6\7\uffff\1\3\76\uffff\3\7"
    };

    static final short[] DFA309_eot = DFA.unpackEncodedString(DFA309_eotS);
    static final short[] DFA309_eof = DFA.unpackEncodedString(DFA309_eofS);
    static final char[] DFA309_min = DFA.unpackEncodedStringToUnsignedChars(DFA309_minS);
    static final char[] DFA309_max = DFA.unpackEncodedStringToUnsignedChars(DFA309_maxS);
    static final short[] DFA309_accept = DFA.unpackEncodedString(DFA309_acceptS);
    static final short[] DFA309_special = DFA.unpackEncodedString(DFA309_specialS);
    static final short[][] DFA309_transition;

    static {
        int numStates = DFA309_transitionS.length;
        DFA309_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA309_transition[i] = DFA.unpackEncodedString(DFA309_transitionS[i]);
        }
    }

    class DFA309 extends DFA {

        public DFA309(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 309;
            this.eot = DFA309_eot;
            this.eof = DFA309_eof;
            this.min = DFA309_min;
            this.max = DFA309_max;
            this.accept = DFA309_accept;
            this.special = DFA309_special;
            this.transition = DFA309_transition;
        }
        public String getDescription() {
            return "1259:110: ( ( ws )? sass_else )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA353_eotS =
        "\5\uffff";
    static final String DFA353_eofS =
        "\5\uffff";
    static final String DFA353_minS =
        "\2\4\3\uffff";
    static final String DFA353_maxS =
        "\2\144\3\uffff";
    static final String DFA353_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA353_specialS =
        "\5\uffff}>";
    static final String[] DFA353_transitionS = {
            "\1\3\1\uffff\5\3\1\2\1\3\5\uffff\1\3\3\uffff\2\3\3\uffff\25"+
            "\3\1\2\2\3\2\uffff\3\3\17\uffff\15\3\3\1\1\uffff\15\3",
            "\1\4\1\uffff\5\4\1\2\1\4\5\uffff\1\4\3\uffff\2\4\3\uffff\25"+
            "\4\1\2\2\4\2\uffff\3\4\17\uffff\15\4\3\1\1\uffff\15\4",
            "",
            "",
            ""
    };

    static final short[] DFA353_eot = DFA.unpackEncodedString(DFA353_eotS);
    static final short[] DFA353_eof = DFA.unpackEncodedString(DFA353_eofS);
    static final char[] DFA353_min = DFA.unpackEncodedStringToUnsignedChars(DFA353_minS);
    static final char[] DFA353_max = DFA.unpackEncodedStringToUnsignedChars(DFA353_maxS);
    static final short[] DFA353_accept = DFA.unpackEncodedString(DFA353_acceptS);
    static final short[] DFA353_special = DFA.unpackEncodedString(DFA353_specialS);
    static final short[][] DFA353_transition;

    static {
        int numStates = DFA353_transitionS.length;
        DFA353_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA353_transition[i] = DFA.unpackEncodedString(DFA353_transitionS[i]);
        }
    }

    class DFA353 extends DFA {

        public DFA353(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 353;
            this.eot = DFA353_eot;
            this.eof = DFA353_eof;
            this.min = DFA353_min;
            this.max = DFA353_max;
            this.accept = DFA353_accept;
            this.special = DFA353_special;
            this.transition = DFA353_transition;
        }
        public String getDescription() {
            return "861:15: ( ws | ( ( ws )? operator ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA358_eotS =
        "\5\uffff";
    static final String DFA358_eofS =
        "\5\uffff";
    static final String DFA358_minS =
        "\2\4\3\uffff";
    static final String DFA358_maxS =
        "\2\144\3\uffff";
    static final String DFA358_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA358_specialS =
        "\5\uffff}>";
    static final String[] DFA358_transitionS = {
            "\1\3\1\uffff\5\3\1\uffff\1\3\5\uffff\1\3\3\uffff\2\3\3\uffff"+
            "\25\3\1\2\2\3\2\uffff\3\3\17\uffff\15\3\3\1\1\uffff\15\3",
            "\1\4\1\uffff\5\4\1\uffff\1\4\5\uffff\1\4\3\uffff\2\4\3\uffff"+
            "\25\4\1\2\2\4\2\uffff\3\4\17\uffff\15\4\3\1\1\uffff\15\4",
            "",
            "",
            ""
    };

    static final short[] DFA358_eot = DFA.unpackEncodedString(DFA358_eotS);
    static final short[] DFA358_eof = DFA.unpackEncodedString(DFA358_eofS);
    static final char[] DFA358_min = DFA.unpackEncodedStringToUnsignedChars(DFA358_minS);
    static final char[] DFA358_max = DFA.unpackEncodedStringToUnsignedChars(DFA358_maxS);
    static final short[] DFA358_accept = DFA.unpackEncodedString(DFA358_acceptS);
    static final short[] DFA358_special = DFA.unpackEncodedString(DFA358_specialS);
    static final short[][] DFA358_transition;

    static {
        int numStates = DFA358_transitionS.length;
        DFA358_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA358_transition[i] = DFA.unpackEncodedString(DFA358_transitionS[i]);
        }
    }

    class DFA358 extends DFA {

        public DFA358(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 358;
            this.eot = DFA358_eot;
            this.eof = DFA358_eof;
            this.min = DFA358_min;
            this.max = DFA358_max;
            this.accept = DFA358_accept;
            this.special = DFA358_special;
            this.transition = DFA358_transition;
        }
        public String getDescription() {
            return "942:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
 

    public static final BitSet FOLLOW_ws_in_styleSheet125 = new BitSet(new long[]{0xBFF6FFFFE8E41E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_charSet_in_styleSheet135 = new BitSet(new long[]{0xBFF6FFFFE8E41E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_styleSheet137 = new BitSet(new long[]{0xBFF6FFFFE8E41E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_imports_in_styleSheet151 = new BitSet(new long[]{0xBFF6FFFFE8E41E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_namespaces_in_styleSheet162 = new BitSet(new long[]{0xBFF6FFFFE8E41E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_body_in_styleSheet174 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_styleSheet182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespace_in_namespaces199 = new BitSet(new long[]{0x0000000000000012L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_namespaces201 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_NAMESPACE_SYM_in_namespace217 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_namespace219 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_namespacePrefixName_in_namespace223 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_namespace225 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_namespace230 = new BitSet(new long[]{0x0000000000000020L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_namespace232 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_namespace235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_namespacePrefixName248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_resourceIdentifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARSET_SYM_in_charSet286 = new BitSet(new long[]{0x0000000000000080L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_charSet288 = new BitSet(new long[]{0x0000000000000080L,0x0000000000700000L});
    public static final BitSet FOLLOW_charSetValue_in_charSet291 = new BitSet(new long[]{0x0000000000000020L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_charSet293 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_charSet296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_charSetValue310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_imports324 = new BitSet(new long[]{0x0000000000000020L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_imports326 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_imports329 = new BitSet(new long[]{0x0000000000000402L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_imports331 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_IMPORT_SYM_in_importItem361 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_importItem363 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem366 = new BitSet(new long[]{0x0040FFFFE8CF1652L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_ws_in_importItem376 = new BitSet(new long[]{0x0040FFFFE8CF1650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_mediaQueryList_in_importItem379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_SYM_in_importItem412 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_importItem414 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem417 = new BitSet(new long[]{0x0040FFFFE8CF1E52L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_ws_in_importItem420 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_importItem423 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_importItem425 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem428 = new BitSet(new long[]{0x0040FFFFE8CF1E52L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_ws_in_importItem440 = new BitSet(new long[]{0x0040FFFFE8CF1650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_mediaQueryList_in_importItem443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIA_SYM_in_media461 = new BitSet(new long[]{0x0040FFFFE8CF1650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_ws_in_media463 = new BitSet(new long[]{0x0040FFFFE8CF1650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_mediaQueryList_in_media482 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_media490 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_media497 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_media499 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_syncToFollow_in_media502 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_mediaBody_in_media512 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_media519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mediaBodyItem_in_mediaBody557 = new BitSet(new long[]{0xBFF6FFFFE8E41E72L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_mediaBody567 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_mediaBody570 = new BitSet(new long[]{0xBFF6FFFFE8E41E72L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_mediaBody574 = new BitSet(new long[]{0xBFF6FFFFE8E41E72L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_SEMI_in_mediaBody601 = new BitSet(new long[]{0xBFF6FFFFE8E41E72L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_mediaBody603 = new BitSet(new long[]{0xBFF6FFFFE8E41E72L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_cp_mixin_declaration_in_mediaBodyItem669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_mediaBodyItem682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_mediaBodyItem720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_mediaBodyItem747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_extend_in_mediaBodyItem757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_debug_in_mediaBodyItem767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_control_in_mediaBodyItem777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_content_in_mediaBodyItem787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_mediaBodyItem795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_page_in_mediaBodyItem803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fontFace_in_mediaBodyItem811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vendorAtRule_in_mediaBodyItem819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_media_in_mediaBodyItem832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList846 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaQueryList858 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_mediaQueryList861 = new BitSet(new long[]{0x0040FFFFE8CF1650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_ws_in_mediaQueryList863 = new BitSet(new long[]{0x0040FFFFE8CF1650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList866 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_mediaQueryOperator_in_mediaQuery887 = new BitSet(new long[]{0x0040000000070040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery889 = new BitSet(new long[]{0x0040000000070040L});
    public static final BitSet FOLLOW_mediaType_in_mediaQuery896 = new BitSet(new long[]{0x0000000000008002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery900 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_AND_in_mediaQuery903 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery905 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery908 = new BitSet(new long[]{0x0000000000008002L,0x0000000000700000L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery919 = new BitSet(new long[]{0x0000000000008002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery923 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_AND_in_mediaQuery926 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery928 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery931 = new BitSet(new long[]{0x0000000000008002L,0x0000000000700000L});
    public static final BitSet FOLLOW_cp_variable_in_mediaQuery944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_mediaQueryOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_mediaType977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_mediaType981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaType987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_mediaExpression1007 = new BitSet(new long[]{0x0040FFFFE8C41650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_ws_in_mediaExpression1009 = new BitSet(new long[]{0x0040FFFFE8C41650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_mediaFeature_in_mediaExpression1012 = new BitSet(new long[]{0x0000000000300000L,0x0000000000700000L});
    public static final BitSet FOLLOW_mediaFeatureValue_in_mediaExpression1014 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaExpression1017 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_mediaExpression1020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_mediaFeatureValue1045 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_mediaFeatureValue1048 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_mediaFeatureValue1050 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_mediaFeatureValue1070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_mediaFeatureValue1090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_mediaFeature1111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_mediaFeature1115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_mediaFeature1123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaFeature1127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bodyItem_in_body1164 = new BitSet(new long[]{0xBFF6FFFFE8E41E72L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_body1174 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_body1177 = new BitSet(new long[]{0xBFF6FFFFE8E41E72L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_body1181 = new BitSet(new long[]{0xBFF6FFFFE8E41E72L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_SEMI_in_body1208 = new BitSet(new long[]{0xBFF6FFFFE8E41E72L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_body1210 = new BitSet(new long[]{0xBFF6FFFFE8E41E72L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_cp_mixin_declaration_in_bodyItem1284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem1316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem1334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_bodyItem1343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_at_rule_in_bodyItem1355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_bodyItem1369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_bodyItem1392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_debug_in_bodyItem1406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_control_in_bodyItem1420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_function_declaration_in_bodyItem1434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_media_in_at_rule1464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_page_in_at_rule1472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_counterStyle_in_at_rule1480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fontFace_in_at_rule1488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vendorAtRule_in_at_rule1496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moz_document_in_vendorAtRule1513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_webkitKeyframes_in_vendorAtRule1517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_generic_at_rule_in_vendorAtRule1521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_atRuleId0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_IDENT_in_generic_at_rule1557 = new BitSet(new long[]{0x00000000000020C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_generic_at_rule1559 = new BitSet(new long[]{0x00000000000020C0L});
    public static final BitSet FOLLOW_atRuleId_in_generic_at_rule1564 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_generic_at_rule1566 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_generic_at_rule1581 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_syncTo_RBRACE_in_generic_at_rule1593 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_generic_at_rule1603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document1619 = new BitSet(new long[]{0x0000000007000100L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_moz_document1621 = new BitSet(new long[]{0x0000000007000100L,0x0000000000700000L});
    public static final BitSet FOLLOW_moz_document_function_in_moz_document1626 = new BitSet(new long[]{0x0000000000002800L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_moz_document1628 = new BitSet(new long[]{0x0000000000002800L});
    public static final BitSet FOLLOW_COMMA_in_moz_document1634 = new BitSet(new long[]{0x0000000007000100L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_moz_document1636 = new BitSet(new long[]{0x0000000007000100L,0x0000000000700000L});
    public static final BitSet FOLLOW_moz_document_function_in_moz_document1639 = new BitSet(new long[]{0x0000000000002800L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_moz_document1641 = new BitSet(new long[]{0x0000000000002800L});
    public static final BitSet FOLLOW_LBRACE_in_moz_document1648 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_moz_document1650 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_body_in_moz_document1655 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_moz_document1660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_moz_document_function0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes1701 = new BitSet(new long[]{0x00000000000000C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1703 = new BitSet(new long[]{0x00000000000000C0L});
    public static final BitSet FOLLOW_atRuleId_in_webkitKeyframes1706 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1708 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_webkitKeyframes1713 = new BitSet(new long[]{0x0000000010004040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1715 = new BitSet(new long[]{0x0000000010004040L});
    public static final BitSet FOLLOW_webkitKeyframesBlock_in_webkitKeyframes1722 = new BitSet(new long[]{0x0000000010004040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1724 = new BitSet(new long[]{0x0000000010004040L});
    public static final BitSet FOLLOW_RBRACE_in_webkitKeyframes1731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock1744 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock1746 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_webkitKeyframesBlock1750 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock1753 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_syncToFollow_in_webkitKeyframesBlock1756 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_declarations_in_webkitKeyframesBlock1760 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_webkitKeyframesBlock1764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_webkitKeyframeSelectors1779 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors1791 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_webkitKeyframeSelectors1794 = new BitSet(new long[]{0x0000000010000040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors1796 = new BitSet(new long[]{0x0000000010000040L});
    public static final BitSet FOLLOW_set_in_webkitKeyframeSelectors1799 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_PAGE_SYM_in_page1828 = new BitSet(new long[]{0x0000000000202040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_page1830 = new BitSet(new long[]{0x0000000000202040L});
    public static final BitSet FOLLOW_IDENT_in_page1835 = new BitSet(new long[]{0x0000000000202000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_page1837 = new BitSet(new long[]{0x0000000000202000L});
    public static final BitSet FOLLOW_pseudoPage_in_page1844 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_page1846 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_page1859 = new BitSet(new long[]{0x11C2FFFFE8C45670L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_ws_in_page1861 = new BitSet(new long[]{0x11C2FFFFE8C45670L,0x0000001FFF000080L});
    public static final BitSet FOLLOW_propertyDeclaration_in_page1904 = new BitSet(new long[]{0x0000000000004020L,0x0000000000700000L});
    public static final BitSet FOLLOW_margin_in_page1906 = new BitSet(new long[]{0x0000000000004020L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_page1909 = new BitSet(new long[]{0x0000000000004020L});
    public static final BitSet FOLLOW_SEMI_in_page1915 = new BitSet(new long[]{0x11C2FFFFE8C45670L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_ws_in_page1917 = new BitSet(new long[]{0x11C2FFFFE8C45670L,0x0000001FFF000080L});
    public static final BitSet FOLLOW_propertyDeclaration_in_page1922 = new BitSet(new long[]{0x0000000000004020L,0x0000000000700000L});
    public static final BitSet FOLLOW_margin_in_page1924 = new BitSet(new long[]{0x0000000000004020L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_page1927 = new BitSet(new long[]{0x0000000000004020L});
    public static final BitSet FOLLOW_RBRACE_in_page1942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNTER_STYLE_SYM_in_counterStyle1963 = new BitSet(new long[]{0x0000000000000040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_counterStyle1965 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_counterStyle1968 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_counterStyle1970 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_counterStyle1981 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_counterStyle1983 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_counterStyle1986 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_declarations_in_counterStyle1990 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_counterStyle2001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FONT_FACE_SYM_in_fontFace2022 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_fontFace2024 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_fontFace2035 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_fontFace2037 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_fontFace2040 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_declarations_in_fontFace2044 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_fontFace2055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_margin_sym_in_margin2070 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_margin2072 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_margin2075 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_margin2077 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_margin2080 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_declarations_in_margin2082 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_margin2085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_margin_sym0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_pseudoPage2314 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_pseudoPage2316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_unaryOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_declaration_interpolation_expression_in_property2431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_property2439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_property2448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_property2459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectorsGroup_in_rule2498 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_rule2500 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_rule2507 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_rule2509 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_syncToFollow_in_rule2512 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_declarations_in_rule2523 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_rule2530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_declarations2578 = new BitSet(new long[]{0xBFF6FFFFE8E41E72L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_declarations2588 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_declarations2591 = new BitSet(new long[]{0xBFF6FFFFE8E41E72L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_declarations2595 = new BitSet(new long[]{0xBFF6FFFFE8E41E72L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_SEMI_in_declarations2622 = new BitSet(new long[]{0xBFF6FFFFE8E41E72L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_declarations2624 = new BitSet(new long[]{0xBFF6FFFFE8E41E72L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_declaration2659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_nested_properties_in_declaration2672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_declaration2685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_declaration2725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_declaration_in_declaration2771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_declaration2784 = new BitSet(new long[]{0x0008000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_declaration2787 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_declaration2790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_declaration2809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_at_rule_in_declaration2820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_control_in_declaration2831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_extend_in_declaration2842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_debug_in_declaration2853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_content_in_declaration2864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_function_return_in_declaration2875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_declaration2886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_declaration2895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_selector_interpolation_expression_in_selectorsGroup2963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_in_selectorsGroup2976 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_selectorsGroup2979 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_selectorsGroup2982 = new BitSet(new long[]{0xBFF6000000240840L,0x0000400000700040L});
    public static final BitSet FOLLOW_ws_in_selectorsGroup2984 = new BitSet(new long[]{0xBFF6000000240840L,0x0000400000000040L});
    public static final BitSet FOLLOW_selector_in_selectorsGroup2987 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_combinator_in_selector3016 = new BitSet(new long[]{0xBFF6000000240840L,0x0000400000700040L});
    public static final BitSet FOLLOW_ws_in_selector3018 = new BitSet(new long[]{0xBFF6000000240840L,0x0000400000000040L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_selector3023 = new BitSet(new long[]{0xBFF6000000240842L,0x0000400000700040L});
    public static final BitSet FOLLOW_ws_in_selector3029 = new BitSet(new long[]{0x0034000000000000L});
    public static final BitSet FOLLOW_combinator_in_selector3032 = new BitSet(new long[]{0xBFF6000000240840L,0x0000400000700040L});
    public static final BitSet FOLLOW_ws_in_selector3034 = new BitSet(new long[]{0xBFF6000000240840L,0x0000400000000040L});
    public static final BitSet FOLLOW_ws_in_selector3038 = new BitSet(new long[]{0xBFF6000000240840L,0x0000400000000040L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_selector3042 = new BitSet(new long[]{0xBFF6000000240842L,0x0000400000700040L});
    public static final BitSet FOLLOW_set_in_combinator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeSelector_in_simpleSelectorSequence3095 = new BitSet(new long[]{0xBFF6000000240842L,0x0000400000700040L});
    public static final BitSet FOLLOW_ws_in_simpleSelectorSequence3105 = new BitSet(new long[]{0xBFF6000000240840L,0x0000400000000040L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3108 = new BitSet(new long[]{0xBFF6000000240842L,0x0000400000700040L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3119 = new BitSet(new long[]{0xBFF6000000240842L,0x0000400000700040L});
    public static final BitSet FOLLOW_ws_in_simpleSelectorSequence3129 = new BitSet(new long[]{0xBFF6000000240840L,0x0000400000000040L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3132 = new BitSet(new long[]{0xBFF6000000240842L,0x0000400000700040L});
    public static final BitSet FOLLOW_set_in_esPred0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespacePrefix_in_typeSelector3245 = new BitSet(new long[]{0xB000000000040040L});
    public static final BitSet FOLLOW_elementName_in_typeSelector3249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespacePrefixName_in_namespacePrefix3264 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_STAR_in_namespacePrefix3268 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_PIPE_in_namespacePrefix3272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_extend_only_selector_in_elementSubsequent3311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_selector_interpolation_in_elementSubsequent3325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cssId_in_elementSubsequent3335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cssClass_in_elementSubsequent3344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slAttribute_in_elementSubsequent3356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pseudo_in_elementSubsequent3368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_in_cssId3396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_cssId3418 = new BitSet(new long[]{0x4000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_NAME_in_cssId3435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_selector_interpolation_in_cssId3456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cssClass3508 = new BitSet(new long[]{0x0000000000040040L,0x0000400000000000L});
    public static final BitSet FOLLOW_IDENT_in_cssClass3534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_cssClass3551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_selector_interpolation_in_cssClass3571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_elementName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_slAttribute3642 = new BitSet(new long[]{0x3000000000000040L,0x0000000000700000L});
    public static final BitSet FOLLOW_namespacePrefix_in_slAttribute3649 = new BitSet(new long[]{0x3000000000000040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_slAttribute3652 = new BitSet(new long[]{0x3000000000000040L,0x0000000000700000L});
    public static final BitSet FOLLOW_slAttributeName_in_slAttribute3663 = new BitSet(new long[]{0x0000000000000000L,0x000000000070007FL});
    public static final BitSet FOLLOW_ws_in_slAttribute3665 = new BitSet(new long[]{0x0000000000000000L,0x000000000000007FL});
    public static final BitSet FOLLOW_set_in_slAttribute3707 = new BitSet(new long[]{0x00000000000000C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_slAttribute3887 = new BitSet(new long[]{0x00000000000000C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_slAttributeValue_in_slAttribute3906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700040L});
    public static final BitSet FOLLOW_ws_in_slAttribute3924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RBRACKET_in_slAttribute3953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_slAttributeName3969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_slAttributeValue3983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_pseudo4043 = new BitSet(new long[]{0x0000000000060040L});
    public static final BitSet FOLLOW_set_in_pseudo4107 = new BitSet(new long[]{0x0000000000080002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_pseudo4164 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_pseudo4167 = new BitSet(new long[]{0x10EEFFFFF8DE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_pseudo4169 = new BitSet(new long[]{0x10EEFFFFF8DE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_expression_in_pseudo4175 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_pseudo4177 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_STAR_in_pseudo4183 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_pseudo4188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_pseudo4267 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_pseudo4269 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_pseudo4272 = new BitSet(new long[]{0xBFF6000000340840L,0x0000400000700040L});
    public static final BitSet FOLLOW_ws_in_pseudo4274 = new BitSet(new long[]{0xBFF6000000340840L,0x0000400000000040L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_pseudo4277 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_pseudo4280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_propertyDeclaration4319 = new BitSet(new long[]{0x11C2FFFFE8C41650L,0x0000001FFF000080L});
    public static final BitSet FOLLOW_property_in_propertyDeclaration4322 = new BitSet(new long[]{0x0000000000200000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4324 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_propertyDeclaration4327 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4329 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_propertyValue_in_propertyDeclaration4332 = new BitSet(new long[]{0x0008000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4335 = new BitSet(new long[]{0x0008000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_prio_in_propertyDeclaration4338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_propertyDeclaration4350 = new BitSet(new long[]{0x11C2FFFFE8C41650L,0x0000001FFF000080L});
    public static final BitSet FOLLOW_property_in_propertyDeclaration4353 = new BitSet(new long[]{0x0000000000200000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4355 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_propertyDeclaration4358 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4360 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_cp_propertyValue_in_propertyDeclaration4363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_propertyValue4398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyValue_in_cp_propertyValue4406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertyValue4428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_expressionPredicate4464 = new BitSet(new long[]{0xEFFEFFFFFFBFDFF0L,0xFFFFFFFFFFFFFF7FL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_expressionPredicate4497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_syncTo_SEMI4615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_prio4670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_in_expression4691 = new BitSet(new long[]{0x00E7FFFFF8C41FD2L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_expression4723 = new BitSet(new long[]{0x00E6FFFFF8C417D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_ws_in_expression4728 = new BitSet(new long[]{0x0001000000000800L,0x0000000000700000L});
    public static final BitSet FOLLOW_operator_in_expression4731 = new BitSet(new long[]{0x00E6FFFFF8C417D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_expression4733 = new BitSet(new long[]{0x00E6FFFFF8C417D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_term_in_expression4742 = new BitSet(new long[]{0x00E7FFFFF8C41FD2L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_unaryOperator_in_term4772 = new BitSet(new long[]{0x00E6FFFFF8C417D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_term4774 = new BitSet(new long[]{0x00E6FFFFF8C417D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_function_in_term4803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_term4816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_term4828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENTAGE_in_term4840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LENGTH_in_term4852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMS_in_term4864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REM_in_term4876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXS_in_term4888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANGLE_in_term4900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIME_in_term4912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FREQ_in_term4924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RESOLUTION_in_term4936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIMENSION_in_term4948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_term4965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_term4979 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_STRING_in_term4981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_JS_STRING_in_term4996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_term5008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_URI_in_term5020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hexColor_in_term5032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_term5046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_term5060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_term_symbol_in_term5074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENTAGE_SYMBOL_in_cp_term_symbol5101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionName_in_function5117 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_function5119 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_function5124 = new BitSet(new long[]{0x00EEFFFFF8DE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_function5126 = new BitSet(new long[]{0x00EEFFFFF8DE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_fnAttributes_in_function5153 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_function5184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_functionName5241 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_functionName5243 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_functionName5247 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_DOT_in_functionName5250 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_functionName5252 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_fnAttribute_in_fnAttributes5276 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_fnAttributes5279 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_fnAttributes5282 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_fnAttributes5284 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_fnAttribute_in_fnAttributes5287 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_fnAttributes5291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fnAttributeName_in_fnAttribute5329 = new BitSet(new long[]{0x0000000000200000L,0x0000000000700001L});
    public static final BitSet FOLLOW_ws_in_fnAttribute5331 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_fnAttribute5334 = new BitSet(new long[]{0x00EEFFFFF8CC17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_fnAttribute5340 = new BitSet(new long[]{0x00EEFFFFF8CC17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_fnAttributeValue_in_fnAttribute5343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_fnAttribute5357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_fnAttribute5369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_fnAttributeName5397 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_DOT_in_fnAttributeName5400 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_fnAttributeName5402 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_fnAttributeName5422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_in_fnAttributeValue5447 = new BitSet(new long[]{0x00E7FFFFF8C417D2L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_fnAttributeValue5479 = new BitSet(new long[]{0x00E6FFFFF8C417D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_ws_in_fnAttributeValue5484 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_SOLIDUS_in_fnAttributeValue5487 = new BitSet(new long[]{0x00E6FFFFF8C417D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_fnAttributeValue5489 = new BitSet(new long[]{0x00E6FFFFF8C417D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_term_in_fnAttributeValue5498 = new BitSet(new long[]{0x00E7FFFFF8C417D2L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_fnAttributeValue5519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_in_hexColor5537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ws5558 = new BitSet(new long[]{0x0000000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration5606 = new BitSet(new long[]{0x0000000000200000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5608 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_cp_variable_declaration5611 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5613 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration5616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration5639 = new BitSet(new long[]{0x0000000000200000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5641 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_cp_variable_declaration5644 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5646 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration5649 = new BitSet(new long[]{0x0000000000000002L,0x0000000000F00000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_SASS_DEFAULT_in_cp_variable_declaration5655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_cp_variable5695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_VAR_in_cp_variable5876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_cp_expression_list5904 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_expression_list5923 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_cp_expression_list5926 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression_list5928 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_cp_expression_list5931 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression5968 = new BitSet(new long[]{0x00FEFFFFF8CE97D2L,0x000007FFFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression5994 = new BitSet(new long[]{0x0010000000008000L,0x000007E000700000L});
    public static final BitSet FOLLOW_cp_expression_operator_in_cp_expression5997 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression5999 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression6003 = new BitSet(new long[]{0x00FEFFFFF8CE97D2L,0x000007FFFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression6023 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression6026 = new BitSet(new long[]{0x00FEFFFFF8CE97D2L,0x000007FFFF7FFF80L});
    public static final BitSet FOLLOW_set_in_cp_expression_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_cp_expression_atom6117 = new BitSet(new long[]{0x00EEFFFFF8CC17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression_atom6119 = new BitSet(new long[]{0x00EEFFFFF8CC17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_expression_atom6151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_cp_expression_atom6167 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression_atom6169 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_expression_atom6172 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_expression_atom6174 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_expression_atom6177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions6209 = new BitSet(new long[]{0x0000000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expressions6216 = new BitSet(new long[]{0x00EEFFFFF8CC17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions6218 = new BitSet(new long[]{0x0000000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression6252 = new BitSet(new long[]{0x1007000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression6295 = new BitSet(new long[]{0x1007000000000000L});
    public static final BitSet FOLLOW_set_in_cp_math_expression6298 = new BitSet(new long[]{0x00EEFFFFF8CC17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression6308 = new BitSet(new long[]{0x00EEFFFFF8CC17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression6311 = new BitSet(new long[]{0x1007000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_term_in_cp_math_expression_atom6349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom6357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryOperator_in_cp_math_expression_atom6368 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression_atom6370 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_math_expression_atom6376 = new BitSet(new long[]{0x00EEFFFFF8CC17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression_atom6378 = new BitSet(new long[]{0x00EEFFFFF8CC17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expression_atom6381 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression_atom6383 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_math_expression_atom6386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cp_mixin_declaration6426 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration6428 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6430 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration6433 = new BitSet(new long[]{0x0000FFFFE8D01610L,0x0000181FFF700080L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6435 = new BitSet(new long[]{0x0000FFFFE8D01610L,0x0000181FFF000080L});
    public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration6438 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration6441 = new BitSet(new long[]{0x0000000000002000L,0x0000200000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6444 = new BitSet(new long[]{0x0000000000000000L,0x0000200000700000L});
    public static final BitSet FOLLOW_less_mixin_guarded_in_cp_mixin_declaration6447 = new BitSet(new long[]{0x0000000000002000L,0x0000200000700000L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_cp_mixin_declaration6471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6473 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration6475 = new BitSet(new long[]{0x0000000000082000L,0x0000200000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6478 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration6481 = new BitSet(new long[]{0x0000FFFFE8D01610L,0x0000181FFF700080L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6483 = new BitSet(new long[]{0x0000FFFFE8D01610L,0x0000181FFF000080L});
    public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration6486 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration6489 = new BitSet(new long[]{0x0000000000002000L,0x0000200000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6503 = new BitSet(new long[]{0x0000000000002000L,0x0000200000700000L});
    public static final BitSet FOLLOW_cp_mixin_block_in_cp_mixin_declaration6506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cp_mixin_call6546 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call6548 = new BitSet(new long[]{0x0000000000080002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6551 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call6554 = new BitSet(new long[]{0x00EEFFFFF8DE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6556 = new BitSet(new long[]{0x00EEFFFFF8DE17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call6559 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call6562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_INCLUDE_in_cp_mixin_call6586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6588 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call6590 = new BitSet(new long[]{0x0000000000082002L,0x0000200000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6593 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call6596 = new BitSet(new long[]{0x00EEFFFFF8DE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6598 = new BitSet(new long[]{0x00EEFFFFF8DE17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call6601 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call6604 = new BitSet(new long[]{0x0000000000002002L,0x0000200000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6609 = new BitSet(new long[]{0x0000000000002000L,0x0000200000700000L});
    public static final BitSet FOLLOW_cp_mixin_block_in_cp_mixin_call6612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_cp_mixin_block6645 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_block6647 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_syncToFollow_in_cp_mixin_block6650 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_declarations_in_cp_mixin_block6660 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_cp_mixin_block6667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_cp_mixin_name6696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6732 = new BitSet(new long[]{0x0000000000000822L,0x0000080000000000L});
    public static final BitSet FOLLOW_set_in_cp_mixin_call_args6736 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_args6744 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6747 = new BitSet(new long[]{0x0000000000000822L,0x0000080000000000L});
    public static final BitSet FOLLOW_CP_DOTS_in_cp_mixin_call_args6752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_cp_mixin_call_arg6791 = new BitSet(new long[]{0x0000000000200000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6793 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_cp_mixin_call_arg6796 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6798 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg6801 = new BitSet(new long[]{0x0000000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg6813 = new BitSet(new long[]{0x0000000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_arg_in_cp_args_list6873 = new BitSet(new long[]{0x0000000000000822L,0x0000180000000000L});
    public static final BitSet FOLLOW_set_in_cp_args_list6877 = new BitSet(new long[]{0x0000FFFFE8C01610L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_ws_in_cp_args_list6887 = new BitSet(new long[]{0x0000FFFFE8C01610L,0x0000001FFF000080L});
    public static final BitSet FOLLOW_cp_arg_in_cp_args_list6890 = new BitSet(new long[]{0x0000000000000822L,0x0000180000000000L});
    public static final BitSet FOLLOW_set_in_cp_args_list6898 = new BitSet(new long[]{0x0000000000000000L,0x0000180000700000L});
    public static final BitSet FOLLOW_ws_in_cp_args_list6906 = new BitSet(new long[]{0x0000000000000000L,0x0000180000000000L});
    public static final BitSet FOLLOW_set_in_cp_args_list6912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_cp_args_list6934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_cp_arg6966 = new BitSet(new long[]{0x0000000000200002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_arg6968 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_COLON_in_cp_arg6973 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_arg6975 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_cp_arg6978 = new BitSet(new long[]{0x0000000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_arg6980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_WHEN_in_less_mixin_guarded7006 = new BitSet(new long[]{0x00000000000A0000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_less_mixin_guarded7008 = new BitSet(new long[]{0x00000000000A0000L,0x0000000000700000L});
    public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded7011 = new BitSet(new long[]{0x0000000000008802L});
    public static final BitSet FOLLOW_set_in_less_mixin_guarded7015 = new BitSet(new long[]{0x00000000000A0000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_less_mixin_guarded7023 = new BitSet(new long[]{0x00000000000A0000L,0x0000000000700000L});
    public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded7026 = new BitSet(new long[]{0x0000000000008802L});
    public static final BitSet FOLLOW_NOT_in_less_condition7056 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_less_condition7058 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_less_condition7067 = new BitSet(new long[]{0x0000FFFFE8C01650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_ws_in_less_condition7069 = new BitSet(new long[]{0x0000FFFFE8C01650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_cp_variable_in_less_condition7097 = new BitSet(new long[]{0x0010000000100000L,0x0000070000700001L});
    public static final BitSet FOLLOW_less_function_in_condition_in_less_condition7101 = new BitSet(new long[]{0x0010000000100000L,0x0000070000700001L});
    public static final BitSet FOLLOW_ws_in_less_condition7104 = new BitSet(new long[]{0x0010000000100000L,0x0000070000000001L});
    public static final BitSet FOLLOW_less_condition_operator_in_less_condition7108 = new BitSet(new long[]{0x00EEFFFFF8CC17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_less_condition7110 = new BitSet(new long[]{0x00EEFFFFF8CC17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_less_condition7113 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_less_condition7139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_fn_name_in_less_function_in_condition7165 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition7167 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_less_function_in_condition7170 = new BitSet(new long[]{0x0000FFFFE8C01610L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition7172 = new BitSet(new long[]{0x0000FFFFE8C01610L,0x0000001FFF000080L});
    public static final BitSet FOLLOW_cp_variable_in_less_function_in_condition7175 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition7177 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_less_function_in_condition7180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_less_fn_name7202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_less_condition_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_SIGN_in_less_selector_interpolation7264 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_less_selector_interpolation7266 = new BitSet(new long[]{0x0000000000000040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_less_selector_interpolation7268 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_less_selector_interpolation7271 = new BitSet(new long[]{0x0000000000004000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_less_selector_interpolation7273 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_less_selector_interpolation7276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7325 = new BitSet(new long[]{0x93D2000000200842L,0x0000000000700040L});
    public static final BitSet FOLLOW_set_in_sass_selector_interpolation_expression7353 = new BitSet(new long[]{0x93D2000000200842L,0x0000000000700040L});
    public static final BitSet FOLLOW_ws_in_sass_selector_interpolation_expression7435 = new BitSet(new long[]{0x93D2000000200840L,0x0000000000000040L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7472 = new BitSet(new long[]{0x93D2000000200842L,0x0000000000700040L});
    public static final BitSet FOLLOW_set_in_sass_selector_interpolation_expression7508 = new BitSet(new long[]{0x93D2000000200842L,0x0000000000700040L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7628 = new BitSet(new long[]{0x01C2000000000042L,0x0000000000700000L});
    public static final BitSet FOLLOW_set_in_sass_declaration_interpolation_expression7656 = new BitSet(new long[]{0x01C2000000000042L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_declaration_interpolation_expression7709 = new BitSet(new long[]{0x01C2000000000040L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7746 = new BitSet(new long[]{0x01C2000000000042L,0x0000000000700000L});
    public static final BitSet FOLLOW_set_in_sass_declaration_interpolation_expression7782 = new BitSet(new long[]{0x01C2000000000042L,0x0000000000700000L});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var7855 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_interpolation_expression_var7857 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_sass_interpolation_expression_var7859 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_interpolation_expression_var7861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_sass_nested_properties7905 = new BitSet(new long[]{0x0000000000200000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties7907 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_sass_nested_properties7910 = new BitSet(new long[]{0x00EEFFFFF8CE37D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties7912 = new BitSet(new long[]{0x00EEFFFFF8CE37D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_propertyValue_in_sass_nested_properties7916 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties7918 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_nested_properties7923 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties7925 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_syncToFollow_in_sass_nested_properties7928 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_declarations_in_sass_nested_properties7930 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_nested_properties7933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EXTEND_in_sass_extend7954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_extend7956 = new BitSet(new long[]{0xBFF6000000240840L,0x0000400000000040L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_sass_extend7958 = new BitSet(new long[]{0x0000000000000002L,0x0000800000700000L});
    public static final BitSet FOLLOW_ws_in_sass_extend7961 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_SASS_OPTIONAL_in_sass_extend7964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector7991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sass_debug8012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_debug8022 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_sass_debug8024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_if_in_sass_control8049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_for_in_sass_control8053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_each_in_sass_control8057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_while_in_sass_control8061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_IF_in_sass_if8082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_if8084 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_if8086 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_if8088 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_if8091 = new BitSet(new long[]{0x0000000000000002L,0x0000000080700000L});
    public static final BitSet FOLLOW_ws_in_sass_if8094 = new BitSet(new long[]{0x0000000000000000L,0x0000000080700000L});
    public static final BitSet FOLLOW_sass_else_in_sass_if8097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_ELSE_in_sass_else8124 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_else8126 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_else8129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_ELSE_in_sass_else8142 = new BitSet(new long[]{0x0000000000000040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_else8144 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_else8149 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_sass_else8153 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_else8156 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_else8158 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_else8161 = new BitSet(new long[]{0x0000000000000002L,0x0000000080700000L});
    public static final BitSet FOLLOW_ws_in_sass_else8164 = new BitSet(new long[]{0x0000000000000000L,0x0000000080700000L});
    public static final BitSet FOLLOW_sass_else_in_sass_else8167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_sass_control_expression8190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_FOR_in_sass_for8215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_for8217 = new BitSet(new long[]{0x0000FFFFE8C01610L,0x0000001FFF000080L});
    public static final BitSet FOLLOW_cp_variable_in_sass_for8219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_for8221 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_for8225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_for8229 = new BitSet(new long[]{0x00EEFFFFF8CC17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_sass_for8231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_for8233 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_for8237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_for8241 = new BitSet(new long[]{0x00EEFFFFF8CC17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_sass_for8243 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_for8245 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_for8248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EACH_in_sass_each8269 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_each8271 = new BitSet(new long[]{0x0000FFFFE8C01610L,0x0000001FFF000080L});
    public static final BitSet FOLLOW_cp_variable_in_sass_each8273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_each8275 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_each8279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_each8283 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_list_in_sass_each8285 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_each8287 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_each8290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_WHILE_in_sass_while8315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_while8317 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_while8319 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_while8321 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_while8324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_sass_control_block8345 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_sass_control_block8347 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_declarations_in_sass_control_block8350 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_control_block8353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_FUNCTION_in_sass_function_declaration8399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration8401 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_sass_function_name_in_sass_function_declaration8403 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration8405 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_sass_function_declaration8408 = new BitSet(new long[]{0x0000FFFFE8D01610L,0x0000181FFF000080L});
    public static final BitSet FOLLOW_cp_args_list_in_sass_function_declaration8410 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_sass_function_declaration8413 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration8415 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_function_declaration8418 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration8420 = new BitSet(new long[]{0xBFF6FFFFE8E45E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_declarations_in_sass_function_declaration8423 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_function_declaration8426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_sass_function_name8451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_RETURN_in_sass_function_return8472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_function_return8474 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_sass_function_return8476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_CONTENT_in_sass_content8501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred1_Css3370 = new BitSet(new long[]{0x0040FFFFE8CF1650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_mediaQueryList_in_synpred1_Css3373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred2_Css3434 = new BitSet(new long[]{0x0040FFFFE8CF1650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_mediaQueryList_in_synpred2_Css3437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred3_Css3561 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred3_Css3564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_synpred4_Css3635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred4_Css3640 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_synpred4_Css3642 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred4_Css3644 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred4_Css3647 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred4_Css3650 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_RPAREN_in_synpred4_Css3655 = new BitSet(new long[]{0xFFFFFFFFFFFFFFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred4_Css3657 = new BitSet(new long[]{0xFFFFFFFFFFFFFFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_LBRACE_in_synpred4_Css3665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred5_Css3679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred6_Css3692 = new BitSet(new long[]{0xFFFFFFFFFFFF9FD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_COLON_in_synpred6_Css3704 = new BitSet(new long[]{0xFFFFFFFFFFFF9FD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred6_Css3706 = new BitSet(new long[]{0xFFFFFFFFFFFF9FF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_SEMI_in_synpred6_Css3716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_declaration_interpolation_expression_in_synpred7_Css3729 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_synpred7_Css3731 = new BitSet(new long[]{0xFFFFFFFFFFFF9FD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred7_Css3733 = new BitSet(new long[]{0xFFFFFFFFFFFF9FF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_SEMI_in_synpred7_Css3743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred8_Css3851 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred8_Css3854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred9_Css31168 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred9_Css31171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_synpred10_Css31248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred10_Css31253 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_synpred10_Css31255 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred10_Css31257 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred10_Css31260 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred10_Css31263 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_RPAREN_in_synpred10_Css31268 = new BitSet(new long[]{0xFFFFFFFFFFFFBFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred10_Css31270 = new BitSet(new long[]{0xFFFFFFFFFFFFBFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_LBRACE_in_synpred10_Css31280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred13_Css32418 = new BitSet(new long[]{0xFFFFFFFFFFDFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_synpred13_Css32426 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred13_Css32428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred14_Css32582 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred14_Css32585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_synpred15_Css32656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_nested_properties_in_synpred16_Css32669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_synpred17_Css32682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_synpred18_Css32700 = new BitSet(new long[]{0x0000000000200000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred18_Css32702 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_synpred18_Css32705 = new BitSet(new long[]{0xFFFFFFFFFFFFDFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred18_Css32707 = new BitSet(new long[]{0xFFFFFFFFFFFFDFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred18_Css32717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_synpred19_Css32735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred19_Css32740 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_synpred19_Css32742 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred19_Css32744 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred19_Css32747 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred19_Css32750 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_RPAREN_in_synpred19_Css32755 = new BitSet(new long[]{0xFFFFFFFFFFFFBFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred19_Css32757 = new BitSet(new long[]{0xFFFFFFFFFFFFBFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_LBRACE_in_synpred19_Css32767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred20_Css32781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectorsGroup_in_synpred21_Css32801 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred21_Css32803 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred21_Css32806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred22_Css32945 = new BitSet(new long[]{0xFFFFFFFFFFFFDFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_synpred22_Css32957 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred22_Css32959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred23_Css33099 = new BitSet(new long[]{0x0FC0000000200000L});
    public static final BitSet FOLLOW_esPred_in_synpred23_Css33102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred24_Css33123 = new BitSet(new long[]{0x0FC0000000200000L});
    public static final BitSet FOLLOW_esPred_in_synpred24_Css33126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred25_Css33233 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_PIPE_in_synpred25_Css33242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred26_Css34698 = new BitSet(new long[]{0x00E6FFFFF8C417D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_ws_in_synpred26_Css34703 = new BitSet(new long[]{0x0001000000000800L,0x0000000000700000L});
    public static final BitSet FOLLOW_operator_in_synpred26_Css34706 = new BitSet(new long[]{0x00E6FFFFF8C417D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_synpred26_Css34708 = new BitSet(new long[]{0x00E6FFFFF8C417D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_term_in_synpred26_Css34717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionName_in_synpred27_Css34795 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred27_Css34797 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred27_Css34800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fnAttributeName_in_synpred28_Css35316 = new BitSet(new long[]{0x0000000000200000L,0x0000000000700001L});
    public static final BitSet FOLLOW_ws_in_synpred28_Css35318 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_synpred28_Css35321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred29_Css35454 = new BitSet(new long[]{0x00E6FFFFF8C417D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_ws_in_synpred29_Css35459 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_SOLIDUS_in_synpred29_Css35462 = new BitSet(new long[]{0x00E6FFFFF8C417D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_synpred29_Css35464 = new BitSet(new long[]{0x00E6FFFFF8C417D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_term_in_synpred29_Css35473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred30_Css35912 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred30_Css35915 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_synpred30_Css35917 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_synpred30_Css35920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred31_Css35987 = new BitSet(new long[]{0x0010000000008000L,0x000007E000700000L});
    public static final BitSet FOLLOW_cp_expression_operator_in_synpred31_Css35990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred32_Css36017 = new BitSet(new long[]{0x00EEFFFFF8CE17D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_atom_in_synpred32_Css36020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_math_expression_in_synpred33_Css36148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred34_Css36279 = new BitSet(new long[]{0x1007000000000000L});
    public static final BitSet FOLLOW_set_in_synpred34_Css36282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred35_Css37322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred36_Css37469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred37_Css37625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred38_Css37743 = new BitSet(new long[]{0x0000000000000002L});

}