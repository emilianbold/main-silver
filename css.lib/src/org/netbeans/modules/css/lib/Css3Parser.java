// $ANTLR 3.3 Nov 30, 2010 12:50:56 /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g 2014-07-14 12:10:00

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */
package org.netbeans.modules.css.lib;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.debug.*;
import java.io.IOException;
public class Css3Parser extends DebugParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NAMESPACE_SYM", "SEMI", "IDENT", "STRING", "URI", "CHARSET_SYM", "IMPORT_SYM", "COMMA", "LPAREN", "LESS_IMPORT_TYPE", "RPAREN", "MEDIA_SYM", "LBRACE", "RBRACE", "IMPORTANT_SYM", "AND", "ONLY", "NOT", "GEN", "COLON", "AT_IDENT", "MOZ_DOCUMENT_SYM", "MOZ_URL_PREFIX", "MOZ_DOMAIN", "MOZ_REGEXP", "WEBKIT_KEYFRAMES_SYM", "PERCENTAGE", "PAGE_SYM", "COUNTER_STYLE_SYM", "FONT_FACE_SYM", "TOPLEFTCORNER_SYM", "TOPLEFT_SYM", "TOPCENTER_SYM", "TOPRIGHT_SYM", "TOPRIGHTCORNER_SYM", "BOTTOMLEFTCORNER_SYM", "BOTTOMLEFT_SYM", "BOTTOMCENTER_SYM", "BOTTOMRIGHT_SYM", "BOTTOMRIGHTCORNER_SYM", "LEFTTOP_SYM", "LEFTMIDDLE_SYM", "LEFTBOTTOM_SYM", "RIGHTTOP_SYM", "RIGHTMIDDLE_SYM", "RIGHTBOTTOM_SYM", "SOLIDUS", "MINUS", "PLUS", "SASS_AT_ROOT", "GREATER", "TILDE", "HASH_SYMBOL", "HASH", "DOT", "LBRACKET", "DCOLON", "SASS_EXTEND_ONLY_SELECTOR", "STAR", "PIPE", "NAME", "LESS_AND", "OPEQ", "INCLUDES", "DASHMATCH", "BEGINS", "ENDS", "CONTAINS", "RBRACKET", "SASS_VAR", "NUMBER", "LENGTH", "EMS", "REM", "EXS", "ANGLE", "TIME", "FREQ", "RESOLUTION", "DIMENSION", "LESS_JS_STRING", "PERCENTAGE_SYMBOL", "WS", "NL", "COMMENT", "SASS_DEFAULT", "SASS_CONTENT", "SASS_MIXIN", "SASS_INCLUDE", "SASS_EXTEND", "SASS_DEBUG", "SASS_WARN", "SASS_IF", "SASS_ELSE", "SASS_FOR", "SASS_FUNCTION", "SASS_RETURN", "SASS_EACH", "SASS_WHILE", "OR", "CP_EQ", "CP_NOT_EQ", "LESS", "LESS_OR_EQ", "GREATER_OR_EQ", "CP_DOTS", "LESS_REST", "LESS_WHEN", "AT_SIGN", "SASS_OPTIONAL", "HEXCHAR", "NONASCII", "UNICODE", "ESCAPE", "NMSTART", "NMCHAR", "URL", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "CDO", "CDC", "EXCLAMATION_MARK", "INVALID", "LINE_COMMENT"
    };
    public static final int EOF=-1;
    public static final int NAMESPACE_SYM=4;
    public static final int SEMI=5;
    public static final int IDENT=6;
    public static final int STRING=7;
    public static final int URI=8;
    public static final int CHARSET_SYM=9;
    public static final int IMPORT_SYM=10;
    public static final int COMMA=11;
    public static final int LPAREN=12;
    public static final int LESS_IMPORT_TYPE=13;
    public static final int RPAREN=14;
    public static final int MEDIA_SYM=15;
    public static final int LBRACE=16;
    public static final int RBRACE=17;
    public static final int IMPORTANT_SYM=18;
    public static final int AND=19;
    public static final int ONLY=20;
    public static final int NOT=21;
    public static final int GEN=22;
    public static final int COLON=23;
    public static final int AT_IDENT=24;
    public static final int MOZ_DOCUMENT_SYM=25;
    public static final int MOZ_URL_PREFIX=26;
    public static final int MOZ_DOMAIN=27;
    public static final int MOZ_REGEXP=28;
    public static final int WEBKIT_KEYFRAMES_SYM=29;
    public static final int PERCENTAGE=30;
    public static final int PAGE_SYM=31;
    public static final int COUNTER_STYLE_SYM=32;
    public static final int FONT_FACE_SYM=33;
    public static final int TOPLEFTCORNER_SYM=34;
    public static final int TOPLEFT_SYM=35;
    public static final int TOPCENTER_SYM=36;
    public static final int TOPRIGHT_SYM=37;
    public static final int TOPRIGHTCORNER_SYM=38;
    public static final int BOTTOMLEFTCORNER_SYM=39;
    public static final int BOTTOMLEFT_SYM=40;
    public static final int BOTTOMCENTER_SYM=41;
    public static final int BOTTOMRIGHT_SYM=42;
    public static final int BOTTOMRIGHTCORNER_SYM=43;
    public static final int LEFTTOP_SYM=44;
    public static final int LEFTMIDDLE_SYM=45;
    public static final int LEFTBOTTOM_SYM=46;
    public static final int RIGHTTOP_SYM=47;
    public static final int RIGHTMIDDLE_SYM=48;
    public static final int RIGHTBOTTOM_SYM=49;
    public static final int SOLIDUS=50;
    public static final int MINUS=51;
    public static final int PLUS=52;
    public static final int SASS_AT_ROOT=53;
    public static final int GREATER=54;
    public static final int TILDE=55;
    public static final int HASH_SYMBOL=56;
    public static final int HASH=57;
    public static final int DOT=58;
    public static final int LBRACKET=59;
    public static final int DCOLON=60;
    public static final int SASS_EXTEND_ONLY_SELECTOR=61;
    public static final int STAR=62;
    public static final int PIPE=63;
    public static final int NAME=64;
    public static final int LESS_AND=65;
    public static final int OPEQ=66;
    public static final int INCLUDES=67;
    public static final int DASHMATCH=68;
    public static final int BEGINS=69;
    public static final int ENDS=70;
    public static final int CONTAINS=71;
    public static final int RBRACKET=72;
    public static final int SASS_VAR=73;
    public static final int NUMBER=74;
    public static final int LENGTH=75;
    public static final int EMS=76;
    public static final int REM=77;
    public static final int EXS=78;
    public static final int ANGLE=79;
    public static final int TIME=80;
    public static final int FREQ=81;
    public static final int RESOLUTION=82;
    public static final int DIMENSION=83;
    public static final int LESS_JS_STRING=84;
    public static final int PERCENTAGE_SYMBOL=85;
    public static final int WS=86;
    public static final int NL=87;
    public static final int COMMENT=88;
    public static final int SASS_DEFAULT=89;
    public static final int SASS_CONTENT=90;
    public static final int SASS_MIXIN=91;
    public static final int SASS_INCLUDE=92;
    public static final int SASS_EXTEND=93;
    public static final int SASS_DEBUG=94;
    public static final int SASS_WARN=95;
    public static final int SASS_IF=96;
    public static final int SASS_ELSE=97;
    public static final int SASS_FOR=98;
    public static final int SASS_FUNCTION=99;
    public static final int SASS_RETURN=100;
    public static final int SASS_EACH=101;
    public static final int SASS_WHILE=102;
    public static final int OR=103;
    public static final int CP_EQ=104;
    public static final int CP_NOT_EQ=105;
    public static final int LESS=106;
    public static final int LESS_OR_EQ=107;
    public static final int GREATER_OR_EQ=108;
    public static final int CP_DOTS=109;
    public static final int LESS_REST=110;
    public static final int LESS_WHEN=111;
    public static final int AT_SIGN=112;
    public static final int SASS_OPTIONAL=113;
    public static final int HEXCHAR=114;
    public static final int NONASCII=115;
    public static final int UNICODE=116;
    public static final int ESCAPE=117;
    public static final int NMSTART=118;
    public static final int NMCHAR=119;
    public static final int URL=120;
    public static final int A=121;
    public static final int B=122;
    public static final int C=123;
    public static final int D=124;
    public static final int E=125;
    public static final int F=126;
    public static final int G=127;
    public static final int H=128;
    public static final int I=129;
    public static final int J=130;
    public static final int K=131;
    public static final int L=132;
    public static final int M=133;
    public static final int N=134;
    public static final int O=135;
    public static final int P=136;
    public static final int Q=137;
    public static final int R=138;
    public static final int S=139;
    public static final int T=140;
    public static final int U=141;
    public static final int V=142;
    public static final int W=143;
    public static final int X=144;
    public static final int Y=145;
    public static final int Z=146;
    public static final int CDO=147;
    public static final int CDC=148;
    public static final int EXCLAMATION_MARK=149;
    public static final int INVALID=150;
    public static final int LINE_COMMENT=151;

    // delegates
    // delegators

    public static final String[] ruleNames = new String[] {
        "invalidRule", "mediaBodyItem", "syncTo_SEMI", "cp_mixin_call", 
        "synpred9_Css3", "cp_math_expressions", "selector", "sass_control_expression", 
        "webkitKeyframes", "pseudoPage", "sass_nested_properties", "ws", 
        "cp_mixin_call_arg", "synpred18_Css3", "sass_function_name", "synpred24_Css3", 
        "esPred", "cp_mixin_block", "namespaces", "mediaQueryOperator", 
        "cp_expression_atom", "synpred12_Css3", "resourceIdentifier", "synpred4_Css3", 
        "synpred25_Css3", "elementSubsequent", "cp_args_list", "synpred44_Css3", 
        "expressionPredicate", "propertyValue", "syncToDeclarationsRule", 
        "synpred32_Css3", "mediaQuery", "namespacePrefixName", "operator", 
        "synpred2_Css3", "synpred17_Css3", "bodyItem", "cp_expression", 
        "hexColor", "mediaBody", "cssClass", "mediaFeatureValue", "synpred41_Css3", 
        "less_condition_operator", "sass_control", "cp_math_expression_atom", 
        "styleSheet", "synpred11_Css3", "cp_arg", "function", "cp_variable_declaration", 
        "less_fn_name", "synpred35_Css3", "cp_variable", "sass_function_return", 
        "declaration", "rule", "less_selector_interpolation", "imports", 
        "synpred42_Css3", "functionName", "cp_mixin_declaration", "sass_each", 
        "sass_content", "synpred30_Css3", "synpred21_Css3", "sass_map_pair", 
        "synpred16_Css3", "namespace", "sass_map_name", "sass_function_declaration", 
        "synpred23_Css3", "synpred33_Css3", "charSetValue", "at_rule", "synpred8_Css3", 
        "sass_selector_interpolation_expression", "synpred26_Css3", "sass_while", 
        "cp_term_symbol", "cp_mixin_call_args", "cp_propertyValue", "synpred37_Css3", 
        "margin_sym", "syncTo_RBRACE", "term", "synpred43_Css3", "sass_control_block", 
        "mediaExpression", "synpred36_Css3", "moz_document_function", "syncToFollow", 
        "fnAttribute", "less_function_in_condition", "synpred14_Css3", "synpred10_Css3", 
        "synpred39_Css3", "elementName", "cp_math_expression", "sass_if", 
        "moz_document", "selectorsGroup", "synpred6_Css3", "synpred1_Css3", 
        "sass_else", "property", "slAttributeValue", "sass_extend", "synpred45_Css3", 
        "cssId", "body", "fontFace", "less_condition", "slAttribute", "propertyDeclaration", 
        "synpred27_Css3", "sass_map_pairs", "vendorAtRule", "synpred38_Css3", 
        "less_mixin_guarded", "synpred19_Css3", "fnAttributes", "mediaType", 
        "synpred34_Css3", "generic_at_rule", "synpred7_Css3", "sass_interpolation_expression_var", 
        "declarations", "counterStyle", "combinator", "synpred3_Css3", "typeSelector", 
        "synpred22_Css3", "atRuleId", "cp_expression_list", "synpred28_Css3", 
        "charSet", "margin", "webkitKeyframeSelectors", "fnAttributeValue", 
        "synpred13_Css3", "synpred40_Css3", "expression", "cp_expression_operator", 
        "sass_declaration_interpolation_expression", "media", "page", "pseudo", 
        "sass_debug", "synpred20_Css3", "simpleSelectorSequence", "webkitKeyframesBlock", 
        "namespacePrefix", "importItem", "synpred15_Css3", "synpred31_Css3", 
        "mediaQueryList", "unaryOperator", "slAttributeName", "cp_mixin_name", 
        "mediaFeature", "prio", "sass_extend_only_selector", "sass_for", 
        "synpred29_Css3", "sass_map", "synpred5_Css3", "fnAttributeName"
    };
    public static final boolean[] decisionCanBacktrack = new boolean[] {
        false, // invalid decision
        false, false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            true, false, false, false, false, false, true, false, false, 
            false, false, true, false, false, false, false, false, false, 
            true, false, false, false, false, false, false, false, true, 
            false, false, true, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, true, false, false, false, true, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, true, false, false, false, false, true, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, true, false, false, false, false, false, 
            false, false, true, false, false, false, true, false, false, 
            false, false, false, false, false, false, true, false, true, 
            false, true, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            true, false, false, true, false, false, false, false, false, 
            false, false, false, false, false, false, true, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, true, false, 
            false, false, true, false, false, false, false, false, true, 
            false, false, false, true, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, true, false, true, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false
    };

     
        public int ruleLevel = 0;
        public int getRuleLevel() { return ruleLevel; }
        public void incRuleLevel() { ruleLevel++; }
        public void decRuleLevel() { ruleLevel--; }
        public Css3Parser(TokenStream input) {
            this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState());
        }
        public Css3Parser(TokenStream input, int port, RecognizerSharedState state) {
            super(input, state);
            DebugEventSocketProxy proxy =
                new DebugEventSocketProxy(this, port, null);
            setDebugListener(proxy);
            try {
                proxy.handshake();
            }
            catch (IOException ioe) {
                reportError(ioe);
            }
        }
    public Css3Parser(TokenStream input, DebugEventListener dbg) {
        super(input, dbg, new RecognizerSharedState());

    }
    protected boolean evalPredicate(boolean result, String predicate) {
        dbg.semanticPredicate(result, predicate);
        return result;
    }


    public String[] getTokenNames() { return Css3Parser.tokenNames; }
    public String getGrammarFileName() { return "/Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g"; }



        protected boolean isLessSource() {
            return false;
        }

        protected boolean isScssSource() {
            return false;
        }

        private boolean isCssPreprocessorSource() {
            return isLessSource() || isScssSource();
        }

        private boolean tokenNameEquals(String tokenImage) {
            return tokenImage.equalsIgnoreCase(input.LT(1).getText());
        }

    /**
         * Use the current stacked followset to work out the valid tokens that
         * can follow on from the current point in the parse, then recover by
         * eating tokens that are not a member of the follow set we compute.
         *
         * This method is used whenever we wish to force a sync, even though
         * the parser has not yet checked LA(1) for alt selection. This is useful
         * in situations where only a subset of tokens can begin a new construct
         * (such as the start of a new statement in a block) and we want to
         * proactively detect garbage so that the current rule does not exit on
         * on an exception.
         *
         * We could override recover() to make this the default behavior but that
         * is too much like using a sledge hammer to crack a nut. We want finer
         * grained control of the recovery and error mechanisms.
         */
        protected void syncToSet()
        {
            // Compute the followset that is in context wherever we are in the
            // rule chain/stack
            //
             BitSet follow = state.following[state._fsp]; //computeContextSensitiveRuleFOLLOW();

             syncToSet(follow);
        }

        protected void syncToSet(BitSet follow)
        {
            int mark = -1;

            //create error-recovery node
            dbg.enterRule(getGrammarFileName(), "recovery");

            try {

                mark = input.mark();

                // Consume all tokens in the stream until we find a member of the follow
                // set, which means the next production should be guaranteed to be happy.
                //
                while (! follow.member(input.LA(1)) ) {

                    if  (input.LA(1) == Token.EOF) {

                        // Looks like we didn't find anything at all that can help us here
                        // so we need to rewind to where we were and let normal error handling
                        // bail out.
                        //
                        input.rewind();
                        mark = -1;
                        return;
                    }
                    input.consume();

                    // Now here, because you are consuming some tokens, yu will probably want
                    // to raise an error message such as "Spurious elements after the class member were discarded"
                    // using whatever your override of displayRecognitionError() routine does to record
                    // error messages. The exact error my depend on context etc.
                    //
                }
            } catch (Exception e) {

              // Just ignore any errors here, we will just let the recognizer
              // try to resync as normal - something must be very screwed.
              //
            }
            finally {
                dbg.exitRule(getGrammarFileName(), "recovery");

                // Always release the mark we took
                //
                if  (mark != -1) {
                    input.release(mark);
                }
            }
        }

        /**
             * synces to next RBRACE "}" taking nesting into account
             */
            protected void syncToRBRACE(int nest)
                {

                    int mark = -1;
                    //create error-recovery node
                    //dbg.enterRule(getGrammarFileName(), "recovery");

                    try {
                        mark = input.mark();
                        for(;;) {
                            //read char
                            int c = input.LA(1);

                            switch(c) {
                                case Token.EOF:
                                    input.rewind();
                                    mark = -1;
                                    return ;
                                case Css3Lexer.LBRACE:
                                    nest++;
                                    break;
                                case Css3Lexer.RBRACE:
                                    nest--;
                                    if(nest == 0) {
                                        //do not eat the final RBRACE
                                        return ;
                                    }
                            }

                            input.consume();

                        }

                    } catch (Exception e) {

                      // Just ignore any errors here, we will just let the recognizer
                      // try to resync as normal - something must be very screwed.
                      //
                    }
                    finally {
                        if  (mark != -1) {
                            input.release(mark);
                        }
                        //dbg.exitRule(getGrammarFileName(), "recovery");
                    }
                }




    // $ANTLR start "styleSheet"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:321:1: styleSheet : ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF ;
    public final void styleSheet() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "styleSheet");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(321, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:322:5: ( ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:6: ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF
            {
            dbg.location(323,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:6: ( ws )?
            int alt1=2;
            try { dbg.enterSubRule(1);
            try { dbg.enterDecision(1, decisionCanBacktrack[1]);

            int LA1_0 = input.LA(1);

            if ( ((LA1_0>=WS && LA1_0<=COMMENT)) ) {
                alt1=1;
            }
            } finally {dbg.exitDecision(1);}

            switch (alt1) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:6: ws
                    {
                    dbg.location(323,6);
                    pushFollow(FOLLOW_ws_in_styleSheet120);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(1);}

            dbg.location(324,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:6: ( charSet ( ws )? )?
            int alt3=2;
            try { dbg.enterSubRule(3);
            try { dbg.enterDecision(3, decisionCanBacktrack[3]);

            try {
                isCyclicDecision = true;
                alt3 = dfa3.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(3);}

            switch (alt3) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:8: charSet ( ws )?
                    {
                    dbg.location(324,8);
                    pushFollow(FOLLOW_charSet_in_styleSheet130);
                    charSet();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(324,16);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:16: ( ws )?
                    int alt2=2;
                    try { dbg.enterSubRule(2);
                    try { dbg.enterDecision(2, decisionCanBacktrack[2]);

                    int LA2_0 = input.LA(1);

                    if ( ((LA2_0>=WS && LA2_0<=COMMENT)) ) {
                        alt2=1;
                    }
                    } finally {dbg.exitDecision(2);}

                    switch (alt2) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:16: ws
                            {
                            dbg.location(324,16);
                            pushFollow(FOLLOW_ws_in_styleSheet132);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(2);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(3);}

            dbg.location(325,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:9: ( imports )?
            int alt4=2;
            try { dbg.enterSubRule(4);
            try { dbg.enterDecision(4, decisionCanBacktrack[4]);

            try {
                isCyclicDecision = true;
                alt4 = dfa4.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(4);}

            switch (alt4) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:9: imports
                    {
                    dbg.location(325,9);
                    pushFollow(FOLLOW_imports_in_styleSheet146);
                    imports();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(4);}

            dbg.location(326,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:326:9: ( namespaces )?
            int alt5=2;
            try { dbg.enterSubRule(5);
            try { dbg.enterDecision(5, decisionCanBacktrack[5]);

            try {
                isCyclicDecision = true;
                alt5 = dfa5.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(5);}

            switch (alt5) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:326:9: namespaces
                    {
                    dbg.location(326,9);
                    pushFollow(FOLLOW_namespaces_in_styleSheet157);
                    namespaces();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(5);}

            dbg.location(327,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:9: ( body )?
            int alt6=2;
            try { dbg.enterSubRule(6);
            try { dbg.enterDecision(6, decisionCanBacktrack[6]);

            int LA6_0 = input.LA(1);

            if ( ((LA6_0>=NAMESPACE_SYM && LA6_0<=IDENT)||(LA6_0>=CHARSET_SYM && LA6_0<=COMMA)||LA6_0==MEDIA_SYM||(LA6_0>=GEN && LA6_0<=MOZ_DOCUMENT_SYM)||LA6_0==WEBKIT_KEYFRAMES_SYM||(LA6_0>=PAGE_SYM && LA6_0<=RIGHTBOTTOM_SYM)||(LA6_0>=MINUS && LA6_0<=PIPE)||LA6_0==LESS_AND||(LA6_0>=RBRACKET && LA6_0<=SASS_VAR)||(LA6_0>=SASS_CONTENT && LA6_0<=SASS_WHILE)||LA6_0==AT_SIGN) ) {
                alt6=1;
            }
            } finally {dbg.exitDecision(6);}

            switch (alt6) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:9: body
                    {
                    dbg.location(327,9);
                    pushFollow(FOLLOW_body_in_styleSheet168);
                    body();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(6);}

            dbg.location(328,6);
            match(input,EOF,FOLLOW_EOF_in_styleSheet176); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(329, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "styleSheet");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "styleSheet"


    // $ANTLR start "namespaces"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:331:1: namespaces : ( namespace ( ws )? )+ ;
    public final void namespaces() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespaces");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(331, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:2: ( ( namespace ( ws )? )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:2: ( namespace ( ws )? )+
            {
            dbg.location(333,2);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:2: ( namespace ( ws )? )+
            int cnt8=0;
            try { dbg.enterSubRule(8);

            loop8:
            do {
                int alt8=2;
                try { dbg.enterDecision(8, decisionCanBacktrack[8]);

                try {
                    isCyclicDecision = true;
                    alt8 = dfa8.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(8);}

                switch (alt8) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:4: namespace ( ws )?
            	    {
            	    dbg.location(333,4);
            	    pushFollow(FOLLOW_namespace_in_namespaces193);
            	    namespace();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(333,14);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:14: ( ws )?
            	    int alt7=2;
            	    try { dbg.enterSubRule(7);
            	    try { dbg.enterDecision(7, decisionCanBacktrack[7]);

            	    int LA7_0 = input.LA(1);

            	    if ( ((LA7_0>=WS && LA7_0<=COMMENT)) ) {
            	        alt7=1;
            	    }
            	    } finally {dbg.exitDecision(7);}

            	    switch (alt7) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:14: ws
            	            {
            	            dbg.location(333,14);
            	            pushFollow(FOLLOW_ws_in_namespaces195);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(7);}


            	    }
            	    break;

            	default :
            	    if ( cnt8 >= 1 ) break loop8;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(8, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt8++;
            } while (true);
            } finally {dbg.exitSubRule(8);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(334, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespaces");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespaces"


    // $ANTLR start "namespace"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:1: namespace : NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI ;
    public final void namespace() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespace");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(336, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:3: ( NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:5: NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI
            {
            dbg.location(337,5);
            match(input,NAMESPACE_SYM,FOLLOW_NAMESPACE_SYM_in_namespace211); if (state.failed) return ;
            dbg.location(337,19);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:19: ( ws )?
            int alt9=2;
            try { dbg.enterSubRule(9);
            try { dbg.enterDecision(9, decisionCanBacktrack[9]);

            int LA9_0 = input.LA(1);

            if ( ((LA9_0>=WS && LA9_0<=COMMENT)) ) {
                alt9=1;
            }
            } finally {dbg.exitDecision(9);}

            switch (alt9) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:19: ws
                    {
                    dbg.location(337,19);
                    pushFollow(FOLLOW_ws_in_namespace213);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(9);}

            dbg.location(337,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:23: ( namespacePrefixName ( ws )? )?
            int alt11=2;
            try { dbg.enterSubRule(11);
            try { dbg.enterDecision(11, decisionCanBacktrack[11]);

            int LA11_0 = input.LA(1);

            if ( (LA11_0==IDENT) ) {
                alt11=1;
            }
            } finally {dbg.exitDecision(11);}

            switch (alt11) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:24: namespacePrefixName ( ws )?
                    {
                    dbg.location(337,24);
                    pushFollow(FOLLOW_namespacePrefixName_in_namespace217);
                    namespacePrefixName();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(337,44);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:44: ( ws )?
                    int alt10=2;
                    try { dbg.enterSubRule(10);
                    try { dbg.enterDecision(10, decisionCanBacktrack[10]);

                    int LA10_0 = input.LA(1);

                    if ( ((LA10_0>=WS && LA10_0<=COMMENT)) ) {
                        alt10=1;
                    }
                    } finally {dbg.exitDecision(10);}

                    switch (alt10) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:44: ws
                            {
                            dbg.location(337,44);
                            pushFollow(FOLLOW_ws_in_namespace219);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(10);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(11);}

            dbg.location(337,50);
            pushFollow(FOLLOW_resourceIdentifier_in_namespace224);
            resourceIdentifier();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(337,69);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:69: ( ws )?
            int alt12=2;
            try { dbg.enterSubRule(12);
            try { dbg.enterDecision(12, decisionCanBacktrack[12]);

            int LA12_0 = input.LA(1);

            if ( ((LA12_0>=WS && LA12_0<=COMMENT)) ) {
                alt12=1;
            }
            } finally {dbg.exitDecision(12);}

            switch (alt12) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:69: ws
                    {
                    dbg.location(337,69);
                    pushFollow(FOLLOW_ws_in_namespace226);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(12);}

            dbg.location(337,73);
            match(input,SEMI,FOLLOW_SEMI_in_namespace229); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(338, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespace");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespace"


    // $ANTLR start "namespacePrefixName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:340:1: namespacePrefixName : IDENT ;
    public final void namespacePrefixName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespacePrefixName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(340, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:341:3: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:341:5: IDENT
            {
            dbg.location(341,5);
            match(input,IDENT,FOLLOW_IDENT_in_namespacePrefixName242); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(342, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespacePrefixName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespacePrefixName"


    // $ANTLR start "resourceIdentifier"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:344:1: resourceIdentifier : ( STRING | URI );
    public final void resourceIdentifier() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "resourceIdentifier");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(344, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:345:3: ( STRING | URI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(345,3);
            if ( (input.LA(1)>=STRING && input.LA(1)<=URI) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(346, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "resourceIdentifier");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "resourceIdentifier"


    // $ANTLR start "charSet"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:348:1: charSet : CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI ;
    public final void charSet() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "charSet");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(348, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:5: ( CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:9: CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI
            {
            dbg.location(349,9);
            match(input,CHARSET_SYM,FOLLOW_CHARSET_SYM_in_charSet276); if (state.failed) return ;
            dbg.location(349,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:21: ( ws )?
            int alt13=2;
            try { dbg.enterSubRule(13);
            try { dbg.enterDecision(13, decisionCanBacktrack[13]);

            int LA13_0 = input.LA(1);

            if ( ((LA13_0>=WS && LA13_0<=COMMENT)) ) {
                alt13=1;
            }
            } finally {dbg.exitDecision(13);}

            switch (alt13) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:21: ws
                    {
                    dbg.location(349,21);
                    pushFollow(FOLLOW_ws_in_charSet278);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(13);}

            dbg.location(349,25);
            pushFollow(FOLLOW_charSetValue_in_charSet281);
            charSetValue();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(349,38);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:38: ( ws )?
            int alt14=2;
            try { dbg.enterSubRule(14);
            try { dbg.enterDecision(14, decisionCanBacktrack[14]);

            int LA14_0 = input.LA(1);

            if ( ((LA14_0>=WS && LA14_0<=COMMENT)) ) {
                alt14=1;
            }
            } finally {dbg.exitDecision(14);}

            switch (alt14) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:38: ws
                    {
                    dbg.location(349,38);
                    pushFollow(FOLLOW_ws_in_charSet283);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(14);}

            dbg.location(349,42);
            match(input,SEMI,FOLLOW_SEMI_in_charSet286); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(350, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "charSet");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "charSet"


    // $ANTLR start "charSetValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:1: charSetValue : STRING ;
    public final void charSetValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "charSetValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(352, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:353:2: ( STRING )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:353:4: STRING
            {
            dbg.location(353,4);
            match(input,STRING,FOLLOW_STRING_in_charSetValue300); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(354, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "charSetValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "charSetValue"


    // $ANTLR start "imports"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:356:1: imports : ( importItem ( ws )? SEMI ( ws )? )+ ;
    public final void imports() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "imports");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(356, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:357:2: ( ( importItem ( ws )? SEMI ( ws )? )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:2: ( importItem ( ws )? SEMI ( ws )? )+
            {
            dbg.location(358,2);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:2: ( importItem ( ws )? SEMI ( ws )? )+
            int cnt17=0;
            try { dbg.enterSubRule(17);

            loop17:
            do {
                int alt17=2;
                try { dbg.enterDecision(17, decisionCanBacktrack[17]);

                try {
                    isCyclicDecision = true;
                    alt17 = dfa17.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(17);}

                switch (alt17) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:4: importItem ( ws )? SEMI ( ws )?
            	    {
            	    dbg.location(358,4);
            	    pushFollow(FOLLOW_importItem_in_imports314);
            	    importItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(358,15);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:15: ( ws )?
            	    int alt15=2;
            	    try { dbg.enterSubRule(15);
            	    try { dbg.enterDecision(15, decisionCanBacktrack[15]);

            	    int LA15_0 = input.LA(1);

            	    if ( ((LA15_0>=WS && LA15_0<=COMMENT)) ) {
            	        alt15=1;
            	    }
            	    } finally {dbg.exitDecision(15);}

            	    switch (alt15) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:15: ws
            	            {
            	            dbg.location(358,15);
            	            pushFollow(FOLLOW_ws_in_imports316);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(15);}

            	    dbg.location(358,19);
            	    match(input,SEMI,FOLLOW_SEMI_in_imports319); if (state.failed) return ;
            	    dbg.location(358,24);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:24: ( ws )?
            	    int alt16=2;
            	    try { dbg.enterSubRule(16);
            	    try { dbg.enterDecision(16, decisionCanBacktrack[16]);

            	    int LA16_0 = input.LA(1);

            	    if ( ((LA16_0>=WS && LA16_0<=COMMENT)) ) {
            	        alt16=1;
            	    }
            	    } finally {dbg.exitDecision(16);}

            	    switch (alt16) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:24: ws
            	            {
            	            dbg.location(358,24);
            	            pushFollow(FOLLOW_ws_in_imports321);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(16);}


            	    }
            	    break;

            	default :
            	    if ( cnt17 >= 1 ) break loop17;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(17, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt17++;
            } while (true);
            } finally {dbg.exitSubRule(17);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(359, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "imports");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "imports"


    // $ANTLR start "importItem"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:361:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? ( LPAREN LESS_IMPORT_TYPE RPAREN ( ws )? )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );
    public final void importItem() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "importItem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(361, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:362:5: ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? ( LPAREN LESS_IMPORT_TYPE RPAREN ( ws )? )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? )
            int alt32=3;
            try { dbg.enterDecision(32, decisionCanBacktrack[32]);

            try {
                isCyclicDecision = true;
                alt32 = dfa32.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(32);}

            switch (alt32) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:9: IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    {
                    dbg.location(363,9);
                    match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem347); if (state.failed) return ;
                    dbg.location(363,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:20: ( ws )?
                    int alt18=2;
                    try { dbg.enterSubRule(18);
                    try { dbg.enterDecision(18, decisionCanBacktrack[18]);

                    int LA18_0 = input.LA(1);

                    if ( ((LA18_0>=WS && LA18_0<=COMMENT)) ) {
                        alt18=1;
                    }
                    } finally {dbg.exitDecision(18);}

                    switch (alt18) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:20: ws
                            {
                            dbg.location(363,20);
                            pushFollow(FOLLOW_ws_in_importItem349);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(18);}

                    dbg.location(363,24);
                    pushFollow(FOLLOW_resourceIdentifier_in_importItem352);
                    resourceIdentifier();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(363,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:43: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    int alt20=2;
                    try { dbg.enterSubRule(20);
                    try { dbg.enterDecision(20, decisionCanBacktrack[20]);

                    try {
                        isCyclicDecision = true;
                        alt20 = dfa20.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(20);}

                    switch (alt20) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:44: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
                            {
                            dbg.location(363,66);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:66: ( ws )?
                            int alt19=2;
                            try { dbg.enterSubRule(19);
                            try { dbg.enterDecision(19, decisionCanBacktrack[19]);

                            int LA19_0 = input.LA(1);

                            if ( ((LA19_0>=WS && LA19_0<=COMMENT)) ) {
                                alt19=1;
                            }
                            } finally {dbg.exitDecision(19);}

                            switch (alt19) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:66: ws
                                    {
                                    dbg.location(363,66);
                                    pushFollow(FOLLOW_ws_in_importItem362);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(19);}

                            dbg.location(363,70);
                            pushFollow(FOLLOW_mediaQueryList_in_importItem365);
                            mediaQueryList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(20);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:9: {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    {
                    dbg.location(366,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "importItem", "isScssSource()");
                    }
                    dbg.location(366,27);
                    match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem398); if (state.failed) return ;
                    dbg.location(366,38);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:38: ( ws )?
                    int alt21=2;
                    try { dbg.enterSubRule(21);
                    try { dbg.enterDecision(21, decisionCanBacktrack[21]);

                    int LA21_0 = input.LA(1);

                    if ( ((LA21_0>=WS && LA21_0<=COMMENT)) ) {
                        alt21=1;
                    }
                    } finally {dbg.exitDecision(21);}

                    switch (alt21) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:38: ws
                            {
                            dbg.location(366,38);
                            pushFollow(FOLLOW_ws_in_importItem400);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(21);}

                    dbg.location(366,42);
                    pushFollow(FOLLOW_resourceIdentifier_in_importItem403);
                    resourceIdentifier();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(366,61);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*
                    try { dbg.enterSubRule(24);

                    loop24:
                    do {
                        int alt24=2;
                        try { dbg.enterDecision(24, decisionCanBacktrack[24]);

                        try {
                            isCyclicDecision = true;
                            alt24 = dfa24.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(24);}

                        switch (alt24) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:62: ( ws )? COMMA ( ws )? resourceIdentifier
                    	    {
                    	    dbg.location(366,62);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:62: ( ws )?
                    	    int alt22=2;
                    	    try { dbg.enterSubRule(22);
                    	    try { dbg.enterDecision(22, decisionCanBacktrack[22]);

                    	    int LA22_0 = input.LA(1);

                    	    if ( ((LA22_0>=WS && LA22_0<=COMMENT)) ) {
                    	        alt22=1;
                    	    }
                    	    } finally {dbg.exitDecision(22);}

                    	    switch (alt22) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:62: ws
                    	            {
                    	            dbg.location(366,62);
                    	            pushFollow(FOLLOW_ws_in_importItem406);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(22);}

                    	    dbg.location(366,66);
                    	    match(input,COMMA,FOLLOW_COMMA_in_importItem409); if (state.failed) return ;
                    	    dbg.location(366,72);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:72: ( ws )?
                    	    int alt23=2;
                    	    try { dbg.enterSubRule(23);
                    	    try { dbg.enterDecision(23, decisionCanBacktrack[23]);

                    	    int LA23_0 = input.LA(1);

                    	    if ( ((LA23_0>=WS && LA23_0<=COMMENT)) ) {
                    	        alt23=1;
                    	    }
                    	    } finally {dbg.exitDecision(23);}

                    	    switch (alt23) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:72: ws
                    	            {
                    	            dbg.location(366,72);
                    	            pushFollow(FOLLOW_ws_in_importItem411);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(23);}

                    	    dbg.location(366,76);
                    	    pushFollow(FOLLOW_resourceIdentifier_in_importItem414);
                    	    resourceIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop24;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(24);}

                    dbg.location(366,97);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:97: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    int alt26=2;
                    try { dbg.enterSubRule(26);
                    try { dbg.enterDecision(26, decisionCanBacktrack[26]);

                    try {
                        isCyclicDecision = true;
                        alt26 = dfa26.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(26);}

                    switch (alt26) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:98: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
                            {
                            dbg.location(366,120);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:120: ( ws )?
                            int alt25=2;
                            try { dbg.enterSubRule(25);
                            try { dbg.enterDecision(25, decisionCanBacktrack[25]);

                            int LA25_0 = input.LA(1);

                            if ( ((LA25_0>=WS && LA25_0<=COMMENT)) ) {
                                alt25=1;
                            }
                            } finally {dbg.exitDecision(25);}

                            switch (alt25) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:120: ws
                                    {
                                    dbg.location(366,120);
                                    pushFollow(FOLLOW_ws_in_importItem426);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(25);}

                            dbg.location(366,124);
                            pushFollow(FOLLOW_mediaQueryList_in_importItem429);
                            mediaQueryList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(26);}


                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:9: {...}? IMPORT_SYM ( ws )? ( LPAREN LESS_IMPORT_TYPE RPAREN ( ws )? )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    {
                    dbg.location(368,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "importItem", "isLessSource()");
                    }
                    dbg.location(368,27);
                    match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem453); if (state.failed) return ;
                    dbg.location(368,38);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:38: ( ws )?
                    int alt27=2;
                    try { dbg.enterSubRule(27);
                    try { dbg.enterDecision(27, decisionCanBacktrack[27]);

                    int LA27_0 = input.LA(1);

                    if ( ((LA27_0>=WS && LA27_0<=COMMENT)) ) {
                        alt27=1;
                    }
                    } finally {dbg.exitDecision(27);}

                    switch (alt27) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:38: ws
                            {
                            dbg.location(368,38);
                            pushFollow(FOLLOW_ws_in_importItem455);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(27);}

                    dbg.location(368,42);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:42: ( LPAREN LESS_IMPORT_TYPE RPAREN ( ws )? )?
                    int alt29=2;
                    try { dbg.enterSubRule(29);
                    try { dbg.enterDecision(29, decisionCanBacktrack[29]);

                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==LPAREN) ) {
                        alt29=1;
                    }
                    } finally {dbg.exitDecision(29);}

                    switch (alt29) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:43: LPAREN LESS_IMPORT_TYPE RPAREN ( ws )?
                            {
                            dbg.location(368,43);
                            match(input,LPAREN,FOLLOW_LPAREN_in_importItem459); if (state.failed) return ;
                            dbg.location(368,50);
                            match(input,LESS_IMPORT_TYPE,FOLLOW_LESS_IMPORT_TYPE_in_importItem461); if (state.failed) return ;
                            dbg.location(368,67);
                            match(input,RPAREN,FOLLOW_RPAREN_in_importItem463); if (state.failed) return ;
                            dbg.location(368,74);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:74: ( ws )?
                            int alt28=2;
                            try { dbg.enterSubRule(28);
                            try { dbg.enterDecision(28, decisionCanBacktrack[28]);

                            int LA28_0 = input.LA(1);

                            if ( ((LA28_0>=WS && LA28_0<=COMMENT)) ) {
                                alt28=1;
                            }
                            } finally {dbg.exitDecision(28);}

                            switch (alt28) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:74: ws
                                    {
                                    dbg.location(368,74);
                                    pushFollow(FOLLOW_ws_in_importItem465);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(28);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(29);}

                    dbg.location(368,80);
                    pushFollow(FOLLOW_resourceIdentifier_in_importItem470);
                    resourceIdentifier();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(368,99);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:99: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    int alt31=2;
                    try { dbg.enterSubRule(31);
                    try { dbg.enterDecision(31, decisionCanBacktrack[31]);

                    try {
                        isCyclicDecision = true;
                        alt31 = dfa31.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(31);}

                    switch (alt31) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:100: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
                            {
                            dbg.location(368,122);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:122: ( ws )?
                            int alt30=2;
                            try { dbg.enterSubRule(30);
                            try { dbg.enterDecision(30, decisionCanBacktrack[30]);

                            int LA30_0 = input.LA(1);

                            if ( ((LA30_0>=WS && LA30_0<=COMMENT)) ) {
                                alt30=1;
                            }
                            } finally {dbg.exitDecision(30);}

                            switch (alt30) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:122: ws
                                    {
                                    dbg.location(368,122);
                                    pushFollow(FOLLOW_ws_in_importItem480);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(30);}

                            dbg.location(368,126);
                            pushFollow(FOLLOW_mediaQueryList_in_importItem483);
                            mediaQueryList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(31);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(369, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "importItem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "importItem"


    // $ANTLR start "media"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:370:1: media : MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE ;
    public final void media() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "media");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(370, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:371:5: ( MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:371:7: MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE
            {
            dbg.location(371,7);
            match(input,MEDIA_SYM,FOLLOW_MEDIA_SYM_in_media501); if (state.failed) return ;
            dbg.location(371,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:371:17: ( ws )?
            int alt33=2;
            try { dbg.enterSubRule(33);
            try { dbg.enterDecision(33, decisionCanBacktrack[33]);

            int LA33_0 = input.LA(1);

            if ( ((LA33_0>=WS && LA33_0<=COMMENT)) ) {
                alt33=1;
            }
            } finally {dbg.exitDecision(33);}

            switch (alt33) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:371:17: ws
                    {
                    dbg.location(371,17);
                    pushFollow(FOLLOW_ws_in_media503);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(33);}

            dbg.location(372,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:5: ( mediaQueryList )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:10: mediaQueryList
            {
            dbg.location(373,10);
            pushFollow(FOLLOW_mediaQueryList_in_media521);
            mediaQueryList();

            state._fsp--;
            if (state.failed) return ;

            }

            dbg.location(374,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:374:7: ( ws )?
            int alt34=2;
            try { dbg.enterSubRule(34);
            try { dbg.enterDecision(34, decisionCanBacktrack[34]);

            int LA34_0 = input.LA(1);

            if ( ((LA34_0>=WS && LA34_0<=COMMENT)) ) {
                alt34=1;
            }
            } finally {dbg.exitDecision(34);}

            switch (alt34) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:374:7: ws
                    {
                    dbg.location(374,7);
                    pushFollow(FOLLOW_ws_in_media529);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(34);}

            dbg.location(375,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_media536); if (state.failed) return ;
            dbg.location(375,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:375:12: ( ws )?
            int alt35=2;
            try { dbg.enterSubRule(35);
            try { dbg.enterDecision(35, decisionCanBacktrack[35]);

            int LA35_0 = input.LA(1);

            if ( ((LA35_0>=WS && LA35_0<=COMMENT)) ) {
                alt35=1;
            }
            } finally {dbg.exitDecision(35);}

            switch (alt35) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:375:12: ws
                    {
                    dbg.location(375,12);
                    pushFollow(FOLLOW_ws_in_media538);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(35);}

            dbg.location(375,16);
            pushFollow(FOLLOW_syncToFollow_in_media541);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(376,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:376:9: ( mediaBody )?
            int alt36=2;
            try { dbg.enterSubRule(36);
            try { dbg.enterDecision(36, decisionCanBacktrack[36]);

            int LA36_0 = input.LA(1);

            if ( ((LA36_0>=NAMESPACE_SYM && LA36_0<=IDENT)||(LA36_0>=CHARSET_SYM && LA36_0<=COMMA)||LA36_0==MEDIA_SYM||(LA36_0>=GEN && LA36_0<=MOZ_DOCUMENT_SYM)||LA36_0==WEBKIT_KEYFRAMES_SYM||(LA36_0>=PAGE_SYM && LA36_0<=RIGHTBOTTOM_SYM)||(LA36_0>=MINUS && LA36_0<=PIPE)||LA36_0==LESS_AND||(LA36_0>=RBRACKET && LA36_0<=SASS_VAR)||(LA36_0>=SASS_CONTENT && LA36_0<=SASS_WHILE)||LA36_0==AT_SIGN) ) {
                alt36=1;
            }
            } finally {dbg.exitDecision(36);}

            switch (alt36) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:376:9: mediaBody
                    {
                    dbg.location(376,9);
                    pushFollow(FOLLOW_mediaBody_in_media551);
                    mediaBody();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(36);}

            dbg.location(377,5);
            match(input,RBRACE,FOLLOW_RBRACE_in_media558); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(378, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "media");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "media"


    // $ANTLR start "mediaBody"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:380:1: mediaBody : ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
    public final void mediaBody() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaBody");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(380, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:5: ( ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:382:5: ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            {
            dbg.location(382,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:382:5: ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            int cnt41=0;
            try { dbg.enterSubRule(41);

            loop41:
            do {
                int alt41=3;
                try { dbg.enterDecision(41, decisionCanBacktrack[41]);

                int LA41_0 = input.LA(1);

                if ( (LA41_0==NAMESPACE_SYM||LA41_0==IDENT||(LA41_0>=CHARSET_SYM && LA41_0<=COMMA)||LA41_0==MEDIA_SYM||(LA41_0>=GEN && LA41_0<=MOZ_DOCUMENT_SYM)||LA41_0==WEBKIT_KEYFRAMES_SYM||(LA41_0>=PAGE_SYM && LA41_0<=RIGHTBOTTOM_SYM)||(LA41_0>=MINUS && LA41_0<=PIPE)||LA41_0==LESS_AND||(LA41_0>=RBRACKET && LA41_0<=SASS_VAR)||(LA41_0>=SASS_CONTENT && LA41_0<=SASS_WHILE)||LA41_0==AT_SIGN) ) {
                    alt41=1;
                }
                else if ( (LA41_0==SEMI) ) {
                    alt41=2;
                }


                } finally {dbg.exitDecision(41);}

                switch (alt41) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:10: ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    {
            	    dbg.location(383,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:10: ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:12: mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
            	    {
            	    dbg.location(383,12);
            	    pushFollow(FOLLOW_mediaBodyItem_in_mediaBody592);
            	    mediaBodyItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(383,26);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:26: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
            	    int alt38=2;
            	    try { dbg.enterSubRule(38);
            	    try { dbg.enterDecision(38, decisionCanBacktrack[38]);

            	    try {
            	        isCyclicDecision = true;
            	        alt38 = dfa38.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(38);}

            	    switch (alt38) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:27: ( ( ws )? SEMI )=> ( ws )? SEMI
            	            {
            	            dbg.location(383,39);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:39: ( ws )?
            	            int alt37=2;
            	            try { dbg.enterSubRule(37);
            	            try { dbg.enterDecision(37, decisionCanBacktrack[37]);

            	            int LA37_0 = input.LA(1);

            	            if ( ((LA37_0>=WS && LA37_0<=COMMENT)) ) {
            	                alt37=1;
            	            }
            	            } finally {dbg.exitDecision(37);}

            	            switch (alt37) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:39: ws
            	                    {
            	                    dbg.location(383,39);
            	                    pushFollow(FOLLOW_ws_in_mediaBody602);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(37);}

            	            dbg.location(383,43);
            	            match(input,SEMI,FOLLOW_SEMI_in_mediaBody605); if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(38);}

            	    dbg.location(383,50);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:50: ( ws )?
            	    int alt39=2;
            	    try { dbg.enterSubRule(39);
            	    try { dbg.enterDecision(39, decisionCanBacktrack[39]);

            	    int LA39_0 = input.LA(1);

            	    if ( ((LA39_0>=WS && LA39_0<=COMMENT)) ) {
            	        alt39=1;
            	    }
            	    } finally {dbg.exitDecision(39);}

            	    switch (alt39) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:50: ws
            	            {
            	            dbg.location(383,50);
            	            pushFollow(FOLLOW_ws_in_mediaBody609);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(39);}


            	    }


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:10: ( SEMI ( ws )? )
            	    {
            	    dbg.location(385,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:10: ( SEMI ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:12: SEMI ( ws )?
            	    {
            	    dbg.location(385,12);
            	    match(input,SEMI,FOLLOW_SEMI_in_mediaBody636); if (state.failed) return ;
            	    dbg.location(385,17);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:17: ( ws )?
            	    int alt40=2;
            	    try { dbg.enterSubRule(40);
            	    try { dbg.enterDecision(40, decisionCanBacktrack[40]);

            	    int LA40_0 = input.LA(1);

            	    if ( ((LA40_0>=WS && LA40_0<=COMMENT)) ) {
            	        alt40=1;
            	    }
            	    } finally {dbg.exitDecision(40);}

            	    switch (alt40) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:17: ws
            	            {
            	            dbg.location(385,17);
            	            pushFollow(FOLLOW_ws_in_mediaBody638);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(40);}


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt41 >= 1 ) break loop41;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(41, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt41++;
            } while (true);
            } finally {dbg.exitSubRule(41);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(387, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaBody");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaBody"


    // $ANTLR start "mediaBodyItem"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:1: mediaBodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | {...}? sass_extend | {...}? sass_debug | {...}? sass_control | {...}? sass_content | {...}? importItem | rule | page | fontFace | vendorAtRule | media );
    public final void mediaBodyItem() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaBodyItem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(389, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:390:5: ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | {...}? sass_extend | {...}? sass_debug | {...}? sass_control | {...}? sass_content | {...}? importItem | rule | page | fontFace | vendorAtRule | media )
            int alt46=15;
            try { dbg.enterDecision(46, decisionCanBacktrack[46]);

            try {
                isCyclicDecision = true;
                alt46 = dfa46.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(46);}

            switch (alt46) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:5: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration
                    {
                    dbg.location(391,85);
                    pushFollow(FOLLOW_cp_mixin_declaration_in_mediaBodyItem704);
                    cp_mixin_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
                    {
                    dbg.location(393,55);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isLessSource()");
                    }
                    dbg.location(393,73);
                    pushFollow(FOLLOW_cp_mixin_call_in_mediaBodyItem737);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(393,87);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:87: ( ( ws )? IMPORTANT_SYM )?
                    int alt43=2;
                    try { dbg.enterSubRule(43);
                    try { dbg.enterDecision(43, decisionCanBacktrack[43]);

                    try {
                        isCyclicDecision = true;
                        alt43 = dfa43.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(43);}

                    switch (alt43) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:88: ( ws )? IMPORTANT_SYM
                            {
                            dbg.location(393,88);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:88: ( ws )?
                            int alt42=2;
                            try { dbg.enterSubRule(42);
                            try { dbg.enterDecision(42, decisionCanBacktrack[42]);

                            int LA42_0 = input.LA(1);

                            if ( ((LA42_0>=WS && LA42_0<=COMMENT)) ) {
                                alt42=1;
                            }
                            } finally {dbg.exitDecision(42);}

                            switch (alt42) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:88: ws
                                    {
                                    dbg.location(393,88);
                                    pushFollow(FOLLOW_ws_in_mediaBodyItem740);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(42);}

                            dbg.location(393,92);
                            match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_mediaBodyItem743); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(43);}


                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:7: ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
                    {
                    dbg.location(394,25);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(394,43);
                    pushFollow(FOLLOW_cp_mixin_call_in_mediaBodyItem760);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(394,57);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:57: ( ( ws )? IMPORTANT_SYM )?
                    int alt45=2;
                    try { dbg.enterSubRule(45);
                    try { dbg.enterDecision(45, decisionCanBacktrack[45]);

                    try {
                        isCyclicDecision = true;
                        alt45 = dfa45.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(45);}

                    switch (alt45) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:58: ( ws )? IMPORTANT_SYM
                            {
                            dbg.location(394,58);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:58: ( ws )?
                            int alt44=2;
                            try { dbg.enterSubRule(44);
                            try { dbg.enterDecision(44, decisionCanBacktrack[44]);

                            int LA44_0 = input.LA(1);

                            if ( ((LA44_0>=WS && LA44_0<=COMMENT)) ) {
                                alt44=1;
                            }
                            } finally {dbg.exitDecision(44);}

                            switch (alt44) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:58: ws
                                    {
                                    dbg.location(394,58);
                                    pushFollow(FOLLOW_ws_in_mediaBodyItem763);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(44);}

                            dbg.location(394,62);
                            match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_mediaBodyItem766); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(45);}


                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:6: ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration
                    {
                    dbg.location(395,74);
                    pushFollow(FOLLOW_propertyDeclaration_in_mediaBodyItem805);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:6: ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration
                    {
                    dbg.location(396,87);
                    pushFollow(FOLLOW_propertyDeclaration_in_mediaBodyItem832);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:397:7: {...}? sass_extend
                    {
                    dbg.location(397,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(397,25);
                    pushFollow(FOLLOW_sass_extend_in_mediaBodyItem842);
                    sass_extend();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:398:7: {...}? sass_debug
                    {
                    dbg.location(398,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(398,25);
                    pushFollow(FOLLOW_sass_debug_in_mediaBodyItem852);
                    sass_debug();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:399:7: {...}? sass_control
                    {
                    dbg.location(399,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(399,25);
                    pushFollow(FOLLOW_sass_control_in_mediaBodyItem862);
                    sass_control();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:400:7: {...}? sass_content
                    {
                    dbg.location(400,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(400,25);
                    pushFollow(FOLLOW_sass_content_in_mediaBodyItem872);
                    sass_content();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:7: {...}? importItem
                    {
                    dbg.location(401,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isCssPreprocessorSource()");
                    }
                    dbg.location(401,36);
                    pushFollow(FOLLOW_importItem_in_mediaBodyItem882);
                    importItem();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:7: rule
                    {
                    dbg.location(402,7);
                    pushFollow(FOLLOW_rule_in_mediaBodyItem890);
                    rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:403:7: page
                    {
                    dbg.location(403,7);
                    pushFollow(FOLLOW_page_in_mediaBodyItem898);
                    page();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:404:7: fontFace
                    {
                    dbg.location(404,7);
                    pushFollow(FOLLOW_fontFace_in_mediaBodyItem906);
                    fontFace();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:405:7: vendorAtRule
                    {
                    dbg.location(405,7);
                    pushFollow(FOLLOW_vendorAtRule_in_mediaBodyItem914);
                    vendorAtRule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:407:7: media
                    {
                    dbg.location(407,7);
                    pushFollow(FOLLOW_media_in_mediaBodyItem927);
                    media();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(408, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaBodyItem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaBodyItem"


    // $ANTLR start "mediaQueryList"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:1: mediaQueryList : mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )* ;
    public final void mediaQueryList() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQueryList");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(410, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:2: ( mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:4: mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*
            {
            dbg.location(411,4);
            pushFollow(FOLLOW_mediaQuery_in_mediaQueryList941);
            mediaQuery();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(411,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:15: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*
            try { dbg.enterSubRule(49);

            loop49:
            do {
                int alt49=2;
                try { dbg.enterDecision(49, decisionCanBacktrack[49]);

                try {
                    isCyclicDecision = true;
                    alt49 = dfa49.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(49);}

                switch (alt49) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:17: ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery
            	    {
            	    dbg.location(411,31);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:31: ( ws )?
            	    int alt47=2;
            	    try { dbg.enterSubRule(47);
            	    try { dbg.enterDecision(47, decisionCanBacktrack[47]);

            	    int LA47_0 = input.LA(1);

            	    if ( ((LA47_0>=WS && LA47_0<=COMMENT)) ) {
            	        alt47=1;
            	    }
            	    } finally {dbg.exitDecision(47);}

            	    switch (alt47) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:31: ws
            	            {
            	            dbg.location(411,31);
            	            pushFollow(FOLLOW_ws_in_mediaQueryList953);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(47);}

            	    dbg.location(411,35);
            	    match(input,COMMA,FOLLOW_COMMA_in_mediaQueryList956); if (state.failed) return ;
            	    dbg.location(411,41);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:41: ( ws )?
            	    int alt48=2;
            	    try { dbg.enterSubRule(48);
            	    try { dbg.enterDecision(48, decisionCanBacktrack[48]);

            	    int LA48_0 = input.LA(1);

            	    if ( ((LA48_0>=WS && LA48_0<=COMMENT)) ) {
            	        alt48=1;
            	    }
            	    } finally {dbg.exitDecision(48);}

            	    switch (alt48) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:41: ws
            	            {
            	            dbg.location(411,41);
            	            pushFollow(FOLLOW_ws_in_mediaQueryList958);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(48);}

            	    dbg.location(411,45);
            	    pushFollow(FOLLOW_mediaQuery_in_mediaQueryList961);
            	    mediaQuery();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);
            } finally {dbg.exitSubRule(49);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(412, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQueryList");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQueryList"


    // $ANTLR start "mediaQuery"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:1: mediaQuery : ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )* | mediaExpression ( ( ws )? AND ( ws )? mediaExpression )* | {...}? cp_variable );
    public final void mediaQuery() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQuery");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(414, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:415:2: ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )* | mediaExpression ( ( ws )? AND ( ws )? mediaExpression )* | {...}? cp_variable )
            int alt58=3;
            try { dbg.enterDecision(58, decisionCanBacktrack[58]);

            switch ( input.LA(1) ) {
            case IDENT:
            case ONLY:
            case NOT:
            case GEN:
            case HASH_SYMBOL:
                {
                alt58=1;
                }
                break;
            case LPAREN:
                {
                alt58=2;
                }
                break;
            case NAMESPACE_SYM:
            case CHARSET_SYM:
            case IMPORT_SYM:
            case MEDIA_SYM:
            case AT_IDENT:
            case MOZ_DOCUMENT_SYM:
            case WEBKIT_KEYFRAMES_SYM:
            case PAGE_SYM:
            case COUNTER_STYLE_SYM:
            case FONT_FACE_SYM:
            case TOPLEFTCORNER_SYM:
            case TOPLEFT_SYM:
            case TOPCENTER_SYM:
            case TOPRIGHT_SYM:
            case TOPRIGHTCORNER_SYM:
            case BOTTOMLEFTCORNER_SYM:
            case BOTTOMLEFT_SYM:
            case BOTTOMCENTER_SYM:
            case BOTTOMRIGHT_SYM:
            case BOTTOMRIGHTCORNER_SYM:
            case LEFTTOP_SYM:
            case LEFTMIDDLE_SYM:
            case LEFTBOTTOM_SYM:
            case RIGHTTOP_SYM:
            case RIGHTMIDDLE_SYM:
            case RIGHTBOTTOM_SYM:
            case SASS_AT_ROOT:
            case SASS_VAR:
            case SASS_CONTENT:
            case SASS_MIXIN:
            case SASS_INCLUDE:
            case SASS_EXTEND:
            case SASS_DEBUG:
            case SASS_WARN:
            case SASS_IF:
            case SASS_ELSE:
            case SASS_FOR:
            case SASS_FUNCTION:
            case SASS_RETURN:
            case SASS_EACH:
            case SASS_WHILE:
                {
                alt58=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(58);}

            switch (alt58) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:5: ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )*
                    {
                    dbg.location(416,5);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:5: ( mediaQueryOperator ( ws )? )?
                    int alt51=2;
                    try { dbg.enterSubRule(51);
                    try { dbg.enterDecision(51, decisionCanBacktrack[51]);

                    int LA51_0 = input.LA(1);

                    if ( ((LA51_0>=ONLY && LA51_0<=NOT)) ) {
                        alt51=1;
                    }
                    } finally {dbg.exitDecision(51);}

                    switch (alt51) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:6: mediaQueryOperator ( ws )?
                            {
                            dbg.location(416,6);
                            pushFollow(FOLLOW_mediaQueryOperator_in_mediaQuery980);
                            mediaQueryOperator();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(416,25);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:25: ( ws )?
                            int alt50=2;
                            try { dbg.enterSubRule(50);
                            try { dbg.enterDecision(50, decisionCanBacktrack[50]);

                            int LA50_0 = input.LA(1);

                            if ( ((LA50_0>=WS && LA50_0<=COMMENT)) ) {
                                alt50=1;
                            }
                            } finally {dbg.exitDecision(50);}

                            switch (alt50) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:25: ws
                                    {
                                    dbg.location(416,25);
                                    pushFollow(FOLLOW_ws_in_mediaQuery982);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(50);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(51);}

                    dbg.location(416,33);
                    pushFollow(FOLLOW_mediaType_in_mediaQuery989);
                    mediaType();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(416,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:43: ( ( ws )? AND ( ws )? mediaExpression )*
                    try { dbg.enterSubRule(54);

                    loop54:
                    do {
                        int alt54=2;
                        try { dbg.enterDecision(54, decisionCanBacktrack[54]);

                        try {
                            isCyclicDecision = true;
                            alt54 = dfa54.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(54);}

                        switch (alt54) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:45: ( ws )? AND ( ws )? mediaExpression
                    	    {
                    	    dbg.location(416,45);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:45: ( ws )?
                    	    int alt52=2;
                    	    try { dbg.enterSubRule(52);
                    	    try { dbg.enterDecision(52, decisionCanBacktrack[52]);

                    	    int LA52_0 = input.LA(1);

                    	    if ( ((LA52_0>=WS && LA52_0<=COMMENT)) ) {
                    	        alt52=1;
                    	    }
                    	    } finally {dbg.exitDecision(52);}

                    	    switch (alt52) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:45: ws
                    	            {
                    	            dbg.location(416,45);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery993);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(52);}

                    	    dbg.location(416,49);
                    	    match(input,AND,FOLLOW_AND_in_mediaQuery996); if (state.failed) return ;
                    	    dbg.location(416,53);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:53: ( ws )?
                    	    int alt53=2;
                    	    try { dbg.enterSubRule(53);
                    	    try { dbg.enterDecision(53, decisionCanBacktrack[53]);

                    	    int LA53_0 = input.LA(1);

                    	    if ( ((LA53_0>=WS && LA53_0<=COMMENT)) ) {
                    	        alt53=1;
                    	    }
                    	    } finally {dbg.exitDecision(53);}

                    	    switch (alt53) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:53: ws
                    	            {
                    	            dbg.location(416,53);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery998);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(53);}

                    	    dbg.location(416,57);
                    	    pushFollow(FOLLOW_mediaExpression_in_mediaQuery1001);
                    	    mediaExpression();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop54;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(54);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:7: mediaExpression ( ( ws )? AND ( ws )? mediaExpression )*
                    {
                    dbg.location(417,7);
                    pushFollow(FOLLOW_mediaExpression_in_mediaQuery1012);
                    mediaExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(417,23);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:23: ( ( ws )? AND ( ws )? mediaExpression )*
                    try { dbg.enterSubRule(57);

                    loop57:
                    do {
                        int alt57=2;
                        try { dbg.enterDecision(57, decisionCanBacktrack[57]);

                        try {
                            isCyclicDecision = true;
                            alt57 = dfa57.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(57);}

                        switch (alt57) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:25: ( ws )? AND ( ws )? mediaExpression
                    	    {
                    	    dbg.location(417,25);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:25: ( ws )?
                    	    int alt55=2;
                    	    try { dbg.enterSubRule(55);
                    	    try { dbg.enterDecision(55, decisionCanBacktrack[55]);

                    	    int LA55_0 = input.LA(1);

                    	    if ( ((LA55_0>=WS && LA55_0<=COMMENT)) ) {
                    	        alt55=1;
                    	    }
                    	    } finally {dbg.exitDecision(55);}

                    	    switch (alt55) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:25: ws
                    	            {
                    	            dbg.location(417,25);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery1016);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(55);}

                    	    dbg.location(417,29);
                    	    match(input,AND,FOLLOW_AND_in_mediaQuery1019); if (state.failed) return ;
                    	    dbg.location(417,33);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:33: ( ws )?
                    	    int alt56=2;
                    	    try { dbg.enterSubRule(56);
                    	    try { dbg.enterDecision(56, decisionCanBacktrack[56]);

                    	    int LA56_0 = input.LA(1);

                    	    if ( ((LA56_0>=WS && LA56_0<=COMMENT)) ) {
                    	        alt56=1;
                    	    }
                    	    } finally {dbg.exitDecision(56);}

                    	    switch (alt56) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:33: ws
                    	            {
                    	            dbg.location(417,33);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery1021);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(56);}

                    	    dbg.location(417,37);
                    	    pushFollow(FOLLOW_mediaExpression_in_mediaQuery1024);
                    	    mediaExpression();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop57;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(57);}


                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:418:7: {...}? cp_variable
                    {
                    dbg.location(418,7);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaQuery", "isLessSource()");
                    }
                    dbg.location(418,25);
                    pushFollow(FOLLOW_cp_variable_in_mediaQuery1037);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(419, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQuery");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQuery"


    // $ANTLR start "mediaQueryOperator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:1: mediaQueryOperator : ( ONLY | NOT );
    public final void mediaQueryOperator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQueryOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(421, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:3: ( ONLY | NOT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(422,3);
            if ( (input.LA(1)>=ONLY && input.LA(1)<=NOT) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(423, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQueryOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQueryOperator"


    // $ANTLR start "mediaType"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:425:1: mediaType : ( IDENT | GEN | {...}? sass_interpolation_expression_var );
    public final void mediaType() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaType");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(425, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:2: ( IDENT | GEN | {...}? sass_interpolation_expression_var )
            int alt59=3;
            try { dbg.enterDecision(59, decisionCanBacktrack[59]);

            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt59=1;
                }
                break;
            case GEN:
                {
                alt59=2;
                }
                break;
            case HASH_SYMBOL:
                {
                alt59=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(59);}

            switch (alt59) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:4: IDENT
                    {
                    dbg.location(426,4);
                    match(input,IDENT,FOLLOW_IDENT_in_mediaType1065); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:12: GEN
                    {
                    dbg.location(426,12);
                    match(input,GEN,FOLLOW_GEN_in_mediaType1069); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:18: {...}? sass_interpolation_expression_var
                    {
                    dbg.location(426,18);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaType", "isCssPreprocessorSource()");
                    }
                    dbg.location(426,47);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaType1075);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(427, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaType");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaType"


    // $ANTLR start "mediaExpression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:429:1: mediaExpression : LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN ;
    public final void mediaExpression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(429, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:430:5: ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:5: LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN
            {
            dbg.location(431,5);
            match(input,LPAREN,FOLLOW_LPAREN_in_mediaExpression1093); if (state.failed) return ;
            dbg.location(431,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:12: ( ws )?
            int alt60=2;
            try { dbg.enterSubRule(60);
            try { dbg.enterDecision(60, decisionCanBacktrack[60]);

            int LA60_0 = input.LA(1);

            if ( ((LA60_0>=WS && LA60_0<=COMMENT)) ) {
                alt60=1;
            }
            } finally {dbg.exitDecision(60);}

            switch (alt60) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:12: ws
                    {
                    dbg.location(431,12);
                    pushFollow(FOLLOW_ws_in_mediaExpression1095);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(60);}

            dbg.location(431,16);
            pushFollow(FOLLOW_mediaFeature_in_mediaExpression1098);
            mediaFeature();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(431,29);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:29: ( mediaFeatureValue )?
            int alt61=2;
            try { dbg.enterSubRule(61);
            try { dbg.enterDecision(61, decisionCanBacktrack[61]);

            try {
                isCyclicDecision = true;
                alt61 = dfa61.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(61);}

            switch (alt61) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:29: mediaFeatureValue
                    {
                    dbg.location(431,29);
                    pushFollow(FOLLOW_mediaFeatureValue_in_mediaExpression1100);
                    mediaFeatureValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(61);}

            dbg.location(431,48);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:48: ( ws )?
            int alt62=2;
            try { dbg.enterSubRule(62);
            try { dbg.enterDecision(62, decisionCanBacktrack[62]);

            int LA62_0 = input.LA(1);

            if ( ((LA62_0>=WS && LA62_0<=COMMENT)) ) {
                alt62=1;
            }
            } finally {dbg.exitDecision(62);}

            switch (alt62) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:48: ws
                    {
                    dbg.location(431,48);
                    pushFollow(FOLLOW_ws_in_mediaExpression1103);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(62);}

            dbg.location(431,52);
            match(input,RPAREN,FOLLOW_RPAREN_in_mediaExpression1106); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(432, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaExpression"


    // $ANTLR start "mediaFeatureValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:434:1: mediaFeatureValue : ( ws )? COLON ( ws )? ({...}? cp_expression | expression ) ;
    public final void mediaFeatureValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaFeatureValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(434, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:435:5: ( ( ws )? COLON ( ws )? ({...}? cp_expression | expression ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:436:5: ( ws )? COLON ( ws )? ({...}? cp_expression | expression )
            {
            dbg.location(436,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:436:5: ( ws )?
            int alt63=2;
            try { dbg.enterSubRule(63);
            try { dbg.enterDecision(63, decisionCanBacktrack[63]);

            int LA63_0 = input.LA(1);

            if ( ((LA63_0>=WS && LA63_0<=COMMENT)) ) {
                alt63=1;
            }
            } finally {dbg.exitDecision(63);}

            switch (alt63) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:436:5: ws
                    {
                    dbg.location(436,5);
                    pushFollow(FOLLOW_ws_in_mediaFeatureValue1127);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(63);}

            dbg.location(436,9);
            match(input,COLON,FOLLOW_COLON_in_mediaFeatureValue1130); if (state.failed) return ;
            dbg.location(436,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:436:15: ( ws )?
            int alt64=2;
            try { dbg.enterSubRule(64);
            try { dbg.enterDecision(64, decisionCanBacktrack[64]);

            int LA64_0 = input.LA(1);

            if ( ((LA64_0>=WS && LA64_0<=COMMENT)) ) {
                alt64=1;
            }
            } finally {dbg.exitDecision(64);}

            switch (alt64) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:436:15: ws
                    {
                    dbg.location(436,15);
                    pushFollow(FOLLOW_ws_in_mediaFeatureValue1132);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(64);}

            dbg.location(437,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:437:5: ({...}? cp_expression | expression )
            int alt65=2;
            try { dbg.enterSubRule(65);
            try { dbg.enterDecision(65, decisionCanBacktrack[65]);

            try {
                isCyclicDecision = true;
                alt65 = dfa65.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(65);}

            switch (alt65) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:9: {...}? cp_expression
                    {
                    dbg.location(438,9);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaFeatureValue", "isCssPreprocessorSource()");
                    }
                    dbg.location(438,38);
                    pushFollow(FOLLOW_cp_expression_in_mediaFeatureValue1151);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:440:9: expression
                    {
                    dbg.location(440,9);
                    pushFollow(FOLLOW_expression_in_mediaFeatureValue1171);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(65);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(442, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaFeatureValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaFeatureValue"


    // $ANTLR start "mediaFeature"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:1: mediaFeature : ( IDENT | GEN | {...}? ( cp_variable | sass_interpolation_expression_var ) );
    public final void mediaFeature() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaFeature");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(444, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:2: ( IDENT | GEN | {...}? ( cp_variable | sass_interpolation_expression_var ) )
            int alt67=3;
            try { dbg.enterDecision(67, decisionCanBacktrack[67]);

            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt67=1;
                }
                break;
            case GEN:
                {
                alt67=2;
                }
                break;
            case NAMESPACE_SYM:
            case CHARSET_SYM:
            case IMPORT_SYM:
            case MEDIA_SYM:
            case AT_IDENT:
            case MOZ_DOCUMENT_SYM:
            case WEBKIT_KEYFRAMES_SYM:
            case PAGE_SYM:
            case COUNTER_STYLE_SYM:
            case FONT_FACE_SYM:
            case TOPLEFTCORNER_SYM:
            case TOPLEFT_SYM:
            case TOPCENTER_SYM:
            case TOPRIGHT_SYM:
            case TOPRIGHTCORNER_SYM:
            case BOTTOMLEFTCORNER_SYM:
            case BOTTOMLEFT_SYM:
            case BOTTOMCENTER_SYM:
            case BOTTOMRIGHT_SYM:
            case BOTTOMRIGHTCORNER_SYM:
            case LEFTTOP_SYM:
            case LEFTMIDDLE_SYM:
            case LEFTBOTTOM_SYM:
            case RIGHTTOP_SYM:
            case RIGHTMIDDLE_SYM:
            case RIGHTBOTTOM_SYM:
            case SASS_AT_ROOT:
            case HASH_SYMBOL:
            case SASS_VAR:
            case SASS_CONTENT:
            case SASS_MIXIN:
            case SASS_INCLUDE:
            case SASS_EXTEND:
            case SASS_DEBUG:
            case SASS_WARN:
            case SASS_IF:
            case SASS_ELSE:
            case SASS_FOR:
            case SASS_FUNCTION:
            case SASS_RETURN:
            case SASS_EACH:
            case SASS_WHILE:
                {
                alt67=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(67);}

            switch (alt67) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:4: IDENT
                    {
                    dbg.location(445,4);
                    match(input,IDENT,FOLLOW_IDENT_in_mediaFeature1191); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:12: GEN
                    {
                    dbg.location(445,12);
                    match(input,GEN,FOLLOW_GEN_in_mediaFeature1195); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:18: {...}? ( cp_variable | sass_interpolation_expression_var )
                    {
                    dbg.location(445,18);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaFeature", "isCssPreprocessorSource()");
                    }
                    dbg.location(445,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:47: ( cp_variable | sass_interpolation_expression_var )
                    int alt66=2;
                    try { dbg.enterSubRule(66);
                    try { dbg.enterDecision(66, decisionCanBacktrack[66]);

                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==NAMESPACE_SYM||(LA66_0>=CHARSET_SYM && LA66_0<=IMPORT_SYM)||LA66_0==MEDIA_SYM||(LA66_0>=AT_IDENT && LA66_0<=MOZ_DOCUMENT_SYM)||LA66_0==WEBKIT_KEYFRAMES_SYM||(LA66_0>=PAGE_SYM && LA66_0<=RIGHTBOTTOM_SYM)||LA66_0==SASS_AT_ROOT||LA66_0==SASS_VAR||(LA66_0>=SASS_CONTENT && LA66_0<=SASS_WHILE)) ) {
                        alt66=1;
                    }
                    else if ( (LA66_0==HASH_SYMBOL) ) {
                        alt66=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 66, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(66);}

                    switch (alt66) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:49: cp_variable
                            {
                            dbg.location(445,49);
                            pushFollow(FOLLOW_cp_variable_in_mediaFeature1203);
                            cp_variable();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:63: sass_interpolation_expression_var
                            {
                            dbg.location(445,63);
                            pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaFeature1207);
                            sass_interpolation_expression_var();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(66);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(446, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaFeature");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaFeature"


    // $ANTLR start "body"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:2: body : ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
    public final void body() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "body");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(448, 2);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:449:5: ( ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:450:5: ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            {
            dbg.location(450,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:450:5: ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            int cnt72=0;
            try { dbg.enterSubRule(72);

            loop72:
            do {
                int alt72=3;
                try { dbg.enterDecision(72, decisionCanBacktrack[72]);

                int LA72_0 = input.LA(1);

                if ( (LA72_0==NAMESPACE_SYM||LA72_0==IDENT||(LA72_0>=CHARSET_SYM && LA72_0<=COMMA)||LA72_0==MEDIA_SYM||(LA72_0>=GEN && LA72_0<=MOZ_DOCUMENT_SYM)||LA72_0==WEBKIT_KEYFRAMES_SYM||(LA72_0>=PAGE_SYM && LA72_0<=RIGHTBOTTOM_SYM)||(LA72_0>=MINUS && LA72_0<=PIPE)||LA72_0==LESS_AND||(LA72_0>=RBRACKET && LA72_0<=SASS_VAR)||(LA72_0>=SASS_CONTENT && LA72_0<=SASS_WHILE)||LA72_0==AT_SIGN) ) {
                    alt72=1;
                }
                else if ( (LA72_0==SEMI) ) {
                    alt72=2;
                }


                } finally {dbg.exitDecision(72);}

                switch (alt72) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:10: ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    {
            	    dbg.location(451,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:10: ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:12: bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
            	    {
            	    dbg.location(451,12);
            	    pushFollow(FOLLOW_bodyItem_in_body1241);
            	    bodyItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(451,21);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:21: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
            	    int alt69=2;
            	    try { dbg.enterSubRule(69);
            	    try { dbg.enterDecision(69, decisionCanBacktrack[69]);

            	    try {
            	        isCyclicDecision = true;
            	        alt69 = dfa69.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(69);}

            	    switch (alt69) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:22: ( ( ws )? SEMI )=> ( ws )? SEMI
            	            {
            	            dbg.location(451,34);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:34: ( ws )?
            	            int alt68=2;
            	            try { dbg.enterSubRule(68);
            	            try { dbg.enterDecision(68, decisionCanBacktrack[68]);

            	            int LA68_0 = input.LA(1);

            	            if ( ((LA68_0>=WS && LA68_0<=COMMENT)) ) {
            	                alt68=1;
            	            }
            	            } finally {dbg.exitDecision(68);}

            	            switch (alt68) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:34: ws
            	                    {
            	                    dbg.location(451,34);
            	                    pushFollow(FOLLOW_ws_in_body1251);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(68);}

            	            dbg.location(451,38);
            	            match(input,SEMI,FOLLOW_SEMI_in_body1254); if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(69);}

            	    dbg.location(451,45);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:45: ( ws )?
            	    int alt70=2;
            	    try { dbg.enterSubRule(70);
            	    try { dbg.enterDecision(70, decisionCanBacktrack[70]);

            	    int LA70_0 = input.LA(1);

            	    if ( ((LA70_0>=WS && LA70_0<=COMMENT)) ) {
            	        alt70=1;
            	    }
            	    } finally {dbg.exitDecision(70);}

            	    switch (alt70) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:45: ws
            	            {
            	            dbg.location(451,45);
            	            pushFollow(FOLLOW_ws_in_body1258);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(70);}


            	    }


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:10: ( SEMI ( ws )? )
            	    {
            	    dbg.location(453,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:10: ( SEMI ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:12: SEMI ( ws )?
            	    {
            	    dbg.location(453,12);
            	    match(input,SEMI,FOLLOW_SEMI_in_body1285); if (state.failed) return ;
            	    dbg.location(453,17);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:17: ( ws )?
            	    int alt71=2;
            	    try { dbg.enterSubRule(71);
            	    try { dbg.enterDecision(71, decisionCanBacktrack[71]);

            	    int LA71_0 = input.LA(1);

            	    if ( ((LA71_0>=WS && LA71_0<=COMMENT)) ) {
            	        alt71=1;
            	    }
            	    } finally {dbg.exitDecision(71);}

            	    switch (alt71) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:17: ws
            	            {
            	            dbg.location(453,17);
            	            pushFollow(FOLLOW_ws_in_body1287);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(71);}


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt72 >= 1 ) break loop72;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(72, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt72++;
            } while (true);
            } finally {dbg.exitSubRule(72);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(455, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "body");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "body"


    // $ANTLR start "bodyItem"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:457:1: bodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call | ( cp_mixin_call )=>{...}? cp_mixin_call | rule | ( sass_map )=> sass_map | ( cp_variable ( ws )? COLON )=> cp_variable_declaration | at_rule | {...}? importItem | {...}? sass_debug | {...}? sass_control | {...}? sass_function_declaration );
    public final void bodyItem() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "bodyItem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(457, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:458:5: ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call | ( cp_mixin_call )=>{...}? cp_mixin_call | rule | ( sass_map )=> sass_map | ( cp_variable ( ws )? COLON )=> cp_variable_declaration | at_rule | {...}? importItem | {...}? sass_debug | {...}? sass_control | {...}? sass_function_declaration )
            int alt73=11;
            try { dbg.enterDecision(73, decisionCanBacktrack[73]);

            try {
                isCyclicDecision = true;
                alt73 = dfa73.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(73);}

            switch (alt73) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:9: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration
                    {
                    dbg.location(459,96);
                    pushFollow(FOLLOW_cp_mixin_declaration_in_bodyItem1359);
                    cp_mixin_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:461:11: ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call
                    {
                    dbg.location(461,38);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isLessSource()");
                    }
                    dbg.location(461,56);
                    pushFollow(FOLLOW_cp_mixin_call_in_bodyItem1392);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:11: ( cp_mixin_call )=>{...}? cp_mixin_call
                    {
                    dbg.location(462,29);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(462,47);
                    pushFollow(FOLLOW_cp_mixin_call_in_bodyItem1411);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:463:8: rule
                    {
                    dbg.location(463,8);
                    pushFollow(FOLLOW_rule_in_bodyItem1420);
                    rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:464:11: ( sass_map )=> sass_map
                    {
                    dbg.location(464,24);
                    pushFollow(FOLLOW_sass_map_in_bodyItem1437);
                    sass_map();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:11: ( cp_variable ( ws )? COLON )=> cp_variable_declaration
                    {
                    dbg.location(465,37);
                    pushFollow(FOLLOW_cp_variable_declaration_in_bodyItem1459);
                    cp_variable_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:466:11: at_rule
                    {
                    dbg.location(466,11);
                    pushFollow(FOLLOW_at_rule_in_bodyItem1471);
                    at_rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:468:11: {...}? importItem
                    {
                    dbg.location(468,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isCssPreprocessorSource()");
                    }
                    dbg.location(468,40);
                    pushFollow(FOLLOW_importItem_in_bodyItem1494);
                    importItem();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:469:11: {...}? sass_debug
                    {
                    dbg.location(469,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(469,29);
                    pushFollow(FOLLOW_sass_debug_in_bodyItem1508);
                    sass_debug();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:470:11: {...}? sass_control
                    {
                    dbg.location(470,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(470,29);
                    pushFollow(FOLLOW_sass_control_in_bodyItem1522);
                    sass_control();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:471:11: {...}? sass_function_declaration
                    {
                    dbg.location(471,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(471,29);
                    pushFollow(FOLLOW_sass_function_declaration_in_bodyItem1536);
                    sass_function_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(NL));
                
        }
        finally {
        }
        dbg.location(472, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bodyItem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "bodyItem"


    // $ANTLR start "at_rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:477:1: at_rule : ( media | page | counterStyle | fontFace | vendorAtRule );
    public final void at_rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "at_rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(477, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:478:5: ( media | page | counterStyle | fontFace | vendorAtRule )
            int alt74=5;
            try { dbg.enterDecision(74, decisionCanBacktrack[74]);

            switch ( input.LA(1) ) {
            case MEDIA_SYM:
                {
                alt74=1;
                }
                break;
            case PAGE_SYM:
                {
                alt74=2;
                }
                break;
            case COUNTER_STYLE_SYM:
                {
                alt74=3;
                }
                break;
            case FONT_FACE_SYM:
                {
                alt74=4;
                }
                break;
            case AT_IDENT:
            case MOZ_DOCUMENT_SYM:
            case WEBKIT_KEYFRAMES_SYM:
                {
                alt74=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(74);}

            switch (alt74) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:479:5: media
                    {
                    dbg.location(479,5);
                    pushFollow(FOLLOW_media_in_at_rule1562);
                    media();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:7: page
                    {
                    dbg.location(480,7);
                    pushFollow(FOLLOW_page_in_at_rule1570);
                    page();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:481:7: counterStyle
                    {
                    dbg.location(481,7);
                    pushFollow(FOLLOW_counterStyle_in_at_rule1578);
                    counterStyle();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:7: fontFace
                    {
                    dbg.location(482,7);
                    pushFollow(FOLLOW_fontFace_in_at_rule1586);
                    fontFace();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:483:7: vendorAtRule
                    {
                    dbg.location(483,7);
                    pushFollow(FOLLOW_vendorAtRule_in_at_rule1594);
                    vendorAtRule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(484, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "at_rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "at_rule"


    // $ANTLR start "vendorAtRule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:1: vendorAtRule : ( moz_document | webkitKeyframes | generic_at_rule );
    public final void vendorAtRule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "vendorAtRule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(486, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:1: ( moz_document | webkitKeyframes | generic_at_rule )
            int alt75=3;
            try { dbg.enterDecision(75, decisionCanBacktrack[75]);

            switch ( input.LA(1) ) {
            case MOZ_DOCUMENT_SYM:
                {
                alt75=1;
                }
                break;
            case WEBKIT_KEYFRAMES_SYM:
                {
                alt75=2;
                }
                break;
            case AT_IDENT:
                {
                alt75=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(75);}

            switch (alt75) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:3: moz_document
                    {
                    dbg.location(487,3);
                    pushFollow(FOLLOW_moz_document_in_vendorAtRule1607);
                    moz_document();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:18: webkitKeyframes
                    {
                    dbg.location(487,18);
                    pushFollow(FOLLOW_webkitKeyframes_in_vendorAtRule1611);
                    webkitKeyframes();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:36: generic_at_rule
                    {
                    dbg.location(487,36);
                    pushFollow(FOLLOW_generic_at_rule_in_vendorAtRule1615);
                    generic_at_rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(487, 51);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vendorAtRule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "vendorAtRule"


    // $ANTLR start "atRuleId"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:489:1: atRuleId : ( IDENT | STRING );
    public final void atRuleId() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "atRuleId");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(489, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:490:2: ( IDENT | STRING )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(490,2);
            if ( (input.LA(1)>=IDENT && input.LA(1)<=STRING) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(492, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "atRuleId");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "atRuleId"


    // $ANTLR start "generic_at_rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:1: generic_at_rule : AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE ;
    public final void generic_at_rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "generic_at_rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(494, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:5: ( AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:7: AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE
            {
            dbg.location(495,7);
            match(input,AT_IDENT,FOLLOW_AT_IDENT_in_generic_at_rule1643); if (state.failed) return ;
            dbg.location(495,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:16: ( ws )?
            int alt76=2;
            try { dbg.enterSubRule(76);
            try { dbg.enterDecision(76, decisionCanBacktrack[76]);

            int LA76_0 = input.LA(1);

            if ( ((LA76_0>=WS && LA76_0<=COMMENT)) ) {
                alt76=1;
            }
            } finally {dbg.exitDecision(76);}

            switch (alt76) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:16: ws
                    {
                    dbg.location(495,16);
                    pushFollow(FOLLOW_ws_in_generic_at_rule1645);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(76);}

            dbg.location(495,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:20: ( atRuleId ( ws )? )?
            int alt78=2;
            try { dbg.enterSubRule(78);
            try { dbg.enterDecision(78, decisionCanBacktrack[78]);

            int LA78_0 = input.LA(1);

            if ( ((LA78_0>=IDENT && LA78_0<=STRING)) ) {
                alt78=1;
            }
            } finally {dbg.exitDecision(78);}

            switch (alt78) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:22: atRuleId ( ws )?
                    {
                    dbg.location(495,22);
                    pushFollow(FOLLOW_atRuleId_in_generic_at_rule1650);
                    atRuleId();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(495,31);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:31: ( ws )?
                    int alt77=2;
                    try { dbg.enterSubRule(77);
                    try { dbg.enterDecision(77, decisionCanBacktrack[77]);

                    int LA77_0 = input.LA(1);

                    if ( ((LA77_0>=WS && LA77_0<=COMMENT)) ) {
                        alt77=1;
                    }
                    } finally {dbg.exitDecision(77);}

                    switch (alt77) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:31: ws
                            {
                            dbg.location(495,31);
                            pushFollow(FOLLOW_ws_in_generic_at_rule1652);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(77);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(78);}

            dbg.location(496,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_generic_at_rule1666); if (state.failed) return ;
            dbg.location(497,10);
            pushFollow(FOLLOW_syncTo_RBRACE_in_generic_at_rule1677);
            syncTo_RBRACE();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(498,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_generic_at_rule1687); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(499, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "generic_at_rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "generic_at_rule"


    // $ANTLR start "moz_document"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:500:1: moz_document : MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE ;
    public final void moz_document() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "moz_document");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(500, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:501:2: ( MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:2: MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE
            {
            dbg.location(502,2);
            match(input,MOZ_DOCUMENT_SYM,FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document1698); if (state.failed) return ;
            dbg.location(502,19);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:19: ( ws )?
            int alt79=2;
            try { dbg.enterSubRule(79);
            try { dbg.enterDecision(79, decisionCanBacktrack[79]);

            int LA79_0 = input.LA(1);

            if ( ((LA79_0>=WS && LA79_0<=COMMENT)) ) {
                alt79=1;
            }
            } finally {dbg.exitDecision(79);}

            switch (alt79) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:19: ws
                    {
                    dbg.location(502,19);
                    pushFollow(FOLLOW_ws_in_moz_document1700);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(79);}

            dbg.location(502,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:23: ( moz_document_function ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:25: moz_document_function ( ws )?
            {
            dbg.location(502,25);
            pushFollow(FOLLOW_moz_document_function_in_moz_document1705);
            moz_document_function();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(502,47);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:47: ( ws )?
            int alt80=2;
            try { dbg.enterSubRule(80);
            try { dbg.enterDecision(80, decisionCanBacktrack[80]);

            int LA80_0 = input.LA(1);

            if ( ((LA80_0>=WS && LA80_0<=COMMENT)) ) {
                alt80=1;
            }
            } finally {dbg.exitDecision(80);}

            switch (alt80) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:47: ws
                    {
                    dbg.location(502,47);
                    pushFollow(FOLLOW_ws_in_moz_document1707);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(80);}


            }

            dbg.location(502,52);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:52: ( COMMA ( ws )? moz_document_function ( ws )? )*
            try { dbg.enterSubRule(83);

            loop83:
            do {
                int alt83=2;
                try { dbg.enterDecision(83, decisionCanBacktrack[83]);

                int LA83_0 = input.LA(1);

                if ( (LA83_0==COMMA) ) {
                    alt83=1;
                }


                } finally {dbg.exitDecision(83);}

                switch (alt83) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:54: COMMA ( ws )? moz_document_function ( ws )?
            	    {
            	    dbg.location(502,54);
            	    match(input,COMMA,FOLLOW_COMMA_in_moz_document1713); if (state.failed) return ;
            	    dbg.location(502,60);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:60: ( ws )?
            	    int alt81=2;
            	    try { dbg.enterSubRule(81);
            	    try { dbg.enterDecision(81, decisionCanBacktrack[81]);

            	    int LA81_0 = input.LA(1);

            	    if ( ((LA81_0>=WS && LA81_0<=COMMENT)) ) {
            	        alt81=1;
            	    }
            	    } finally {dbg.exitDecision(81);}

            	    switch (alt81) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:60: ws
            	            {
            	            dbg.location(502,60);
            	            pushFollow(FOLLOW_ws_in_moz_document1715);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(81);}

            	    dbg.location(502,64);
            	    pushFollow(FOLLOW_moz_document_function_in_moz_document1718);
            	    moz_document_function();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(502,86);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:86: ( ws )?
            	    int alt82=2;
            	    try { dbg.enterSubRule(82);
            	    try { dbg.enterDecision(82, decisionCanBacktrack[82]);

            	    int LA82_0 = input.LA(1);

            	    if ( ((LA82_0>=WS && LA82_0<=COMMENT)) ) {
            	        alt82=1;
            	    }
            	    } finally {dbg.exitDecision(82);}

            	    switch (alt82) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:86: ws
            	            {
            	            dbg.location(502,86);
            	            pushFollow(FOLLOW_ws_in_moz_document1720);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(82);}


            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);
            } finally {dbg.exitSubRule(83);}

            dbg.location(503,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_moz_document1727); if (state.failed) return ;
            dbg.location(503,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:503:9: ( ws )?
            int alt84=2;
            try { dbg.enterSubRule(84);
            try { dbg.enterDecision(84, decisionCanBacktrack[84]);

            int LA84_0 = input.LA(1);

            if ( ((LA84_0>=WS && LA84_0<=COMMENT)) ) {
                alt84=1;
            }
            } finally {dbg.exitDecision(84);}

            switch (alt84) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:503:9: ws
                    {
                    dbg.location(503,9);
                    pushFollow(FOLLOW_ws_in_moz_document1729);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(84);}

            dbg.location(504,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:504:3: ( body )?
            int alt85=2;
            try { dbg.enterSubRule(85);
            try { dbg.enterDecision(85, decisionCanBacktrack[85]);

            int LA85_0 = input.LA(1);

            if ( ((LA85_0>=NAMESPACE_SYM && LA85_0<=IDENT)||(LA85_0>=CHARSET_SYM && LA85_0<=COMMA)||LA85_0==MEDIA_SYM||(LA85_0>=GEN && LA85_0<=MOZ_DOCUMENT_SYM)||LA85_0==WEBKIT_KEYFRAMES_SYM||(LA85_0>=PAGE_SYM && LA85_0<=RIGHTBOTTOM_SYM)||(LA85_0>=MINUS && LA85_0<=PIPE)||LA85_0==LESS_AND||(LA85_0>=RBRACKET && LA85_0<=SASS_VAR)||(LA85_0>=SASS_CONTENT && LA85_0<=SASS_WHILE)||LA85_0==AT_SIGN) ) {
                alt85=1;
            }
            } finally {dbg.exitDecision(85);}

            switch (alt85) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:504:3: body
                    {
                    dbg.location(504,3);
                    pushFollow(FOLLOW_body_in_moz_document1734);
                    body();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(85);}

            dbg.location(505,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_moz_document1739); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(506, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moz_document");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "moz_document"


    // $ANTLR start "moz_document_function"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:1: moz_document_function : ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP );
    public final void moz_document_function() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "moz_document_function");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(508, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:509:2: ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(509,2);
            if ( input.LA(1)==URI||(input.LA(1)>=MOZ_URL_PREFIX && input.LA(1)<=MOZ_REGEXP) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(511, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moz_document_function");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "moz_document_function"


    // $ANTLR start "webkitKeyframes"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:514:1: webkitKeyframes : WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE ;
    public final void webkitKeyframes() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframes");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(514, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:515:2: ( WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:2: WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE
            {
            dbg.location(516,2);
            match(input,WEBKIT_KEYFRAMES_SYM,FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes1776); if (state.failed) return ;
            dbg.location(516,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:23: ( ws )?
            int alt86=2;
            try { dbg.enterSubRule(86);
            try { dbg.enterDecision(86, decisionCanBacktrack[86]);

            int LA86_0 = input.LA(1);

            if ( ((LA86_0>=WS && LA86_0<=COMMENT)) ) {
                alt86=1;
            }
            } finally {dbg.exitDecision(86);}

            switch (alt86) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:23: ws
                    {
                    dbg.location(516,23);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1778);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(86);}

            dbg.location(516,27);
            pushFollow(FOLLOW_atRuleId_in_webkitKeyframes1781);
            atRuleId();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(516,36);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:36: ( ws )?
            int alt87=2;
            try { dbg.enterSubRule(87);
            try { dbg.enterDecision(87, decisionCanBacktrack[87]);

            int LA87_0 = input.LA(1);

            if ( ((LA87_0>=WS && LA87_0<=COMMENT)) ) {
                alt87=1;
            }
            } finally {dbg.exitDecision(87);}

            switch (alt87) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:36: ws
                    {
                    dbg.location(516,36);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1783);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(87);}

            dbg.location(517,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframes1787); if (state.failed) return ;
            dbg.location(517,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:517:9: ( ws )?
            int alt88=2;
            try { dbg.enterSubRule(88);
            try { dbg.enterDecision(88, decisionCanBacktrack[88]);

            int LA88_0 = input.LA(1);

            if ( ((LA88_0>=WS && LA88_0<=COMMENT)) ) {
                alt88=1;
            }
            } finally {dbg.exitDecision(88);}

            switch (alt88) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:517:9: ws
                    {
                    dbg.location(517,9);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1789);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(88);}

            dbg.location(518,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:518:3: ( webkitKeyframesBlock ( ws )? )*
            try { dbg.enterSubRule(90);

            loop90:
            do {
                int alt90=2;
                try { dbg.enterDecision(90, decisionCanBacktrack[90]);

                int LA90_0 = input.LA(1);

                if ( (LA90_0==IDENT||LA90_0==PERCENTAGE) ) {
                    alt90=1;
                }


                } finally {dbg.exitDecision(90);}

                switch (alt90) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:518:5: webkitKeyframesBlock ( ws )?
            	    {
            	    dbg.location(518,5);
            	    pushFollow(FOLLOW_webkitKeyframesBlock_in_webkitKeyframes1796);
            	    webkitKeyframesBlock();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(518,26);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:518:26: ( ws )?
            	    int alt89=2;
            	    try { dbg.enterSubRule(89);
            	    try { dbg.enterDecision(89, decisionCanBacktrack[89]);

            	    int LA89_0 = input.LA(1);

            	    if ( ((LA89_0>=WS && LA89_0<=COMMENT)) ) {
            	        alt89=1;
            	    }
            	    } finally {dbg.exitDecision(89);}

            	    switch (alt89) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:518:26: ws
            	            {
            	            dbg.location(518,26);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframes1798);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(89);}


            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);
            } finally {dbg.exitSubRule(90);}

            dbg.location(519,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframes1805); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(520, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframes");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframes"


    // $ANTLR start "webkitKeyframesBlock"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:522:1: webkitKeyframesBlock : webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void webkitKeyframesBlock() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframesBlock");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(522, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:523:2: ( webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:2: webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(524,2);
            pushFollow(FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock1817);
            webkitKeyframeSelectors();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(524,26);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:26: ( ws )?
            int alt91=2;
            try { dbg.enterSubRule(91);
            try { dbg.enterDecision(91, decisionCanBacktrack[91]);

            int LA91_0 = input.LA(1);

            if ( ((LA91_0>=WS && LA91_0<=COMMENT)) ) {
                alt91=1;
            }
            } finally {dbg.exitDecision(91);}

            switch (alt91) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:26: ws
                    {
                    dbg.location(524,26);
                    pushFollow(FOLLOW_ws_in_webkitKeyframesBlock1819);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(91);}

            dbg.location(525,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframesBlock1823); if (state.failed) return ;
            dbg.location(525,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:525:10: ( ws )?
            int alt92=2;
            try { dbg.enterSubRule(92);
            try { dbg.enterDecision(92, decisionCanBacktrack[92]);

            int LA92_0 = input.LA(1);

            if ( ((LA92_0>=WS && LA92_0<=COMMENT)) ) {
                alt92=1;
            }
            } finally {dbg.exitDecision(92);}

            switch (alt92) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:525:10: ws
                    {
                    dbg.location(525,10);
                    pushFollow(FOLLOW_ws_in_webkitKeyframesBlock1826);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(92);}

            dbg.location(525,14);
            pushFollow(FOLLOW_syncToFollow_in_webkitKeyframesBlock1829);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(526,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:526:3: ( declarations )?
            int alt93=2;
            try { dbg.enterSubRule(93);
            try { dbg.enterDecision(93, decisionCanBacktrack[93]);

            int LA93_0 = input.LA(1);

            if ( ((LA93_0>=NAMESPACE_SYM && LA93_0<=IDENT)||(LA93_0>=CHARSET_SYM && LA93_0<=COMMA)||LA93_0==MEDIA_SYM||(LA93_0>=GEN && LA93_0<=MOZ_DOCUMENT_SYM)||LA93_0==WEBKIT_KEYFRAMES_SYM||(LA93_0>=PAGE_SYM && LA93_0<=RIGHTBOTTOM_SYM)||(LA93_0>=MINUS && LA93_0<=PIPE)||LA93_0==LESS_AND||(LA93_0>=RBRACKET && LA93_0<=SASS_VAR)||(LA93_0>=SASS_CONTENT && LA93_0<=SASS_WHILE)||LA93_0==AT_SIGN) ) {
                alt93=1;
            }
            } finally {dbg.exitDecision(93);}

            switch (alt93) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:526:3: declarations
                    {
                    dbg.location(526,3);
                    pushFollow(FOLLOW_declarations_in_webkitKeyframesBlock1833);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(93);}

            dbg.location(527,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframesBlock1837); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(528, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframesBlock");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframesBlock"


    // $ANTLR start "webkitKeyframeSelectors"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:1: webkitKeyframeSelectors : ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )* ;
    public final void webkitKeyframeSelectors() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframeSelectors");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(530, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:531:2: ( ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:2: ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*
            {
            dbg.location(532,2);
            if ( input.LA(1)==IDENT||input.LA(1)==PERCENTAGE ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(532,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:25: ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*
            try { dbg.enterSubRule(96);

            loop96:
            do {
                int alt96=2;
                try { dbg.enterDecision(96, decisionCanBacktrack[96]);

                try {
                    isCyclicDecision = true;
                    alt96 = dfa96.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(96);}

                switch (alt96) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:27: ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE )
            	    {
            	    dbg.location(532,27);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:27: ( ws )?
            	    int alt94=2;
            	    try { dbg.enterSubRule(94);
            	    try { dbg.enterDecision(94, decisionCanBacktrack[94]);

            	    int LA94_0 = input.LA(1);

            	    if ( ((LA94_0>=WS && LA94_0<=COMMENT)) ) {
            	        alt94=1;
            	    }
            	    } finally {dbg.exitDecision(94);}

            	    switch (alt94) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:27: ws
            	            {
            	            dbg.location(532,27);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors1861);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(94);}

            	    dbg.location(532,31);
            	    match(input,COMMA,FOLLOW_COMMA_in_webkitKeyframeSelectors1864); if (state.failed) return ;
            	    dbg.location(532,37);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:37: ( ws )?
            	    int alt95=2;
            	    try { dbg.enterSubRule(95);
            	    try { dbg.enterDecision(95, decisionCanBacktrack[95]);

            	    int LA95_0 = input.LA(1);

            	    if ( ((LA95_0>=WS && LA95_0<=COMMENT)) ) {
            	        alt95=1;
            	    }
            	    } finally {dbg.exitDecision(95);}

            	    switch (alt95) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:37: ws
            	            {
            	            dbg.location(532,37);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors1866);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(95);}

            	    dbg.location(532,41);
            	    if ( input.LA(1)==IDENT||input.LA(1)==PERCENTAGE ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);
            } finally {dbg.exitSubRule(96);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(533, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframeSelectors");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframeSelectors"


    // $ANTLR start "page"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:535:1: page : PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE ;
    public final void page() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "page");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(535, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:5: ( PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:7: PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE
            {
            dbg.location(536,7);
            match(input,PAGE_SYM,FOLLOW_PAGE_SYM_in_page1894); if (state.failed) return ;
            dbg.location(536,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:16: ( ws )?
            int alt97=2;
            try { dbg.enterSubRule(97);
            try { dbg.enterDecision(97, decisionCanBacktrack[97]);

            int LA97_0 = input.LA(1);

            if ( ((LA97_0>=WS && LA97_0<=COMMENT)) ) {
                alt97=1;
            }
            } finally {dbg.exitDecision(97);}

            switch (alt97) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:16: ws
                    {
                    dbg.location(536,16);
                    pushFollow(FOLLOW_ws_in_page1896);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(97);}

            dbg.location(536,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:20: ( IDENT ( ws )? )?
            int alt99=2;
            try { dbg.enterSubRule(99);
            try { dbg.enterDecision(99, decisionCanBacktrack[99]);

            int LA99_0 = input.LA(1);

            if ( (LA99_0==IDENT) ) {
                alt99=1;
            }
            } finally {dbg.exitDecision(99);}

            switch (alt99) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:22: IDENT ( ws )?
                    {
                    dbg.location(536,22);
                    match(input,IDENT,FOLLOW_IDENT_in_page1901); if (state.failed) return ;
                    dbg.location(536,28);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:28: ( ws )?
                    int alt98=2;
                    try { dbg.enterSubRule(98);
                    try { dbg.enterDecision(98, decisionCanBacktrack[98]);

                    int LA98_0 = input.LA(1);

                    if ( ((LA98_0>=WS && LA98_0<=COMMENT)) ) {
                        alt98=1;
                    }
                    } finally {dbg.exitDecision(98);}

                    switch (alt98) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:28: ws
                            {
                            dbg.location(536,28);
                            pushFollow(FOLLOW_ws_in_page1903);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(98);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(99);}

            dbg.location(536,35);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:35: ( pseudoPage ( ws )? )?
            int alt101=2;
            try { dbg.enterSubRule(101);
            try { dbg.enterDecision(101, decisionCanBacktrack[101]);

            int LA101_0 = input.LA(1);

            if ( (LA101_0==COLON) ) {
                alt101=1;
            }
            } finally {dbg.exitDecision(101);}

            switch (alt101) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:36: pseudoPage ( ws )?
                    {
                    dbg.location(536,36);
                    pushFollow(FOLLOW_pseudoPage_in_page1910);
                    pseudoPage();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(536,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:47: ( ws )?
                    int alt100=2;
                    try { dbg.enterSubRule(100);
                    try { dbg.enterDecision(100, decisionCanBacktrack[100]);

                    int LA100_0 = input.LA(1);

                    if ( ((LA100_0>=WS && LA100_0<=COMMENT)) ) {
                        alt100=1;
                    }
                    } finally {dbg.exitDecision(100);}

                    switch (alt100) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:47: ws
                            {
                            dbg.location(536,47);
                            pushFollow(FOLLOW_ws_in_page1912);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(100);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(101);}

            dbg.location(537,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_page1925); if (state.failed) return ;
            dbg.location(537,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:537:16: ( ws )?
            int alt102=2;
            try { dbg.enterSubRule(102);
            try { dbg.enterDecision(102, decisionCanBacktrack[102]);

            int LA102_0 = input.LA(1);

            if ( ((LA102_0>=WS && LA102_0<=COMMENT)) ) {
                alt102=1;
            }
            } finally {dbg.exitDecision(102);}

            switch (alt102) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:537:16: ws
                    {
                    dbg.location(537,16);
                    pushFollow(FOLLOW_ws_in_page1927);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(102);}

            dbg.location(540,13);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:13: ( ( propertyDeclaration | margin ) ( ws )? )?
            int alt105=2;
            try { dbg.enterSubRule(105);
            try { dbg.enterDecision(105, decisionCanBacktrack[105]);

            int LA105_0 = input.LA(1);

            if ( (LA105_0==NAMESPACE_SYM||LA105_0==IDENT||(LA105_0>=CHARSET_SYM && LA105_0<=IMPORT_SYM)||LA105_0==MEDIA_SYM||LA105_0==GEN||(LA105_0>=AT_IDENT && LA105_0<=MOZ_DOCUMENT_SYM)||LA105_0==WEBKIT_KEYFRAMES_SYM||(LA105_0>=PAGE_SYM && LA105_0<=RIGHTBOTTOM_SYM)||LA105_0==MINUS||LA105_0==SASS_AT_ROOT||(LA105_0>=HASH_SYMBOL && LA105_0<=DOT)||LA105_0==STAR||LA105_0==SASS_VAR||(LA105_0>=SASS_CONTENT && LA105_0<=SASS_WHILE)) ) {
                alt105=1;
            }
            } finally {dbg.exitDecision(105);}

            switch (alt105) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:14: ( propertyDeclaration | margin ) ( ws )?
                    {
                    dbg.location(540,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:14: ( propertyDeclaration | margin )
                    int alt103=2;
                    try { dbg.enterSubRule(103);
                    try { dbg.enterDecision(103, decisionCanBacktrack[103]);

                    try {
                        isCyclicDecision = true;
                        alt103 = dfa103.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(103);}

                    switch (alt103) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:15: propertyDeclaration
                            {
                            dbg.location(540,15);
                            pushFollow(FOLLOW_propertyDeclaration_in_page1970);
                            propertyDeclaration();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:35: margin
                            {
                            dbg.location(540,35);
                            pushFollow(FOLLOW_margin_in_page1972);
                            margin();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(103);}

                    dbg.location(540,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:43: ( ws )?
                    int alt104=2;
                    try { dbg.enterSubRule(104);
                    try { dbg.enterDecision(104, decisionCanBacktrack[104]);

                    int LA104_0 = input.LA(1);

                    if ( ((LA104_0>=WS && LA104_0<=COMMENT)) ) {
                        alt104=1;
                    }
                    } finally {dbg.exitDecision(104);}

                    switch (alt104) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:43: ws
                            {
                            dbg.location(540,43);
                            pushFollow(FOLLOW_ws_in_page1975);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(104);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(105);}

            dbg.location(540,49);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:49: ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )*
            try { dbg.enterSubRule(110);

            loop110:
            do {
                int alt110=2;
                try { dbg.enterDecision(110, decisionCanBacktrack[110]);

                int LA110_0 = input.LA(1);

                if ( (LA110_0==SEMI) ) {
                    alt110=1;
                }


                } finally {dbg.exitDecision(110);}

                switch (alt110) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:50: SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )?
            	    {
            	    dbg.location(540,50);
            	    match(input,SEMI,FOLLOW_SEMI_in_page1981); if (state.failed) return ;
            	    dbg.location(540,55);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:55: ( ws )?
            	    int alt106=2;
            	    try { dbg.enterSubRule(106);
            	    try { dbg.enterDecision(106, decisionCanBacktrack[106]);

            	    int LA106_0 = input.LA(1);

            	    if ( ((LA106_0>=WS && LA106_0<=COMMENT)) ) {
            	        alt106=1;
            	    }
            	    } finally {dbg.exitDecision(106);}

            	    switch (alt106) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:55: ws
            	            {
            	            dbg.location(540,55);
            	            pushFollow(FOLLOW_ws_in_page1983);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(106);}

            	    dbg.location(540,59);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:59: ( ( propertyDeclaration | margin ) ( ws )? )?
            	    int alt109=2;
            	    try { dbg.enterSubRule(109);
            	    try { dbg.enterDecision(109, decisionCanBacktrack[109]);

            	    int LA109_0 = input.LA(1);

            	    if ( (LA109_0==NAMESPACE_SYM||LA109_0==IDENT||(LA109_0>=CHARSET_SYM && LA109_0<=IMPORT_SYM)||LA109_0==MEDIA_SYM||LA109_0==GEN||(LA109_0>=AT_IDENT && LA109_0<=MOZ_DOCUMENT_SYM)||LA109_0==WEBKIT_KEYFRAMES_SYM||(LA109_0>=PAGE_SYM && LA109_0<=RIGHTBOTTOM_SYM)||LA109_0==MINUS||LA109_0==SASS_AT_ROOT||(LA109_0>=HASH_SYMBOL && LA109_0<=DOT)||LA109_0==STAR||LA109_0==SASS_VAR||(LA109_0>=SASS_CONTENT && LA109_0<=SASS_WHILE)) ) {
            	        alt109=1;
            	    }
            	    } finally {dbg.exitDecision(109);}

            	    switch (alt109) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:60: ( propertyDeclaration | margin ) ( ws )?
            	            {
            	            dbg.location(540,60);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:60: ( propertyDeclaration | margin )
            	            int alt107=2;
            	            try { dbg.enterSubRule(107);
            	            try { dbg.enterDecision(107, decisionCanBacktrack[107]);

            	            try {
            	                isCyclicDecision = true;
            	                alt107 = dfa107.predict(input);
            	            }
            	            catch (NoViableAltException nvae) {
            	                dbg.recognitionException(nvae);
            	                throw nvae;
            	            }
            	            } finally {dbg.exitDecision(107);}

            	            switch (alt107) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:61: propertyDeclaration
            	                    {
            	                    dbg.location(540,61);
            	                    pushFollow(FOLLOW_propertyDeclaration_in_page1988);
            	                    propertyDeclaration();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;
            	                case 2 :
            	                    dbg.enterAlt(2);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:81: margin
            	                    {
            	                    dbg.location(540,81);
            	                    pushFollow(FOLLOW_margin_in_page1990);
            	                    margin();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(107);}

            	            dbg.location(540,89);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:89: ( ws )?
            	            int alt108=2;
            	            try { dbg.enterSubRule(108);
            	            try { dbg.enterDecision(108, decisionCanBacktrack[108]);

            	            int LA108_0 = input.LA(1);

            	            if ( ((LA108_0>=WS && LA108_0<=COMMENT)) ) {
            	                alt108=1;
            	            }
            	            } finally {dbg.exitDecision(108);}

            	            switch (alt108) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:89: ws
            	                    {
            	                    dbg.location(540,89);
            	                    pushFollow(FOLLOW_ws_in_page1993);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(108);}


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(109);}


            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);
            } finally {dbg.exitSubRule(110);}

            dbg.location(541,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_page2008); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(542, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "page");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "page"


    // $ANTLR start "counterStyle"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:544:1: counterStyle : COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
    public final void counterStyle() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "counterStyle");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(544, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:545:5: ( COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:545:7: COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
            {
            dbg.location(545,7);
            match(input,COUNTER_STYLE_SYM,FOLLOW_COUNTER_STYLE_SYM_in_counterStyle2025); if (state.failed) return ;
            dbg.location(545,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:545:25: ( ws )?
            int alt111=2;
            try { dbg.enterSubRule(111);
            try { dbg.enterDecision(111, decisionCanBacktrack[111]);

            int LA111_0 = input.LA(1);

            if ( ((LA111_0>=WS && LA111_0<=COMMENT)) ) {
                alt111=1;
            }
            } finally {dbg.exitDecision(111);}

            switch (alt111) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:545:25: ws
                    {
                    dbg.location(545,25);
                    pushFollow(FOLLOW_ws_in_counterStyle2027);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(111);}

            dbg.location(545,29);
            match(input,IDENT,FOLLOW_IDENT_in_counterStyle2030); if (state.failed) return ;
            dbg.location(545,35);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:545:35: ( ws )?
            int alt112=2;
            try { dbg.enterSubRule(112);
            try { dbg.enterDecision(112, decisionCanBacktrack[112]);

            int LA112_0 = input.LA(1);

            if ( ((LA112_0>=WS && LA112_0<=COMMENT)) ) {
                alt112=1;
            }
            } finally {dbg.exitDecision(112);}

            switch (alt112) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:545:35: ws
                    {
                    dbg.location(545,35);
                    pushFollow(FOLLOW_ws_in_counterStyle2032);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(112);}

            dbg.location(546,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_counterStyle2043); if (state.failed) return ;
            dbg.location(546,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:546:16: ( ws )?
            int alt113=2;
            try { dbg.enterSubRule(113);
            try { dbg.enterDecision(113, decisionCanBacktrack[113]);

            int LA113_0 = input.LA(1);

            if ( ((LA113_0>=WS && LA113_0<=COMMENT)) ) {
                alt113=1;
            }
            } finally {dbg.exitDecision(113);}

            switch (alt113) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:546:16: ws
                    {
                    dbg.location(546,16);
                    pushFollow(FOLLOW_ws_in_counterStyle2045);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(113);}

            dbg.location(546,20);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_counterStyle2048);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(547,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:547:3: ( declarations )?
            int alt114=2;
            try { dbg.enterSubRule(114);
            try { dbg.enterDecision(114, decisionCanBacktrack[114]);

            int LA114_0 = input.LA(1);

            if ( ((LA114_0>=NAMESPACE_SYM && LA114_0<=IDENT)||(LA114_0>=CHARSET_SYM && LA114_0<=COMMA)||LA114_0==MEDIA_SYM||(LA114_0>=GEN && LA114_0<=MOZ_DOCUMENT_SYM)||LA114_0==WEBKIT_KEYFRAMES_SYM||(LA114_0>=PAGE_SYM && LA114_0<=RIGHTBOTTOM_SYM)||(LA114_0>=MINUS && LA114_0<=PIPE)||LA114_0==LESS_AND||(LA114_0>=RBRACKET && LA114_0<=SASS_VAR)||(LA114_0>=SASS_CONTENT && LA114_0<=SASS_WHILE)||LA114_0==AT_SIGN) ) {
                alt114=1;
            }
            } finally {dbg.exitDecision(114);}

            switch (alt114) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:547:3: declarations
                    {
                    dbg.location(547,3);
                    pushFollow(FOLLOW_declarations_in_counterStyle2052);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(114);}

            dbg.location(548,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_counterStyle2063); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(549, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "counterStyle");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "counterStyle"


    // $ANTLR start "fontFace"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:551:1: fontFace : FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
    public final void fontFace() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fontFace");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(551, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:552:5: ( FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:552:7: FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
            {
            dbg.location(552,7);
            match(input,FONT_FACE_SYM,FOLLOW_FONT_FACE_SYM_in_fontFace2080); if (state.failed) return ;
            dbg.location(552,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:552:21: ( ws )?
            int alt115=2;
            try { dbg.enterSubRule(115);
            try { dbg.enterDecision(115, decisionCanBacktrack[115]);

            int LA115_0 = input.LA(1);

            if ( ((LA115_0>=WS && LA115_0<=COMMENT)) ) {
                alt115=1;
            }
            } finally {dbg.exitDecision(115);}

            switch (alt115) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:552:21: ws
                    {
                    dbg.location(552,21);
                    pushFollow(FOLLOW_ws_in_fontFace2082);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(115);}

            dbg.location(553,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_fontFace2093); if (state.failed) return ;
            dbg.location(553,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:553:16: ( ws )?
            int alt116=2;
            try { dbg.enterSubRule(116);
            try { dbg.enterDecision(116, decisionCanBacktrack[116]);

            int LA116_0 = input.LA(1);

            if ( ((LA116_0>=WS && LA116_0<=COMMENT)) ) {
                alt116=1;
            }
            } finally {dbg.exitDecision(116);}

            switch (alt116) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:553:16: ws
                    {
                    dbg.location(553,16);
                    pushFollow(FOLLOW_ws_in_fontFace2095);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(116);}

            dbg.location(553,20);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_fontFace2098);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(554,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:554:3: ( declarations )?
            int alt117=2;
            try { dbg.enterSubRule(117);
            try { dbg.enterDecision(117, decisionCanBacktrack[117]);

            int LA117_0 = input.LA(1);

            if ( ((LA117_0>=NAMESPACE_SYM && LA117_0<=IDENT)||(LA117_0>=CHARSET_SYM && LA117_0<=COMMA)||LA117_0==MEDIA_SYM||(LA117_0>=GEN && LA117_0<=MOZ_DOCUMENT_SYM)||LA117_0==WEBKIT_KEYFRAMES_SYM||(LA117_0>=PAGE_SYM && LA117_0<=RIGHTBOTTOM_SYM)||(LA117_0>=MINUS && LA117_0<=PIPE)||LA117_0==LESS_AND||(LA117_0>=RBRACKET && LA117_0<=SASS_VAR)||(LA117_0>=SASS_CONTENT && LA117_0<=SASS_WHILE)||LA117_0==AT_SIGN) ) {
                alt117=1;
            }
            } finally {dbg.exitDecision(117);}

            switch (alt117) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:554:3: declarations
                    {
                    dbg.location(554,3);
                    pushFollow(FOLLOW_declarations_in_fontFace2102);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(117);}

            dbg.location(555,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_fontFace2113); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(556, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fontFace");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fontFace"


    // $ANTLR start "margin"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:558:1: margin : margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
    public final void margin() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "margin");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(558, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:559:2: ( margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:559:4: margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
            {
            dbg.location(559,4);
            pushFollow(FOLLOW_margin_sym_in_margin2127);
            margin_sym();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(559,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:559:15: ( ws )?
            int alt118=2;
            try { dbg.enterSubRule(118);
            try { dbg.enterDecision(118, decisionCanBacktrack[118]);

            int LA118_0 = input.LA(1);

            if ( ((LA118_0>=WS && LA118_0<=COMMENT)) ) {
                alt118=1;
            }
            } finally {dbg.exitDecision(118);}

            switch (alt118) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:559:15: ws
                    {
                    dbg.location(559,15);
                    pushFollow(FOLLOW_ws_in_margin2129);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(118);}

            dbg.location(559,19);
            match(input,LBRACE,FOLLOW_LBRACE_in_margin2132); if (state.failed) return ;
            dbg.location(559,26);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:559:26: ( ws )?
            int alt119=2;
            try { dbg.enterSubRule(119);
            try { dbg.enterDecision(119, decisionCanBacktrack[119]);

            int LA119_0 = input.LA(1);

            if ( ((LA119_0>=WS && LA119_0<=COMMENT)) ) {
                alt119=1;
            }
            } finally {dbg.exitDecision(119);}

            switch (alt119) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:559:26: ws
                    {
                    dbg.location(559,26);
                    pushFollow(FOLLOW_ws_in_margin2134);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(119);}

            dbg.location(559,30);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_margin2137);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(559,53);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:559:53: ( declarations )?
            int alt120=2;
            try { dbg.enterSubRule(120);
            try { dbg.enterDecision(120, decisionCanBacktrack[120]);

            int LA120_0 = input.LA(1);

            if ( ((LA120_0>=NAMESPACE_SYM && LA120_0<=IDENT)||(LA120_0>=CHARSET_SYM && LA120_0<=COMMA)||LA120_0==MEDIA_SYM||(LA120_0>=GEN && LA120_0<=MOZ_DOCUMENT_SYM)||LA120_0==WEBKIT_KEYFRAMES_SYM||(LA120_0>=PAGE_SYM && LA120_0<=RIGHTBOTTOM_SYM)||(LA120_0>=MINUS && LA120_0<=PIPE)||LA120_0==LESS_AND||(LA120_0>=RBRACKET && LA120_0<=SASS_VAR)||(LA120_0>=SASS_CONTENT && LA120_0<=SASS_WHILE)||LA120_0==AT_SIGN) ) {
                alt120=1;
            }
            } finally {dbg.exitDecision(120);}

            switch (alt120) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:559:53: declarations
                    {
                    dbg.location(559,53);
                    pushFollow(FOLLOW_declarations_in_margin2139);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(120);}

            dbg.location(559,67);
            match(input,RBRACE,FOLLOW_RBRACE_in_margin2142); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(560, 8);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "margin");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "margin"


    // $ANTLR start "margin_sym"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:562:1: margin_sym : ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM );
    public final void margin_sym() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "margin_sym");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(562, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:563:2: ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(563,2);
            if ( (input.LA(1)>=TOPLEFTCORNER_SYM && input.LA(1)<=RIGHTBOTTOM_SYM) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(580, 8);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "margin_sym");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "margin_sym"


    // $ANTLR start "pseudoPage"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:582:1: pseudoPage : COLON IDENT ;
    public final void pseudoPage() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "pseudoPage");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(582, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:583:5: ( COLON IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:583:7: COLON IDENT
            {
            dbg.location(583,7);
            match(input,COLON,FOLLOW_COLON_in_pseudoPage2351); if (state.failed) return ;
            dbg.location(583,13);
            match(input,IDENT,FOLLOW_IDENT_in_pseudoPage2353); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(584, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pseudoPage");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "pseudoPage"


    // $ANTLR start "operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:586:1: operator : ( SOLIDUS | COMMA );
    public final void operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(586, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:587:5: ( SOLIDUS | COMMA )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(587,5);
            if ( input.LA(1)==COMMA||input.LA(1)==SOLIDUS ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(589, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "operator"


    // $ANTLR start "unaryOperator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:591:1: unaryOperator : ( MINUS | PLUS );
    public final void unaryOperator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "unaryOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(591, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:592:5: ( MINUS | PLUS )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(592,5);
            if ( (input.LA(1)>=MINUS && input.LA(1)<=PLUS) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(594, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unaryOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "unaryOperator"


    // $ANTLR start "property"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:596:1: property : ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN | {...}? cp_variable );
    public final void property() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "property");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(596, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:597:5: ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN | {...}? cp_variable )
            int alt121=4;
            try { dbg.enterDecision(121, decisionCanBacktrack[121]);

            int LA121_0 = input.LA(1);

            if ( (LA121_0==HASH_SYMBOL) && (synpred17_Css3())) {
                alt121=1;
            }
            else if ( (LA121_0==IDENT) ) {
                int LA121_2 = input.LA(2);

                if ( (synpred17_Css3()) ) {
                    alt121=1;
                }
                else if ( (true) ) {
                    alt121=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 121, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA121_0==MINUS||(LA121_0>=HASH && LA121_0<=DOT)) && (synpred17_Css3())) {
                alt121=1;
            }
            else if ( (LA121_0==GEN) ) {
                alt121=3;
            }
            else if ( (LA121_0==NAMESPACE_SYM||(LA121_0>=CHARSET_SYM && LA121_0<=IMPORT_SYM)||LA121_0==MEDIA_SYM||(LA121_0>=AT_IDENT && LA121_0<=MOZ_DOCUMENT_SYM)||LA121_0==WEBKIT_KEYFRAMES_SYM||(LA121_0>=PAGE_SYM && LA121_0<=RIGHTBOTTOM_SYM)||LA121_0==SASS_AT_ROOT||LA121_0==SASS_VAR||(LA121_0>=SASS_CONTENT && LA121_0<=SASS_WHILE)) ) {
                alt121=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(121);}

            switch (alt121) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:5: ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression
                    {
                    dbg.location(601,49);
                    pushFollow(FOLLOW_sass_declaration_interpolation_expression_in_property2449);
                    sass_declaration_interpolation_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:602:7: IDENT
                    {
                    dbg.location(602,7);
                    match(input,IDENT,FOLLOW_IDENT_in_property2457); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:603:7: GEN
                    {
                    dbg.location(603,7);
                    match(input,GEN,FOLLOW_GEN_in_property2465); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:604:7: {...}? cp_variable
                    {
                    dbg.location(604,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "property", "isCssPreprocessorSource()");
                    }
                    dbg.location(604,36);
                    pushFollow(FOLLOW_cp_variable_in_property2475);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(COLON));
                
        }
        finally {
        }
        dbg.location(606, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "property");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "property"


    // $ANTLR start "sass_map"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:611:1: sass_map : sass_map_name COLON ( ws )? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN ;
    public final void sass_map() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_map");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(611, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:612:5: ( sass_map_name COLON ( ws )? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:5: sass_map_name COLON ( ws )? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN
            {
            dbg.location(613,5);
            pushFollow(FOLLOW_sass_map_name_in_sass_map2502);
            sass_map_name();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(613,19);
            match(input,COLON,FOLLOW_COLON_in_sass_map2504); if (state.failed) return ;
            dbg.location(613,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:25: ( ws )?
            int alt122=2;
            try { dbg.enterSubRule(122);
            try { dbg.enterDecision(122, decisionCanBacktrack[122]);

            int LA122_0 = input.LA(1);

            if ( ((LA122_0>=WS && LA122_0<=COMMENT)) ) {
                alt122=1;
            }
            } finally {dbg.exitDecision(122);}

            switch (alt122) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:25: ws
                    {
                    dbg.location(613,25);
                    pushFollow(FOLLOW_ws_in_sass_map2506);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(122);}

            dbg.location(613,29);
            match(input,LPAREN,FOLLOW_LPAREN_in_sass_map2509); if (state.failed) return ;
            dbg.location(613,36);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:36: ( ws )?
            int alt123=2;
            try { dbg.enterSubRule(123);
            try { dbg.enterDecision(123, decisionCanBacktrack[123]);

            int LA123_0 = input.LA(1);

            if ( ((LA123_0>=WS && LA123_0<=COMMENT)) ) {
                alt123=1;
            }
            } finally {dbg.exitDecision(123);}

            switch (alt123) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:36: ws
                    {
                    dbg.location(613,36);
                    pushFollow(FOLLOW_ws_in_sass_map2511);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(123);}

            dbg.location(613,40);
            pushFollow(FOLLOW_syncToFollow_in_sass_map2514);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(615,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:615:9: ( sass_map_pairs )?
            int alt124=2;
            try { dbg.enterSubRule(124);
            try { dbg.enterDecision(124, decisionCanBacktrack[124]);

            int LA124_0 = input.LA(1);

            if ( (LA124_0==NAMESPACE_SYM||LA124_0==IDENT||(LA124_0>=CHARSET_SYM && LA124_0<=COMMA)||LA124_0==MEDIA_SYM||LA124_0==GEN||(LA124_0>=AT_IDENT && LA124_0<=MOZ_DOCUMENT_SYM)||LA124_0==WEBKIT_KEYFRAMES_SYM||(LA124_0>=PAGE_SYM && LA124_0<=RIGHTBOTTOM_SYM)||LA124_0==MINUS||LA124_0==SASS_AT_ROOT||(LA124_0>=HASH_SYMBOL && LA124_0<=DOT)||LA124_0==SASS_VAR||(LA124_0>=SASS_CONTENT && LA124_0<=SASS_WHILE)) ) {
                alt124=1;
            }
            } finally {dbg.exitDecision(124);}

            switch (alt124) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:615:9: sass_map_pairs
                    {
                    dbg.location(615,9);
                    pushFollow(FOLLOW_sass_map_pairs_in_sass_map2533);
                    sass_map_pairs();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(124);}

            dbg.location(616,5);
            match(input,RPAREN,FOLLOW_RPAREN_in_sass_map2540); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(617, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_map");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_map"


    // $ANTLR start "sass_map_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:1: sass_map_name : cp_variable ;
    public final void sass_map_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_map_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(619, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:620:5: ( cp_variable )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:5: cp_variable
            {
            dbg.location(621,5);
            pushFollow(FOLLOW_cp_variable_in_sass_map_name2561);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(622, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_map_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_map_name"


    // $ANTLR start "sass_map_pairs"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:624:1: sass_map_pairs : ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+ ;
    public final void sass_map_pairs() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_map_pairs");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(624, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:625:5: ( ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:5: ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+
            {
            dbg.location(626,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:5: ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+
            int cnt129=0;
            try { dbg.enterSubRule(129);

            loop129:
            do {
                int alt129=3;
                try { dbg.enterDecision(129, decisionCanBacktrack[129]);

                int LA129_0 = input.LA(1);

                if ( (LA129_0==NAMESPACE_SYM||LA129_0==IDENT||(LA129_0>=CHARSET_SYM && LA129_0<=IMPORT_SYM)||LA129_0==MEDIA_SYM||LA129_0==GEN||(LA129_0>=AT_IDENT && LA129_0<=MOZ_DOCUMENT_SYM)||LA129_0==WEBKIT_KEYFRAMES_SYM||(LA129_0>=PAGE_SYM && LA129_0<=RIGHTBOTTOM_SYM)||LA129_0==MINUS||LA129_0==SASS_AT_ROOT||(LA129_0>=HASH_SYMBOL && LA129_0<=DOT)||LA129_0==SASS_VAR||(LA129_0>=SASS_CONTENT && LA129_0<=SASS_WHILE)) ) {
                    alt129=1;
                }
                else if ( (LA129_0==COMMA) ) {
                    alt129=2;
                }


                } finally {dbg.exitDecision(129);}

                switch (alt129) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:10: ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? )
            	    {
            	    dbg.location(627,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:10: ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:12: sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )?
            	    {
            	    dbg.location(627,12);
            	    pushFollow(FOLLOW_sass_map_pair_in_sass_map_pairs2595);
            	    sass_map_pair();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(627,26);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:26: ( ( ( ws )? COMMA )=> ( ws )? COMMA )?
            	    int alt126=2;
            	    try { dbg.enterSubRule(126);
            	    try { dbg.enterDecision(126, decisionCanBacktrack[126]);

            	    try {
            	        isCyclicDecision = true;
            	        alt126 = dfa126.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(126);}

            	    switch (alt126) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:27: ( ( ws )? COMMA )=> ( ws )? COMMA
            	            {
            	            dbg.location(627,40);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:40: ( ws )?
            	            int alt125=2;
            	            try { dbg.enterSubRule(125);
            	            try { dbg.enterDecision(125, decisionCanBacktrack[125]);

            	            int LA125_0 = input.LA(1);

            	            if ( ((LA125_0>=WS && LA125_0<=COMMENT)) ) {
            	                alt125=1;
            	            }
            	            } finally {dbg.exitDecision(125);}

            	            switch (alt125) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:40: ws
            	                    {
            	                    dbg.location(627,40);
            	                    pushFollow(FOLLOW_ws_in_sass_map_pairs2605);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(125);}

            	            dbg.location(627,44);
            	            match(input,COMMA,FOLLOW_COMMA_in_sass_map_pairs2608); if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(126);}

            	    dbg.location(627,52);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:52: ( ws )?
            	    int alt127=2;
            	    try { dbg.enterSubRule(127);
            	    try { dbg.enterDecision(127, decisionCanBacktrack[127]);

            	    int LA127_0 = input.LA(1);

            	    if ( ((LA127_0>=WS && LA127_0<=COMMENT)) ) {
            	        alt127=1;
            	    }
            	    } finally {dbg.exitDecision(127);}

            	    switch (alt127) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:52: ws
            	            {
            	            dbg.location(627,52);
            	            pushFollow(FOLLOW_ws_in_sass_map_pairs2612);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(127);}


            	    }


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:10: ( COMMA ( ws )? )
            	    {
            	    dbg.location(629,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:10: ( COMMA ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:12: COMMA ( ws )?
            	    {
            	    dbg.location(629,12);
            	    match(input,COMMA,FOLLOW_COMMA_in_sass_map_pairs2639); if (state.failed) return ;
            	    dbg.location(629,18);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:18: ( ws )?
            	    int alt128=2;
            	    try { dbg.enterSubRule(128);
            	    try { dbg.enterDecision(128, decisionCanBacktrack[128]);

            	    int LA128_0 = input.LA(1);

            	    if ( ((LA128_0>=WS && LA128_0<=COMMENT)) ) {
            	        alt128=1;
            	    }
            	    } finally {dbg.exitDecision(128);}

            	    switch (alt128) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:18: ws
            	            {
            	            dbg.location(629,18);
            	            pushFollow(FOLLOW_ws_in_sass_map_pairs2641);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(128);}


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt129 >= 1 ) break loop129;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(129, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt129++;
            } while (true);
            } finally {dbg.exitSubRule(129);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(631, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_map_pairs");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_map_pairs"


    // $ANTLR start "sass_map_pair"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:633:1: sass_map_pair : property ( ws )? COLON ( ws )? cp_expression ( ( ws )? prio )? ;
    public final void sass_map_pair() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_map_pair");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(633, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:5: ( property ( ws )? COLON ( ws )? cp_expression ( ( ws )? prio )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:9: property ( ws )? COLON ( ws )? cp_expression ( ( ws )? prio )?
            {
            dbg.location(635,9);
            pushFollow(FOLLOW_property_in_sass_map_pair2676);
            property();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(635,18);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:18: ( ws )?
            int alt130=2;
            try { dbg.enterSubRule(130);
            try { dbg.enterDecision(130, decisionCanBacktrack[130]);

            int LA130_0 = input.LA(1);

            if ( ((LA130_0>=WS && LA130_0<=COMMENT)) ) {
                alt130=1;
            }
            } finally {dbg.exitDecision(130);}

            switch (alt130) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:18: ws
                    {
                    dbg.location(635,18);
                    pushFollow(FOLLOW_ws_in_sass_map_pair2678);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(130);}

            dbg.location(635,22);
            match(input,COLON,FOLLOW_COLON_in_sass_map_pair2681); if (state.failed) return ;
            dbg.location(635,28);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:28: ( ws )?
            int alt131=2;
            try { dbg.enterSubRule(131);
            try { dbg.enterDecision(131, decisionCanBacktrack[131]);

            int LA131_0 = input.LA(1);

            if ( ((LA131_0>=WS && LA131_0<=COMMENT)) ) {
                alt131=1;
            }
            } finally {dbg.exitDecision(131);}

            switch (alt131) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:28: ws
                    {
                    dbg.location(635,28);
                    pushFollow(FOLLOW_ws_in_sass_map_pair2683);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(131);}

            dbg.location(635,32);
            pushFollow(FOLLOW_cp_expression_in_sass_map_pair2686);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(635,46);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:46: ( ( ws )? prio )?
            int alt133=2;
            try { dbg.enterSubRule(133);
            try { dbg.enterDecision(133, decisionCanBacktrack[133]);

            try {
                isCyclicDecision = true;
                alt133 = dfa133.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(133);}

            switch (alt133) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:47: ( ws )? prio
                    {
                    dbg.location(635,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:47: ( ws )?
                    int alt132=2;
                    try { dbg.enterSubRule(132);
                    try { dbg.enterDecision(132, decisionCanBacktrack[132]);

                    int LA132_0 = input.LA(1);

                    if ( ((LA132_0>=WS && LA132_0<=COMMENT)) ) {
                        alt132=1;
                    }
                    } finally {dbg.exitDecision(132);}

                    switch (alt132) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:47: ws
                            {
                            dbg.location(635,47);
                            pushFollow(FOLLOW_ws_in_sass_map_pair2689);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(132);}

                    dbg.location(635,51);
                    pushFollow(FOLLOW_prio_in_sass_map_pair2692);
                    prio();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(133);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(636, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_map_pair");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_map_pair"


    // $ANTLR start "rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:1: rule : ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | selectorsGroup ) ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(638, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:5: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | selectorsGroup ) ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:5: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | selectorsGroup ) ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(640,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:5: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | selectorsGroup )
            int alt135=2;
            try { dbg.enterSubRule(135);
            try { dbg.enterDecision(135, decisionCanBacktrack[135]);

            int LA135_0 = input.LA(1);

            if ( (LA135_0==SASS_AT_ROOT) ) {
                alt135=1;
            }
            else if ( (LA135_0==IDENT||LA135_0==COMMA||(LA135_0>=GEN && LA135_0<=COLON)||(LA135_0>=MINUS && LA135_0<=PLUS)||(LA135_0>=GREATER && LA135_0<=PIPE)||LA135_0==LESS_AND||LA135_0==RBRACKET||LA135_0==AT_SIGN) ) {
                alt135=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(135);}

            switch (alt135) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:6: ( SASS_AT_ROOT ( ws selectorsGroup )? )
                    {
                    dbg.location(640,6);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:6: ( SASS_AT_ROOT ( ws selectorsGroup )? )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:7: SASS_AT_ROOT ( ws selectorsGroup )?
                    {
                    dbg.location(640,7);
                    match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_rule2717); if (state.failed) return ;
                    dbg.location(640,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:20: ( ws selectorsGroup )?
                    int alt134=2;
                    try { dbg.enterSubRule(134);
                    try { dbg.enterDecision(134, decisionCanBacktrack[134]);

                    try {
                        isCyclicDecision = true;
                        alt134 = dfa134.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(134);}

                    switch (alt134) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:21: ws selectorsGroup
                            {
                            dbg.location(640,21);
                            pushFollow(FOLLOW_ws_in_rule2720);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(640,24);
                            pushFollow(FOLLOW_selectorsGroup_in_rule2722);
                            selectorsGroup();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(134);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:44: selectorsGroup
                    {
                    dbg.location(640,44);
                    pushFollow(FOLLOW_selectorsGroup_in_rule2729);
                    selectorsGroup();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(135);}

            dbg.location(640,60);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:60: ( ws )?
            int alt136=2;
            try { dbg.enterSubRule(136);
            try { dbg.enterDecision(136, decisionCanBacktrack[136]);

            int LA136_0 = input.LA(1);

            if ( ((LA136_0>=WS && LA136_0<=COMMENT)) ) {
                alt136=1;
            }
            } finally {dbg.exitDecision(136);}

            switch (alt136) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:60: ws
                    {
                    dbg.location(640,60);
                    pushFollow(FOLLOW_ws_in_rule2732);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(136);}

            dbg.location(641,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_rule2739); if (state.failed) return ;
            dbg.location(641,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:641:12: ( ws )?
            int alt137=2;
            try { dbg.enterSubRule(137);
            try { dbg.enterDecision(137, decisionCanBacktrack[137]);

            int LA137_0 = input.LA(1);

            if ( ((LA137_0>=WS && LA137_0<=COMMENT)) ) {
                alt137=1;
            }
            } finally {dbg.exitDecision(137);}

            switch (alt137) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:641:12: ws
                    {
                    dbg.location(641,12);
                    pushFollow(FOLLOW_ws_in_rule2741);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(137);}

            dbg.location(641,16);
            pushFollow(FOLLOW_syncToFollow_in_rule2744);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(642,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:642:9: ( declarations )?
            int alt138=2;
            try { dbg.enterSubRule(138);
            try { dbg.enterDecision(138, decisionCanBacktrack[138]);

            int LA138_0 = input.LA(1);

            if ( ((LA138_0>=NAMESPACE_SYM && LA138_0<=IDENT)||(LA138_0>=CHARSET_SYM && LA138_0<=COMMA)||LA138_0==MEDIA_SYM||(LA138_0>=GEN && LA138_0<=MOZ_DOCUMENT_SYM)||LA138_0==WEBKIT_KEYFRAMES_SYM||(LA138_0>=PAGE_SYM && LA138_0<=RIGHTBOTTOM_SYM)||(LA138_0>=MINUS && LA138_0<=PIPE)||LA138_0==LESS_AND||(LA138_0>=RBRACKET && LA138_0<=SASS_VAR)||(LA138_0>=SASS_CONTENT && LA138_0<=SASS_WHILE)||LA138_0==AT_SIGN) ) {
                alt138=1;
            }
            } finally {dbg.exitDecision(138);}

            switch (alt138) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:642:9: declarations
                    {
                    dbg.location(642,9);
                    pushFollow(FOLLOW_declarations_in_rule2754);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(138);}

            dbg.location(643,5);
            match(input,RBRACE,FOLLOW_RBRACE_in_rule2761); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(RBRACE));
                    input.consume(); //consume the RBRACE as well
                
        }
        finally {
        }
        dbg.location(644, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "rule"


    // $ANTLR start "declarations"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:651:1: declarations : ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
    public final void declarations() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "declarations");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(651, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:652:5: ( ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:653:5: ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            {
            dbg.location(653,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:653:5: ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            int cnt143=0;
            try { dbg.enterSubRule(143);

            loop143:
            do {
                int alt143=3;
                try { dbg.enterDecision(143, decisionCanBacktrack[143]);

                int LA143_0 = input.LA(1);

                if ( (LA143_0==NAMESPACE_SYM||LA143_0==IDENT||(LA143_0>=CHARSET_SYM && LA143_0<=COMMA)||LA143_0==MEDIA_SYM||(LA143_0>=GEN && LA143_0<=MOZ_DOCUMENT_SYM)||LA143_0==WEBKIT_KEYFRAMES_SYM||(LA143_0>=PAGE_SYM && LA143_0<=RIGHTBOTTOM_SYM)||(LA143_0>=MINUS && LA143_0<=PIPE)||LA143_0==LESS_AND||(LA143_0>=RBRACKET && LA143_0<=SASS_VAR)||(LA143_0>=SASS_CONTENT && LA143_0<=SASS_WHILE)||LA143_0==AT_SIGN) ) {
                    alt143=1;
                }
                else if ( (LA143_0==SEMI) ) {
                    alt143=2;
                }


                } finally {dbg.exitDecision(143);}

                switch (alt143) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:10: ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    {
            	    dbg.location(654,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:10: ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:12: declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
            	    {
            	    dbg.location(654,12);
            	    pushFollow(FOLLOW_declaration_in_declarations2804);
            	    declaration();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(654,24);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:24: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
            	    int alt140=2;
            	    try { dbg.enterSubRule(140);
            	    try { dbg.enterDecision(140, decisionCanBacktrack[140]);

            	    try {
            	        isCyclicDecision = true;
            	        alt140 = dfa140.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(140);}

            	    switch (alt140) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:25: ( ( ws )? SEMI )=> ( ws )? SEMI
            	            {
            	            dbg.location(654,37);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:37: ( ws )?
            	            int alt139=2;
            	            try { dbg.enterSubRule(139);
            	            try { dbg.enterDecision(139, decisionCanBacktrack[139]);

            	            int LA139_0 = input.LA(1);

            	            if ( ((LA139_0>=WS && LA139_0<=COMMENT)) ) {
            	                alt139=1;
            	            }
            	            } finally {dbg.exitDecision(139);}

            	            switch (alt139) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:37: ws
            	                    {
            	                    dbg.location(654,37);
            	                    pushFollow(FOLLOW_ws_in_declarations2814);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(139);}

            	            dbg.location(654,41);
            	            match(input,SEMI,FOLLOW_SEMI_in_declarations2817); if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(140);}

            	    dbg.location(654,48);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:48: ( ws )?
            	    int alt141=2;
            	    try { dbg.enterSubRule(141);
            	    try { dbg.enterDecision(141, decisionCanBacktrack[141]);

            	    int LA141_0 = input.LA(1);

            	    if ( ((LA141_0>=WS && LA141_0<=COMMENT)) ) {
            	        alt141=1;
            	    }
            	    } finally {dbg.exitDecision(141);}

            	    switch (alt141) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:48: ws
            	            {
            	            dbg.location(654,48);
            	            pushFollow(FOLLOW_ws_in_declarations2821);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(141);}


            	    }


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:10: ( SEMI ( ws )? )
            	    {
            	    dbg.location(656,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:10: ( SEMI ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:12: SEMI ( ws )?
            	    {
            	    dbg.location(656,12);
            	    match(input,SEMI,FOLLOW_SEMI_in_declarations2848); if (state.failed) return ;
            	    dbg.location(656,17);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:17: ( ws )?
            	    int alt142=2;
            	    try { dbg.enterSubRule(142);
            	    try { dbg.enterDecision(142, decisionCanBacktrack[142]);

            	    int LA142_0 = input.LA(1);

            	    if ( ((LA142_0>=WS && LA142_0<=COMMENT)) ) {
            	        alt142=1;
            	    }
            	    } finally {dbg.exitDecision(142);}

            	    switch (alt142) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:17: ws
            	            {
            	            dbg.location(656,17);
            	            pushFollow(FOLLOW_ws_in_declarations2850);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(142);}


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt143 >= 1 ) break loop143;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(143, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt143++;
            } while (true);
            } finally {dbg.exitSubRule(143);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(658, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "declarations");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "declarations"


    // $ANTLR start "declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:1: declaration : ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_map )=> sass_map | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | selectorsGroup ) ( ws )? LBRACE )=> rule | {...}? at_rule | {...}? sass_control | {...}? sass_extend | {...}? sass_debug | {...}? sass_content | {...}? sass_function_return | {...}? importItem | GEN );
    public final void declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(660, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:661:5: ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_map )=> sass_map | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | selectorsGroup ) ( ws )? LBRACE )=> rule | {...}? at_rule | {...}? sass_control | {...}? sass_extend | {...}? sass_debug | {...}? sass_content | {...}? sass_function_return | {...}? importItem | GEN )
            int alt148=17;
            try { dbg.enterDecision(148, decisionCanBacktrack[148]);

            try {
                isCyclicDecision = true;
                alt148 = dfa148.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(148);}

            switch (alt148) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:662:5: ( cp_variable_declaration )=> cp_variable_declaration
                    {
                    dbg.location(662,32);
                    pushFollow(FOLLOW_cp_variable_declaration_in_declaration2885);
                    cp_variable_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:663:7: ( sass_map )=> sass_map
                    {
                    dbg.location(663,20);
                    pushFollow(FOLLOW_sass_map_in_declaration2898);
                    sass_map();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:7: ( sass_nested_properties )=> sass_nested_properties
                    {
                    dbg.location(664,33);
                    pushFollow(FOLLOW_sass_nested_properties_in_declaration2910);
                    sass_nested_properties();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:665:7: ( propertyDeclaration )=> propertyDeclaration
                    {
                    dbg.location(665,30);
                    pushFollow(FOLLOW_propertyDeclaration_in_declaration2922);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:7: ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration
                    {
                    dbg.location(667,67);
                    pushFollow(FOLLOW_propertyDeclaration_in_declaration2961);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:7: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration
                    {
                    dbg.location(668,94);
                    pushFollow(FOLLOW_cp_mixin_declaration_in_declaration3006);
                    cp_mixin_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
                    {
                    dbg.location(670,55);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isLessSource()");
                    }
                    dbg.location(670,73);
                    pushFollow(FOLLOW_cp_mixin_call_in_declaration3039);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(670,87);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:87: ( ( ws )? IMPORTANT_SYM )?
                    int alt145=2;
                    try { dbg.enterSubRule(145);
                    try { dbg.enterDecision(145, decisionCanBacktrack[145]);

                    try {
                        isCyclicDecision = true;
                        alt145 = dfa145.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(145);}

                    switch (alt145) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:88: ( ws )? IMPORTANT_SYM
                            {
                            dbg.location(670,88);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:88: ( ws )?
                            int alt144=2;
                            try { dbg.enterSubRule(144);
                            try { dbg.enterDecision(144, decisionCanBacktrack[144]);

                            int LA144_0 = input.LA(1);

                            if ( ((LA144_0>=WS && LA144_0<=COMMENT)) ) {
                                alt144=1;
                            }
                            } finally {dbg.exitDecision(144);}

                            switch (alt144) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:88: ws
                                    {
                                    dbg.location(670,88);
                                    pushFollow(FOLLOW_ws_in_declaration3042);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(144);}

                            dbg.location(670,92);
                            match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_declaration3045); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(145);}


                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:671:7: ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
                    {
                    dbg.location(671,25);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(671,43);
                    pushFollow(FOLLOW_cp_mixin_call_in_declaration3062);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(671,57);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:671:57: ( ( ws )? IMPORTANT_SYM )?
                    int alt147=2;
                    try { dbg.enterSubRule(147);
                    try { dbg.enterDecision(147, decisionCanBacktrack[147]);

                    try {
                        isCyclicDecision = true;
                        alt147 = dfa147.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(147);}

                    switch (alt147) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:671:58: ( ws )? IMPORTANT_SYM
                            {
                            dbg.location(671,58);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:671:58: ( ws )?
                            int alt146=2;
                            try { dbg.enterSubRule(146);
                            try { dbg.enterDecision(146, decisionCanBacktrack[146]);

                            int LA146_0 = input.LA(1);

                            if ( ((LA146_0>=WS && LA146_0<=COMMENT)) ) {
                                alt146=1;
                            }
                            } finally {dbg.exitDecision(146);}

                            switch (alt146) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:671:58: ws
                                    {
                                    dbg.location(671,58);
                                    pushFollow(FOLLOW_ws_in_declaration3065);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(146);}

                            dbg.location(671,62);
                            match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_declaration3068); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(147);}


                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:7: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | selectorsGroup ) ( ws )? LBRACE )=> rule
                    {
                    dbg.location(672,76);
                    pushFollow(FOLLOW_rule_in_declaration3102);
                    rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:673:7: {...}? at_rule
                    {
                    dbg.location(673,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isCssPreprocessorSource()");
                    }
                    dbg.location(673,36);
                    pushFollow(FOLLOW_at_rule_in_declaration3112);
                    at_rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:674:7: {...}? sass_control
                    {
                    dbg.location(674,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(674,25);
                    pushFollow(FOLLOW_sass_control_in_declaration3122);
                    sass_control();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:675:7: {...}? sass_extend
                    {
                    dbg.location(675,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(675,25);
                    pushFollow(FOLLOW_sass_extend_in_declaration3132);
                    sass_extend();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:676:7: {...}? sass_debug
                    {
                    dbg.location(676,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(676,25);
                    pushFollow(FOLLOW_sass_debug_in_declaration3142);
                    sass_debug();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:677:7: {...}? sass_content
                    {
                    dbg.location(677,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(677,25);
                    pushFollow(FOLLOW_sass_content_in_declaration3152);
                    sass_content();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:678:7: {...}? sass_function_return
                    {
                    dbg.location(678,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(678,25);
                    pushFollow(FOLLOW_sass_function_return_in_declaration3162);
                    sass_function_return();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:679:7: {...}? importItem
                    {
                    dbg.location(679,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(679,25);
                    pushFollow(FOLLOW_importItem_in_declaration3172);
                    importItem();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:680:7: GEN
                    {
                    dbg.location(680,7);
                    match(input,GEN,FOLLOW_GEN_in_declaration3180); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(SEMI));
                
        }
        finally {
        }
        dbg.location(681, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "declaration"


    // $ANTLR start "selectorsGroup"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:687:1: selectorsGroup : ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( ( ws )? COMMA ( ws )? selector )* );
    public final void selectorsGroup() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "selectorsGroup");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(687, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:688:5: ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( ( ws )? COMMA ( ws )? selector )* )
            int alt152=2;
            try { dbg.enterDecision(152, decisionCanBacktrack[152]);

            try {
                isCyclicDecision = true;
                alt152 = dfa152.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(152);}

            switch (alt152) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:9: ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression
                    {
                    dbg.location(690,60);
                    pushFollow(FOLLOW_sass_selector_interpolation_expression_in_selectorsGroup3243);
                    sass_selector_interpolation_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:692:9: selector ( ( ws )? COMMA ( ws )? selector )*
                    {
                    dbg.location(692,9);
                    pushFollow(FOLLOW_selector_in_selectorsGroup3256);
                    selector();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(692,18);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:692:18: ( ( ws )? COMMA ( ws )? selector )*
                    try { dbg.enterSubRule(151);

                    loop151:
                    do {
                        int alt151=2;
                        try { dbg.enterDecision(151, decisionCanBacktrack[151]);

                        try {
                            isCyclicDecision = true;
                            alt151 = dfa151.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(151);}

                        switch (alt151) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:692:19: ( ws )? COMMA ( ws )? selector
                    	    {
                    	    dbg.location(692,19);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:692:19: ( ws )?
                    	    int alt149=2;
                    	    try { dbg.enterSubRule(149);
                    	    try { dbg.enterDecision(149, decisionCanBacktrack[149]);

                    	    int LA149_0 = input.LA(1);

                    	    if ( ((LA149_0>=WS && LA149_0<=COMMENT)) ) {
                    	        alt149=1;
                    	    }
                    	    } finally {dbg.exitDecision(149);}

                    	    switch (alt149) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:692:19: ws
                    	            {
                    	            dbg.location(692,19);
                    	            pushFollow(FOLLOW_ws_in_selectorsGroup3259);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(149);}

                    	    dbg.location(692,23);
                    	    match(input,COMMA,FOLLOW_COMMA_in_selectorsGroup3262); if (state.failed) return ;
                    	    dbg.location(692,29);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:692:29: ( ws )?
                    	    int alt150=2;
                    	    try { dbg.enterSubRule(150);
                    	    try { dbg.enterDecision(150, decisionCanBacktrack[150]);

                    	    int LA150_0 = input.LA(1);

                    	    if ( ((LA150_0>=WS && LA150_0<=COMMENT)) ) {
                    	        alt150=1;
                    	    }
                    	    } finally {dbg.exitDecision(150);}

                    	    switch (alt150) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:692:29: ws
                    	            {
                    	            dbg.location(692,29);
                    	            pushFollow(FOLLOW_ws_in_selectorsGroup3264);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(150);}

                    	    dbg.location(692,33);
                    	    pushFollow(FOLLOW_selector_in_selectorsGroup3267);
                    	    selector();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop151;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(151);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(693, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "selectorsGroup");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "selectorsGroup"


    // $ANTLR start "selector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:695:1: selector : ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )* ;
    public final void selector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "selector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(695, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:5: ( ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:8: ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )*
            {
            dbg.location(696,8);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:8: ( combinator ( ws )? )?
            int alt154=2;
            try { dbg.enterSubRule(154);
            try { dbg.enterDecision(154, decisionCanBacktrack[154]);

            int LA154_0 = input.LA(1);

            if ( (LA154_0==PLUS||(LA154_0>=GREATER && LA154_0<=TILDE)) ) {
                alt154=1;
            }
            } finally {dbg.exitDecision(154);}

            switch (alt154) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:9: combinator ( ws )?
                    {
                    dbg.location(696,9);
                    pushFollow(FOLLOW_combinator_in_selector3288);
                    combinator();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(696,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:20: ( ws )?
                    int alt153=2;
                    try { dbg.enterSubRule(153);
                    try { dbg.enterDecision(153, decisionCanBacktrack[153]);

                    int LA153_0 = input.LA(1);

                    if ( ((LA153_0>=WS && LA153_0<=COMMENT)) ) {
                        alt153=1;
                    }
                    } finally {dbg.exitDecision(153);}

                    switch (alt153) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:20: ws
                            {
                            dbg.location(696,20);
                            pushFollow(FOLLOW_ws_in_selector3290);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(153);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(154);}

            dbg.location(696,26);
            pushFollow(FOLLOW_simpleSelectorSequence_in_selector3295);
            simpleSelectorSequence();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(696,49);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:49: ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )*
            try { dbg.enterSubRule(159);

            loop159:
            do {
                int alt159=2;
                try { dbg.enterDecision(159, decisionCanBacktrack[159]);

                try {
                    isCyclicDecision = true;
                    alt159 = dfa159.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(159);}

                switch (alt159) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:51: ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence
            	    {
            	    dbg.location(696,51);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:51: ( ( ( ws )? combinator ( ws )? ) | ( ws )? )
            	    int alt158=2;
            	    try { dbg.enterSubRule(158);
            	    try { dbg.enterDecision(158, decisionCanBacktrack[158]);

            	    try {
            	        isCyclicDecision = true;
            	        alt158 = dfa158.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(158);}

            	    switch (alt158) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:52: ( ( ws )? combinator ( ws )? )
            	            {
            	            dbg.location(696,52);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:52: ( ( ws )? combinator ( ws )? )
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:53: ( ws )? combinator ( ws )?
            	            {
            	            dbg.location(696,53);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:53: ( ws )?
            	            int alt155=2;
            	            try { dbg.enterSubRule(155);
            	            try { dbg.enterDecision(155, decisionCanBacktrack[155]);

            	            int LA155_0 = input.LA(1);

            	            if ( ((LA155_0>=WS && LA155_0<=COMMENT)) ) {
            	                alt155=1;
            	            }
            	            } finally {dbg.exitDecision(155);}

            	            switch (alt155) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:53: ws
            	                    {
            	                    dbg.location(696,53);
            	                    pushFollow(FOLLOW_ws_in_selector3301);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(155);}

            	            dbg.location(696,57);
            	            pushFollow(FOLLOW_combinator_in_selector3304);
            	            combinator();

            	            state._fsp--;
            	            if (state.failed) return ;
            	            dbg.location(696,68);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:68: ( ws )?
            	            int alt156=2;
            	            try { dbg.enterSubRule(156);
            	            try { dbg.enterDecision(156, decisionCanBacktrack[156]);

            	            int LA156_0 = input.LA(1);

            	            if ( ((LA156_0>=WS && LA156_0<=COMMENT)) ) {
            	                alt156=1;
            	            }
            	            } finally {dbg.exitDecision(156);}

            	            switch (alt156) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:68: ws
            	                    {
            	                    dbg.location(696,68);
            	                    pushFollow(FOLLOW_ws_in_selector3306);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(156);}


            	            }


            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:73: ( ws )?
            	            {
            	            dbg.location(696,73);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:73: ( ws )?
            	            int alt157=2;
            	            try { dbg.enterSubRule(157);
            	            try { dbg.enterDecision(157, decisionCanBacktrack[157]);

            	            int LA157_0 = input.LA(1);

            	            if ( ((LA157_0>=WS && LA157_0<=COMMENT)) ) {
            	                alt157=1;
            	            }
            	            } finally {dbg.exitDecision(157);}

            	            switch (alt157) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:73: ws
            	                    {
            	                    dbg.location(696,73);
            	                    pushFollow(FOLLOW_ws_in_selector3310);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(157);}


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(158);}

            	    dbg.location(696,78);
            	    pushFollow(FOLLOW_simpleSelectorSequence_in_selector3314);
            	    simpleSelectorSequence();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop159;
                }
            } while (true);
            } finally {dbg.exitSubRule(159);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(697, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "selector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "selector"


    // $ANTLR start "combinator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:699:1: combinator : ( PLUS | GREATER | TILDE );
    public final void combinator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "combinator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(699, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:700:5: ( PLUS | GREATER | TILDE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(700,5);
            if ( input.LA(1)==PLUS||(input.LA(1)>=GREATER && input.LA(1)<=TILDE) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(702, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "combinator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "combinator"


    // $ANTLR start "simpleSelectorSequence"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:704:1: simpleSelectorSequence : ( ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* ) | elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* );
    public final void simpleSelectorSequence() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "simpleSelectorSequence");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(704, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:705:2: ( ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* ) | elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
            int alt164=2;
            try { dbg.enterDecision(164, decisionCanBacktrack[164]);

            int LA164_0 = input.LA(1);

            if ( (LA164_0==IDENT||LA164_0==GEN||(LA164_0>=STAR && LA164_0<=PIPE)||LA164_0==LESS_AND) ) {
                alt164=1;
            }
            else if ( (LA164_0==COLON||(LA164_0>=HASH_SYMBOL && LA164_0<=SASS_EXTEND_ONLY_SELECTOR)||LA164_0==AT_SIGN) ) {
                alt164=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 164, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(164);}

            switch (alt164) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:2: ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
                    {
                    dbg.location(706,2);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:2: ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:4: typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    {
                    dbg.location(706,4);
                    pushFollow(FOLLOW_typeSelector_in_simpleSelectorSequence3362);
                    typeSelector();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(706,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:17: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    try { dbg.enterSubRule(161);

                    loop161:
                    do {
                        int alt161=2;
                        try { dbg.enterDecision(161, decisionCanBacktrack[161]);

                        try {
                            isCyclicDecision = true;
                            alt161 = dfa161.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(161);}

                        switch (alt161) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:18: ( ( ws )? esPred )=> ( ws )? elementSubsequent
                    	    {
                    	    dbg.location(706,32);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:32: ( ws )?
                    	    int alt160=2;
                    	    try { dbg.enterSubRule(160);
                    	    try { dbg.enterDecision(160, decisionCanBacktrack[160]);

                    	    int LA160_0 = input.LA(1);

                    	    if ( ((LA160_0>=WS && LA160_0<=COMMENT)) ) {
                    	        alt160=1;
                    	    }
                    	    } finally {dbg.exitDecision(160);}

                    	    switch (alt160) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:32: ws
                    	            {
                    	            dbg.location(706,32);
                    	            pushFollow(FOLLOW_ws_in_simpleSelectorSequence3372);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(160);}

                    	    dbg.location(706,36);
                    	    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3375);
                    	    elementSubsequent();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop161;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(161);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:2: elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    {
                    dbg.location(708,2);
                    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3385);
                    elementSubsequent();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(708,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:20: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    try { dbg.enterSubRule(163);

                    loop163:
                    do {
                        int alt163=2;
                        try { dbg.enterDecision(163, decisionCanBacktrack[163]);

                        try {
                            isCyclicDecision = true;
                            alt163 = dfa163.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(163);}

                        switch (alt163) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:21: ( ( ws )? esPred )=> ( ws )? elementSubsequent
                    	    {
                    	    dbg.location(708,35);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:35: ( ws )?
                    	    int alt162=2;
                    	    try { dbg.enterSubRule(162);
                    	    try { dbg.enterDecision(162, decisionCanBacktrack[162]);

                    	    int LA162_0 = input.LA(1);

                    	    if ( ((LA162_0>=WS && LA162_0<=COMMENT)) ) {
                    	        alt162=1;
                    	    }
                    	    } finally {dbg.exitDecision(162);}

                    	    switch (alt162) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:35: ws
                    	            {
                    	            dbg.location(708,35);
                    	            pushFollow(FOLLOW_ws_in_simpleSelectorSequence3395);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(162);}

                    	    dbg.location(708,39);
                    	    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3398);
                    	    elementSubsequent();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop163;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(163);}


                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                        reportError(rce);
                        consumeUntil(input, BitSet.of(LBRACE));
                    
        }
        finally {
        }
        dbg.location(709, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "simpleSelectorSequence");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "simpleSelectorSequence"


    // $ANTLR start "esPred"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:716:1: esPred : ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR );
    public final void esPred() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "esPred");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(716, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:717:5: ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(717,5);
            if ( input.LA(1)==COLON||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=SASS_EXTEND_ONLY_SELECTOR) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(718, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "esPred");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "esPred"


    // $ANTLR start "typeSelector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:720:1: typeSelector options {k=2; } : ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName ;
    public final void typeSelector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "typeSelector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(720, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:722:3: ( ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:722:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName
            {
            dbg.location(722,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:722:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )?
            int alt165=2;
            try { dbg.enterSubRule(165);
            try { dbg.enterDecision(165, decisionCanBacktrack[165]);

            int LA165_0 = input.LA(1);

            if ( (LA165_0==IDENT) ) {
                int LA165_1 = input.LA(2);

                if ( (synpred32_Css3()) ) {
                    alt165=1;
                }
            }
            else if ( (LA165_0==STAR) ) {
                int LA165_2 = input.LA(2);

                if ( (synpred32_Css3()) ) {
                    alt165=1;
                }
            }
            else if ( (LA165_0==PIPE) && (synpred32_Css3())) {
                alt165=1;
            }
            } finally {dbg.exitDecision(165);}

            switch (alt165) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:722:7: ( ( IDENT | STAR )? PIPE )=> namespacePrefix
                    {
                    dbg.location(722,31);
                    pushFollow(FOLLOW_namespacePrefix_in_typeSelector3487);
                    namespacePrefix();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(165);}

            dbg.location(722,49);
            pushFollow(FOLLOW_elementName_in_typeSelector3491);
            elementName();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(723, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "typeSelector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "typeSelector"


    // $ANTLR start "namespacePrefix"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:725:1: namespacePrefix : ( namespacePrefixName | STAR )? PIPE ;
    public final void namespacePrefix() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespacePrefix");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(725, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:726:3: ( ( namespacePrefixName | STAR )? PIPE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:726:5: ( namespacePrefixName | STAR )? PIPE
            {
            dbg.location(726,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:726:5: ( namespacePrefixName | STAR )?
            int alt166=3;
            try { dbg.enterSubRule(166);
            try { dbg.enterDecision(166, decisionCanBacktrack[166]);

            int LA166_0 = input.LA(1);

            if ( (LA166_0==IDENT) ) {
                alt166=1;
            }
            else if ( (LA166_0==STAR) ) {
                alt166=2;
            }
            } finally {dbg.exitDecision(166);}

            switch (alt166) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:726:7: namespacePrefixName
                    {
                    dbg.location(726,7);
                    pushFollow(FOLLOW_namespacePrefixName_in_namespacePrefix3506);
                    namespacePrefixName();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:726:29: STAR
                    {
                    dbg.location(726,29);
                    match(input,STAR,FOLLOW_STAR_in_namespacePrefix3510); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(166);}

            dbg.location(726,36);
            match(input,PIPE,FOLLOW_PIPE_in_namespacePrefix3514); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(727, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespacePrefix");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespacePrefix"


    // $ANTLR start "elementSubsequent"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:1: elementSubsequent : ({...}? sass_extend_only_selector | {...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo ) ;
    public final void elementSubsequent() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "elementSubsequent");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(730, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:731:5: ( ({...}? sass_extend_only_selector | {...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:732:5: ({...}? sass_extend_only_selector | {...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo )
            {
            dbg.location(732,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:732:5: ({...}? sass_extend_only_selector | {...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo )
            int alt167=6;
            try { dbg.enterSubRule(167);
            try { dbg.enterDecision(167, decisionCanBacktrack[167]);

            switch ( input.LA(1) ) {
            case SASS_EXTEND_ONLY_SELECTOR:
                {
                alt167=1;
                }
                break;
            case AT_SIGN:
                {
                alt167=2;
                }
                break;
            case HASH_SYMBOL:
            case HASH:
                {
                alt167=3;
                }
                break;
            case DOT:
                {
                alt167=4;
                }
                break;
            case LBRACKET:
                {
                alt167=5;
                }
                break;
            case COLON:
            case DCOLON:
                {
                alt167=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(167);}

            switch (alt167) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:733:9: {...}? sass_extend_only_selector
                    {
                    dbg.location(733,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "elementSubsequent", "isScssSource()");
                    }
                    dbg.location(733,27);
                    pushFollow(FOLLOW_sass_extend_only_selector_in_elementSubsequent3546);
                    sass_extend_only_selector();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:734:11: {...}? less_selector_interpolation
                    {
                    dbg.location(734,11);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "elementSubsequent", "isLessSource()");
                    }
                    dbg.location(734,29);
                    pushFollow(FOLLOW_less_selector_interpolation_in_elementSubsequent3560);
                    less_selector_interpolation();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:735:8: cssId
                    {
                    dbg.location(735,8);
                    pushFollow(FOLLOW_cssId_in_elementSubsequent3570);
                    cssId();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:736:8: cssClass
                    {
                    dbg.location(736,8);
                    pushFollow(FOLLOW_cssClass_in_elementSubsequent3579);
                    cssClass();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:737:11: slAttribute
                    {
                    dbg.location(737,11);
                    pushFollow(FOLLOW_slAttribute_in_elementSubsequent3591);
                    slAttribute();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:738:11: pseudo
                    {
                    dbg.location(738,11);
                    pushFollow(FOLLOW_pseudo_in_elementSubsequent3603);
                    pseudo();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(167);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(740, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "elementSubsequent");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "elementSubsequent"


    // $ANTLR start "cssId"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:743:1: cssId : ( HASH | ( HASH_SYMBOL ( NAME | {...}? less_selector_interpolation ) ) );
    public final void cssId() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cssId");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(743, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:744:5: ( HASH | ( HASH_SYMBOL ( NAME | {...}? less_selector_interpolation ) ) )
            int alt169=2;
            try { dbg.enterDecision(169, decisionCanBacktrack[169]);

            int LA169_0 = input.LA(1);

            if ( (LA169_0==HASH) ) {
                alt169=1;
            }
            else if ( (LA169_0==HASH_SYMBOL) ) {
                alt169=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(169);}

            switch (alt169) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:744:7: HASH
                    {
                    dbg.location(744,7);
                    match(input,HASH,FOLLOW_HASH_in_cssId3627); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:9: ( HASH_SYMBOL ( NAME | {...}? less_selector_interpolation ) )
                    {
                    dbg.location(746,9);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:9: ( HASH_SYMBOL ( NAME | {...}? less_selector_interpolation ) )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:11: HASH_SYMBOL ( NAME | {...}? less_selector_interpolation )
                    {
                    dbg.location(746,11);
                    match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_cssId3647); if (state.failed) return ;
                    dbg.location(747,13);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:747:13: ( NAME | {...}? less_selector_interpolation )
                    int alt168=2;
                    try { dbg.enterSubRule(168);
                    try { dbg.enterDecision(168, decisionCanBacktrack[168]);

                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==NAME) ) {
                        alt168=1;
                    }
                    else if ( (LA168_0==AT_SIGN) ) {
                        alt168=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 168, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(168);}

                    switch (alt168) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:747:15: NAME
                            {
                            dbg.location(747,15);
                            match(input,NAME,FOLLOW_NAME_in_cssId3663); if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:748:17: {...}? less_selector_interpolation
                            {
                            dbg.location(748,17);
                            if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                throw new FailedPredicateException(input, "cssId", "isLessSource()");
                            }
                            dbg.location(748,35);
                            pushFollow(FOLLOW_less_selector_interpolation_in_cssId3683);
                            less_selector_interpolation();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(168);}


                    }


                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(WS, IDENT, LBRACE));
                
        }
        finally {
        }
        dbg.location(751, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cssId");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cssId"


    // $ANTLR start "cssClass"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:757:1: cssClass : DOT ( IDENT | LESS_IMPORT_TYPE | GEN | {...}? less_selector_interpolation ) ;
    public final void cssClass() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cssClass");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(757, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:758:5: ( DOT ( IDENT | LESS_IMPORT_TYPE | GEN | {...}? less_selector_interpolation ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:758:7: DOT ( IDENT | LESS_IMPORT_TYPE | GEN | {...}? less_selector_interpolation )
            {
            dbg.location(758,7);
            match(input,DOT,FOLLOW_DOT_in_cssClass3734); if (state.failed) return ;
            dbg.location(759,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:759:9: ( IDENT | LESS_IMPORT_TYPE | GEN | {...}? less_selector_interpolation )
            int alt170=4;
            try { dbg.enterSubRule(170);
            try { dbg.enterDecision(170, decisionCanBacktrack[170]);

            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt170=1;
                }
                break;
            case LESS_IMPORT_TYPE:
                {
                alt170=2;
                }
                break;
            case GEN:
                {
                alt170=3;
                }
                break;
            case AT_SIGN:
                {
                alt170=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(170);}

            switch (alt170) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:760:13: IDENT
                    {
                    dbg.location(760,13);
                    match(input,IDENT,FOLLOW_IDENT_in_cssClass3758); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:761:15: LESS_IMPORT_TYPE
                    {
                    dbg.location(761,15);
                    match(input,LESS_IMPORT_TYPE,FOLLOW_LESS_IMPORT_TYPE_in_cssClass3774); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:762:15: GEN
                    {
                    dbg.location(762,15);
                    match(input,GEN,FOLLOW_GEN_in_cssClass3790); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:15: {...}? less_selector_interpolation
                    {
                    dbg.location(763,15);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cssClass", "isLessSource()");
                    }
                    dbg.location(763,33);
                    pushFollow(FOLLOW_less_selector_interpolation_in_cssClass3808);
                    less_selector_interpolation();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(170);}


            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(WS, IDENT, LBRACE));
                
        }
        finally {
        }
        dbg.location(765, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cssClass");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cssClass"


    // $ANTLR start "elementName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:772:1: elementName : ( IDENT | GEN | LESS_AND | STAR );
    public final void elementName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "elementName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(772, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:5: ( IDENT | GEN | LESS_AND | STAR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(773,5);
            if ( input.LA(1)==IDENT||input.LA(1)==GEN||input.LA(1)==STAR||input.LA(1)==LESS_AND ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(774, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "elementName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "elementName"


    // $ANTLR start "slAttribute"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:776:1: slAttribute : LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET ;
    public final void slAttribute() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttribute");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(776, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:5: ( LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:7: LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET
            {
            dbg.location(777,7);
            match(input,LBRACKET,FOLLOW_LBRACKET_in_slAttribute3875); if (state.failed) return ;
            dbg.location(778,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:6: ( namespacePrefix )?
            int alt171=2;
            try { dbg.enterSubRule(171);
            try { dbg.enterDecision(171, decisionCanBacktrack[171]);

            int LA171_0 = input.LA(1);

            if ( (LA171_0==IDENT) ) {
                int LA171_1 = input.LA(2);

                if ( (LA171_1==PIPE) ) {
                    alt171=1;
                }
            }
            else if ( ((LA171_0>=STAR && LA171_0<=PIPE)) ) {
                alt171=1;
            }
            } finally {dbg.exitDecision(171);}

            switch (alt171) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:6: namespacePrefix
                    {
                    dbg.location(778,6);
                    pushFollow(FOLLOW_namespacePrefix_in_slAttribute3882);
                    namespacePrefix();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(171);}

            dbg.location(778,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:23: ( ws )?
            int alt172=2;
            try { dbg.enterSubRule(172);
            try { dbg.enterDecision(172, decisionCanBacktrack[172]);

            int LA172_0 = input.LA(1);

            if ( ((LA172_0>=WS && LA172_0<=COMMENT)) ) {
                alt172=1;
            }
            } finally {dbg.exitDecision(172);}

            switch (alt172) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:23: ws
                    {
                    dbg.location(778,23);
                    pushFollow(FOLLOW_ws_in_slAttribute3885);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(172);}

            dbg.location(779,9);
            pushFollow(FOLLOW_slAttributeName_in_slAttribute3896);
            slAttributeName();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(779,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:25: ( ws )?
            int alt173=2;
            try { dbg.enterSubRule(173);
            try { dbg.enterDecision(173, decisionCanBacktrack[173]);

            int LA173_0 = input.LA(1);

            if ( ((LA173_0>=WS && LA173_0<=COMMENT)) ) {
                alt173=1;
            }
            } finally {dbg.exitDecision(173);}

            switch (alt173) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:25: ws
                    {
                    dbg.location(779,25);
                    pushFollow(FOLLOW_ws_in_slAttribute3898);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(173);}

            dbg.location(781,13);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:781:13: ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )?
            int alt176=2;
            try { dbg.enterSubRule(176);
            try { dbg.enterDecision(176, decisionCanBacktrack[176]);

            int LA176_0 = input.LA(1);

            if ( ((LA176_0>=OPEQ && LA176_0<=CONTAINS)) ) {
                alt176=1;
            }
            } finally {dbg.exitDecision(176);}

            switch (alt176) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:17: ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )?
                    {
                    dbg.location(782,17);
                    if ( (input.LA(1)>=OPEQ && input.LA(1)<=CONTAINS) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(790,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:790:17: ( ws )?
                    int alt174=2;
                    try { dbg.enterSubRule(174);
                    try { dbg.enterDecision(174, decisionCanBacktrack[174]);

                    int LA174_0 = input.LA(1);

                    if ( ((LA174_0>=WS && LA174_0<=COMMENT)) ) {
                        alt174=1;
                    }
                    } finally {dbg.exitDecision(174);}

                    switch (alt174) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:790:17: ws
                            {
                            dbg.location(790,17);
                            pushFollow(FOLLOW_ws_in_slAttribute4112);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(174);}

                    dbg.location(791,17);
                    pushFollow(FOLLOW_slAttributeValue_in_slAttribute4131);
                    slAttributeValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(792,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:17: ( ws )?
                    int alt175=2;
                    try { dbg.enterSubRule(175);
                    try { dbg.enterDecision(175, decisionCanBacktrack[175]);

                    int LA175_0 = input.LA(1);

                    if ( ((LA175_0>=WS && LA175_0<=COMMENT)) ) {
                        alt175=1;
                    }
                    } finally {dbg.exitDecision(175);}

                    switch (alt175) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:17: ws
                            {
                            dbg.location(792,17);
                            pushFollow(FOLLOW_ws_in_slAttribute4149);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(175);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(176);}

            dbg.location(795,7);
            match(input,RBRACKET,FOLLOW_RBRACKET_in_slAttribute4174); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(IDENT, LBRACE));
                
        }
        finally {
        }
        dbg.location(796, 1);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttribute");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttribute"


    // $ANTLR start "slAttributeName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:803:1: slAttributeName : IDENT ;
    public final void slAttributeName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttributeName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(803, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:804:2: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:804:4: IDENT
            {
            dbg.location(804,4);
            match(input,IDENT,FOLLOW_IDENT_in_slAttributeName4190); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(805, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttributeName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttributeName"


    // $ANTLR start "slAttributeValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:807:1: slAttributeValue : ( IDENT | STRING ) ;
    public final void slAttributeValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttributeValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(807, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:808:2: ( ( IDENT | STRING ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:809:2: ( IDENT | STRING )
            {
            dbg.location(809,2);
            if ( (input.LA(1)>=IDENT && input.LA(1)<=STRING) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(813, 9);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttributeValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttributeValue"


    // $ANTLR start "pseudo"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:815:1: pseudo : ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) ) ;
    public final void pseudo() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "pseudo");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(815, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:816:5: ( ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:816:7: ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) )
            {
            dbg.location(816,7);
            if ( input.LA(1)==COLON||input.LA(1)==DCOLON ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(817,14);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:14: ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) )
            int alt185=2;
            try { dbg.enterSubRule(185);
            try { dbg.enterDecision(185, decisionCanBacktrack[185]);

            int LA185_0 = input.LA(1);

            if ( (LA185_0==IDENT||LA185_0==GEN) ) {
                alt185=1;
            }
            else if ( (LA185_0==NOT) ) {
                alt185=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(185);}

            switch (alt185) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
                    {
                    dbg.location(818,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:819:21: ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
                    {
                    dbg.location(819,21);
                    if ( input.LA(1)==IDENT||input.LA(1)==GEN ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(820,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:820:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
                    int alt181=2;
                    try { dbg.enterSubRule(181);
                    try { dbg.enterDecision(181, decisionCanBacktrack[181]);

                    try {
                        isCyclicDecision = true;
                        alt181 = dfa181.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(181);}

                    switch (alt181) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:25: ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN
                            {
                            dbg.location(821,25);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:25: ( ws )?
                            int alt177=2;
                            try { dbg.enterSubRule(177);
                            try { dbg.enterDecision(177, decisionCanBacktrack[177]);

                            int LA177_0 = input.LA(1);

                            if ( ((LA177_0>=WS && LA177_0<=COMMENT)) ) {
                                alt177=1;
                            }
                            } finally {dbg.exitDecision(177);}

                            switch (alt177) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:25: ws
                                    {
                                    dbg.location(821,25);
                                    pushFollow(FOLLOW_ws_in_pseudo4382);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(177);}

                            dbg.location(821,29);
                            match(input,LPAREN,FOLLOW_LPAREN_in_pseudo4385); if (state.failed) return ;
                            dbg.location(821,36);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:36: ( ws )?
                            int alt178=2;
                            try { dbg.enterSubRule(178);
                            try { dbg.enterDecision(178, decisionCanBacktrack[178]);

                            int LA178_0 = input.LA(1);

                            if ( ((LA178_0>=WS && LA178_0<=COMMENT)) ) {
                                alt178=1;
                            }
                            } finally {dbg.exitDecision(178);}

                            switch (alt178) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:36: ws
                                    {
                                    dbg.location(821,36);
                                    pushFollow(FOLLOW_ws_in_pseudo4387);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(178);}

                            dbg.location(821,40);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:40: ( ( expression ( ws )? ) | STAR )?
                            int alt180=3;
                            try { dbg.enterSubRule(180);
                            try { dbg.enterDecision(180, decisionCanBacktrack[180]);

                            int LA180_0 = input.LA(1);

                            if ( (LA180_0==NAMESPACE_SYM||(LA180_0>=IDENT && LA180_0<=IMPORT_SYM)||LA180_0==MEDIA_SYM||LA180_0==GEN||(LA180_0>=AT_IDENT && LA180_0<=MOZ_DOCUMENT_SYM)||(LA180_0>=WEBKIT_KEYFRAMES_SYM && LA180_0<=RIGHTBOTTOM_SYM)||(LA180_0>=MINUS && LA180_0<=SASS_AT_ROOT)||(LA180_0>=TILDE && LA180_0<=HASH)||(LA180_0>=SASS_VAR && LA180_0<=PERCENTAGE_SYMBOL)||(LA180_0>=SASS_CONTENT && LA180_0<=SASS_WHILE)) ) {
                                alt180=1;
                            }
                            else if ( (LA180_0==STAR) ) {
                                alt180=2;
                            }
                            } finally {dbg.exitDecision(180);}

                            switch (alt180) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:42: ( expression ( ws )? )
                                    {
                                    dbg.location(821,42);
                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:42: ( expression ( ws )? )
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:43: expression ( ws )?
                                    {
                                    dbg.location(821,43);
                                    pushFollow(FOLLOW_expression_in_pseudo4393);
                                    expression();

                                    state._fsp--;
                                    if (state.failed) return ;
                                    dbg.location(821,54);
                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:54: ( ws )?
                                    int alt179=2;
                                    try { dbg.enterSubRule(179);
                                    try { dbg.enterDecision(179, decisionCanBacktrack[179]);

                                    int LA179_0 = input.LA(1);

                                    if ( ((LA179_0>=WS && LA179_0<=COMMENT)) ) {
                                        alt179=1;
                                    }
                                    } finally {dbg.exitDecision(179);}

                                    switch (alt179) {
                                        case 1 :
                                            dbg.enterAlt(1);

                                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:54: ws
                                            {
                                            dbg.location(821,54);
                                            pushFollow(FOLLOW_ws_in_pseudo4395);
                                            ws();

                                            state._fsp--;
                                            if (state.failed) return ;

                                            }
                                            break;

                                    }
                                    } finally {dbg.exitSubRule(179);}


                                    }


                                    }
                                    break;
                                case 2 :
                                    dbg.enterAlt(2);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:61: STAR
                                    {
                                    dbg.location(821,61);
                                    match(input,STAR,FOLLOW_STAR_in_pseudo4401); if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(180);}

                            dbg.location(821,69);
                            match(input,RPAREN,FOLLOW_RPAREN_in_pseudo4406); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(181);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:825:17: ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN )
                    {
                    dbg.location(825,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:825:17: ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:825:19: NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN
                    {
                    dbg.location(825,19);
                    match(input,NOT,FOLLOW_NOT_in_pseudo4485); if (state.failed) return ;
                    dbg.location(825,23);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:825:23: ( ws )?
                    int alt182=2;
                    try { dbg.enterSubRule(182);
                    try { dbg.enterDecision(182, decisionCanBacktrack[182]);

                    int LA182_0 = input.LA(1);

                    if ( ((LA182_0>=WS && LA182_0<=COMMENT)) ) {
                        alt182=1;
                    }
                    } finally {dbg.exitDecision(182);}

                    switch (alt182) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:825:23: ws
                            {
                            dbg.location(825,23);
                            pushFollow(FOLLOW_ws_in_pseudo4487);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(182);}

                    dbg.location(825,27);
                    match(input,LPAREN,FOLLOW_LPAREN_in_pseudo4490); if (state.failed) return ;
                    dbg.location(825,34);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:825:34: ( ws )?
                    int alt183=2;
                    try { dbg.enterSubRule(183);
                    try { dbg.enterDecision(183, decisionCanBacktrack[183]);

                    int LA183_0 = input.LA(1);

                    if ( ((LA183_0>=WS && LA183_0<=COMMENT)) ) {
                        alt183=1;
                    }
                    } finally {dbg.exitDecision(183);}

                    switch (alt183) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:825:34: ws
                            {
                            dbg.location(825,34);
                            pushFollow(FOLLOW_ws_in_pseudo4492);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(183);}

                    dbg.location(825,38);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:825:38: ( simpleSelectorSequence )?
                    int alt184=2;
                    try { dbg.enterSubRule(184);
                    try { dbg.enterDecision(184, decisionCanBacktrack[184]);

                    int LA184_0 = input.LA(1);

                    if ( (LA184_0==IDENT||(LA184_0>=GEN && LA184_0<=COLON)||(LA184_0>=HASH_SYMBOL && LA184_0<=PIPE)||LA184_0==LESS_AND||LA184_0==AT_SIGN) ) {
                        alt184=1;
                    }
                    } finally {dbg.exitDecision(184);}

                    switch (alt184) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:825:38: simpleSelectorSequence
                            {
                            dbg.location(825,38);
                            pushFollow(FOLLOW_simpleSelectorSequence_in_pseudo4495);
                            simpleSelectorSequence();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(184);}

                    dbg.location(825,62);
                    match(input,RPAREN,FOLLOW_RPAREN_in_pseudo4498); if (state.failed) return ;

                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(185);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(827, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pseudo");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "pseudo"


    // $ANTLR start "propertyDeclaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:829:1: propertyDeclaration : ( ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? | {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue );
    public final void propertyDeclaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "propertyDeclaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(829, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:830:5: ( ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? | {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue )
            int alt194=2;
            try { dbg.enterDecision(194, decisionCanBacktrack[194]);

            try {
                isCyclicDecision = true;
                alt194 = dfa194.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(194);}

            switch (alt194) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:5: ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )?
                    {
                    dbg.location(831,5);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:5: ( STAR )?
                    int alt186=2;
                    try { dbg.enterSubRule(186);
                    try { dbg.enterDecision(186, decisionCanBacktrack[186]);

                    int LA186_0 = input.LA(1);

                    if ( (LA186_0==STAR) ) {
                        alt186=1;
                    }
                    } finally {dbg.exitDecision(186);}

                    switch (alt186) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:5: STAR
                            {
                            dbg.location(831,5);
                            match(input,STAR,FOLLOW_STAR_in_propertyDeclaration4536); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(186);}

                    dbg.location(831,11);
                    pushFollow(FOLLOW_property_in_propertyDeclaration4539);
                    property();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(831,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:20: ( ws )?
                    int alt187=2;
                    try { dbg.enterSubRule(187);
                    try { dbg.enterDecision(187, decisionCanBacktrack[187]);

                    int LA187_0 = input.LA(1);

                    if ( ((LA187_0>=WS && LA187_0<=COMMENT)) ) {
                        alt187=1;
                    }
                    } finally {dbg.exitDecision(187);}

                    switch (alt187) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:20: ws
                            {
                            dbg.location(831,20);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration4541);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(187);}

                    dbg.location(831,24);
                    match(input,COLON,FOLLOW_COLON_in_propertyDeclaration4544); if (state.failed) return ;
                    dbg.location(831,30);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:30: ( ws )?
                    int alt188=2;
                    try { dbg.enterSubRule(188);
                    try { dbg.enterDecision(188, decisionCanBacktrack[188]);

                    int LA188_0 = input.LA(1);

                    if ( ((LA188_0>=WS && LA188_0<=COMMENT)) ) {
                        alt188=1;
                    }
                    } finally {dbg.exitDecision(188);}

                    switch (alt188) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:30: ws
                            {
                            dbg.location(831,30);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration4546);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(188);}

                    dbg.location(831,34);
                    pushFollow(FOLLOW_propertyValue_in_propertyDeclaration4549);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(831,48);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:48: ( ( ws )? prio )?
                    int alt190=2;
                    try { dbg.enterSubRule(190);
                    try { dbg.enterDecision(190, decisionCanBacktrack[190]);

                    try {
                        isCyclicDecision = true;
                        alt190 = dfa190.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(190);}

                    switch (alt190) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:49: ( ws )? prio
                            {
                            dbg.location(831,49);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:49: ( ws )?
                            int alt189=2;
                            try { dbg.enterSubRule(189);
                            try { dbg.enterDecision(189, decisionCanBacktrack[189]);

                            int LA189_0 = input.LA(1);

                            if ( ((LA189_0>=WS && LA189_0<=COMMENT)) ) {
                                alt189=1;
                            }
                            } finally {dbg.exitDecision(189);}

                            switch (alt189) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:49: ws
                                    {
                                    dbg.location(831,49);
                                    pushFollow(FOLLOW_ws_in_propertyDeclaration4552);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(189);}

                            dbg.location(831,53);
                            pushFollow(FOLLOW_prio_in_propertyDeclaration4555);
                            prio();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(190);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:7: {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue
                    {
                    dbg.location(832,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "propertyDeclaration", "isCssPreprocessorSource()");
                    }
                    dbg.location(832,36);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:36: ( STAR )?
                    int alt191=2;
                    try { dbg.enterSubRule(191);
                    try { dbg.enterDecision(191, decisionCanBacktrack[191]);

                    int LA191_0 = input.LA(1);

                    if ( (LA191_0==STAR) ) {
                        alt191=1;
                    }
                    } finally {dbg.exitDecision(191);}

                    switch (alt191) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:36: STAR
                            {
                            dbg.location(832,36);
                            match(input,STAR,FOLLOW_STAR_in_propertyDeclaration4567); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(191);}

                    dbg.location(832,42);
                    pushFollow(FOLLOW_property_in_propertyDeclaration4570);
                    property();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(832,51);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:51: ( ws )?
                    int alt192=2;
                    try { dbg.enterSubRule(192);
                    try { dbg.enterDecision(192, decisionCanBacktrack[192]);

                    int LA192_0 = input.LA(1);

                    if ( ((LA192_0>=WS && LA192_0<=COMMENT)) ) {
                        alt192=1;
                    }
                    } finally {dbg.exitDecision(192);}

                    switch (alt192) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:51: ws
                            {
                            dbg.location(832,51);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration4572);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(192);}

                    dbg.location(832,55);
                    match(input,COLON,FOLLOW_COLON_in_propertyDeclaration4575); if (state.failed) return ;
                    dbg.location(832,61);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:61: ( ws )?
                    int alt193=2;
                    try { dbg.enterSubRule(193);
                    try { dbg.enterDecision(193, decisionCanBacktrack[193]);

                    int LA193_0 = input.LA(1);

                    if ( ((LA193_0>=WS && LA193_0<=COMMENT)) ) {
                        alt193=1;
                    }
                    } finally {dbg.exitDecision(193);}

                    switch (alt193) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:61: ws
                            {
                            dbg.location(832,61);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration4577);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(193);}

                    dbg.location(832,65);
                    pushFollow(FOLLOW_cp_propertyValue_in_propertyDeclaration4580);
                    cp_propertyValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    //recovery: if an mismatched token occures inside a declaration is found,
                    //then skip all tokens until an end of the rule is found represented by right curly brace
                    consumeUntil(input, BitSet.of(SEMI, RBRACE));
                
        }
        finally {
        }
        dbg.location(833, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "propertyDeclaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "propertyDeclaration"


    // $ANTLR start "cp_propertyValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:842:1: cp_propertyValue : ({...}? cp_expression_list | propertyValue );
    public final void cp_propertyValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_propertyValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(842, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:843:5: ({...}? cp_expression_list | propertyValue )
            int alt195=2;
            try { dbg.enterDecision(195, decisionCanBacktrack[195]);

            try {
                isCyclicDecision = true;
                alt195 = dfa195.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(195);}

            switch (alt195) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:844:5: {...}? cp_expression_list
                    {
                    dbg.location(844,5);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_propertyValue", "isCssPreprocessorSource()");
                    }
                    dbg.location(844,34);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_propertyValue4614);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:845:7: propertyValue
                    {
                    dbg.location(845,7);
                    pushFollow(FOLLOW_propertyValue_in_cp_propertyValue4622);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(846, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_propertyValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_propertyValue"


    // $ANTLR start "propertyValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:848:1: propertyValue : expression ;
    public final void propertyValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "propertyValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(848, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:849:2: ( expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:850:9: expression
            {
            dbg.location(850,9);
            pushFollow(FOLLOW_expression_in_propertyValue4644);
            expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(851, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "propertyValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "propertyValue"


    // $ANTLR start "expressionPredicate"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:854:1: expressionPredicate options {k=1; } : (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) ;
    public final void expressionPredicate() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "expressionPredicate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(854, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:856:5: ( (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:857:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE )
            {
            dbg.location(857,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:857:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+
            int cnt196=0;
            try { dbg.enterSubRule(196);

            loop196:
            do {
                int alt196=2;
                try { dbg.enterDecision(196, decisionCanBacktrack[196]);

                int LA196_0 = input.LA(1);

                if ( (LA196_0==NAMESPACE_SYM||(LA196_0>=IDENT && LA196_0<=MEDIA_SYM)||(LA196_0>=IMPORTANT_SYM && LA196_0<=COLON)||(LA196_0>=MOZ_DOCUMENT_SYM && LA196_0<=RIGHTBOTTOM_SYM)||(LA196_0>=MINUS && LA196_0<=SASS_EXTEND_ONLY_SELECTOR)||(LA196_0>=PIPE && LA196_0<=RBRACKET)||(LA196_0>=NUMBER && LA196_0<=LINE_COMMENT)) ) {
                    alt196=1;
                }


                } finally {dbg.exitDecision(196);}

                switch (alt196) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:857:7: ~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR )
            	    {
            	    dbg.location(857,7);
            	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=COLON)||(input.LA(1)>=MOZ_DOCUMENT_SYM && input.LA(1)<=RIGHTBOTTOM_SYM)||(input.LA(1)>=MINUS && input.LA(1)<=SASS_EXTEND_ONLY_SELECTOR)||(input.LA(1)>=PIPE && input.LA(1)<=RBRACKET)||(input.LA(1)>=NUMBER && input.LA(1)<=LINE_COMMENT) ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt196 >= 1 ) break loop196;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(196, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt196++;
            } while (true);
            } finally {dbg.exitSubRule(196);}

            dbg.location(857,76);
            if ( input.LA(1)==SEMI||input.LA(1)==RBRACE ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(858, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "expressionPredicate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "expressionPredicate"


    // $ANTLR start "syncToDeclarationsRule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:862:1: syncToDeclarationsRule : ;
    public final void syncToDeclarationsRule() throws RecognitionException {

                //why sync to DOT? - LESS allows class rules nested
                syncToSet(BitSet.of(IDENT, RBRACE, STAR, DOT));
            
        try { dbg.enterRule(getGrammarFileName(), "syncToDeclarationsRule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(862, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:867:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:868:6: 
            {
            }

        }
        finally {
        }
        dbg.location(868, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncToDeclarationsRule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncToDeclarationsRule"


    // $ANTLR start "syncTo_RBRACE"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:870:1: syncTo_RBRACE : ;
    public final void syncTo_RBRACE() throws RecognitionException {

                syncToRBRACE(1); //initial nest == 1
            
        try { dbg.enterRule(getGrammarFileName(), "syncTo_RBRACE");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(870, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:874:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:875:6: 
            {
            }

        }
        finally {
        }
        dbg.location(875, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncTo_RBRACE");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncTo_RBRACE"


    // $ANTLR start "syncTo_SEMI"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:877:1: syncTo_SEMI : SEMI ;
    public final void syncTo_SEMI() throws RecognitionException {

                syncToSet(BitSet.of(SEMI));
            
        try { dbg.enterRule(getGrammarFileName(), "syncTo_SEMI");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(877, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:881:6: ( SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:882:13: SEMI
            {
            dbg.location(882,13);
            match(input,SEMI,FOLLOW_SEMI_in_syncTo_SEMI4814); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(883, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncTo_SEMI");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncTo_SEMI"


    // $ANTLR start "syncToFollow"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:886:1: syncToFollow : ;
    public final void syncToFollow() throws RecognitionException {

                syncToSet();
            
        try { dbg.enterRule(getGrammarFileName(), "syncToFollow");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(886, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:890:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:891:6: 
            {
            }

        }
        finally {
        }
        dbg.location(891, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncToFollow");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncToFollow"


    // $ANTLR start "prio"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:893:1: prio : IMPORTANT_SYM ;
    public final void prio() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "prio");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(893, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:894:5: ( IMPORTANT_SYM )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:894:7: IMPORTANT_SYM
            {
            dbg.location(894,7);
            match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_prio4859); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(895, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prio");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "prio"


    // $ANTLR start "expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:897:1: expression : term ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )* ;
    public final void expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(897, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:5: ( term ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:7: term ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )*
            {
            dbg.location(898,7);
            pushFollow(FOLLOW_term_in_expression4876);
            term();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(898,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )*
            try { dbg.enterSubRule(200);

            loop200:
            do {
                int alt200=2;
                try { dbg.enterDecision(200, decisionCanBacktrack[200]);

                try {
                    isCyclicDecision = true;
                    alt200 = dfa200.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(200);}

                switch (alt200) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:14: ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term
            	    {
            	    dbg.location(898,66);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:66: ( ws | ( ( ws )? operator ( ws )? ) | )
            	    int alt199=3;
            	    try { dbg.enterSubRule(199);
            	    try { dbg.enterDecision(199, decisionCanBacktrack[199]);

            	    try {
            	        isCyclicDecision = true;
            	        alt199 = dfa199.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(199);}

            	    switch (alt199) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:68: ws
            	            {
            	            dbg.location(898,68);
            	            pushFollow(FOLLOW_ws_in_expression4908);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:73: ( ( ws )? operator ( ws )? )
            	            {
            	            dbg.location(898,73);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:73: ( ( ws )? operator ( ws )? )
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:74: ( ws )? operator ( ws )?
            	            {
            	            dbg.location(898,74);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:74: ( ws )?
            	            int alt197=2;
            	            try { dbg.enterSubRule(197);
            	            try { dbg.enterDecision(197, decisionCanBacktrack[197]);

            	            int LA197_0 = input.LA(1);

            	            if ( ((LA197_0>=WS && LA197_0<=COMMENT)) ) {
            	                alt197=1;
            	            }
            	            } finally {dbg.exitDecision(197);}

            	            switch (alt197) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:74: ws
            	                    {
            	                    dbg.location(898,74);
            	                    pushFollow(FOLLOW_ws_in_expression4913);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(197);}

            	            dbg.location(898,78);
            	            pushFollow(FOLLOW_operator_in_expression4916);
            	            operator();

            	            state._fsp--;
            	            if (state.failed) return ;
            	            dbg.location(898,87);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:87: ( ws )?
            	            int alt198=2;
            	            try { dbg.enterSubRule(198);
            	            try { dbg.enterDecision(198, decisionCanBacktrack[198]);

            	            int LA198_0 = input.LA(1);

            	            if ( ((LA198_0>=WS && LA198_0<=COMMENT)) ) {
            	                alt198=1;
            	            }
            	            } finally {dbg.exitDecision(198);}

            	            switch (alt198) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:87: ws
            	                    {
            	                    dbg.location(898,87);
            	                    pushFollow(FOLLOW_ws_in_expression4918);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(198);}


            	            }


            	            }
            	            break;
            	        case 3 :
            	            dbg.enterAlt(3);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:107: 
            	            {
            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(199);}

            	    dbg.location(898,109);
            	    pushFollow(FOLLOW_term_in_expression4927);
            	    term();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop200;
                }
            } while (true);
            } finally {dbg.exitSubRule(200);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(899, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "expression"


    // $ANTLR start "term"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:1: term : ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol ) ;
    public final void term() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "term");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(901, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:902:5: ( ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:903:5: ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol )
            {
            dbg.location(903,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:903:5: ( unaryOperator ( ws )? )?
            int alt202=2;
            try { dbg.enterSubRule(202);
            try { dbg.enterDecision(202, decisionCanBacktrack[202]);

            int LA202_0 = input.LA(1);

            if ( ((LA202_0>=MINUS && LA202_0<=PLUS)) ) {
                alt202=1;
            }
            } finally {dbg.exitDecision(202);}

            switch (alt202) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:903:7: unaryOperator ( ws )?
                    {
                    dbg.location(903,7);
                    pushFollow(FOLLOW_unaryOperator_in_term4952);
                    unaryOperator();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(903,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:903:21: ( ws )?
                    int alt201=2;
                    try { dbg.enterSubRule(201);
                    try { dbg.enterDecision(201, decisionCanBacktrack[201]);

                    int LA201_0 = input.LA(1);

                    if ( ((LA201_0>=WS && LA201_0<=COMMENT)) ) {
                        alt201=1;
                    }
                    } finally {dbg.exitDecision(201);}

                    switch (alt201) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:903:21: ws
                            {
                            dbg.location(903,21);
                            pushFollow(FOLLOW_ws_in_term4954);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(201);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(202);}

            dbg.location(904,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:904:5: ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol )
            int alt203=22;
            try { dbg.enterSubRule(203);
            try { dbg.enterDecision(203, decisionCanBacktrack[203]);

            try {
                isCyclicDecision = true;
                alt203 = dfa203.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(203);}

            switch (alt203) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:9: ( functionName ( ws )? LPAREN )=> function
                    {
                    dbg.location(905,36);
                    pushFollow(FOLLOW_function_in_term4983);
                    function();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:906:11: IDENT
                    {
                    dbg.location(906,11);
                    match(input,IDENT,FOLLOW_IDENT_in_term4996); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:907:11: NUMBER
                    {
                    dbg.location(907,11);
                    match(input,NUMBER,FOLLOW_NUMBER_in_term5008); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:908:11: PERCENTAGE
                    {
                    dbg.location(908,11);
                    match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_term5020); if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:11: LENGTH
                    {
                    dbg.location(909,11);
                    match(input,LENGTH,FOLLOW_LENGTH_in_term5032); if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:910:11: EMS
                    {
                    dbg.location(910,11);
                    match(input,EMS,FOLLOW_EMS_in_term5044); if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:911:11: REM
                    {
                    dbg.location(911,11);
                    match(input,REM,FOLLOW_REM_in_term5056); if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:912:11: EXS
                    {
                    dbg.location(912,11);
                    match(input,EXS,FOLLOW_EXS_in_term5068); if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:913:11: ANGLE
                    {
                    dbg.location(913,11);
                    match(input,ANGLE,FOLLOW_ANGLE_in_term5080); if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:914:11: TIME
                    {
                    dbg.location(914,11);
                    match(input,TIME,FOLLOW_TIME_in_term5092); if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:915:11: FREQ
                    {
                    dbg.location(915,11);
                    match(input,FREQ,FOLLOW_FREQ_in_term5104); if (state.failed) return ;

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:916:11: RESOLUTION
                    {
                    dbg.location(916,11);
                    match(input,RESOLUTION,FOLLOW_RESOLUTION_in_term5116); if (state.failed) return ;

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:917:11: DIMENSION
                    {
                    dbg.location(917,11);
                    match(input,DIMENSION,FOLLOW_DIMENSION_in_term5128); if (state.failed) return ;

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:11: STRING
                    {
                    dbg.location(918,11);
                    match(input,STRING,FOLLOW_STRING_in_term5145); if (state.failed) return ;

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:919:11: TILDE ( STRING | LESS_JS_STRING )
                    {
                    dbg.location(919,11);
                    match(input,TILDE,FOLLOW_TILDE_in_term5157); if (state.failed) return ;
                    dbg.location(919,17);
                    if ( input.LA(1)==STRING||input.LA(1)==LESS_JS_STRING ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:920:11: LESS_JS_STRING
                    {
                    dbg.location(920,11);
                    match(input,LESS_JS_STRING,FOLLOW_LESS_JS_STRING_in_term5180); if (state.failed) return ;

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:921:11: GEN
                    {
                    dbg.location(921,11);
                    match(input,GEN,FOLLOW_GEN_in_term5195); if (state.failed) return ;

                    }
                    break;
                case 18 :
                    dbg.enterAlt(18);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:922:11: URI
                    {
                    dbg.location(922,11);
                    match(input,URI,FOLLOW_URI_in_term5207); if (state.failed) return ;

                    }
                    break;
                case 19 :
                    dbg.enterAlt(19);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:923:11: hexColor
                    {
                    dbg.location(923,11);
                    pushFollow(FOLLOW_hexColor_in_term5219);
                    hexColor();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 20 :
                    dbg.enterAlt(20);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:924:11: {...}? cp_variable
                    {
                    dbg.location(924,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
                    }
                    dbg.location(924,40);
                    pushFollow(FOLLOW_cp_variable_in_term5233);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 21 :
                    dbg.enterAlt(21);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:925:11: {...}? sass_interpolation_expression_var
                    {
                    dbg.location(925,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
                    }
                    dbg.location(925,40);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_term5247);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 22 :
                    dbg.enterAlt(22);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:926:11: {...}? cp_term_symbol
                    {
                    dbg.location(926,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
                    }
                    dbg.location(926,40);
                    pushFollow(FOLLOW_cp_term_symbol_in_term5261);
                    cp_term_symbol();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(203);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(928, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "term");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "term"


    // $ANTLR start "cp_term_symbol"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:933:1: cp_term_symbol : PERCENTAGE_SYMBOL ;
    public final void cp_term_symbol() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_term_symbol");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(933, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:5: ( PERCENTAGE_SYMBOL )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:7: PERCENTAGE_SYMBOL
            {
            dbg.location(934,7);
            match(input,PERCENTAGE_SYMBOL,FOLLOW_PERCENTAGE_SYMBOL_in_cp_term_symbol5288); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(935, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_term_symbol");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_term_symbol"


    // $ANTLR start "function"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:937:1: function : functionName ( ws )? LPAREN ( ws )? ( fnAttributes | ) RPAREN ;
    public final void function() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "function");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(937, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:2: ( functionName ( ws )? LPAREN ( ws )? ( fnAttributes | ) RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:5: functionName ( ws )? LPAREN ( ws )? ( fnAttributes | ) RPAREN
            {
            dbg.location(938,5);
            pushFollow(FOLLOW_functionName_in_function5304);
            functionName();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(938,18);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:18: ( ws )?
            int alt204=2;
            try { dbg.enterSubRule(204);
            try { dbg.enterDecision(204, decisionCanBacktrack[204]);

            int LA204_0 = input.LA(1);

            if ( ((LA204_0>=WS && LA204_0<=COMMENT)) ) {
                alt204=1;
            }
            } finally {dbg.exitDecision(204);}

            switch (alt204) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:18: ws
                    {
                    dbg.location(938,18);
                    pushFollow(FOLLOW_ws_in_function5306);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(204);}

            dbg.location(939,3);
            match(input,LPAREN,FOLLOW_LPAREN_in_function5311); if (state.failed) return ;
            dbg.location(939,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:939:10: ( ws )?
            int alt205=2;
            try { dbg.enterSubRule(205);
            try { dbg.enterDecision(205, decisionCanBacktrack[205]);

            int LA205_0 = input.LA(1);

            if ( ((LA205_0>=WS && LA205_0<=COMMENT)) ) {
                alt205=1;
            }
            } finally {dbg.exitDecision(205);}

            switch (alt205) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:939:10: ws
                    {
                    dbg.location(939,10);
                    pushFollow(FOLLOW_ws_in_function5313);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(205);}

            dbg.location(940,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:3: ( fnAttributes | )
            int alt206=2;
            try { dbg.enterSubRule(206);
            try { dbg.enterDecision(206, decisionCanBacktrack[206]);

            int LA206_0 = input.LA(1);

            if ( (LA206_0==NAMESPACE_SYM||(LA206_0>=IDENT && LA206_0<=IMPORT_SYM)||LA206_0==LPAREN||LA206_0==MEDIA_SYM||LA206_0==IMPORTANT_SYM||(LA206_0>=NOT && LA206_0<=GEN)||(LA206_0>=AT_IDENT && LA206_0<=MOZ_DOCUMENT_SYM)||(LA206_0>=WEBKIT_KEYFRAMES_SYM && LA206_0<=RIGHTBOTTOM_SYM)||(LA206_0>=MINUS && LA206_0<=SASS_AT_ROOT)||(LA206_0>=TILDE && LA206_0<=HASH)||(LA206_0>=SASS_VAR && LA206_0<=PERCENTAGE_SYMBOL)||(LA206_0>=SASS_CONTENT && LA206_0<=SASS_WHILE)) ) {
                alt206=1;
            }
            else if ( (LA206_0==RPAREN) ) {
                alt206=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 206, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(206);}

            switch (alt206) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:941:21: fnAttributes
                    {
                    dbg.location(941,21);
                    pushFollow(FOLLOW_fnAttributes_in_function5340);
                    fnAttributes();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:3: 
                    {
                    }
                    break;

            }
            } finally {dbg.exitSubRule(206);}

            dbg.location(944,3);
            match(input,RPAREN,FOLLOW_RPAREN_in_function5371); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(RPAREN, SEMI, RBRACE));

        }
        finally {
        }
        dbg.location(945, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "function");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "function"


    // $ANTLR start "functionName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:1: functionName : ( IDENT COLON )? IDENT ( DOT IDENT )* ;
    public final void functionName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "functionName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(951, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:955:2: ( ( IDENT COLON )? IDENT ( DOT IDENT )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:956:9: ( IDENT COLON )? IDENT ( DOT IDENT )*
            {
            dbg.location(956,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:956:9: ( IDENT COLON )?
            int alt207=2;
            try { dbg.enterSubRule(207);
            try { dbg.enterDecision(207, decisionCanBacktrack[207]);

            int LA207_0 = input.LA(1);

            if ( (LA207_0==IDENT) ) {
                int LA207_1 = input.LA(2);

                if ( (LA207_1==COLON) ) {
                    alt207=1;
                }
            }
            } finally {dbg.exitDecision(207);}

            switch (alt207) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:956:10: IDENT COLON
                    {
                    dbg.location(956,10);
                    match(input,IDENT,FOLLOW_IDENT_in_functionName5423); if (state.failed) return ;
                    dbg.location(956,16);
                    match(input,COLON,FOLLOW_COLON_in_functionName5425); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(207);}

            dbg.location(956,24);
            match(input,IDENT,FOLLOW_IDENT_in_functionName5429); if (state.failed) return ;
            dbg.location(956,30);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:956:30: ( DOT IDENT )*
            try { dbg.enterSubRule(208);

            loop208:
            do {
                int alt208=2;
                try { dbg.enterDecision(208, decisionCanBacktrack[208]);

                int LA208_0 = input.LA(1);

                if ( (LA208_0==DOT) ) {
                    alt208=1;
                }


                } finally {dbg.exitDecision(208);}

                switch (alt208) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:956:31: DOT IDENT
            	    {
            	    dbg.location(956,31);
            	    match(input,DOT,FOLLOW_DOT_in_functionName5432); if (state.failed) return ;
            	    dbg.location(956,35);
            	    match(input,IDENT,FOLLOW_IDENT_in_functionName5434); if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop208;
                }
            } while (true);
            } finally {dbg.exitSubRule(208);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(957, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "functionName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "functionName"


    // $ANTLR start "fnAttributes"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:959:1: fnAttributes : fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )? ;
    public final void fnAttributes() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributes");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(959, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:960:5: ( fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:5: fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )?
            {
            dbg.location(961,5);
            pushFollow(FOLLOW_fnAttribute_in_fnAttributes5458);
            fnAttribute();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(961,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:17: ( ( ws )? COMMA ( ws )? fnAttribute )*
            try { dbg.enterSubRule(211);

            loop211:
            do {
                int alt211=2;
                try { dbg.enterDecision(211, decisionCanBacktrack[211]);

                try {
                    isCyclicDecision = true;
                    alt211 = dfa211.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(211);}

                switch (alt211) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:18: ( ws )? COMMA ( ws )? fnAttribute
            	    {
            	    dbg.location(961,18);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:18: ( ws )?
            	    int alt209=2;
            	    try { dbg.enterSubRule(209);
            	    try { dbg.enterDecision(209, decisionCanBacktrack[209]);

            	    int LA209_0 = input.LA(1);

            	    if ( ((LA209_0>=WS && LA209_0<=COMMENT)) ) {
            	        alt209=1;
            	    }
            	    } finally {dbg.exitDecision(209);}

            	    switch (alt209) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:18: ws
            	            {
            	            dbg.location(961,18);
            	            pushFollow(FOLLOW_ws_in_fnAttributes5461);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(209);}

            	    dbg.location(961,22);
            	    match(input,COMMA,FOLLOW_COMMA_in_fnAttributes5464); if (state.failed) return ;
            	    dbg.location(961,28);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:28: ( ws )?
            	    int alt210=2;
            	    try { dbg.enterSubRule(210);
            	    try { dbg.enterDecision(210, decisionCanBacktrack[210]);

            	    int LA210_0 = input.LA(1);

            	    if ( ((LA210_0>=WS && LA210_0<=COMMENT)) ) {
            	        alt210=1;
            	    }
            	    } finally {dbg.exitDecision(210);}

            	    switch (alt210) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:28: ws
            	            {
            	            dbg.location(961,28);
            	            pushFollow(FOLLOW_ws_in_fnAttributes5466);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(210);}

            	    dbg.location(961,32);
            	    pushFollow(FOLLOW_fnAttribute_in_fnAttributes5469);
            	    fnAttribute();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop211;
                }
            } while (true);
            } finally {dbg.exitSubRule(211);}

            dbg.location(961,46);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:46: ( ws )?
            int alt212=2;
            try { dbg.enterSubRule(212);
            try { dbg.enterDecision(212, decisionCanBacktrack[212]);

            int LA212_0 = input.LA(1);

            if ( ((LA212_0>=WS && LA212_0<=COMMENT)) ) {
                alt212=1;
            }
            } finally {dbg.exitDecision(212);}

            switch (alt212) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:46: ws
                    {
                    dbg.location(961,46);
                    pushFollow(FOLLOW_ws_in_fnAttributes5473);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(212);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(962, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributes");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributes"


    // $ANTLR start "fnAttribute"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:964:1: fnAttribute : ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | {...}? cp_expression | expression );
    public final void fnAttribute() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttribute");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(964, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:965:2: ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | {...}? cp_expression | expression )
            int alt215=3;
            try { dbg.enterDecision(215, decisionCanBacktrack[215]);

            try {
                isCyclicDecision = true;
                alt215 = dfa215.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(215);}

            switch (alt215) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue
                    {
                    dbg.location(966,46);
                    pushFollow(FOLLOW_fnAttributeName_in_fnAttribute5510);
                    fnAttributeName();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(966,62);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:62: ( ws )?
                    int alt213=2;
                    try { dbg.enterSubRule(213);
                    try { dbg.enterDecision(213, decisionCanBacktrack[213]);

                    int LA213_0 = input.LA(1);

                    if ( ((LA213_0>=WS && LA213_0<=COMMENT)) ) {
                        alt213=1;
                    }
                    } finally {dbg.exitDecision(213);}

                    switch (alt213) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:62: ws
                            {
                            dbg.location(966,62);
                            pushFollow(FOLLOW_ws_in_fnAttribute5512);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(213);}

                    dbg.location(966,66);
                    if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(966,79);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:79: ( ws )?
                    int alt214=2;
                    try { dbg.enterSubRule(214);
                    try { dbg.enterDecision(214, decisionCanBacktrack[214]);

                    int LA214_0 = input.LA(1);

                    if ( ((LA214_0>=WS && LA214_0<=COMMENT)) ) {
                        alt214=1;
                    }
                    } finally {dbg.exitDecision(214);}

                    switch (alt214) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:79: ws
                            {
                            dbg.location(966,79);
                            pushFollow(FOLLOW_ws_in_fnAttribute5521);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(214);}

                    dbg.location(966,83);
                    pushFollow(FOLLOW_fnAttributeValue_in_fnAttribute5524);
                    fnAttributeValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:967:11: {...}? cp_expression
                    {
                    dbg.location(967,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "fnAttribute", "isCssPreprocessorSource()");
                    }
                    dbg.location(967,40);
                    pushFollow(FOLLOW_cp_expression_in_fnAttribute5538);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:968:11: expression
                    {
                    dbg.location(968,11);
                    pushFollow(FOLLOW_expression_in_fnAttribute5550);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(969, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttribute");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttribute"


    // $ANTLR start "fnAttributeName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:971:1: fnAttributeName : ( IDENT ( DOT IDENT )* | {...}? cp_variable );
    public final void fnAttributeName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributeName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(971, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:972:2: ( IDENT ( DOT IDENT )* | {...}? cp_variable )
            int alt217=2;
            try { dbg.enterDecision(217, decisionCanBacktrack[217]);

            int LA217_0 = input.LA(1);

            if ( (LA217_0==IDENT) ) {
                alt217=1;
            }
            else if ( (LA217_0==NAMESPACE_SYM||(LA217_0>=CHARSET_SYM && LA217_0<=IMPORT_SYM)||LA217_0==MEDIA_SYM||(LA217_0>=AT_IDENT && LA217_0<=MOZ_DOCUMENT_SYM)||LA217_0==WEBKIT_KEYFRAMES_SYM||(LA217_0>=PAGE_SYM && LA217_0<=RIGHTBOTTOM_SYM)||LA217_0==SASS_AT_ROOT||LA217_0==SASS_VAR||(LA217_0>=SASS_CONTENT && LA217_0<=SASS_WHILE)) ) {
                alt217=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 217, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(217);}

            switch (alt217) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:973:13: IDENT ( DOT IDENT )*
                    {
                    dbg.location(973,13);
                    match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName5573); if (state.failed) return ;
                    dbg.location(973,19);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:973:19: ( DOT IDENT )*
                    try { dbg.enterSubRule(216);

                    loop216:
                    do {
                        int alt216=2;
                        try { dbg.enterDecision(216, decisionCanBacktrack[216]);

                        int LA216_0 = input.LA(1);

                        if ( (LA216_0==DOT) ) {
                            alt216=1;
                        }


                        } finally {dbg.exitDecision(216);}

                        switch (alt216) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:973:20: DOT IDENT
                    	    {
                    	    dbg.location(973,20);
                    	    match(input,DOT,FOLLOW_DOT_in_fnAttributeName5576); if (state.failed) return ;
                    	    dbg.location(973,24);
                    	    match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName5578); if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop216;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(216);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:974:15: {...}? cp_variable
                    {
                    dbg.location(974,15);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "fnAttributeName", "isCssPreprocessorSource()");
                    }
                    dbg.location(974,44);
                    pushFollow(FOLLOW_cp_variable_in_fnAttributeName5598);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(975, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributeName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributeName"


    // $ANTLR start "fnAttributeValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:977:1: fnAttributeValue : ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )* | {...}? cp_math_expression );
    public final void fnAttributeValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributeValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(977, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:978:2: ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )* | {...}? cp_math_expression )
            int alt222=2;
            try { dbg.enterDecision(222, decisionCanBacktrack[222]);

            try {
                isCyclicDecision = true;
                alt222 = dfa222.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(222);}

            switch (alt222) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:13: term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )*
                    {
                    dbg.location(979,13);
                    pushFollow(FOLLOW_term_in_fnAttributeValue5621);
                    term();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(979,18);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )*
                    try { dbg.enterSubRule(221);

                    loop221:
                    do {
                        int alt221=2;
                        try { dbg.enterDecision(221, decisionCanBacktrack[221]);

                        try {
                            isCyclicDecision = true;
                            alt221 = dfa221.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(221);}

                        switch (alt221) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term
                    	    {
                    	    dbg.location(979,71);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )
                    	    int alt220=3;
                    	    try { dbg.enterSubRule(220);
                    	    try { dbg.enterDecision(220, decisionCanBacktrack[220]);

                    	    try {
                    	        isCyclicDecision = true;
                    	        alt220 = dfa220.predict(input);
                    	    }
                    	    catch (NoViableAltException nvae) {
                    	        dbg.recognitionException(nvae);
                    	        throw nvae;
                    	    }
                    	    } finally {dbg.exitDecision(220);}

                    	    switch (alt220) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:73: ws
                    	            {
                    	            dbg.location(979,73);
                    	            pushFollow(FOLLOW_ws_in_fnAttributeValue5653);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;
                    	        case 2 :
                    	            dbg.enterAlt(2);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:78: ( ( ws )? SOLIDUS ( ws )? )
                    	            {
                    	            dbg.location(979,78);
                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:78: ( ( ws )? SOLIDUS ( ws )? )
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:79: ( ws )? SOLIDUS ( ws )?
                    	            {
                    	            dbg.location(979,79);
                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:79: ( ws )?
                    	            int alt218=2;
                    	            try { dbg.enterSubRule(218);
                    	            try { dbg.enterDecision(218, decisionCanBacktrack[218]);

                    	            int LA218_0 = input.LA(1);

                    	            if ( ((LA218_0>=WS && LA218_0<=COMMENT)) ) {
                    	                alt218=1;
                    	            }
                    	            } finally {dbg.exitDecision(218);}

                    	            switch (alt218) {
                    	                case 1 :
                    	                    dbg.enterAlt(1);

                    	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:79: ws
                    	                    {
                    	                    dbg.location(979,79);
                    	                    pushFollow(FOLLOW_ws_in_fnAttributeValue5658);
                    	                    ws();

                    	                    state._fsp--;
                    	                    if (state.failed) return ;

                    	                    }
                    	                    break;

                    	            }
                    	            } finally {dbg.exitSubRule(218);}

                    	            dbg.location(979,83);
                    	            match(input,SOLIDUS,FOLLOW_SOLIDUS_in_fnAttributeValue5661); if (state.failed) return ;
                    	            dbg.location(979,91);
                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:91: ( ws )?
                    	            int alt219=2;
                    	            try { dbg.enterSubRule(219);
                    	            try { dbg.enterDecision(219, decisionCanBacktrack[219]);

                    	            int LA219_0 = input.LA(1);

                    	            if ( ((LA219_0>=WS && LA219_0<=COMMENT)) ) {
                    	                alt219=1;
                    	            }
                    	            } finally {dbg.exitDecision(219);}

                    	            switch (alt219) {
                    	                case 1 :
                    	                    dbg.enterAlt(1);

                    	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:91: ws
                    	                    {
                    	                    dbg.location(979,91);
                    	                    pushFollow(FOLLOW_ws_in_fnAttributeValue5663);
                    	                    ws();

                    	                    state._fsp--;
                    	                    if (state.failed) return ;

                    	                    }
                    	                    break;

                    	            }
                    	            } finally {dbg.exitSubRule(219);}


                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            dbg.enterAlt(3);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:111: 
                    	            {
                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(220);}

                    	    dbg.location(979,113);
                    	    pushFollow(FOLLOW_term_in_fnAttributeValue5672);
                    	    term();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop221;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(221);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:980:15: {...}? cp_math_expression
                    {
                    dbg.location(980,15);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "fnAttributeValue", "isCssPreprocessorSource()");
                    }
                    dbg.location(980,44);
                    pushFollow(FOLLOW_cp_math_expression_in_fnAttributeValue5693);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(981, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributeValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributeValue"


    // $ANTLR start "hexColor"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:1: hexColor : HASH ;
    public final void hexColor() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "hexColor");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(983, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:984:5: ( HASH )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:984:7: HASH
            {
            dbg.location(984,7);
            match(input,HASH,FOLLOW_HASH_in_hexColor5707); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(985, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hexColor");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "hexColor"


    // $ANTLR start "ws"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:987:1: ws : ( WS | NL | COMMENT )+ ;
    public final void ws() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "ws");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(987, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:988:5: ( ( WS | NL | COMMENT )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:988:7: ( WS | NL | COMMENT )+
            {
            dbg.location(988,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:988:7: ( WS | NL | COMMENT )+
            int cnt223=0;
            try { dbg.enterSubRule(223);

            loop223:
            do {
                int alt223=2;
                try { dbg.enterDecision(223, decisionCanBacktrack[223]);

                int LA223_0 = input.LA(1);

                if ( ((LA223_0>=WS && LA223_0<=COMMENT)) ) {
                    alt223=1;
                }


                } finally {dbg.exitDecision(223);}

                switch (alt223) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            	    {
            	    dbg.location(988,7);
            	    if ( (input.LA(1)>=WS && input.LA(1)<=COMMENT) ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt223 >= 1 ) break loop223;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(223, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt223++;
            } while (true);
            } finally {dbg.exitSubRule(223);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(989, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ws");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "ws"


    // $ANTLR start "cp_variable_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:994:1: cp_variable_declaration : ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list | {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )? );
    public final void cp_variable_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_variable_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(994, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:995:5: ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list | {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )? )
            int alt230=2;
            try { dbg.enterDecision(230, decisionCanBacktrack[230]);

            int LA230_0 = input.LA(1);

            if ( (LA230_0==NAMESPACE_SYM||(LA230_0>=CHARSET_SYM && LA230_0<=IMPORT_SYM)||LA230_0==MEDIA_SYM||(LA230_0>=AT_IDENT && LA230_0<=MOZ_DOCUMENT_SYM)||LA230_0==WEBKIT_KEYFRAMES_SYM||(LA230_0>=PAGE_SYM && LA230_0<=RIGHTBOTTOM_SYM)||LA230_0==SASS_AT_ROOT||(LA230_0>=SASS_CONTENT && LA230_0<=SASS_WHILE)) ) {
                int LA230_1 = input.LA(2);

                if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
                    alt230=1;
                }
                else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
                    alt230=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 230, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA230_0==SASS_VAR) ) {
                int LA230_2 = input.LA(2);

                if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
                    alt230=1;
                }
                else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
                    alt230=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 230, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 230, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(230);}

            switch (alt230) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:996:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list
                    {
                    dbg.location(996,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable_declaration", "isLessSource()");
                    }
                    dbg.location(996,27);
                    pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration5767);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(996,39);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:996:39: ( ws )?
                    int alt224=2;
                    try { dbg.enterSubRule(224);
                    try { dbg.enterDecision(224, decisionCanBacktrack[224]);

                    int LA224_0 = input.LA(1);

                    if ( ((LA224_0>=WS && LA224_0<=COMMENT)) ) {
                        alt224=1;
                    }
                    } finally {dbg.exitDecision(224);}

                    switch (alt224) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:996:39: ws
                            {
                            dbg.location(996,39);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5769);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(224);}

                    dbg.location(996,43);
                    match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration5772); if (state.failed) return ;
                    dbg.location(996,49);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:996:49: ( ws )?
                    int alt225=2;
                    try { dbg.enterSubRule(225);
                    try { dbg.enterDecision(225, decisionCanBacktrack[225]);

                    int LA225_0 = input.LA(1);

                    if ( ((LA225_0>=WS && LA225_0<=COMMENT)) ) {
                        alt225=1;
                    }
                    } finally {dbg.exitDecision(225);}

                    switch (alt225) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:996:49: ws
                            {
                            dbg.location(996,49);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5774);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(225);}

                    dbg.location(996,53);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration5777);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )?
                    {
                    dbg.location(998,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable_declaration", "isScssSource()");
                    }
                    dbg.location(998,27);
                    pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration5799);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(998,39);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:39: ( ws )?
                    int alt226=2;
                    try { dbg.enterSubRule(226);
                    try { dbg.enterDecision(226, decisionCanBacktrack[226]);

                    int LA226_0 = input.LA(1);

                    if ( ((LA226_0>=WS && LA226_0<=COMMENT)) ) {
                        alt226=1;
                    }
                    } finally {dbg.exitDecision(226);}

                    switch (alt226) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:39: ws
                            {
                            dbg.location(998,39);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5801);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(226);}

                    dbg.location(998,43);
                    match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration5804); if (state.failed) return ;
                    dbg.location(998,49);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:49: ( ws )?
                    int alt227=2;
                    try { dbg.enterSubRule(227);
                    try { dbg.enterDecision(227, decisionCanBacktrack[227]);

                    int LA227_0 = input.LA(1);

                    if ( ((LA227_0>=WS && LA227_0<=COMMENT)) ) {
                        alt227=1;
                    }
                    } finally {dbg.exitDecision(227);}

                    switch (alt227) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:49: ws
                            {
                            dbg.location(998,49);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5806);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(227);}

                    dbg.location(998,53);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration5809);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(998,72);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:72: ( ( ws )? SASS_DEFAULT )?
                    int alt229=2;
                    try { dbg.enterSubRule(229);
                    try { dbg.enterDecision(229, decisionCanBacktrack[229]);

                    try {
                        isCyclicDecision = true;
                        alt229 = dfa229.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(229);}

                    switch (alt229) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:73: ( ws )? SASS_DEFAULT
                            {
                            dbg.location(998,73);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:73: ( ws )?
                            int alt228=2;
                            try { dbg.enterSubRule(228);
                            try { dbg.enterDecision(228, decisionCanBacktrack[228]);

                            int LA228_0 = input.LA(1);

                            if ( ((LA228_0>=WS && LA228_0<=COMMENT)) ) {
                                alt228=1;
                            }
                            } finally {dbg.exitDecision(228);}

                            switch (alt228) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:73: ws
                                    {
                                    dbg.location(998,73);
                                    pushFollow(FOLLOW_ws_in_cp_variable_declaration5812);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(228);}

                            dbg.location(998,77);
                            match(input,SASS_DEFAULT,FOLLOW_SASS_DEFAULT_in_cp_variable_declaration5815); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(229);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(999, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_variable_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_variable_declaration"


    // $ANTLR start "cp_variable"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1002:1: cp_variable : ({...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE | SASS_AT_ROOT ) | {...}? ( SASS_VAR ) );
    public final void cp_variable() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_variable");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1002, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1003:5: ({...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE | SASS_AT_ROOT ) | {...}? ( SASS_VAR ) )
            int alt231=2;
            try { dbg.enterDecision(231, decisionCanBacktrack[231]);

            int LA231_0 = input.LA(1);

            if ( (LA231_0==NAMESPACE_SYM||(LA231_0>=CHARSET_SYM && LA231_0<=IMPORT_SYM)||LA231_0==MEDIA_SYM||(LA231_0>=AT_IDENT && LA231_0<=MOZ_DOCUMENT_SYM)||LA231_0==WEBKIT_KEYFRAMES_SYM||(LA231_0>=PAGE_SYM && LA231_0<=RIGHTBOTTOM_SYM)||LA231_0==SASS_AT_ROOT||(LA231_0>=SASS_CONTENT && LA231_0<=SASS_WHILE)) ) {
                alt231=1;
            }
            else if ( (LA231_0==SASS_VAR) ) {
                alt231=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 231, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(231);}

            switch (alt231) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1005:9: {...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE | SASS_AT_ROOT )
                    {
                    dbg.location(1005,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable", "isLessSource()");
                    }
                    dbg.location(1005,27);
                    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=CHARSET_SYM && input.LA(1)<=IMPORT_SYM)||input.LA(1)==MEDIA_SYM||(input.LA(1)>=AT_IDENT && input.LA(1)<=MOZ_DOCUMENT_SYM)||input.LA(1)==WEBKIT_KEYFRAMES_SYM||(input.LA(1)>=PAGE_SYM && input.LA(1)<=RIGHTBOTTOM_SYM)||input.LA(1)==SASS_AT_ROOT||(input.LA(1)>=SASS_CONTENT && input.LA(1)<=SASS_WHILE) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1007:9: {...}? ( SASS_VAR )
                    {
                    dbg.location(1007,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable", "isScssSource()");
                    }
                    dbg.location(1007,27);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1007:27: ( SASS_VAR )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1007:29: SASS_VAR
                    {
                    dbg.location(1007,29);
                    match(input,SASS_VAR,FOLLOW_SASS_VAR_in_cp_variable6038); if (state.failed) return ;

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1008, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_variable");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_variable"


    // $ANTLR start "cp_expression_list"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1011:1: cp_expression_list : cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* ;
    public final void cp_expression_list() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression_list");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1011, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1012:5: ( cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1013:5: cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
            {
            dbg.location(1013,5);
            pushFollow(FOLLOW_cp_expression_in_cp_expression_list6062);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1014,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
            try { dbg.enterSubRule(234);

            loop234:
            do {
                int alt234=2;
                try { dbg.enterDecision(234, decisionCanBacktrack[234]);

                try {
                    isCyclicDecision = true;
                    alt234 = dfa234.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(234);}

                switch (alt234) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:6: ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression
            	    {
            	    dbg.location(1014,37);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:37: ( ws )?
            	    int alt232=2;
            	    try { dbg.enterSubRule(232);
            	    try { dbg.enterDecision(232, decisionCanBacktrack[232]);

            	    int LA232_0 = input.LA(1);

            	    if ( ((LA232_0>=WS && LA232_0<=COMMENT)) ) {
            	        alt232=1;
            	    }
            	    } finally {dbg.exitDecision(232);}

            	    switch (alt232) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:37: ws
            	            {
            	            dbg.location(1014,37);
            	            pushFollow(FOLLOW_ws_in_cp_expression_list6081);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(232);}

            	    dbg.location(1014,41);
            	    match(input,COMMA,FOLLOW_COMMA_in_cp_expression_list6084); if (state.failed) return ;
            	    dbg.location(1014,47);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:47: ( ws )?
            	    int alt233=2;
            	    try { dbg.enterSubRule(233);
            	    try { dbg.enterDecision(233, decisionCanBacktrack[233]);

            	    int LA233_0 = input.LA(1);

            	    if ( ((LA233_0>=WS && LA233_0<=COMMENT)) ) {
            	        alt233=1;
            	    }
            	    } finally {dbg.exitDecision(233);}

            	    switch (alt233) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:47: ws
            	            {
            	            dbg.location(1014,47);
            	            pushFollow(FOLLOW_ws_in_cp_expression_list6086);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(233);}

            	    dbg.location(1014,51);
            	    pushFollow(FOLLOW_cp_expression_in_cp_expression_list6089);
            	    cp_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop234;
                }
            } while (true);
            } finally {dbg.exitSubRule(234);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1015, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression_list");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression_list"


    // $ANTLR start "cp_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1027:1: cp_expression : cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* ;
    public final void cp_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1027, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1028:5: ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:5: cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
            {
            dbg.location(1029,5);
            pushFollow(FOLLOW_cp_expression_atom_in_cp_expression6122);
            cp_expression_atom();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1030,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1030:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
            try { dbg.enterSubRule(238);

            loop238:
            do {
                int alt238=3;
                try { dbg.enterDecision(238, decisionCanBacktrack[238]);

                try {
                    isCyclicDecision = true;
                    alt238 = dfa238.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(238);}

                switch (alt238) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:9: ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom
            	    {
            	    dbg.location(1031,39);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:39: ( ( ws )? cp_expression_operator ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:40: ( ws )? cp_expression_operator ( ws )?
            	    {
            	    dbg.location(1031,40);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:40: ( ws )?
            	    int alt235=2;
            	    try { dbg.enterSubRule(235);
            	    try { dbg.enterDecision(235, decisionCanBacktrack[235]);

            	    int LA235_0 = input.LA(1);

            	    if ( ((LA235_0>=WS && LA235_0<=COMMENT)) ) {
            	        alt235=1;
            	    }
            	    } finally {dbg.exitDecision(235);}

            	    switch (alt235) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:40: ws
            	            {
            	            dbg.location(1031,40);
            	            pushFollow(FOLLOW_ws_in_cp_expression6146);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(235);}

            	    dbg.location(1031,44);
            	    pushFollow(FOLLOW_cp_expression_operator_in_cp_expression6149);
            	    cp_expression_operator();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(1031,67);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:67: ( ws )?
            	    int alt236=2;
            	    try { dbg.enterSubRule(236);
            	    try { dbg.enterDecision(236, decisionCanBacktrack[236]);

            	    int LA236_0 = input.LA(1);

            	    if ( ((LA236_0>=WS && LA236_0<=COMMENT)) ) {
            	        alt236=1;
            	    }
            	    } finally {dbg.exitDecision(236);}

            	    switch (alt236) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:67: ws
            	            {
            	            dbg.location(1031,67);
            	            pushFollow(FOLLOW_ws_in_cp_expression6151);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(236);}


            	    }

            	    dbg.location(1031,72);
            	    pushFollow(FOLLOW_cp_expression_atom_in_cp_expression6155);
            	    cp_expression_atom();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:11: ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom
            	    {
            	    dbg.location(1032,37);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:37: ( ws )?
            	    int alt237=2;
            	    try { dbg.enterSubRule(237);
            	    try { dbg.enterDecision(237, decisionCanBacktrack[237]);

            	    int LA237_0 = input.LA(1);

            	    if ( ((LA237_0>=WS && LA237_0<=COMMENT)) ) {
            	        alt237=1;
            	    }
            	    } finally {dbg.exitDecision(237);}

            	    switch (alt237) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:37: ws
            	            {
            	            dbg.location(1032,37);
            	            pushFollow(FOLLOW_ws_in_cp_expression6174);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(237);}

            	    dbg.location(1032,41);
            	    pushFollow(FOLLOW_cp_expression_atom_in_cp_expression6177);
            	    cp_expression_atom();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop238;
                }
            } while (true);
            } finally {dbg.exitSubRule(238);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1034, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression"


    // $ANTLR start "cp_expression_operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1036:1: cp_expression_operator : ( OR | AND | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ );
    public final void cp_expression_operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression_operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1036, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1037:5: ( OR | AND | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(1037,5);
            if ( input.LA(1)==AND||input.LA(1)==GREATER||(input.LA(1)>=OR && input.LA(1)<=GREATER_OR_EQ) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1039, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression_operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression_operator"


    // $ANTLR start "cp_expression_atom"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:1: cp_expression_atom : ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN ) ;
    public final void cp_expression_atom() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression_atom");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1041, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1042:5: ( ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:9: ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN )
            {
            dbg.location(1043,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:9: ( NOT ( ws )? )?
            int alt240=2;
            try { dbg.enterSubRule(240);
            try { dbg.enterDecision(240, decisionCanBacktrack[240]);

            int LA240_0 = input.LA(1);

            if ( (LA240_0==NOT) ) {
                alt240=1;
            }
            } finally {dbg.exitDecision(240);}

            switch (alt240) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:10: NOT ( ws )?
                    {
                    dbg.location(1043,10);
                    match(input,NOT,FOLLOW_NOT_in_cp_expression_atom6259); if (state.failed) return ;
                    dbg.location(1043,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:14: ( ws )?
                    int alt239=2;
                    try { dbg.enterSubRule(239);
                    try { dbg.enterDecision(239, decisionCanBacktrack[239]);

                    int LA239_0 = input.LA(1);

                    if ( ((LA239_0>=WS && LA239_0<=COMMENT)) ) {
                        alt239=1;
                    }
                    } finally {dbg.exitDecision(239);}

                    switch (alt239) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:14: ws
                            {
                            dbg.location(1043,14);
                            pushFollow(FOLLOW_ws_in_cp_expression_atom6261);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(239);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(240);}

            dbg.location(1044,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1044:9: ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN )
            int alt244=2;
            try { dbg.enterSubRule(244);
            try { dbg.enterDecision(244, decisionCanBacktrack[244]);

            try {
                isCyclicDecision = true;
                alt244 = dfa244.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(244);}

            switch (alt244) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1045:13: ( cp_math_expression )=> cp_math_expression
                    {
                    dbg.location(1045,35);
                    pushFollow(FOLLOW_cp_math_expression_in_cp_expression_atom6292);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:15: LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN
                    {
                    dbg.location(1046,15);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_expression_atom6308); if (state.failed) return ;
                    dbg.location(1046,22);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:22: ( ws )?
                    int alt241=2;
                    try { dbg.enterSubRule(241);
                    try { dbg.enterDecision(241, decisionCanBacktrack[241]);

                    int LA241_0 = input.LA(1);

                    if ( ((LA241_0>=WS && LA241_0<=COMMENT)) ) {
                        alt241=1;
                    }
                    } finally {dbg.exitDecision(241);}

                    switch (alt241) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:22: ws
                            {
                            dbg.location(1046,22);
                            pushFollow(FOLLOW_ws_in_cp_expression_atom6310);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(241);}

                    dbg.location(1046,26);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:26: ( cp_expression_list ( ws )? )?
                    int alt243=2;
                    try { dbg.enterSubRule(243);
                    try { dbg.enterDecision(243, decisionCanBacktrack[243]);

                    int LA243_0 = input.LA(1);

                    if ( (LA243_0==NAMESPACE_SYM||(LA243_0>=IDENT && LA243_0<=IMPORT_SYM)||LA243_0==LPAREN||LA243_0==MEDIA_SYM||LA243_0==IMPORTANT_SYM||(LA243_0>=NOT && LA243_0<=GEN)||(LA243_0>=AT_IDENT && LA243_0<=MOZ_DOCUMENT_SYM)||(LA243_0>=WEBKIT_KEYFRAMES_SYM && LA243_0<=RIGHTBOTTOM_SYM)||(LA243_0>=MINUS && LA243_0<=SASS_AT_ROOT)||(LA243_0>=TILDE && LA243_0<=HASH)||(LA243_0>=SASS_VAR && LA243_0<=PERCENTAGE_SYMBOL)||(LA243_0>=SASS_CONTENT && LA243_0<=SASS_WHILE)) ) {
                        alt243=1;
                    }
                    } finally {dbg.exitDecision(243);}

                    switch (alt243) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:27: cp_expression_list ( ws )?
                            {
                            dbg.location(1046,27);
                            pushFollow(FOLLOW_cp_expression_list_in_cp_expression_atom6314);
                            cp_expression_list();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(1046,46);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:46: ( ws )?
                            int alt242=2;
                            try { dbg.enterSubRule(242);
                            try { dbg.enterDecision(242, decisionCanBacktrack[242]);

                            int LA242_0 = input.LA(1);

                            if ( ((LA242_0>=WS && LA242_0<=COMMENT)) ) {
                                alt242=1;
                            }
                            } finally {dbg.exitDecision(242);}

                            switch (alt242) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:46: ws
                                    {
                                    dbg.location(1046,46);
                                    pushFollow(FOLLOW_ws_in_cp_expression_atom6316);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(242);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(243);}

                    dbg.location(1046,52);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_expression_atom6321); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(244);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1048, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression_atom");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression_atom"


    // $ANTLR start "cp_math_expressions"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1051:1: cp_math_expressions : cp_math_expression ( ws cp_math_expression )* ;
    public final void cp_math_expressions() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_math_expressions");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1051, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1052:5: ( cp_math_expression ( ws cp_math_expression )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:5: cp_math_expression ( ws cp_math_expression )*
            {
            dbg.location(1053,5);
            pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions6353);
            cp_math_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1054,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1054:5: ( ws cp_math_expression )*
            try { dbg.enterSubRule(245);

            loop245:
            do {
                int alt245=2;
                try { dbg.enterDecision(245, decisionCanBacktrack[245]);

                int LA245_0 = input.LA(1);

                if ( ((LA245_0>=WS && LA245_0<=COMMENT)) ) {
                    alt245=1;
                }


                } finally {dbg.exitDecision(245);}

                switch (alt245) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1054:6: ws cp_math_expression
            	    {
            	    dbg.location(1054,6);
            	    pushFollow(FOLLOW_ws_in_cp_math_expressions6360);
            	    ws();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(1054,9);
            	    pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions6362);
            	    cp_math_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop245;
                }
            } while (true);
            } finally {dbg.exitSubRule(245);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1055, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_math_expressions");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_math_expressions"


    // $ANTLR start "cp_math_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1069:1: cp_math_expression : cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* ;
    public final void cp_math_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_math_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1069, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1070:5: ( cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1070:10: cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
            {
            dbg.location(1070,10);
            pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression6396);
            cp_math_expression_atom();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1071,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
            try { dbg.enterSubRule(248);

            loop248:
            do {
                int alt248=2;
                try { dbg.enterDecision(248, decisionCanBacktrack[248]);

                try {
                    isCyclicDecision = true;
                    alt248 = dfa248.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(248);}

                switch (alt248) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom
            	    {
            	    dbg.location(1072,48);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:48: ( ws )?
            	    int alt246=2;
            	    try { dbg.enterSubRule(246);
            	    try { dbg.enterDecision(246, decisionCanBacktrack[246]);

            	    int LA246_0 = input.LA(1);

            	    if ( ((LA246_0>=WS && LA246_0<=COMMENT)) ) {
            	        alt246=1;
            	    }
            	    } finally {dbg.exitDecision(246);}

            	    switch (alt246) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:48: ws
            	            {
            	            dbg.location(1072,48);
            	            pushFollow(FOLLOW_ws_in_cp_math_expression6438);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(246);}

            	    dbg.location(1072,52);
            	    if ( (input.LA(1)>=SOLIDUS && input.LA(1)<=PLUS)||input.LA(1)==STAR ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1072,78);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:78: ( ws )?
            	    int alt247=2;
            	    try { dbg.enterSubRule(247);
            	    try { dbg.enterDecision(247, decisionCanBacktrack[247]);

            	    int LA247_0 = input.LA(1);

            	    if ( ((LA247_0>=WS && LA247_0<=COMMENT)) ) {
            	        alt247=1;
            	    }
            	    } finally {dbg.exitDecision(247);}

            	    switch (alt247) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:78: ws
            	            {
            	            dbg.location(1072,78);
            	            pushFollow(FOLLOW_ws_in_cp_math_expression6451);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(247);}

            	    dbg.location(1072,82);
            	    pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression6454);
            	    cp_math_expression_atom();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop248;
                }
            } while (true);
            } finally {dbg.exitSubRule(248);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1074, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_math_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_math_expression"


    // $ANTLR start "cp_math_expression_atom"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1076:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );
    public final void cp_math_expression_atom() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_math_expression_atom");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1076, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:5: ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN )
            int alt253=3;
            try { dbg.enterDecision(253, decisionCanBacktrack[253]);

            try {
                isCyclicDecision = true;
                alt253 = dfa253.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(253);}

            switch (alt253) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1078:5: term
                    {
                    dbg.location(1078,5);
                    pushFollow(FOLLOW_term_in_cp_math_expression_atom6487);
                    term();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1079:7: IMPORTANT_SYM
                    {
                    dbg.location(1079,7);
                    match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom6495); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:7: ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN
                    {
                    dbg.location(1080,7);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:7: ( unaryOperator ( ws )? )?
                    int alt250=2;
                    try { dbg.enterSubRule(250);
                    try { dbg.enterDecision(250, decisionCanBacktrack[250]);

                    int LA250_0 = input.LA(1);

                    if ( ((LA250_0>=MINUS && LA250_0<=PLUS)) ) {
                        alt250=1;
                    }
                    } finally {dbg.exitDecision(250);}

                    switch (alt250) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:9: unaryOperator ( ws )?
                            {
                            dbg.location(1080,9);
                            pushFollow(FOLLOW_unaryOperator_in_cp_math_expression_atom6506);
                            unaryOperator();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(1080,23);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:23: ( ws )?
                            int alt249=2;
                            try { dbg.enterSubRule(249);
                            try { dbg.enterDecision(249, decisionCanBacktrack[249]);

                            int LA249_0 = input.LA(1);

                            if ( ((LA249_0>=WS && LA249_0<=COMMENT)) ) {
                                alt249=1;
                            }
                            } finally {dbg.exitDecision(249);}

                            switch (alt249) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:23: ws
                                    {
                                    dbg.location(1080,23);
                                    pushFollow(FOLLOW_ws_in_cp_math_expression_atom6508);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(249);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(250);}

                    dbg.location(1080,30);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_math_expression_atom6514); if (state.failed) return ;
                    dbg.location(1080,37);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:37: ( ws )?
                    int alt251=2;
                    try { dbg.enterSubRule(251);
                    try { dbg.enterDecision(251, decisionCanBacktrack[251]);

                    int LA251_0 = input.LA(1);

                    if ( ((LA251_0>=WS && LA251_0<=COMMENT)) ) {
                        alt251=1;
                    }
                    } finally {dbg.exitDecision(251);}

                    switch (alt251) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:37: ws
                            {
                            dbg.location(1080,37);
                            pushFollow(FOLLOW_ws_in_cp_math_expression_atom6516);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(251);}

                    dbg.location(1080,41);
                    pushFollow(FOLLOW_cp_math_expression_in_cp_math_expression_atom6519);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1080,60);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:60: ( ws )?
                    int alt252=2;
                    try { dbg.enterSubRule(252);
                    try { dbg.enterDecision(252, decisionCanBacktrack[252]);

                    int LA252_0 = input.LA(1);

                    if ( ((LA252_0>=WS && LA252_0<=COMMENT)) ) {
                        alt252=1;
                    }
                    } finally {dbg.exitDecision(252);}

                    switch (alt252) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:60: ws
                            {
                            dbg.location(1080,60);
                            pushFollow(FOLLOW_ws_in_cp_math_expression_atom6521);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(252);}

                    dbg.location(1080,64);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_math_expression_atom6524); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1081, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_math_expression_atom");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_math_expression_atom"


    // $ANTLR start "cp_mixin_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1089:1: cp_mixin_declaration : ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block ;
    public final void cp_mixin_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1089, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1090:5: ( ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1091:5: ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block
            {
            dbg.location(1091,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1091:5: ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? )
            int alt263=2;
            try { dbg.enterSubRule(263);
            try { dbg.enterDecision(263, decisionCanBacktrack[263]);

            int LA263_0 = input.LA(1);

            if ( (LA263_0==DOT) ) {
                alt263=1;
            }
            else if ( (LA263_0==SASS_MIXIN) ) {
                alt263=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 263, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(263);}

            switch (alt263) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:9: {...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )?
                    {
                    dbg.location(1092,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_declaration", "isLessSource()");
                    }
                    dbg.location(1092,27);
                    match(input,DOT,FOLLOW_DOT_in_cp_mixin_declaration6563); if (state.failed) return ;
                    dbg.location(1092,31);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration6565);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1092,45);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:45: ( ws )?
                    int alt254=2;
                    try { dbg.enterSubRule(254);
                    try { dbg.enterDecision(254, decisionCanBacktrack[254]);

                    int LA254_0 = input.LA(1);

                    if ( ((LA254_0>=WS && LA254_0<=COMMENT)) ) {
                        alt254=1;
                    }
                    } finally {dbg.exitDecision(254);}

                    switch (alt254) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:45: ws
                            {
                            dbg.location(1092,45);
                            pushFollow(FOLLOW_ws_in_cp_mixin_declaration6567);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(254);}

                    dbg.location(1092,49);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration6570); if (state.failed) return ;
                    dbg.location(1092,56);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:56: ( ws )?
                    int alt255=2;
                    try { dbg.enterSubRule(255);
                    try { dbg.enterDecision(255, decisionCanBacktrack[255]);

                    int LA255_0 = input.LA(1);

                    if ( ((LA255_0>=WS && LA255_0<=COMMENT)) ) {
                        alt255=1;
                    }
                    } finally {dbg.exitDecision(255);}

                    switch (alt255) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:56: ws
                            {
                            dbg.location(1092,56);
                            pushFollow(FOLLOW_ws_in_cp_mixin_declaration6572);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(255);}

                    dbg.location(1092,60);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:60: ( cp_args_list )?
                    int alt256=2;
                    try { dbg.enterSubRule(256);
                    try { dbg.enterDecision(256, decisionCanBacktrack[256]);

                    int LA256_0 = input.LA(1);

                    if ( (LA256_0==NAMESPACE_SYM||(LA256_0>=CHARSET_SYM && LA256_0<=IMPORT_SYM)||LA256_0==MEDIA_SYM||(LA256_0>=AT_IDENT && LA256_0<=MOZ_DOCUMENT_SYM)||LA256_0==WEBKIT_KEYFRAMES_SYM||(LA256_0>=PAGE_SYM && LA256_0<=RIGHTBOTTOM_SYM)||LA256_0==SASS_AT_ROOT||LA256_0==SASS_VAR||(LA256_0>=SASS_CONTENT && LA256_0<=SASS_WHILE)||(LA256_0>=CP_DOTS && LA256_0<=LESS_REST)) ) {
                        alt256=1;
                    }
                    } finally {dbg.exitDecision(256);}

                    switch (alt256) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:60: cp_args_list
                            {
                            dbg.location(1092,60);
                            pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration6575);
                            cp_args_list();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(256);}

                    dbg.location(1092,74);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration6578); if (state.failed) return ;
                    dbg.location(1092,81);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:81: ( ( ws )? less_mixin_guarded )?
                    int alt258=2;
                    try { dbg.enterSubRule(258);
                    try { dbg.enterDecision(258, decisionCanBacktrack[258]);

                    try {
                        isCyclicDecision = true;
                        alt258 = dfa258.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(258);}

                    switch (alt258) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:82: ( ws )? less_mixin_guarded
                            {
                            dbg.location(1092,82);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:82: ( ws )?
                            int alt257=2;
                            try { dbg.enterSubRule(257);
                            try { dbg.enterDecision(257, decisionCanBacktrack[257]);

                            int LA257_0 = input.LA(1);

                            if ( ((LA257_0>=WS && LA257_0<=COMMENT)) ) {
                                alt257=1;
                            }
                            } finally {dbg.exitDecision(257);}

                            switch (alt257) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:82: ws
                                    {
                                    dbg.location(1092,82);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6581);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(257);}

                            dbg.location(1092,86);
                            pushFollow(FOLLOW_less_mixin_guarded_in_cp_mixin_declaration6584);
                            less_mixin_guarded();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(258);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:9: {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
                    {
                    dbg.location(1094,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_declaration", "isScssSource()");
                    }
                    dbg.location(1094,27);
                    match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_cp_mixin_declaration6608); if (state.failed) return ;
                    dbg.location(1094,38);
                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6610);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1094,41);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration6612);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1094,55);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:55: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
                    int alt262=2;
                    try { dbg.enterSubRule(262);
                    try { dbg.enterDecision(262, decisionCanBacktrack[262]);

                    try {
                        isCyclicDecision = true;
                        alt262 = dfa262.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(262);}

                    switch (alt262) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:56: ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN
                            {
                            dbg.location(1094,56);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:56: ( ws )?
                            int alt259=2;
                            try { dbg.enterSubRule(259);
                            try { dbg.enterDecision(259, decisionCanBacktrack[259]);

                            int LA259_0 = input.LA(1);

                            if ( ((LA259_0>=WS && LA259_0<=COMMENT)) ) {
                                alt259=1;
                            }
                            } finally {dbg.exitDecision(259);}

                            switch (alt259) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:56: ws
                                    {
                                    dbg.location(1094,56);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6615);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(259);}

                            dbg.location(1094,60);
                            match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration6618); if (state.failed) return ;
                            dbg.location(1094,67);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:67: ( ws )?
                            int alt260=2;
                            try { dbg.enterSubRule(260);
                            try { dbg.enterDecision(260, decisionCanBacktrack[260]);

                            int LA260_0 = input.LA(1);

                            if ( ((LA260_0>=WS && LA260_0<=COMMENT)) ) {
                                alt260=1;
                            }
                            } finally {dbg.exitDecision(260);}

                            switch (alt260) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:67: ws
                                    {
                                    dbg.location(1094,67);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6620);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(260);}

                            dbg.location(1094,71);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:71: ( cp_args_list )?
                            int alt261=2;
                            try { dbg.enterSubRule(261);
                            try { dbg.enterDecision(261, decisionCanBacktrack[261]);

                            int LA261_0 = input.LA(1);

                            if ( (LA261_0==NAMESPACE_SYM||(LA261_0>=CHARSET_SYM && LA261_0<=IMPORT_SYM)||LA261_0==MEDIA_SYM||(LA261_0>=AT_IDENT && LA261_0<=MOZ_DOCUMENT_SYM)||LA261_0==WEBKIT_KEYFRAMES_SYM||(LA261_0>=PAGE_SYM && LA261_0<=RIGHTBOTTOM_SYM)||LA261_0==SASS_AT_ROOT||LA261_0==SASS_VAR||(LA261_0>=SASS_CONTENT && LA261_0<=SASS_WHILE)||(LA261_0>=CP_DOTS && LA261_0<=LESS_REST)) ) {
                                alt261=1;
                            }
                            } finally {dbg.exitDecision(261);}

                            switch (alt261) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:71: cp_args_list
                                    {
                                    dbg.location(1094,71);
                                    pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration6623);
                                    cp_args_list();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(261);}

                            dbg.location(1094,85);
                            match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration6626); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(262);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(263);}

            dbg.location(1096,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:5: ( ws )?
            int alt264=2;
            try { dbg.enterSubRule(264);
            try { dbg.enterDecision(264, decisionCanBacktrack[264]);

            int LA264_0 = input.LA(1);

            if ( ((LA264_0>=WS && LA264_0<=COMMENT)) ) {
                alt264=1;
            }
            } finally {dbg.exitDecision(264);}

            switch (alt264) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:5: ws
                    {
                    dbg.location(1096,5);
                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6640);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(264);}

            dbg.location(1096,9);
            pushFollow(FOLLOW_cp_mixin_block_in_cp_mixin_declaration6643);
            cp_mixin_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1097, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_declaration"


    // $ANTLR start "cp_mixin_call"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1101:1: cp_mixin_call : ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? ) ;
    public final void cp_mixin_call() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1101, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:5: ( ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1103:5: ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? )
            {
            dbg.location(1103,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1103:5: ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? )
            int alt275=2;
            try { dbg.enterSubRule(275);
            try { dbg.enterDecision(275, decisionCanBacktrack[275]);

            int LA275_0 = input.LA(1);

            if ( (LA275_0==DOT) ) {
                alt275=1;
            }
            else if ( (LA275_0==SASS_INCLUDE) ) {
                alt275=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 275, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(275);}

            switch (alt275) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:9: {...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
                    {
                    dbg.location(1104,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_call", "isLessSource()");
                    }
                    dbg.location(1104,27);
                    match(input,DOT,FOLLOW_DOT_in_cp_mixin_call6678); if (state.failed) return ;
                    dbg.location(1104,31);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call6680);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1104,45);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:45: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
                    int alt268=2;
                    try { dbg.enterSubRule(268);
                    try { dbg.enterDecision(268, decisionCanBacktrack[268]);

                    try {
                        isCyclicDecision = true;
                        alt268 = dfa268.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(268);}

                    switch (alt268) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:46: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
                            {
                            dbg.location(1104,46);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:46: ( ws )?
                            int alt265=2;
                            try { dbg.enterSubRule(265);
                            try { dbg.enterDecision(265, decisionCanBacktrack[265]);

                            int LA265_0 = input.LA(1);

                            if ( ((LA265_0>=WS && LA265_0<=COMMENT)) ) {
                                alt265=1;
                            }
                            } finally {dbg.exitDecision(265);}

                            switch (alt265) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:46: ws
                                    {
                                    dbg.location(1104,46);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6683);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(265);}

                            dbg.location(1104,50);
                            match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call6686); if (state.failed) return ;
                            dbg.location(1104,57);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:57: ( ws )?
                            int alt266=2;
                            try { dbg.enterSubRule(266);
                            try { dbg.enterDecision(266, decisionCanBacktrack[266]);

                            int LA266_0 = input.LA(1);

                            if ( ((LA266_0>=WS && LA266_0<=COMMENT)) ) {
                                alt266=1;
                            }
                            } finally {dbg.exitDecision(266);}

                            switch (alt266) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:57: ws
                                    {
                                    dbg.location(1104,57);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6688);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(266);}

                            dbg.location(1104,61);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:61: ( cp_mixin_call_args )?
                            int alt267=2;
                            try { dbg.enterSubRule(267);
                            try { dbg.enterDecision(267, decisionCanBacktrack[267]);

                            int LA267_0 = input.LA(1);

                            if ( (LA267_0==NAMESPACE_SYM||(LA267_0>=IDENT && LA267_0<=IMPORT_SYM)||LA267_0==LPAREN||LA267_0==MEDIA_SYM||LA267_0==IMPORTANT_SYM||(LA267_0>=NOT && LA267_0<=GEN)||(LA267_0>=AT_IDENT && LA267_0<=MOZ_DOCUMENT_SYM)||(LA267_0>=WEBKIT_KEYFRAMES_SYM && LA267_0<=RIGHTBOTTOM_SYM)||(LA267_0>=MINUS && LA267_0<=SASS_AT_ROOT)||(LA267_0>=TILDE && LA267_0<=HASH)||(LA267_0>=SASS_VAR && LA267_0<=PERCENTAGE_SYMBOL)||(LA267_0>=SASS_CONTENT && LA267_0<=SASS_WHILE)) ) {
                                alt267=1;
                            }
                            } finally {dbg.exitDecision(267);}

                            switch (alt267) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:61: cp_mixin_call_args
                                    {
                                    dbg.location(1104,61);
                                    pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call6691);
                                    cp_mixin_call_args();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(267);}

                            dbg.location(1104,81);
                            match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call6694); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(268);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:9: {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )?
                    {
                    dbg.location(1106,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_call", "isScssSource()");
                    }
                    dbg.location(1106,27);
                    match(input,SASS_INCLUDE,FOLLOW_SASS_INCLUDE_in_cp_mixin_call6718); if (state.failed) return ;
                    dbg.location(1106,40);
                    pushFollow(FOLLOW_ws_in_cp_mixin_call6720);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1106,43);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call6722);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1106,57);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:57: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
                    int alt272=2;
                    try { dbg.enterSubRule(272);
                    try { dbg.enterDecision(272, decisionCanBacktrack[272]);

                    try {
                        isCyclicDecision = true;
                        alt272 = dfa272.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(272);}

                    switch (alt272) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:58: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
                            {
                            dbg.location(1106,58);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:58: ( ws )?
                            int alt269=2;
                            try { dbg.enterSubRule(269);
                            try { dbg.enterDecision(269, decisionCanBacktrack[269]);

                            int LA269_0 = input.LA(1);

                            if ( ((LA269_0>=WS && LA269_0<=COMMENT)) ) {
                                alt269=1;
                            }
                            } finally {dbg.exitDecision(269);}

                            switch (alt269) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:58: ws
                                    {
                                    dbg.location(1106,58);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6725);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(269);}

                            dbg.location(1106,62);
                            match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call6728); if (state.failed) return ;
                            dbg.location(1106,69);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:69: ( ws )?
                            int alt270=2;
                            try { dbg.enterSubRule(270);
                            try { dbg.enterDecision(270, decisionCanBacktrack[270]);

                            int LA270_0 = input.LA(1);

                            if ( ((LA270_0>=WS && LA270_0<=COMMENT)) ) {
                                alt270=1;
                            }
                            } finally {dbg.exitDecision(270);}

                            switch (alt270) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:69: ws
                                    {
                                    dbg.location(1106,69);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6730);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(270);}

                            dbg.location(1106,73);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:73: ( cp_mixin_call_args )?
                            int alt271=2;
                            try { dbg.enterSubRule(271);
                            try { dbg.enterDecision(271, decisionCanBacktrack[271]);

                            int LA271_0 = input.LA(1);

                            if ( (LA271_0==NAMESPACE_SYM||(LA271_0>=IDENT && LA271_0<=IMPORT_SYM)||LA271_0==LPAREN||LA271_0==MEDIA_SYM||LA271_0==IMPORTANT_SYM||(LA271_0>=NOT && LA271_0<=GEN)||(LA271_0>=AT_IDENT && LA271_0<=MOZ_DOCUMENT_SYM)||(LA271_0>=WEBKIT_KEYFRAMES_SYM && LA271_0<=RIGHTBOTTOM_SYM)||(LA271_0>=MINUS && LA271_0<=SASS_AT_ROOT)||(LA271_0>=TILDE && LA271_0<=HASH)||(LA271_0>=SASS_VAR && LA271_0<=PERCENTAGE_SYMBOL)||(LA271_0>=SASS_CONTENT && LA271_0<=SASS_WHILE)) ) {
                                alt271=1;
                            }
                            } finally {dbg.exitDecision(271);}

                            switch (alt271) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:73: cp_mixin_call_args
                                    {
                                    dbg.location(1106,73);
                                    pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call6733);
                                    cp_mixin_call_args();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(271);}

                            dbg.location(1106,93);
                            match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call6736); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(272);}

                    dbg.location(1106,102);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:102: ( ( ws )? cp_mixin_block )?
                    int alt274=2;
                    try { dbg.enterSubRule(274);
                    try { dbg.enterDecision(274, decisionCanBacktrack[274]);

                    try {
                        isCyclicDecision = true;
                        alt274 = dfa274.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(274);}

                    switch (alt274) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:103: ( ws )? cp_mixin_block
                            {
                            dbg.location(1106,103);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:103: ( ws )?
                            int alt273=2;
                            try { dbg.enterSubRule(273);
                            try { dbg.enterDecision(273, decisionCanBacktrack[273]);

                            int LA273_0 = input.LA(1);

                            if ( ((LA273_0>=WS && LA273_0<=COMMENT)) ) {
                                alt273=1;
                            }
                            } finally {dbg.exitDecision(273);}

                            switch (alt273) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:103: ws
                                    {
                                    dbg.location(1106,103);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6741);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(273);}

                            dbg.location(1106,107);
                            pushFollow(FOLLOW_cp_mixin_block_in_cp_mixin_call6744);
                            cp_mixin_block();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(274);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(275);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1108, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call"


    // $ANTLR start "cp_mixin_block"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1110:1: cp_mixin_block : LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void cp_mixin_block() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_block");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1110, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:5: ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1112:5: LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(1112,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_cp_mixin_block6773); if (state.failed) return ;
            dbg.location(1112,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1112:12: ( ws )?
            int alt276=2;
            try { dbg.enterSubRule(276);
            try { dbg.enterDecision(276, decisionCanBacktrack[276]);

            int LA276_0 = input.LA(1);

            if ( ((LA276_0>=WS && LA276_0<=COMMENT)) ) {
                alt276=1;
            }
            } finally {dbg.exitDecision(276);}

            switch (alt276) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1112:12: ws
                    {
                    dbg.location(1112,12);
                    pushFollow(FOLLOW_ws_in_cp_mixin_block6775);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(276);}

            dbg.location(1112,16);
            pushFollow(FOLLOW_syncToFollow_in_cp_mixin_block6778);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1113,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1113:9: ( declarations )?
            int alt277=2;
            try { dbg.enterSubRule(277);
            try { dbg.enterDecision(277, decisionCanBacktrack[277]);

            int LA277_0 = input.LA(1);

            if ( ((LA277_0>=NAMESPACE_SYM && LA277_0<=IDENT)||(LA277_0>=CHARSET_SYM && LA277_0<=COMMA)||LA277_0==MEDIA_SYM||(LA277_0>=GEN && LA277_0<=MOZ_DOCUMENT_SYM)||LA277_0==WEBKIT_KEYFRAMES_SYM||(LA277_0>=PAGE_SYM && LA277_0<=RIGHTBOTTOM_SYM)||(LA277_0>=MINUS && LA277_0<=PIPE)||LA277_0==LESS_AND||(LA277_0>=RBRACKET && LA277_0<=SASS_VAR)||(LA277_0>=SASS_CONTENT && LA277_0<=SASS_WHILE)||LA277_0==AT_SIGN) ) {
                alt277=1;
            }
            } finally {dbg.exitDecision(277);}

            switch (alt277) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1113:9: declarations
                    {
                    dbg.location(1113,9);
                    pushFollow(FOLLOW_declarations_in_cp_mixin_block6788);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(277);}

            dbg.location(1114,5);
            match(input,RBRACE,FOLLOW_RBRACE_in_cp_mixin_block6795); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1115, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_block");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_block"


    // $ANTLR start "cp_mixin_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:1: cp_mixin_name : IDENT ;
    public final void cp_mixin_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1117, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1118:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1119:5: IDENT
            {
            dbg.location(1119,5);
            match(input,IDENT,FOLLOW_IDENT_in_cp_mixin_name6816); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1120, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_name"


    // $ANTLR start "cp_mixin_call_args"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1122:1: cp_mixin_call_args : cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS ( ws )? )? ;
    public final void cp_mixin_call_args() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_args");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1122, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1123:5: ( cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS ( ws )? )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1126:5: cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS ( ws )? )?
            {
            dbg.location(1126,5);
            pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6847);
            cp_mixin_call_arg();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1126,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1126:23: ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )*
            try { dbg.enterSubRule(279);

            loop279:
            do {
                int alt279=2;
                try { dbg.enterDecision(279, decisionCanBacktrack[279]);

                int LA279_0 = input.LA(1);

                if ( (LA279_0==SEMI||LA279_0==COMMA) ) {
                    alt279=1;
                }


                } finally {dbg.exitDecision(279);}

                switch (alt279) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1126:25: ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg
            	    {
            	    dbg.location(1126,25);
            	    if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1126,40);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1126:40: ( ws )?
            	    int alt278=2;
            	    try { dbg.enterSubRule(278);
            	    try { dbg.enterDecision(278, decisionCanBacktrack[278]);

            	    int LA278_0 = input.LA(1);

            	    if ( ((LA278_0>=WS && LA278_0<=COMMENT)) ) {
            	        alt278=1;
            	    }
            	    } finally {dbg.exitDecision(278);}

            	    switch (alt278) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1126:40: ws
            	            {
            	            dbg.location(1126,40);
            	            pushFollow(FOLLOW_ws_in_cp_mixin_call_args6859);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(278);}

            	    dbg.location(1126,44);
            	    pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6862);
            	    cp_mixin_call_arg();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop279;
                }
            } while (true);
            } finally {dbg.exitSubRule(279);}

            dbg.location(1126,65);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1126:65: ( CP_DOTS ( ws )? )?
            int alt281=2;
            try { dbg.enterSubRule(281);
            try { dbg.enterDecision(281, decisionCanBacktrack[281]);

            int LA281_0 = input.LA(1);

            if ( (LA281_0==CP_DOTS) ) {
                alt281=1;
            }
            } finally {dbg.exitDecision(281);}

            switch (alt281) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1126:66: CP_DOTS ( ws )?
                    {
                    dbg.location(1126,66);
                    match(input,CP_DOTS,FOLLOW_CP_DOTS_in_cp_mixin_call_args6868); if (state.failed) return ;
                    dbg.location(1126,74);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1126:74: ( ws )?
                    int alt280=2;
                    try { dbg.enterSubRule(280);
                    try { dbg.enterDecision(280, decisionCanBacktrack[280]);

                    int LA280_0 = input.LA(1);

                    if ( ((LA280_0>=WS && LA280_0<=COMMENT)) ) {
                        alt280=1;
                    }
                    } finally {dbg.exitDecision(280);}

                    switch (alt280) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1126:74: ws
                            {
                            dbg.location(1126,74);
                            pushFollow(FOLLOW_ws_in_cp_mixin_call_args6870);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(280);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(281);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1127, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call_args");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call_args"


    // $ANTLR start "cp_mixin_call_arg"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1129:1: cp_mixin_call_arg : ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? ;
    public final void cp_mixin_call_arg() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_arg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1129, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:5: ( ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )?
            {
            dbg.location(1131,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )
            int alt284=2;
            try { dbg.enterSubRule(284);
            try { dbg.enterDecision(284, decisionCanBacktrack[284]);

            try {
                isCyclicDecision = true;
                alt284 = dfa284.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(284);}

            switch (alt284) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:9: cp_variable ( ws )? COLON ( ws )? cp_expression
                    {
                    dbg.location(1132,9);
                    pushFollow(FOLLOW_cp_variable_in_cp_mixin_call_arg6904);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1132,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:21: ( ws )?
                    int alt282=2;
                    try { dbg.enterSubRule(282);
                    try { dbg.enterDecision(282, decisionCanBacktrack[282]);

                    int LA282_0 = input.LA(1);

                    if ( ((LA282_0>=WS && LA282_0<=COMMENT)) ) {
                        alt282=1;
                    }
                    } finally {dbg.exitDecision(282);}

                    switch (alt282) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:21: ws
                            {
                            dbg.location(1132,21);
                            pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6906);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(282);}

                    dbg.location(1132,25);
                    match(input,COLON,FOLLOW_COLON_in_cp_mixin_call_arg6909); if (state.failed) return ;
                    dbg.location(1132,31);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:31: ( ws )?
                    int alt283=2;
                    try { dbg.enterSubRule(283);
                    try { dbg.enterDecision(283, decisionCanBacktrack[283]);

                    int LA283_0 = input.LA(1);

                    if ( ((LA283_0>=WS && LA283_0<=COMMENT)) ) {
                        alt283=1;
                    }
                    } finally {dbg.exitDecision(283);}

                    switch (alt283) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:31: ws
                            {
                            dbg.location(1132,31);
                            pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6911);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(283);}

                    dbg.location(1132,35);
                    pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg6914);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1133:11: cp_expression
                    {
                    dbg.location(1133,11);
                    pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg6926);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(284);}

            dbg.location(1134,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:7: ( ws )?
            int alt285=2;
            try { dbg.enterSubRule(285);
            try { dbg.enterDecision(285, decisionCanBacktrack[285]);

            int LA285_0 = input.LA(1);

            if ( ((LA285_0>=WS && LA285_0<=COMMENT)) ) {
                alt285=1;
            }
            } finally {dbg.exitDecision(285);}

            switch (alt285) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:7: ws
                    {
                    dbg.location(1134,7);
                    pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6934);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(285);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1135, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call_arg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call_arg"


    // $ANTLR start "cp_args_list"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:1: cp_args_list : ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? ) | ( CP_DOTS | LESS_REST ) ( ws )? );
    public final void cp_args_list() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_args_list");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1138, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1139:5: ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? ) | ( CP_DOTS | LESS_REST ) ( ws )? )
            int alt293=2;
            try { dbg.enterDecision(293, decisionCanBacktrack[293]);

            int LA293_0 = input.LA(1);

            if ( (LA293_0==NAMESPACE_SYM||(LA293_0>=CHARSET_SYM && LA293_0<=IMPORT_SYM)||LA293_0==MEDIA_SYM||(LA293_0>=AT_IDENT && LA293_0<=MOZ_DOCUMENT_SYM)||LA293_0==WEBKIT_KEYFRAMES_SYM||(LA293_0>=PAGE_SYM && LA293_0<=RIGHTBOTTOM_SYM)||LA293_0==SASS_AT_ROOT||LA293_0==SASS_VAR||(LA293_0>=SASS_CONTENT && LA293_0<=SASS_WHILE)) ) {
                alt293=1;
            }
            else if ( ((LA293_0>=CP_DOTS && LA293_0<=LESS_REST)) ) {
                alt293=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 293, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(293);}

            switch (alt293) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? )
                    {
                    dbg.location(1146,5);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:7: cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )?
                    {
                    dbg.location(1146,7);
                    pushFollow(FOLLOW_cp_arg_in_cp_args_list6981);
                    cp_arg();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1146,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*
                    try { dbg.enterSubRule(287);

                    loop287:
                    do {
                        int alt287=2;
                        try { dbg.enterDecision(287, decisionCanBacktrack[287]);

                        try {
                            isCyclicDecision = true;
                            alt287 = dfa287.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(287);}

                        switch (alt287) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:16: ( COMMA | SEMI ) ( ws )? cp_arg
                    	    {
                    	    dbg.location(1146,16);
                    	    if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
                    	        input.consume();
                    	        state.errorRecovery=false;state.failed=false;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return ;}
                    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                    	        dbg.recognitionException(mse);
                    	        throw mse;
                    	    }

                    	    dbg.location(1146,33);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:33: ( ws )?
                    	    int alt286=2;
                    	    try { dbg.enterSubRule(286);
                    	    try { dbg.enterDecision(286, decisionCanBacktrack[286]);

                    	    int LA286_0 = input.LA(1);

                    	    if ( ((LA286_0>=WS && LA286_0<=COMMENT)) ) {
                    	        alt286=1;
                    	    }
                    	    } finally {dbg.exitDecision(286);}

                    	    switch (alt286) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:33: ws
                    	            {
                    	            dbg.location(1146,33);
                    	            pushFollow(FOLLOW_ws_in_cp_args_list6995);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(286);}

                    	    dbg.location(1146,37);
                    	    pushFollow(FOLLOW_cp_arg_in_cp_args_list6998);
                    	    cp_arg();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop287;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(287);}

                    dbg.location(1146,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:47: ( ( COMMA | SEMI ) ( ws )? )?
                    int alt289=2;
                    try { dbg.enterSubRule(289);
                    try { dbg.enterDecision(289, decisionCanBacktrack[289]);

                    int LA289_0 = input.LA(1);

                    if ( (LA289_0==SEMI||LA289_0==COMMA) ) {
                        alt289=1;
                    }
                    } finally {dbg.exitDecision(289);}

                    switch (alt289) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:49: ( COMMA | SEMI ) ( ws )?
                            {
                            dbg.location(1146,49);
                            if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
                                input.consume();
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                dbg.recognitionException(mse);
                                throw mse;
                            }

                            dbg.location(1146,64);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:64: ( ws )?
                            int alt288=2;
                            try { dbg.enterSubRule(288);
                            try { dbg.enterDecision(288, decisionCanBacktrack[288]);

                            int LA288_0 = input.LA(1);

                            if ( ((LA288_0>=WS && LA288_0<=COMMENT)) ) {
                                alt288=1;
                            }
                            } finally {dbg.exitDecision(288);}

                            switch (alt288) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:64: ws
                                    {
                                    dbg.location(1146,64);
                                    pushFollow(FOLLOW_ws_in_cp_args_list7013);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(288);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(289);}

                    dbg.location(1146,71);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:71: ( ( CP_DOTS | LESS_REST ) ( ws )? )?
                    int alt291=2;
                    try { dbg.enterSubRule(291);
                    try { dbg.enterDecision(291, decisionCanBacktrack[291]);

                    int LA291_0 = input.LA(1);

                    if ( ((LA291_0>=CP_DOTS && LA291_0<=LESS_REST)) ) {
                        alt291=1;
                    }
                    } finally {dbg.exitDecision(291);}

                    switch (alt291) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:73: ( CP_DOTS | LESS_REST ) ( ws )?
                            {
                            dbg.location(1146,73);
                            if ( (input.LA(1)>=CP_DOTS && input.LA(1)<=LESS_REST) ) {
                                input.consume();
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                dbg.recognitionException(mse);
                                throw mse;
                            }

                            dbg.location(1146,95);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:95: ( ws )?
                            int alt290=2;
                            try { dbg.enterSubRule(290);
                            try { dbg.enterDecision(290, decisionCanBacktrack[290]);

                            int LA290_0 = input.LA(1);

                            if ( ((LA290_0>=WS && LA290_0<=COMMENT)) ) {
                                alt290=1;
                            }
                            } finally {dbg.exitDecision(290);}

                            switch (alt290) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:95: ws
                                    {
                                    dbg.location(1146,95);
                                    pushFollow(FOLLOW_ws_in_cp_args_list7029);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(290);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(291);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1148:5: ( CP_DOTS | LESS_REST ) ( ws )?
                    {
                    dbg.location(1148,5);
                    if ( (input.LA(1)>=CP_DOTS && input.LA(1)<=LESS_REST) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(1148,27);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1148:27: ( ws )?
                    int alt292=2;
                    try { dbg.enterSubRule(292);
                    try { dbg.enterDecision(292, decisionCanBacktrack[292]);

                    int LA292_0 = input.LA(1);

                    if ( ((LA292_0>=WS && LA292_0<=COMMENT)) ) {
                        alt292=1;
                    }
                    } finally {dbg.exitDecision(292);}

                    switch (alt292) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1148:27: ws
                            {
                            dbg.location(1148,27);
                            pushFollow(FOLLOW_ws_in_cp_args_list7054);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(292);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1149, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_args_list");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_args_list"


    // $ANTLR start "cp_arg"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1152:1: cp_arg : cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? ;
    public final void cp_arg() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_arg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1152, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1153:5: ( cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:5: cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )?
            {
            dbg.location(1154,5);
            pushFollow(FOLLOW_cp_variable_in_cp_arg7077);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1154,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:17: ( ws )?
            int alt294=2;
            try { dbg.enterSubRule(294);
            try { dbg.enterDecision(294, decisionCanBacktrack[294]);

            int LA294_0 = input.LA(1);

            if ( ((LA294_0>=WS && LA294_0<=COMMENT)) ) {
                alt294=1;
            }
            } finally {dbg.exitDecision(294);}

            switch (alt294) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:17: ws
                    {
                    dbg.location(1154,17);
                    pushFollow(FOLLOW_ws_in_cp_arg7079);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(294);}

            dbg.location(1154,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:21: ( COLON ( ws )? cp_expression ( ws )? )?
            int alt297=2;
            try { dbg.enterSubRule(297);
            try { dbg.enterDecision(297, decisionCanBacktrack[297]);

            int LA297_0 = input.LA(1);

            if ( (LA297_0==COLON) ) {
                alt297=1;
            }
            } finally {dbg.exitDecision(297);}

            switch (alt297) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:23: COLON ( ws )? cp_expression ( ws )?
                    {
                    dbg.location(1154,23);
                    match(input,COLON,FOLLOW_COLON_in_cp_arg7084); if (state.failed) return ;
                    dbg.location(1154,29);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:29: ( ws )?
                    int alt295=2;
                    try { dbg.enterSubRule(295);
                    try { dbg.enterDecision(295, decisionCanBacktrack[295]);

                    int LA295_0 = input.LA(1);

                    if ( ((LA295_0>=WS && LA295_0<=COMMENT)) ) {
                        alt295=1;
                    }
                    } finally {dbg.exitDecision(295);}

                    switch (alt295) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:29: ws
                            {
                            dbg.location(1154,29);
                            pushFollow(FOLLOW_ws_in_cp_arg7086);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(295);}

                    dbg.location(1154,33);
                    pushFollow(FOLLOW_cp_expression_in_cp_arg7089);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1154,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:47: ( ws )?
                    int alt296=2;
                    try { dbg.enterSubRule(296);
                    try { dbg.enterDecision(296, decisionCanBacktrack[296]);

                    int LA296_0 = input.LA(1);

                    if ( ((LA296_0>=WS && LA296_0<=COMMENT)) ) {
                        alt296=1;
                    }
                    } finally {dbg.exitDecision(296);}

                    switch (alt296) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:47: ws
                            {
                            dbg.location(1154,47);
                            pushFollow(FOLLOW_ws_in_cp_arg7091);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(296);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(297);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1155, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_arg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_arg"


    // $ANTLR start "less_mixin_guarded"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1159:1: less_mixin_guarded : LESS_WHEN ( ws )? less_condition ( ( ws )? ( COMMA | AND ) ( ws )? less_condition )* ;
    public final void less_mixin_guarded() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_mixin_guarded");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1159, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1160:5: ( LESS_WHEN ( ws )? less_condition ( ( ws )? ( COMMA | AND ) ( ws )? less_condition )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:5: LESS_WHEN ( ws )? less_condition ( ( ws )? ( COMMA | AND ) ( ws )? less_condition )*
            {
            dbg.location(1161,5);
            match(input,LESS_WHEN,FOLLOW_LESS_WHEN_in_less_mixin_guarded7117); if (state.failed) return ;
            dbg.location(1161,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:15: ( ws )?
            int alt298=2;
            try { dbg.enterSubRule(298);
            try { dbg.enterDecision(298, decisionCanBacktrack[298]);

            int LA298_0 = input.LA(1);

            if ( ((LA298_0>=WS && LA298_0<=COMMENT)) ) {
                alt298=1;
            }
            } finally {dbg.exitDecision(298);}

            switch (alt298) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:15: ws
                    {
                    dbg.location(1161,15);
                    pushFollow(FOLLOW_ws_in_less_mixin_guarded7119);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(298);}

            dbg.location(1161,19);
            pushFollow(FOLLOW_less_condition_in_less_mixin_guarded7122);
            less_condition();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1161,34);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:34: ( ( ws )? ( COMMA | AND ) ( ws )? less_condition )*
            try { dbg.enterSubRule(301);

            loop301:
            do {
                int alt301=2;
                try { dbg.enterDecision(301, decisionCanBacktrack[301]);

                try {
                    isCyclicDecision = true;
                    alt301 = dfa301.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(301);}

                switch (alt301) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:35: ( ws )? ( COMMA | AND ) ( ws )? less_condition
            	    {
            	    dbg.location(1161,35);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:35: ( ws )?
            	    int alt299=2;
            	    try { dbg.enterSubRule(299);
            	    try { dbg.enterDecision(299, decisionCanBacktrack[299]);

            	    int LA299_0 = input.LA(1);

            	    if ( ((LA299_0>=WS && LA299_0<=COMMENT)) ) {
            	        alt299=1;
            	    }
            	    } finally {dbg.exitDecision(299);}

            	    switch (alt299) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:35: ws
            	            {
            	            dbg.location(1161,35);
            	            pushFollow(FOLLOW_ws_in_less_mixin_guarded7125);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(299);}

            	    dbg.location(1161,39);
            	    if ( input.LA(1)==COMMA||input.LA(1)==AND ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1161,53);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:53: ( ws )?
            	    int alt300=2;
            	    try { dbg.enterSubRule(300);
            	    try { dbg.enterDecision(300, decisionCanBacktrack[300]);

            	    int LA300_0 = input.LA(1);

            	    if ( ((LA300_0>=WS && LA300_0<=COMMENT)) ) {
            	        alt300=1;
            	    }
            	    } finally {dbg.exitDecision(300);}

            	    switch (alt300) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:53: ws
            	            {
            	            dbg.location(1161,53);
            	            pushFollow(FOLLOW_ws_in_less_mixin_guarded7136);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(300);}

            	    dbg.location(1161,57);
            	    pushFollow(FOLLOW_less_condition_in_less_mixin_guarded7139);
            	    less_condition();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop301;
                }
            } while (true);
            } finally {dbg.exitSubRule(301);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1162, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_mixin_guarded");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_mixin_guarded"


    // $ANTLR start "less_condition"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1166:1: less_condition : ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN ;
    public final void less_condition() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_condition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1166, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1167:5: ( ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:5: ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN
            {
            dbg.location(1168,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:5: ( NOT ( ws )? )?
            int alt303=2;
            try { dbg.enterSubRule(303);
            try { dbg.enterDecision(303, decisionCanBacktrack[303]);

            int LA303_0 = input.LA(1);

            if ( (LA303_0==NOT) ) {
                alt303=1;
            }
            } finally {dbg.exitDecision(303);}

            switch (alt303) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:6: NOT ( ws )?
                    {
                    dbg.location(1168,6);
                    match(input,NOT,FOLLOW_NOT_in_less_condition7165); if (state.failed) return ;
                    dbg.location(1168,10);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:10: ( ws )?
                    int alt302=2;
                    try { dbg.enterSubRule(302);
                    try { dbg.enterDecision(302, decisionCanBacktrack[302]);

                    int LA302_0 = input.LA(1);

                    if ( ((LA302_0>=WS && LA302_0<=COMMENT)) ) {
                        alt302=1;
                    }
                    } finally {dbg.exitDecision(302);}

                    switch (alt302) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:10: ws
                            {
                            dbg.location(1168,10);
                            pushFollow(FOLLOW_ws_in_less_condition7167);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(302);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(303);}

            dbg.location(1169,5);
            match(input,LPAREN,FOLLOW_LPAREN_in_less_condition7176); if (state.failed) return ;
            dbg.location(1169,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1169:12: ( ws )?
            int alt304=2;
            try { dbg.enterSubRule(304);
            try { dbg.enterDecision(304, decisionCanBacktrack[304]);

            int LA304_0 = input.LA(1);

            if ( ((LA304_0>=WS && LA304_0<=COMMENT)) ) {
                alt304=1;
            }
            } finally {dbg.exitDecision(304);}

            switch (alt304) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1169:12: ws
                    {
                    dbg.location(1169,12);
                    pushFollow(FOLLOW_ws_in_less_condition7178);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(304);}

            dbg.location(1170,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1170:9: ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:14: ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )?
            {
            dbg.location(1171,14);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:14: ( cp_variable | less_function_in_condition )
            int alt305=2;
            try { dbg.enterSubRule(305);
            try { dbg.enterDecision(305, decisionCanBacktrack[305]);

            int LA305_0 = input.LA(1);

            if ( (LA305_0==NAMESPACE_SYM||(LA305_0>=CHARSET_SYM && LA305_0<=IMPORT_SYM)||LA305_0==MEDIA_SYM||(LA305_0>=AT_IDENT && LA305_0<=MOZ_DOCUMENT_SYM)||LA305_0==WEBKIT_KEYFRAMES_SYM||(LA305_0>=PAGE_SYM && LA305_0<=RIGHTBOTTOM_SYM)||LA305_0==SASS_AT_ROOT||LA305_0==SASS_VAR||(LA305_0>=SASS_CONTENT && LA305_0<=SASS_WHILE)) ) {
                alt305=1;
            }
            else if ( (LA305_0==IDENT) ) {
                alt305=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 305, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(305);}

            switch (alt305) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:15: cp_variable
                    {
                    dbg.location(1171,15);
                    pushFollow(FOLLOW_cp_variable_in_less_condition7205);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:29: less_function_in_condition
                    {
                    dbg.location(1171,29);
                    pushFollow(FOLLOW_less_function_in_condition_in_less_condition7209);
                    less_function_in_condition();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(305);}

            dbg.location(1171,57);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:57: ( ws )?
            int alt306=2;
            try { dbg.enterSubRule(306);
            try { dbg.enterDecision(306, decisionCanBacktrack[306]);

            int LA306_0 = input.LA(1);

            if ( ((LA306_0>=WS && LA306_0<=COMMENT)) ) {
                alt306=1;
            }
            } finally {dbg.exitDecision(306);}

            switch (alt306) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:57: ws
                    {
                    dbg.location(1171,57);
                    pushFollow(FOLLOW_ws_in_less_condition7212);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(306);}

            dbg.location(1171,61);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:61: ( less_condition_operator ( ws )? cp_math_expression )?
            int alt308=2;
            try { dbg.enterSubRule(308);
            try { dbg.enterDecision(308, decisionCanBacktrack[308]);

            int LA308_0 = input.LA(1);

            if ( (LA308_0==GREATER||LA308_0==OPEQ||(LA308_0>=LESS && LA308_0<=GREATER_OR_EQ)) ) {
                alt308=1;
            }
            } finally {dbg.exitDecision(308);}

            switch (alt308) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:62: less_condition_operator ( ws )? cp_math_expression
                    {
                    dbg.location(1171,62);
                    pushFollow(FOLLOW_less_condition_operator_in_less_condition7216);
                    less_condition_operator();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1171,86);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:86: ( ws )?
                    int alt307=2;
                    try { dbg.enterSubRule(307);
                    try { dbg.enterDecision(307, decisionCanBacktrack[307]);

                    int LA307_0 = input.LA(1);

                    if ( ((LA307_0>=WS && LA307_0<=COMMENT)) ) {
                        alt307=1;
                    }
                    } finally {dbg.exitDecision(307);}

                    switch (alt307) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:86: ws
                            {
                            dbg.location(1171,86);
                            pushFollow(FOLLOW_ws_in_less_condition7218);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(307);}

                    dbg.location(1171,90);
                    pushFollow(FOLLOW_cp_math_expression_in_less_condition7221);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(308);}


            }

            dbg.location(1173,5);
            match(input,RPAREN,FOLLOW_RPAREN_in_less_condition7239); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1174, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_condition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_condition"


    // $ANTLR start "less_function_in_condition"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1177:1: less_function_in_condition : less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN ;
    public final void less_function_in_condition() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_function_in_condition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1177, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1178:5: ( less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1179:5: less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN
            {
            dbg.location(1179,5);
            pushFollow(FOLLOW_less_fn_name_in_less_function_in_condition7261);
            less_fn_name();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1179,18);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1179:18: ( ws )?
            int alt309=2;
            try { dbg.enterSubRule(309);
            try { dbg.enterDecision(309, decisionCanBacktrack[309]);

            int LA309_0 = input.LA(1);

            if ( ((LA309_0>=WS && LA309_0<=COMMENT)) ) {
                alt309=1;
            }
            } finally {dbg.exitDecision(309);}

            switch (alt309) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1179:18: ws
                    {
                    dbg.location(1179,18);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition7263);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(309);}

            dbg.location(1179,22);
            match(input,LPAREN,FOLLOW_LPAREN_in_less_function_in_condition7266); if (state.failed) return ;
            dbg.location(1179,29);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1179:29: ( ws )?
            int alt310=2;
            try { dbg.enterSubRule(310);
            try { dbg.enterDecision(310, decisionCanBacktrack[310]);

            int LA310_0 = input.LA(1);

            if ( ((LA310_0>=WS && LA310_0<=COMMENT)) ) {
                alt310=1;
            }
            } finally {dbg.exitDecision(310);}

            switch (alt310) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1179:29: ws
                    {
                    dbg.location(1179,29);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition7268);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(310);}

            dbg.location(1179,33);
            pushFollow(FOLLOW_cp_variable_in_less_function_in_condition7271);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1179,45);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1179:45: ( ws )?
            int alt311=2;
            try { dbg.enterSubRule(311);
            try { dbg.enterDecision(311, decisionCanBacktrack[311]);

            int LA311_0 = input.LA(1);

            if ( ((LA311_0>=WS && LA311_0<=COMMENT)) ) {
                alt311=1;
            }
            } finally {dbg.exitDecision(311);}

            switch (alt311) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1179:45: ws
                    {
                    dbg.location(1179,45);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition7273);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(311);}

            dbg.location(1179,49);
            match(input,RPAREN,FOLLOW_RPAREN_in_less_function_in_condition7276); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1180, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_function_in_condition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_function_in_condition"


    // $ANTLR start "less_fn_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1183:1: less_fn_name : IDENT ;
    public final void less_fn_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_fn_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1183, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1184:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1185:5: IDENT
            {
            dbg.location(1185,5);
            match(input,IDENT,FOLLOW_IDENT_in_less_fn_name7298); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1186, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_fn_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_fn_name"


    // $ANTLR start "less_condition_operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1188:1: less_condition_operator : ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ );
    public final void less_condition_operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_condition_operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1188, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1189:5: ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(1189,5);
            if ( input.LA(1)==GREATER||input.LA(1)==OPEQ||(input.LA(1)>=LESS && input.LA(1)<=GREATER_OR_EQ) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1191, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_condition_operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_condition_operator"


    // $ANTLR start "less_selector_interpolation"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1193:1: less_selector_interpolation : AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE ;
    public final void less_selector_interpolation() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_selector_interpolation");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1193, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1194:5: ( AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1195:5: AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE
            {
            dbg.location(1195,5);
            match(input,AT_SIGN,FOLLOW_AT_SIGN_in_less_selector_interpolation7356); if (state.failed) return ;
            dbg.location(1195,13);
            match(input,LBRACE,FOLLOW_LBRACE_in_less_selector_interpolation7358); if (state.failed) return ;
            dbg.location(1195,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1195:20: ( ws )?
            int alt312=2;
            try { dbg.enterSubRule(312);
            try { dbg.enterDecision(312, decisionCanBacktrack[312]);

            int LA312_0 = input.LA(1);

            if ( ((LA312_0>=WS && LA312_0<=COMMENT)) ) {
                alt312=1;
            }
            } finally {dbg.exitDecision(312);}

            switch (alt312) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1195:20: ws
                    {
                    dbg.location(1195,20);
                    pushFollow(FOLLOW_ws_in_less_selector_interpolation7360);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(312);}

            dbg.location(1195,24);
            match(input,IDENT,FOLLOW_IDENT_in_less_selector_interpolation7363); if (state.failed) return ;
            dbg.location(1195,30);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1195:30: ( ws )?
            int alt313=2;
            try { dbg.enterSubRule(313);
            try { dbg.enterDecision(313, decisionCanBacktrack[313]);

            int LA313_0 = input.LA(1);

            if ( ((LA313_0>=WS && LA313_0<=COMMENT)) ) {
                alt313=1;
            }
            } finally {dbg.exitDecision(313);}

            switch (alt313) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1195:30: ws
                    {
                    dbg.location(1195,30);
                    pushFollow(FOLLOW_ws_in_less_selector_interpolation7365);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(313);}

            dbg.location(1195,34);
            match(input,RBRACE,FOLLOW_RBRACE_in_less_selector_interpolation7368); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1196, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_selector_interpolation");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_selector_interpolation"


    // $ANTLR start "sass_selector_interpolation_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1203:1: sass_selector_interpolation_expression : ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )* ;
    public final void sass_selector_interpolation_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_selector_interpolation_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1203, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:5: ( ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1205:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )*
            {
            dbg.location(1205,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1205:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) )
            int alt314=2;
            try { dbg.enterSubRule(314);
            try { dbg.enterDecision(314, decisionCanBacktrack[314]);

            int LA314_0 = input.LA(1);

            if ( (LA314_0==HASH_SYMBOL) ) {
                int LA314_1 = input.LA(2);

                if ( (synpred42_Css3()) ) {
                    alt314=1;
                }
                else if ( (true) ) {
                    alt314=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 314, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA314_0==IDENT||LA314_0==COMMA||LA314_0==COLON||LA314_0==MINUS||LA314_0==GREATER||(LA314_0>=HASH && LA314_0<=LBRACKET)||LA314_0==STAR||LA314_0==LESS_AND||LA314_0==RBRACKET) ) {
                alt314=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 314, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(314);}

            switch (alt314) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:13: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
                    {
                    dbg.location(1206,50);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7416);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1208:13: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET )
                    {
                    dbg.location(1208,13);
                    if ( input.LA(1)==IDENT||input.LA(1)==COMMA||input.LA(1)==COLON||input.LA(1)==MINUS||input.LA(1)==GREATER||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=LBRACKET)||input.LA(1)==STAR||input.LA(1)==LESS_AND||input.LA(1)==RBRACKET ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(314);}

            dbg.location(1210,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )*
            try { dbg.enterSubRule(317);

            loop317:
            do {
                int alt317=2;
                try { dbg.enterDecision(317, decisionCanBacktrack[317]);

                try {
                    isCyclicDecision = true;
                    alt317 = dfa317.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(317);}

                switch (alt317) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1211:13: ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) )
            	    {
            	    dbg.location(1211,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1211:13: ( ws )?
            	    int alt315=2;
            	    try { dbg.enterSubRule(315);
            	    try { dbg.enterDecision(315, decisionCanBacktrack[315]);

            	    int LA315_0 = input.LA(1);

            	    if ( ((LA315_0>=WS && LA315_0<=COMMENT)) ) {
            	        alt315=1;
            	    }
            	    } finally {dbg.exitDecision(315);}

            	    switch (alt315) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1211:13: ws
            	            {
            	            dbg.location(1211,13);
            	            pushFollow(FOLLOW_ws_in_sass_selector_interpolation_expression7525);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(315);}

            	    dbg.location(1212,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1212:13: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) )
            	    int alt316=2;
            	    try { dbg.enterSubRule(316);
            	    try { dbg.enterDecision(316, decisionCanBacktrack[316]);

            	    int LA316_0 = input.LA(1);

            	    if ( (LA316_0==HASH_SYMBOL) ) {
            	        int LA316_1 = input.LA(2);

            	        if ( (synpred43_Css3()) ) {
            	            alt316=1;
            	        }
            	        else if ( (true) ) {
            	            alt316=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return ;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 316, 1, input);

            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA316_0==IDENT||LA316_0==COMMA||LA316_0==COLON||LA316_0==MINUS||LA316_0==GREATER||(LA316_0>=HASH && LA316_0<=LBRACKET)||LA316_0==STAR||LA316_0==LESS_AND||LA316_0==RBRACKET) ) {
            	        alt316=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 316, 0, input);

            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(316);}

            	    switch (alt316) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1213:17: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
            	            {
            	            dbg.location(1213,54);
            	            pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7562);
            	            sass_interpolation_expression_var();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1215:17: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET )
            	            {
            	            dbg.location(1215,17);
            	            if ( input.LA(1)==IDENT||input.LA(1)==COMMA||input.LA(1)==COLON||input.LA(1)==MINUS||input.LA(1)==GREATER||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=LBRACKET)||input.LA(1)==STAR||input.LA(1)==LESS_AND||input.LA(1)==RBRACKET ) {
            	                input.consume();
            	                state.errorRecovery=false;state.failed=false;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                MismatchedSetException mse = new MismatchedSetException(null,input);
            	                dbg.recognitionException(mse);
            	                throw mse;
            	            }


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(316);}


            	    }
            	    break;

            	default :
            	    break loop317;
                }
            } while (true);
            } finally {dbg.exitSubRule(317);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1219, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_selector_interpolation_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_selector_interpolation_expression"


    // $ANTLR start "sass_declaration_interpolation_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1221:1: sass_declaration_interpolation_expression : ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )* ;
    public final void sass_declaration_interpolation_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_declaration_interpolation_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1221, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1222:5: ( ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1223:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*
            {
            dbg.location(1223,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1223:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            int alt318=2;
            try { dbg.enterSubRule(318);
            try { dbg.enterDecision(318, decisionCanBacktrack[318]);

            int LA318_0 = input.LA(1);

            if ( (LA318_0==HASH_SYMBOL) ) {
                int LA318_1 = input.LA(2);

                if ( (LA318_1==LBRACE) && (synpred44_Css3())) {
                    alt318=1;
                }
                else if ( (LA318_1==IDENT||LA318_1==COLON||LA318_1==MINUS||(LA318_1>=HASH_SYMBOL && LA318_1<=DOT)||(LA318_1>=WS && LA318_1<=COMMENT)) ) {
                    alt318=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 318, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA318_0==IDENT||LA318_0==MINUS||(LA318_0>=HASH && LA318_0<=DOT)) ) {
                alt318=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 318, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(318);}

            switch (alt318) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1224:13: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
                    {
                    dbg.location(1224,50);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7713);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:13: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH )
                    {
                    dbg.location(1226,13);
                    if ( input.LA(1)==IDENT||input.LA(1)==MINUS||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=DOT) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(318);}

            dbg.location(1228,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1228:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*
            try { dbg.enterSubRule(321);

            loop321:
            do {
                int alt321=2;
                try { dbg.enterDecision(321, decisionCanBacktrack[321]);

                try {
                    isCyclicDecision = true;
                    alt321 = dfa321.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(321);}

                switch (alt321) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1229:13: ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            	    {
            	    dbg.location(1229,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1229:13: ( ws )?
            	    int alt319=2;
            	    try { dbg.enterSubRule(319);
            	    try { dbg.enterDecision(319, decisionCanBacktrack[319]);

            	    int LA319_0 = input.LA(1);

            	    if ( ((LA319_0>=WS && LA319_0<=COMMENT)) ) {
            	        alt319=1;
            	    }
            	    } finally {dbg.exitDecision(319);}

            	    switch (alt319) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1229:13: ws
            	            {
            	            dbg.location(1229,13);
            	            pushFollow(FOLLOW_ws_in_sass_declaration_interpolation_expression7793);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(319);}

            	    dbg.location(1230,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:13: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            	    int alt320=2;
            	    try { dbg.enterSubRule(320);
            	    try { dbg.enterDecision(320, decisionCanBacktrack[320]);

            	    int LA320_0 = input.LA(1);

            	    if ( (LA320_0==HASH_SYMBOL) ) {
            	        int LA320_1 = input.LA(2);

            	        if ( (LA320_1==LBRACE) && (synpred45_Css3())) {
            	            alt320=1;
            	        }
            	        else if ( (LA320_1==IDENT||LA320_1==COLON||LA320_1==MINUS||(LA320_1>=HASH_SYMBOL && LA320_1<=DOT)||(LA320_1>=WS && LA320_1<=COMMENT)) ) {
            	            alt320=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return ;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 320, 1, input);

            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA320_0==IDENT||LA320_0==MINUS||(LA320_0>=HASH && LA320_0<=DOT)) ) {
            	        alt320=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 320, 0, input);

            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(320);}

            	    switch (alt320) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:17: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
            	            {
            	            dbg.location(1231,54);
            	            pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7830);
            	            sass_interpolation_expression_var();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1233:17: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH )
            	            {
            	            dbg.location(1233,17);
            	            if ( input.LA(1)==IDENT||input.LA(1)==MINUS||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=DOT) ) {
            	                input.consume();
            	                state.errorRecovery=false;state.failed=false;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                MismatchedSetException mse = new MismatchedSetException(null,input);
            	                dbg.recognitionException(mse);
            	                throw mse;
            	            }


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(320);}


            	    }
            	    break;

            	default :
            	    break loop321;
                }
            } while (true);
            } finally {dbg.exitSubRule(321);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1237, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_declaration_interpolation_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_declaration_interpolation_expression"


    // $ANTLR start "sass_interpolation_expression_var"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1239:1: sass_interpolation_expression_var : HASH_SYMBOL LBRACE cp_expression RBRACE ;
    public final void sass_interpolation_expression_var() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_interpolation_expression_var");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1239, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:5: ( HASH_SYMBOL LBRACE cp_expression RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1241:9: HASH_SYMBOL LBRACE cp_expression RBRACE
            {
            dbg.location(1241,9);
            match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var7935); if (state.failed) return ;
            dbg.location(1241,21);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_interpolation_expression_var7937); if (state.failed) return ;
            dbg.location(1241,28);
            pushFollow(FOLLOW_cp_expression_in_sass_interpolation_expression_var7939);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1241,42);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_interpolation_expression_var7941); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1242, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_interpolation_expression_var");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_interpolation_expression_var"


    // $ANTLR start "sass_nested_properties"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1262:1: sass_nested_properties : property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void sass_nested_properties() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_nested_properties");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1262, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:5: ( property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:5: property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(1264,5);
            pushFollow(FOLLOW_property_in_sass_nested_properties7981);
            property();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1264,14);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:14: ( ws )?
            int alt322=2;
            try { dbg.enterSubRule(322);
            try { dbg.enterDecision(322, decisionCanBacktrack[322]);

            int LA322_0 = input.LA(1);

            if ( ((LA322_0>=WS && LA322_0<=COMMENT)) ) {
                alt322=1;
            }
            } finally {dbg.exitDecision(322);}

            switch (alt322) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:14: ws
                    {
                    dbg.location(1264,14);
                    pushFollow(FOLLOW_ws_in_sass_nested_properties7983);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(322);}

            dbg.location(1264,18);
            match(input,COLON,FOLLOW_COLON_in_sass_nested_properties7986); if (state.failed) return ;
            dbg.location(1264,24);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:24: ( ws )?
            int alt323=2;
            try { dbg.enterSubRule(323);
            try { dbg.enterDecision(323, decisionCanBacktrack[323]);

            int LA323_0 = input.LA(1);

            if ( ((LA323_0>=WS && LA323_0<=COMMENT)) ) {
                alt323=1;
            }
            } finally {dbg.exitDecision(323);}

            switch (alt323) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:24: ws
                    {
                    dbg.location(1264,24);
                    pushFollow(FOLLOW_ws_in_sass_nested_properties7988);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(323);}

            dbg.location(1264,28);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:28: ( propertyValue ( ws )? )?
            int alt325=2;
            try { dbg.enterSubRule(325);
            try { dbg.enterDecision(325, decisionCanBacktrack[325]);

            int LA325_0 = input.LA(1);

            if ( (LA325_0==NAMESPACE_SYM||(LA325_0>=IDENT && LA325_0<=IMPORT_SYM)||LA325_0==MEDIA_SYM||LA325_0==GEN||(LA325_0>=AT_IDENT && LA325_0<=MOZ_DOCUMENT_SYM)||(LA325_0>=WEBKIT_KEYFRAMES_SYM && LA325_0<=RIGHTBOTTOM_SYM)||(LA325_0>=MINUS && LA325_0<=SASS_AT_ROOT)||(LA325_0>=TILDE && LA325_0<=HASH)||(LA325_0>=SASS_VAR && LA325_0<=PERCENTAGE_SYMBOL)||(LA325_0>=SASS_CONTENT && LA325_0<=SASS_WHILE)) ) {
                alt325=1;
            }
            } finally {dbg.exitDecision(325);}

            switch (alt325) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:29: propertyValue ( ws )?
                    {
                    dbg.location(1264,29);
                    pushFollow(FOLLOW_propertyValue_in_sass_nested_properties7992);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1264,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:43: ( ws )?
                    int alt324=2;
                    try { dbg.enterSubRule(324);
                    try { dbg.enterDecision(324, decisionCanBacktrack[324]);

                    int LA324_0 = input.LA(1);

                    if ( ((LA324_0>=WS && LA324_0<=COMMENT)) ) {
                        alt324=1;
                    }
                    } finally {dbg.exitDecision(324);}

                    switch (alt324) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:43: ws
                            {
                            dbg.location(1264,43);
                            pushFollow(FOLLOW_ws_in_sass_nested_properties7994);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(324);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(325);}

            dbg.location(1264,49);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_nested_properties7999); if (state.failed) return ;
            dbg.location(1264,56);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:56: ( ws )?
            int alt326=2;
            try { dbg.enterSubRule(326);
            try { dbg.enterDecision(326, decisionCanBacktrack[326]);

            int LA326_0 = input.LA(1);

            if ( ((LA326_0>=WS && LA326_0<=COMMENT)) ) {
                alt326=1;
            }
            } finally {dbg.exitDecision(326);}

            switch (alt326) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:56: ws
                    {
                    dbg.location(1264,56);
                    pushFollow(FOLLOW_ws_in_sass_nested_properties8001);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(326);}

            dbg.location(1264,60);
            pushFollow(FOLLOW_syncToFollow_in_sass_nested_properties8004);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1264,73);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:73: ( declarations )?
            int alt327=2;
            try { dbg.enterSubRule(327);
            try { dbg.enterDecision(327, decisionCanBacktrack[327]);

            int LA327_0 = input.LA(1);

            if ( ((LA327_0>=NAMESPACE_SYM && LA327_0<=IDENT)||(LA327_0>=CHARSET_SYM && LA327_0<=COMMA)||LA327_0==MEDIA_SYM||(LA327_0>=GEN && LA327_0<=MOZ_DOCUMENT_SYM)||LA327_0==WEBKIT_KEYFRAMES_SYM||(LA327_0>=PAGE_SYM && LA327_0<=RIGHTBOTTOM_SYM)||(LA327_0>=MINUS && LA327_0<=PIPE)||LA327_0==LESS_AND||(LA327_0>=RBRACKET && LA327_0<=SASS_VAR)||(LA327_0>=SASS_CONTENT && LA327_0<=SASS_WHILE)||LA327_0==AT_SIGN) ) {
                alt327=1;
            }
            } finally {dbg.exitDecision(327);}

            switch (alt327) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:73: declarations
                    {
                    dbg.location(1264,73);
                    pushFollow(FOLLOW_declarations_in_sass_nested_properties8006);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(327);}

            dbg.location(1264,87);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_nested_properties8009); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1265, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_nested_properties");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_nested_properties"


    // $ANTLR start "sass_extend"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1267:1: sass_extend : SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )? ;
    public final void sass_extend() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_extend");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1267, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1268:5: ( SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:5: SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )?
            {
            dbg.location(1269,5);
            match(input,SASS_EXTEND,FOLLOW_SASS_EXTEND_in_sass_extend8030); if (state.failed) return ;
            dbg.location(1269,17);
            pushFollow(FOLLOW_ws_in_sass_extend8032);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1269,20);
            pushFollow(FOLLOW_simpleSelectorSequence_in_sass_extend8034);
            simpleSelectorSequence();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1269,43);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:43: ( ( ws )? SASS_OPTIONAL )?
            int alt329=2;
            try { dbg.enterSubRule(329);
            try { dbg.enterDecision(329, decisionCanBacktrack[329]);

            try {
                isCyclicDecision = true;
                alt329 = dfa329.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(329);}

            switch (alt329) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:44: ( ws )? SASS_OPTIONAL
                    {
                    dbg.location(1269,44);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:44: ( ws )?
                    int alt328=2;
                    try { dbg.enterSubRule(328);
                    try { dbg.enterDecision(328, decisionCanBacktrack[328]);

                    int LA328_0 = input.LA(1);

                    if ( ((LA328_0>=WS && LA328_0<=COMMENT)) ) {
                        alt328=1;
                    }
                    } finally {dbg.exitDecision(328);}

                    switch (alt328) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:44: ws
                            {
                            dbg.location(1269,44);
                            pushFollow(FOLLOW_ws_in_sass_extend8037);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(328);}

                    dbg.location(1269,48);
                    match(input,SASS_OPTIONAL,FOLLOW_SASS_OPTIONAL_in_sass_extend8040); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(329);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1270, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_extend");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_extend"


    // $ANTLR start "sass_extend_only_selector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1272:1: sass_extend_only_selector : SASS_EXTEND_ONLY_SELECTOR ;
    public final void sass_extend_only_selector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_extend_only_selector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1272, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1273:5: ( SASS_EXTEND_ONLY_SELECTOR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1274:5: SASS_EXTEND_ONLY_SELECTOR
            {
            dbg.location(1274,5);
            match(input,SASS_EXTEND_ONLY_SELECTOR,FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector8063); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1275, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_extend_only_selector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_extend_only_selector"


    // $ANTLR start "sass_debug"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1277:1: sass_debug : ( SASS_DEBUG | SASS_WARN ) ws cp_expression ;
    public final void sass_debug() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_debug");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1277, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1278:5: ( ( SASS_DEBUG | SASS_WARN ) ws cp_expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1279:5: ( SASS_DEBUG | SASS_WARN ) ws cp_expression
            {
            dbg.location(1279,5);
            if ( (input.LA(1)>=SASS_DEBUG && input.LA(1)<=SASS_WARN) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(1279,32);
            pushFollow(FOLLOW_ws_in_sass_debug8094);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1279,35);
            pushFollow(FOLLOW_cp_expression_in_sass_debug8096);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1280, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_debug");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_debug"


    // $ANTLR start "sass_control"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1282:1: sass_control : ( sass_if | sass_for | sass_each | sass_while );
    public final void sass_control() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1282, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1283:5: ( sass_if | sass_for | sass_each | sass_while )
            int alt330=4;
            try { dbg.enterDecision(330, decisionCanBacktrack[330]);

            switch ( input.LA(1) ) {
            case SASS_IF:
                {
                alt330=1;
                }
                break;
            case SASS_FOR:
                {
                alt330=2;
                }
                break;
            case SASS_EACH:
                {
                alt330=3;
                }
                break;
            case SASS_WHILE:
                {
                alt330=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 330, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(330);}

            switch (alt330) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1284:5: sass_if
                    {
                    dbg.location(1284,5);
                    pushFollow(FOLLOW_sass_if_in_sass_control8117);
                    sass_if();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1284:15: sass_for
                    {
                    dbg.location(1284,15);
                    pushFollow(FOLLOW_sass_for_in_sass_control8121);
                    sass_for();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1284:26: sass_each
                    {
                    dbg.location(1284,26);
                    pushFollow(FOLLOW_sass_each_in_sass_control8125);
                    sass_each();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1284:38: sass_while
                    {
                    dbg.location(1284,38);
                    pushFollow(FOLLOW_sass_while_in_sass_control8129);
                    sass_while();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1285, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control"


    // $ANTLR start "sass_if"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1287:1: sass_if : SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? ;
    public final void sass_if() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_if");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1287, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1288:5: ( SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:5: SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
            {
            dbg.location(1289,5);
            match(input,SASS_IF,FOLLOW_SASS_IF_in_sass_if8150); if (state.failed) return ;
            dbg.location(1289,13);
            pushFollow(FOLLOW_ws_in_sass_if8152);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1289,16);
            pushFollow(FOLLOW_sass_control_expression_in_sass_if8154);
            sass_control_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1289,40);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:40: ( ws )?
            int alt331=2;
            try { dbg.enterSubRule(331);
            try { dbg.enterDecision(331, decisionCanBacktrack[331]);

            int LA331_0 = input.LA(1);

            if ( ((LA331_0>=WS && LA331_0<=COMMENT)) ) {
                alt331=1;
            }
            } finally {dbg.exitDecision(331);}

            switch (alt331) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:40: ws
                    {
                    dbg.location(1289,40);
                    pushFollow(FOLLOW_ws_in_sass_if8156);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(331);}

            dbg.location(1289,44);
            pushFollow(FOLLOW_sass_control_block_in_sass_if8159);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1289,63);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:63: ( ( ws )? sass_else )?
            int alt333=2;
            try { dbg.enterSubRule(333);
            try { dbg.enterDecision(333, decisionCanBacktrack[333]);

            try {
                isCyclicDecision = true;
                alt333 = dfa333.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(333);}

            switch (alt333) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:64: ( ws )? sass_else
                    {
                    dbg.location(1289,64);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:64: ( ws )?
                    int alt332=2;
                    try { dbg.enterSubRule(332);
                    try { dbg.enterDecision(332, decisionCanBacktrack[332]);

                    int LA332_0 = input.LA(1);

                    if ( ((LA332_0>=WS && LA332_0<=COMMENT)) ) {
                        alt332=1;
                    }
                    } finally {dbg.exitDecision(332);}

                    switch (alt332) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:64: ws
                            {
                            dbg.location(1289,64);
                            pushFollow(FOLLOW_ws_in_sass_if8162);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(332);}

                    dbg.location(1289,68);
                    pushFollow(FOLLOW_sass_else_in_sass_if8165);
                    sass_else();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(333);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1290, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_if");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_if"


    // $ANTLR start "sass_else"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1292:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );
    public final void sass_else() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_else");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1292, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:5: ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
            int alt340=2;
            try { dbg.enterDecision(340, decisionCanBacktrack[340]);

            try {
                isCyclicDecision = true;
                alt340 = dfa340.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(340);}

            switch (alt340) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1294:5: SASS_ELSE ( ws )? sass_control_block
                    {
                    dbg.location(1294,5);
                    match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else8188); if (state.failed) return ;
                    dbg.location(1294,15);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1294:15: ( ws )?
                    int alt334=2;
                    try { dbg.enterSubRule(334);
                    try { dbg.enterDecision(334, decisionCanBacktrack[334]);

                    int LA334_0 = input.LA(1);

                    if ( ((LA334_0>=WS && LA334_0<=COMMENT)) ) {
                        alt334=1;
                    }
                    } finally {dbg.exitDecision(334);}

                    switch (alt334) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1294:15: ws
                            {
                            dbg.location(1294,15);
                            pushFollow(FOLLOW_ws_in_sass_else8190);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(334);}

                    dbg.location(1294,19);
                    pushFollow(FOLLOW_sass_control_block_in_sass_else8193);
                    sass_control_block();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:5: SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
                    {
                    dbg.location(1296,5);
                    match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else8205); if (state.failed) return ;
                    dbg.location(1296,15);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:15: ( ws )?
                    int alt335=2;
                    try { dbg.enterSubRule(335);
                    try { dbg.enterDecision(335, decisionCanBacktrack[335]);

                    int LA335_0 = input.LA(1);

                    if ( ((LA335_0>=WS && LA335_0<=COMMENT)) ) {
                        alt335=1;
                    }
                    } finally {dbg.exitDecision(335);}

                    switch (alt335) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:15: ws
                            {
                            dbg.location(1296,15);
                            pushFollow(FOLLOW_ws_in_sass_else8207);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(335);}

                    dbg.location(1296,19);
                    if ( !(evalPredicate(tokenNameEquals("if"),"tokenNameEquals(\"if\")")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "sass_else", "tokenNameEquals(\"if\")");
                    }
                    dbg.location(1296,44);
                    match(input,IDENT,FOLLOW_IDENT_in_sass_else8212); if (state.failed) return ;
                    dbg.location(1296,59);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:59: ( ws )?
                    int alt336=2;
                    try { dbg.enterSubRule(336);
                    try { dbg.enterDecision(336, decisionCanBacktrack[336]);

                    int LA336_0 = input.LA(1);

                    if ( ((LA336_0>=WS && LA336_0<=COMMENT)) ) {
                        alt336=1;
                    }
                    } finally {dbg.exitDecision(336);}

                    switch (alt336) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:59: ws
                            {
                            dbg.location(1296,59);
                            pushFollow(FOLLOW_ws_in_sass_else8216);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(336);}

                    dbg.location(1296,63);
                    pushFollow(FOLLOW_sass_control_expression_in_sass_else8219);
                    sass_control_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1296,87);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:87: ( ws )?
                    int alt337=2;
                    try { dbg.enterSubRule(337);
                    try { dbg.enterDecision(337, decisionCanBacktrack[337]);

                    int LA337_0 = input.LA(1);

                    if ( ((LA337_0>=WS && LA337_0<=COMMENT)) ) {
                        alt337=1;
                    }
                    } finally {dbg.exitDecision(337);}

                    switch (alt337) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:87: ws
                            {
                            dbg.location(1296,87);
                            pushFollow(FOLLOW_ws_in_sass_else8221);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(337);}

                    dbg.location(1296,91);
                    pushFollow(FOLLOW_sass_control_block_in_sass_else8224);
                    sass_control_block();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1296,110);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:110: ( ( ws )? sass_else )?
                    int alt339=2;
                    try { dbg.enterSubRule(339);
                    try { dbg.enterDecision(339, decisionCanBacktrack[339]);

                    try {
                        isCyclicDecision = true;
                        alt339 = dfa339.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(339);}

                    switch (alt339) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:111: ( ws )? sass_else
                            {
                            dbg.location(1296,111);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:111: ( ws )?
                            int alt338=2;
                            try { dbg.enterSubRule(338);
                            try { dbg.enterDecision(338, decisionCanBacktrack[338]);

                            int LA338_0 = input.LA(1);

                            if ( ((LA338_0>=WS && LA338_0<=COMMENT)) ) {
                                alt338=1;
                            }
                            } finally {dbg.exitDecision(338);}

                            switch (alt338) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:111: ws
                                    {
                                    dbg.location(1296,111);
                                    pushFollow(FOLLOW_ws_in_sass_else8227);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(338);}

                            dbg.location(1296,115);
                            pushFollow(FOLLOW_sass_else_in_sass_else8230);
                            sass_else();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(339);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1297, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_else");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_else"


    // $ANTLR start "sass_control_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1299:1: sass_control_expression : cp_expression ;
    public final void sass_control_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1299, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:5: ( cp_expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:5: cp_expression
            {
            dbg.location(1301,5);
            pushFollow(FOLLOW_cp_expression_in_sass_control_expression8253);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1302, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control_expression"


    // $ANTLR start "sass_for"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1304:1: sass_for : SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block ;
    public final void sass_for() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_for");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1304, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1305:5: ( SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1306:5: SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block
            {
            dbg.location(1306,5);
            match(input,SASS_FOR,FOLLOW_SASS_FOR_in_sass_for8274); if (state.failed) return ;
            dbg.location(1306,14);
            pushFollow(FOLLOW_ws_in_sass_for8276);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1306,17);
            pushFollow(FOLLOW_cp_variable_in_sass_for8278);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1306,29);
            pushFollow(FOLLOW_ws_in_sass_for8280);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1306,32);
            if ( !(evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"from\")");
            }
            dbg.location(1306,59);
            match(input,IDENT,FOLLOW_IDENT_in_sass_for8284); if (state.failed) return ;
            dbg.location(1306,74);
            pushFollow(FOLLOW_ws_in_sass_for8288);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1306,77);
            pushFollow(FOLLOW_cp_math_expression_in_sass_for8290);
            cp_math_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1306,96);
            pushFollow(FOLLOW_ws_in_sass_for8292);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1306,99);
            if ( !(evalPredicate(tokenNameEquals("to")|tokenNameEquals("through"),"tokenNameEquals(\"to\")|tokenNameEquals(\"through\")")) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"to\")|tokenNameEquals(\"through\")");
            }
            dbg.location(1306,151);
            match(input,IDENT,FOLLOW_IDENT_in_sass_for8296); if (state.failed) return ;
            dbg.location(1306,173);
            pushFollow(FOLLOW_ws_in_sass_for8300);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1306,176);
            pushFollow(FOLLOW_cp_math_expression_in_sass_for8302);
            cp_math_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1306,195);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1306:195: ( ws )?
            int alt341=2;
            try { dbg.enterSubRule(341);
            try { dbg.enterDecision(341, decisionCanBacktrack[341]);

            int LA341_0 = input.LA(1);

            if ( ((LA341_0>=WS && LA341_0<=COMMENT)) ) {
                alt341=1;
            }
            } finally {dbg.exitDecision(341);}

            switch (alt341) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1306:195: ws
                    {
                    dbg.location(1306,195);
                    pushFollow(FOLLOW_ws_in_sass_for8304);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(341);}

            dbg.location(1306,199);
            pushFollow(FOLLOW_sass_control_block_in_sass_for8307);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1307, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_for");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_for"


    // $ANTLR start "sass_each"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1309:1: sass_each : SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block ;
    public final void sass_each() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_each");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1309, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1310:5: ( SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:5: SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block
            {
            dbg.location(1311,5);
            match(input,SASS_EACH,FOLLOW_SASS_EACH_in_sass_each8328); if (state.failed) return ;
            dbg.location(1311,15);
            pushFollow(FOLLOW_ws_in_sass_each8330);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1311,18);
            pushFollow(FOLLOW_cp_variable_in_sass_each8332);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1311,30);
            pushFollow(FOLLOW_ws_in_sass_each8334);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1311,33);
            if ( !(evalPredicate(tokenNameEquals("in"),"tokenNameEquals(\"in\")")) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "sass_each", "tokenNameEquals(\"in\")");
            }
            dbg.location(1311,58);
            match(input,IDENT,FOLLOW_IDENT_in_sass_each8338); if (state.failed) return ;
            dbg.location(1311,71);
            pushFollow(FOLLOW_ws_in_sass_each8342);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1311,74);
            pushFollow(FOLLOW_cp_expression_list_in_sass_each8344);
            cp_expression_list();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1311,93);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:93: ( ws )?
            int alt342=2;
            try { dbg.enterSubRule(342);
            try { dbg.enterDecision(342, decisionCanBacktrack[342]);

            int LA342_0 = input.LA(1);

            if ( ((LA342_0>=WS && LA342_0<=COMMENT)) ) {
                alt342=1;
            }
            } finally {dbg.exitDecision(342);}

            switch (alt342) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:93: ws
                    {
                    dbg.location(1311,93);
                    pushFollow(FOLLOW_ws_in_sass_each8346);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(342);}

            dbg.location(1311,97);
            pushFollow(FOLLOW_sass_control_block_in_sass_each8349);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1312, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_each");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_each"


    // $ANTLR start "sass_while"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1314:1: sass_while : SASS_WHILE ws sass_control_expression ( ws )? sass_control_block ;
    public final void sass_while() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_while");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1314, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1315:5: ( SASS_WHILE ws sass_control_expression ( ws )? sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1316:5: SASS_WHILE ws sass_control_expression ( ws )? sass_control_block
            {
            dbg.location(1316,5);
            match(input,SASS_WHILE,FOLLOW_SASS_WHILE_in_sass_while8370); if (state.failed) return ;
            dbg.location(1316,16);
            pushFollow(FOLLOW_ws_in_sass_while8372);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1316,19);
            pushFollow(FOLLOW_sass_control_expression_in_sass_while8374);
            sass_control_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1316,43);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1316:43: ( ws )?
            int alt343=2;
            try { dbg.enterSubRule(343);
            try { dbg.enterDecision(343, decisionCanBacktrack[343]);

            int LA343_0 = input.LA(1);

            if ( ((LA343_0>=WS && LA343_0<=COMMENT)) ) {
                alt343=1;
            }
            } finally {dbg.exitDecision(343);}

            switch (alt343) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1316:43: ws
                    {
                    dbg.location(1316,43);
                    pushFollow(FOLLOW_ws_in_sass_while8376);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(343);}

            dbg.location(1316,47);
            pushFollow(FOLLOW_sass_control_block_in_sass_while8379);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1317, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_while");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_while"


    // $ANTLR start "sass_control_block"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1319:1: sass_control_block : LBRACE ( ws )? ( declarations )? RBRACE ;
    public final void sass_control_block() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control_block");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1319, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1320:5: ( LBRACE ( ws )? ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1321:5: LBRACE ( ws )? ( declarations )? RBRACE
            {
            dbg.location(1321,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_control_block8400); if (state.failed) return ;
            dbg.location(1321,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1321:12: ( ws )?
            int alt344=2;
            try { dbg.enterSubRule(344);
            try { dbg.enterDecision(344, decisionCanBacktrack[344]);

            int LA344_0 = input.LA(1);

            if ( ((LA344_0>=WS && LA344_0<=COMMENT)) ) {
                alt344=1;
            }
            } finally {dbg.exitDecision(344);}

            switch (alt344) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1321:12: ws
                    {
                    dbg.location(1321,12);
                    pushFollow(FOLLOW_ws_in_sass_control_block8402);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(344);}

            dbg.location(1321,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1321:16: ( declarations )?
            int alt345=2;
            try { dbg.enterSubRule(345);
            try { dbg.enterDecision(345, decisionCanBacktrack[345]);

            int LA345_0 = input.LA(1);

            if ( ((LA345_0>=NAMESPACE_SYM && LA345_0<=IDENT)||(LA345_0>=CHARSET_SYM && LA345_0<=COMMA)||LA345_0==MEDIA_SYM||(LA345_0>=GEN && LA345_0<=MOZ_DOCUMENT_SYM)||LA345_0==WEBKIT_KEYFRAMES_SYM||(LA345_0>=PAGE_SYM && LA345_0<=RIGHTBOTTOM_SYM)||(LA345_0>=MINUS && LA345_0<=PIPE)||LA345_0==LESS_AND||(LA345_0>=RBRACKET && LA345_0<=SASS_VAR)||(LA345_0>=SASS_CONTENT && LA345_0<=SASS_WHILE)||LA345_0==AT_SIGN) ) {
                alt345=1;
            }
            } finally {dbg.exitDecision(345);}

            switch (alt345) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1321:16: declarations
                    {
                    dbg.location(1321,16);
                    pushFollow(FOLLOW_declarations_in_sass_control_block8405);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(345);}

            dbg.location(1321,30);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_control_block8408); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1322, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control_block");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control_block"


    // $ANTLR start "sass_function_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1324:1: sass_function_declaration : SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE ;
    public final void sass_function_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1324, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1325:5: ( SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:5: SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE
            {
            dbg.location(1330,5);
            match(input,SASS_FUNCTION,FOLLOW_SASS_FUNCTION_in_sass_function_declaration8450); if (state.failed) return ;
            dbg.location(1330,19);
            pushFollow(FOLLOW_ws_in_sass_function_declaration8452);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1330,22);
            pushFollow(FOLLOW_sass_function_name_in_sass_function_declaration8454);
            sass_function_name();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1330,41);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:41: ( ws )?
            int alt346=2;
            try { dbg.enterSubRule(346);
            try { dbg.enterDecision(346, decisionCanBacktrack[346]);

            int LA346_0 = input.LA(1);

            if ( ((LA346_0>=WS && LA346_0<=COMMENT)) ) {
                alt346=1;
            }
            } finally {dbg.exitDecision(346);}

            switch (alt346) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:41: ws
                    {
                    dbg.location(1330,41);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration8456);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(346);}

            dbg.location(1330,45);
            match(input,LPAREN,FOLLOW_LPAREN_in_sass_function_declaration8459); if (state.failed) return ;
            dbg.location(1330,52);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:52: ( cp_args_list )?
            int alt347=2;
            try { dbg.enterSubRule(347);
            try { dbg.enterDecision(347, decisionCanBacktrack[347]);

            int LA347_0 = input.LA(1);

            if ( (LA347_0==NAMESPACE_SYM||(LA347_0>=CHARSET_SYM && LA347_0<=IMPORT_SYM)||LA347_0==MEDIA_SYM||(LA347_0>=AT_IDENT && LA347_0<=MOZ_DOCUMENT_SYM)||LA347_0==WEBKIT_KEYFRAMES_SYM||(LA347_0>=PAGE_SYM && LA347_0<=RIGHTBOTTOM_SYM)||LA347_0==SASS_AT_ROOT||LA347_0==SASS_VAR||(LA347_0>=SASS_CONTENT && LA347_0<=SASS_WHILE)||(LA347_0>=CP_DOTS && LA347_0<=LESS_REST)) ) {
                alt347=1;
            }
            } finally {dbg.exitDecision(347);}

            switch (alt347) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:52: cp_args_list
                    {
                    dbg.location(1330,52);
                    pushFollow(FOLLOW_cp_args_list_in_sass_function_declaration8461);
                    cp_args_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(347);}

            dbg.location(1330,66);
            match(input,RPAREN,FOLLOW_RPAREN_in_sass_function_declaration8464); if (state.failed) return ;
            dbg.location(1330,73);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:73: ( ws )?
            int alt348=2;
            try { dbg.enterSubRule(348);
            try { dbg.enterDecision(348, decisionCanBacktrack[348]);

            int LA348_0 = input.LA(1);

            if ( ((LA348_0>=WS && LA348_0<=COMMENT)) ) {
                alt348=1;
            }
            } finally {dbg.exitDecision(348);}

            switch (alt348) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:73: ws
                    {
                    dbg.location(1330,73);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration8466);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(348);}

            dbg.location(1330,77);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_function_declaration8469); if (state.failed) return ;
            dbg.location(1330,84);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:84: ( ws )?
            int alt349=2;
            try { dbg.enterSubRule(349);
            try { dbg.enterDecision(349, decisionCanBacktrack[349]);

            int LA349_0 = input.LA(1);

            if ( ((LA349_0>=WS && LA349_0<=COMMENT)) ) {
                alt349=1;
            }
            } finally {dbg.exitDecision(349);}

            switch (alt349) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:84: ws
                    {
                    dbg.location(1330,84);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration8471);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(349);}

            dbg.location(1330,88);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:88: ( declarations )?
            int alt350=2;
            try { dbg.enterSubRule(350);
            try { dbg.enterDecision(350, decisionCanBacktrack[350]);

            int LA350_0 = input.LA(1);

            if ( ((LA350_0>=NAMESPACE_SYM && LA350_0<=IDENT)||(LA350_0>=CHARSET_SYM && LA350_0<=COMMA)||LA350_0==MEDIA_SYM||(LA350_0>=GEN && LA350_0<=MOZ_DOCUMENT_SYM)||LA350_0==WEBKIT_KEYFRAMES_SYM||(LA350_0>=PAGE_SYM && LA350_0<=RIGHTBOTTOM_SYM)||(LA350_0>=MINUS && LA350_0<=PIPE)||LA350_0==LESS_AND||(LA350_0>=RBRACKET && LA350_0<=SASS_VAR)||(LA350_0>=SASS_CONTENT && LA350_0<=SASS_WHILE)||LA350_0==AT_SIGN) ) {
                alt350=1;
            }
            } finally {dbg.exitDecision(350);}

            switch (alt350) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:88: declarations
                    {
                    dbg.location(1330,88);
                    pushFollow(FOLLOW_declarations_in_sass_function_declaration8474);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(350);}

            dbg.location(1330,102);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_function_declaration8477); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1331, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_declaration"


    // $ANTLR start "sass_function_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1333:1: sass_function_name : IDENT ;
    public final void sass_function_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1333, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1334:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1335:5: IDENT
            {
            dbg.location(1335,5);
            match(input,IDENT,FOLLOW_IDENT_in_sass_function_name8498); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1336, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_name"


    // $ANTLR start "sass_function_return"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1338:1: sass_function_return : SASS_RETURN ws cp_expression ;
    public final void sass_function_return() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_return");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1338, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1339:5: ( SASS_RETURN ws cp_expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1340:5: SASS_RETURN ws cp_expression
            {
            dbg.location(1340,5);
            match(input,SASS_RETURN,FOLLOW_SASS_RETURN_in_sass_function_return8519); if (state.failed) return ;
            dbg.location(1340,17);
            pushFollow(FOLLOW_ws_in_sass_function_return8521);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1340,20);
            pushFollow(FOLLOW_cp_expression_in_sass_function_return8523);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1341, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_return");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_return"


    // $ANTLR start "sass_content"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1343:1: sass_content : SASS_CONTENT ;
    public final void sass_content() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_content");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1343, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1344:5: ( SASS_CONTENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1345:5: SASS_CONTENT
            {
            dbg.location(1345,5);
            match(input,SASS_CONTENT,FOLLOW_SASS_CONTENT_in_sass_content8544); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1346, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_content");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_content"

    // $ANTLR start synpred1_Css3
    public final void synpred1_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:44: ( ( ws )? mediaQueryList )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:45: ( ws )? mediaQueryList
        {
        dbg.location(363,45);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:45: ( ws )?
        int alt351=2;
        try { dbg.enterSubRule(351);
        try { dbg.enterDecision(351, decisionCanBacktrack[351]);

        int LA351_0 = input.LA(1);

        if ( ((LA351_0>=WS && LA351_0<=COMMENT)) ) {
            alt351=1;
        }
        } finally {dbg.exitDecision(351);}

        switch (alt351) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:45: ws
                {
                dbg.location(363,45);
                pushFollow(FOLLOW_ws_in_synpred1_Css3356);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(351);}

        dbg.location(363,49);
        pushFollow(FOLLOW_mediaQueryList_in_synpred1_Css3359);
        mediaQueryList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_Css3

    // $ANTLR start synpred2_Css3
    public final void synpred2_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:98: ( ( ws )? mediaQueryList )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:99: ( ws )? mediaQueryList
        {
        dbg.location(366,99);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:99: ( ws )?
        int alt352=2;
        try { dbg.enterSubRule(352);
        try { dbg.enterDecision(352, decisionCanBacktrack[352]);

        int LA352_0 = input.LA(1);

        if ( ((LA352_0>=WS && LA352_0<=COMMENT)) ) {
            alt352=1;
        }
        } finally {dbg.exitDecision(352);}

        switch (alt352) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:99: ws
                {
                dbg.location(366,99);
                pushFollow(FOLLOW_ws_in_synpred2_Css3420);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(352);}

        dbg.location(366,103);
        pushFollow(FOLLOW_mediaQueryList_in_synpred2_Css3423);
        mediaQueryList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_Css3

    // $ANTLR start synpred3_Css3
    public final void synpred3_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:100: ( ( ws )? mediaQueryList )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:101: ( ws )? mediaQueryList
        {
        dbg.location(368,101);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:101: ( ws )?
        int alt353=2;
        try { dbg.enterSubRule(353);
        try { dbg.enterDecision(353, decisionCanBacktrack[353]);

        int LA353_0 = input.LA(1);

        if ( ((LA353_0>=WS && LA353_0<=COMMENT)) ) {
            alt353=1;
        }
        } finally {dbg.exitDecision(353);}

        switch (alt353) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:101: ws
                {
                dbg.location(368,101);
                pushFollow(FOLLOW_ws_in_synpred3_Css3474);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(353);}

        dbg.location(368,105);
        pushFollow(FOLLOW_mediaQueryList_in_synpred3_Css3477);
        mediaQueryList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_Css3

    // $ANTLR start synpred4_Css3
    public final void synpred4_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:27: ( ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:28: ( ws )? SEMI
        {
        dbg.location(383,28);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:28: ( ws )?
        int alt354=2;
        try { dbg.enterSubRule(354);
        try { dbg.enterDecision(354, decisionCanBacktrack[354]);

        int LA354_0 = input.LA(1);

        if ( ((LA354_0>=WS && LA354_0<=COMMENT)) ) {
            alt354=1;
        }
        } finally {dbg.exitDecision(354);}

        switch (alt354) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:28: ws
                {
                dbg.location(383,28);
                pushFollow(FOLLOW_ws_in_synpred4_Css3596);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(354);}

        dbg.location(383,32);
        match(input,SEMI,FOLLOW_SEMI_in_synpred4_Css3599); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_Css3

    // $ANTLR start synpred5_Css3
    public final void synpred5_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:5: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )
        int alt358=2;
        try { dbg.enterDecision(358, decisionCanBacktrack[358]);

        int LA358_0 = input.LA(1);

        if ( (LA358_0==SASS_MIXIN) ) {
            alt358=1;
        }
        else if ( (LA358_0==DOT) ) {
            alt358=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 358, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(358);}

        switch (alt358) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:6: SASS_MIXIN
                {
                dbg.location(391,6);
                match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred5_Css3670); if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:19: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE )
                {
                dbg.location(391,19);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:19: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:20: DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE
                {
                dbg.location(391,20);
                match(input,DOT,FOLLOW_DOT_in_synpred5_Css3675); if (state.failed) return ;
                dbg.location(391,24);
                match(input,IDENT,FOLLOW_IDENT_in_synpred5_Css3677); if (state.failed) return ;
                dbg.location(391,30);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:30: ( ws )?
                int alt355=2;
                try { dbg.enterSubRule(355);
                try { dbg.enterDecision(355, decisionCanBacktrack[355]);

                int LA355_0 = input.LA(1);

                if ( ((LA355_0>=WS && LA355_0<=COMMENT)) ) {
                    alt355=1;
                }
                } finally {dbg.exitDecision(355);}

                switch (alt355) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:30: ws
                        {
                        dbg.location(391,30);
                        pushFollow(FOLLOW_ws_in_synpred5_Css3679);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(355);}

                dbg.location(391,34);
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred5_Css3682); if (state.failed) return ;
                dbg.location(391,41);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:41: (~ RPAREN )*
                try { dbg.enterSubRule(356);

                loop356:
                do {
                    int alt356=2;
                    try { dbg.enterDecision(356, decisionCanBacktrack[356]);

                    int LA356_0 = input.LA(1);

                    if ( ((LA356_0>=NAMESPACE_SYM && LA356_0<=LESS_IMPORT_TYPE)||(LA356_0>=MEDIA_SYM && LA356_0<=LINE_COMMENT)) ) {
                        alt356=1;
                    }


                    } finally {dbg.exitDecision(356);}

                    switch (alt356) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:42: ~ RPAREN
                	    {
                	    dbg.location(391,42);
                	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=LESS_IMPORT_TYPE)||(input.LA(1)>=MEDIA_SYM && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop356;
                    }
                } while (true);
                } finally {dbg.exitSubRule(356);}

                dbg.location(391,52);
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred5_Css3690); if (state.failed) return ;
                dbg.location(391,59);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:59: (~ ( LBRACE | SEMI ) )*
                try { dbg.enterSubRule(357);

                loop357:
                do {
                    int alt357=2;
                    try { dbg.enterDecision(357, decisionCanBacktrack[357]);

                    int LA357_0 = input.LA(1);

                    if ( (LA357_0==NAMESPACE_SYM||(LA357_0>=IDENT && LA357_0<=MEDIA_SYM)||(LA357_0>=RBRACE && LA357_0<=LINE_COMMENT)) ) {
                        alt357=1;
                    }


                    } finally {dbg.exitDecision(357);}

                    switch (alt357) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:59: ~ ( LBRACE | SEMI )
                	    {
                	    dbg.location(391,59);
                	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=RBRACE && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop357;
                    }
                } while (true);
                } finally {dbg.exitSubRule(357);}

                dbg.location(391,75);
                match(input,LBRACE,FOLLOW_LBRACE_in_synpred5_Css3700); if (state.failed) return ;

                }


                }
                break;

        }}
    // $ANTLR end synpred5_Css3

    // $ANTLR start synpred6_Css3
    public final void synpred6_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:8: cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI
        {
        dbg.location(393,8);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred6_Css3718);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(393,22);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:22: ( ( ws )? IMPORTANT_SYM )?
        int alt360=2;
        try { dbg.enterSubRule(360);
        try { dbg.enterDecision(360, decisionCanBacktrack[360]);

        try {
            isCyclicDecision = true;
            alt360 = dfa360.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(360);}

        switch (alt360) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:23: ( ws )? IMPORTANT_SYM
                {
                dbg.location(393,23);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:23: ( ws )?
                int alt359=2;
                try { dbg.enterSubRule(359);
                try { dbg.enterDecision(359, decisionCanBacktrack[359]);

                int LA359_0 = input.LA(1);

                if ( ((LA359_0>=WS && LA359_0<=COMMENT)) ) {
                    alt359=1;
                }
                } finally {dbg.exitDecision(359);}

                switch (alt359) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:23: ws
                        {
                        dbg.location(393,23);
                        pushFollow(FOLLOW_ws_in_synpred6_Css3721);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(359);}

                dbg.location(393,27);
                match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_synpred6_Css3724); if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(360);}

        dbg.location(393,43);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:43: ( ws )?
        int alt361=2;
        try { dbg.enterSubRule(361);
        try { dbg.enterDecision(361, decisionCanBacktrack[361]);

        int LA361_0 = input.LA(1);

        if ( ((LA361_0>=WS && LA361_0<=COMMENT)) ) {
            alt361=1;
        }
        } finally {dbg.exitDecision(361);}

        switch (alt361) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:43: ws
                {
                dbg.location(393,43);
                pushFollow(FOLLOW_ws_in_synpred6_Css3728);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(361);}

        dbg.location(393,47);
        match(input,SEMI,FOLLOW_SEMI_in_synpred6_Css3731); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_Css3

    // $ANTLR start synpred7_Css3
    public final void synpred7_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:7: ( cp_mixin_call )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:8: cp_mixin_call
        {
        dbg.location(394,8);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred7_Css3754);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_Css3

    // $ANTLR start synpred8_Css3
    public final void synpred8_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:6: ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:8: (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI
        {
        dbg.location(395,8);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:8: (~ ( LBRACE | SEMI | RBRACE | COLON ) )+
        int cnt362=0;
        try { dbg.enterSubRule(362);

        loop362:
        do {
            int alt362=2;
            try { dbg.enterDecision(362, decisionCanBacktrack[362]);

            int LA362_0 = input.LA(1);

            if ( (LA362_0==NAMESPACE_SYM||(LA362_0>=IDENT && LA362_0<=MEDIA_SYM)||(LA362_0>=IMPORTANT_SYM && LA362_0<=GEN)||(LA362_0>=AT_IDENT && LA362_0<=LINE_COMMENT)) ) {
                alt362=1;
            }


            } finally {dbg.exitDecision(362);}

            switch (alt362) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:8: ~ ( LBRACE | SEMI | RBRACE | COLON )
        	    {
        	    dbg.location(395,8);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=GEN)||(input.LA(1)>=AT_IDENT && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt362 >= 1 ) break loop362;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(362, input);
                    dbg.recognitionException(eee);

                    throw eee;
            }
            cnt362++;
        } while (true);
        } finally {dbg.exitSubRule(362);}

        dbg.location(395,37);
        match(input,COLON,FOLLOW_COLON_in_synpred8_Css3789); if (state.failed) return ;
        dbg.location(395,43);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:43: (~ ( SEMI | LBRACE | RBRACE ) )+
        int cnt363=0;
        try { dbg.enterSubRule(363);

        loop363:
        do {
            int alt363=2;
            try { dbg.enterDecision(363, decisionCanBacktrack[363]);

            int LA363_0 = input.LA(1);

            if ( (LA363_0==NAMESPACE_SYM||(LA363_0>=IDENT && LA363_0<=MEDIA_SYM)||(LA363_0>=IMPORTANT_SYM && LA363_0<=LINE_COMMENT)) ) {
                alt363=1;
            }


            } finally {dbg.exitDecision(363);}

            switch (alt363) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:43: ~ ( SEMI | LBRACE | RBRACE )
        	    {
        	    dbg.location(395,43);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt363 >= 1 ) break loop363;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(363, input);
                    dbg.recognitionException(eee);

                    throw eee;
            }
            cnt363++;
        } while (true);
        } finally {dbg.exitSubRule(363);}

        dbg.location(395,66);
        match(input,SEMI,FOLLOW_SEMI_in_synpred8_Css3801); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_Css3

    // $ANTLR start synpred9_Css3
    public final void synpred9_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:6: ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:8: sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI
        {
        dbg.location(396,8);
        pushFollow(FOLLOW_sass_declaration_interpolation_expression_in_synpred9_Css3814);
        sass_declaration_interpolation_expression();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(396,50);
        match(input,COLON,FOLLOW_COLON_in_synpred9_Css3816); if (state.failed) return ;
        dbg.location(396,56);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:56: (~ ( SEMI | LBRACE | RBRACE ) )+
        int cnt364=0;
        try { dbg.enterSubRule(364);

        loop364:
        do {
            int alt364=2;
            try { dbg.enterDecision(364, decisionCanBacktrack[364]);

            int LA364_0 = input.LA(1);

            if ( (LA364_0==NAMESPACE_SYM||(LA364_0>=IDENT && LA364_0<=MEDIA_SYM)||(LA364_0>=IMPORTANT_SYM && LA364_0<=LINE_COMMENT)) ) {
                alt364=1;
            }


            } finally {dbg.exitDecision(364);}

            switch (alt364) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:56: ~ ( SEMI | LBRACE | RBRACE )
        	    {
        	    dbg.location(396,56);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt364 >= 1 ) break loop364;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(364, input);
                    dbg.recognitionException(eee);

                    throw eee;
            }
            cnt364++;
        } while (true);
        } finally {dbg.exitSubRule(364);}

        dbg.location(396,79);
        match(input,SEMI,FOLLOW_SEMI_in_synpred9_Css3828); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_Css3

    // $ANTLR start synpred10_Css3
    public final void synpred10_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:17: ( ( ws )? COMMA )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:18: ( ws )? COMMA
        {
        dbg.location(411,18);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:18: ( ws )?
        int alt365=2;
        try { dbg.enterSubRule(365);
        try { dbg.enterDecision(365, decisionCanBacktrack[365]);

        int LA365_0 = input.LA(1);

        if ( ((LA365_0>=WS && LA365_0<=COMMENT)) ) {
            alt365=1;
        }
        } finally {dbg.exitDecision(365);}

        switch (alt365) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:18: ws
                {
                dbg.location(411,18);
                pushFollow(FOLLOW_ws_in_synpred10_Css3946);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(365);}

        dbg.location(411,22);
        match(input,COMMA,FOLLOW_COMMA_in_synpred10_Css3949); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_Css3

    // $ANTLR start synpred11_Css3
    public final void synpred11_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:22: ( ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:23: ( ws )? SEMI
        {
        dbg.location(451,23);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:23: ( ws )?
        int alt366=2;
        try { dbg.enterSubRule(366);
        try { dbg.enterDecision(366, decisionCanBacktrack[366]);

        int LA366_0 = input.LA(1);

        if ( ((LA366_0>=WS && LA366_0<=COMMENT)) ) {
            alt366=1;
        }
        } finally {dbg.exitDecision(366);}

        switch (alt366) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:23: ws
                {
                dbg.location(451,23);
                pushFollow(FOLLOW_ws_in_synpred11_Css31245);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(366);}

        dbg.location(451,27);
        match(input,SEMI,FOLLOW_SEMI_in_synpred11_Css31248); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_Css3

    // $ANTLR start synpred12_Css3
    public final void synpred12_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:9: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )
        int alt370=2;
        try { dbg.enterDecision(370, decisionCanBacktrack[370]);

        int LA370_0 = input.LA(1);

        if ( (LA370_0==SASS_MIXIN) ) {
            alt370=1;
        }
        else if ( (LA370_0==DOT) ) {
            alt370=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 370, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(370);}

        switch (alt370) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:10: SASS_MIXIN
                {
                dbg.location(459,10);
                match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred12_Css31323); if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:23: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE )
                {
                dbg.location(459,23);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:23: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:24: DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE
                {
                dbg.location(459,24);
                match(input,DOT,FOLLOW_DOT_in_synpred12_Css31328); if (state.failed) return ;
                dbg.location(459,28);
                match(input,IDENT,FOLLOW_IDENT_in_synpred12_Css31330); if (state.failed) return ;
                dbg.location(459,34);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:34: ( ws )?
                int alt367=2;
                try { dbg.enterSubRule(367);
                try { dbg.enterDecision(367, decisionCanBacktrack[367]);

                int LA367_0 = input.LA(1);

                if ( ((LA367_0>=WS && LA367_0<=COMMENT)) ) {
                    alt367=1;
                }
                } finally {dbg.exitDecision(367);}

                switch (alt367) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:34: ws
                        {
                        dbg.location(459,34);
                        pushFollow(FOLLOW_ws_in_synpred12_Css31332);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(367);}

                dbg.location(459,38);
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred12_Css31335); if (state.failed) return ;
                dbg.location(459,45);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:45: (~ RPAREN )*
                try { dbg.enterSubRule(368);

                loop368:
                do {
                    int alt368=2;
                    try { dbg.enterDecision(368, decisionCanBacktrack[368]);

                    int LA368_0 = input.LA(1);

                    if ( ((LA368_0>=NAMESPACE_SYM && LA368_0<=LESS_IMPORT_TYPE)||(LA368_0>=MEDIA_SYM && LA368_0<=LINE_COMMENT)) ) {
                        alt368=1;
                    }


                    } finally {dbg.exitDecision(368);}

                    switch (alt368) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:46: ~ RPAREN
                	    {
                	    dbg.location(459,46);
                	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=LESS_IMPORT_TYPE)||(input.LA(1)>=MEDIA_SYM && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop368;
                    }
                } while (true);
                } finally {dbg.exitSubRule(368);}

                dbg.location(459,56);
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred12_Css31343); if (state.failed) return ;
                dbg.location(459,63);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:63: (~ ( LBRACE | RBRACE | SEMI ) )*
                try { dbg.enterSubRule(369);

                loop369:
                do {
                    int alt369=2;
                    try { dbg.enterDecision(369, decisionCanBacktrack[369]);

                    int LA369_0 = input.LA(1);

                    if ( (LA369_0==NAMESPACE_SYM||(LA369_0>=IDENT && LA369_0<=MEDIA_SYM)||(LA369_0>=IMPORTANT_SYM && LA369_0<=LINE_COMMENT)) ) {
                        alt369=1;
                    }


                    } finally {dbg.exitDecision(369);}

                    switch (alt369) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:63: ~ ( LBRACE | RBRACE | SEMI )
                	    {
                	    dbg.location(459,63);
                	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop369;
                    }
                } while (true);
                } finally {dbg.exitSubRule(369);}

                dbg.location(459,86);
                match(input,LBRACE,FOLLOW_LBRACE_in_synpred12_Css31355); if (state.failed) return ;

                }


                }
                break;

        }}
    // $ANTLR end synpred12_Css3

    // $ANTLR start synpred13_Css3
    public final void synpred13_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:461:11: ( cp_mixin_call ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:461:12: cp_mixin_call ( ws )? SEMI
        {
        dbg.location(461,12);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred13_Css31381);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(461,26);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:461:26: ( ws )?
        int alt371=2;
        try { dbg.enterSubRule(371);
        try { dbg.enterDecision(371, decisionCanBacktrack[371]);

        int LA371_0 = input.LA(1);

        if ( ((LA371_0>=WS && LA371_0<=COMMENT)) ) {
            alt371=1;
        }
        } finally {dbg.exitDecision(371);}

        switch (alt371) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:461:26: ws
                {
                dbg.location(461,26);
                pushFollow(FOLLOW_ws_in_synpred13_Css31383);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(371);}

        dbg.location(461,30);
        match(input,SEMI,FOLLOW_SEMI_in_synpred13_Css31386); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_Css3

    // $ANTLR start synpred14_Css3
    public final void synpred14_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:11: ( cp_mixin_call )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:12: cp_mixin_call
        {
        dbg.location(462,12);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred14_Css31405);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_Css3

    // $ANTLR start synpred15_Css3
    public final void synpred15_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:464:11: ( sass_map )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:464:12: sass_map
        {
        dbg.location(464,12);
        pushFollow(FOLLOW_sass_map_in_synpred15_Css31433);
        sass_map();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_Css3

    // $ANTLR start synpred16_Css3
    public final void synpred16_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:11: ( cp_variable ( ws )? COLON )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:12: cp_variable ( ws )? COLON
        {
        dbg.location(465,12);
        pushFollow(FOLLOW_cp_variable_in_synpred16_Css31450);
        cp_variable();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(465,24);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:24: ( ws )?
        int alt372=2;
        try { dbg.enterSubRule(372);
        try { dbg.enterDecision(372, decisionCanBacktrack[372]);

        int LA372_0 = input.LA(1);

        if ( ((LA372_0>=WS && LA372_0<=COMMENT)) ) {
            alt372=1;
        }
        } finally {dbg.exitDecision(372);}

        switch (alt372) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:24: ws
                {
                dbg.location(465,24);
                pushFollow(FOLLOW_ws_in_synpred16_Css31452);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(372);}

        dbg.location(465,28);
        match(input,COLON,FOLLOW_COLON_in_synpred16_Css31455); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_Css3

    // $ANTLR start synpred17_Css3
    public final void synpred17_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:5: ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:6: (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE
        {
        dbg.location(601,6);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:6: (~ ( HASH_SYMBOL | COLON ) )*
        try { dbg.enterSubRule(373);

        loop373:
        do {
            int alt373=2;
            try { dbg.enterDecision(373, decisionCanBacktrack[373]);

            int LA373_0 = input.LA(1);

            if ( ((LA373_0>=NAMESPACE_SYM && LA373_0<=GEN)||(LA373_0>=AT_IDENT && LA373_0<=TILDE)||(LA373_0>=HASH && LA373_0<=LINE_COMMENT)) ) {
                alt373=1;
            }


            } finally {dbg.exitDecision(373);}

            switch (alt373) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:6: ~ ( HASH_SYMBOL | COLON )
        	    {
        	    dbg.location(601,6);
        	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=GEN)||(input.LA(1)>=AT_IDENT && input.LA(1)<=TILDE)||(input.LA(1)>=HASH && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop373;
            }
        } while (true);
        } finally {dbg.exitSubRule(373);}

        dbg.location(601,28);
        match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_synpred17_Css32444); if (state.failed) return ;
        dbg.location(601,40);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred17_Css32446); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_Css3

    // $ANTLR start synpred18_Css3
    public final void synpred18_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:27: ( ( ws )? COMMA )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:28: ( ws )? COMMA
        {
        dbg.location(627,28);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:28: ( ws )?
        int alt374=2;
        try { dbg.enterSubRule(374);
        try { dbg.enterDecision(374, decisionCanBacktrack[374]);

        int LA374_0 = input.LA(1);

        if ( ((LA374_0>=WS && LA374_0<=COMMENT)) ) {
            alt374=1;
        }
        } finally {dbg.exitDecision(374);}

        switch (alt374) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:28: ws
                {
                dbg.location(627,28);
                pushFollow(FOLLOW_ws_in_synpred18_Css32599);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(374);}

        dbg.location(627,32);
        match(input,COMMA,FOLLOW_COMMA_in_synpred18_Css32602); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_Css3

    // $ANTLR start synpred19_Css3
    public final void synpred19_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:25: ( ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:26: ( ws )? SEMI
        {
        dbg.location(654,26);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:26: ( ws )?
        int alt375=2;
        try { dbg.enterSubRule(375);
        try { dbg.enterDecision(375, decisionCanBacktrack[375]);

        int LA375_0 = input.LA(1);

        if ( ((LA375_0>=WS && LA375_0<=COMMENT)) ) {
            alt375=1;
        }
        } finally {dbg.exitDecision(375);}

        switch (alt375) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:26: ws
                {
                dbg.location(654,26);
                pushFollow(FOLLOW_ws_in_synpred19_Css32808);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(375);}

        dbg.location(654,30);
        match(input,SEMI,FOLLOW_SEMI_in_synpred19_Css32811); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_Css3

    // $ANTLR start synpred20_Css3
    public final void synpred20_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:662:5: ( cp_variable_declaration )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:662:6: cp_variable_declaration
        {
        dbg.location(662,6);
        pushFollow(FOLLOW_cp_variable_declaration_in_synpred20_Css32882);
        cp_variable_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_Css3

    // $ANTLR start synpred21_Css3
    public final void synpred21_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:663:7: ( sass_map )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:663:8: sass_map
        {
        dbg.location(663,8);
        pushFollow(FOLLOW_sass_map_in_synpred21_Css32894);
        sass_map();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_Css3

    // $ANTLR start synpred22_Css3
    public final void synpred22_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:7: ( sass_nested_properties )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:8: sass_nested_properties
        {
        dbg.location(664,8);
        pushFollow(FOLLOW_sass_nested_properties_in_synpred22_Css32907);
        sass_nested_properties();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_Css3

    // $ANTLR start synpred23_Css3
    public final void synpred23_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:665:7: ( propertyDeclaration )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:665:8: propertyDeclaration
        {
        dbg.location(665,8);
        pushFollow(FOLLOW_propertyDeclaration_in_synpred23_Css32919);
        propertyDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_Css3

    // $ANTLR start synpred24_Css3
    public final void synpred24_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:7: ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:8: property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI )
        {
        dbg.location(667,8);
        pushFollow(FOLLOW_property_in_synpred24_Css32936);
        property();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(667,17);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:17: ( ws )?
        int alt376=2;
        try { dbg.enterSubRule(376);
        try { dbg.enterDecision(376, decisionCanBacktrack[376]);

        int LA376_0 = input.LA(1);

        if ( ((LA376_0>=WS && LA376_0<=COMMENT)) ) {
            alt376=1;
        }
        } finally {dbg.exitDecision(376);}

        switch (alt376) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:17: ws
                {
                dbg.location(667,17);
                pushFollow(FOLLOW_ws_in_synpred24_Css32938);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(376);}

        dbg.location(667,21);
        match(input,COLON,FOLLOW_COLON_in_synpred24_Css32941); if (state.failed) return ;
        dbg.location(667,27);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:27: (~ ( LBRACE | SEMI | RBRACE ) )*
        try { dbg.enterSubRule(377);

        loop377:
        do {
            int alt377=2;
            try { dbg.enterDecision(377, decisionCanBacktrack[377]);

            int LA377_0 = input.LA(1);

            if ( (LA377_0==NAMESPACE_SYM||(LA377_0>=IDENT && LA377_0<=MEDIA_SYM)||(LA377_0>=IMPORTANT_SYM && LA377_0<=LINE_COMMENT)) ) {
                alt377=1;
            }


            } finally {dbg.exitDecision(377);}

            switch (alt377) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:27: ~ ( LBRACE | SEMI | RBRACE )
        	    {
        	    dbg.location(667,27);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop377;
            }
        } while (true);
        } finally {dbg.exitSubRule(377);}

        dbg.location(667,50);
        if ( input.LA(1)==SEMI||input.LA(1)==RBRACE ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred24_Css3

    // $ANTLR start synpred25_Css3
    public final void synpred25_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:7: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )
        int alt381=2;
        try { dbg.enterDecision(381, decisionCanBacktrack[381]);

        int LA381_0 = input.LA(1);

        if ( (LA381_0==SASS_MIXIN) ) {
            alt381=1;
        }
        else if ( (LA381_0==DOT) ) {
            alt381=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 381, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(381);}

        switch (alt381) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:8: SASS_MIXIN
                {
                dbg.location(668,8);
                match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred25_Css32970); if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:21: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE )
                {
                dbg.location(668,21);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:21: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:22: DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE
                {
                dbg.location(668,22);
                match(input,DOT,FOLLOW_DOT_in_synpred25_Css32975); if (state.failed) return ;
                dbg.location(668,26);
                match(input,IDENT,FOLLOW_IDENT_in_synpred25_Css32977); if (state.failed) return ;
                dbg.location(668,32);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:32: ( ws )?
                int alt378=2;
                try { dbg.enterSubRule(378);
                try { dbg.enterDecision(378, decisionCanBacktrack[378]);

                int LA378_0 = input.LA(1);

                if ( ((LA378_0>=WS && LA378_0<=COMMENT)) ) {
                    alt378=1;
                }
                } finally {dbg.exitDecision(378);}

                switch (alt378) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:32: ws
                        {
                        dbg.location(668,32);
                        pushFollow(FOLLOW_ws_in_synpred25_Css32979);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(378);}

                dbg.location(668,36);
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred25_Css32982); if (state.failed) return ;
                dbg.location(668,43);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:43: (~ RPAREN )*
                try { dbg.enterSubRule(379);

                loop379:
                do {
                    int alt379=2;
                    try { dbg.enterDecision(379, decisionCanBacktrack[379]);

                    int LA379_0 = input.LA(1);

                    if ( ((LA379_0>=NAMESPACE_SYM && LA379_0<=LESS_IMPORT_TYPE)||(LA379_0>=MEDIA_SYM && LA379_0<=LINE_COMMENT)) ) {
                        alt379=1;
                    }


                    } finally {dbg.exitDecision(379);}

                    switch (alt379) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:44: ~ RPAREN
                	    {
                	    dbg.location(668,44);
                	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=LESS_IMPORT_TYPE)||(input.LA(1)>=MEDIA_SYM && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop379;
                    }
                } while (true);
                } finally {dbg.exitSubRule(379);}

                dbg.location(668,54);
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred25_Css32990); if (state.failed) return ;
                dbg.location(668,61);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:61: (~ ( LBRACE | SEMI | RBRACE ) )*
                try { dbg.enterSubRule(380);

                loop380:
                do {
                    int alt380=2;
                    try { dbg.enterDecision(380, decisionCanBacktrack[380]);

                    int LA380_0 = input.LA(1);

                    if ( (LA380_0==NAMESPACE_SYM||(LA380_0>=IDENT && LA380_0<=MEDIA_SYM)||(LA380_0>=IMPORTANT_SYM && LA380_0<=LINE_COMMENT)) ) {
                        alt380=1;
                    }


                    } finally {dbg.exitDecision(380);}

                    switch (alt380) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:61: ~ ( LBRACE | SEMI | RBRACE )
                	    {
                	    dbg.location(668,61);
                	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop380;
                    }
                } while (true);
                } finally {dbg.exitSubRule(380);}

                dbg.location(668,84);
                match(input,LBRACE,FOLLOW_LBRACE_in_synpred25_Css33002); if (state.failed) return ;

                }


                }
                break;

        }}
    // $ANTLR end synpred25_Css3

    // $ANTLR start synpred26_Css3
    public final void synpred26_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:8: cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI
        {
        dbg.location(670,8);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred26_Css33020);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(670,22);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:22: ( ( ws )? IMPORTANT_SYM )?
        int alt383=2;
        try { dbg.enterSubRule(383);
        try { dbg.enterDecision(383, decisionCanBacktrack[383]);

        try {
            isCyclicDecision = true;
            alt383 = dfa383.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(383);}

        switch (alt383) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:23: ( ws )? IMPORTANT_SYM
                {
                dbg.location(670,23);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:23: ( ws )?
                int alt382=2;
                try { dbg.enterSubRule(382);
                try { dbg.enterDecision(382, decisionCanBacktrack[382]);

                int LA382_0 = input.LA(1);

                if ( ((LA382_0>=WS && LA382_0<=COMMENT)) ) {
                    alt382=1;
                }
                } finally {dbg.exitDecision(382);}

                switch (alt382) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:23: ws
                        {
                        dbg.location(670,23);
                        pushFollow(FOLLOW_ws_in_synpred26_Css33023);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(382);}

                dbg.location(670,27);
                match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_synpred26_Css33026); if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(383);}

        dbg.location(670,43);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:43: ( ws )?
        int alt384=2;
        try { dbg.enterSubRule(384);
        try { dbg.enterDecision(384, decisionCanBacktrack[384]);

        int LA384_0 = input.LA(1);

        if ( ((LA384_0>=WS && LA384_0<=COMMENT)) ) {
            alt384=1;
        }
        } finally {dbg.exitDecision(384);}

        switch (alt384) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:43: ws
                {
                dbg.location(670,43);
                pushFollow(FOLLOW_ws_in_synpred26_Css33030);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(384);}

        dbg.location(670,47);
        match(input,SEMI,FOLLOW_SEMI_in_synpred26_Css33033); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_Css3

    // $ANTLR start synpred27_Css3
    public final void synpred27_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:671:7: ( cp_mixin_call )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:671:8: cp_mixin_call
        {
        dbg.location(671,8);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred27_Css33056);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_Css3

    // $ANTLR start synpred28_Css3
    public final void synpred28_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:7: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | selectorsGroup ) ( ws )? LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | selectorsGroup ) ( ws )? LBRACE
        {
        dbg.location(672,8);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | selectorsGroup )
        int alt386=2;
        try { dbg.enterSubRule(386);
        try { dbg.enterDecision(386, decisionCanBacktrack[386]);

        int LA386_0 = input.LA(1);

        if ( (LA386_0==SASS_AT_ROOT) ) {
            alt386=1;
        }
        else if ( (LA386_0==IDENT||LA386_0==COMMA||(LA386_0>=GEN && LA386_0<=COLON)||(LA386_0>=MINUS && LA386_0<=PLUS)||(LA386_0>=GREATER && LA386_0<=PIPE)||LA386_0==LESS_AND||LA386_0==RBRACKET||LA386_0==AT_SIGN) ) {
            alt386=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 386, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(386);}

        switch (alt386) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:9: ( SASS_AT_ROOT ( ws selectorsGroup )? )
                {
                dbg.location(672,9);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:9: ( SASS_AT_ROOT ( ws selectorsGroup )? )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:10: SASS_AT_ROOT ( ws selectorsGroup )?
                {
                dbg.location(672,10);
                match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_synpred28_Css33081); if (state.failed) return ;
                dbg.location(672,23);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:23: ( ws selectorsGroup )?
                int alt385=2;
                try { dbg.enterSubRule(385);
                try { dbg.enterDecision(385, decisionCanBacktrack[385]);

                try {
                    isCyclicDecision = true;
                    alt385 = dfa385.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(385);}

                switch (alt385) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:24: ws selectorsGroup
                        {
                        dbg.location(672,24);
                        pushFollow(FOLLOW_ws_in_synpred28_Css33084);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;
                        dbg.location(672,27);
                        pushFollow(FOLLOW_selectorsGroup_in_synpred28_Css33086);
                        selectorsGroup();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(385);}


                }


                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:47: selectorsGroup
                {
                dbg.location(672,47);
                pushFollow(FOLLOW_selectorsGroup_in_synpred28_Css33093);
                selectorsGroup();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(386);}

        dbg.location(672,63);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:63: ( ws )?
        int alt387=2;
        try { dbg.enterSubRule(387);
        try { dbg.enterDecision(387, decisionCanBacktrack[387]);

        int LA387_0 = input.LA(1);

        if ( ((LA387_0>=WS && LA387_0<=COMMENT)) ) {
            alt387=1;
        }
        } finally {dbg.exitDecision(387);}

        switch (alt387) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:63: ws
                {
                dbg.location(672,63);
                pushFollow(FOLLOW_ws_in_synpred28_Css33096);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(387);}

        dbg.location(672,67);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred28_Css33099); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred28_Css3

    // $ANTLR start synpred29_Css3
    public final void synpred29_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:9: ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:11: (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE
        {
        dbg.location(690,11);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:11: (~ ( HASH_SYMBOL | LBRACE ) )*
        try { dbg.enterSubRule(388);

        loop388:
        do {
            int alt388=2;
            try { dbg.enterDecision(388, decisionCanBacktrack[388]);

            int LA388_0 = input.LA(1);

            if ( ((LA388_0>=NAMESPACE_SYM && LA388_0<=MEDIA_SYM)||(LA388_0>=RBRACE && LA388_0<=TILDE)||(LA388_0>=HASH && LA388_0<=LINE_COMMENT)) ) {
                alt388=1;
            }


            } finally {dbg.exitDecision(388);}

            switch (alt388) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:11: ~ ( HASH_SYMBOL | LBRACE )
        	    {
        	    dbg.location(690,11);
        	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=RBRACE && input.LA(1)<=TILDE)||(input.LA(1)>=HASH && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop388;
            }
        } while (true);
        } finally {dbg.exitSubRule(388);}

        dbg.location(690,38);
        match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_synpred29_Css33237); if (state.failed) return ;
        dbg.location(690,50);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred29_Css33239); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_Css3

    // $ANTLR start synpred30_Css3
    public final void synpred30_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:18: ( ( ws )? esPred )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:19: ( ws )? esPred
        {
        dbg.location(706,19);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:19: ( ws )?
        int alt389=2;
        try { dbg.enterSubRule(389);
        try { dbg.enterDecision(389, decisionCanBacktrack[389]);

        int LA389_0 = input.LA(1);

        if ( ((LA389_0>=WS && LA389_0<=COMMENT)) ) {
            alt389=1;
        }
        } finally {dbg.exitDecision(389);}

        switch (alt389) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:19: ws
                {
                dbg.location(706,19);
                pushFollow(FOLLOW_ws_in_synpred30_Css33366);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(389);}

        dbg.location(706,23);
        pushFollow(FOLLOW_esPred_in_synpred30_Css33369);
        esPred();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_Css3

    // $ANTLR start synpred31_Css3
    public final void synpred31_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:21: ( ( ws )? esPred )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:22: ( ws )? esPred
        {
        dbg.location(708,22);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:22: ( ws )?
        int alt390=2;
        try { dbg.enterSubRule(390);
        try { dbg.enterDecision(390, decisionCanBacktrack[390]);

        int LA390_0 = input.LA(1);

        if ( ((LA390_0>=WS && LA390_0<=COMMENT)) ) {
            alt390=1;
        }
        } finally {dbg.exitDecision(390);}

        switch (alt390) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:22: ws
                {
                dbg.location(708,22);
                pushFollow(FOLLOW_ws_in_synpred31_Css33389);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(390);}

        dbg.location(708,26);
        pushFollow(FOLLOW_esPred_in_synpred31_Css33392);
        esPred();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_Css3

    // $ANTLR start synpred32_Css3
    public final void synpred32_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:722:7: ( ( IDENT | STAR )? PIPE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:722:8: ( IDENT | STAR )? PIPE
        {
        dbg.location(722,8);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:722:8: ( IDENT | STAR )?
        int alt391=2;
        try { dbg.enterSubRule(391);
        try { dbg.enterDecision(391, decisionCanBacktrack[391]);

        int LA391_0 = input.LA(1);

        if ( (LA391_0==IDENT||LA391_0==STAR) ) {
            alt391=1;
        }
        } finally {dbg.exitDecision(391);}

        switch (alt391) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
                {
                dbg.location(722,8);
                if ( input.LA(1)==IDENT||input.LA(1)==STAR ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    dbg.recognitionException(mse);
                    throw mse;
                }


                }
                break;

        }
        } finally {dbg.exitSubRule(391);}

        dbg.location(722,24);
        match(input,PIPE,FOLLOW_PIPE_in_synpred32_Css33484); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_Css3

    // $ANTLR start synpred33_Css3
    public final void synpred33_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:14: ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:15: ( ws | ( ( ws )? operator ( ws )? ) | ) term
        {
        dbg.location(898,15);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:15: ( ws | ( ( ws )? operator ( ws )? ) | )
        int alt394=3;
        try { dbg.enterSubRule(394);
        try { dbg.enterDecision(394, decisionCanBacktrack[394]);

        try {
            isCyclicDecision = true;
            alt394 = dfa394.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(394);}

        switch (alt394) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:17: ws
                {
                dbg.location(898,17);
                pushFollow(FOLLOW_ws_in_synpred33_Css34883);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:22: ( ( ws )? operator ( ws )? )
                {
                dbg.location(898,22);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:22: ( ( ws )? operator ( ws )? )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:23: ( ws )? operator ( ws )?
                {
                dbg.location(898,23);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:23: ( ws )?
                int alt392=2;
                try { dbg.enterSubRule(392);
                try { dbg.enterDecision(392, decisionCanBacktrack[392]);

                int LA392_0 = input.LA(1);

                if ( ((LA392_0>=WS && LA392_0<=COMMENT)) ) {
                    alt392=1;
                }
                } finally {dbg.exitDecision(392);}

                switch (alt392) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:23: ws
                        {
                        dbg.location(898,23);
                        pushFollow(FOLLOW_ws_in_synpred33_Css34888);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(392);}

                dbg.location(898,27);
                pushFollow(FOLLOW_operator_in_synpred33_Css34891);
                operator();

                state._fsp--;
                if (state.failed) return ;
                dbg.location(898,36);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:36: ( ws )?
                int alt393=2;
                try { dbg.enterSubRule(393);
                try { dbg.enterDecision(393, decisionCanBacktrack[393]);

                int LA393_0 = input.LA(1);

                if ( ((LA393_0>=WS && LA393_0<=COMMENT)) ) {
                    alt393=1;
                }
                } finally {dbg.exitDecision(393);}

                switch (alt393) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:36: ws
                        {
                        dbg.location(898,36);
                        pushFollow(FOLLOW_ws_in_synpred33_Css34893);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(393);}


                }


                }
                break;
            case 3 :
                dbg.enterAlt(3);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:56: 
                {
                }
                break;

        }
        } finally {dbg.exitSubRule(394);}

        dbg.location(898,58);
        pushFollow(FOLLOW_term_in_synpred33_Css34902);
        term();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_Css3

    // $ANTLR start synpred34_Css3
    public final void synpred34_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:9: ( functionName ( ws )? LPAREN )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:10: functionName ( ws )? LPAREN
        {
        dbg.location(905,10);
        pushFollow(FOLLOW_functionName_in_synpred34_Css34975);
        functionName();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(905,23);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:23: ( ws )?
        int alt395=2;
        try { dbg.enterSubRule(395);
        try { dbg.enterDecision(395, decisionCanBacktrack[395]);

        int LA395_0 = input.LA(1);

        if ( ((LA395_0>=WS && LA395_0<=COMMENT)) ) {
            alt395=1;
        }
        } finally {dbg.exitDecision(395);}

        switch (alt395) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:23: ws
                {
                dbg.location(905,23);
                pushFollow(FOLLOW_ws_in_synpred34_Css34977);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(395);}

        dbg.location(905,27);
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred34_Css34980); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_Css3

    // $ANTLR start synpred35_Css3
    public final void synpred35_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:10: fnAttributeName ( ws )? ( OPEQ | COLON )
        {
        dbg.location(966,10);
        pushFollow(FOLLOW_fnAttributeName_in_synpred35_Css35497);
        fnAttributeName();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(966,26);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:26: ( ws )?
        int alt396=2;
        try { dbg.enterSubRule(396);
        try { dbg.enterDecision(396, decisionCanBacktrack[396]);

        int LA396_0 = input.LA(1);

        if ( ((LA396_0>=WS && LA396_0<=COMMENT)) ) {
            alt396=1;
        }
        } finally {dbg.exitDecision(396);}

        switch (alt396) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:26: ws
                {
                dbg.location(966,26);
                pushFollow(FOLLOW_ws_in_synpred35_Css35499);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(396);}

        dbg.location(966,30);
        if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred35_Css3

    // $ANTLR start synpred36_Css3
    public final void synpred36_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term
        {
        dbg.location(979,21);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )
        int alt399=3;
        try { dbg.enterSubRule(399);
        try { dbg.enterDecision(399, decisionCanBacktrack[399]);

        try {
            isCyclicDecision = true;
            alt399 = dfa399.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(399);}

        switch (alt399) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:23: ws
                {
                dbg.location(979,23);
                pushFollow(FOLLOW_ws_in_synpred36_Css35628);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:28: ( ( ws )? SOLIDUS ( ws )? )
                {
                dbg.location(979,28);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:28: ( ( ws )? SOLIDUS ( ws )? )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:29: ( ws )? SOLIDUS ( ws )?
                {
                dbg.location(979,29);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:29: ( ws )?
                int alt397=2;
                try { dbg.enterSubRule(397);
                try { dbg.enterDecision(397, decisionCanBacktrack[397]);

                int LA397_0 = input.LA(1);

                if ( ((LA397_0>=WS && LA397_0<=COMMENT)) ) {
                    alt397=1;
                }
                } finally {dbg.exitDecision(397);}

                switch (alt397) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:29: ws
                        {
                        dbg.location(979,29);
                        pushFollow(FOLLOW_ws_in_synpred36_Css35633);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(397);}

                dbg.location(979,33);
                match(input,SOLIDUS,FOLLOW_SOLIDUS_in_synpred36_Css35636); if (state.failed) return ;
                dbg.location(979,41);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:41: ( ws )?
                int alt398=2;
                try { dbg.enterSubRule(398);
                try { dbg.enterDecision(398, decisionCanBacktrack[398]);

                int LA398_0 = input.LA(1);

                if ( ((LA398_0>=WS && LA398_0<=COMMENT)) ) {
                    alt398=1;
                }
                } finally {dbg.exitDecision(398);}

                switch (alt398) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:41: ws
                        {
                        dbg.location(979,41);
                        pushFollow(FOLLOW_ws_in_synpred36_Css35638);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(398);}


                }


                }
                break;
            case 3 :
                dbg.enterAlt(3);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:61: 
                {
                }
                break;

        }
        } finally {dbg.exitSubRule(399);}

        dbg.location(979,63);
        pushFollow(FOLLOW_term_in_synpred36_Css35647);
        term();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_Css3

    // $ANTLR start synpred37_Css3
    public final void synpred37_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:6: ( ( ws )? COMMA ( ws )? cp_expression )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:7: ( ws )? COMMA ( ws )? cp_expression
        {
        dbg.location(1014,7);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:7: ( ws )?
        int alt400=2;
        try { dbg.enterSubRule(400);
        try { dbg.enterDecision(400, decisionCanBacktrack[400]);

        int LA400_0 = input.LA(1);

        if ( ((LA400_0>=WS && LA400_0<=COMMENT)) ) {
            alt400=1;
        }
        } finally {dbg.exitDecision(400);}

        switch (alt400) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:7: ws
                {
                dbg.location(1014,7);
                pushFollow(FOLLOW_ws_in_synpred37_Css36070);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(400);}

        dbg.location(1014,11);
        match(input,COMMA,FOLLOW_COMMA_in_synpred37_Css36073); if (state.failed) return ;
        dbg.location(1014,17);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:17: ( ws )?
        int alt401=2;
        try { dbg.enterSubRule(401);
        try { dbg.enterDecision(401, decisionCanBacktrack[401]);

        int LA401_0 = input.LA(1);

        if ( ((LA401_0>=WS && LA401_0<=COMMENT)) ) {
            alt401=1;
        }
        } finally {dbg.exitDecision(401);}

        switch (alt401) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:17: ws
                {
                dbg.location(1014,17);
                pushFollow(FOLLOW_ws_in_synpred37_Css36075);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(401);}

        dbg.location(1014,21);
        pushFollow(FOLLOW_cp_expression_in_synpred37_Css36078);
        cp_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred37_Css3

    // $ANTLR start synpred38_Css3
    public final void synpred38_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:9: ( ( ws )? cp_expression_operator )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:10: ( ws )? cp_expression_operator
        {
        dbg.location(1031,10);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:10: ( ws )?
        int alt402=2;
        try { dbg.enterSubRule(402);
        try { dbg.enterDecision(402, decisionCanBacktrack[402]);

        int LA402_0 = input.LA(1);

        if ( ((LA402_0>=WS && LA402_0<=COMMENT)) ) {
            alt402=1;
        }
        } finally {dbg.exitDecision(402);}

        switch (alt402) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:10: ws
                {
                dbg.location(1031,10);
                pushFollow(FOLLOW_ws_in_synpred38_Css36139);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(402);}

        dbg.location(1031,14);
        pushFollow(FOLLOW_cp_expression_operator_in_synpred38_Css36142);
        cp_expression_operator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_Css3

    // $ANTLR start synpred39_Css3
    public final void synpred39_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:11: ( ( ws )? cp_expression_atom )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:12: ( ws )? cp_expression_atom
        {
        dbg.location(1032,12);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:12: ( ws )?
        int alt403=2;
        try { dbg.enterSubRule(403);
        try { dbg.enterDecision(403, decisionCanBacktrack[403]);

        int LA403_0 = input.LA(1);

        if ( ((LA403_0>=WS && LA403_0<=COMMENT)) ) {
            alt403=1;
        }
        } finally {dbg.exitDecision(403);}

        switch (alt403) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:12: ws
                {
                dbg.location(1032,12);
                pushFollow(FOLLOW_ws_in_synpred39_Css36168);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(403);}

        dbg.location(1032,16);
        pushFollow(FOLLOW_cp_expression_atom_in_synpred39_Css36171);
        cp_expression_atom();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_Css3

    // $ANTLR start synpred40_Css3
    public final void synpred40_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1045:13: ( cp_math_expression )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1045:14: cp_math_expression
        {
        dbg.location(1045,14);
        pushFollow(FOLLOW_cp_math_expression_in_synpred40_Css36289);
        cp_math_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_Css3

    // $ANTLR start synpred41_Css3
    public final void synpred41_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:14: ( ws )? ( PLUS | MINUS | STAR | SOLIDUS )
        {
        dbg.location(1072,14);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:14: ( ws )?
        int alt404=2;
        try { dbg.enterSubRule(404);
        try { dbg.enterDecision(404, decisionCanBacktrack[404]);

        int LA404_0 = input.LA(1);

        if ( ((LA404_0>=WS && LA404_0<=COMMENT)) ) {
            alt404=1;
        }
        } finally {dbg.exitDecision(404);}

        switch (alt404) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:14: ws
                {
                dbg.location(1072,14);
                pushFollow(FOLLOW_ws_in_synpred41_Css36422);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(404);}

        dbg.location(1072,18);
        if ( (input.LA(1)>=SOLIDUS && input.LA(1)<=PLUS)||input.LA(1)==STAR ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred41_Css3

    // $ANTLR start synpred42_Css3
    public final void synpred42_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:13: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:14: sass_interpolation_expression_var
        {
        dbg.location(1206,14);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred42_Css37413);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred42_Css3

    // $ANTLR start synpred43_Css3
    public final void synpred43_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1213:17: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1213:18: sass_interpolation_expression_var
        {
        dbg.location(1213,18);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred43_Css37559);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred43_Css3

    // $ANTLR start synpred44_Css3
    public final void synpred44_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1224:13: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1224:14: sass_interpolation_expression_var
        {
        dbg.location(1224,14);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred44_Css37710);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred44_Css3

    // $ANTLR start synpred45_Css3
    public final void synpred45_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:17: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:18: sass_interpolation_expression_var
        {
        dbg.location(1231,18);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred45_Css37827);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred45_Css3

    // Delegated rules

    public final boolean synpred11_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred11_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred17_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred42_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred14_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred22_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred9_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred45_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred4_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred37_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred7_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred19_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred23_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred34_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred1_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred26_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred31_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred15_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred12_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred20_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred32_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred8_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred35_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred2_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred38_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred43_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred5_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred18_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred27_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred21_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred29_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred40_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred16_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred24_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred41_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred44_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred13_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred30_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred10_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred36_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred39_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred33_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred6_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred25_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred28_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred3_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA3 dfa3 = new DFA3(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA17 dfa17 = new DFA17(this);
    protected DFA32 dfa32 = new DFA32(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA24 dfa24 = new DFA24(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA61 dfa61 = new DFA61(this);
    protected DFA65 dfa65 = new DFA65(this);
    protected DFA69 dfa69 = new DFA69(this);
    protected DFA73 dfa73 = new DFA73(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA103 dfa103 = new DFA103(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA140 dfa140 = new DFA140(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA147 dfa147 = new DFA147(this);
    protected DFA152 dfa152 = new DFA152(this);
    protected DFA151 dfa151 = new DFA151(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA158 dfa158 = new DFA158(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA163 dfa163 = new DFA163(this);
    protected DFA181 dfa181 = new DFA181(this);
    protected DFA194 dfa194 = new DFA194(this);
    protected DFA190 dfa190 = new DFA190(this);
    protected DFA195 dfa195 = new DFA195(this);
    protected DFA200 dfa200 = new DFA200(this);
    protected DFA199 dfa199 = new DFA199(this);
    protected DFA203 dfa203 = new DFA203(this);
    protected DFA211 dfa211 = new DFA211(this);
    protected DFA215 dfa215 = new DFA215(this);
    protected DFA222 dfa222 = new DFA222(this);
    protected DFA221 dfa221 = new DFA221(this);
    protected DFA220 dfa220 = new DFA220(this);
    protected DFA229 dfa229 = new DFA229(this);
    protected DFA234 dfa234 = new DFA234(this);
    protected DFA238 dfa238 = new DFA238(this);
    protected DFA244 dfa244 = new DFA244(this);
    protected DFA248 dfa248 = new DFA248(this);
    protected DFA253 dfa253 = new DFA253(this);
    protected DFA258 dfa258 = new DFA258(this);
    protected DFA262 dfa262 = new DFA262(this);
    protected DFA268 dfa268 = new DFA268(this);
    protected DFA272 dfa272 = new DFA272(this);
    protected DFA274 dfa274 = new DFA274(this);
    protected DFA284 dfa284 = new DFA284(this);
    protected DFA287 dfa287 = new DFA287(this);
    protected DFA301 dfa301 = new DFA301(this);
    protected DFA317 dfa317 = new DFA317(this);
    protected DFA321 dfa321 = new DFA321(this);
    protected DFA329 dfa329 = new DFA329(this);
    protected DFA333 dfa333 = new DFA333(this);
    protected DFA340 dfa340 = new DFA340(this);
    protected DFA339 dfa339 = new DFA339(this);
    protected DFA360 dfa360 = new DFA360(this);
    protected DFA383 dfa383 = new DFA383(this);
    protected DFA385 dfa385 = new DFA385(this);
    protected DFA394 dfa394 = new DFA394(this);
    protected DFA399 dfa399 = new DFA399(this);
    static final String DFA3_eotS =
        "\5\uffff";
    static final String DFA3_eofS =
        "\1\2\4\uffff";
    static final String DFA3_minS =
        "\1\4\1\7\1\uffff\1\7\1\uffff";
    static final String DFA3_maxS =
        "\1\160\1\130\1\uffff\1\130\1\uffff";
    static final String DFA3_acceptS =
        "\2\uffff\1\2\1\uffff\1\1";
    static final String DFA3_specialS =
        "\5\uffff}>";
    static final String[] DFA3_transitionS = {
            "\3\2\2\uffff\1\1\2\2\3\uffff\1\2\6\uffff\4\2\3\uffff\1\2\1\uffff"+
            "\23\2\1\uffff\15\2\1\uffff\1\2\6\uffff\2\2\20\uffff\15\2\11"+
            "\uffff\1\2",
            "\1\4\17\uffff\1\2\76\uffff\3\3",
            "",
            "\1\4\17\uffff\1\2\76\uffff\3\3",
            ""
    };

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "324:6: ( charSet ( ws )? )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA4_eotS =
        "\50\uffff";
    static final String DFA4_eofS =
        "\1\2\47\uffff";
    static final String DFA4_minS =
        "\1\4\1\0\46\uffff";
    static final String DFA4_maxS =
        "\1\160\1\0\46\uffff";
    static final String DFA4_acceptS =
        "\2\uffff\1\2\44\uffff\1\1";
    static final String DFA4_specialS =
        "\1\uffff\1\0\46\uffff}>";
    static final String[] DFA4_transitionS = {
            "\3\2\2\uffff\1\2\1\1\1\2\3\uffff\1\2\6\uffff\4\2\3\uffff\1\2"+
            "\1\uffff\23\2\1\uffff\15\2\1\uffff\1\2\6\uffff\2\2\20\uffff"+
            "\15\2\11\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "325:9: ( imports )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))),""))) ) {s = 39;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA5_eotS =
        "\5\uffff";
    static final String DFA5_eofS =
        "\1\2\4\uffff";
    static final String DFA5_minS =
        "\1\4\1\6\1\uffff\1\6\1\uffff";
    static final String DFA5_maxS =
        "\1\160\1\130\1\uffff\1\130\1\uffff";
    static final String DFA5_acceptS =
        "\2\uffff\1\2\1\uffff\1\1";
    static final String DFA5_specialS =
        "\5\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\1\2\2\2\uffff\3\2\3\uffff\1\2\6\uffff\4\2\3\uffff\1\2\1\uffff"+
            "\23\2\1\uffff\15\2\1\uffff\1\2\6\uffff\2\2\20\uffff\15\2\11"+
            "\uffff\1\2",
            "\3\4\16\uffff\1\2\76\uffff\3\3",
            "",
            "\3\4\16\uffff\1\2\76\uffff\3\3",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "326:9: ( namespaces )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA8_eotS =
        "\5\uffff";
    static final String DFA8_eofS =
        "\1\1\4\uffff";
    static final String DFA8_minS =
        "\1\4\1\uffff\2\6\1\uffff";
    static final String DFA8_maxS =
        "\1\160\1\uffff\2\130\1\uffff";
    static final String DFA8_acceptS =
        "\1\uffff\1\2\2\uffff\1\1";
    static final String DFA8_specialS =
        "\5\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\2\2\1\2\uffff\3\1\3\uffff\1\1\6\uffff\4\1\3\uffff\1\1\1\uffff"+
            "\23\1\1\uffff\15\1\1\uffff\1\1\6\uffff\2\1\20\uffff\15\1\11"+
            "\uffff\1\1",
            "",
            "\3\4\16\uffff\1\1\76\uffff\3\3",
            "\3\4\16\uffff\1\1\76\uffff\3\3",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "()+ loopback of 333:2: ( namespace ( ws )? )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA17_eotS =
        "\50\uffff";
    static final String DFA17_eofS =
        "\1\1\47\uffff";
    static final String DFA17_minS =
        "\1\4\34\uffff\1\0\12\uffff";
    static final String DFA17_maxS =
        "\1\160\34\uffff\1\0\12\uffff";
    static final String DFA17_acceptS =
        "\1\uffff\1\2\45\uffff\1\1";
    static final String DFA17_specialS =
        "\35\uffff\1\0\12\uffff}>";
    static final String[] DFA17_transitionS = {
            "\3\1\2\uffff\1\1\1\35\1\1\3\uffff\1\1\6\uffff\4\1\3\uffff\1"+
            "\1\1\uffff\23\1\1\uffff\15\1\1\uffff\1\1\6\uffff\2\1\20\uffff"+
            "\15\1\11\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA17_eot = DFA.unpackEncodedString(DFA17_eotS);
    static final short[] DFA17_eof = DFA.unpackEncodedString(DFA17_eofS);
    static final char[] DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_minS);
    static final char[] DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_maxS);
    static final short[] DFA17_accept = DFA.unpackEncodedString(DFA17_acceptS);
    static final short[] DFA17_special = DFA.unpackEncodedString(DFA17_specialS);
    static final short[][] DFA17_transition;

    static {
        int numStates = DFA17_transitionS.length;
        DFA17_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA17_transition[i] = DFA.unpackEncodedString(DFA17_transitionS[i]);
        }
    }

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = DFA17_eot;
            this.eof = DFA17_eof;
            this.min = DFA17_min;
            this.max = DFA17_max;
            this.accept = DFA17_accept;
            this.special = DFA17_special;
            this.transition = DFA17_transition;
        }
        public String getDescription() {
            return "()+ loopback of 358:2: ( importItem ( ws )? SEMI ( ws )? )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA17_29 = input.LA(1);

                         
                        int index17_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))),""))) ) {s = 39;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 1;}

                         
                        input.seek(index17_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA32_eotS =
        "\10\uffff";
    static final String DFA32_eofS =
        "\10\uffff";
    static final String DFA32_minS =
        "\1\12\2\7\1\0\1\uffff\1\0\2\uffff";
    static final String DFA32_maxS =
        "\1\12\2\130\1\0\1\uffff\1\0\2\uffff";
    static final String DFA32_acceptS =
        "\4\uffff\1\3\1\uffff\1\1\1\2";
    static final String DFA32_specialS =
        "\3\uffff\1\0\1\uffff\1\1\2\uffff}>";
    static final String[] DFA32_transitionS = {
            "\1\1",
            "\2\3\3\uffff\1\4\111\uffff\3\2",
            "\2\5\3\uffff\1\4\111\uffff\3\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
    static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
    static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
    static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
    static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
    static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
    static final short[][] DFA32_transition;

    static {
        int numStates = DFA32_transitionS.length;
        DFA32_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
        }
    }

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = DFA32_eot;
            this.eof = DFA32_eof;
            this.min = DFA32_min;
            this.max = DFA32_max;
            this.accept = DFA32_accept;
            this.special = DFA32_special;
            this.transition = DFA32_transition;
        }
        public String getDescription() {
            return "361:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? ( LPAREN LESS_IMPORT_TYPE RPAREN ( ws )? )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA32_3 = input.LA(1);

                         
                        int index32_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")),""))) ) {s = 6;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 7;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 4;}

                         
                        input.seek(index32_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA32_5 = input.LA(1);

                         
                        int index32_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")),""))) ) {s = 6;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 7;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 4;}

                         
                        input.seek(index32_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 32, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA20_eotS =
        "\56\uffff";
    static final String DFA20_eofS =
        "\1\11\55\uffff";
    static final String DFA20_minS =
        "\1\4\1\0\1\uffff\3\0\1\uffff\2\0\3\uffff\2\0\2\uffff\11\0\13\uffff"+
        "\6\0\1\uffff\3\0";
    static final String DFA20_maxS =
        "\1\160\1\0\1\uffff\3\0\1\uffff\2\0\3\uffff\2\0\2\uffff\11\0\13\uffff"+
        "\6\0\1\uffff\3\0";
    static final String DFA20_acceptS =
        "\2\uffff\1\1\3\uffff\1\1\2\uffff\1\2\44\uffff";
    static final String DFA20_specialS =
        "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\uffff\1\5\1\6\3\uffff\1\7\1\10\2"+
        "\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\13\uffff\1\22"+
        "\1\23\1\24\1\25\1\26\1\27\1\uffff\1\30\1\31\1\32}>";
    static final String[] DFA20_transitionS = {
            "\1\55\1\11\1\3\2\uffff\1\55\1\26\1\11\1\6\2\uffff\1\50\1\uffff"+
            "\1\11\2\uffff\2\2\1\4\1\11\1\47\1\45\3\uffff\1\46\1\uffff\1"+
            "\30\1\51\1\44\20\55\1\uffff\2\11\1\27\2\11\1\5\7\11\1\uffff"+
            "\1\11\6\uffff\1\11\1\10\14\uffff\3\1\1\uffff\1\25\1\7\1\14\1"+
            "\15\2\20\1\21\1\55\1\22\1\53\1\54\1\23\1\24\11\uffff\1\11",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "363:43: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA20_0 = input.LA(1);

                         
                        int index20_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA20_0>=WS && LA20_0<=COMMENT)) ) {s = 1;}

                        else if ( ((LA20_0>=ONLY && LA20_0<=NOT)) && (synpred1_Css3())) {s = 2;}

                        else if ( (LA20_0==IDENT) ) {s = 3;}

                        else if ( (LA20_0==GEN) ) {s = 4;}

                        else if ( (LA20_0==HASH_SYMBOL) ) {s = 5;}

                        else if ( (LA20_0==LPAREN) && (synpred1_Css3())) {s = 6;}

                        else if ( (LA20_0==SASS_MIXIN) ) {s = 7;}

                        else if ( (LA20_0==SASS_VAR) ) {s = 8;}

                        else if ( (LA20_0==EOF||LA20_0==SEMI||LA20_0==COMMA||LA20_0==RBRACE||LA20_0==COLON||(LA20_0>=MINUS && LA20_0<=PLUS)||(LA20_0>=GREATER && LA20_0<=TILDE)||(LA20_0>=HASH && LA20_0<=PIPE)||LA20_0==LESS_AND||LA20_0==RBRACKET||LA20_0==AT_SIGN) ) {s = 9;}

                        else if ( (LA20_0==SASS_INCLUDE) ) {s = 12;}

                        else if ( (LA20_0==SASS_EXTEND) ) {s = 13;}

                        else if ( ((LA20_0>=SASS_DEBUG && LA20_0<=SASS_WARN)) ) {s = 16;}

                        else if ( (LA20_0==SASS_IF) ) {s = 17;}

                        else if ( (LA20_0==SASS_FOR) ) {s = 18;}

                        else if ( (LA20_0==SASS_EACH) ) {s = 19;}

                        else if ( (LA20_0==SASS_WHILE) ) {s = 20;}

                        else if ( (LA20_0==SASS_CONTENT) ) {s = 21;}

                        else if ( (LA20_0==IMPORT_SYM) ) {s = 22;}

                        else if ( (LA20_0==SASS_AT_ROOT) ) {s = 23;}

                        else if ( (LA20_0==PAGE_SYM) ) {s = 24;}

                        else if ( (LA20_0==FONT_FACE_SYM) ) {s = 36;}

                        else if ( (LA20_0==MOZ_DOCUMENT_SYM) ) {s = 37;}

                        else if ( (LA20_0==WEBKIT_KEYFRAMES_SYM) ) {s = 38;}

                        else if ( (LA20_0==AT_IDENT) ) {s = 39;}

                        else if ( (LA20_0==MEDIA_SYM) ) {s = 40;}

                        else if ( (LA20_0==COUNTER_STYLE_SYM) ) {s = 41;}

                        else if ( (LA20_0==SASS_FUNCTION) ) {s = 43;}

                        else if ( (LA20_0==SASS_RETURN) ) {s = 44;}

                        else if ( (LA20_0==NAMESPACE_SYM||LA20_0==CHARSET_SYM||(LA20_0>=TOPLEFTCORNER_SYM && LA20_0<=RIGHTBOTTOM_SYM)||LA20_0==SASS_ELSE) ) {s = 45;}

                         
                        input.seek(index20_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA20_1 = input.LA(1);

                         
                        int index20_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA20_3 = input.LA(1);

                         
                        int index20_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA20_4 = input.LA(1);

                         
                        int index20_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA20_5 = input.LA(1);

                         
                        int index20_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred1_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA20_7 = input.LA(1);

                         
                        int index20_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA20_8 = input.LA(1);

                         
                        int index20_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 9;}

                         
                        input.seek(index20_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA20_12 = input.LA(1);

                         
                        int index20_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_12);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA20_13 = input.LA(1);

                         
                        int index20_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_13);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA20_16 = input.LA(1);

                         
                        int index20_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_16);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA20_17 = input.LA(1);

                         
                        int index20_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_17);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA20_18 = input.LA(1);

                         
                        int index20_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_18);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA20_19 = input.LA(1);

                         
                        int index20_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_19);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA20_20 = input.LA(1);

                         
                        int index20_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_20);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA20_21 = input.LA(1);

                         
                        int index20_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_21);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA20_22 = input.LA(1);

                         
                        int index20_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_22);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA20_23 = input.LA(1);

                         
                        int index20_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_23);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA20_24 = input.LA(1);

                         
                        int index20_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_24);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA20_36 = input.LA(1);

                         
                        int index20_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_36);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA20_37 = input.LA(1);

                         
                        int index20_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_37);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA20_38 = input.LA(1);

                         
                        int index20_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_38);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA20_39 = input.LA(1);

                         
                        int index20_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_39);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA20_40 = input.LA(1);

                         
                        int index20_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_40);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA20_41 = input.LA(1);

                         
                        int index20_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_41);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA20_43 = input.LA(1);

                         
                        int index20_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_43);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA20_44 = input.LA(1);

                         
                        int index20_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_44);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA20_45 = input.LA(1);

                         
                        int index20_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_45);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA24_eotS =
        "\6\uffff";
    static final String DFA24_eofS =
        "\2\2\4\uffff";
    static final String DFA24_minS =
        "\2\4\1\uffff\2\6\1\uffff";
    static final String DFA24_maxS =
        "\2\160\1\uffff\2\130\1\uffff";
    static final String DFA24_acceptS =
        "\2\uffff\1\2\2\uffff\1\1";
    static final String DFA24_specialS =
        "\6\uffff}>";
    static final String[] DFA24_transitionS = {
            "\3\2\2\uffff\2\2\1\3\1\2\2\uffff\1\2\1\uffff\1\2\2\uffff\6\2"+
            "\3\uffff\1\2\1\uffff\23\2\1\uffff\15\2\1\uffff\1\2\6\uffff\2"+
            "\2\14\uffff\3\1\1\uffff\15\2\11\uffff\1\2",
            "\3\2\2\uffff\2\2\1\3\1\2\2\uffff\1\2\1\uffff\1\2\2\uffff\6"+
            "\2\3\uffff\1\2\1\uffff\23\2\1\uffff\15\2\1\uffff\1\2\6\uffff"+
            "\2\2\14\uffff\3\1\1\uffff\15\2\11\uffff\1\2",
            "",
            "\1\2\2\5\2\uffff\1\2\4\uffff\1\2\6\uffff\1\2\33\uffff\1\2\2"+
            "\uffff\1\2\1\uffff\4\2\2\uffff\1\2\2\uffff\1\2\6\uffff\1\2\15"+
            "\uffff\3\4",
            "\1\2\2\5\2\uffff\1\2\4\uffff\1\2\6\uffff\1\2\33\uffff\1\2\2"+
            "\uffff\1\2\1\uffff\4\2\2\uffff\1\2\2\uffff\1\2\6\uffff\1\2\15"+
            "\uffff\3\4",
            ""
    };

    static final short[] DFA24_eot = DFA.unpackEncodedString(DFA24_eotS);
    static final short[] DFA24_eof = DFA.unpackEncodedString(DFA24_eofS);
    static final char[] DFA24_min = DFA.unpackEncodedStringToUnsignedChars(DFA24_minS);
    static final char[] DFA24_max = DFA.unpackEncodedStringToUnsignedChars(DFA24_maxS);
    static final short[] DFA24_accept = DFA.unpackEncodedString(DFA24_acceptS);
    static final short[] DFA24_special = DFA.unpackEncodedString(DFA24_specialS);
    static final short[][] DFA24_transition;

    static {
        int numStates = DFA24_transitionS.length;
        DFA24_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA24_transition[i] = DFA.unpackEncodedString(DFA24_transitionS[i]);
        }
    }

    class DFA24 extends DFA {

        public DFA24(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 24;
            this.eot = DFA24_eot;
            this.eof = DFA24_eof;
            this.min = DFA24_min;
            this.max = DFA24_max;
            this.accept = DFA24_accept;
            this.special = DFA24_special;
            this.transition = DFA24_transition;
        }
        public String getDescription() {
            return "()* loopback of 366:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA26_eotS =
        "\56\uffff";
    static final String DFA26_eofS =
        "\1\11\55\uffff";
    static final String DFA26_minS =
        "\1\4\1\0\1\uffff\3\0\1\uffff\2\0\3\uffff\2\0\2\uffff\11\0\13\uffff"+
        "\6\0\1\uffff\3\0";
    static final String DFA26_maxS =
        "\1\160\1\0\1\uffff\3\0\1\uffff\2\0\3\uffff\2\0\2\uffff\11\0\13\uffff"+
        "\6\0\1\uffff\3\0";
    static final String DFA26_acceptS =
        "\2\uffff\1\1\3\uffff\1\1\2\uffff\1\2\44\uffff";
    static final String DFA26_specialS =
        "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\uffff\1\5\1\6\3\uffff\1\7\1\10\2"+
        "\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\13\uffff\1\22"+
        "\1\23\1\24\1\25\1\26\1\27\1\uffff\1\30\1\31\1\32}>";
    static final String[] DFA26_transitionS = {
            "\1\55\1\11\1\3\2\uffff\1\55\1\26\1\11\1\6\2\uffff\1\50\1\uffff"+
            "\1\11\2\uffff\2\2\1\4\1\11\1\47\1\45\3\uffff\1\46\1\uffff\1"+
            "\30\1\51\1\44\20\55\1\uffff\2\11\1\27\2\11\1\5\7\11\1\uffff"+
            "\1\11\6\uffff\1\11\1\10\14\uffff\3\1\1\uffff\1\25\1\7\1\14\1"+
            "\15\2\20\1\21\1\55\1\22\1\53\1\54\1\23\1\24\11\uffff\1\11",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "366:97: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_0 = input.LA(1);

                         
                        int index26_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA26_0>=WS && LA26_0<=COMMENT)) ) {s = 1;}

                        else if ( ((LA26_0>=ONLY && LA26_0<=NOT)) && (synpred2_Css3())) {s = 2;}

                        else if ( (LA26_0==IDENT) ) {s = 3;}

                        else if ( (LA26_0==GEN) ) {s = 4;}

                        else if ( (LA26_0==HASH_SYMBOL) ) {s = 5;}

                        else if ( (LA26_0==LPAREN) && (synpred2_Css3())) {s = 6;}

                        else if ( (LA26_0==SASS_MIXIN) ) {s = 7;}

                        else if ( (LA26_0==SASS_VAR) ) {s = 8;}

                        else if ( (LA26_0==EOF||LA26_0==SEMI||LA26_0==COMMA||LA26_0==RBRACE||LA26_0==COLON||(LA26_0>=MINUS && LA26_0<=PLUS)||(LA26_0>=GREATER && LA26_0<=TILDE)||(LA26_0>=HASH && LA26_0<=PIPE)||LA26_0==LESS_AND||LA26_0==RBRACKET||LA26_0==AT_SIGN) ) {s = 9;}

                        else if ( (LA26_0==SASS_INCLUDE) ) {s = 12;}

                        else if ( (LA26_0==SASS_EXTEND) ) {s = 13;}

                        else if ( ((LA26_0>=SASS_DEBUG && LA26_0<=SASS_WARN)) ) {s = 16;}

                        else if ( (LA26_0==SASS_IF) ) {s = 17;}

                        else if ( (LA26_0==SASS_FOR) ) {s = 18;}

                        else if ( (LA26_0==SASS_EACH) ) {s = 19;}

                        else if ( (LA26_0==SASS_WHILE) ) {s = 20;}

                        else if ( (LA26_0==SASS_CONTENT) ) {s = 21;}

                        else if ( (LA26_0==IMPORT_SYM) ) {s = 22;}

                        else if ( (LA26_0==SASS_AT_ROOT) ) {s = 23;}

                        else if ( (LA26_0==PAGE_SYM) ) {s = 24;}

                        else if ( (LA26_0==FONT_FACE_SYM) ) {s = 36;}

                        else if ( (LA26_0==MOZ_DOCUMENT_SYM) ) {s = 37;}

                        else if ( (LA26_0==WEBKIT_KEYFRAMES_SYM) ) {s = 38;}

                        else if ( (LA26_0==AT_IDENT) ) {s = 39;}

                        else if ( (LA26_0==MEDIA_SYM) ) {s = 40;}

                        else if ( (LA26_0==COUNTER_STYLE_SYM) ) {s = 41;}

                        else if ( (LA26_0==SASS_FUNCTION) ) {s = 43;}

                        else if ( (LA26_0==SASS_RETURN) ) {s = 44;}

                        else if ( (LA26_0==NAMESPACE_SYM||LA26_0==CHARSET_SYM||(LA26_0>=TOPLEFTCORNER_SYM && LA26_0<=RIGHTBOTTOM_SYM)||LA26_0==SASS_ELSE) ) {s = 45;}

                         
                        input.seek(index26_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_1 = input.LA(1);

                         
                        int index26_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_3 = input.LA(1);

                         
                        int index26_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_4 = input.LA(1);

                         
                        int index26_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA26_5 = input.LA(1);

                         
                        int index26_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA26_7 = input.LA(1);

                         
                        int index26_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA26_8 = input.LA(1);

                         
                        int index26_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 9;}

                         
                        input.seek(index26_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA26_12 = input.LA(1);

                         
                        int index26_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_12);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA26_13 = input.LA(1);

                         
                        int index26_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_13);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA26_16 = input.LA(1);

                         
                        int index26_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_16);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA26_17 = input.LA(1);

                         
                        int index26_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_17);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA26_18 = input.LA(1);

                         
                        int index26_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_18);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA26_19 = input.LA(1);

                         
                        int index26_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_19);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA26_20 = input.LA(1);

                         
                        int index26_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_20);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA26_21 = input.LA(1);

                         
                        int index26_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_21);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA26_22 = input.LA(1);

                         
                        int index26_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_22);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA26_23 = input.LA(1);

                         
                        int index26_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_23);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA26_24 = input.LA(1);

                         
                        int index26_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_24);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA26_36 = input.LA(1);

                         
                        int index26_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_36);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA26_37 = input.LA(1);

                         
                        int index26_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_37);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA26_38 = input.LA(1);

                         
                        int index26_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_38);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA26_39 = input.LA(1);

                         
                        int index26_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_39);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA26_40 = input.LA(1);

                         
                        int index26_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_40);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA26_41 = input.LA(1);

                         
                        int index26_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_41);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA26_43 = input.LA(1);

                         
                        int index26_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_43);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA26_44 = input.LA(1);

                         
                        int index26_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_44);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA26_45 = input.LA(1);

                         
                        int index26_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_45);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA31_eotS =
        "\56\uffff";
    static final String DFA31_eofS =
        "\1\11\55\uffff";
    static final String DFA31_minS =
        "\1\4\1\0\1\uffff\3\0\1\uffff\2\0\3\uffff\2\0\2\uffff\11\0\13\uffff"+
        "\6\0\1\uffff\3\0";
    static final String DFA31_maxS =
        "\1\160\1\0\1\uffff\3\0\1\uffff\2\0\3\uffff\2\0\2\uffff\11\0\13\uffff"+
        "\6\0\1\uffff\3\0";
    static final String DFA31_acceptS =
        "\2\uffff\1\1\3\uffff\1\1\2\uffff\1\2\44\uffff";
    static final String DFA31_specialS =
        "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\uffff\1\5\1\6\3\uffff\1\7\1\10\2"+
        "\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\13\uffff\1\22"+
        "\1\23\1\24\1\25\1\26\1\27\1\uffff\1\30\1\31\1\32}>";
    static final String[] DFA31_transitionS = {
            "\1\55\1\11\1\3\2\uffff\1\55\1\26\1\11\1\6\2\uffff\1\50\1\uffff"+
            "\1\11\2\uffff\2\2\1\4\1\11\1\47\1\45\3\uffff\1\46\1\uffff\1"+
            "\30\1\51\1\44\20\55\1\uffff\2\11\1\27\2\11\1\5\7\11\1\uffff"+
            "\1\11\6\uffff\1\11\1\10\14\uffff\3\1\1\uffff\1\25\1\7\1\14\1"+
            "\15\2\20\1\21\1\55\1\22\1\53\1\54\1\23\1\24\11\uffff\1\11",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "368:99: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA31_0 = input.LA(1);

                         
                        int index31_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA31_0>=WS && LA31_0<=COMMENT)) ) {s = 1;}

                        else if ( ((LA31_0>=ONLY && LA31_0<=NOT)) && (synpred3_Css3())) {s = 2;}

                        else if ( (LA31_0==IDENT) ) {s = 3;}

                        else if ( (LA31_0==GEN) ) {s = 4;}

                        else if ( (LA31_0==HASH_SYMBOL) ) {s = 5;}

                        else if ( (LA31_0==LPAREN) && (synpred3_Css3())) {s = 6;}

                        else if ( (LA31_0==SASS_MIXIN) ) {s = 7;}

                        else if ( (LA31_0==SASS_VAR) ) {s = 8;}

                        else if ( (LA31_0==EOF||LA31_0==SEMI||LA31_0==COMMA||LA31_0==RBRACE||LA31_0==COLON||(LA31_0>=MINUS && LA31_0<=PLUS)||(LA31_0>=GREATER && LA31_0<=TILDE)||(LA31_0>=HASH && LA31_0<=PIPE)||LA31_0==LESS_AND||LA31_0==RBRACKET||LA31_0==AT_SIGN) ) {s = 9;}

                        else if ( (LA31_0==SASS_INCLUDE) ) {s = 12;}

                        else if ( (LA31_0==SASS_EXTEND) ) {s = 13;}

                        else if ( ((LA31_0>=SASS_DEBUG && LA31_0<=SASS_WARN)) ) {s = 16;}

                        else if ( (LA31_0==SASS_IF) ) {s = 17;}

                        else if ( (LA31_0==SASS_FOR) ) {s = 18;}

                        else if ( (LA31_0==SASS_EACH) ) {s = 19;}

                        else if ( (LA31_0==SASS_WHILE) ) {s = 20;}

                        else if ( (LA31_0==SASS_CONTENT) ) {s = 21;}

                        else if ( (LA31_0==IMPORT_SYM) ) {s = 22;}

                        else if ( (LA31_0==SASS_AT_ROOT) ) {s = 23;}

                        else if ( (LA31_0==PAGE_SYM) ) {s = 24;}

                        else if ( (LA31_0==FONT_FACE_SYM) ) {s = 36;}

                        else if ( (LA31_0==MOZ_DOCUMENT_SYM) ) {s = 37;}

                        else if ( (LA31_0==WEBKIT_KEYFRAMES_SYM) ) {s = 38;}

                        else if ( (LA31_0==AT_IDENT) ) {s = 39;}

                        else if ( (LA31_0==MEDIA_SYM) ) {s = 40;}

                        else if ( (LA31_0==COUNTER_STYLE_SYM) ) {s = 41;}

                        else if ( (LA31_0==SASS_FUNCTION) ) {s = 43;}

                        else if ( (LA31_0==SASS_RETURN) ) {s = 44;}

                        else if ( (LA31_0==NAMESPACE_SYM||LA31_0==CHARSET_SYM||(LA31_0>=TOPLEFTCORNER_SYM && LA31_0<=RIGHTBOTTOM_SYM)||LA31_0==SASS_ELSE) ) {s = 45;}

                         
                        input.seek(index31_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA31_1 = input.LA(1);

                         
                        int index31_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA31_3 = input.LA(1);

                         
                        int index31_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA31_4 = input.LA(1);

                         
                        int index31_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA31_5 = input.LA(1);

                         
                        int index31_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA31_7 = input.LA(1);

                         
                        int index31_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 9;}

                         
                        input.seek(index31_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA31_8 = input.LA(1);

                         
                        int index31_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 9;}

                         
                        input.seek(index31_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA31_12 = input.LA(1);

                         
                        int index31_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 9;}

                         
                        input.seek(index31_12);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA31_13 = input.LA(1);

                         
                        int index31_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 9;}

                         
                        input.seek(index31_13);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA31_16 = input.LA(1);

                         
                        int index31_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 9;}

                         
                        input.seek(index31_16);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA31_17 = input.LA(1);

                         
                        int index31_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 9;}

                         
                        input.seek(index31_17);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA31_18 = input.LA(1);

                         
                        int index31_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 9;}

                         
                        input.seek(index31_18);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA31_19 = input.LA(1);

                         
                        int index31_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 9;}

                         
                        input.seek(index31_19);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA31_20 = input.LA(1);

                         
                        int index31_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 9;}

                         
                        input.seek(index31_20);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA31_21 = input.LA(1);

                         
                        int index31_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 9;}

                         
                        input.seek(index31_21);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA31_22 = input.LA(1);

                         
                        int index31_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 9;}

                         
                        input.seek(index31_22);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA31_23 = input.LA(1);

                         
                        int index31_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_23);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA31_24 = input.LA(1);

                         
                        int index31_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_24);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA31_36 = input.LA(1);

                         
                        int index31_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_36);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA31_37 = input.LA(1);

                         
                        int index31_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_37);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA31_38 = input.LA(1);

                         
                        int index31_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_38);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA31_39 = input.LA(1);

                         
                        int index31_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_39);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA31_40 = input.LA(1);

                         
                        int index31_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_40);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA31_41 = input.LA(1);

                         
                        int index31_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_41);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA31_43 = input.LA(1);

                         
                        int index31_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 9;}

                         
                        input.seek(index31_43);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA31_44 = input.LA(1);

                         
                        int index31_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 9;}

                         
                        input.seek(index31_44);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA31_45 = input.LA(1);

                         
                        int index31_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index31_45);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 31, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA38_eotS =
        "\5\uffff";
    static final String DFA38_eofS =
        "\5\uffff";
    static final String DFA38_minS =
        "\2\4\1\0\2\uffff";
    static final String DFA38_maxS =
        "\2\160\1\0\2\uffff";
    static final String DFA38_acceptS =
        "\3\uffff\1\2\1\1";
    static final String DFA38_specialS =
        "\2\uffff\1\0\2\uffff}>";
    static final String[] DFA38_transitionS = {
            "\1\3\1\2\1\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4\3"+
            "\3\uffff\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2"+
            "\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\3\1\2\1\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4"+
            "\3\3\uffff\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff"+
            "\2\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
    static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
    static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
    static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
    static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
    static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
    static final short[][] DFA38_transition;

    static {
        int numStates = DFA38_transitionS.length;
        DFA38_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;
        }
        public String getDescription() {
            return "383:26: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA38_2 = input.LA(1);

                         
                        int index38_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Css3()) ) {s = 4;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index38_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 38, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA46_eotS =
        "\63\uffff";
    static final String DFA46_eofS =
        "\63\uffff";
    static final String DFA46_minS =
        "\1\4\23\0\7\uffff\1\0\3\uffff\6\0\16\uffff";
    static final String DFA46_maxS =
        "\1\160\23\0\7\uffff\1\0\3\uffff\6\0\16\uffff";
    static final String DFA46_acceptS =
        "\24\uffff\1\13\20\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1"+
        "\12\1\14\1\15\1\16\1\17";
    static final String DFA46_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\7\uffff\1\23\3\uffff\1\24\1\25\1"+
        "\26\1\27\1\30\1\31\16\uffff}>";
    static final String[] DFA46_transitionS = {
            "\1\44\1\uffff\1\6\2\uffff\1\44\1\21\1\24\3\uffff\1\43\6\uffff"+
            "\1\10\1\24\1\42\1\40\3\uffff\1\41\1\uffff\1\23\1\44\1\37\20"+
            "\44\1\uffff\1\33\1\24\1\22\2\24\1\5\1\7\1\1\3\24\1\4\1\24\1"+
            "\uffff\1\24\6\uffff\1\24\1\12\20\uffff\1\20\1\2\1\3\1\11\2\13"+
            "\1\14\1\44\1\15\2\44\1\16\1\17\11\uffff\1\24",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "389:1: mediaBodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | {...}? sass_extend | {...}? sass_debug | {...}? sass_control | {...}? sass_content | {...}? importItem | rule | page | fontFace | vendorAtRule | media );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA46_1 = input.LA(1);

                         
                        int index46_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 37;}

                        else if ( (((synpred6_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 38;}

                        else if ( (((synpred7_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( ((synpred8_Css3()||(synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 40;}

                        else if ( ((synpred9_Css3()||(synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 41;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index46_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA46_2 = input.LA(1);

                         
                        int index46_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 37;}

                        else if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                         
                        input.seek(index46_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA46_3 = input.LA(1);

                         
                        int index46_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 38;}

                        else if ( (((synpred7_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 39;}

                        else if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                         
                        input.seek(index46_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA46_4 = input.LA(1);

                         
                        int index46_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred8_Css3()||(synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 40;}

                        else if ( ((synpred9_Css3()||(synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 41;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index46_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA46_5 = input.LA(1);

                         
                        int index46_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred8_Css3()||(synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 40;}

                        else if ( ((synpred9_Css3()||(synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 41;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index46_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA46_6 = input.LA(1);

                         
                        int index46_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred8_Css3()||(synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 40;}

                        else if ( ((synpred9_Css3()||(synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 41;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index46_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA46_7 = input.LA(1);

                         
                        int index46_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred8_Css3()||(synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 40;}

                        else if ( ((synpred9_Css3()||(synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 41;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index46_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA46_8 = input.LA(1);

                         
                        int index46_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred8_Css3()||(synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 40;}

                        else if ( ((synpred9_Css3()||(synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 41;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index46_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA46_9 = input.LA(1);

                         
                        int index46_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 42;}

                         
                        input.seek(index46_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA46_10 = input.LA(1);

                         
                        int index46_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 40;}

                        else if ( (((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 41;}

                         
                        input.seek(index46_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA46_11 = input.LA(1);

                         
                        int index46_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 43;}

                         
                        input.seek(index46_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA46_12 = input.LA(1);

                         
                        int index46_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 44;}

                         
                        input.seek(index46_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA46_13 = input.LA(1);

                         
                        int index46_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 44;}

                         
                        input.seek(index46_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA46_14 = input.LA(1);

                         
                        int index46_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 44;}

                         
                        input.seek(index46_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA46_15 = input.LA(1);

                         
                        int index46_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 44;}

                         
                        input.seek(index46_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA46_16 = input.LA(1);

                         
                        int index46_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 45;}

                         
                        input.seek(index46_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA46_17 = input.LA(1);

                         
                        int index46_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 46;}

                         
                        input.seek(index46_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA46_18 = input.LA(1);

                         
                        int index46_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index46_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA46_19 = input.LA(1);

                         
                        int index46_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (true) ) {s = 47;}

                         
                        input.seek(index46_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA46_27 = input.LA(1);

                         
                        int index46_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred8_Css3()||(synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 40;}

                        else if ( ((synpred9_Css3()||(synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 41;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index46_27);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA46_31 = input.LA(1);

                         
                        int index46_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index46_31);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA46_32 = input.LA(1);

                         
                        int index46_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (true) ) {s = 49;}

                         
                        input.seek(index46_32);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA46_33 = input.LA(1);

                         
                        int index46_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (true) ) {s = 49;}

                         
                        input.seek(index46_33);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA46_34 = input.LA(1);

                         
                        int index46_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (true) ) {s = 49;}

                         
                        input.seek(index46_34);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA46_35 = input.LA(1);

                         
                        int index46_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index46_35);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA46_36 = input.LA(1);

                         
                        int index46_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                         
                        input.seek(index46_36);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA43_eotS =
        "\4\uffff";
    static final String DFA43_eofS =
        "\4\uffff";
    static final String DFA43_minS =
        "\2\4\2\uffff";
    static final String DFA43_maxS =
        "\2\160\2\uffff";
    static final String DFA43_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA43_specialS =
        "\4\uffff}>";
    static final String[] DFA43_transitionS = {
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\1\2\3\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\1\2\3\uffff\4\3\3"+
            "\uffff\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3"+
            "\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_eotS);
    static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_eofS);
    static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_minS);
    static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_maxS);
    static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_acceptS);
    static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_specialS);
    static final short[][] DFA43_transition;

    static {
        int numStates = DFA43_transitionS.length;
        DFA43_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA43_transition[i] = DFA.unpackEncodedString(DFA43_transitionS[i]);
        }
    }

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;
        }
        public String getDescription() {
            return "393:87: ( ( ws )? IMPORTANT_SYM )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA45_eotS =
        "\4\uffff";
    static final String DFA45_eofS =
        "\4\uffff";
    static final String DFA45_minS =
        "\2\4\2\uffff";
    static final String DFA45_maxS =
        "\2\160\2\uffff";
    static final String DFA45_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA45_specialS =
        "\4\uffff}>";
    static final String[] DFA45_transitionS = {
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\1\2\3\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\1\2\3\uffff\4\3\3"+
            "\uffff\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3"+
            "\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "394:57: ( ( ws )? IMPORTANT_SYM )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA49_eotS =
        "\57\uffff";
    static final String DFA49_eofS =
        "\1\2\56\uffff";
    static final String DFA49_minS =
        "\1\4\1\0\36\uffff\1\0\16\uffff";
    static final String DFA49_maxS =
        "\1\160\1\0\36\uffff\1\0\16\uffff";
    static final String DFA49_acceptS =
        "\2\uffff\1\2\53\uffff\1\1";
    static final String DFA49_specialS =
        "\1\uffff\1\0\36\uffff\1\1\16\uffff}>";
    static final String[] DFA49_transitionS = {
            "\3\2\2\uffff\2\2\1\40\3\uffff\3\2\4\uffff\4\2\3\uffff\1\2\1"+
            "\uffff\23\2\1\uffff\15\2\1\uffff\1\2\6\uffff\2\2\14\uffff\3"+
            "\1\1\uffff\15\2\11\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "()* loopback of 411:15: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA49_1 = input.LA(1);

                         
                        int index49_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_Css3()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA49_32 = input.LA(1);

                         
                        int index49_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_Css3()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA54_eotS =
        "\4\uffff";
    static final String DFA54_eofS =
        "\2\2\2\uffff";
    static final String DFA54_minS =
        "\2\4\2\uffff";
    static final String DFA54_maxS =
        "\2\160\2\uffff";
    static final String DFA54_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA54_specialS =
        "\4\uffff}>";
    static final String[] DFA54_transitionS = {
            "\3\2\2\uffff\3\2\3\uffff\3\2\1\uffff\1\3\2\uffff\4\2\3\uffff"+
            "\1\2\1\uffff\23\2\1\uffff\15\2\1\uffff\1\2\6\uffff\2\2\14\uffff"+
            "\3\1\1\uffff\15\2\11\uffff\1\2",
            "\3\2\2\uffff\3\2\3\uffff\3\2\1\uffff\1\3\2\uffff\4\2\3\uffff"+
            "\1\2\1\uffff\23\2\1\uffff\15\2\1\uffff\1\2\6\uffff\2\2\14\uffff"+
            "\3\1\1\uffff\15\2\11\uffff\1\2",
            "",
            ""
    };

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "()* loopback of 416:43: ( ( ws )? AND ( ws )? mediaExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA57_eotS =
        "\4\uffff";
    static final String DFA57_eofS =
        "\2\2\2\uffff";
    static final String DFA57_minS =
        "\2\4\2\uffff";
    static final String DFA57_maxS =
        "\2\160\2\uffff";
    static final String DFA57_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA57_specialS =
        "\4\uffff}>";
    static final String[] DFA57_transitionS = {
            "\3\2\2\uffff\3\2\3\uffff\3\2\1\uffff\1\3\2\uffff\4\2\3\uffff"+
            "\1\2\1\uffff\23\2\1\uffff\15\2\1\uffff\1\2\6\uffff\2\2\14\uffff"+
            "\3\1\1\uffff\15\2\11\uffff\1\2",
            "\3\2\2\uffff\3\2\3\uffff\3\2\1\uffff\1\3\2\uffff\4\2\3\uffff"+
            "\1\2\1\uffff\23\2\1\uffff\15\2\1\uffff\1\2\6\uffff\2\2\14\uffff"+
            "\3\1\1\uffff\15\2\11\uffff\1\2",
            "",
            ""
    };

    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
    static final short[][] DFA57_transition;

    static {
        int numStates = DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
        }
    }

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }
        public String getDescription() {
            return "()* loopback of 417:23: ( ( ws )? AND ( ws )? mediaExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA61_eotS =
        "\4\uffff";
    static final String DFA61_eofS =
        "\4\uffff";
    static final String DFA61_minS =
        "\2\16\2\uffff";
    static final String DFA61_maxS =
        "\2\130\2\uffff";
    static final String DFA61_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA61_specialS =
        "\4\uffff}>";
    static final String[] DFA61_transitionS = {
            "\1\3\10\uffff\1\2\76\uffff\3\1",
            "\1\3\10\uffff\1\2\76\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
    static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
    static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_minS);
    static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_maxS);
    static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
    static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
    static final short[][] DFA61_transition;

    static {
        int numStates = DFA61_transitionS.length;
        DFA61_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
        }
    }

    class DFA61 extends DFA {

        public DFA61(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = DFA61_eot;
            this.eof = DFA61_eof;
            this.min = DFA61_min;
            this.max = DFA61_max;
            this.accept = DFA61_accept;
            this.special = DFA61_special;
            this.transition = DFA61_transition;
        }
        public String getDescription() {
            return "431:29: ( mediaFeatureValue )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA65_eotS =
        "\34\uffff";
    static final String DFA65_eofS =
        "\34\uffff";
    static final String DFA65_minS =
        "\1\4\1\uffff\27\0\3\uffff";
    static final String DFA65_maxS =
        "\1\146\1\uffff\27\0\3\uffff";
    static final String DFA65_acceptS =
        "\1\uffff\1\1\31\uffff\1\2";
    static final String DFA65_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\3\uffff}>";
    static final String[] DFA65_transitionS = {
            "\1\25\1\uffff\1\3\1\17\1\23\2\25\1\uffff\1\1\2\uffff\1\25\2"+
            "\uffff\1\1\2\uffff\1\1\1\22\1\uffff\2\25\3\uffff\1\25\1\5\23"+
            "\25\1\uffff\2\2\1\25\1\uffff\1\20\1\27\1\24\17\uffff\1\26\1"+
            "\4\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\21\1\30\4\uffff"+
            "\15\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA65_eot = DFA.unpackEncodedString(DFA65_eotS);
    static final short[] DFA65_eof = DFA.unpackEncodedString(DFA65_eofS);
    static final char[] DFA65_min = DFA.unpackEncodedStringToUnsignedChars(DFA65_minS);
    static final char[] DFA65_max = DFA.unpackEncodedStringToUnsignedChars(DFA65_maxS);
    static final short[] DFA65_accept = DFA.unpackEncodedString(DFA65_acceptS);
    static final short[] DFA65_special = DFA.unpackEncodedString(DFA65_specialS);
    static final short[][] DFA65_transition;

    static {
        int numStates = DFA65_transitionS.length;
        DFA65_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA65_transition[i] = DFA.unpackEncodedString(DFA65_transitionS[i]);
        }
    }

    class DFA65 extends DFA {

        public DFA65(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = DFA65_eot;
            this.eof = DFA65_eof;
            this.min = DFA65_min;
            this.max = DFA65_max;
            this.accept = DFA65_accept;
            this.special = DFA65_special;
            this.transition = DFA65_transition;
        }
        public String getDescription() {
            return "437:5: ({...}? cp_expression | expression )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA65_2 = input.LA(1);

                         
                        int index65_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA65_3 = input.LA(1);

                         
                        int index65_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA65_4 = input.LA(1);

                         
                        int index65_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA65_5 = input.LA(1);

                         
                        int index65_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA65_6 = input.LA(1);

                         
                        int index65_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA65_7 = input.LA(1);

                         
                        int index65_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA65_8 = input.LA(1);

                         
                        int index65_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA65_9 = input.LA(1);

                         
                        int index65_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA65_10 = input.LA(1);

                         
                        int index65_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA65_11 = input.LA(1);

                         
                        int index65_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA65_12 = input.LA(1);

                         
                        int index65_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA65_13 = input.LA(1);

                         
                        int index65_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA65_14 = input.LA(1);

                         
                        int index65_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA65_15 = input.LA(1);

                         
                        int index65_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA65_16 = input.LA(1);

                         
                        int index65_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA65_17 = input.LA(1);

                         
                        int index65_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA65_18 = input.LA(1);

                         
                        int index65_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA65_19 = input.LA(1);

                         
                        int index65_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA65_20 = input.LA(1);

                         
                        int index65_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA65_21 = input.LA(1);

                         
                        int index65_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 27;}

                         
                        input.seek(index65_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA65_22 = input.LA(1);

                         
                        int index65_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 27;}

                         
                        input.seek(index65_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA65_23 = input.LA(1);

                         
                        int index65_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 27;}

                         
                        input.seek(index65_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA65_24 = input.LA(1);

                         
                        int index65_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 27;}

                         
                        input.seek(index65_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 65, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA69_eotS =
        "\5\uffff";
    static final String DFA69_eofS =
        "\2\3\3\uffff";
    static final String DFA69_minS =
        "\2\4\1\0\2\uffff";
    static final String DFA69_maxS =
        "\2\160\1\0\2\uffff";
    static final String DFA69_acceptS =
        "\3\uffff\1\2\1\1";
    static final String DFA69_specialS =
        "\2\uffff\1\0\2\uffff}>";
    static final String[] DFA69_transitionS = {
            "\1\3\1\2\1\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4\3"+
            "\3\uffff\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2"+
            "\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\3\1\2\1\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4"+
            "\3\3\uffff\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff"+
            "\2\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA69_eot = DFA.unpackEncodedString(DFA69_eotS);
    static final short[] DFA69_eof = DFA.unpackEncodedString(DFA69_eofS);
    static final char[] DFA69_min = DFA.unpackEncodedStringToUnsignedChars(DFA69_minS);
    static final char[] DFA69_max = DFA.unpackEncodedStringToUnsignedChars(DFA69_maxS);
    static final short[] DFA69_accept = DFA.unpackEncodedString(DFA69_acceptS);
    static final short[] DFA69_special = DFA.unpackEncodedString(DFA69_specialS);
    static final short[][] DFA69_transition;

    static {
        int numStates = DFA69_transitionS.length;
        DFA69_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA69_transition[i] = DFA.unpackEncodedString(DFA69_transitionS[i]);
        }
    }

    class DFA69 extends DFA {

        public DFA69(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;
        }
        public String getDescription() {
            return "451:21: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA69_2 = input.LA(1);

                         
                        int index69_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_Css3()) ) {s = 4;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 69, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA73_eotS =
        "\56\uffff";
    static final String DFA73_eofS =
        "\56\uffff";
    static final String DFA73_minS =
        "\1\4\4\0\17\uffff\20\0\12\uffff";
    static final String DFA73_maxS =
        "\1\160\4\0\17\uffff\20\0\12\uffff";
    static final String DFA73_acceptS =
        "\5\uffff\1\4\36\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13";
    static final String DFA73_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\17\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\12\uffff}>";
    static final String[] DFA73_transitionS = {
            "\1\43\1\uffff\1\5\2\uffff\1\43\1\34\1\5\3\uffff\1\24\6\uffff"+
            "\2\5\1\33\1\31\3\uffff\1\32\1\uffff\1\26\1\27\1\30\20\43\1\uffff"+
            "\2\5\1\4\4\5\1\1\5\5\1\uffff\1\5\6\uffff\1\5\1\25\20\uffff\1"+
            "\43\1\2\1\3\1\43\2\35\1\36\1\43\1\37\1\42\1\43\1\40\1\41\11"+
            "\uffff\1\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA73_eot = DFA.unpackEncodedString(DFA73_eotS);
    static final short[] DFA73_eof = DFA.unpackEncodedString(DFA73_eofS);
    static final char[] DFA73_min = DFA.unpackEncodedStringToUnsignedChars(DFA73_minS);
    static final char[] DFA73_max = DFA.unpackEncodedStringToUnsignedChars(DFA73_maxS);
    static final short[] DFA73_accept = DFA.unpackEncodedString(DFA73_acceptS);
    static final short[] DFA73_special = DFA.unpackEncodedString(DFA73_specialS);
    static final short[][] DFA73_transition;

    static {
        int numStates = DFA73_transitionS.length;
        DFA73_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA73_transition[i] = DFA.unpackEncodedString(DFA73_transitionS[i]);
        }
    }

    class DFA73 extends DFA {

        public DFA73(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = DFA73_eot;
            this.eof = DFA73_eof;
            this.min = DFA73_min;
            this.max = DFA73_max;
            this.accept = DFA73_accept;
            this.special = DFA73_special;
            this.transition = DFA73_transition;
        }
        public String getDescription() {
            return "457:1: bodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call | ( cp_mixin_call )=>{...}? cp_mixin_call | rule | ( sass_map )=> sass_map | ( cp_variable ( ws )? COLON )=> cp_variable_declaration | at_rule | {...}? importItem | {...}? sass_debug | {...}? sass_control | {...}? sass_function_declaration );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA73_1 = input.LA(1);

                         
                        int index73_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred12_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 36;}

                        else if ( (((synpred13_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 37;}

                        else if ( (((synpred14_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 38;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index73_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA73_2 = input.LA(1);

                         
                        int index73_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred12_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 36;}

                        else if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                         
                        input.seek(index73_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA73_3 = input.LA(1);

                         
                        int index73_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred13_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 37;}

                        else if ( (((synpred14_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 38;}

                        else if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                         
                        input.seek(index73_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA73_4 = input.LA(1);

                         
                        int index73_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 5;}

                        else if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                         
                        input.seek(index73_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA73_20 = input.LA(1);

                         
                        int index73_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (true) ) {s = 41;}

                         
                        input.seek(index73_20);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA73_21 = input.LA(1);

                         
                        int index73_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 39;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 40;}

                         
                        input.seek(index73_21);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA73_22 = input.LA(1);

                         
                        int index73_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (true) ) {s = 41;}

                         
                        input.seek(index73_22);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA73_23 = input.LA(1);

                         
                        int index73_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (true) ) {s = 41;}

                         
                        input.seek(index73_23);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA73_24 = input.LA(1);

                         
                        int index73_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (true) ) {s = 41;}

                         
                        input.seek(index73_24);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA73_25 = input.LA(1);

                         
                        int index73_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (true) ) {s = 41;}

                         
                        input.seek(index73_25);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA73_26 = input.LA(1);

                         
                        int index73_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (true) ) {s = 41;}

                         
                        input.seek(index73_26);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA73_27 = input.LA(1);

                         
                        int index73_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (true) ) {s = 41;}

                         
                        input.seek(index73_27);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA73_28 = input.LA(1);

                         
                        int index73_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                         
                        input.seek(index73_28);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA73_29 = input.LA(1);

                         
                        int index73_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 43;}

                         
                        input.seek(index73_29);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA73_30 = input.LA(1);

                         
                        int index73_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 44;}

                         
                        input.seek(index73_30);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA73_31 = input.LA(1);

                         
                        int index73_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 44;}

                         
                        input.seek(index73_31);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA73_32 = input.LA(1);

                         
                        int index73_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 44;}

                         
                        input.seek(index73_32);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA73_33 = input.LA(1);

                         
                        int index73_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 44;}

                         
                        input.seek(index73_33);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA73_34 = input.LA(1);

                         
                        int index73_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 45;}

                         
                        input.seek(index73_34);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA73_35 = input.LA(1);

                         
                        int index73_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                         
                        input.seek(index73_35);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 73, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA96_eotS =
        "\4\uffff";
    static final String DFA96_eofS =
        "\4\uffff";
    static final String DFA96_minS =
        "\2\13\2\uffff";
    static final String DFA96_maxS =
        "\2\130\2\uffff";
    static final String DFA96_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA96_specialS =
        "\4\uffff}>";
    static final String[] DFA96_transitionS = {
            "\1\3\4\uffff\1\2\105\uffff\3\1",
            "\1\3\4\uffff\1\2\105\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA96_eot = DFA.unpackEncodedString(DFA96_eotS);
    static final short[] DFA96_eof = DFA.unpackEncodedString(DFA96_eofS);
    static final char[] DFA96_min = DFA.unpackEncodedStringToUnsignedChars(DFA96_minS);
    static final char[] DFA96_max = DFA.unpackEncodedStringToUnsignedChars(DFA96_maxS);
    static final short[] DFA96_accept = DFA.unpackEncodedString(DFA96_acceptS);
    static final short[] DFA96_special = DFA.unpackEncodedString(DFA96_specialS);
    static final short[][] DFA96_transition;

    static {
        int numStates = DFA96_transitionS.length;
        DFA96_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA96_transition[i] = DFA.unpackEncodedString(DFA96_transitionS[i]);
        }
    }

    class DFA96 extends DFA {

        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;
        }
        public String getDescription() {
            return "()* loopback of 532:25: ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA103_eotS =
        "\5\uffff";
    static final String DFA103_eofS =
        "\5\uffff";
    static final String DFA103_minS =
        "\1\4\1\uffff\2\20\1\uffff";
    static final String DFA103_maxS =
        "\1\146\1\uffff\2\130\1\uffff";
    static final String DFA103_acceptS =
        "\1\uffff\1\1\2\uffff\1\2";
    static final String DFA103_specialS =
        "\5\uffff}>";
    static final String[] DFA103_transitionS = {
            "\1\1\1\uffff\1\1\2\uffff\2\1\4\uffff\1\1\6\uffff\1\1\1\uffff"+
            "\2\1\3\uffff\1\1\1\uffff\3\1\20\2\1\uffff\1\1\1\uffff\1\1\2"+
            "\uffff\3\1\3\uffff\1\1\12\uffff\1\1\20\uffff\15\1",
            "",
            "\1\4\6\uffff\1\1\76\uffff\3\3",
            "\1\4\6\uffff\1\1\76\uffff\3\3",
            ""
    };

    static final short[] DFA103_eot = DFA.unpackEncodedString(DFA103_eotS);
    static final short[] DFA103_eof = DFA.unpackEncodedString(DFA103_eofS);
    static final char[] DFA103_min = DFA.unpackEncodedStringToUnsignedChars(DFA103_minS);
    static final char[] DFA103_max = DFA.unpackEncodedStringToUnsignedChars(DFA103_maxS);
    static final short[] DFA103_accept = DFA.unpackEncodedString(DFA103_acceptS);
    static final short[] DFA103_special = DFA.unpackEncodedString(DFA103_specialS);
    static final short[][] DFA103_transition;

    static {
        int numStates = DFA103_transitionS.length;
        DFA103_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA103_transition[i] = DFA.unpackEncodedString(DFA103_transitionS[i]);
        }
    }

    class DFA103 extends DFA {

        public DFA103(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 103;
            this.eot = DFA103_eot;
            this.eof = DFA103_eof;
            this.min = DFA103_min;
            this.max = DFA103_max;
            this.accept = DFA103_accept;
            this.special = DFA103_special;
            this.transition = DFA103_transition;
        }
        public String getDescription() {
            return "540:14: ( propertyDeclaration | margin )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA107_eotS =
        "\5\uffff";
    static final String DFA107_eofS =
        "\5\uffff";
    static final String DFA107_minS =
        "\1\4\1\uffff\2\20\1\uffff";
    static final String DFA107_maxS =
        "\1\146\1\uffff\2\130\1\uffff";
    static final String DFA107_acceptS =
        "\1\uffff\1\1\2\uffff\1\2";
    static final String DFA107_specialS =
        "\5\uffff}>";
    static final String[] DFA107_transitionS = {
            "\1\1\1\uffff\1\1\2\uffff\2\1\4\uffff\1\1\6\uffff\1\1\1\uffff"+
            "\2\1\3\uffff\1\1\1\uffff\3\1\20\2\1\uffff\1\1\1\uffff\1\1\2"+
            "\uffff\3\1\3\uffff\1\1\12\uffff\1\1\20\uffff\15\1",
            "",
            "\1\4\6\uffff\1\1\76\uffff\3\3",
            "\1\4\6\uffff\1\1\76\uffff\3\3",
            ""
    };

    static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_eotS);
    static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_eofS);
    static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_minS);
    static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_maxS);
    static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_acceptS);
    static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_specialS);
    static final short[][] DFA107_transition;

    static {
        int numStates = DFA107_transitionS.length;
        DFA107_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA107_transition[i] = DFA.unpackEncodedString(DFA107_transitionS[i]);
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;
        }
        public String getDescription() {
            return "540:60: ( propertyDeclaration | margin )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA126_eotS =
        "\5\uffff";
    static final String DFA126_eofS =
        "\5\uffff";
    static final String DFA126_minS =
        "\2\4\1\0\2\uffff";
    static final String DFA126_maxS =
        "\2\146\1\0\2\uffff";
    static final String DFA126_acceptS =
        "\3\uffff\1\2\1\1";
    static final String DFA126_specialS =
        "\2\uffff\1\0\2\uffff}>";
    static final String[] DFA126_transitionS = {
            "\1\3\1\uffff\1\3\2\uffff\2\3\1\2\2\uffff\2\3\6\uffff\1\3\1\uffff"+
            "\2\3\3\uffff\1\3\1\uffff\23\3\1\uffff\1\3\1\uffff\1\3\2\uffff"+
            "\3\3\16\uffff\1\3\14\uffff\3\1\1\uffff\15\3",
            "\1\3\1\uffff\1\3\2\uffff\2\3\1\2\2\uffff\2\3\6\uffff\1\3\1"+
            "\uffff\2\3\3\uffff\1\3\1\uffff\23\3\1\uffff\1\3\1\uffff\1\3"+
            "\2\uffff\3\3\16\uffff\1\3\14\uffff\3\1\1\uffff\15\3",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA126_eot = DFA.unpackEncodedString(DFA126_eotS);
    static final short[] DFA126_eof = DFA.unpackEncodedString(DFA126_eofS);
    static final char[] DFA126_min = DFA.unpackEncodedStringToUnsignedChars(DFA126_minS);
    static final char[] DFA126_max = DFA.unpackEncodedStringToUnsignedChars(DFA126_maxS);
    static final short[] DFA126_accept = DFA.unpackEncodedString(DFA126_acceptS);
    static final short[] DFA126_special = DFA.unpackEncodedString(DFA126_specialS);
    static final short[][] DFA126_transition;

    static {
        int numStates = DFA126_transitionS.length;
        DFA126_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA126_transition[i] = DFA.unpackEncodedString(DFA126_transitionS[i]);
        }
    }

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = DFA126_eot;
            this.eof = DFA126_eof;
            this.min = DFA126_min;
            this.max = DFA126_max;
            this.accept = DFA126_accept;
            this.special = DFA126_special;
            this.transition = DFA126_transition;
        }
        public String getDescription() {
            return "627:26: ( ( ( ws )? COMMA )=> ( ws )? COMMA )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA126_2 = input.LA(1);

                         
                        int index126_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_Css3()) ) {s = 4;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index126_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 126, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA133_eotS =
        "\4\uffff";
    static final String DFA133_eofS =
        "\4\uffff";
    static final String DFA133_minS =
        "\2\4\2\uffff";
    static final String DFA133_maxS =
        "\2\146\2\uffff";
    static final String DFA133_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA133_specialS =
        "\4\uffff}>";
    static final String[] DFA133_transitionS = {
            "\1\3\1\uffff\1\3\2\uffff\3\3\2\uffff\2\3\2\uffff\1\2\3\uffff"+
            "\1\3\1\uffff\2\3\3\uffff\1\3\1\uffff\23\3\1\uffff\1\3\1\uffff"+
            "\1\3\2\uffff\3\3\16\uffff\1\3\14\uffff\3\1\1\uffff\15\3",
            "\1\3\1\uffff\1\3\2\uffff\3\3\2\uffff\2\3\2\uffff\1\2\3\uffff"+
            "\1\3\1\uffff\2\3\3\uffff\1\3\1\uffff\23\3\1\uffff\1\3\1\uffff"+
            "\1\3\2\uffff\3\3\16\uffff\1\3\14\uffff\3\1\1\uffff\15\3",
            "",
            ""
    };

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "635:46: ( ( ws )? prio )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA134_eotS =
        "\4\uffff";
    static final String DFA134_eofS =
        "\4\uffff";
    static final String DFA134_minS =
        "\1\20\1\6\2\uffff";
    static final String DFA134_maxS =
        "\1\130\1\160\2\uffff";
    static final String DFA134_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA134_specialS =
        "\4\uffff}>";
    static final String[] DFA134_transitionS = {
            "\1\2\105\uffff\3\1",
            "\1\3\4\uffff\1\3\4\uffff\1\2\5\uffff\2\3\33\uffff\2\3\1\uffff"+
            "\12\3\1\uffff\1\3\6\uffff\1\3\15\uffff\3\1\27\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "640:20: ( ws selectorsGroup )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA140_eotS =
        "\5\uffff";
    static final String DFA140_eofS =
        "\5\uffff";
    static final String DFA140_minS =
        "\2\4\1\0\2\uffff";
    static final String DFA140_maxS =
        "\2\160\1\0\2\uffff";
    static final String DFA140_acceptS =
        "\3\uffff\1\2\1\1";
    static final String DFA140_specialS =
        "\2\uffff\1\0\2\uffff}>";
    static final String[] DFA140_transitionS = {
            "\1\3\1\2\1\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4\3"+
            "\3\uffff\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2"+
            "\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\3\1\2\1\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4"+
            "\3\3\uffff\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff"+
            "\2\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA140_eot = DFA.unpackEncodedString(DFA140_eotS);
    static final short[] DFA140_eof = DFA.unpackEncodedString(DFA140_eofS);
    static final char[] DFA140_min = DFA.unpackEncodedStringToUnsignedChars(DFA140_minS);
    static final char[] DFA140_max = DFA.unpackEncodedStringToUnsignedChars(DFA140_maxS);
    static final short[] DFA140_accept = DFA.unpackEncodedString(DFA140_acceptS);
    static final short[] DFA140_special = DFA.unpackEncodedString(DFA140_specialS);
    static final short[][] DFA140_transition;

    static {
        int numStates = DFA140_transitionS.length;
        DFA140_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA140_transition[i] = DFA.unpackEncodedString(DFA140_transitionS[i]);
        }
    }

    class DFA140 extends DFA {

        public DFA140(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = DFA140_eot;
            this.eof = DFA140_eof;
            this.min = DFA140_min;
            this.max = DFA140_max;
            this.accept = DFA140_accept;
            this.special = DFA140_special;
            this.transition = DFA140_transition;
        }
        public String getDescription() {
            return "654:24: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA140_2 = input.LA(1);

                         
                        int index140_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_Css3()) ) {s = 4;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index140_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 140, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA148_eotS =
        "\67\uffff";
    static final String DFA148_eofS =
        "\67\uffff";
    static final String DFA148_minS =
        "\1\4\13\0\7\uffff\1\0\3\uffff\20\0\20\uffff";
    static final String DFA148_maxS =
        "\1\160\13\0\7\uffff\1\0\3\uffff\20\0\20\uffff";
    static final String DFA148_acceptS =
        "\14\uffff\7\11\1\uffff\3\11\20\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
        "\1\10\1\21\1\12\1\13\1\14\1\15\1\16\1\17\1\20";
    static final String DFA148_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\7\uffff\1\14"+
        "\3\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
        "\1\30\1\31\1\32\1\33\1\34\20\uffff}>";
    static final String[] DFA148_transitionS = {
            "\1\46\1\uffff\1\4\2\uffff\1\46\1\45\1\25\3\uffff\1\13\6\uffff"+
            "\1\6\1\24\1\34\1\32\3\uffff\1\33\1\uffff\1\27\1\30\1\31\20\46"+
            "\1\uffff\1\23\1\16\1\12\1\14\1\16\1\3\1\10\1\5\1\20\1\26\1\21"+
            "\1\7\1\17\1\uffff\1\15\6\uffff\1\25\1\2\20\uffff\1\43\1\1\1"+
            "\11\1\41\2\42\1\35\1\46\1\36\1\46\1\44\1\37\1\40\11\uffff\1"+
            "\22",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA148_eot = DFA.unpackEncodedString(DFA148_eotS);
    static final short[] DFA148_eof = DFA.unpackEncodedString(DFA148_eofS);
    static final char[] DFA148_min = DFA.unpackEncodedStringToUnsignedChars(DFA148_minS);
    static final char[] DFA148_max = DFA.unpackEncodedStringToUnsignedChars(DFA148_maxS);
    static final short[] DFA148_accept = DFA.unpackEncodedString(DFA148_acceptS);
    static final short[] DFA148_special = DFA.unpackEncodedString(DFA148_specialS);
    static final short[][] DFA148_transition;

    static {
        int numStates = DFA148_transitionS.length;
        DFA148_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA148_transition[i] = DFA.unpackEncodedString(DFA148_transitionS[i]);
        }
    }

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = DFA148_eot;
            this.eof = DFA148_eof;
            this.min = DFA148_min;
            this.max = DFA148_max;
            this.accept = DFA148_accept;
            this.special = DFA148_special;
            this.transition = DFA148_transition;
        }
        public String getDescription() {
            return "660:1: declaration : ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_map )=> sass_map | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | selectorsGroup ) ( ws )? LBRACE )=> rule | {...}? at_rule | {...}? sass_control | {...}? sass_extend | {...}? sass_debug | {...}? sass_content | {...}? sass_function_return | {...}? importItem | GEN );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA148_0 = input.LA(1);

                         
                        int index148_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA148_0==SASS_MIXIN) ) {s = 1;}

                        else if ( (LA148_0==SASS_VAR) ) {s = 2;}

                        else if ( (LA148_0==HASH_SYMBOL) ) {s = 3;}

                        else if ( (LA148_0==IDENT) ) {s = 4;}

                        else if ( (LA148_0==DOT) ) {s = 5;}

                        else if ( (LA148_0==GEN) ) {s = 6;}

                        else if ( (LA148_0==STAR) ) {s = 7;}

                        else if ( (LA148_0==HASH) ) {s = 8;}

                        else if ( (LA148_0==SASS_INCLUDE) ) {s = 9;}

                        else if ( (LA148_0==SASS_AT_ROOT) ) {s = 10;}

                        else if ( (LA148_0==MEDIA_SYM) ) {s = 11;}

                        else if ( (LA148_0==GREATER) && (synpred28_Css3())) {s = 12;}

                        else if ( (LA148_0==LESS_AND) && (synpred28_Css3())) {s = 13;}

                        else if ( (LA148_0==PLUS||LA148_0==TILDE) && (synpred28_Css3())) {s = 14;}

                        else if ( (LA148_0==PIPE) && (synpred28_Css3())) {s = 15;}

                        else if ( (LA148_0==LBRACKET) && (synpred28_Css3())) {s = 16;}

                        else if ( (LA148_0==SASS_EXTEND_ONLY_SELECTOR) && (synpred28_Css3())) {s = 17;}

                        else if ( (LA148_0==AT_SIGN) && (synpred28_Css3())) {s = 18;}

                        else if ( (LA148_0==MINUS) ) {s = 19;}

                        else if ( (LA148_0==COLON) && (synpred28_Css3())) {s = 20;}

                        else if ( (LA148_0==COMMA||LA148_0==RBRACKET) && (synpred28_Css3())) {s = 21;}

                        else if ( (LA148_0==DCOLON) && (synpred28_Css3())) {s = 22;}

                        else if ( (LA148_0==PAGE_SYM) ) {s = 23;}

                        else if ( (LA148_0==COUNTER_STYLE_SYM) ) {s = 24;}

                        else if ( (LA148_0==FONT_FACE_SYM) ) {s = 25;}

                        else if ( (LA148_0==MOZ_DOCUMENT_SYM) ) {s = 26;}

                        else if ( (LA148_0==WEBKIT_KEYFRAMES_SYM) ) {s = 27;}

                        else if ( (LA148_0==AT_IDENT) ) {s = 28;}

                        else if ( (LA148_0==SASS_IF) ) {s = 29;}

                        else if ( (LA148_0==SASS_FOR) ) {s = 30;}

                        else if ( (LA148_0==SASS_EACH) ) {s = 31;}

                        else if ( (LA148_0==SASS_WHILE) ) {s = 32;}

                        else if ( (LA148_0==SASS_EXTEND) ) {s = 33;}

                        else if ( ((LA148_0>=SASS_DEBUG && LA148_0<=SASS_WARN)) ) {s = 34;}

                        else if ( (LA148_0==SASS_CONTENT) ) {s = 35;}

                        else if ( (LA148_0==SASS_RETURN) ) {s = 36;}

                        else if ( (LA148_0==IMPORT_SYM) ) {s = 37;}

                        else if ( (LA148_0==NAMESPACE_SYM||LA148_0==CHARSET_SYM||(LA148_0>=TOPLEFTCORNER_SYM && LA148_0<=RIGHTBOTTOM_SYM)||LA148_0==SASS_ELSE||LA148_0==SASS_FUNCTION) ) {s = 38;}

                         
                        input.seek(index148_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA148_1 = input.LA(1);

                         
                        int index148_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 41;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( ((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 43;}

                        else if ( ((synpred25_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 44;}

                         
                        input.seek(index148_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA148_2 = input.LA(1);

                         
                        int index148_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 39;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 40;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 41;}

                        else if ( (((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 42;}

                        else if ( ((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||(((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 43;}

                         
                        input.seek(index148_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA148_3 = input.LA(1);

                         
                        int index148_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 41;}

                        else if ( ((synpred23_Css3()||(synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 42;}

                        else if ( (((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred24_Css3())) ) {s = 43;}

                        else if ( (synpred28_Css3()) ) {s = 22;}

                         
                        input.seek(index148_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA148_4 = input.LA(1);

                         
                        int index148_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 41;}

                        else if ( ((synpred23_Css3()||(synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 42;}

                        else if ( (((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred24_Css3())) ) {s = 43;}

                        else if ( (synpred28_Css3()) ) {s = 22;}

                         
                        input.seek(index148_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA148_5 = input.LA(1);

                         
                        int index148_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 41;}

                        else if ( ((synpred23_Css3()||(synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 42;}

                        else if ( (((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred24_Css3())) ) {s = 43;}

                        else if ( ((synpred25_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 44;}

                        else if ( (((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 45;}

                        else if ( (((synpred27_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 46;}

                        else if ( (synpred28_Css3()) ) {s = 22;}

                         
                        input.seek(index148_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA148_6 = input.LA(1);

                         
                        int index148_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 41;}

                        else if ( ((synpred23_Css3()||(synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 42;}

                        else if ( (((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred24_Css3())) ) {s = 43;}

                        else if ( (synpred28_Css3()) ) {s = 22;}

                        else if ( (true) ) {s = 47;}

                         
                        input.seek(index148_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA148_7 = input.LA(1);

                         
                        int index148_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred23_Css3()||(synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 42;}

                        else if ( (((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred24_Css3())) ) {s = 43;}

                        else if ( (synpred28_Css3()) ) {s = 22;}

                         
                        input.seek(index148_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA148_8 = input.LA(1);

                         
                        int index148_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 41;}

                        else if ( ((synpred23_Css3()||(synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 42;}

                        else if ( (((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred24_Css3())) ) {s = 43;}

                        else if ( (synpred28_Css3()) ) {s = 22;}

                         
                        input.seek(index148_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA148_9 = input.LA(1);

                         
                        int index148_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 41;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( ((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 43;}

                        else if ( (((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 45;}

                        else if ( (((synpred27_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 46;}

                         
                        input.seek(index148_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA148_10 = input.LA(1);

                         
                        int index148_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 41;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( ((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 43;}

                        else if ( (synpred28_Css3()) ) {s = 22;}

                         
                        input.seek(index148_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA148_11 = input.LA(1);

                         
                        int index148_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 41;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( ((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 43;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 48;}

                         
                        input.seek(index148_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA148_19 = input.LA(1);

                         
                        int index148_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 41;}

                        else if ( ((synpred23_Css3()||(synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 42;}

                        else if ( (((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred24_Css3())) ) {s = 43;}

                        else if ( (synpred28_Css3()) ) {s = 22;}

                         
                        input.seek(index148_19);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA148_23 = input.LA(1);

                         
                        int index148_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 41;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( ((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 43;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 48;}

                         
                        input.seek(index148_23);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA148_24 = input.LA(1);

                         
                        int index148_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 41;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( ((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 43;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 48;}

                         
                        input.seek(index148_24);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA148_25 = input.LA(1);

                         
                        int index148_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 41;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( ((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 43;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 48;}

                         
                        input.seek(index148_25);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA148_26 = input.LA(1);

                         
                        int index148_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 41;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( ((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 43;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 48;}

                         
                        input.seek(index148_26);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA148_27 = input.LA(1);

                         
                        int index148_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 41;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( ((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 43;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 48;}

                         
                        input.seek(index148_27);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA148_28 = input.LA(1);

                         
                        int index148_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 41;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( ((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 43;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 48;}

                         
                        input.seek(index148_28);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA148_29 = input.LA(1);

                         
                        int index148_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 41;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( ((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 43;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 49;}

                         
                        input.seek(index148_29);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA148_30 = input.LA(1);

                         
                        int index148_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 41;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( ((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 43;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 49;}

                         
                        input.seek(index148_30);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA148_31 = input.LA(1);

                         
                        int index148_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 41;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( ((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 43;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 49;}

                         
                        input.seek(index148_31);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA148_32 = input.LA(1);

                         
                        int index148_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 41;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( ((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 43;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 49;}

                         
                        input.seek(index148_32);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA148_33 = input.LA(1);

                         
                        int index148_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 41;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( ((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 43;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 50;}

                         
                        input.seek(index148_33);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA148_34 = input.LA(1);

                         
                        int index148_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 41;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( ((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 43;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 51;}

                         
                        input.seek(index148_34);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA148_35 = input.LA(1);

                         
                        int index148_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 41;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( ((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 43;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 52;}

                         
                        input.seek(index148_35);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA148_36 = input.LA(1);

                         
                        int index148_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 41;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( ((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 43;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 53;}

                         
                        input.seek(index148_36);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA148_37 = input.LA(1);

                         
                        int index148_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 41;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( ((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 43;}

                        else if ( (((evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 54;}

                         
                        input.seek(index148_37);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA148_38 = input.LA(1);

                         
                        int index148_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 41;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( ((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 43;}

                         
                        input.seek(index148_38);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 148, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA145_eotS =
        "\4\uffff";
    static final String DFA145_eofS =
        "\4\uffff";
    static final String DFA145_minS =
        "\2\4\2\uffff";
    static final String DFA145_maxS =
        "\2\160\2\uffff";
    static final String DFA145_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA145_specialS =
        "\4\uffff}>";
    static final String[] DFA145_transitionS = {
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\1\2\3\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\1\2\3\uffff\4\3\3"+
            "\uffff\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3"+
            "\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA145_eot = DFA.unpackEncodedString(DFA145_eotS);
    static final short[] DFA145_eof = DFA.unpackEncodedString(DFA145_eofS);
    static final char[] DFA145_min = DFA.unpackEncodedStringToUnsignedChars(DFA145_minS);
    static final char[] DFA145_max = DFA.unpackEncodedStringToUnsignedChars(DFA145_maxS);
    static final short[] DFA145_accept = DFA.unpackEncodedString(DFA145_acceptS);
    static final short[] DFA145_special = DFA.unpackEncodedString(DFA145_specialS);
    static final short[][] DFA145_transition;

    static {
        int numStates = DFA145_transitionS.length;
        DFA145_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA145_transition[i] = DFA.unpackEncodedString(DFA145_transitionS[i]);
        }
    }

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = DFA145_eot;
            this.eof = DFA145_eof;
            this.min = DFA145_min;
            this.max = DFA145_max;
            this.accept = DFA145_accept;
            this.special = DFA145_special;
            this.transition = DFA145_transition;
        }
        public String getDescription() {
            return "670:87: ( ( ws )? IMPORTANT_SYM )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA147_eotS =
        "\4\uffff";
    static final String DFA147_eofS =
        "\4\uffff";
    static final String DFA147_minS =
        "\2\4\2\uffff";
    static final String DFA147_maxS =
        "\2\160\2\uffff";
    static final String DFA147_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA147_specialS =
        "\4\uffff}>";
    static final String[] DFA147_transitionS = {
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\1\2\3\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\1\2\3\uffff\4\3\3"+
            "\uffff\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3"+
            "\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA147_eot = DFA.unpackEncodedString(DFA147_eotS);
    static final short[] DFA147_eof = DFA.unpackEncodedString(DFA147_eofS);
    static final char[] DFA147_min = DFA.unpackEncodedStringToUnsignedChars(DFA147_minS);
    static final char[] DFA147_max = DFA.unpackEncodedStringToUnsignedChars(DFA147_maxS);
    static final short[] DFA147_accept = DFA.unpackEncodedString(DFA147_acceptS);
    static final short[] DFA147_special = DFA.unpackEncodedString(DFA147_specialS);
    static final short[][] DFA147_transition;

    static {
        int numStates = DFA147_transitionS.length;
        DFA147_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA147_transition[i] = DFA.unpackEncodedString(DFA147_transitionS[i]);
        }
    }

    class DFA147 extends DFA {

        public DFA147(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = DFA147_eot;
            this.eof = DFA147_eof;
            this.min = DFA147_min;
            this.max = DFA147_max;
            this.accept = DFA147_accept;
            this.special = DFA147_special;
            this.transition = DFA147_transition;
        }
        public String getDescription() {
            return "671:57: ( ( ws )? IMPORTANT_SYM )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA152_eotS =
        "\43\uffff";
    static final String DFA152_eofS =
        "\43\uffff";
    static final String DFA152_minS =
        "\3\6\1\0\1\uffff\3\0\3\6\5\uffff\2\6\1\0\1\uffff\3\0\3\6\1\0\3\6"+
        "\1\0\1\uffff\2\6\1\0";
    static final String DFA152_maxS =
        "\3\160\1\0\1\uffff\3\0\1\160\2\130\5\uffff\2\160\1\0\1\uffff\3\0"+
        "\1\160\2\130\1\0\3\130\1\0\1\uffff\2\130\1\0";
    static final String DFA152_acceptS =
        "\4\uffff\1\2\6\uffff\5\1\3\uffff\1\1\13\uffff\1\1\3\uffff";
    static final String DFA152_specialS =
        "\1\16\1\22\1\25\1\15\1\uffff\1\1\1\2\1\0\1\23\1\14\1\6\5\uffff\1"+
        "\12\1\30\1\21\1\uffff\1\3\1\11\1\7\1\31\1\24\1\10\1\32\1\17\1\20"+
        "\1\26\1\4\1\uffff\1\5\1\27\1\13}>";
    static final String[] DFA152_transitionS = {
            "\1\3\4\uffff\1\13\12\uffff\1\4\1\12\33\uffff\1\13\1\4\1\uffff"+
            "\1\2\1\4\1\1\1\7\1\10\1\11\2\4\1\5\1\4\1\uffff\1\6\6\uffff\1"+
            "\13\47\uffff\1\4",
            "\1\17\4\uffff\1\17\4\uffff\1\14\6\uffff\1\17\33\uffff\1\17"+
            "\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\1\uffff\1\4\1\17"+
            "\6\uffff\1\17\15\uffff\3\15\27\uffff\1\4",
            "\1\22\4\uffff\1\17\4\uffff\1\23\5\uffff\1\4\1\31\33\uffff\1"+
            "\17\2\uffff\1\17\1\uffff\1\21\1\26\1\27\1\30\2\4\1\24\1\4\1"+
            "\uffff\1\25\6\uffff\1\17\15\uffff\3\20\27\uffff\1\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\32\4\uffff\1\17\1\uffff\1\4\2\uffff\1\23\5\uffff\1\4\1\17"+
            "\33\uffff\1\17\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2"+
            "\uffff\1\17\6\uffff\1\17\15\uffff\3\15\27\uffff\1\4",
            "\1\34\4\uffff\1\17\4\uffff\1\23\6\uffff\1\17\33\uffff\1\17"+
            "\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\35\1\4\1\uffff\1\17"+
            "\6\uffff\1\17\15\uffff\3\33",
            "\1\36\4\uffff\1\17\4\uffff\1\23\4\uffff\2\4\1\17\33\uffff\1"+
            "\17\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff\1\17"+
            "\6\uffff\1\17\15\uffff\3\15",
            "",
            "",
            "",
            "",
            "",
            "\1\22\4\uffff\1\17\4\uffff\1\23\5\uffff\1\4\1\31\33\uffff\1"+
            "\17\2\uffff\1\17\1\uffff\1\21\1\26\1\27\1\30\2\4\1\24\1\4\1"+
            "\uffff\1\25\6\uffff\1\17\15\uffff\3\20\27\uffff\1\4",
            "\1\17\4\uffff\1\17\4\uffff\1\37\6\uffff\1\17\33\uffff\1\17"+
            "\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\1\uffff\1\4\1\17"+
            "\6\uffff\1\17\15\uffff\3\15\27\uffff\1\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\32\4\uffff\1\17\1\uffff\1\4\2\uffff\1\23\5\uffff\1\4\1\17"+
            "\33\uffff\1\17\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2"+
            "\uffff\1\17\6\uffff\1\17\15\uffff\3\15\27\uffff\1\4",
            "\1\34\4\uffff\1\17\4\uffff\1\23\6\uffff\1\17\33\uffff\1\17"+
            "\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\35\1\4\1\uffff\1\17"+
            "\6\uffff\1\17\15\uffff\3\33",
            "\1\36\4\uffff\1\17\4\uffff\1\23\4\uffff\2\4\1\17\33\uffff\1"+
            "\17\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff\1\17"+
            "\6\uffff\1\17\15\uffff\3\15",
            "\1\uffff",
            "\1\40\4\uffff\1\17\4\uffff\1\23\6\uffff\1\17\33\uffff\1\17"+
            "\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff\1\17\6"+
            "\uffff\1\17\15\uffff\3\33",
            "\1\17\4\uffff\1\17\4\uffff\1\23\6\uffff\1\17\33\uffff\1\17"+
            "\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\1\4\1\uffff\1\17"+
            "\6\4\1\42\15\uffff\3\41",
            "\1\17\4\uffff\1\17\4\uffff\1\23\6\uffff\1\17\33\uffff\1\17"+
            "\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\1\4\1\uffff\1\17"+
            "\6\uffff\1\17\15\uffff\3\15",
            "\1\uffff",
            "",
            "\1\17\4\uffff\1\17\4\uffff\1\23\6\uffff\1\17\33\uffff\1\17"+
            "\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff\1\17\6"+
            "\4\1\42\15\uffff\3\41",
            "\1\17\4\uffff\1\17\4\uffff\1\23\6\uffff\1\17\33\uffff\1\17"+
            "\2\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff\1\17\6"+
            "\4\1\42\15\uffff\3\41",
            "\1\uffff"
    };

    static final short[] DFA152_eot = DFA.unpackEncodedString(DFA152_eotS);
    static final short[] DFA152_eof = DFA.unpackEncodedString(DFA152_eofS);
    static final char[] DFA152_min = DFA.unpackEncodedStringToUnsignedChars(DFA152_minS);
    static final char[] DFA152_max = DFA.unpackEncodedStringToUnsignedChars(DFA152_maxS);
    static final short[] DFA152_accept = DFA.unpackEncodedString(DFA152_acceptS);
    static final short[] DFA152_special = DFA.unpackEncodedString(DFA152_specialS);
    static final short[][] DFA152_transition;

    static {
        int numStates = DFA152_transitionS.length;
        DFA152_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA152_transition[i] = DFA.unpackEncodedString(DFA152_transitionS[i]);
        }
    }

    class DFA152 extends DFA {

        public DFA152(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = DFA152_eot;
            this.eof = DFA152_eof;
            this.min = DFA152_min;
            this.max = DFA152_max;
            this.accept = DFA152_accept;
            this.special = DFA152_special;
            this.transition = DFA152_transition;
        }
        public String getDescription() {
            return "687:1: selectorsGroup : ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( ( ws )? COMMA ( ws )? selector )* );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA152_7 = input.LA(1);

                         
                        int index152_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index152_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA152_5 = input.LA(1);

                         
                        int index152_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index152_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA152_6 = input.LA(1);

                         
                        int index152_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index152_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA152_20 = input.LA(1);

                         
                        int index152_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index152_20);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA152_30 = input.LA(1);

                         
                        int index152_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index152_30);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA152_32 = input.LA(1);

                         
                        int index152_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA152_32>=WS && LA152_32<=COMMENT)) ) {s = 33;}

                        else if ( (LA152_32==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA152_32==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA152_32==RBRACKET) ) {s = 34;}

                        else if ( ((LA152_32>=OPEQ && LA152_32<=CONTAINS)) ) {s = 4;}

                        else if ( (LA152_32==IDENT||LA152_32==COMMA||LA152_32==COLON||LA152_32==MINUS||LA152_32==GREATER||(LA152_32>=HASH && LA152_32<=LBRACKET)||LA152_32==STAR||LA152_32==LESS_AND) && (synpred29_Css3())) {s = 15;}

                         
                        input.seek(index152_32);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA152_10 = input.LA(1);

                         
                        int index152_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA152_10>=WS && LA152_10<=COMMENT)) && (synpred29_Css3())) {s = 13;}

                        else if ( (LA152_10==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA152_10==IDENT) ) {s = 30;}

                        else if ( (LA152_10==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA152_10==COMMA||LA152_10==COLON||LA152_10==MINUS||LA152_10==GREATER||(LA152_10>=HASH && LA152_10<=LBRACKET)||LA152_10==STAR||LA152_10==LESS_AND||LA152_10==RBRACKET) && (synpred29_Css3())) {s = 15;}

                        else if ( ((LA152_10>=NOT && LA152_10<=GEN)) ) {s = 4;}

                         
                        input.seek(index152_10);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA152_22 = input.LA(1);

                         
                        int index152_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index152_22);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA152_25 = input.LA(1);

                         
                        int index152_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA152_25>=WS && LA152_25<=COMMENT)) && (synpred29_Css3())) {s = 13;}

                        else if ( (LA152_25==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA152_25==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA152_25==IDENT) ) {s = 30;}

                        else if ( (LA152_25==COMMA||LA152_25==COLON||LA152_25==MINUS||LA152_25==GREATER||(LA152_25>=HASH && LA152_25<=LBRACKET)||LA152_25==STAR||LA152_25==LESS_AND||LA152_25==RBRACKET) && (synpred29_Css3())) {s = 15;}

                        else if ( ((LA152_25>=NOT && LA152_25<=GEN)) ) {s = 4;}

                         
                        input.seek(index152_25);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA152_21 = input.LA(1);

                         
                        int index152_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index152_21);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA152_16 = input.LA(1);

                         
                        int index152_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA152_16==HASH_SYMBOL) ) {s = 17;}

                        else if ( (LA152_16==IDENT) ) {s = 18;}

                        else if ( ((LA152_16>=WS && LA152_16<=COMMENT)) ) {s = 16;}

                        else if ( (LA152_16==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA152_16==STAR) ) {s = 20;}

                        else if ( (LA152_16==LESS_AND) ) {s = 21;}

                        else if ( (LA152_16==GEN||(LA152_16>=DCOLON && LA152_16<=SASS_EXTEND_ONLY_SELECTOR)||LA152_16==PIPE||LA152_16==AT_SIGN) ) {s = 4;}

                        else if ( (LA152_16==HASH) ) {s = 22;}

                        else if ( (LA152_16==DOT) ) {s = 23;}

                        else if ( (LA152_16==LBRACKET) ) {s = 24;}

                        else if ( (LA152_16==COLON) ) {s = 25;}

                        else if ( (LA152_16==COMMA||LA152_16==MINUS||LA152_16==GREATER||LA152_16==RBRACKET) && (synpred29_Css3())) {s = 15;}

                         
                        input.seek(index152_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA152_34 = input.LA(1);

                         
                        int index152_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index152_34);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA152_9 = input.LA(1);

                         
                        int index152_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA152_9>=WS && LA152_9<=COMMENT)) ) {s = 27;}

                        else if ( (LA152_9==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA152_9==IDENT) ) {s = 28;}

                        else if ( (LA152_9==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA152_9==STAR) ) {s = 29;}

                        else if ( (LA152_9==COMMA||LA152_9==COLON||LA152_9==MINUS||LA152_9==GREATER||(LA152_9>=HASH && LA152_9<=LBRACKET)||LA152_9==LESS_AND||LA152_9==RBRACKET) && (synpred29_Css3())) {s = 15;}

                        else if ( (LA152_9==PIPE) ) {s = 4;}

                         
                        input.seek(index152_9);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA152_3 = input.LA(1);

                         
                        int index152_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index152_3);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA152_0 = input.LA(1);

                         
                        int index152_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA152_0==HASH_SYMBOL) ) {s = 1;}

                        else if ( (LA152_0==GREATER) ) {s = 2;}

                        else if ( (LA152_0==IDENT) ) {s = 3;}

                        else if ( (LA152_0==GEN||LA152_0==PLUS||LA152_0==TILDE||(LA152_0>=DCOLON && LA152_0<=SASS_EXTEND_ONLY_SELECTOR)||LA152_0==PIPE||LA152_0==AT_SIGN) ) {s = 4;}

                        else if ( (LA152_0==STAR) ) {s = 5;}

                        else if ( (LA152_0==LESS_AND) ) {s = 6;}

                        else if ( (LA152_0==HASH) ) {s = 7;}

                        else if ( (LA152_0==DOT) ) {s = 8;}

                        else if ( (LA152_0==LBRACKET) ) {s = 9;}

                        else if ( (LA152_0==COLON) ) {s = 10;}

                        else if ( (LA152_0==COMMA||LA152_0==MINUS||LA152_0==RBRACKET) && (synpred29_Css3())) {s = 11;}

                         
                        input.seek(index152_0);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA152_27 = input.LA(1);

                         
                        int index152_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA152_27==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA152_27==IDENT) ) {s = 32;}

                        else if ( ((LA152_27>=WS && LA152_27<=COMMENT)) ) {s = 27;}

                        else if ( (LA152_27==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA152_27==COMMA||LA152_27==COLON||LA152_27==MINUS||LA152_27==GREATER||(LA152_27>=HASH && LA152_27<=LBRACKET)||LA152_27==STAR||LA152_27==LESS_AND||LA152_27==RBRACKET) && (synpred29_Css3())) {s = 15;}

                         
                        input.seek(index152_27);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA152_28 = input.LA(1);

                         
                        int index152_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA152_28>=WS && LA152_28<=COMMENT)) ) {s = 33;}

                        else if ( (LA152_28==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA152_28==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA152_28==RBRACKET) ) {s = 34;}

                        else if ( (LA152_28==PIPE||(LA152_28>=OPEQ && LA152_28<=CONTAINS)) ) {s = 4;}

                        else if ( (LA152_28==IDENT||LA152_28==COMMA||LA152_28==COLON||LA152_28==MINUS||LA152_28==GREATER||(LA152_28>=HASH && LA152_28<=LBRACKET)||LA152_28==STAR||LA152_28==LESS_AND) && (synpred29_Css3())) {s = 15;}

                         
                        input.seek(index152_28);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA152_18 = input.LA(1);

                         
                        int index152_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index152_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA152_1 = input.LA(1);

                         
                        int index152_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA152_1==LBRACE) && (synpred29_Css3())) {s = 12;}

                        else if ( ((LA152_1>=WS && LA152_1<=COMMENT)) && (synpred29_Css3())) {s = 13;}

                        else if ( (LA152_1==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA152_1==IDENT||LA152_1==COMMA||LA152_1==COLON||LA152_1==MINUS||LA152_1==GREATER||(LA152_1>=HASH && LA152_1<=LBRACKET)||LA152_1==STAR||LA152_1==LESS_AND||LA152_1==RBRACKET) && (synpred29_Css3())) {s = 15;}

                        else if ( (LA152_1==NAME||LA152_1==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index152_1);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA152_8 = input.LA(1);

                         
                        int index152_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA152_8>=WS && LA152_8<=COMMENT)) && (synpred29_Css3())) {s = 13;}

                        else if ( (LA152_8==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA152_8==IDENT) ) {s = 26;}

                        else if ( (LA152_8==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA152_8==COMMA||LA152_8==COLON||LA152_8==MINUS||LA152_8==GREATER||(LA152_8>=HASH && LA152_8<=LBRACKET)||LA152_8==STAR||LA152_8==LESS_AND||LA152_8==RBRACKET) && (synpred29_Css3())) {s = 15;}

                        else if ( (LA152_8==LESS_IMPORT_TYPE||LA152_8==GEN||LA152_8==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index152_8);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA152_24 = input.LA(1);

                         
                        int index152_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA152_24>=WS && LA152_24<=COMMENT)) ) {s = 27;}

                        else if ( (LA152_24==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA152_24==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA152_24==IDENT) ) {s = 28;}

                        else if ( (LA152_24==STAR) ) {s = 29;}

                        else if ( (LA152_24==COMMA||LA152_24==COLON||LA152_24==MINUS||LA152_24==GREATER||(LA152_24>=HASH && LA152_24<=LBRACKET)||LA152_24==LESS_AND||LA152_24==RBRACKET) && (synpred29_Css3())) {s = 15;}

                        else if ( (LA152_24==PIPE) ) {s = 4;}

                         
                        input.seek(index152_24);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA152_2 = input.LA(1);

                         
                        int index152_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA152_2>=WS && LA152_2<=COMMENT)) ) {s = 16;}

                        else if ( (LA152_2==HASH_SYMBOL) ) {s = 17;}

                        else if ( (LA152_2==IDENT) ) {s = 18;}

                        else if ( (LA152_2==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA152_2==STAR) ) {s = 20;}

                        else if ( (LA152_2==LESS_AND) ) {s = 21;}

                        else if ( (LA152_2==GEN||(LA152_2>=DCOLON && LA152_2<=SASS_EXTEND_ONLY_SELECTOR)||LA152_2==PIPE||LA152_2==AT_SIGN) ) {s = 4;}

                        else if ( (LA152_2==HASH) ) {s = 22;}

                        else if ( (LA152_2==DOT) ) {s = 23;}

                        else if ( (LA152_2==LBRACKET) ) {s = 24;}

                        else if ( (LA152_2==COLON) ) {s = 25;}

                        else if ( (LA152_2==COMMA||LA152_2==MINUS||LA152_2==GREATER||LA152_2==RBRACKET) && (synpred29_Css3())) {s = 15;}

                         
                        input.seek(index152_2);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA152_29 = input.LA(1);

                         
                        int index152_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA152_29>=WS && LA152_29<=COMMENT)) && (synpred29_Css3())) {s = 13;}

                        else if ( (LA152_29==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA152_29==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA152_29==IDENT||LA152_29==COMMA||LA152_29==COLON||LA152_29==MINUS||LA152_29==GREATER||(LA152_29>=HASH && LA152_29<=LBRACKET)||LA152_29==STAR||LA152_29==LESS_AND||LA152_29==RBRACKET) && (synpred29_Css3())) {s = 15;}

                        else if ( (LA152_29==PIPE) ) {s = 4;}

                         
                        input.seek(index152_29);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA152_33 = input.LA(1);

                         
                        int index152_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA152_33==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( ((LA152_33>=WS && LA152_33<=COMMENT)) ) {s = 33;}

                        else if ( (LA152_33==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA152_33==RBRACKET) ) {s = 34;}

                        else if ( ((LA152_33>=OPEQ && LA152_33<=CONTAINS)) ) {s = 4;}

                        else if ( (LA152_33==IDENT||LA152_33==COMMA||LA152_33==COLON||LA152_33==MINUS||LA152_33==GREATER||(LA152_33>=HASH && LA152_33<=LBRACKET)||LA152_33==STAR||LA152_33==LESS_AND) && (synpred29_Css3())) {s = 15;}

                         
                        input.seek(index152_33);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA152_17 = input.LA(1);

                         
                        int index152_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA152_17==LBRACE) && (synpred29_Css3())) {s = 31;}

                        else if ( ((LA152_17>=WS && LA152_17<=COMMENT)) && (synpred29_Css3())) {s = 13;}

                        else if ( (LA152_17==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA152_17==IDENT||LA152_17==COMMA||LA152_17==COLON||LA152_17==MINUS||LA152_17==GREATER||(LA152_17>=HASH && LA152_17<=LBRACKET)||LA152_17==STAR||LA152_17==LESS_AND||LA152_17==RBRACKET) && (synpred29_Css3())) {s = 15;}

                        else if ( (LA152_17==NAME||LA152_17==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index152_17);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA152_23 = input.LA(1);

                         
                        int index152_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA152_23>=WS && LA152_23<=COMMENT)) && (synpred29_Css3())) {s = 13;}

                        else if ( (LA152_23==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA152_23==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA152_23==IDENT) ) {s = 26;}

                        else if ( (LA152_23==COMMA||LA152_23==COLON||LA152_23==MINUS||LA152_23==GREATER||(LA152_23>=HASH && LA152_23<=LBRACKET)||LA152_23==STAR||LA152_23==LESS_AND||LA152_23==RBRACKET) && (synpred29_Css3())) {s = 15;}

                        else if ( (LA152_23==LESS_IMPORT_TYPE||LA152_23==GEN||LA152_23==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index152_23);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA152_26 = input.LA(1);

                         
                        int index152_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index152_26);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 152, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA151_eotS =
        "\4\uffff";
    static final String DFA151_eofS =
        "\4\uffff";
    static final String DFA151_minS =
        "\2\13\2\uffff";
    static final String DFA151_maxS =
        "\2\130\2\uffff";
    static final String DFA151_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA151_specialS =
        "\4\uffff}>";
    static final String[] DFA151_transitionS = {
            "\1\3\4\uffff\1\2\105\uffff\3\1",
            "\1\3\4\uffff\1\2\105\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA151_eot = DFA.unpackEncodedString(DFA151_eotS);
    static final short[] DFA151_eof = DFA.unpackEncodedString(DFA151_eofS);
    static final char[] DFA151_min = DFA.unpackEncodedStringToUnsignedChars(DFA151_minS);
    static final char[] DFA151_max = DFA.unpackEncodedStringToUnsignedChars(DFA151_maxS);
    static final short[] DFA151_accept = DFA.unpackEncodedString(DFA151_acceptS);
    static final short[] DFA151_special = DFA.unpackEncodedString(DFA151_specialS);
    static final short[][] DFA151_transition;

    static {
        int numStates = DFA151_transitionS.length;
        DFA151_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA151_transition[i] = DFA.unpackEncodedString(DFA151_transitionS[i]);
        }
    }

    class DFA151 extends DFA {

        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = DFA151_eot;
            this.eof = DFA151_eof;
            this.min = DFA151_min;
            this.max = DFA151_max;
            this.accept = DFA151_accept;
            this.special = DFA151_special;
            this.transition = DFA151_transition;
        }
        public String getDescription() {
            return "()* loopback of 692:18: ( ( ws )? COMMA ( ws )? selector )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA159_eotS =
        "\4\uffff";
    static final String DFA159_eofS =
        "\4\uffff";
    static final String DFA159_minS =
        "\2\6\2\uffff";
    static final String DFA159_maxS =
        "\2\160\2\uffff";
    static final String DFA159_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA159_specialS =
        "\4\uffff}>";
    static final String[] DFA159_transitionS = {
            "\1\3\4\uffff\1\2\4\uffff\1\2\5\uffff\2\3\34\uffff\1\3\1\uffff"+
            "\12\3\1\uffff\1\3\24\uffff\3\1\27\uffff\1\3",
            "\1\3\4\uffff\1\2\4\uffff\1\2\5\uffff\2\3\34\uffff\1\3\1\uffff"+
            "\12\3\1\uffff\1\3\24\uffff\3\1\27\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "()* loopback of 696:49: ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA158_eotS =
        "\4\uffff";
    static final String DFA158_eofS =
        "\4\uffff";
    static final String DFA158_minS =
        "\2\6\2\uffff";
    static final String DFA158_maxS =
        "\2\160\2\uffff";
    static final String DFA158_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA158_specialS =
        "\4\uffff}>";
    static final String[] DFA158_transitionS = {
            "\1\3\17\uffff\2\3\34\uffff\1\2\1\uffff\2\2\10\3\1\uffff\1\3"+
            "\24\uffff\3\1\27\uffff\1\3",
            "\1\3\17\uffff\2\3\34\uffff\1\2\1\uffff\2\2\10\3\1\uffff\1\3"+
            "\24\uffff\3\1\27\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA158_eot = DFA.unpackEncodedString(DFA158_eotS);
    static final short[] DFA158_eof = DFA.unpackEncodedString(DFA158_eofS);
    static final char[] DFA158_min = DFA.unpackEncodedStringToUnsignedChars(DFA158_minS);
    static final char[] DFA158_max = DFA.unpackEncodedStringToUnsignedChars(DFA158_maxS);
    static final short[] DFA158_accept = DFA.unpackEncodedString(DFA158_acceptS);
    static final short[] DFA158_special = DFA.unpackEncodedString(DFA158_specialS);
    static final short[][] DFA158_transition;

    static {
        int numStates = DFA158_transitionS.length;
        DFA158_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA158_transition[i] = DFA.unpackEncodedString(DFA158_transitionS[i]);
        }
    }

    class DFA158 extends DFA {

        public DFA158(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = DFA158_eot;
            this.eof = DFA158_eof;
            this.min = DFA158_min;
            this.max = DFA158_max;
            this.accept = DFA158_accept;
            this.special = DFA158_special;
            this.transition = DFA158_transition;
        }
        public String getDescription() {
            return "696:51: ( ( ( ws )? combinator ( ws )? ) | ( ws )? )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA161_eotS =
        "\57\uffff";
    static final String DFA161_eofS =
        "\57\uffff";
    static final String DFA161_minS =
        "\1\4\1\0\5\uffff\7\0\26\uffff\1\0\12\uffff";
    static final String DFA161_maxS =
        "\1\161\1\0\5\uffff\7\0\26\uffff\1\0\12\uffff";
    static final String DFA161_acceptS =
        "\2\uffff\1\2\53\uffff\1\1";
    static final String DFA161_specialS =
        "\1\uffff\1\0\5\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\26\uffff\1\10\12"+
        "\uffff}>";
    static final String[] DFA161_transitionS = {
            "\3\2\2\uffff\3\2\2\uffff\4\2\4\uffff\1\2\1\15\2\2\3\uffff\1"+
            "\2\1\uffff\23\2\1\uffff\5\2\1\12\1\11\1\13\1\14\1\44\1\7\2\2"+
            "\1\uffff\1\2\6\uffff\2\2\14\uffff\3\1\1\uffff\15\2\11\uffff"+
            "\1\10\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }
        public String getDescription() {
            return "()* loopback of 706:17: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA161_1 = input.LA(1);

                         
                        int index161_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index161_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA161_7 = input.LA(1);

                         
                        int index161_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred30_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 46;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 2;}

                         
                        input.seek(index161_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA161_8 = input.LA(1);

                         
                        int index161_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred30_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 46;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 2;}

                         
                        input.seek(index161_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA161_9 = input.LA(1);

                         
                        int index161_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index161_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA161_10 = input.LA(1);

                         
                        int index161_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index161_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA161_11 = input.LA(1);

                         
                        int index161_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index161_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA161_12 = input.LA(1);

                         
                        int index161_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index161_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA161_13 = input.LA(1);

                         
                        int index161_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index161_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA161_36 = input.LA(1);

                         
                        int index161_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index161_36);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 161, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA163_eotS =
        "\57\uffff";
    static final String DFA163_eofS =
        "\57\uffff";
    static final String DFA163_minS =
        "\1\4\1\0\5\uffff\7\0\26\uffff\1\0\12\uffff";
    static final String DFA163_maxS =
        "\1\161\1\0\5\uffff\7\0\26\uffff\1\0\12\uffff";
    static final String DFA163_acceptS =
        "\2\uffff\1\2\53\uffff\1\1";
    static final String DFA163_specialS =
        "\1\uffff\1\0\5\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\26\uffff\1\10\12"+
        "\uffff}>";
    static final String[] DFA163_transitionS = {
            "\3\2\2\uffff\3\2\2\uffff\4\2\4\uffff\1\2\1\15\2\2\3\uffff\1"+
            "\2\1\uffff\23\2\1\uffff\5\2\1\12\1\11\1\13\1\14\1\44\1\7\2\2"+
            "\1\uffff\1\2\6\uffff\2\2\14\uffff\3\1\1\uffff\15\2\11\uffff"+
            "\1\10\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA163_eot = DFA.unpackEncodedString(DFA163_eotS);
    static final short[] DFA163_eof = DFA.unpackEncodedString(DFA163_eofS);
    static final char[] DFA163_min = DFA.unpackEncodedStringToUnsignedChars(DFA163_minS);
    static final char[] DFA163_max = DFA.unpackEncodedStringToUnsignedChars(DFA163_maxS);
    static final short[] DFA163_accept = DFA.unpackEncodedString(DFA163_acceptS);
    static final short[] DFA163_special = DFA.unpackEncodedString(DFA163_specialS);
    static final short[][] DFA163_transition;

    static {
        int numStates = DFA163_transitionS.length;
        DFA163_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA163_transition[i] = DFA.unpackEncodedString(DFA163_transitionS[i]);
        }
    }

    class DFA163 extends DFA {

        public DFA163(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 163;
            this.eot = DFA163_eot;
            this.eof = DFA163_eof;
            this.min = DFA163_min;
            this.max = DFA163_max;
            this.accept = DFA163_accept;
            this.special = DFA163_special;
            this.transition = DFA163_transition;
        }
        public String getDescription() {
            return "()* loopback of 708:20: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA163_1 = input.LA(1);

                         
                        int index163_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_Css3()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index163_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA163_7 = input.LA(1);

                         
                        int index163_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred31_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 46;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 2;}

                         
                        input.seek(index163_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA163_8 = input.LA(1);

                         
                        int index163_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred31_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 46;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 2;}

                         
                        input.seek(index163_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA163_9 = input.LA(1);

                         
                        int index163_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_Css3()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index163_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA163_10 = input.LA(1);

                         
                        int index163_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_Css3()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index163_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA163_11 = input.LA(1);

                         
                        int index163_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_Css3()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index163_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA163_12 = input.LA(1);

                         
                        int index163_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_Css3()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index163_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA163_13 = input.LA(1);

                         
                        int index163_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_Css3()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index163_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA163_36 = input.LA(1);

                         
                        int index163_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_Css3()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index163_36);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 163, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA181_eotS =
        "\4\uffff";
    static final String DFA181_eofS =
        "\4\uffff";
    static final String DFA181_minS =
        "\2\4\2\uffff";
    static final String DFA181_maxS =
        "\2\161\2\uffff";
    static final String DFA181_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA181_specialS =
        "\4\uffff}>";
    static final String[] DFA181_transitionS = {
            "\3\3\2\uffff\3\3\1\2\1\uffff\4\3\4\uffff\4\3\3\uffff\1\3\1\uffff"+
            "\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff\3\1\1\uffff"+
            "\15\3\11\uffff\2\3",
            "\3\3\2\uffff\3\3\1\2\2\uffff\3\3\4\uffff\4\3\3\uffff\1\3\1"+
            "\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff\3"+
            "\1\1\uffff\15\3\11\uffff\2\3",
            "",
            ""
    };

    static final short[] DFA181_eot = DFA.unpackEncodedString(DFA181_eotS);
    static final short[] DFA181_eof = DFA.unpackEncodedString(DFA181_eofS);
    static final char[] DFA181_min = DFA.unpackEncodedStringToUnsignedChars(DFA181_minS);
    static final char[] DFA181_max = DFA.unpackEncodedStringToUnsignedChars(DFA181_maxS);
    static final short[] DFA181_accept = DFA.unpackEncodedString(DFA181_acceptS);
    static final short[] DFA181_special = DFA.unpackEncodedString(DFA181_specialS);
    static final short[][] DFA181_transition;

    static {
        int numStates = DFA181_transitionS.length;
        DFA181_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA181_transition[i] = DFA.unpackEncodedString(DFA181_transitionS[i]);
        }
    }

    class DFA181 extends DFA {

        public DFA181(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 181;
            this.eot = DFA181_eot;
            this.eof = DFA181_eof;
            this.min = DFA181_min;
            this.max = DFA181_max;
            this.accept = DFA181_accept;
            this.special = DFA181_special;
            this.transition = DFA181_transition;
        }
        public String getDescription() {
            return "820:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA194_eotS =
        "\12\uffff";
    static final String DFA194_eofS =
        "\12\uffff";
    static final String DFA194_minS =
        "\1\4\7\0\2\uffff";
    static final String DFA194_maxS =
        "\1\146\7\0\2\uffff";
    static final String DFA194_acceptS =
        "\10\uffff\1\1\1\2";
    static final String DFA194_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\uffff}>";
    static final String[] DFA194_transitionS = {
            "\1\6\1\uffff\1\3\2\uffff\2\6\4\uffff\1\6\6\uffff\1\5\1\uffff"+
            "\2\6\3\uffff\1\6\1\uffff\23\6\1\uffff\1\4\1\uffff\1\6\2\uffff"+
            "\1\2\2\4\3\uffff\1\1\12\uffff\1\7\20\uffff\15\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA194_eot = DFA.unpackEncodedString(DFA194_eotS);
    static final short[] DFA194_eof = DFA.unpackEncodedString(DFA194_eofS);
    static final char[] DFA194_min = DFA.unpackEncodedStringToUnsignedChars(DFA194_minS);
    static final char[] DFA194_max = DFA.unpackEncodedStringToUnsignedChars(DFA194_maxS);
    static final short[] DFA194_accept = DFA.unpackEncodedString(DFA194_acceptS);
    static final short[] DFA194_special = DFA.unpackEncodedString(DFA194_specialS);
    static final short[][] DFA194_transition;

    static {
        int numStates = DFA194_transitionS.length;
        DFA194_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA194_transition[i] = DFA.unpackEncodedString(DFA194_transitionS[i]);
        }
    }

    class DFA194 extends DFA {

        public DFA194(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 194;
            this.eot = DFA194_eot;
            this.eof = DFA194_eof;
            this.min = DFA194_min;
            this.max = DFA194_max;
            this.accept = DFA194_accept;
            this.special = DFA194_special;
            this.transition = DFA194_transition;
        }
        public String getDescription() {
            return "829:1: propertyDeclaration : ( ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? | {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA194_1 = input.LA(1);

                         
                        int index194_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index194_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA194_2 = input.LA(1);

                         
                        int index194_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index194_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA194_3 = input.LA(1);

                         
                        int index194_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index194_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA194_4 = input.LA(1);

                         
                        int index194_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index194_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA194_5 = input.LA(1);

                         
                        int index194_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index194_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA194_6 = input.LA(1);

                         
                        int index194_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 8;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 9;}

                         
                        input.seek(index194_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA194_7 = input.LA(1);

                         
                        int index194_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 8;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 9;}

                         
                        input.seek(index194_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 194, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA190_eotS =
        "\4\uffff";
    static final String DFA190_eofS =
        "\1\3\3\uffff";
    static final String DFA190_minS =
        "\2\4\2\uffff";
    static final String DFA190_maxS =
        "\2\160\2\uffff";
    static final String DFA190_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA190_specialS =
        "\4\uffff}>";
    static final String[] DFA190_transitionS = {
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\1\2\3\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\1\2\3\uffff\4\3\3"+
            "\uffff\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3"+
            "\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA190_eot = DFA.unpackEncodedString(DFA190_eotS);
    static final short[] DFA190_eof = DFA.unpackEncodedString(DFA190_eofS);
    static final char[] DFA190_min = DFA.unpackEncodedStringToUnsignedChars(DFA190_minS);
    static final char[] DFA190_max = DFA.unpackEncodedStringToUnsignedChars(DFA190_maxS);
    static final short[] DFA190_accept = DFA.unpackEncodedString(DFA190_acceptS);
    static final short[] DFA190_special = DFA.unpackEncodedString(DFA190_specialS);
    static final short[][] DFA190_transition;

    static {
        int numStates = DFA190_transitionS.length;
        DFA190_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA190_transition[i] = DFA.unpackEncodedString(DFA190_transitionS[i]);
        }
    }

    class DFA190 extends DFA {

        public DFA190(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 190;
            this.eot = DFA190_eot;
            this.eof = DFA190_eof;
            this.min = DFA190_min;
            this.max = DFA190_max;
            this.accept = DFA190_accept;
            this.special = DFA190_special;
            this.transition = DFA190_transition;
        }
        public String getDescription() {
            return "831:48: ( ( ws )? prio )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA195_eotS =
        "\34\uffff";
    static final String DFA195_eofS =
        "\34\uffff";
    static final String DFA195_minS =
        "\1\4\1\uffff\27\0\3\uffff";
    static final String DFA195_maxS =
        "\1\146\1\uffff\27\0\3\uffff";
    static final String DFA195_acceptS =
        "\1\uffff\1\1\31\uffff\1\2";
    static final String DFA195_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\3\uffff}>";
    static final String[] DFA195_transitionS = {
            "\1\25\1\uffff\1\3\1\17\1\23\2\25\1\uffff\1\1\2\uffff\1\25\2"+
            "\uffff\1\1\2\uffff\1\1\1\22\1\uffff\2\25\3\uffff\1\25\1\5\23"+
            "\25\1\uffff\2\2\1\25\1\uffff\1\20\1\27\1\24\17\uffff\1\26\1"+
            "\4\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\21\1\30\4\uffff"+
            "\15\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA195_eot = DFA.unpackEncodedString(DFA195_eotS);
    static final short[] DFA195_eof = DFA.unpackEncodedString(DFA195_eofS);
    static final char[] DFA195_min = DFA.unpackEncodedStringToUnsignedChars(DFA195_minS);
    static final char[] DFA195_max = DFA.unpackEncodedStringToUnsignedChars(DFA195_maxS);
    static final short[] DFA195_accept = DFA.unpackEncodedString(DFA195_acceptS);
    static final short[] DFA195_special = DFA.unpackEncodedString(DFA195_specialS);
    static final short[][] DFA195_transition;

    static {
        int numStates = DFA195_transitionS.length;
        DFA195_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA195_transition[i] = DFA.unpackEncodedString(DFA195_transitionS[i]);
        }
    }

    class DFA195 extends DFA {

        public DFA195(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 195;
            this.eot = DFA195_eot;
            this.eof = DFA195_eof;
            this.min = DFA195_min;
            this.max = DFA195_max;
            this.accept = DFA195_accept;
            this.special = DFA195_special;
            this.transition = DFA195_transition;
        }
        public String getDescription() {
            return "842:1: cp_propertyValue : ({...}? cp_expression_list | propertyValue );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA195_2 = input.LA(1);

                         
                        int index195_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index195_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA195_3 = input.LA(1);

                         
                        int index195_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index195_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA195_4 = input.LA(1);

                         
                        int index195_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index195_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA195_5 = input.LA(1);

                         
                        int index195_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index195_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA195_6 = input.LA(1);

                         
                        int index195_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index195_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA195_7 = input.LA(1);

                         
                        int index195_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index195_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA195_8 = input.LA(1);

                         
                        int index195_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index195_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA195_9 = input.LA(1);

                         
                        int index195_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index195_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA195_10 = input.LA(1);

                         
                        int index195_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index195_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA195_11 = input.LA(1);

                         
                        int index195_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index195_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA195_12 = input.LA(1);

                         
                        int index195_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index195_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA195_13 = input.LA(1);

                         
                        int index195_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index195_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA195_14 = input.LA(1);

                         
                        int index195_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index195_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA195_15 = input.LA(1);

                         
                        int index195_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index195_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA195_16 = input.LA(1);

                         
                        int index195_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index195_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA195_17 = input.LA(1);

                         
                        int index195_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index195_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA195_18 = input.LA(1);

                         
                        int index195_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index195_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA195_19 = input.LA(1);

                         
                        int index195_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index195_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA195_20 = input.LA(1);

                         
                        int index195_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index195_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA195_21 = input.LA(1);

                         
                        int index195_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 27;}

                         
                        input.seek(index195_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA195_22 = input.LA(1);

                         
                        int index195_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 27;}

                         
                        input.seek(index195_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA195_23 = input.LA(1);

                         
                        int index195_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 27;}

                         
                        input.seek(index195_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA195_24 = input.LA(1);

                         
                        int index195_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 27;}

                         
                        input.seek(index195_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 195, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA200_eotS =
        "\100\uffff";
    static final String DFA200_eofS =
        "\1\2\77\uffff";
    static final String DFA200_minS =
        "\1\4\1\0\5\uffff\2\0\1\uffff\17\0\2\uffff\1\0\4\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\10\0\4\uffff\1\0\17\uffff";
    static final String DFA200_maxS =
        "\1\160\1\0\5\uffff\2\0\1\uffff\17\0\2\uffff\1\0\4\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\10\0\4\uffff\1\0\17\uffff";
    static final String DFA200_acceptS =
        "\2\uffff\1\2\54\uffff\1\1\1\uffff\17\1";
    static final String DFA200_specialS =
        "\1\0\1\1\5\uffff\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\2\uffff\1\23\4\uffff\1"+
        "\24\1\uffff\1\25\1\uffff\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
        "\4\uffff\1\36\17\uffff}>";
    static final String[] DFA200_transitionS = {
            "\1\53\1\2\1\13\1\74\1\76\1\53\1\26\1\42\2\uffff\1\2\1\50\3\2"+
            "\3\uffff\1\15\1\2\1\47\1\45\3\uffff\1\46\1\62\1\30\1\51\1\44"+
            "\20\53\1\57\1\40\1\33\1\27\1\2\1\60\1\12\1\14\6\2\1\uffff\1"+
            "\2\6\uffff\1\2\1\17\1\61\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
            "\1\72\1\73\1\75\1\77\3\1\1\uffff\1\25\1\7\1\10\1\16\2\20\1\21"+
            "\1\53\1\22\1\53\1\52\1\23\1\24\11\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA200_eot = DFA.unpackEncodedString(DFA200_eotS);
    static final short[] DFA200_eof = DFA.unpackEncodedString(DFA200_eofS);
    static final char[] DFA200_min = DFA.unpackEncodedStringToUnsignedChars(DFA200_minS);
    static final char[] DFA200_max = DFA.unpackEncodedStringToUnsignedChars(DFA200_maxS);
    static final short[] DFA200_accept = DFA.unpackEncodedString(DFA200_acceptS);
    static final short[] DFA200_special = DFA.unpackEncodedString(DFA200_specialS);
    static final short[][] DFA200_transition;

    static {
        int numStates = DFA200_transitionS.length;
        DFA200_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA200_transition[i] = DFA.unpackEncodedString(DFA200_transitionS[i]);
        }
    }

    class DFA200 extends DFA {

        public DFA200(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 200;
            this.eot = DFA200_eot;
            this.eof = DFA200_eof;
            this.min = DFA200_min;
            this.max = DFA200_max;
            this.accept = DFA200_accept;
            this.special = DFA200_special;
            this.transition = DFA200_transition;
        }
        public String getDescription() {
            return "()* loopback of 898:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA200_0 = input.LA(1);

                         
                        int index200_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA200_0>=WS && LA200_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA200_0==EOF||LA200_0==SEMI||LA200_0==RPAREN||(LA200_0>=LBRACE && LA200_0<=IMPORTANT_SYM)||LA200_0==COLON||LA200_0==GREATER||(LA200_0>=DOT && LA200_0<=PIPE)||LA200_0==LESS_AND||LA200_0==RBRACKET||LA200_0==AT_SIGN) ) {s = 2;}

                        else if ( (LA200_0==SASS_MIXIN) ) {s = 7;}

                        else if ( (LA200_0==SASS_INCLUDE) ) {s = 8;}

                        else if ( (LA200_0==HASH_SYMBOL) ) {s = 10;}

                        else if ( (LA200_0==IDENT) ) {s = 11;}

                        else if ( (LA200_0==HASH) ) {s = 12;}

                        else if ( (LA200_0==GEN) ) {s = 13;}

                        else if ( (LA200_0==SASS_EXTEND) ) {s = 14;}

                        else if ( (LA200_0==SASS_VAR) ) {s = 15;}

                        else if ( ((LA200_0>=SASS_DEBUG && LA200_0<=SASS_WARN)) ) {s = 16;}

                        else if ( (LA200_0==SASS_IF) ) {s = 17;}

                        else if ( (LA200_0==SASS_FOR) ) {s = 18;}

                        else if ( (LA200_0==SASS_EACH) ) {s = 19;}

                        else if ( (LA200_0==SASS_WHILE) ) {s = 20;}

                        else if ( (LA200_0==SASS_CONTENT) ) {s = 21;}

                        else if ( (LA200_0==IMPORT_SYM) ) {s = 22;}

                        else if ( (LA200_0==SASS_AT_ROOT) ) {s = 23;}

                        else if ( (LA200_0==PAGE_SYM) ) {s = 24;}

                        else if ( (LA200_0==PLUS) ) {s = 27;}

                        else if ( (LA200_0==MINUS) ) {s = 32;}

                        else if ( (LA200_0==COMMA) ) {s = 34;}

                        else if ( (LA200_0==FONT_FACE_SYM) ) {s = 36;}

                        else if ( (LA200_0==MOZ_DOCUMENT_SYM) ) {s = 37;}

                        else if ( (LA200_0==WEBKIT_KEYFRAMES_SYM) ) {s = 38;}

                        else if ( (LA200_0==AT_IDENT) ) {s = 39;}

                        else if ( (LA200_0==MEDIA_SYM) ) {s = 40;}

                        else if ( (LA200_0==COUNTER_STYLE_SYM) ) {s = 41;}

                        else if ( (LA200_0==SASS_RETURN) ) {s = 42;}

                        else if ( (LA200_0==NAMESPACE_SYM||LA200_0==CHARSET_SYM||(LA200_0>=TOPLEFTCORNER_SYM && LA200_0<=RIGHTBOTTOM_SYM)||LA200_0==SASS_ELSE||LA200_0==SASS_FUNCTION) ) {s = 43;}

                        else if ( (LA200_0==SOLIDUS) && (synpred33_Css3())) {s = 47;}

                        else if ( (LA200_0==TILDE) ) {s = 48;}

                        else if ( (LA200_0==NUMBER) && (synpred33_Css3())) {s = 49;}

                        else if ( (LA200_0==PERCENTAGE) && (synpred33_Css3())) {s = 50;}

                        else if ( (LA200_0==LENGTH) && (synpred33_Css3())) {s = 51;}

                        else if ( (LA200_0==EMS) && (synpred33_Css3())) {s = 52;}

                        else if ( (LA200_0==REM) && (synpred33_Css3())) {s = 53;}

                        else if ( (LA200_0==EXS) && (synpred33_Css3())) {s = 54;}

                        else if ( (LA200_0==ANGLE) && (synpred33_Css3())) {s = 55;}

                        else if ( (LA200_0==TIME) && (synpred33_Css3())) {s = 56;}

                        else if ( (LA200_0==FREQ) && (synpred33_Css3())) {s = 57;}

                        else if ( (LA200_0==RESOLUTION) && (synpred33_Css3())) {s = 58;}

                        else if ( (LA200_0==DIMENSION) && (synpred33_Css3())) {s = 59;}

                        else if ( (LA200_0==STRING) && (synpred33_Css3())) {s = 60;}

                        else if ( (LA200_0==LESS_JS_STRING) && (synpred33_Css3())) {s = 61;}

                        else if ( (LA200_0==URI) && (synpred33_Css3())) {s = 62;}

                        else if ( (LA200_0==PERCENTAGE_SYMBOL) && (synpred33_Css3())) {s = 63;}

                         
                        input.seek(index200_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA200_1 = input.LA(1);

                         
                        int index200_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_Css3()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index200_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA200_7 = input.LA(1);

                         
                        int index200_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index200_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA200_8 = input.LA(1);

                         
                        int index200_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index200_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA200_10 = input.LA(1);

                         
                        int index200_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index200_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA200_11 = input.LA(1);

                         
                        int index200_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_Css3()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index200_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA200_12 = input.LA(1);

                         
                        int index200_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_Css3()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index200_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA200_13 = input.LA(1);

                         
                        int index200_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_Css3()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index200_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA200_14 = input.LA(1);

                         
                        int index200_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index200_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA200_15 = input.LA(1);

                         
                        int index200_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 63;}

                        else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}

                         
                        input.seek(index200_15);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA200_16 = input.LA(1);

                         
                        int index200_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index200_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA200_17 = input.LA(1);

                         
                        int index200_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index200_17);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA200_18 = input.LA(1);

                         
                        int index200_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index200_18);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA200_19 = input.LA(1);

                         
                        int index200_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index200_19);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA200_20 = input.LA(1);

                         
                        int index200_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index200_20);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA200_21 = input.LA(1);

                         
                        int index200_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index200_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA200_22 = input.LA(1);

                         
                        int index200_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index200_22);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA200_23 = input.LA(1);

                         
                        int index200_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index200_23);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA200_24 = input.LA(1);

                         
                        int index200_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index200_24);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA200_27 = input.LA(1);

                         
                        int index200_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_Css3()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index200_27);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA200_32 = input.LA(1);

                         
                        int index200_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_Css3()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index200_32);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA200_34 = input.LA(1);

                         
                        int index200_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_Css3()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index200_34);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA200_36 = input.LA(1);

                         
                        int index200_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index200_36);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA200_37 = input.LA(1);

                         
                        int index200_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index200_37);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA200_38 = input.LA(1);

                         
                        int index200_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index200_38);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA200_39 = input.LA(1);

                         
                        int index200_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index200_39);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA200_40 = input.LA(1);

                         
                        int index200_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index200_40);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA200_41 = input.LA(1);

                         
                        int index200_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index200_41);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA200_42 = input.LA(1);

                         
                        int index200_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index200_42);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA200_43 = input.LA(1);

                         
                        int index200_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index200_43);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA200_48 = input.LA(1);

                         
                        int index200_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_Css3()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index200_48);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 200, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA199_eotS =
        "\5\uffff";
    static final String DFA199_eofS =
        "\5\uffff";
    static final String DFA199_minS =
        "\2\4\3\uffff";
    static final String DFA199_maxS =
        "\2\146\3\uffff";
    static final String DFA199_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA199_specialS =
        "\5\uffff}>";
    static final String[] DFA199_transitionS = {
            "\1\3\1\uffff\5\3\1\2\3\uffff\1\3\6\uffff\1\3\1\uffff\2\3\3\uffff"+
            "\25\3\1\2\3\3\1\uffff\3\3\17\uffff\15\3\3\1\1\uffff\15\3",
            "\1\4\1\uffff\5\4\1\2\3\uffff\1\4\6\uffff\1\4\1\uffff\2\4\3"+
            "\uffff\25\4\1\2\3\4\1\uffff\3\4\17\uffff\15\4\3\1\1\uffff\15"+
            "\4",
            "",
            "",
            ""
    };

    static final short[] DFA199_eot = DFA.unpackEncodedString(DFA199_eotS);
    static final short[] DFA199_eof = DFA.unpackEncodedString(DFA199_eofS);
    static final char[] DFA199_min = DFA.unpackEncodedStringToUnsignedChars(DFA199_minS);
    static final char[] DFA199_max = DFA.unpackEncodedStringToUnsignedChars(DFA199_maxS);
    static final short[] DFA199_accept = DFA.unpackEncodedString(DFA199_acceptS);
    static final short[] DFA199_special = DFA.unpackEncodedString(DFA199_specialS);
    static final short[][] DFA199_transition;

    static {
        int numStates = DFA199_transitionS.length;
        DFA199_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA199_transition[i] = DFA.unpackEncodedString(DFA199_transitionS[i]);
        }
    }

    class DFA199 extends DFA {

        public DFA199(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 199;
            this.eot = DFA199_eot;
            this.eof = DFA199_eof;
            this.min = DFA199_min;
            this.max = DFA199_max;
            this.accept = DFA199_accept;
            this.special = DFA199_special;
            this.transition = DFA199_transition;
        }
        public String getDescription() {
            return "898:66: ( ws | ( ( ws )? operator ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA203_eotS =
        "\31\uffff";
    static final String DFA203_eofS =
        "\31\uffff";
    static final String DFA203_minS =
        "\1\4\1\0\27\uffff";
    static final String DFA203_maxS =
        "\1\146\1\0\27\uffff";
    static final String DFA203_acceptS =
        "\2\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
        "\1\17\1\20\1\21\1\22\1\23\1\24\1\uffff\1\25\1\26\1\1\1\2";
    static final String DFA203_specialS =
        "\1\uffff\1\0\27\uffff}>";
    static final String[] DFA203_transitionS = {
            "\1\23\1\uffff\1\1\1\15\1\21\2\23\4\uffff\1\23\6\uffff\1\20\1"+
            "\uffff\2\23\3\uffff\1\23\1\3\23\23\3\uffff\1\23\1\uffff\1\16"+
            "\1\25\1\22\17\uffff\1\23\1\2\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
            "\1\13\1\14\1\17\1\26\4\uffff\15\23",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA203_eot = DFA.unpackEncodedString(DFA203_eotS);
    static final short[] DFA203_eof = DFA.unpackEncodedString(DFA203_eofS);
    static final char[] DFA203_min = DFA.unpackEncodedStringToUnsignedChars(DFA203_minS);
    static final char[] DFA203_max = DFA.unpackEncodedStringToUnsignedChars(DFA203_maxS);
    static final short[] DFA203_accept = DFA.unpackEncodedString(DFA203_acceptS);
    static final short[] DFA203_special = DFA.unpackEncodedString(DFA203_specialS);
    static final short[][] DFA203_transition;

    static {
        int numStates = DFA203_transitionS.length;
        DFA203_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA203_transition[i] = DFA.unpackEncodedString(DFA203_transitionS[i]);
        }
    }

    class DFA203 extends DFA {

        public DFA203(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 203;
            this.eot = DFA203_eot;
            this.eof = DFA203_eof;
            this.min = DFA203_min;
            this.max = DFA203_max;
            this.accept = DFA203_accept;
            this.special = DFA203_special;
            this.transition = DFA203_transition;
        }
        public String getDescription() {
            return "904:5: ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA203_1 = input.LA(1);

                         
                        int index203_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index203_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 203, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA211_eotS =
        "\4\uffff";
    static final String DFA211_eofS =
        "\4\uffff";
    static final String DFA211_minS =
        "\2\13\2\uffff";
    static final String DFA211_maxS =
        "\2\130\2\uffff";
    static final String DFA211_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA211_specialS =
        "\4\uffff}>";
    static final String[] DFA211_transitionS = {
            "\1\3\2\uffff\1\2\107\uffff\3\1",
            "\1\3\2\uffff\1\2\107\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA211_eot = DFA.unpackEncodedString(DFA211_eotS);
    static final short[] DFA211_eof = DFA.unpackEncodedString(DFA211_eofS);
    static final char[] DFA211_min = DFA.unpackEncodedStringToUnsignedChars(DFA211_minS);
    static final char[] DFA211_max = DFA.unpackEncodedStringToUnsignedChars(DFA211_maxS);
    static final short[] DFA211_accept = DFA.unpackEncodedString(DFA211_acceptS);
    static final short[] DFA211_special = DFA.unpackEncodedString(DFA211_specialS);
    static final short[][] DFA211_transition;

    static {
        int numStates = DFA211_transitionS.length;
        DFA211_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA211_transition[i] = DFA.unpackEncodedString(DFA211_transitionS[i]);
        }
    }

    class DFA211 extends DFA {

        public DFA211(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 211;
            this.eot = DFA211_eot;
            this.eof = DFA211_eof;
            this.min = DFA211_min;
            this.max = DFA211_max;
            this.accept = DFA211_accept;
            this.special = DFA211_special;
            this.transition = DFA211_transition;
        }
        public String getDescription() {
            return "()* loopback of 961:17: ( ( ws )? COMMA ( ws )? fnAttribute )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA215_eotS =
        "\35\uffff";
    static final String DFA215_eofS =
        "\35\uffff";
    static final String DFA215_minS =
        "\1\4\3\0\1\uffff\24\0\4\uffff";
    static final String DFA215_maxS =
        "\1\146\3\0\1\uffff\24\0\4\uffff";
    static final String DFA215_acceptS =
        "\4\uffff\1\2\26\uffff\1\1\1\3";
    static final String DFA215_specialS =
        "\1\uffff\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\4\uffff}>";
    static final String[] DFA215_transitionS = {
            "\1\2\1\uffff\1\1\1\21\1\25\2\2\1\uffff\1\4\2\uffff\1\2\2\uffff"+
            "\1\4\2\uffff\1\4\1\24\1\uffff\2\2\3\uffff\1\2\1\7\23\2\1\uffff"+
            "\2\5\1\2\1\uffff\1\22\1\27\1\26\17\uffff\1\3\1\6\1\10\1\11\1"+
            "\12\1\13\1\14\1\15\1\16\1\17\1\20\1\23\1\30\4\uffff\15\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA215_eot = DFA.unpackEncodedString(DFA215_eotS);
    static final short[] DFA215_eof = DFA.unpackEncodedString(DFA215_eofS);
    static final char[] DFA215_min = DFA.unpackEncodedStringToUnsignedChars(DFA215_minS);
    static final char[] DFA215_max = DFA.unpackEncodedStringToUnsignedChars(DFA215_maxS);
    static final short[] DFA215_accept = DFA.unpackEncodedString(DFA215_acceptS);
    static final short[] DFA215_special = DFA.unpackEncodedString(DFA215_specialS);
    static final short[][] DFA215_transition;

    static {
        int numStates = DFA215_transitionS.length;
        DFA215_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA215_transition[i] = DFA.unpackEncodedString(DFA215_transitionS[i]);
        }
    }

    class DFA215 extends DFA {

        public DFA215(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 215;
            this.eot = DFA215_eot;
            this.eof = DFA215_eof;
            this.min = DFA215_min;
            this.max = DFA215_max;
            this.accept = DFA215_accept;
            this.special = DFA215_special;
            this.transition = DFA215_transition;
        }
        public String getDescription() {
            return "964:1: fnAttribute : ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | {...}? cp_expression | expression );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA215_1 = input.LA(1);

                         
                        int index215_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_Css3()) ) {s = 27;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index215_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA215_2 = input.LA(1);

                         
                        int index215_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 27;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 4;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 28;}

                         
                        input.seek(index215_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA215_3 = input.LA(1);

                         
                        int index215_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 27;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 4;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 28;}

                         
                        input.seek(index215_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA215_5 = input.LA(1);

                         
                        int index215_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index215_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA215_6 = input.LA(1);

                         
                        int index215_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index215_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA215_7 = input.LA(1);

                         
                        int index215_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index215_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA215_8 = input.LA(1);

                         
                        int index215_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index215_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA215_9 = input.LA(1);

                         
                        int index215_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index215_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA215_10 = input.LA(1);

                         
                        int index215_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index215_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA215_11 = input.LA(1);

                         
                        int index215_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index215_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA215_12 = input.LA(1);

                         
                        int index215_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index215_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA215_13 = input.LA(1);

                         
                        int index215_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index215_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA215_14 = input.LA(1);

                         
                        int index215_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index215_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA215_15 = input.LA(1);

                         
                        int index215_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index215_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA215_16 = input.LA(1);

                         
                        int index215_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index215_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA215_17 = input.LA(1);

                         
                        int index215_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index215_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA215_18 = input.LA(1);

                         
                        int index215_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index215_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA215_19 = input.LA(1);

                         
                        int index215_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index215_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA215_20 = input.LA(1);

                         
                        int index215_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index215_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA215_21 = input.LA(1);

                         
                        int index215_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index215_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA215_22 = input.LA(1);

                         
                        int index215_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index215_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA215_23 = input.LA(1);

                         
                        int index215_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 28;}

                         
                        input.seek(index215_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA215_24 = input.LA(1);

                         
                        int index215_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 28;}

                         
                        input.seek(index215_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 215, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA222_eotS =
        "\33\uffff";
    static final String DFA222_eofS =
        "\33\uffff";
    static final String DFA222_minS =
        "\1\4\27\0\3\uffff";
    static final String DFA222_maxS =
        "\1\146\27\0\3\uffff";
    static final String DFA222_acceptS =
        "\30\uffff\1\2\1\uffff\1\1";
    static final String DFA222_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\3\uffff}>";
    static final String[] DFA222_transitionS = {
            "\1\24\1\uffff\1\2\1\16\1\22\2\24\1\uffff\1\30\2\uffff\1\24\2"+
            "\uffff\1\30\3\uffff\1\21\1\uffff\2\24\3\uffff\1\24\1\4\23\24"+
            "\1\uffff\2\1\1\24\1\uffff\1\17\1\26\1\23\17\uffff\1\25\1\3\1"+
            "\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\20\1\27\4\uffff\15"+
            "\24",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA222_eot = DFA.unpackEncodedString(DFA222_eotS);
    static final short[] DFA222_eof = DFA.unpackEncodedString(DFA222_eofS);
    static final char[] DFA222_min = DFA.unpackEncodedStringToUnsignedChars(DFA222_minS);
    static final char[] DFA222_max = DFA.unpackEncodedStringToUnsignedChars(DFA222_maxS);
    static final short[] DFA222_accept = DFA.unpackEncodedString(DFA222_acceptS);
    static final short[] DFA222_special = DFA.unpackEncodedString(DFA222_specialS);
    static final short[][] DFA222_transition;

    static {
        int numStates = DFA222_transitionS.length;
        DFA222_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA222_transition[i] = DFA.unpackEncodedString(DFA222_transitionS[i]);
        }
    }

    class DFA222 extends DFA {

        public DFA222(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 222;
            this.eot = DFA222_eot;
            this.eof = DFA222_eof;
            this.min = DFA222_min;
            this.max = DFA222_max;
            this.accept = DFA222_accept;
            this.special = DFA222_special;
            this.transition = DFA222_transition;
        }
        public String getDescription() {
            return "977:1: fnAttributeValue : ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )* | {...}? cp_math_expression );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA222_1 = input.LA(1);

                         
                        int index222_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index222_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA222_2 = input.LA(1);

                         
                        int index222_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index222_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA222_3 = input.LA(1);

                         
                        int index222_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index222_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA222_4 = input.LA(1);

                         
                        int index222_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index222_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA222_5 = input.LA(1);

                         
                        int index222_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index222_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA222_6 = input.LA(1);

                         
                        int index222_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index222_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA222_7 = input.LA(1);

                         
                        int index222_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index222_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA222_8 = input.LA(1);

                         
                        int index222_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index222_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA222_9 = input.LA(1);

                         
                        int index222_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index222_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA222_10 = input.LA(1);

                         
                        int index222_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index222_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA222_11 = input.LA(1);

                         
                        int index222_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index222_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA222_12 = input.LA(1);

                         
                        int index222_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index222_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA222_13 = input.LA(1);

                         
                        int index222_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index222_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA222_14 = input.LA(1);

                         
                        int index222_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index222_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA222_15 = input.LA(1);

                         
                        int index222_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index222_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA222_16 = input.LA(1);

                         
                        int index222_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index222_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA222_17 = input.LA(1);

                         
                        int index222_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index222_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA222_18 = input.LA(1);

                         
                        int index222_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index222_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA222_19 = input.LA(1);

                         
                        int index222_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index222_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA222_20 = input.LA(1);

                         
                        int index222_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 26;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 24;}

                         
                        input.seek(index222_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA222_21 = input.LA(1);

                         
                        int index222_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 26;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 24;}

                         
                        input.seek(index222_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA222_22 = input.LA(1);

                         
                        int index222_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index222_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA222_23 = input.LA(1);

                         
                        int index222_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index222_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 222, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA221_eotS =
        "\37\uffff";
    static final String DFA221_eofS =
        "\37\uffff";
    static final String DFA221_minS =
        "\2\4\35\uffff";
    static final String DFA221_maxS =
        "\2\146\35\uffff";
    static final String DFA221_acceptS =
        "\2\uffff\1\2\34\1";
    static final String DFA221_specialS =
        "\1\1\1\0\35\uffff}>";
    static final String[] DFA221_transitionS = {
            "\1\27\1\uffff\1\5\1\21\1\25\2\27\1\2\2\uffff\1\2\1\27\6\uffff"+
            "\1\24\1\uffff\2\27\3\uffff\1\27\1\7\23\27\1\3\2\4\1\27\1\uffff"+
            "\1\22\1\31\1\26\17\uffff\1\30\1\6\1\10\1\11\1\12\1\13\1\14\1"+
            "\15\1\16\1\17\1\20\1\23\1\32\3\1\1\uffff\15\27",
            "\1\33\1\uffff\1\5\1\21\1\25\2\33\1\2\2\uffff\1\2\1\33\6\uffff"+
            "\1\24\1\uffff\2\33\3\uffff\1\33\1\7\23\33\1\3\2\4\1\33\1\uffff"+
            "\1\22\1\35\1\26\17\uffff\1\34\1\6\1\10\1\11\1\12\1\13\1\14\1"+
            "\15\1\16\1\17\1\20\1\23\1\36\3\1\1\uffff\15\33",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA221_eot = DFA.unpackEncodedString(DFA221_eotS);
    static final short[] DFA221_eof = DFA.unpackEncodedString(DFA221_eofS);
    static final char[] DFA221_min = DFA.unpackEncodedStringToUnsignedChars(DFA221_minS);
    static final char[] DFA221_max = DFA.unpackEncodedStringToUnsignedChars(DFA221_maxS);
    static final short[] DFA221_accept = DFA.unpackEncodedString(DFA221_acceptS);
    static final short[] DFA221_special = DFA.unpackEncodedString(DFA221_specialS);
    static final short[][] DFA221_transition;

    static {
        int numStates = DFA221_transitionS.length;
        DFA221_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA221_transition[i] = DFA.unpackEncodedString(DFA221_transitionS[i]);
        }
    }

    class DFA221 extends DFA {

        public DFA221(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 221;
            this.eot = DFA221_eot;
            this.eof = DFA221_eof;
            this.min = DFA221_min;
            this.max = DFA221_max;
            this.accept = DFA221_accept;
            this.special = DFA221_special;
            this.transition = DFA221_transition;
        }
        public String getDescription() {
            return "()* loopback of 979:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA221_1 = input.LA(1);

                         
                        int index221_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA221_1==COMMA||LA221_1==RPAREN) ) {s = 2;}

                        else if ( ((LA221_1>=WS && LA221_1<=COMMENT)) ) {s = 1;}

                        else if ( ((LA221_1>=MINUS && LA221_1<=PLUS)) && (synpred36_Css3())) {s = 4;}

                        else if ( (LA221_1==IDENT) && (synpred36_Css3())) {s = 5;}

                        else if ( (LA221_1==NUMBER) && (synpred36_Css3())) {s = 6;}

                        else if ( (LA221_1==PERCENTAGE) && (synpred36_Css3())) {s = 7;}

                        else if ( (LA221_1==LENGTH) && (synpred36_Css3())) {s = 8;}

                        else if ( (LA221_1==EMS) && (synpred36_Css3())) {s = 9;}

                        else if ( (LA221_1==REM) && (synpred36_Css3())) {s = 10;}

                        else if ( (LA221_1==EXS) && (synpred36_Css3())) {s = 11;}

                        else if ( (LA221_1==ANGLE) && (synpred36_Css3())) {s = 12;}

                        else if ( (LA221_1==TIME) && (synpred36_Css3())) {s = 13;}

                        else if ( (LA221_1==FREQ) && (synpred36_Css3())) {s = 14;}

                        else if ( (LA221_1==RESOLUTION) && (synpred36_Css3())) {s = 15;}

                        else if ( (LA221_1==DIMENSION) && (synpred36_Css3())) {s = 16;}

                        else if ( (LA221_1==STRING) && (synpred36_Css3())) {s = 17;}

                        else if ( (LA221_1==TILDE) && (synpred36_Css3())) {s = 18;}

                        else if ( (LA221_1==LESS_JS_STRING) && (synpred36_Css3())) {s = 19;}

                        else if ( (LA221_1==GEN) && (synpred36_Css3())) {s = 20;}

                        else if ( (LA221_1==URI) && (synpred36_Css3())) {s = 21;}

                        else if ( (LA221_1==HASH) && (synpred36_Css3())) {s = 22;}

                        else if ( (LA221_1==NAMESPACE_SYM||(LA221_1>=CHARSET_SYM && LA221_1<=IMPORT_SYM)||LA221_1==MEDIA_SYM||(LA221_1>=AT_IDENT && LA221_1<=MOZ_DOCUMENT_SYM)||LA221_1==WEBKIT_KEYFRAMES_SYM||(LA221_1>=PAGE_SYM && LA221_1<=RIGHTBOTTOM_SYM)||LA221_1==SASS_AT_ROOT||(LA221_1>=SASS_CONTENT && LA221_1<=SASS_WHILE)) && (synpred36_Css3())) {s = 27;}

                        else if ( (LA221_1==SASS_VAR) && (synpred36_Css3())) {s = 28;}

                        else if ( (LA221_1==HASH_SYMBOL) && (synpred36_Css3())) {s = 29;}

                        else if ( (LA221_1==PERCENTAGE_SYMBOL) && (synpred36_Css3())) {s = 30;}

                        else if ( (LA221_1==SOLIDUS) && (synpred36_Css3())) {s = 3;}

                         
                        input.seek(index221_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA221_0 = input.LA(1);

                         
                        int index221_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA221_0>=WS && LA221_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA221_0==COMMA||LA221_0==RPAREN) ) {s = 2;}

                        else if ( (LA221_0==SOLIDUS) && (synpred36_Css3())) {s = 3;}

                        else if ( ((LA221_0>=MINUS && LA221_0<=PLUS)) && (synpred36_Css3())) {s = 4;}

                        else if ( (LA221_0==IDENT) && (synpred36_Css3())) {s = 5;}

                        else if ( (LA221_0==NUMBER) && (synpred36_Css3())) {s = 6;}

                        else if ( (LA221_0==PERCENTAGE) && (synpred36_Css3())) {s = 7;}

                        else if ( (LA221_0==LENGTH) && (synpred36_Css3())) {s = 8;}

                        else if ( (LA221_0==EMS) && (synpred36_Css3())) {s = 9;}

                        else if ( (LA221_0==REM) && (synpred36_Css3())) {s = 10;}

                        else if ( (LA221_0==EXS) && (synpred36_Css3())) {s = 11;}

                        else if ( (LA221_0==ANGLE) && (synpred36_Css3())) {s = 12;}

                        else if ( (LA221_0==TIME) && (synpred36_Css3())) {s = 13;}

                        else if ( (LA221_0==FREQ) && (synpred36_Css3())) {s = 14;}

                        else if ( (LA221_0==RESOLUTION) && (synpred36_Css3())) {s = 15;}

                        else if ( (LA221_0==DIMENSION) && (synpred36_Css3())) {s = 16;}

                        else if ( (LA221_0==STRING) && (synpred36_Css3())) {s = 17;}

                        else if ( (LA221_0==TILDE) && (synpred36_Css3())) {s = 18;}

                        else if ( (LA221_0==LESS_JS_STRING) && (synpred36_Css3())) {s = 19;}

                        else if ( (LA221_0==GEN) && (synpred36_Css3())) {s = 20;}

                        else if ( (LA221_0==URI) && (synpred36_Css3())) {s = 21;}

                        else if ( (LA221_0==HASH) && (synpred36_Css3())) {s = 22;}

                        else if ( (LA221_0==NAMESPACE_SYM||(LA221_0>=CHARSET_SYM && LA221_0<=IMPORT_SYM)||LA221_0==MEDIA_SYM||(LA221_0>=AT_IDENT && LA221_0<=MOZ_DOCUMENT_SYM)||LA221_0==WEBKIT_KEYFRAMES_SYM||(LA221_0>=PAGE_SYM && LA221_0<=RIGHTBOTTOM_SYM)||LA221_0==SASS_AT_ROOT||(LA221_0>=SASS_CONTENT && LA221_0<=SASS_WHILE)) && (synpred36_Css3())) {s = 23;}

                        else if ( (LA221_0==SASS_VAR) && (synpred36_Css3())) {s = 24;}

                        else if ( (LA221_0==HASH_SYMBOL) && (synpred36_Css3())) {s = 25;}

                        else if ( (LA221_0==PERCENTAGE_SYMBOL) && (synpred36_Css3())) {s = 26;}

                         
                        input.seek(index221_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 221, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA220_eotS =
        "\5\uffff";
    static final String DFA220_eofS =
        "\5\uffff";
    static final String DFA220_minS =
        "\2\4\3\uffff";
    static final String DFA220_maxS =
        "\2\146\3\uffff";
    static final String DFA220_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA220_specialS =
        "\5\uffff}>";
    static final String[] DFA220_transitionS = {
            "\1\3\1\uffff\5\3\4\uffff\1\3\6\uffff\1\3\1\uffff\2\3\3\uffff"+
            "\25\3\1\2\3\3\1\uffff\3\3\17\uffff\15\3\3\1\1\uffff\15\3",
            "\1\4\1\uffff\5\4\4\uffff\1\4\6\uffff\1\4\1\uffff\2\4\3\uffff"+
            "\25\4\1\2\3\4\1\uffff\3\4\17\uffff\15\4\3\1\1\uffff\15\4",
            "",
            "",
            ""
    };

    static final short[] DFA220_eot = DFA.unpackEncodedString(DFA220_eotS);
    static final short[] DFA220_eof = DFA.unpackEncodedString(DFA220_eofS);
    static final char[] DFA220_min = DFA.unpackEncodedStringToUnsignedChars(DFA220_minS);
    static final char[] DFA220_max = DFA.unpackEncodedStringToUnsignedChars(DFA220_maxS);
    static final short[] DFA220_accept = DFA.unpackEncodedString(DFA220_acceptS);
    static final short[] DFA220_special = DFA.unpackEncodedString(DFA220_specialS);
    static final short[][] DFA220_transition;

    static {
        int numStates = DFA220_transitionS.length;
        DFA220_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA220_transition[i] = DFA.unpackEncodedString(DFA220_transitionS[i]);
        }
    }

    class DFA220 extends DFA {

        public DFA220(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 220;
            this.eot = DFA220_eot;
            this.eof = DFA220_eof;
            this.min = DFA220_min;
            this.max = DFA220_max;
            this.accept = DFA220_accept;
            this.special = DFA220_special;
            this.transition = DFA220_transition;
        }
        public String getDescription() {
            return "979:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA229_eotS =
        "\4\uffff";
    static final String DFA229_eofS =
        "\2\3\2\uffff";
    static final String DFA229_minS =
        "\2\4\2\uffff";
    static final String DFA229_maxS =
        "\2\160\2\uffff";
    static final String DFA229_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA229_specialS =
        "\4\uffff}>";
    static final String[] DFA229_transitionS = {
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\2\15\3\11\uffff\1\3",
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\2\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA229_eot = DFA.unpackEncodedString(DFA229_eotS);
    static final short[] DFA229_eof = DFA.unpackEncodedString(DFA229_eofS);
    static final char[] DFA229_min = DFA.unpackEncodedStringToUnsignedChars(DFA229_minS);
    static final char[] DFA229_max = DFA.unpackEncodedStringToUnsignedChars(DFA229_maxS);
    static final short[] DFA229_accept = DFA.unpackEncodedString(DFA229_acceptS);
    static final short[] DFA229_special = DFA.unpackEncodedString(DFA229_specialS);
    static final short[][] DFA229_transition;

    static {
        int numStates = DFA229_transitionS.length;
        DFA229_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA229_transition[i] = DFA.unpackEncodedString(DFA229_transitionS[i]);
        }
    }

    class DFA229 extends DFA {

        public DFA229(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 229;
            this.eot = DFA229_eot;
            this.eof = DFA229_eof;
            this.min = DFA229_min;
            this.max = DFA229_max;
            this.accept = DFA229_accept;
            this.special = DFA229_special;
            this.transition = DFA229_transition;
        }
        public String getDescription() {
            return "998:72: ( ( ws )? SASS_DEFAULT )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA234_eotS =
        "\61\uffff";
    static final String DFA234_eofS =
        "\1\2\60\uffff";
    static final String DFA234_minS =
        "\1\4\1\0\36\uffff\1\0\20\uffff";
    static final String DFA234_maxS =
        "\1\160\1\0\36\uffff\1\0\20\uffff";
    static final String DFA234_acceptS =
        "\2\uffff\1\2\55\uffff\1\1";
    static final String DFA234_specialS =
        "\1\uffff\1\0\36\uffff\1\1\20\uffff}>";
    static final String[] DFA234_transitionS = {
            "\3\2\2\uffff\2\2\1\40\2\uffff\4\2\4\uffff\4\2\3\uffff\1\2\1"+
            "\uffff\23\2\1\uffff\15\2\1\uffff\1\2\6\uffff\2\2\14\uffff\3"+
            "\1\16\2\11\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA234_eot = DFA.unpackEncodedString(DFA234_eotS);
    static final short[] DFA234_eof = DFA.unpackEncodedString(DFA234_eofS);
    static final char[] DFA234_min = DFA.unpackEncodedStringToUnsignedChars(DFA234_minS);
    static final char[] DFA234_max = DFA.unpackEncodedStringToUnsignedChars(DFA234_maxS);
    static final short[] DFA234_accept = DFA.unpackEncodedString(DFA234_acceptS);
    static final short[] DFA234_special = DFA.unpackEncodedString(DFA234_specialS);
    static final short[][] DFA234_transition;

    static {
        int numStates = DFA234_transitionS.length;
        DFA234_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA234_transition[i] = DFA.unpackEncodedString(DFA234_transitionS[i]);
        }
    }

    class DFA234 extends DFA {

        public DFA234(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 234;
            this.eot = DFA234_eot;
            this.eof = DFA234_eof;
            this.min = DFA234_min;
            this.max = DFA234_max;
            this.accept = DFA234_accept;
            this.special = DFA234_special;
            this.transition = DFA234_transition;
        }
        public String getDescription() {
            return "()* loopback of 1014:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA234_1 = input.LA(1);

                         
                        int index234_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_Css3()) ) {s = 48;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index234_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA234_32 = input.LA(1);

                         
                        int index234_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_Css3()) ) {s = 48;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index234_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 234, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA238_eotS =
        "\106\uffff";
    static final String DFA238_eofS =
        "\1\2\105\uffff";
    static final String DFA238_minS =
        "\1\4\1\0\1\uffff\1\0\1\uffff\2\0\1\uffff\3\0\2\uffff\3\0\1\uffff"+
        "\12\0\1\uffff\1\0\4\uffff\1\0\3\uffff\10\0\1\uffff\1\0\6\uffff\1"+
        "\0\20\uffff";
    static final String DFA238_maxS =
        "\1\160\1\0\1\uffff\1\0\1\uffff\2\0\1\uffff\3\0\2\uffff\3\0\1\uffff"+
        "\12\0\1\uffff\1\0\4\uffff\1\0\3\uffff\10\0\1\uffff\1\0\6\uffff\1"+
        "\0\20\uffff";
    static final String DFA238_acceptS =
        "\2\uffff\1\3\60\uffff\1\1\1\2\1\uffff\20\2";
    static final String DFA238_specialS =
        "\1\0\1\1\1\uffff\1\2\1\uffff\1\3\1\4\1\uffff\1\5\1\6\1\7\2\uffff"+
        "\1\10\1\11\1\12\1\uffff\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
        "\1\23\1\24\1\uffff\1\25\4\uffff\1\26\3\uffff\1\27\1\30\1\31\1\32"+
        "\1\33\1\34\1\35\1\36\1\uffff\1\37\6\uffff\1\40\20\uffff}>";
    static final String[] DFA238_transitionS = {
            "\1\56\1\2\1\6\1\101\1\103\1\56\1\27\1\2\1\105\1\uffff\1\2\1"+
            "\51\2\2\1\3\1\63\1\uffff\1\64\1\10\1\2\1\50\1\46\3\uffff\1\47"+
            "\1\67\1\31\1\52\1\45\20\56\1\uffff\1\41\1\34\1\30\1\32\1\65"+
            "\1\5\1\15\6\2\1\uffff\1\2\6\uffff\1\2\1\12\1\66\1\70\1\71\1"+
            "\72\1\73\1\74\1\75\1\76\1\77\1\100\1\102\1\104\3\1\1\2\1\26"+
            "\1\11\1\16\1\17\2\21\1\22\1\56\1\23\1\54\1\53\1\24\1\25\6\63"+
            "\2\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA238_eot = DFA.unpackEncodedString(DFA238_eotS);
    static final short[] DFA238_eof = DFA.unpackEncodedString(DFA238_eofS);
    static final char[] DFA238_min = DFA.unpackEncodedStringToUnsignedChars(DFA238_minS);
    static final char[] DFA238_max = DFA.unpackEncodedStringToUnsignedChars(DFA238_maxS);
    static final short[] DFA238_accept = DFA.unpackEncodedString(DFA238_acceptS);
    static final short[] DFA238_special = DFA.unpackEncodedString(DFA238_specialS);
    static final short[][] DFA238_transition;

    static {
        int numStates = DFA238_transitionS.length;
        DFA238_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA238_transition[i] = DFA.unpackEncodedString(DFA238_transitionS[i]);
        }
    }

    class DFA238 extends DFA {

        public DFA238(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 238;
            this.eot = DFA238_eot;
            this.eof = DFA238_eof;
            this.min = DFA238_min;
            this.max = DFA238_max;
            this.accept = DFA238_accept;
            this.special = DFA238_special;
            this.transition = DFA238_transition;
        }
        public String getDescription() {
            return "()* loopback of 1030:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA238_0 = input.LA(1);

                         
                        int index238_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA238_0>=WS && LA238_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA238_0==EOF||LA238_0==SEMI||LA238_0==COMMA||LA238_0==RPAREN||(LA238_0>=LBRACE && LA238_0<=RBRACE)||LA238_0==COLON||(LA238_0>=DOT && LA238_0<=PIPE)||LA238_0==LESS_AND||LA238_0==RBRACKET||LA238_0==SASS_DEFAULT||(LA238_0>=CP_DOTS && LA238_0<=LESS_REST)||LA238_0==AT_SIGN) ) {s = 2;}

                        else if ( (LA238_0==IMPORTANT_SYM) ) {s = 3;}

                        else if ( (LA238_0==HASH_SYMBOL) ) {s = 5;}

                        else if ( (LA238_0==IDENT) ) {s = 6;}

                        else if ( (LA238_0==GEN) ) {s = 8;}

                        else if ( (LA238_0==SASS_MIXIN) ) {s = 9;}

                        else if ( (LA238_0==SASS_VAR) ) {s = 10;}

                        else if ( (LA238_0==HASH) ) {s = 13;}

                        else if ( (LA238_0==SASS_INCLUDE) ) {s = 14;}

                        else if ( (LA238_0==SASS_EXTEND) ) {s = 15;}

                        else if ( ((LA238_0>=SASS_DEBUG && LA238_0<=SASS_WARN)) ) {s = 17;}

                        else if ( (LA238_0==SASS_IF) ) {s = 18;}

                        else if ( (LA238_0==SASS_FOR) ) {s = 19;}

                        else if ( (LA238_0==SASS_EACH) ) {s = 20;}

                        else if ( (LA238_0==SASS_WHILE) ) {s = 21;}

                        else if ( (LA238_0==SASS_CONTENT) ) {s = 22;}

                        else if ( (LA238_0==IMPORT_SYM) ) {s = 23;}

                        else if ( (LA238_0==SASS_AT_ROOT) ) {s = 24;}

                        else if ( (LA238_0==PAGE_SYM) ) {s = 25;}

                        else if ( (LA238_0==GREATER) ) {s = 26;}

                        else if ( (LA238_0==PLUS) ) {s = 28;}

                        else if ( (LA238_0==MINUS) ) {s = 33;}

                        else if ( (LA238_0==FONT_FACE_SYM) ) {s = 37;}

                        else if ( (LA238_0==MOZ_DOCUMENT_SYM) ) {s = 38;}

                        else if ( (LA238_0==WEBKIT_KEYFRAMES_SYM) ) {s = 39;}

                        else if ( (LA238_0==AT_IDENT) ) {s = 40;}

                        else if ( (LA238_0==MEDIA_SYM) ) {s = 41;}

                        else if ( (LA238_0==COUNTER_STYLE_SYM) ) {s = 42;}

                        else if ( (LA238_0==SASS_RETURN) ) {s = 43;}

                        else if ( (LA238_0==SASS_FUNCTION) ) {s = 44;}

                        else if ( (LA238_0==NAMESPACE_SYM||LA238_0==CHARSET_SYM||(LA238_0>=TOPLEFTCORNER_SYM && LA238_0<=RIGHTBOTTOM_SYM)||LA238_0==SASS_ELSE) ) {s = 46;}

                        else if ( (LA238_0==AND||(LA238_0>=OR && LA238_0<=GREATER_OR_EQ)) && (synpred38_Css3())) {s = 51;}

                        else if ( (LA238_0==NOT) && (synpred39_Css3())) {s = 52;}

                        else if ( (LA238_0==TILDE) ) {s = 53;}

                        else if ( (LA238_0==NUMBER) && (synpred39_Css3())) {s = 54;}

                        else if ( (LA238_0==PERCENTAGE) && (synpred39_Css3())) {s = 55;}

                        else if ( (LA238_0==LENGTH) && (synpred39_Css3())) {s = 56;}

                        else if ( (LA238_0==EMS) && (synpred39_Css3())) {s = 57;}

                        else if ( (LA238_0==REM) && (synpred39_Css3())) {s = 58;}

                        else if ( (LA238_0==EXS) && (synpred39_Css3())) {s = 59;}

                        else if ( (LA238_0==ANGLE) && (synpred39_Css3())) {s = 60;}

                        else if ( (LA238_0==TIME) && (synpred39_Css3())) {s = 61;}

                        else if ( (LA238_0==FREQ) && (synpred39_Css3())) {s = 62;}

                        else if ( (LA238_0==RESOLUTION) && (synpred39_Css3())) {s = 63;}

                        else if ( (LA238_0==DIMENSION) && (synpred39_Css3())) {s = 64;}

                        else if ( (LA238_0==STRING) && (synpred39_Css3())) {s = 65;}

                        else if ( (LA238_0==LESS_JS_STRING) && (synpred39_Css3())) {s = 66;}

                        else if ( (LA238_0==URI) && (synpred39_Css3())) {s = 67;}

                        else if ( (LA238_0==PERCENTAGE_SYMBOL) && (synpred39_Css3())) {s = 68;}

                        else if ( (LA238_0==LPAREN) && (synpred39_Css3())) {s = 69;}

                         
                        input.seek(index238_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA238_1 = input.LA(1);

                         
                        int index238_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Css3()) ) {s = 51;}

                        else if ( (synpred39_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index238_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA238_3 = input.LA(1);

                         
                        int index238_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index238_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA238_5 = input.LA(1);

                         
                        int index238_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index238_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA238_6 = input.LA(1);

                         
                        int index238_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index238_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA238_8 = input.LA(1);

                         
                        int index238_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index238_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA238_9 = input.LA(1);

                         
                        int index238_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 69;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index238_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA238_10 = input.LA(1);

                         
                        int index238_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 69;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}

                         
                        input.seek(index238_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA238_13 = input.LA(1);

                         
                        int index238_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index238_13);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA238_14 = input.LA(1);

                         
                        int index238_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 69;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index238_14);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA238_15 = input.LA(1);

                         
                        int index238_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 69;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index238_15);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA238_17 = input.LA(1);

                         
                        int index238_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 69;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index238_17);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA238_18 = input.LA(1);

                         
                        int index238_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 69;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index238_18);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA238_19 = input.LA(1);

                         
                        int index238_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 69;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index238_19);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA238_20 = input.LA(1);

                         
                        int index238_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 69;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index238_20);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA238_21 = input.LA(1);

                         
                        int index238_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 69;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index238_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA238_22 = input.LA(1);

                         
                        int index238_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 69;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index238_22);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA238_23 = input.LA(1);

                         
                        int index238_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 69;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index238_23);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA238_24 = input.LA(1);

                         
                        int index238_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index238_24);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA238_25 = input.LA(1);

                         
                        int index238_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index238_25);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA238_26 = input.LA(1);

                         
                        int index238_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Css3()) ) {s = 51;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index238_26);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA238_28 = input.LA(1);

                         
                        int index238_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index238_28);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA238_33 = input.LA(1);

                         
                        int index238_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index238_33);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA238_37 = input.LA(1);

                         
                        int index238_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index238_37);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA238_38 = input.LA(1);

                         
                        int index238_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index238_38);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA238_39 = input.LA(1);

                         
                        int index238_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index238_39);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA238_40 = input.LA(1);

                         
                        int index238_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index238_40);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA238_41 = input.LA(1);

                         
                        int index238_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index238_41);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA238_42 = input.LA(1);

                         
                        int index238_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index238_42);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA238_43 = input.LA(1);

                         
                        int index238_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 69;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index238_43);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA238_44 = input.LA(1);

                         
                        int index238_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 69;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index238_44);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA238_46 = input.LA(1);

                         
                        int index238_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 69;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index238_46);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA238_53 = input.LA(1);

                         
                        int index238_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index238_53);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 238, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA244_eotS =
        "\33\uffff";
    static final String DFA244_eofS =
        "\33\uffff";
    static final String DFA244_minS =
        "\1\4\30\uffff\1\0\1\uffff";
    static final String DFA244_maxS =
        "\1\146\30\uffff\1\0\1\uffff";
    static final String DFA244_acceptS =
        "\1\uffff\30\1\1\uffff\1\2";
    static final String DFA244_specialS =
        "\1\0\30\uffff\1\1\1\uffff}>";
    static final String[] DFA244_transitionS = {
            "\1\24\1\uffff\1\2\1\16\1\22\2\24\1\uffff\1\31\2\uffff\1\24\2"+
            "\uffff\1\30\3\uffff\1\21\1\uffff\2\24\3\uffff\1\24\1\4\23\24"+
            "\1\uffff\2\1\1\24\1\uffff\1\17\1\26\1\23\17\uffff\1\25\1\3\1"+
            "\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\20\1\27\4\uffff\15"+
            "\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA244_eot = DFA.unpackEncodedString(DFA244_eotS);
    static final short[] DFA244_eof = DFA.unpackEncodedString(DFA244_eofS);
    static final char[] DFA244_min = DFA.unpackEncodedStringToUnsignedChars(DFA244_minS);
    static final char[] DFA244_max = DFA.unpackEncodedStringToUnsignedChars(DFA244_maxS);
    static final short[] DFA244_accept = DFA.unpackEncodedString(DFA244_acceptS);
    static final short[] DFA244_special = DFA.unpackEncodedString(DFA244_specialS);
    static final short[][] DFA244_transition;

    static {
        int numStates = DFA244_transitionS.length;
        DFA244_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA244_transition[i] = DFA.unpackEncodedString(DFA244_transitionS[i]);
        }
    }

    class DFA244 extends DFA {

        public DFA244(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 244;
            this.eot = DFA244_eot;
            this.eof = DFA244_eof;
            this.min = DFA244_min;
            this.max = DFA244_max;
            this.accept = DFA244_accept;
            this.special = DFA244_special;
            this.transition = DFA244_transition;
        }
        public String getDescription() {
            return "1044:9: ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA244_0 = input.LA(1);

                         
                        int index244_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA244_0>=MINUS && LA244_0<=PLUS)) && (synpred40_Css3())) {s = 1;}

                        else if ( (LA244_0==IDENT) && (synpred40_Css3())) {s = 2;}

                        else if ( (LA244_0==NUMBER) && (synpred40_Css3())) {s = 3;}

                        else if ( (LA244_0==PERCENTAGE) && (synpred40_Css3())) {s = 4;}

                        else if ( (LA244_0==LENGTH) && (synpred40_Css3())) {s = 5;}

                        else if ( (LA244_0==EMS) && (synpred40_Css3())) {s = 6;}

                        else if ( (LA244_0==REM) && (synpred40_Css3())) {s = 7;}

                        else if ( (LA244_0==EXS) && (synpred40_Css3())) {s = 8;}

                        else if ( (LA244_0==ANGLE) && (synpred40_Css3())) {s = 9;}

                        else if ( (LA244_0==TIME) && (synpred40_Css3())) {s = 10;}

                        else if ( (LA244_0==FREQ) && (synpred40_Css3())) {s = 11;}

                        else if ( (LA244_0==RESOLUTION) && (synpred40_Css3())) {s = 12;}

                        else if ( (LA244_0==DIMENSION) && (synpred40_Css3())) {s = 13;}

                        else if ( (LA244_0==STRING) && (synpred40_Css3())) {s = 14;}

                        else if ( (LA244_0==TILDE) && (synpred40_Css3())) {s = 15;}

                        else if ( (LA244_0==LESS_JS_STRING) && (synpred40_Css3())) {s = 16;}

                        else if ( (LA244_0==GEN) && (synpred40_Css3())) {s = 17;}

                        else if ( (LA244_0==URI) && (synpred40_Css3())) {s = 18;}

                        else if ( (LA244_0==HASH) && (synpred40_Css3())) {s = 19;}

                        else if ( (LA244_0==NAMESPACE_SYM||(LA244_0>=CHARSET_SYM && LA244_0<=IMPORT_SYM)||LA244_0==MEDIA_SYM||(LA244_0>=AT_IDENT && LA244_0<=MOZ_DOCUMENT_SYM)||LA244_0==WEBKIT_KEYFRAMES_SYM||(LA244_0>=PAGE_SYM && LA244_0<=RIGHTBOTTOM_SYM)||LA244_0==SASS_AT_ROOT||(LA244_0>=SASS_CONTENT && LA244_0<=SASS_WHILE)) && (synpred40_Css3())) {s = 20;}

                        else if ( (LA244_0==SASS_VAR) && (synpred40_Css3())) {s = 21;}

                        else if ( (LA244_0==HASH_SYMBOL) && (synpred40_Css3())) {s = 22;}

                        else if ( (LA244_0==PERCENTAGE_SYMBOL) && (synpred40_Css3())) {s = 23;}

                        else if ( (LA244_0==IMPORTANT_SYM) && (synpred40_Css3())) {s = 24;}

                        else if ( (LA244_0==LPAREN) ) {s = 25;}

                         
                        input.seek(index244_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA244_25 = input.LA(1);

                         
                        int index244_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_Css3()) ) {s = 24;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index244_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 244, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA248_eotS =
        "\107\uffff";
    static final String DFA248_eofS =
        "\1\2\106\uffff";
    static final String DFA248_minS =
        "\1\4\1\0\4\uffff\1\0\30\uffff\1\0\5\uffff\1\0\41\uffff";
    static final String DFA248_maxS =
        "\1\160\1\0\4\uffff\1\0\30\uffff\1\0\5\uffff\1\0\41\uffff";
    static final String DFA248_acceptS =
        "\2\uffff\1\2\103\uffff\1\1";
    static final String DFA248_specialS =
        "\1\0\1\1\4\uffff\1\2\30\uffff\1\3\5\uffff\1\4\41\uffff}>";
    static final String[] DFA248_transitionS = {
            "\11\2\1\uffff\6\2\1\uffff\5\2\3\uffff\25\2\1\106\1\6\1\37\11"+
            "\2\1\45\1\2\1\uffff\1\2\6\uffff\16\2\3\1\26\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA248_eot = DFA.unpackEncodedString(DFA248_eotS);
    static final short[] DFA248_eof = DFA.unpackEncodedString(DFA248_eofS);
    static final char[] DFA248_min = DFA.unpackEncodedStringToUnsignedChars(DFA248_minS);
    static final char[] DFA248_max = DFA.unpackEncodedStringToUnsignedChars(DFA248_maxS);
    static final short[] DFA248_accept = DFA.unpackEncodedString(DFA248_acceptS);
    static final short[] DFA248_special = DFA.unpackEncodedString(DFA248_specialS);
    static final short[][] DFA248_transition;

    static {
        int numStates = DFA248_transitionS.length;
        DFA248_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA248_transition[i] = DFA.unpackEncodedString(DFA248_transitionS[i]);
        }
    }

    class DFA248 extends DFA {

        public DFA248(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 248;
            this.eot = DFA248_eot;
            this.eof = DFA248_eof;
            this.min = DFA248_min;
            this.max = DFA248_max;
            this.accept = DFA248_accept;
            this.special = DFA248_special;
            this.transition = DFA248_transition;
        }
        public String getDescription() {
            return "()* loopback of 1071:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA248_0 = input.LA(1);

                         
                        int index248_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA248_0>=WS && LA248_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA248_0==EOF||(LA248_0>=NAMESPACE_SYM && LA248_0<=LPAREN)||(LA248_0>=RPAREN && LA248_0<=AND)||(LA248_0>=NOT && LA248_0<=MOZ_DOCUMENT_SYM)||(LA248_0>=WEBKIT_KEYFRAMES_SYM && LA248_0<=RIGHTBOTTOM_SYM)||(LA248_0>=SASS_AT_ROOT && LA248_0<=SASS_EXTEND_ONLY_SELECTOR)||LA248_0==PIPE||LA248_0==LESS_AND||(LA248_0>=RBRACKET && LA248_0<=PERCENTAGE_SYMBOL)||(LA248_0>=SASS_DEFAULT && LA248_0<=LESS_REST)||LA248_0==AT_SIGN) ) {s = 2;}

                        else if ( (LA248_0==MINUS) ) {s = 6;}

                        else if ( (LA248_0==PLUS) ) {s = 31;}

                        else if ( (LA248_0==STAR) ) {s = 37;}

                        else if ( (LA248_0==SOLIDUS) && (synpred41_Css3())) {s = 70;}

                         
                        input.seek(index248_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA248_1 = input.LA(1);

                         
                        int index248_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_Css3()) ) {s = 70;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index248_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA248_6 = input.LA(1);

                         
                        int index248_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_Css3()) ) {s = 70;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index248_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA248_31 = input.LA(1);

                         
                        int index248_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_Css3()) ) {s = 70;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index248_31);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA248_37 = input.LA(1);

                         
                        int index248_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_Css3()) ) {s = 70;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index248_37);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 248, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA253_eotS =
        "\6\uffff";
    static final String DFA253_eofS =
        "\6\uffff";
    static final String DFA253_minS =
        "\2\4\3\uffff\1\4";
    static final String DFA253_maxS =
        "\2\146\3\uffff\1\146";
    static final String DFA253_acceptS =
        "\2\uffff\1\1\1\2\1\3\1\uffff";
    static final String DFA253_specialS =
        "\6\uffff}>";
    static final String[] DFA253_transitionS = {
            "\1\2\1\uffff\5\2\1\uffff\1\4\2\uffff\1\2\2\uffff\1\3\3\uffff"+
            "\1\2\1\uffff\2\2\3\uffff\25\2\1\uffff\2\1\1\2\1\uffff\3\2\17"+
            "\uffff\15\2\4\uffff\15\2",
            "\1\2\1\uffff\5\2\1\uffff\1\4\2\uffff\1\2\6\uffff\1\2\1\uffff"+
            "\2\2\3\uffff\25\2\3\uffff\1\2\1\uffff\3\2\17\uffff\15\2\3\5"+
            "\1\uffff\15\2",
            "",
            "",
            "",
            "\1\2\1\uffff\5\2\1\uffff\1\4\2\uffff\1\2\6\uffff\1\2\1\uffff"+
            "\2\2\3\uffff\25\2\3\uffff\1\2\1\uffff\3\2\17\uffff\15\2\3\5"+
            "\1\uffff\15\2"
    };

    static final short[] DFA253_eot = DFA.unpackEncodedString(DFA253_eotS);
    static final short[] DFA253_eof = DFA.unpackEncodedString(DFA253_eofS);
    static final char[] DFA253_min = DFA.unpackEncodedStringToUnsignedChars(DFA253_minS);
    static final char[] DFA253_max = DFA.unpackEncodedStringToUnsignedChars(DFA253_maxS);
    static final short[] DFA253_accept = DFA.unpackEncodedString(DFA253_acceptS);
    static final short[] DFA253_special = DFA.unpackEncodedString(DFA253_specialS);
    static final short[][] DFA253_transition;

    static {
        int numStates = DFA253_transitionS.length;
        DFA253_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA253_transition[i] = DFA.unpackEncodedString(DFA253_transitionS[i]);
        }
    }

    class DFA253 extends DFA {

        public DFA253(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 253;
            this.eot = DFA253_eot;
            this.eof = DFA253_eof;
            this.min = DFA253_min;
            this.max = DFA253_max;
            this.accept = DFA253_accept;
            this.special = DFA253_special;
            this.transition = DFA253_transition;
        }
        public String getDescription() {
            return "1076:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA258_eotS =
        "\4\uffff";
    static final String DFA258_eofS =
        "\4\uffff";
    static final String DFA258_minS =
        "\2\20\2\uffff";
    static final String DFA258_maxS =
        "\2\157\2\uffff";
    static final String DFA258_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA258_specialS =
        "\4\uffff}>";
    static final String[] DFA258_transitionS = {
            "\1\3\105\uffff\3\1\26\uffff\1\2",
            "\1\3\105\uffff\3\1\26\uffff\1\2",
            "",
            ""
    };

    static final short[] DFA258_eot = DFA.unpackEncodedString(DFA258_eotS);
    static final short[] DFA258_eof = DFA.unpackEncodedString(DFA258_eofS);
    static final char[] DFA258_min = DFA.unpackEncodedStringToUnsignedChars(DFA258_minS);
    static final char[] DFA258_max = DFA.unpackEncodedStringToUnsignedChars(DFA258_maxS);
    static final short[] DFA258_accept = DFA.unpackEncodedString(DFA258_acceptS);
    static final short[] DFA258_special = DFA.unpackEncodedString(DFA258_specialS);
    static final short[][] DFA258_transition;

    static {
        int numStates = DFA258_transitionS.length;
        DFA258_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA258_transition[i] = DFA.unpackEncodedString(DFA258_transitionS[i]);
        }
    }

    class DFA258 extends DFA {

        public DFA258(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 258;
            this.eot = DFA258_eot;
            this.eof = DFA258_eof;
            this.min = DFA258_min;
            this.max = DFA258_max;
            this.accept = DFA258_accept;
            this.special = DFA258_special;
            this.transition = DFA258_transition;
        }
        public String getDescription() {
            return "1092:81: ( ( ws )? less_mixin_guarded )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA262_eotS =
        "\4\uffff";
    static final String DFA262_eofS =
        "\4\uffff";
    static final String DFA262_minS =
        "\2\14\2\uffff";
    static final String DFA262_maxS =
        "\2\130\2\uffff";
    static final String DFA262_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA262_specialS =
        "\4\uffff}>";
    static final String[] DFA262_transitionS = {
            "\1\2\3\uffff\1\3\105\uffff\3\1",
            "\1\2\3\uffff\1\3\105\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA262_eot = DFA.unpackEncodedString(DFA262_eotS);
    static final short[] DFA262_eof = DFA.unpackEncodedString(DFA262_eofS);
    static final char[] DFA262_min = DFA.unpackEncodedStringToUnsignedChars(DFA262_minS);
    static final char[] DFA262_max = DFA.unpackEncodedStringToUnsignedChars(DFA262_maxS);
    static final short[] DFA262_accept = DFA.unpackEncodedString(DFA262_acceptS);
    static final short[] DFA262_special = DFA.unpackEncodedString(DFA262_specialS);
    static final short[][] DFA262_transition;

    static {
        int numStates = DFA262_transitionS.length;
        DFA262_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA262_transition[i] = DFA.unpackEncodedString(DFA262_transitionS[i]);
        }
    }

    class DFA262 extends DFA {

        public DFA262(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 262;
            this.eot = DFA262_eot;
            this.eof = DFA262_eof;
            this.min = DFA262_min;
            this.max = DFA262_max;
            this.accept = DFA262_accept;
            this.special = DFA262_special;
            this.transition = DFA262_transition;
        }
        public String getDescription() {
            return "1094:55: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA268_eotS =
        "\4\uffff";
    static final String DFA268_eofS =
        "\2\3\2\uffff";
    static final String DFA268_minS =
        "\2\4\2\uffff";
    static final String DFA268_maxS =
        "\2\160\2\uffff";
    static final String DFA268_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA268_specialS =
        "\4\uffff}>";
    static final String[] DFA268_transitionS = {
            "\3\3\2\uffff\3\3\1\2\2\uffff\1\3\1\uffff\2\3\3\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\3\3\1\2\2\uffff\1\3\1\uffff\2\3\3\uffff\4\3\3"+
            "\uffff\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3"+
            "\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA268_eot = DFA.unpackEncodedString(DFA268_eotS);
    static final short[] DFA268_eof = DFA.unpackEncodedString(DFA268_eofS);
    static final char[] DFA268_min = DFA.unpackEncodedStringToUnsignedChars(DFA268_minS);
    static final char[] DFA268_max = DFA.unpackEncodedStringToUnsignedChars(DFA268_maxS);
    static final short[] DFA268_accept = DFA.unpackEncodedString(DFA268_acceptS);
    static final short[] DFA268_special = DFA.unpackEncodedString(DFA268_specialS);
    static final short[][] DFA268_transition;

    static {
        int numStates = DFA268_transitionS.length;
        DFA268_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA268_transition[i] = DFA.unpackEncodedString(DFA268_transitionS[i]);
        }
    }

    class DFA268 extends DFA {

        public DFA268(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 268;
            this.eot = DFA268_eot;
            this.eof = DFA268_eof;
            this.min = DFA268_min;
            this.max = DFA268_max;
            this.accept = DFA268_accept;
            this.special = DFA268_special;
            this.transition = DFA268_transition;
        }
        public String getDescription() {
            return "1104:45: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA272_eotS =
        "\4\uffff";
    static final String DFA272_eofS =
        "\2\3\2\uffff";
    static final String DFA272_minS =
        "\2\4\2\uffff";
    static final String DFA272_maxS =
        "\2\160\2\uffff";
    static final String DFA272_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA272_specialS =
        "\4\uffff}>";
    static final String[] DFA272_transitionS = {
            "\3\3\2\uffff\3\3\1\2\2\uffff\4\3\3\uffff\4\3\3\uffff\1\3\1\uffff"+
            "\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff\3\1\1\uffff"+
            "\15\3\11\uffff\1\3",
            "\3\3\2\uffff\3\3\1\2\2\uffff\4\3\3\uffff\4\3\3\uffff\1\3\1"+
            "\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff\3"+
            "\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA272_eot = DFA.unpackEncodedString(DFA272_eotS);
    static final short[] DFA272_eof = DFA.unpackEncodedString(DFA272_eofS);
    static final char[] DFA272_min = DFA.unpackEncodedStringToUnsignedChars(DFA272_minS);
    static final char[] DFA272_max = DFA.unpackEncodedStringToUnsignedChars(DFA272_maxS);
    static final short[] DFA272_accept = DFA.unpackEncodedString(DFA272_acceptS);
    static final short[] DFA272_special = DFA.unpackEncodedString(DFA272_specialS);
    static final short[][] DFA272_transition;

    static {
        int numStates = DFA272_transitionS.length;
        DFA272_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA272_transition[i] = DFA.unpackEncodedString(DFA272_transitionS[i]);
        }
    }

    class DFA272 extends DFA {

        public DFA272(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 272;
            this.eot = DFA272_eot;
            this.eof = DFA272_eof;
            this.min = DFA272_min;
            this.max = DFA272_max;
            this.accept = DFA272_accept;
            this.special = DFA272_special;
            this.transition = DFA272_transition;
        }
        public String getDescription() {
            return "1106:57: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA274_eotS =
        "\4\uffff";
    static final String DFA274_eofS =
        "\2\3\2\uffff";
    static final String DFA274_minS =
        "\2\4\2\uffff";
    static final String DFA274_maxS =
        "\2\160\2\uffff";
    static final String DFA274_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA274_specialS =
        "\4\uffff}>";
    static final String[] DFA274_transitionS = {
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\2\2\3\3\uffff\4\3\3\uffff\1\3"+
            "\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\2\2\3\3\uffff\4\3\3\uffff\1"+
            "\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA274_eot = DFA.unpackEncodedString(DFA274_eotS);
    static final short[] DFA274_eof = DFA.unpackEncodedString(DFA274_eofS);
    static final char[] DFA274_min = DFA.unpackEncodedStringToUnsignedChars(DFA274_minS);
    static final char[] DFA274_max = DFA.unpackEncodedStringToUnsignedChars(DFA274_maxS);
    static final short[] DFA274_accept = DFA.unpackEncodedString(DFA274_acceptS);
    static final short[] DFA274_special = DFA.unpackEncodedString(DFA274_specialS);
    static final short[][] DFA274_transition;

    static {
        int numStates = DFA274_transitionS.length;
        DFA274_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA274_transition[i] = DFA.unpackEncodedString(DFA274_transitionS[i]);
        }
    }

    class DFA274 extends DFA {

        public DFA274(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 274;
            this.eot = DFA274_eot;
            this.eof = DFA274_eof;
            this.min = DFA274_min;
            this.max = DFA274_max;
            this.accept = DFA274_accept;
            this.special = DFA274_special;
            this.transition = DFA274_transition;
        }
        public String getDescription() {
            return "1106:102: ( ( ws )? cp_mixin_block )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA284_eotS =
        "\7\uffff";
    static final String DFA284_eofS =
        "\7\uffff";
    static final String DFA284_minS =
        "\3\4\1\uffff\1\4\1\uffff\1\4";
    static final String DFA284_maxS =
        "\1\146\2\155\1\uffff\1\155\1\uffff\1\155";
    static final String DFA284_acceptS =
        "\3\uffff\1\2\1\uffff\1\1\1\uffff";
    static final String DFA284_specialS =
        "\7\uffff}>";
    static final String[] DFA284_transitionS = {
            "\1\1\1\uffff\3\3\2\1\1\uffff\1\3\2\uffff\1\1\2\uffff\1\3\2\uffff"+
            "\2\3\1\uffff\2\1\3\uffff\1\1\1\3\23\1\1\uffff\2\3\1\1\1\uffff"+
            "\3\3\17\uffff\1\2\14\3\4\uffff\15\1",
            "\11\3\1\uffff\2\3\2\uffff\2\3\1\uffff\2\3\1\5\2\3\3\uffff\35"+
            "\3\4\uffff\1\3\12\uffff\15\3\3\4\1\uffff\24\3",
            "\11\3\1\uffff\2\3\2\uffff\2\3\1\uffff\2\3\1\5\2\3\3\uffff\35"+
            "\3\4\uffff\1\3\12\uffff\15\3\3\6\1\uffff\24\3",
            "",
            "\11\3\1\uffff\2\3\2\uffff\2\3\1\uffff\2\3\1\5\2\3\3\uffff\35"+
            "\3\4\uffff\1\3\12\uffff\15\3\3\4\1\uffff\24\3",
            "",
            "\11\3\1\uffff\2\3\2\uffff\2\3\1\uffff\2\3\1\5\2\3\3\uffff\35"+
            "\3\4\uffff\1\3\12\uffff\15\3\3\6\1\uffff\24\3"
    };

    static final short[] DFA284_eot = DFA.unpackEncodedString(DFA284_eotS);
    static final short[] DFA284_eof = DFA.unpackEncodedString(DFA284_eofS);
    static final char[] DFA284_min = DFA.unpackEncodedStringToUnsignedChars(DFA284_minS);
    static final char[] DFA284_max = DFA.unpackEncodedStringToUnsignedChars(DFA284_maxS);
    static final short[] DFA284_accept = DFA.unpackEncodedString(DFA284_acceptS);
    static final short[] DFA284_special = DFA.unpackEncodedString(DFA284_specialS);
    static final short[][] DFA284_transition;

    static {
        int numStates = DFA284_transitionS.length;
        DFA284_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA284_transition[i] = DFA.unpackEncodedString(DFA284_transitionS[i]);
        }
    }

    class DFA284 extends DFA {

        public DFA284(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 284;
            this.eot = DFA284_eot;
            this.eof = DFA284_eof;
            this.min = DFA284_min;
            this.max = DFA284_max;
            this.accept = DFA284_accept;
            this.special = DFA284_special;
            this.transition = DFA284_transition;
        }
        public String getDescription() {
            return "1131:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA287_eotS =
        "\5\uffff";
    static final String DFA287_eofS =
        "\5\uffff";
    static final String DFA287_minS =
        "\1\5\1\4\1\uffff\1\4\1\uffff";
    static final String DFA287_maxS =
        "\2\156\1\uffff\1\156\1\uffff";
    static final String DFA287_acceptS =
        "\2\uffff\1\2\1\uffff\1\1";
    static final String DFA287_specialS =
        "\5\uffff}>";
    static final String[] DFA287_transitionS = {
            "\1\1\5\uffff\1\1\2\uffff\1\2\136\uffff\2\2",
            "\1\4\4\uffff\2\4\3\uffff\1\2\1\4\10\uffff\2\4\3\uffff\1\4\1"+
            "\uffff\23\4\3\uffff\1\4\23\uffff\1\4\14\uffff\3\3\1\uffff\15"+
            "\4\6\uffff\2\2",
            "",
            "\1\4\4\uffff\2\4\3\uffff\1\2\1\4\10\uffff\2\4\3\uffff\1\4\1"+
            "\uffff\23\4\3\uffff\1\4\23\uffff\1\4\14\uffff\3\3\1\uffff\15"+
            "\4\6\uffff\2\2",
            ""
    };

    static final short[] DFA287_eot = DFA.unpackEncodedString(DFA287_eotS);
    static final short[] DFA287_eof = DFA.unpackEncodedString(DFA287_eofS);
    static final char[] DFA287_min = DFA.unpackEncodedStringToUnsignedChars(DFA287_minS);
    static final char[] DFA287_max = DFA.unpackEncodedStringToUnsignedChars(DFA287_maxS);
    static final short[] DFA287_accept = DFA.unpackEncodedString(DFA287_acceptS);
    static final short[] DFA287_special = DFA.unpackEncodedString(DFA287_specialS);
    static final short[][] DFA287_transition;

    static {
        int numStates = DFA287_transitionS.length;
        DFA287_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA287_transition[i] = DFA.unpackEncodedString(DFA287_transitionS[i]);
        }
    }

    class DFA287 extends DFA {

        public DFA287(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 287;
            this.eot = DFA287_eot;
            this.eof = DFA287_eof;
            this.min = DFA287_min;
            this.max = DFA287_max;
            this.accept = DFA287_accept;
            this.special = DFA287_special;
            this.transition = DFA287_transition;
        }
        public String getDescription() {
            return "()* loopback of 1146:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA301_eotS =
        "\4\uffff";
    static final String DFA301_eofS =
        "\4\uffff";
    static final String DFA301_minS =
        "\2\13\2\uffff";
    static final String DFA301_maxS =
        "\2\130\2\uffff";
    static final String DFA301_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA301_specialS =
        "\4\uffff}>";
    static final String[] DFA301_transitionS = {
            "\1\3\4\uffff\1\2\2\uffff\1\3\102\uffff\3\1",
            "\1\3\4\uffff\1\2\2\uffff\1\3\102\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA301_eot = DFA.unpackEncodedString(DFA301_eotS);
    static final short[] DFA301_eof = DFA.unpackEncodedString(DFA301_eofS);
    static final char[] DFA301_min = DFA.unpackEncodedStringToUnsignedChars(DFA301_minS);
    static final char[] DFA301_max = DFA.unpackEncodedStringToUnsignedChars(DFA301_maxS);
    static final short[] DFA301_accept = DFA.unpackEncodedString(DFA301_acceptS);
    static final short[] DFA301_special = DFA.unpackEncodedString(DFA301_specialS);
    static final short[][] DFA301_transition;

    static {
        int numStates = DFA301_transitionS.length;
        DFA301_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA301_transition[i] = DFA.unpackEncodedString(DFA301_transitionS[i]);
        }
    }

    class DFA301 extends DFA {

        public DFA301(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 301;
            this.eot = DFA301_eot;
            this.eof = DFA301_eof;
            this.min = DFA301_min;
            this.max = DFA301_max;
            this.accept = DFA301_accept;
            this.special = DFA301_special;
            this.transition = DFA301_transition;
        }
        public String getDescription() {
            return "()* loopback of 1161:34: ( ( ws )? ( COMMA | AND ) ( ws )? less_condition )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA317_eotS =
        "\4\uffff";
    static final String DFA317_eofS =
        "\4\uffff";
    static final String DFA317_minS =
        "\2\6\2\uffff";
    static final String DFA317_maxS =
        "\2\130\2\uffff";
    static final String DFA317_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA317_specialS =
        "\4\uffff}>";
    static final String[] DFA317_transitionS = {
            "\1\3\4\uffff\1\3\4\uffff\1\2\6\uffff\1\3\33\uffff\1\3\2\uffff"+
            "\1\3\1\uffff\4\3\2\uffff\1\3\2\uffff\1\3\6\uffff\1\3\15\uffff"+
            "\3\1",
            "\1\3\4\uffff\1\3\4\uffff\1\2\6\uffff\1\3\33\uffff\1\3\2\uffff"+
            "\1\3\1\uffff\4\3\2\uffff\1\3\2\uffff\1\3\6\uffff\1\3\15\uffff"+
            "\3\1",
            "",
            ""
    };

    static final short[] DFA317_eot = DFA.unpackEncodedString(DFA317_eotS);
    static final short[] DFA317_eof = DFA.unpackEncodedString(DFA317_eofS);
    static final char[] DFA317_min = DFA.unpackEncodedStringToUnsignedChars(DFA317_minS);
    static final char[] DFA317_max = DFA.unpackEncodedStringToUnsignedChars(DFA317_maxS);
    static final short[] DFA317_accept = DFA.unpackEncodedString(DFA317_acceptS);
    static final short[] DFA317_special = DFA.unpackEncodedString(DFA317_specialS);
    static final short[][] DFA317_transition;

    static {
        int numStates = DFA317_transitionS.length;
        DFA317_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA317_transition[i] = DFA.unpackEncodedString(DFA317_transitionS[i]);
        }
    }

    class DFA317 extends DFA {

        public DFA317(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 317;
            this.eot = DFA317_eot;
            this.eof = DFA317_eof;
            this.min = DFA317_min;
            this.max = DFA317_max;
            this.accept = DFA317_accept;
            this.special = DFA317_special;
            this.transition = DFA317_transition;
        }
        public String getDescription() {
            return "()* loopback of 1210:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA321_eotS =
        "\4\uffff";
    static final String DFA321_eofS =
        "\4\uffff";
    static final String DFA321_minS =
        "\2\6\2\uffff";
    static final String DFA321_maxS =
        "\2\130\2\uffff";
    static final String DFA321_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA321_specialS =
        "\4\uffff}>";
    static final String[] DFA321_transitionS = {
            "\1\3\20\uffff\1\2\33\uffff\1\3\4\uffff\3\3\33\uffff\3\1",
            "\1\3\20\uffff\1\2\33\uffff\1\3\4\uffff\3\3\33\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA321_eot = DFA.unpackEncodedString(DFA321_eotS);
    static final short[] DFA321_eof = DFA.unpackEncodedString(DFA321_eofS);
    static final char[] DFA321_min = DFA.unpackEncodedStringToUnsignedChars(DFA321_minS);
    static final char[] DFA321_max = DFA.unpackEncodedStringToUnsignedChars(DFA321_maxS);
    static final short[] DFA321_accept = DFA.unpackEncodedString(DFA321_acceptS);
    static final short[] DFA321_special = DFA.unpackEncodedString(DFA321_specialS);
    static final short[][] DFA321_transition;

    static {
        int numStates = DFA321_transitionS.length;
        DFA321_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA321_transition[i] = DFA.unpackEncodedString(DFA321_transitionS[i]);
        }
    }

    class DFA321 extends DFA {

        public DFA321(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 321;
            this.eot = DFA321_eot;
            this.eof = DFA321_eof;
            this.min = DFA321_min;
            this.max = DFA321_max;
            this.accept = DFA321_accept;
            this.special = DFA321_special;
            this.transition = DFA321_transition;
        }
        public String getDescription() {
            return "()* loopback of 1228:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA329_eotS =
        "\4\uffff";
    static final String DFA329_eofS =
        "\4\uffff";
    static final String DFA329_minS =
        "\2\4\2\uffff";
    static final String DFA329_maxS =
        "\2\161\2\uffff";
    static final String DFA329_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA329_specialS =
        "\4\uffff}>";
    static final String[] DFA329_transitionS = {
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3\1\2",
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3\1\2",
            "",
            ""
    };

    static final short[] DFA329_eot = DFA.unpackEncodedString(DFA329_eotS);
    static final short[] DFA329_eof = DFA.unpackEncodedString(DFA329_eofS);
    static final char[] DFA329_min = DFA.unpackEncodedStringToUnsignedChars(DFA329_minS);
    static final char[] DFA329_max = DFA.unpackEncodedStringToUnsignedChars(DFA329_maxS);
    static final short[] DFA329_accept = DFA.unpackEncodedString(DFA329_acceptS);
    static final short[] DFA329_special = DFA.unpackEncodedString(DFA329_specialS);
    static final short[][] DFA329_transition;

    static {
        int numStates = DFA329_transitionS.length;
        DFA329_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA329_transition[i] = DFA.unpackEncodedString(DFA329_transitionS[i]);
        }
    }

    class DFA329 extends DFA {

        public DFA329(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 329;
            this.eot = DFA329_eot;
            this.eof = DFA329_eof;
            this.min = DFA329_min;
            this.max = DFA329_max;
            this.accept = DFA329_accept;
            this.special = DFA329_special;
            this.transition = DFA329_transition;
        }
        public String getDescription() {
            return "1269:43: ( ( ws )? SASS_OPTIONAL )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA333_eotS =
        "\10\uffff";
    static final String DFA333_eofS =
        "\2\3\6\uffff";
    static final String DFA333_minS =
        "\2\4\1\6\1\uffff\2\6\1\uffff\1\6";
    static final String DFA333_maxS =
        "\2\160\1\130\1\uffff\2\130\1\uffff\1\130";
    static final String DFA333_acceptS =
        "\3\uffff\1\2\2\uffff\1\1\1\uffff";
    static final String DFA333_specialS =
        "\10\uffff}>";
    static final String[] DFA333_transitionS = {
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\7\3\1\2\5\3\11\uffff\1\3",
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\7\3\1\4\5\3\11\uffff\1\3",
            "\1\6\11\uffff\1\6\6\uffff\1\3\76\uffff\3\5",
            "",
            "\1\6\11\uffff\1\6\6\uffff\1\3\76\uffff\3\7",
            "\1\6\11\uffff\1\6\6\uffff\1\3\76\uffff\3\5",
            "",
            "\1\6\11\uffff\1\6\6\uffff\1\3\76\uffff\3\7"
    };

    static final short[] DFA333_eot = DFA.unpackEncodedString(DFA333_eotS);
    static final short[] DFA333_eof = DFA.unpackEncodedString(DFA333_eofS);
    static final char[] DFA333_min = DFA.unpackEncodedStringToUnsignedChars(DFA333_minS);
    static final char[] DFA333_max = DFA.unpackEncodedStringToUnsignedChars(DFA333_maxS);
    static final short[] DFA333_accept = DFA.unpackEncodedString(DFA333_acceptS);
    static final short[] DFA333_special = DFA.unpackEncodedString(DFA333_specialS);
    static final short[][] DFA333_transition;

    static {
        int numStates = DFA333_transitionS.length;
        DFA333_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA333_transition[i] = DFA.unpackEncodedString(DFA333_transitionS[i]);
        }
    }

    class DFA333 extends DFA {

        public DFA333(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 333;
            this.eot = DFA333_eot;
            this.eof = DFA333_eof;
            this.min = DFA333_min;
            this.max = DFA333_max;
            this.accept = DFA333_accept;
            this.special = DFA333_special;
            this.transition = DFA333_transition;
        }
        public String getDescription() {
            return "1289:63: ( ( ws )? sass_else )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA340_eotS =
        "\5\uffff";
    static final String DFA340_eofS =
        "\5\uffff";
    static final String DFA340_minS =
        "\1\141\2\6\2\uffff";
    static final String DFA340_maxS =
        "\1\141\2\130\2\uffff";
    static final String DFA340_acceptS =
        "\3\uffff\1\1\1\2";
    static final String DFA340_specialS =
        "\5\uffff}>";
    static final String[] DFA340_transitionS = {
            "\1\1",
            "\1\4\11\uffff\1\3\105\uffff\3\2",
            "\1\4\11\uffff\1\3\105\uffff\3\2",
            "",
            ""
    };

    static final short[] DFA340_eot = DFA.unpackEncodedString(DFA340_eotS);
    static final short[] DFA340_eof = DFA.unpackEncodedString(DFA340_eofS);
    static final char[] DFA340_min = DFA.unpackEncodedStringToUnsignedChars(DFA340_minS);
    static final char[] DFA340_max = DFA.unpackEncodedStringToUnsignedChars(DFA340_maxS);
    static final short[] DFA340_accept = DFA.unpackEncodedString(DFA340_acceptS);
    static final short[] DFA340_special = DFA.unpackEncodedString(DFA340_specialS);
    static final short[][] DFA340_transition;

    static {
        int numStates = DFA340_transitionS.length;
        DFA340_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA340_transition[i] = DFA.unpackEncodedString(DFA340_transitionS[i]);
        }
    }

    class DFA340 extends DFA {

        public DFA340(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 340;
            this.eot = DFA340_eot;
            this.eof = DFA340_eof;
            this.min = DFA340_min;
            this.max = DFA340_max;
            this.accept = DFA340_accept;
            this.special = DFA340_special;
            this.transition = DFA340_transition;
        }
        public String getDescription() {
            return "1292:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA339_eotS =
        "\10\uffff";
    static final String DFA339_eofS =
        "\2\3\6\uffff";
    static final String DFA339_minS =
        "\2\4\1\6\1\uffff\2\6\1\uffff\1\6";
    static final String DFA339_maxS =
        "\2\160\1\130\1\uffff\2\130\1\uffff\1\130";
    static final String DFA339_acceptS =
        "\3\uffff\1\2\2\uffff\1\1\1\uffff";
    static final String DFA339_specialS =
        "\10\uffff}>";
    static final String[] DFA339_transitionS = {
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\7\3\1\2\5\3\11\uffff\1\3",
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\15\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\7\3\1\4\5\3\11\uffff\1\3",
            "\1\6\11\uffff\1\6\6\uffff\1\3\76\uffff\3\5",
            "",
            "\1\6\11\uffff\1\6\6\uffff\1\3\76\uffff\3\7",
            "\1\6\11\uffff\1\6\6\uffff\1\3\76\uffff\3\5",
            "",
            "\1\6\11\uffff\1\6\6\uffff\1\3\76\uffff\3\7"
    };

    static final short[] DFA339_eot = DFA.unpackEncodedString(DFA339_eotS);
    static final short[] DFA339_eof = DFA.unpackEncodedString(DFA339_eofS);
    static final char[] DFA339_min = DFA.unpackEncodedStringToUnsignedChars(DFA339_minS);
    static final char[] DFA339_max = DFA.unpackEncodedStringToUnsignedChars(DFA339_maxS);
    static final short[] DFA339_accept = DFA.unpackEncodedString(DFA339_acceptS);
    static final short[] DFA339_special = DFA.unpackEncodedString(DFA339_specialS);
    static final short[][] DFA339_transition;

    static {
        int numStates = DFA339_transitionS.length;
        DFA339_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA339_transition[i] = DFA.unpackEncodedString(DFA339_transitionS[i]);
        }
    }

    class DFA339 extends DFA {

        public DFA339(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 339;
            this.eot = DFA339_eot;
            this.eof = DFA339_eof;
            this.min = DFA339_min;
            this.max = DFA339_max;
            this.accept = DFA339_accept;
            this.special = DFA339_special;
            this.transition = DFA339_transition;
        }
        public String getDescription() {
            return "1296:110: ( ( ws )? sass_else )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA360_eotS =
        "\4\uffff";
    static final String DFA360_eofS =
        "\4\uffff";
    static final String DFA360_minS =
        "\2\5\2\uffff";
    static final String DFA360_maxS =
        "\2\130\2\uffff";
    static final String DFA360_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA360_specialS =
        "\4\uffff}>";
    static final String[] DFA360_transitionS = {
            "\1\3\14\uffff\1\2\103\uffff\3\1",
            "\1\3\14\uffff\1\2\103\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA360_eot = DFA.unpackEncodedString(DFA360_eotS);
    static final short[] DFA360_eof = DFA.unpackEncodedString(DFA360_eofS);
    static final char[] DFA360_min = DFA.unpackEncodedStringToUnsignedChars(DFA360_minS);
    static final char[] DFA360_max = DFA.unpackEncodedStringToUnsignedChars(DFA360_maxS);
    static final short[] DFA360_accept = DFA.unpackEncodedString(DFA360_acceptS);
    static final short[] DFA360_special = DFA.unpackEncodedString(DFA360_specialS);
    static final short[][] DFA360_transition;

    static {
        int numStates = DFA360_transitionS.length;
        DFA360_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA360_transition[i] = DFA.unpackEncodedString(DFA360_transitionS[i]);
        }
    }

    class DFA360 extends DFA {

        public DFA360(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 360;
            this.eot = DFA360_eot;
            this.eof = DFA360_eof;
            this.min = DFA360_min;
            this.max = DFA360_max;
            this.accept = DFA360_accept;
            this.special = DFA360_special;
            this.transition = DFA360_transition;
        }
        public String getDescription() {
            return "393:22: ( ( ws )? IMPORTANT_SYM )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA383_eotS =
        "\4\uffff";
    static final String DFA383_eofS =
        "\4\uffff";
    static final String DFA383_minS =
        "\2\5\2\uffff";
    static final String DFA383_maxS =
        "\2\130\2\uffff";
    static final String DFA383_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA383_specialS =
        "\4\uffff}>";
    static final String[] DFA383_transitionS = {
            "\1\3\14\uffff\1\2\103\uffff\3\1",
            "\1\3\14\uffff\1\2\103\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA383_eot = DFA.unpackEncodedString(DFA383_eotS);
    static final short[] DFA383_eof = DFA.unpackEncodedString(DFA383_eofS);
    static final char[] DFA383_min = DFA.unpackEncodedStringToUnsignedChars(DFA383_minS);
    static final char[] DFA383_max = DFA.unpackEncodedStringToUnsignedChars(DFA383_maxS);
    static final short[] DFA383_accept = DFA.unpackEncodedString(DFA383_acceptS);
    static final short[] DFA383_special = DFA.unpackEncodedString(DFA383_specialS);
    static final short[][] DFA383_transition;

    static {
        int numStates = DFA383_transitionS.length;
        DFA383_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA383_transition[i] = DFA.unpackEncodedString(DFA383_transitionS[i]);
        }
    }

    class DFA383 extends DFA {

        public DFA383(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 383;
            this.eot = DFA383_eot;
            this.eof = DFA383_eof;
            this.min = DFA383_min;
            this.max = DFA383_max;
            this.accept = DFA383_accept;
            this.special = DFA383_special;
            this.transition = DFA383_transition;
        }
        public String getDescription() {
            return "670:22: ( ( ws )? IMPORTANT_SYM )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA385_eotS =
        "\4\uffff";
    static final String DFA385_eofS =
        "\4\uffff";
    static final String DFA385_minS =
        "\1\20\1\6\2\uffff";
    static final String DFA385_maxS =
        "\1\130\1\160\2\uffff";
    static final String DFA385_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA385_specialS =
        "\4\uffff}>";
    static final String[] DFA385_transitionS = {
            "\1\2\105\uffff\3\1",
            "\1\3\4\uffff\1\3\4\uffff\1\2\5\uffff\2\3\33\uffff\2\3\1\uffff"+
            "\12\3\1\uffff\1\3\6\uffff\1\3\15\uffff\3\1\27\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA385_eot = DFA.unpackEncodedString(DFA385_eotS);
    static final short[] DFA385_eof = DFA.unpackEncodedString(DFA385_eofS);
    static final char[] DFA385_min = DFA.unpackEncodedStringToUnsignedChars(DFA385_minS);
    static final char[] DFA385_max = DFA.unpackEncodedStringToUnsignedChars(DFA385_maxS);
    static final short[] DFA385_accept = DFA.unpackEncodedString(DFA385_acceptS);
    static final short[] DFA385_special = DFA.unpackEncodedString(DFA385_specialS);
    static final short[][] DFA385_transition;

    static {
        int numStates = DFA385_transitionS.length;
        DFA385_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA385_transition[i] = DFA.unpackEncodedString(DFA385_transitionS[i]);
        }
    }

    class DFA385 extends DFA {

        public DFA385(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 385;
            this.eot = DFA385_eot;
            this.eof = DFA385_eof;
            this.min = DFA385_min;
            this.max = DFA385_max;
            this.accept = DFA385_accept;
            this.special = DFA385_special;
            this.transition = DFA385_transition;
        }
        public String getDescription() {
            return "672:23: ( ws selectorsGroup )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA394_eotS =
        "\5\uffff";
    static final String DFA394_eofS =
        "\5\uffff";
    static final String DFA394_minS =
        "\2\4\3\uffff";
    static final String DFA394_maxS =
        "\2\146\3\uffff";
    static final String DFA394_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA394_specialS =
        "\5\uffff}>";
    static final String[] DFA394_transitionS = {
            "\1\3\1\uffff\5\3\1\2\3\uffff\1\3\6\uffff\1\3\1\uffff\2\3\3\uffff"+
            "\25\3\1\2\3\3\1\uffff\3\3\17\uffff\15\3\3\1\1\uffff\15\3",
            "\1\4\1\uffff\5\4\1\2\3\uffff\1\4\6\uffff\1\4\1\uffff\2\4\3"+
            "\uffff\25\4\1\2\3\4\1\uffff\3\4\17\uffff\15\4\3\1\1\uffff\15"+
            "\4",
            "",
            "",
            ""
    };

    static final short[] DFA394_eot = DFA.unpackEncodedString(DFA394_eotS);
    static final short[] DFA394_eof = DFA.unpackEncodedString(DFA394_eofS);
    static final char[] DFA394_min = DFA.unpackEncodedStringToUnsignedChars(DFA394_minS);
    static final char[] DFA394_max = DFA.unpackEncodedStringToUnsignedChars(DFA394_maxS);
    static final short[] DFA394_accept = DFA.unpackEncodedString(DFA394_acceptS);
    static final short[] DFA394_special = DFA.unpackEncodedString(DFA394_specialS);
    static final short[][] DFA394_transition;

    static {
        int numStates = DFA394_transitionS.length;
        DFA394_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA394_transition[i] = DFA.unpackEncodedString(DFA394_transitionS[i]);
        }
    }

    class DFA394 extends DFA {

        public DFA394(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 394;
            this.eot = DFA394_eot;
            this.eof = DFA394_eof;
            this.min = DFA394_min;
            this.max = DFA394_max;
            this.accept = DFA394_accept;
            this.special = DFA394_special;
            this.transition = DFA394_transition;
        }
        public String getDescription() {
            return "898:15: ( ws | ( ( ws )? operator ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA399_eotS =
        "\5\uffff";
    static final String DFA399_eofS =
        "\5\uffff";
    static final String DFA399_minS =
        "\2\4\3\uffff";
    static final String DFA399_maxS =
        "\2\146\3\uffff";
    static final String DFA399_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA399_specialS =
        "\5\uffff}>";
    static final String[] DFA399_transitionS = {
            "\1\3\1\uffff\5\3\4\uffff\1\3\6\uffff\1\3\1\uffff\2\3\3\uffff"+
            "\25\3\1\2\3\3\1\uffff\3\3\17\uffff\15\3\3\1\1\uffff\15\3",
            "\1\4\1\uffff\5\4\4\uffff\1\4\6\uffff\1\4\1\uffff\2\4\3\uffff"+
            "\25\4\1\2\3\4\1\uffff\3\4\17\uffff\15\4\3\1\1\uffff\15\4",
            "",
            "",
            ""
    };

    static final short[] DFA399_eot = DFA.unpackEncodedString(DFA399_eotS);
    static final short[] DFA399_eof = DFA.unpackEncodedString(DFA399_eofS);
    static final char[] DFA399_min = DFA.unpackEncodedStringToUnsignedChars(DFA399_minS);
    static final char[] DFA399_max = DFA.unpackEncodedStringToUnsignedChars(DFA399_maxS);
    static final short[] DFA399_accept = DFA.unpackEncodedString(DFA399_acceptS);
    static final short[] DFA399_special = DFA.unpackEncodedString(DFA399_specialS);
    static final short[][] DFA399_transition;

    static {
        int numStates = DFA399_transitionS.length;
        DFA399_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA399_transition[i] = DFA.unpackEncodedString(DFA399_transitionS[i]);
        }
    }

    class DFA399 extends DFA {

        public DFA399(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 399;
            this.eot = DFA399_eot;
            this.eof = DFA399_eof;
            this.min = DFA399_min;
            this.max = DFA399_max;
            this.accept = DFA399_accept;
            this.special = DFA399_special;
            this.transition = DFA399_transition;
        }
        public String getDescription() {
            return "979:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
 

    public static final BitSet FOLLOW_ws_in_styleSheet120 = new BitSet(new long[]{0xFFFBFFFFA3C08E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_charSet_in_styleSheet130 = new BitSet(new long[]{0xFFFBFFFFA3C08E70L,0x0001007FFDC00302L});
    public static final BitSet FOLLOW_ws_in_styleSheet132 = new BitSet(new long[]{0xFFFBFFFFA3C08E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_imports_in_styleSheet146 = new BitSet(new long[]{0xFFFBFFFFA3C08E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_namespaces_in_styleSheet157 = new BitSet(new long[]{0xFFFBFFFFA3C08E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_body_in_styleSheet168 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_styleSheet176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespace_in_namespaces193 = new BitSet(new long[]{0x0000000000000012L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_namespaces195 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_NAMESPACE_SYM_in_namespace211 = new BitSet(new long[]{0x00000000000001C0L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_namespace213 = new BitSet(new long[]{0x00000000000001C0L,0x0000000001C00000L});
    public static final BitSet FOLLOW_namespacePrefixName_in_namespace217 = new BitSet(new long[]{0x00000000000001C0L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_namespace219 = new BitSet(new long[]{0x00000000000001C0L,0x0000000001C00000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_namespace224 = new BitSet(new long[]{0x0000000000000020L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_namespace226 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_namespace229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_namespacePrefixName242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_resourceIdentifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARSET_SYM_in_charSet276 = new BitSet(new long[]{0x0000000000000080L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_charSet278 = new BitSet(new long[]{0x0000000000000080L,0x0000000001C00000L});
    public static final BitSet FOLLOW_charSetValue_in_charSet281 = new BitSet(new long[]{0x0000000000000020L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_charSet283 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_charSet286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_charSetValue300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_imports314 = new BitSet(new long[]{0x0000000000000020L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_imports316 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_imports319 = new BitSet(new long[]{0x0000000000000402L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_imports321 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_IMPORT_SYM_in_importItem347 = new BitSet(new long[]{0x00000000000001C0L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_importItem349 = new BitSet(new long[]{0x00000000000001C0L,0x0000000001C00000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem352 = new BitSet(new long[]{0x0123FFFFA3709652L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_ws_in_importItem362 = new BitSet(new long[]{0x0123FFFFA3709650L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_mediaQueryList_in_importItem365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_SYM_in_importItem398 = new BitSet(new long[]{0x00000000000001C0L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_importItem400 = new BitSet(new long[]{0x00000000000001C0L,0x0000000001C00000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem403 = new BitSet(new long[]{0x0123FFFFA3709E52L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_ws_in_importItem406 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_importItem409 = new BitSet(new long[]{0x00000000000001C0L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_importItem411 = new BitSet(new long[]{0x00000000000001C0L,0x0000000001C00000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem414 = new BitSet(new long[]{0x0123FFFFA3709E52L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_ws_in_importItem426 = new BitSet(new long[]{0x0123FFFFA3709650L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_mediaQueryList_in_importItem429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_SYM_in_importItem453 = new BitSet(new long[]{0x00000000000011C0L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_importItem455 = new BitSet(new long[]{0x00000000000011C0L,0x0000000001C00000L});
    public static final BitSet FOLLOW_LPAREN_in_importItem459 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LESS_IMPORT_TYPE_in_importItem461 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_importItem463 = new BitSet(new long[]{0x00000000000001C0L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_importItem465 = new BitSet(new long[]{0x00000000000001C0L,0x0000000001C00000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem470 = new BitSet(new long[]{0x0123FFFFA3709652L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_ws_in_importItem480 = new BitSet(new long[]{0x0123FFFFA3709650L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_mediaQueryList_in_importItem483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIA_SYM_in_media501 = new BitSet(new long[]{0x0123FFFFA3709650L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_ws_in_media503 = new BitSet(new long[]{0x0123FFFFA3709650L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_mediaQueryList_in_media521 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_media529 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_media536 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFDC00302L});
    public static final BitSet FOLLOW_ws_in_media538 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_syncToFollow_in_media541 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_mediaBody_in_media551 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_media558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mediaBodyItem_in_mediaBody592 = new BitSet(new long[]{0xFFFBFFFFA3C08E72L,0x0001007FFDC00302L});
    public static final BitSet FOLLOW_ws_in_mediaBody602 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_mediaBody605 = new BitSet(new long[]{0xFFFBFFFFA3C08E72L,0x0001007FFDC00302L});
    public static final BitSet FOLLOW_ws_in_mediaBody609 = new BitSet(new long[]{0xFFFBFFFFA3C08E72L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_SEMI_in_mediaBody636 = new BitSet(new long[]{0xFFFBFFFFA3C08E72L,0x0001007FFDC00302L});
    public static final BitSet FOLLOW_ws_in_mediaBody638 = new BitSet(new long[]{0xFFFBFFFFA3C08E72L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_cp_mixin_declaration_in_mediaBodyItem704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_mediaBodyItem737 = new BitSet(new long[]{0x0000000000040002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_mediaBodyItem740 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_mediaBodyItem743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_mediaBodyItem760 = new BitSet(new long[]{0x0000000000040002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_mediaBodyItem763 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_mediaBodyItem766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_mediaBodyItem805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_mediaBodyItem832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_extend_in_mediaBodyItem842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_debug_in_mediaBodyItem852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_control_in_mediaBodyItem862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_content_in_mediaBodyItem872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_mediaBodyItem882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_mediaBodyItem890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_page_in_mediaBodyItem898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fontFace_in_mediaBodyItem906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vendorAtRule_in_mediaBodyItem914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_media_in_mediaBodyItem927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList941 = new BitSet(new long[]{0x0000000000000802L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_mediaQueryList953 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_mediaQueryList956 = new BitSet(new long[]{0x0123FFFFA3709650L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_ws_in_mediaQueryList958 = new BitSet(new long[]{0x0123FFFFA3709650L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList961 = new BitSet(new long[]{0x0000000000000802L,0x0000000001C00000L});
    public static final BitSet FOLLOW_mediaQueryOperator_in_mediaQuery980 = new BitSet(new long[]{0x0100000000700040L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery982 = new BitSet(new long[]{0x0100000000700040L});
    public static final BitSet FOLLOW_mediaType_in_mediaQuery989 = new BitSet(new long[]{0x0000000000080002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery993 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AND_in_mediaQuery996 = new BitSet(new long[]{0x0000000000001000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery998 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1001 = new BitSet(new long[]{0x0000000000080002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1012 = new BitSet(new long[]{0x0000000000080002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery1016 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AND_in_mediaQuery1019 = new BitSet(new long[]{0x0000000000001000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery1021 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1024 = new BitSet(new long[]{0x0000000000080002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_cp_variable_in_mediaQuery1037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_mediaQueryOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_mediaType1065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_mediaType1069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaType1075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_mediaExpression1093 = new BitSet(new long[]{0x0123FFFFA3408650L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_ws_in_mediaExpression1095 = new BitSet(new long[]{0x0123FFFFA3408650L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_mediaFeature_in_mediaExpression1098 = new BitSet(new long[]{0x0000000000804000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_mediaFeatureValue_in_mediaExpression1100 = new BitSet(new long[]{0x0000000000004000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_mediaExpression1103 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_mediaExpression1106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_mediaFeatureValue1127 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_mediaFeatureValue1130 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_mediaFeatureValue1132 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_cp_expression_in_mediaFeatureValue1151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_mediaFeatureValue1171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_mediaFeature1191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_mediaFeature1195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_mediaFeature1203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaFeature1207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bodyItem_in_body1241 = new BitSet(new long[]{0xFFFBFFFFA3C08E72L,0x0001007FFDC00302L});
    public static final BitSet FOLLOW_ws_in_body1251 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_body1254 = new BitSet(new long[]{0xFFFBFFFFA3C08E72L,0x0001007FFDC00302L});
    public static final BitSet FOLLOW_ws_in_body1258 = new BitSet(new long[]{0xFFFBFFFFA3C08E72L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_SEMI_in_body1285 = new BitSet(new long[]{0xFFFBFFFFA3C08E72L,0x0001007FFDC00302L});
    public static final BitSet FOLLOW_ws_in_body1287 = new BitSet(new long[]{0xFFFBFFFFA3C08E72L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_cp_mixin_declaration_in_bodyItem1359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem1392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem1411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_bodyItem1420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_map_in_bodyItem1437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_bodyItem1459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_at_rule_in_bodyItem1471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_bodyItem1494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_debug_in_bodyItem1508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_control_in_bodyItem1522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_function_declaration_in_bodyItem1536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_media_in_at_rule1562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_page_in_at_rule1570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_counterStyle_in_at_rule1578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fontFace_in_at_rule1586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vendorAtRule_in_at_rule1594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moz_document_in_vendorAtRule1607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_webkitKeyframes_in_vendorAtRule1611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_generic_at_rule_in_vendorAtRule1615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_atRuleId0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_IDENT_in_generic_at_rule1643 = new BitSet(new long[]{0x00000000000100C0L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_generic_at_rule1645 = new BitSet(new long[]{0x00000000000100C0L});
    public static final BitSet FOLLOW_atRuleId_in_generic_at_rule1650 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_generic_at_rule1652 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_generic_at_rule1666 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_syncTo_RBRACE_in_generic_at_rule1677 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_generic_at_rule1687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document1698 = new BitSet(new long[]{0x000000001C000100L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_moz_document1700 = new BitSet(new long[]{0x000000001C000100L,0x0000000001C00000L});
    public static final BitSet FOLLOW_moz_document_function_in_moz_document1705 = new BitSet(new long[]{0x0000000000010800L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_moz_document1707 = new BitSet(new long[]{0x0000000000010800L});
    public static final BitSet FOLLOW_COMMA_in_moz_document1713 = new BitSet(new long[]{0x000000001C000100L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_moz_document1715 = new BitSet(new long[]{0x000000001C000100L,0x0000000001C00000L});
    public static final BitSet FOLLOW_moz_document_function_in_moz_document1718 = new BitSet(new long[]{0x0000000000010800L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_moz_document1720 = new BitSet(new long[]{0x0000000000010800L});
    public static final BitSet FOLLOW_LBRACE_in_moz_document1727 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFDC00302L});
    public static final BitSet FOLLOW_ws_in_moz_document1729 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_body_in_moz_document1734 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_moz_document1739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_moz_document_function0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes1776 = new BitSet(new long[]{0x00000000000000C0L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1778 = new BitSet(new long[]{0x00000000000000C0L});
    public static final BitSet FOLLOW_atRuleId_in_webkitKeyframes1781 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1783 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_webkitKeyframes1787 = new BitSet(new long[]{0x0000000040020040L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1789 = new BitSet(new long[]{0x0000000040020040L});
    public static final BitSet FOLLOW_webkitKeyframesBlock_in_webkitKeyframes1796 = new BitSet(new long[]{0x0000000040020040L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1798 = new BitSet(new long[]{0x0000000040020040L});
    public static final BitSet FOLLOW_RBRACE_in_webkitKeyframes1805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock1817 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock1819 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_webkitKeyframesBlock1823 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFDC00302L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock1826 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_syncToFollow_in_webkitKeyframesBlock1829 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_declarations_in_webkitKeyframesBlock1833 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_webkitKeyframesBlock1837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_webkitKeyframeSelectors1849 = new BitSet(new long[]{0x0000000000000802L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors1861 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_webkitKeyframeSelectors1864 = new BitSet(new long[]{0x0000000040000040L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors1866 = new BitSet(new long[]{0x0000000040000040L});
    public static final BitSet FOLLOW_set_in_webkitKeyframeSelectors1869 = new BitSet(new long[]{0x0000000000000802L,0x0000000001C00000L});
    public static final BitSet FOLLOW_PAGE_SYM_in_page1894 = new BitSet(new long[]{0x0000000000810040L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_page1896 = new BitSet(new long[]{0x0000000000810040L});
    public static final BitSet FOLLOW_IDENT_in_page1901 = new BitSet(new long[]{0x0000000000810000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_page1903 = new BitSet(new long[]{0x0000000000810000L});
    public static final BitSet FOLLOW_pseudoPage_in_page1910 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_page1912 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_page1925 = new BitSet(new long[]{0x472BFFFFA3428670L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_ws_in_page1927 = new BitSet(new long[]{0x472BFFFFA3428670L,0x0000007FFC000200L});
    public static final BitSet FOLLOW_propertyDeclaration_in_page1970 = new BitSet(new long[]{0x0000000000020020L,0x0000000001C00000L});
    public static final BitSet FOLLOW_margin_in_page1972 = new BitSet(new long[]{0x0000000000020020L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_page1975 = new BitSet(new long[]{0x0000000000020020L});
    public static final BitSet FOLLOW_SEMI_in_page1981 = new BitSet(new long[]{0x472BFFFFA3428670L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_ws_in_page1983 = new BitSet(new long[]{0x472BFFFFA3428670L,0x0000007FFC000200L});
    public static final BitSet FOLLOW_propertyDeclaration_in_page1988 = new BitSet(new long[]{0x0000000000020020L,0x0000000001C00000L});
    public static final BitSet FOLLOW_margin_in_page1990 = new BitSet(new long[]{0x0000000000020020L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_page1993 = new BitSet(new long[]{0x0000000000020020L});
    public static final BitSet FOLLOW_RBRACE_in_page2008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNTER_STYLE_SYM_in_counterStyle2025 = new BitSet(new long[]{0x0000000000000040L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_counterStyle2027 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_counterStyle2030 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_counterStyle2032 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_counterStyle2043 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFDC00302L});
    public static final BitSet FOLLOW_ws_in_counterStyle2045 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_counterStyle2048 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_declarations_in_counterStyle2052 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_counterStyle2063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FONT_FACE_SYM_in_fontFace2080 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_fontFace2082 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_fontFace2093 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFDC00302L});
    public static final BitSet FOLLOW_ws_in_fontFace2095 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_fontFace2098 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_declarations_in_fontFace2102 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_fontFace2113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_margin_sym_in_margin2127 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_margin2129 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_margin2132 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFDC00302L});
    public static final BitSet FOLLOW_ws_in_margin2134 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_margin2137 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_declarations_in_margin2139 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_margin2142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_margin_sym0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_pseudoPage2351 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_pseudoPage2353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_unaryOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_declaration_interpolation_expression_in_property2449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_property2457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_property2465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_property2475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_map_name_in_sass_map2502 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_sass_map2504 = new BitSet(new long[]{0x0000000000001000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_map2506 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_sass_map2509 = new BitSet(new long[]{0x472BFFFFA340CE50L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_ws_in_sass_map2511 = new BitSet(new long[]{0x472BFFFFA340CE50L,0x0000007FFC000200L});
    public static final BitSet FOLLOW_syncToFollow_in_sass_map2514 = new BitSet(new long[]{0x472BFFFFA340CE50L,0x0000007FFC000200L});
    public static final BitSet FOLLOW_sass_map_pairs_in_sass_map2533 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_sass_map2540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_sass_map_name2561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_map_pair_in_sass_map_pairs2595 = new BitSet(new long[]{0x472BFFFFA3408E52L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_ws_in_sass_map_pairs2605 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_sass_map_pairs2608 = new BitSet(new long[]{0x472BFFFFA3408E52L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_ws_in_sass_map_pairs2612 = new BitSet(new long[]{0x472BFFFFA3408E52L,0x0000007FFC000200L});
    public static final BitSet FOLLOW_COMMA_in_sass_map_pairs2639 = new BitSet(new long[]{0x472BFFFFA3408E52L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_ws_in_sass_map_pairs2641 = new BitSet(new long[]{0x472BFFFFA3408E52L,0x0000007FFC000200L});
    public static final BitSet FOLLOW_property_in_sass_map_pair2676 = new BitSet(new long[]{0x0000000000800000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_map_pair2678 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_sass_map_pair2681 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_sass_map_pair2683 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_expression_in_sass_map_pair2686 = new BitSet(new long[]{0x0000000000040002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_map_pair2689 = new BitSet(new long[]{0x0000000000040000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_prio_in_sass_map_pair2692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_AT_ROOT_in_rule2717 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_rule2720 = new BitSet(new long[]{0xFFF8000000C00840L,0x0001000000000102L});
    public static final BitSet FOLLOW_selectorsGroup_in_rule2722 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_selectorsGroup_in_rule2729 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_rule2732 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_rule2739 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFDC00302L});
    public static final BitSet FOLLOW_ws_in_rule2741 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_syncToFollow_in_rule2744 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_declarations_in_rule2754 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_rule2761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_declarations2804 = new BitSet(new long[]{0xFFFBFFFFA3C08E72L,0x0001007FFDC00302L});
    public static final BitSet FOLLOW_ws_in_declarations2814 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_declarations2817 = new BitSet(new long[]{0xFFFBFFFFA3C08E72L,0x0001007FFDC00302L});
    public static final BitSet FOLLOW_ws_in_declarations2821 = new BitSet(new long[]{0xFFFBFFFFA3C08E72L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_SEMI_in_declarations2848 = new BitSet(new long[]{0xFFFBFFFFA3C08E72L,0x0001007FFDC00302L});
    public static final BitSet FOLLOW_ws_in_declarations2850 = new BitSet(new long[]{0xFFFBFFFFA3C08E72L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_declaration2885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_map_in_declaration2898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_nested_properties_in_declaration2910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_declaration2922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_declaration2961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_declaration_in_declaration3006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_declaration3039 = new BitSet(new long[]{0x0000000000040002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_declaration3042 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_declaration3045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_declaration3062 = new BitSet(new long[]{0x0000000000040002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_declaration3065 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_declaration3068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_declaration3102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_at_rule_in_declaration3112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_control_in_declaration3122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_extend_in_declaration3132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_debug_in_declaration3142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_content_in_declaration3152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_function_return_in_declaration3162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_declaration3172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_declaration3180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_selector_interpolation_expression_in_selectorsGroup3243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_in_selectorsGroup3256 = new BitSet(new long[]{0x0000000000000802L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_selectorsGroup3259 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_selectorsGroup3262 = new BitSet(new long[]{0xFFF8000000C00840L,0x0001000001C00102L});
    public static final BitSet FOLLOW_ws_in_selectorsGroup3264 = new BitSet(new long[]{0xFFF8000000C00840L,0x0001000000000102L});
    public static final BitSet FOLLOW_selector_in_selectorsGroup3267 = new BitSet(new long[]{0x0000000000000802L,0x0000000001C00000L});
    public static final BitSet FOLLOW_combinator_in_selector3288 = new BitSet(new long[]{0xFFF8000000C00840L,0x0001000001C00102L});
    public static final BitSet FOLLOW_ws_in_selector3290 = new BitSet(new long[]{0xFFF8000000C00840L,0x0001000000000102L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_selector3295 = new BitSet(new long[]{0xFFF8000000C00842L,0x0001000001C00102L});
    public static final BitSet FOLLOW_ws_in_selector3301 = new BitSet(new long[]{0x00D0000000000000L});
    public static final BitSet FOLLOW_combinator_in_selector3304 = new BitSet(new long[]{0xFFF8000000C00840L,0x0001000001C00102L});
    public static final BitSet FOLLOW_ws_in_selector3306 = new BitSet(new long[]{0xFFF8000000C00840L,0x0001000000000102L});
    public static final BitSet FOLLOW_ws_in_selector3310 = new BitSet(new long[]{0xFFF8000000C00840L,0x0001000000000102L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_selector3314 = new BitSet(new long[]{0xFFF8000000C00842L,0x0001000001C00102L});
    public static final BitSet FOLLOW_set_in_combinator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeSelector_in_simpleSelectorSequence3362 = new BitSet(new long[]{0xFFF8000000C00842L,0x0001000001C00102L});
    public static final BitSet FOLLOW_ws_in_simpleSelectorSequence3372 = new BitSet(new long[]{0xFFF8000000C00840L,0x0001000000000102L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3375 = new BitSet(new long[]{0xFFF8000000C00842L,0x0001000001C00102L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3385 = new BitSet(new long[]{0xFFF8000000C00842L,0x0001000001C00102L});
    public static final BitSet FOLLOW_ws_in_simpleSelectorSequence3395 = new BitSet(new long[]{0xFFF8000000C00840L,0x0001000000000102L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3398 = new BitSet(new long[]{0xFFF8000000C00842L,0x0001000001C00102L});
    public static final BitSet FOLLOW_set_in_esPred0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespacePrefix_in_typeSelector3487 = new BitSet(new long[]{0xC000000000400040L,0x0000000000000002L});
    public static final BitSet FOLLOW_elementName_in_typeSelector3491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespacePrefixName_in_namespacePrefix3506 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_STAR_in_namespacePrefix3510 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_PIPE_in_namespacePrefix3514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_extend_only_selector_in_elementSubsequent3546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_selector_interpolation_in_elementSubsequent3560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cssId_in_elementSubsequent3570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cssClass_in_elementSubsequent3579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slAttribute_in_elementSubsequent3591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pseudo_in_elementSubsequent3603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_in_cssId3627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_cssId3647 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000001L});
    public static final BitSet FOLLOW_NAME_in_cssId3663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_selector_interpolation_in_cssId3683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cssClass3734 = new BitSet(new long[]{0x0000000000402040L,0x0001000000000000L});
    public static final BitSet FOLLOW_IDENT_in_cssClass3758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_IMPORT_TYPE_in_cssClass3774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_cssClass3790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_selector_interpolation_in_cssClass3808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_elementName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_slAttribute3875 = new BitSet(new long[]{0xC000000000000040L,0x0000000001C00000L});
    public static final BitSet FOLLOW_namespacePrefix_in_slAttribute3882 = new BitSet(new long[]{0xC000000000000040L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_slAttribute3885 = new BitSet(new long[]{0xC000000000000040L,0x0000000001C00000L});
    public static final BitSet FOLLOW_slAttributeName_in_slAttribute3896 = new BitSet(new long[]{0x0000000000000000L,0x0000000001C001FCL});
    public static final BitSet FOLLOW_ws_in_slAttribute3898 = new BitSet(new long[]{0x0000000000000000L,0x00000000000001FCL});
    public static final BitSet FOLLOW_set_in_slAttribute3932 = new BitSet(new long[]{0x00000000000000C0L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_slAttribute4112 = new BitSet(new long[]{0x00000000000000C0L,0x0000000001C00000L});
    public static final BitSet FOLLOW_slAttributeValue_in_slAttribute4131 = new BitSet(new long[]{0x0000000000000000L,0x0000000001C00100L});
    public static final BitSet FOLLOW_ws_in_slAttribute4149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_slAttribute4174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_slAttributeName4190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_slAttributeValue4202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_pseudo4262 = new BitSet(new long[]{0x0000000000600040L});
    public static final BitSet FOLLOW_set_in_pseudo4325 = new BitSet(new long[]{0x0000000000001002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_pseudo4382 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_pseudo4385 = new BitSet(new long[]{0x43BBFFFFE364D7D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_pseudo4387 = new BitSet(new long[]{0x43BBFFFFE364D7D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_expression_in_pseudo4393 = new BitSet(new long[]{0x0000000000004000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_pseudo4395 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_STAR_in_pseudo4401 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_pseudo4406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_pseudo4485 = new BitSet(new long[]{0x0000000000001000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_pseudo4487 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_pseudo4490 = new BitSet(new long[]{0xFFF8000000C04840L,0x0001000001C00102L});
    public static final BitSet FOLLOW_ws_in_pseudo4492 = new BitSet(new long[]{0xFFF8000000C04840L,0x0001000000000102L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_pseudo4495 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_pseudo4498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_propertyDeclaration4536 = new BitSet(new long[]{0x472BFFFFA3408650L,0x0000007FFC000200L});
    public static final BitSet FOLLOW_property_in_propertyDeclaration4539 = new BitSet(new long[]{0x0000000000800000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4541 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_propertyDeclaration4544 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4546 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_propertyValue_in_propertyDeclaration4549 = new BitSet(new long[]{0x0000000000040002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4552 = new BitSet(new long[]{0x0000000000040000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_prio_in_propertyDeclaration4555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_propertyDeclaration4567 = new BitSet(new long[]{0x472BFFFFA3408650L,0x0000007FFC000200L});
    public static final BitSet FOLLOW_property_in_propertyDeclaration4570 = new BitSet(new long[]{0x0000000000800000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4572 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_propertyDeclaration4575 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4577 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_cp_propertyValue_in_propertyDeclaration4580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_propertyValue4614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyValue_in_cp_propertyValue4622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertyValue4644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_expressionPredicate4680 = new BitSet(new long[]{0xBFFBFFFFFEFEFFF0L,0xFFFFFFFFFFFFFDFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_set_in_expressionPredicate4713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_syncTo_SEMI4814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_prio4859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_in_expression4876 = new BitSet(new long[]{0x03BFFFFFE3408FD2L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_expression4908 = new BitSet(new long[]{0x03BBFFFFE34087D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_ws_in_expression4913 = new BitSet(new long[]{0x0004000000000800L,0x0000000001C00000L});
    public static final BitSet FOLLOW_operator_in_expression4916 = new BitSet(new long[]{0x03BBFFFFE34087D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_expression4918 = new BitSet(new long[]{0x03BBFFFFE34087D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_term_in_expression4927 = new BitSet(new long[]{0x03BFFFFFE3408FD2L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_unaryOperator_in_term4952 = new BitSet(new long[]{0x03BBFFFFE34087D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_term4954 = new BitSet(new long[]{0x03BBFFFFE34087D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_function_in_term4983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_term4996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_term5008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENTAGE_in_term5020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LENGTH_in_term5032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMS_in_term5044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REM_in_term5056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXS_in_term5068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANGLE_in_term5080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIME_in_term5092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FREQ_in_term5104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RESOLUTION_in_term5116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIMENSION_in_term5128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_term5145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_term5157 = new BitSet(new long[]{0x0000000000000080L,0x0000000000100000L});
    public static final BitSet FOLLOW_set_in_term5159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_JS_STRING_in_term5180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_term5195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_URI_in_term5207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hexColor_in_term5219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_term5233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_term5247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_term_symbol_in_term5261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENTAGE_SYMBOL_in_cp_term_symbol5288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionName_in_function5304 = new BitSet(new long[]{0x0000000000001000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_function5306 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_function5311 = new BitSet(new long[]{0x03BBFFFFE364D7D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_function5313 = new BitSet(new long[]{0x03BBFFFFE364D7D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_fnAttributes_in_function5340 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_function5371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_functionName5423 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_functionName5425 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_functionName5429 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_DOT_in_functionName5432 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_functionName5434 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_fnAttribute_in_fnAttributes5458 = new BitSet(new long[]{0x0000000000000802L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_fnAttributes5461 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_fnAttributes5464 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_fnAttributes5466 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_fnAttribute_in_fnAttributes5469 = new BitSet(new long[]{0x0000000000000802L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_fnAttributes5473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fnAttributeName_in_fnAttribute5510 = new BitSet(new long[]{0x0000000000800000L,0x0000000001C00004L});
    public static final BitSet FOLLOW_ws_in_fnAttribute5512 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_fnAttribute5515 = new BitSet(new long[]{0x03BBFFFFE34497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_fnAttribute5521 = new BitSet(new long[]{0x03BBFFFFE34497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_fnAttributeValue_in_fnAttribute5524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_fnAttribute5538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_fnAttribute5550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_fnAttributeName5573 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_DOT_in_fnAttributeName5576 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_fnAttributeName5578 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_fnAttributeName5598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_in_fnAttributeValue5621 = new BitSet(new long[]{0x03BFFFFFE34087D2L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_fnAttributeValue5653 = new BitSet(new long[]{0x03BBFFFFE34087D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_ws_in_fnAttributeValue5658 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_SOLIDUS_in_fnAttributeValue5661 = new BitSet(new long[]{0x03BBFFFFE34087D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_fnAttributeValue5663 = new BitSet(new long[]{0x03BBFFFFE34087D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_term_in_fnAttributeValue5672 = new BitSet(new long[]{0x03BFFFFFE34087D2L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_cp_math_expression_in_fnAttributeValue5693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_in_hexColor5707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ws5724 = new BitSet(new long[]{0x0000000000000002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration5767 = new BitSet(new long[]{0x0000000000800000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5769 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_cp_variable_declaration5772 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5774 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration5777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration5799 = new BitSet(new long[]{0x0000000000800000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5801 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_cp_variable_declaration5804 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5806 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration5809 = new BitSet(new long[]{0x0000000000000002L,0x0000000003C00000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5812 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_SASS_DEFAULT_in_cp_variable_declaration5815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_cp_variable5854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_VAR_in_cp_variable6038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_cp_expression_list6062 = new BitSet(new long[]{0x0000000000000802L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_expression_list6081 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_cp_expression_list6084 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_cp_expression_list6086 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_expression_in_cp_expression_list6089 = new BitSet(new long[]{0x0000000000000802L,0x0000000001C00000L});
    public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression6122 = new BitSet(new long[]{0x03FBFFFFE36C97D2L,0x00001FFFFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_cp_expression6146 = new BitSet(new long[]{0x0040000000080000L,0x00001F8001C00000L});
    public static final BitSet FOLLOW_cp_expression_operator_in_cp_expression6149 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_cp_expression6151 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression6155 = new BitSet(new long[]{0x03FBFFFFE36C97D2L,0x00001FFFFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_cp_expression6174 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression6177 = new BitSet(new long[]{0x03FBFFFFE36C97D2L,0x00001FFFFDFFFE00L});
    public static final BitSet FOLLOW_set_in_cp_expression_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_cp_expression_atom6259 = new BitSet(new long[]{0x03BBFFFFE34497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_cp_expression_atom6261 = new BitSet(new long[]{0x03BBFFFFE34497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_expression_atom6292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_cp_expression_atom6308 = new BitSet(new long[]{0x03BBFFFFE364D7D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_cp_expression_atom6310 = new BitSet(new long[]{0x03BBFFFFE364D7D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_expression_atom6314 = new BitSet(new long[]{0x0000000000004000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_expression_atom6316 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_expression_atom6321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions6353 = new BitSet(new long[]{0x0000000000000002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expressions6360 = new BitSet(new long[]{0x03BBFFFFE34497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions6362 = new BitSet(new long[]{0x0000000000000002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression6396 = new BitSet(new long[]{0x401C000000000002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression6438 = new BitSet(new long[]{0x401C000000000000L});
    public static final BitSet FOLLOW_set_in_cp_math_expression6441 = new BitSet(new long[]{0x03BBFFFFE34497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression6451 = new BitSet(new long[]{0x03BBFFFFE34497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression6454 = new BitSet(new long[]{0x401C000000000002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_term_in_cp_math_expression_atom6487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom6495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryOperator_in_cp_math_expression_atom6506 = new BitSet(new long[]{0x0000000000001000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression_atom6508 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_math_expression_atom6514 = new BitSet(new long[]{0x03BBFFFFE34497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression_atom6516 = new BitSet(new long[]{0x03BBFFFFE34497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expression_atom6519 = new BitSet(new long[]{0x0000000000004000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression_atom6521 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_math_expression_atom6524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cp_mixin_declaration6563 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration6565 = new BitSet(new long[]{0x0000000000001000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6567 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration6570 = new BitSet(new long[]{0x0023FFFFA300C610L,0x0000607FFDC00200L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6572 = new BitSet(new long[]{0x0023FFFFA300C610L,0x0000607FFC000200L});
    public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration6575 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration6578 = new BitSet(new long[]{0x0000000000010000L,0x0000800001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6581 = new BitSet(new long[]{0x0000000000000000L,0x0000800001C00000L});
    public static final BitSet FOLLOW_less_mixin_guarded_in_cp_mixin_declaration6584 = new BitSet(new long[]{0x0000000000010000L,0x0000800001C00000L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_cp_mixin_declaration6608 = new BitSet(new long[]{0x0000000000000000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6610 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration6612 = new BitSet(new long[]{0x0000000000011000L,0x0000800001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6615 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration6618 = new BitSet(new long[]{0x0023FFFFA300C610L,0x0000607FFDC00200L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6620 = new BitSet(new long[]{0x0023FFFFA300C610L,0x0000607FFC000200L});
    public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration6623 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration6626 = new BitSet(new long[]{0x0000000000010000L,0x0000800001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6640 = new BitSet(new long[]{0x0000000000010000L,0x0000800001C00000L});
    public static final BitSet FOLLOW_cp_mixin_block_in_cp_mixin_declaration6643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cp_mixin_call6678 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call6680 = new BitSet(new long[]{0x0000000000001002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6683 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call6686 = new BitSet(new long[]{0x03BBFFFFE364D7D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6688 = new BitSet(new long[]{0x03BBFFFFE364D7D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call6691 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call6694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_INCLUDE_in_cp_mixin_call6718 = new BitSet(new long[]{0x0000000000000000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6720 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call6722 = new BitSet(new long[]{0x0000000000011002L,0x0000800001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6725 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call6728 = new BitSet(new long[]{0x03BBFFFFE364D7D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6730 = new BitSet(new long[]{0x03BBFFFFE364D7D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call6733 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call6736 = new BitSet(new long[]{0x0000000000010002L,0x0000800001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6741 = new BitSet(new long[]{0x0000000000010000L,0x0000800001C00000L});
    public static final BitSet FOLLOW_cp_mixin_block_in_cp_mixin_call6744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_cp_mixin_block6773 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFDC00302L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_block6775 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_syncToFollow_in_cp_mixin_block6778 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_declarations_in_cp_mixin_block6788 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_cp_mixin_block6795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_cp_mixin_name6816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6847 = new BitSet(new long[]{0x0000000000000822L,0x0000200000000000L});
    public static final BitSet FOLLOW_set_in_cp_mixin_call_args6851 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_args6859 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6862 = new BitSet(new long[]{0x0000000000000822L,0x0000200000000000L});
    public static final BitSet FOLLOW_CP_DOTS_in_cp_mixin_call_args6868 = new BitSet(new long[]{0x0000000000000002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_args6870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_cp_mixin_call_arg6904 = new BitSet(new long[]{0x0000000000800000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6906 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_cp_mixin_call_arg6909 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6911 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg6914 = new BitSet(new long[]{0x0000000000000002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg6926 = new BitSet(new long[]{0x0000000000000002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_arg_in_cp_args_list6981 = new BitSet(new long[]{0x0000000000000822L,0x0000600000000000L});
    public static final BitSet FOLLOW_set_in_cp_args_list6985 = new BitSet(new long[]{0x0023FFFFA3008610L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_ws_in_cp_args_list6995 = new BitSet(new long[]{0x0023FFFFA3008610L,0x0000007FFC000200L});
    public static final BitSet FOLLOW_cp_arg_in_cp_args_list6998 = new BitSet(new long[]{0x0000000000000822L,0x0000600000000000L});
    public static final BitSet FOLLOW_set_in_cp_args_list7005 = new BitSet(new long[]{0x0000000000000002L,0x0000600001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_args_list7013 = new BitSet(new long[]{0x0000000000000002L,0x0000600000000000L});
    public static final BitSet FOLLOW_set_in_cp_args_list7021 = new BitSet(new long[]{0x0000000000000002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_args_list7029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_cp_args_list7046 = new BitSet(new long[]{0x0000000000000002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_args_list7054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_cp_arg7077 = new BitSet(new long[]{0x0000000000800002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_arg7079 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_COLON_in_cp_arg7084 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_cp_arg7086 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_expression_in_cp_arg7089 = new BitSet(new long[]{0x0000000000000002L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_cp_arg7091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_WHEN_in_less_mixin_guarded7117 = new BitSet(new long[]{0x0000000000201000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_less_mixin_guarded7119 = new BitSet(new long[]{0x0000000000201000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded7122 = new BitSet(new long[]{0x0000000000080802L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_less_mixin_guarded7125 = new BitSet(new long[]{0x0000000000080800L});
    public static final BitSet FOLLOW_set_in_less_mixin_guarded7128 = new BitSet(new long[]{0x0000000000201000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_less_mixin_guarded7136 = new BitSet(new long[]{0x0000000000201000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded7139 = new BitSet(new long[]{0x0000000000080802L,0x0000000001C00000L});
    public static final BitSet FOLLOW_NOT_in_less_condition7165 = new BitSet(new long[]{0x0000000000001000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_less_condition7167 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_less_condition7176 = new BitSet(new long[]{0x0023FFFFA3008650L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_ws_in_less_condition7178 = new BitSet(new long[]{0x0023FFFFA3008650L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_cp_variable_in_less_condition7205 = new BitSet(new long[]{0x0040000000004000L,0x00001C0001C00004L});
    public static final BitSet FOLLOW_less_function_in_condition_in_less_condition7209 = new BitSet(new long[]{0x0040000000004000L,0x00001C0001C00004L});
    public static final BitSet FOLLOW_ws_in_less_condition7212 = new BitSet(new long[]{0x0040000000004000L,0x00001C0000000004L});
    public static final BitSet FOLLOW_less_condition_operator_in_less_condition7216 = new BitSet(new long[]{0x03BBFFFFE34497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_less_condition7218 = new BitSet(new long[]{0x03BBFFFFE34497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_math_expression_in_less_condition7221 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_less_condition7239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_fn_name_in_less_function_in_condition7261 = new BitSet(new long[]{0x0000000000001000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition7263 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_less_function_in_condition7266 = new BitSet(new long[]{0x0023FFFFA3008610L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition7268 = new BitSet(new long[]{0x0023FFFFA3008610L,0x0000007FFC000200L});
    public static final BitSet FOLLOW_cp_variable_in_less_function_in_condition7271 = new BitSet(new long[]{0x0000000000004000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition7273 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_less_function_in_condition7276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_less_fn_name7298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_less_condition_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_SIGN_in_less_selector_interpolation7356 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_less_selector_interpolation7358 = new BitSet(new long[]{0x0000000000000040L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_less_selector_interpolation7360 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_less_selector_interpolation7363 = new BitSet(new long[]{0x0000000000020000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_less_selector_interpolation7365 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_less_selector_interpolation7368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7416 = new BitSet(new long[]{0x4F48000000800842L,0x0000000001C00102L});
    public static final BitSet FOLLOW_set_in_sass_selector_interpolation_expression7444 = new BitSet(new long[]{0x4F48000000800842L,0x0000000001C00102L});
    public static final BitSet FOLLOW_ws_in_sass_selector_interpolation_expression7525 = new BitSet(new long[]{0x4F48000000800840L,0x0000000000000102L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7562 = new BitSet(new long[]{0x4F48000000800842L,0x0000000001C00102L});
    public static final BitSet FOLLOW_set_in_sass_selector_interpolation_expression7598 = new BitSet(new long[]{0x4F48000000800842L,0x0000000001C00102L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7713 = new BitSet(new long[]{0x0708000000000042L,0x0000000001C00000L});
    public static final BitSet FOLLOW_set_in_sass_declaration_interpolation_expression7741 = new BitSet(new long[]{0x0708000000000042L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_declaration_interpolation_expression7793 = new BitSet(new long[]{0x0708000000000040L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7830 = new BitSet(new long[]{0x0708000000000042L,0x0000000001C00000L});
    public static final BitSet FOLLOW_set_in_sass_declaration_interpolation_expression7866 = new BitSet(new long[]{0x0708000000000042L,0x0000000001C00000L});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var7935 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_interpolation_expression_var7937 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_expression_in_sass_interpolation_expression_var7939 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_interpolation_expression_var7941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_sass_nested_properties7981 = new BitSet(new long[]{0x0000000000800000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties7983 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_sass_nested_properties7986 = new BitSet(new long[]{0x03BBFFFFE36597D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties7988 = new BitSet(new long[]{0x03BBFFFFE36597D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_propertyValue_in_sass_nested_properties7992 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties7994 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_nested_properties7999 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFDC00302L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties8001 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_syncToFollow_in_sass_nested_properties8004 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_declarations_in_sass_nested_properties8006 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_nested_properties8009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EXTEND_in_sass_extend8030 = new BitSet(new long[]{0x0000000000000000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_extend8032 = new BitSet(new long[]{0xFFF8000000C00840L,0x0001000000000102L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_sass_extend8034 = new BitSet(new long[]{0x0000000000000002L,0x0002000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_extend8037 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_SASS_OPTIONAL_in_sass_extend8040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector8063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sass_debug8084 = new BitSet(new long[]{0x0000000000000000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_debug8094 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_expression_in_sass_debug8096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_if_in_sass_control8117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_for_in_sass_control8121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_each_in_sass_control8125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_while_in_sass_control8129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_IF_in_sass_if8150 = new BitSet(new long[]{0x0000000000000000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_if8152 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_if8154 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_if8156 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_if8159 = new BitSet(new long[]{0x0000000000000002L,0x0000000201C00000L});
    public static final BitSet FOLLOW_ws_in_sass_if8162 = new BitSet(new long[]{0x0000000000000000L,0x0000000201C00000L});
    public static final BitSet FOLLOW_sass_else_in_sass_if8165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_ELSE_in_sass_else8188 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_else8190 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_else8193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_ELSE_in_sass_else8205 = new BitSet(new long[]{0x0000000000000040L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_else8207 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_else8212 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_sass_else8216 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_else8219 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_else8221 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_else8224 = new BitSet(new long[]{0x0000000000000002L,0x0000000201C00000L});
    public static final BitSet FOLLOW_ws_in_sass_else8227 = new BitSet(new long[]{0x0000000000000000L,0x0000000201C00000L});
    public static final BitSet FOLLOW_sass_else_in_sass_else8230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_sass_control_expression8253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_FOR_in_sass_for8274 = new BitSet(new long[]{0x0000000000000000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_for8276 = new BitSet(new long[]{0x0023FFFFA3008610L,0x0000007FFC000200L});
    public static final BitSet FOLLOW_cp_variable_in_sass_for8278 = new BitSet(new long[]{0x0000000000000000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_for8280 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_for8284 = new BitSet(new long[]{0x0000000000000000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_for8288 = new BitSet(new long[]{0x03BBFFFFE34497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_math_expression_in_sass_for8290 = new BitSet(new long[]{0x0000000000000000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_for8292 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_for8296 = new BitSet(new long[]{0x0000000000000000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_for8300 = new BitSet(new long[]{0x03BBFFFFE34497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_math_expression_in_sass_for8302 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_for8304 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_for8307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EACH_in_sass_each8328 = new BitSet(new long[]{0x0000000000000000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_each8330 = new BitSet(new long[]{0x0023FFFFA3008610L,0x0000007FFC000200L});
    public static final BitSet FOLLOW_cp_variable_in_sass_each8332 = new BitSet(new long[]{0x0000000000000000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_each8334 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_each8338 = new BitSet(new long[]{0x0000000000000000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_each8342 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_expression_list_in_sass_each8344 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_each8346 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_each8349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_WHILE_in_sass_while8370 = new BitSet(new long[]{0x0000000000000000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_while8372 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_while8374 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_while8376 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_while8379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_sass_control_block8400 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFDC00302L});
    public static final BitSet FOLLOW_ws_in_sass_control_block8402 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_declarations_in_sass_control_block8405 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_control_block8408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_FUNCTION_in_sass_function_declaration8450 = new BitSet(new long[]{0x0000000000000000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration8452 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_sass_function_name_in_sass_function_declaration8454 = new BitSet(new long[]{0x0000000000001000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration8456 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_sass_function_declaration8459 = new BitSet(new long[]{0x0023FFFFA300C610L,0x0000607FFC000200L});
    public static final BitSet FOLLOW_cp_args_list_in_sass_function_declaration8461 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_sass_function_declaration8464 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration8466 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_function_declaration8469 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFDC00302L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration8471 = new BitSet(new long[]{0xFFFBFFFFA3C28E70L,0x0001007FFC000302L});
    public static final BitSet FOLLOW_declarations_in_sass_function_declaration8474 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_function_declaration8477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_sass_function_name8498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_RETURN_in_sass_function_return8519 = new BitSet(new long[]{0x0000000000000000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_sass_function_return8521 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_expression_in_sass_function_return8523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_CONTENT_in_sass_content8544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred1_Css3356 = new BitSet(new long[]{0x0123FFFFA3709650L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_mediaQueryList_in_synpred1_Css3359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred2_Css3420 = new BitSet(new long[]{0x0123FFFFA3709650L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_mediaQueryList_in_synpred2_Css3423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred3_Css3474 = new BitSet(new long[]{0x0123FFFFA3709650L,0x0000007FFDC00200L});
    public static final BitSet FOLLOW_mediaQueryList_in_synpred3_Css3477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred4_Css3596 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred4_Css3599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_synpred5_Css3670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred5_Css3675 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_synpred5_Css3677 = new BitSet(new long[]{0x0000000000001000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_synpred5_Css3679 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred5_Css3682 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_set_in_synpred5_Css3685 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_RPAREN_in_synpred5_Css3690 = new BitSet(new long[]{0xFFFFFFFFFFFFFFD0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_set_in_synpred5_Css3692 = new BitSet(new long[]{0xFFFFFFFFFFFFFFD0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_LBRACE_in_synpred5_Css3700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred6_Css3718 = new BitSet(new long[]{0x0000000000040020L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_synpred6_Css3721 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_synpred6_Css3724 = new BitSet(new long[]{0x0000000000000020L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_synpred6_Css3728 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred6_Css3731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred7_Css3754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred8_Css3777 = new BitSet(new long[]{0xFFFFFFFFFFFCFFD0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_COLON_in_synpred8_Css3789 = new BitSet(new long[]{0xFFFFFFFFFFFCFFD0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_set_in_synpred8_Css3791 = new BitSet(new long[]{0xFFFFFFFFFFFCFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_SEMI_in_synpred8_Css3801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_declaration_interpolation_expression_in_synpred9_Css3814 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_synpred9_Css3816 = new BitSet(new long[]{0xFFFFFFFFFFFCFFD0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_set_in_synpred9_Css3818 = new BitSet(new long[]{0xFFFFFFFFFFFCFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_SEMI_in_synpred9_Css3828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred10_Css3946 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred10_Css3949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred11_Css31245 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred11_Css31248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_synpred12_Css31323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred12_Css31328 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_synpred12_Css31330 = new BitSet(new long[]{0x0000000000001000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_synpred12_Css31332 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred12_Css31335 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_set_in_synpred12_Css31338 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_RPAREN_in_synpred12_Css31343 = new BitSet(new long[]{0xFFFFFFFFFFFDFFD0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_set_in_synpred12_Css31345 = new BitSet(new long[]{0xFFFFFFFFFFFDFFD0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_LBRACE_in_synpred12_Css31355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred13_Css31381 = new BitSet(new long[]{0x0000000000000020L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_synpred13_Css31383 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred13_Css31386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred14_Css31405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_map_in_synpred15_Css31433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_synpred16_Css31450 = new BitSet(new long[]{0x0000000000800000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_synpred16_Css31452 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_synpred16_Css31455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred17_Css32436 = new BitSet(new long[]{0xFFFFFFFFFF7FFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_synpred17_Css32444 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred17_Css32446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred18_Css32599 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred18_Css32602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred19_Css32808 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred19_Css32811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_synpred20_Css32882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_map_in_synpred21_Css32894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_nested_properties_in_synpred22_Css32907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_synpred23_Css32919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_synpred24_Css32936 = new BitSet(new long[]{0x0000000000800000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_synpred24_Css32938 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_synpred24_Css32941 = new BitSet(new long[]{0xFFFFFFFFFFFEFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_set_in_synpred24_Css32943 = new BitSet(new long[]{0xFFFFFFFFFFFEFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_set_in_synpred24_Css32953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_synpred25_Css32970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred25_Css32975 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_synpred25_Css32977 = new BitSet(new long[]{0x0000000000001000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_synpred25_Css32979 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred25_Css32982 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_set_in_synpred25_Css32985 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_RPAREN_in_synpred25_Css32990 = new BitSet(new long[]{0xFFFFFFFFFFFDFFD0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_set_in_synpred25_Css32992 = new BitSet(new long[]{0xFFFFFFFFFFFDFFD0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_LBRACE_in_synpred25_Css33002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred26_Css33020 = new BitSet(new long[]{0x0000000000040020L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_synpred26_Css33023 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_synpred26_Css33026 = new BitSet(new long[]{0x0000000000000020L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_synpred26_Css33030 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred26_Css33033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred27_Css33056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_AT_ROOT_in_synpred28_Css33081 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_synpred28_Css33084 = new BitSet(new long[]{0xFFF8000000C00840L,0x0001000000000102L});
    public static final BitSet FOLLOW_selectorsGroup_in_synpred28_Css33086 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_selectorsGroup_in_synpred28_Css33093 = new BitSet(new long[]{0x0000000000010000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_synpred28_Css33096 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred28_Css33099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred29_Css33225 = new BitSet(new long[]{0xFFFFFFFFFFFEFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_synpred29_Css33237 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred29_Css33239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred30_Css33366 = new BitSet(new long[]{0x3F00000000800000L});
    public static final BitSet FOLLOW_esPred_in_synpred30_Css33369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred31_Css33389 = new BitSet(new long[]{0x3F00000000800000L});
    public static final BitSet FOLLOW_esPred_in_synpred31_Css33392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred32_Css33475 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_PIPE_in_synpred32_Css33484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred33_Css34883 = new BitSet(new long[]{0x03BBFFFFE34087D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_ws_in_synpred33_Css34888 = new BitSet(new long[]{0x0004000000000800L,0x0000000001C00000L});
    public static final BitSet FOLLOW_operator_in_synpred33_Css34891 = new BitSet(new long[]{0x03BBFFFFE34087D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_synpred33_Css34893 = new BitSet(new long[]{0x03BBFFFFE34087D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_term_in_synpred33_Css34902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionName_in_synpred34_Css34975 = new BitSet(new long[]{0x0000000000001000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_ws_in_synpred34_Css34977 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred34_Css34980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fnAttributeName_in_synpred35_Css35497 = new BitSet(new long[]{0x0000000000800000L,0x0000000001C00004L});
    public static final BitSet FOLLOW_ws_in_synpred35_Css35499 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_synpred35_Css35502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred36_Css35628 = new BitSet(new long[]{0x03BBFFFFE34087D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_ws_in_synpred36_Css35633 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_SOLIDUS_in_synpred36_Css35636 = new BitSet(new long[]{0x03BBFFFFE34087D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_synpred36_Css35638 = new BitSet(new long[]{0x03BBFFFFE34087D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_term_in_synpred36_Css35647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred37_Css36070 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred37_Css36073 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFDFFFE00L});
    public static final BitSet FOLLOW_ws_in_synpred37_Css36075 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_expression_in_synpred37_Css36078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred38_Css36139 = new BitSet(new long[]{0x0040000000080000L,0x00001F8001C00000L});
    public static final BitSet FOLLOW_cp_expression_operator_in_synpred38_Css36142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred39_Css36168 = new BitSet(new long[]{0x03BBFFFFE36497D0L,0x0000007FFC3FFE00L});
    public static final BitSet FOLLOW_cp_expression_atom_in_synpred39_Css36171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_math_expression_in_synpred40_Css36289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred41_Css36422 = new BitSet(new long[]{0x401C000000000000L});
    public static final BitSet FOLLOW_set_in_synpred41_Css36425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred42_Css37413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred43_Css37559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred44_Css37710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred45_Css37827 = new BitSet(new long[]{0x0000000000000002L});

}