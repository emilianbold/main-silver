# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 2012 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.
#
# Contributor(s):
#
# Portions Copyrighted 2012 Sun Microsystems, Inc.

TAG_autoescape=<p style="font-weight: bold; font-size: 1.2em">autoescape</p>\
<p>\
Whether automatic escaping is enabled or not, you can mark a section of a template to be escaped or not by using the <code>autoescape</code> tag:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{# The following syntax works as of Twig 1.8 -- see the note below for previous versions #}\n\
\n\
{% autoescape %}\n\
\    Everything will be automatically escaped in this block\n\
\    using the HTML strategy\n\
{% endautoescape %}\n\
\n\
{% autoescape 'html' %}\n\
\    Everything will be automatically escaped in this block\n\
\    using the HTML strategy\n\
{% endautoescape %}\n\
\n\
{% autoescape 'js' %}\n\
\    Everything will be automatically escaped in this block\n\
\    using the js escaping strategy\n\
{% endautoescape %}\n\
\n\
{% autoescape false %}\n\
\    Everything will be outputted as is in this block\n\
{% endautoescape %}\n\
</code></pre>

TAG_block=<p style="font-weight: bold; font-size: 1.2em">block</p>\
<p>\
Blocks are used for inheritance and act as placeholders and replacements at the same time. They are documented in detail in the documentation for the <code>extends</code> tag.\
</p>\
<p>\
Block names should consist of alphanumeric characters, and underscores. Dashes are not permitted.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{% block head %}\n\
\    &lt;link rel="stylesheet" href="style.css" /&gt;\n\
\    &lt;title&gt;{% block title %}{% endblock %} - My Webpage&lt;/title&gt;\n\
{% endblock %}\n\
</code></pre>

TAG_do=<p style="font-weight: bold; font-size: 1.2em">do</p>\
<p>\
The <code>do</code> tag works exactly like the regular variable expression (<code>{{ ... }}</code>) just that it doesn't print anything:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{% do 1 + 2 %}\n\
</code></pre>

TAG_embed=<p style="font-weight: bold; font-size: 1.2em">embed</p>\
<p>\
The <code>embed</code> tag combines the behaviour of <code>include</code> and <code>extends</code>. It allows you to include another template's contents, just like <code>include</code> does. But it also allows you to override any block defined inside the included template, like when extending a template.\
</p><p>\
Think of an embedded template as a "micro layout skeleton".\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{% embed "teasers_skeleton.twig" %}\n\
\    {# These blocks are defined in "teasers_skeleton.twig" #}\n\
\    {# and we override them right here:                    #}\n\
\    {% block left_teaser %}\n\
\        Some content for the left teaser box\n\
\    {% endblock %}\n\
\    {% block right_teaser %}\n\
\        Some content for the right teaser box\n\
\    {% endblock %}\n\
{% endembed %}\n\
</code></pre>

TAG_extends=<p style="font-weight: bold; font-size: 1.2em">extends</p>\
<p>\
The extends tag can be used to extend a template from another one.\
</p><p>\
Like PHP, Twig does not support multiple inheritance. So you can only have one extends tag called per rendering. However, Twig supports horizontal reuse.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>\
Let's define a base template, base.html, which defines a simple HTML skeleton document:\
</p>\
<pre><code>\n\
&lt;!DOCTYPE html>\n\
&lt;html>\n\
\    &lt;head>\n\
\        {% block head %}\n\
\            &lt;link rel="stylesheet" href="style.css" />\n\
\            &lt;title>{% block title %}{% endblock %} - My Webpage<&lt;/title>\n\
\        {% endblock %}\n\
\    &lt;/head>\n\
\    &lt;body>\n\
\        &lt;div id="content">{% block content %}{% endblock %}&lt;/div>\n\
\        &lt;div id="footer">\n\
\            {% block footer %}\n\
\                &copy; Copyright 2011 by &lt;a href="http://domain.invalid/">you&lt;/a>.\n\
\            {% endblock %}\n\
\        &lt;/div>\n\
\    &lt;/body>\n\
&lt;/html>\n\
</code></pre>\
<p>\
A child template might look like this:\
</p>\
<pre><code>\n\
{% extends "base.html" %}\n\
\n\
{% block title %}Index{% endblock %}\n\
{% block head %}\n\
\    {{ parent() }}\n\
\    &lt;style type="text/css">\n\
\        .important { color: #336699; }\n\
\    &lt;/style>\n\
{% endblock %}\n\
{% block content %}\n\
\    &lt;h1>Index&lt;/h1>\n\
\    &lt;p class="important">\n\
\        Welcome on my awesome homepage.\n\
\    &lt;/p>\n\
{% endblock %}\n\
</code></pre>

TAG_filter=<p style="font-weight: bold; font-size: 1.2em">filter</p>\
<p>\
Filter sections allow you to apply regular Twig filters on a block of template data. Just wrap the code in the special <code>filter</code> section:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{% filter lower|escape %}\n\
\    &lt;strong>SOME TEXT&lt;/strong>\n\
{% endfilter %}\n\
\n\
{# outputs "&amp;lt;strong&amp;gt;some text&amp;lt;/strong\&amp;gt;" #}\n\
</code></pre>

TAG_flush=<p style="font-weight: bold; font-size: 1.2em">flush</p>\
<p>\
The <code>flush</code> tag tells Twig to flush the output buffer:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{% flush %}\n\
</code></pre>

TAG_for=<p style="font-weight: bold; font-size: 1.2em">for</p>\
<p>\
Loop over each item in a sequence. For example, to display a list of users provided in a variable called <code>users</code>:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
&lt;h1>Members&lt;/h1>\n\
&lt;ul>\n\
\    {% for user in users %}\n\
\        &lt;li>{{ user.username|e }}&lt;/li>\n\
\    {% endfor %}\n\
&lt;/ul>\n\
</code></pre>

TAG_from=<p style="font-weight: bold; font-size: 1.2em">from</p>\
<p>\
The <code>from</code> tags import <code>macro</code> names into the current namespace. The tag is documented in detail in the documentation for the <code>import</code> tag.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{% from 'forms.html' import input as input_field, textarea %}\
</code></pre>

TAG_if=<p style="font-weight: bold; font-size: 1.2em">if</p>\
<p>\
The <code>if</code> statement in Twig is comparable with the if statements of PHP. In the simplest form you can use it to test if an expression evaluates to <code>true</code>:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{% if online == false %}\n\
\    &lt;p>Our website is in maintenance mode. Please, come back later.&lt;/p>\n\
{% endif %}\n\
</code></pre>

TAG_import=<p style="font-weight: bold; font-size: 1.2em">import</p>\
<p>\
Twig supports putting often used code into macros. These macros can go into different templates and get imported from there.\
</p><p>\
There are two ways to import templates. You can import the complete template into a variable or request specific macros from it.\
</p><p>\
Imagine we have a helper module that renders forms (called forms.html):\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{% macro input(name, value, type, size) %}\n\
\    &lt;input type="{{ type|default('text') }}" name="{{ name }}" value="{{ value|e }}" size="{{ size|default(20) }}" />\n\
{% endmacro %}\n\
\n\
{% macro textarea(name, value, rows) %}\n\
\    &lt;textarea name="{{ name }}" rows="{{ rows|default(10) }}" cols="{{ cols|default(40) }}">{{ value|e }}&lt;/textarea>\n\
{% endmacro %}\n\
</code></pre>\
<p>\
The easiest and most flexible is importing the whole module into a variable. That way you can access the attributes:\
</p>\
<pre><code>\n\
{% import 'forms.html' as forms %}\n\
\n\
&lt;dl>\n\
\    &lt;dt>Username&lt;/dt>\n\
\    &lt;dd>{{ forms.input('username') }}&lt;/dd>\n\
\    &lt;dt>Password&lt;/dt>\n\
\    &lt;dd>{{ forms.input('password', null, 'password') }}&lt;/dd>\n\
&lt;/dl>\n\
&lt;p>{{ forms.textarea('comment') }}&lt;/p>\n\
</code></pre>\
<p>\
Alternatively you can import names from the template into the current namespace:\
</p>\
<pre><code>\n\
{% from 'forms.html' import input as input_field, textarea %}\n\
\n\
&lt;dl>\n\
\    &lt;dt>Username&lt;/dt>\n\
\    &lt;dd>{{ input_field('username') }}&lt;/dd>\n\
\    &lt;dt>Password&lt;/dt>\n\
\    &lt;dd>{{ input_field('password', '', 'password') }}&lt;/dd>\n\
&lt;/dl>\n\
&lt;p>{{ textarea('comment') }}&lt;/p>\n\
</code></pre>

TAG_include=<p style="font-weight: bold; font-size: 1.2em">include</p>\
<p>\
The <code>include</code> statement includes a template and return the rendered content of that file into the current namespace:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{% include 'header.html' %}\n\
\    Body\n\
{% include 'footer.html' %}\n\
</code></pre>\
<p>\
Included templates have access to the variables of the active context.\
</p><p>\
If you are using the filesystem loader, the templates are looked for in the paths defined by it.\
</p><p>\
You can add additional variables by passing them after the <code>with</code> keyword:\
</p>\
<pre><code>\n\
{# the foo template will have access to the variables from the current context and the foo one #}\n\
{% include 'foo' with {'foo': 'bar'} %}\n\
\n\
{% set vars = {'foo': 'bar'} %}\n\
{% include 'foo' with vars %}\n\
</code></pre>\
<p>\
You can disable access to the context by appending the <code>only</code> keyword:\
</p>\
<pre><code>\n\
{# only the foo variable will be accessible #}\n\
{% include 'foo' with {'foo': 'bar'} only %}\n\
\n\
{# no variable will be accessible #}\n\
{% include 'foo' only %}\n\
</code></pre>

TAG_macro=<p style="font-weight: bold; font-size: 1.2em">macro</p>\
<p>\
Macros are comparable with functions in regular programming languages. They are useful to put often used HTML idioms into reusable elements to not repeat yourself.\
</p><p>\
Here is a small example of a macro that renders a form element:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{% macro input(name, value, type, size) %}\n\
\    &lt;input type="{{ type|default('text') }}" name="{{ name }}" value="{{ value|e }}" size="{{ size|default(20) }}" />\n\
{% endmacro %}\n\
</code></pre>\
<p>\
Macros differs from native PHP functions in a few ways:\
</p>\
<ul>\
<li>Default argument values are defined by using the <code>default</code> filter in the macro body;</li>\
<li>Arguments of a macro are always optional.</li>\
</ul>\
<p>\
But as PHP functions, macros don't have access to the current template variables.\
</p>

TAG_raw=<p style="font-weight: bold; font-size: 1.2em">raw</p>\
<p>\
The <code>raw</code> tag marks sections as being raw text that should not be parsed. For example to put Twig syntax as example into a template you can use this snippet:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{% raw %}\n\
\    &lt;ul>\n\
\    {% for item in seq %}\n\
\        &lt;li>{{ item }}&lt;/li>\n\
\    {% endfor %}\n\
\    &lt;/ul>\n\
{% endraw %}\n\
</code></pre>

TAG_sandbox=<p style="font-weight: bold; font-size: 1.2em">sandbox</p>\
<p>\
The <code>sandbox</code> tag can be used to enable the sandboxing mode for an included template, when sandboxing is not enabled globally for the Twig environment:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{% sandbox %}\n\
\    {% include 'user.html' %}\n\
{% endsandbox %}\n\
</code></pre>\
<p>The <code>sandbox</code> tag is only available when the sandbox extension is enabled (see the <a href="http://twig.sensiolabs.org/doc/api.html">Twig for Developers</a> chapter).</p>\
<p>The <code>sandbox</code> tag can only be used to sandbox an include tag and it cannot be used to sandbox a section of a template. The following example won't work for example:</p>\
<pre><code>\n\
{% sandbox %}\n\
\    {% for i in 1..2 %}\n\
\        {{ i }}\n\
\    {% endfor %}\n\
{% endsandbox %}\n\
</code></pre>

TAG_set=<p style="font-weight: bold; font-size: 1.2em">set</p>\
<p>\
Inside code blocks you can also assign values to variables. Assignments use the <code>set</code> tag and can have multiple targets:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{% set foo = 'foo' %}\n\
\n\
{% set foo = [1, 2] %}\n\
\n\
{% set foo = {'foo': 'bar'} %}\n\
\n\
{% set foo = 'foo' ~ 'bar' %}\n\
\n\
{% set foo, bar = 'foo', 'bar' %}\n\
</code></pre>\
<p>\
The <code>set</code> tag can also be used to 'capture' chunks of text:\
</p>\
<pre><code>\n\
{% set foo %}\n\
  &lt;div id="pagination">\n\
    ...\n\
  &lt;/div>\n\
{% endset %}\n\
</code></pre>\
<p>If you enable automatic output escaping, Twig will only consider the content to be safe when capturing chunks of text.</p>

TAG_spaceless=<p style="font-weight: bold; font-size: 1.2em">spaceless</p>\
<p>\
Use the <code>spaceless</code> tag to remove whitespace between HTML tags, not whitespace within HTML tags or whitespace in plain text:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{% spaceless %}\n\
\    &lt;div>\n\
\        &lt;strong>foo&lt;/strong>\n\
\    &lt;/div>\n\
{% endspaceless %}\n\
\n\
{# output will be &lt;div>&lt;strong>foo&lt;/strong>&lt;/div> #}\n\
</code></pre>\
<p>This tag is not meant to "optimize" the size of the generated HTML content but merely to avoid extra whitespace between HTML tags to avoid browser rendering quirks under some circumstances.</p>

TAG_use=<p style="font-weight: bold; font-size: 1.2em">use</p>\
<p>\
Horizontal reuse is an advanced Twig feature that is hardly ever needed in regular templates. It is mainly used by projects that need to make template blocks reusable without using inheritance.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>\
Template inheritance is one of the most powerful Twig's feature but it is limited to single inheritance; a template can only extend one other template. This limitation makes template inheritance simple to understand and easy to debug:\
</p>\
<pre><code>\n\
{% extends "base.html" %}\n\
\n\
{% block title %}{% endblock %}\n\
{% block content %}{% endblock %}\n\
</code></pre>\
<p>\
Horizontal reuse is a way to achieve the same goal as multiple inheritance, but without the associated complexity:\
</p>\
<pre><code>\n\
{% extends "base.html" %}\n\
\n\
{% use "blocks.html" %}\n\
\n\
{% block title %}{% endblock %}\n\
{% block content %}{% endblock %}\n\
</code></pre>\
<p>\
The <code>use</code> statement tells Twig to import the blocks defined in `blocks.html into the current template (it's like macros, but for blocks):\
</p>\
<pre><code>\n\
\# blocks.html\n\
{% block sidebar %}{% endblock %}\n\
</code></pre>\
<p>\
In this example, the <code>use</code> statement imports the <code>sidebar</code> block into the main template. The code is mostly equivalent to the following one (the imported blocks are not outputted automatically):\
</p>\
<pre><code>\n\
{% extends "base.html" %}\n\
\n\
{% block sidebar %}{% endblock %}\n\
{% block title %}{% endblock %}\n\
{% block content %}{% endblock %}\n\
</code></pre>

TEST_constant=<p style="font-weight: bold; font-size: 1.2em">constant</p>\
<p>\
<code>constant</code> checks if a variable has the exact same value as a constant. You can use either global constants or class constants:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{% if post.status is constant('Post::PUBLISHED') %}\n\
\    the status attribute is exactly the same as Post::PUBLISHED\n\
{% endif %}\n\
</code></pre>

TEST_defined=<p style="font-weight: bold; font-size: 1.2em">defined</p>\
<p>\
<code>defined</code> checks if a variable is defined in the current context. This is very useful if you use the <code>strict_variables</code> option:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{# defined works with variable names #}\n\
{% if foo is defined %}\n\
\    ...\n\
{% endif %}\n\
\n\
{# and attributes on variables names #}\n\
{% if foo.bar is defined %}\n\
\    ...\n\
{% endif %}\n\
\n\
{% if foo['bar'] is defined %}\n\
\    ...\n\
{% endif %}\n\
</code></pre>\
<p>\
When using the <code>defined</code> test on an expression that uses variables in some method calls, be sure that they are all defined first:\
</p>\
<pre><code>\n\
{% if var is defined and foo.method(var) is defined %}\n\
\    ...\n\
{% endif %}\n\
</code></pre>

TEST_divisibleby=<p style="font-weight: bold; font-size: 1.2em">divisibleby</p>\
<p>\
<code>divisibleby</code> checks if a variable is divisible by a number:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{% if loop.index is divisibleby(3) %}\n\
\    ...\n\
{% endif %}\n\
</code></pre>

TEST_empty=<p style="font-weight: bold; font-size: 1.2em">empty</p>\
<p>\
<code>empty</code> checks if a variable is empty:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{# evaluates to true if the foo variable is null, false, an empty array, or the empty string #}\n\
{% if foo is empty %}\n\
\    ...\n\
{% endif %}\n\
</code></pre>

TEST_even=<p style="font-weight: bold; font-size: 1.2em">even</p>\
<p>\
<code>even</code> returns <code>true</code> if the given number is even:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{{ var is even }}\
</code></pre>

TEST_iterable=<p style="font-weight: bold; font-size: 1.2em">iterable</p>\
<p>\
<code>iterable</code> checks if a variable is an array or a traversable object:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{# evaluates to true if the foo variable is iterable #}\n\
{% if users is iterable %}\n\
\    {% for user in users %}\n\
\        Hello {{ user }}!\n\
\    {% endfor %}\n\
{% else %}\n\
\    {# users is probably a string #}\n\
\    Hello {{ users }}!\n\
{% endif %}\n\
</code></pre>

TEST_null=<p style="font-weight: bold; font-size: 1.2em">null</p>\
<p>\
<code>null</code> returns <code>true</code> if the variable is <code>null</code>:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{{ var is null }}\
</code></pre>\
<p><code>none</code> is an alias for <code>null</code>.</p>

TEST_odd=<p style="font-weight: bold; font-size: 1.2em">odd</p>\
<p>\
<code>odd</code> returns <code>true</code> if the given number is odd:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{{ var is odd }}\
</code></pre>

TEST_sameas=<p style="font-weight: bold; font-size: 1.2em">sameas</p>\
<p>\
<code>sameas</code> checks if a variable points to the same memory address than another variable:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{% if foo.attribute is sameas(false) %}\n\
\    the foo attribute really is the ``false`` PHP value\n\
{% endif %}\n\
</code></pre>

FUNCTION_attribute=<p style="font-weight: bold; font-size: 1.2em">attribute</p>\
<p>\
<code>attribute</code> can be used to access a "dynamic" attribute of a variable:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{{ attribute(object, method) }}\n\
{{ attribute(object, method, arguments) }}\n\
{{ attribute(array, item) }}\n\
</code></pre>\
<p>The resolution algorithm is the same as the one used for the . notation, except that the item can be any valid expression.</p>

FUNCTION_block=<p style="font-weight: bold; font-size: 1.2em">block</p>\
<p>\
When a template uses inheritance and if you want to print a block multiple times, use the <code>block</code> function:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
&lt;title>{% block title %}{% endblock %}&lt;/title>\n\
\n\
&lt;h1>{{ block('title') }}&lt;/h1>\n\
\n\
{% block body %}{% endblock %}\n\
</code></pre>

FUNCTION_constant=<p style="font-weight: bold; font-size: 1.2em">constant</p>\
<p>\
<code>constant</code> returns the constant value for a given string:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{{ some_date|date(constant('DATE_W3C')) }}\n\
{{ constant('Namespace\\Classname::CONSTANT_NAME') }}\n\
</code></pre>

FUNCTION_cycle=<p style="font-weight: bold; font-size: 1.2em">cycle</p>\
<p>\
The <code>cycle</code> function cycles on an array of values:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{% for i in 0..10 %}\n\
\    {{ cycle(['odd', 'even'], i) }}\n\
{% endfor %}\n\
</code></pre>\
<p>The array can contain any number of values:</p>\
<pre><code>\n\
{% set fruits = ['apple', 'orange', 'citrus'] %}\n\
\n\
{% for i in 0..10 %}\n\
\    {{ cycle(fruits, i) }}\n\
{% endfor %}\n\
</code></pre>

FUNCTION_date=<p style="font-weight: bold; font-size: 1.2em">date</p>\
<p>\
Converts an argument to a date to allow date comparison:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{% if date(user.created_at) &lt; date('+2days') %}\n\
\    {# do something #}\n\
{% endif %}\n\
</code></pre>\
<p>The argument must be in a format supported by the date function.</p>\
<p>You can pass a timezone as the second argument:</p>\
<pre><code>\n\
{% if date(user.created_at) &lt; date('+2days', 'Europe/Paris') %}\n\
\    {# do something #}\n\
{% endif %}\n\
</code></pre>\
<p>If no argument is passed, the function returns the current date:</p>\
<pre><code>\n\
{% if date(user.created_at) &lt; date() %}\n\
    {# always! #}\n\
{% endif %}\n\
</code></pre>\
<p>You can set the default timezone globally by calling <code>setTimezone()</code> on the <code>core</code> extension instance:</p>\
<pre><code>\n\
$twig = new Twig_Environment($loader);\n\
$twig->getExtension('core')->setTimezone('Europe/Paris');\n\
</code></pre>

FUNCTION_dump=<p style="font-weight: bold; font-size: 1.2em">dump</p>\
<p>\
The <code>dump</code> function dumps information about a template variable. This is mostly useful to debug a template that does not behave as expected by introspecting its variables:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{{ dump(user) }}\n\
</code></pre>\
<p>The <code>dump</code> function is not available by default. You must add the <code>Twig_Extension_Debug</code> extension explicitly when creating your Twig environment:</p>\
<pre><code>\n\
$twig = new Twig_Environment($loader, array(\n\
\    'debug' => true,\n\
\    // ...\n\
));\n\
$twig->addExtension(new Twig_Extension_Debug());\n\
</code></pre>\
<p>Even when enabled, the dump function won't display anything if the debug option on the environment is not enabled (to avoid leaking debug information on a production server).</p>\
<p>In an HTML context, wrap the output with a <code>pre</code> tag to make it easier to read:</p>\
<pre><code>\n\
&lt;pre>\n\
\    {{ dump(user) }}\n\
&lt;/pre>\n\
</code></pre>\
<p>Using a <code>pre</code> tag is not needed when XDebug is enabled and <code>html_errors</code> is <code>on</code>; as a bonus, the output is also nicer with XDebug enabled.</p>\
<p>You can debug several variables by passing them as additional arguments:</p>\
<pre><code>\n\
{{ dump(user, categories) }}\
</code></pre>\
<p>If you don't pass any value, all variables from the current context are dumped:</p>\
<pre><code>\n\
{{ dump() }}\
</code></pre>

FUNCTION_parent=<p style="font-weight: bold; font-size: 1.2em">parent</p>\
<p>\
When a template uses inheritance, it's possible to render the contents of the parent block when overriding a block by using the <code>parent</code> function:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{% extends "base.html" %}\n\
\n\
{% block sidebar %}\n\
\    &lt;h3>Table Of Contents&lt;/h3>\n\
\    ...\n\
\    {{ parent() }}\n\
{% endblock %}\n\
</code></pre>\
<p>The <code>parent()</code> call will return the content of the <code>sidebar</code> block as defined in the <code>base.html</code> template.</p>

FUNCTION_random=<p style="font-weight: bold; font-size: 1.2em">random</p>\
<p>\
The <code>random</code> function returns a random value depending on the supplied parameter type:\
</p>\
<ul>\
<li>a random item from a sequence;</li>\
<li>a random character from a string;</li>\
<li>a random integer between 0 and the integer parameter (inclusive).</li>\
</ul>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{{ random(['apple', 'orange', 'citrus']) }} {# example output: orange #}\n\
{{ random('ABC') }}                         {# example output: C #}\n\
{{ random() }}                              {# example output: 15386094 (works as native PHP `mt_rand`_ function) #}\n\
{{ random(5) }}                             {# example output: 3 #}\n\
</code></pre>

FUNCTION_range=<p style="font-weight: bold; font-size: 1.2em">range</p>\
<p>\
Returns a list containing an arithmetic progression of integers:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{% for i in range(0, 3) %}\n\
\    {{ i }},\n\
{% endfor %}\n\
\n\
{# returns 0, 1, 2, 3 #}\n\
</code></pre>\
<p>When step is given (as the third parameter), it specifies the increment (or decrement):</p>\
<pre><code>\n\
{% for i in range(0, 6, 2) %}\n\
\    {{ i }},\n\
{% endfor %}\n\
\n\
{# returns 0, 2, 4, 6 #}\n\
</code></pre>\
<p>The Twig built-in .. operator is just syntactic sugar for the <code>range</code> function (with a step of 1):</p>\
<pre><code>\n\
{% for i in 0..3 %}\n\
\    {{ i }},\n\
{% endfor %}\n\
</code></pre>

OPERATOR_in=<p style="font-weight: bold; font-size: 1.2em">in</p>\
<p>\
The <code>in</code> operator performs containment test.\
<p></p>\
It returns <code>true</code> if the left operand is contained in the right:\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{# returns true #}\n\
\n\
{{ 1 in [1, 2, 3] }}\n\
\n\
{{ 'cd' in 'abcde' }}\n\
</code></pre>\
<p>\
To perform a negative test, use the <code>not in</code> operator:\
<p>\
<pre><code>\n\
{% if 1 not in [1, 2, 3] %}\n\
\n\
{# is equivalent to #}\n\
{% if not (1 in [1, 2, 3]) %}\n\
</code></pre>

OPERATOR_as=<p style="font-weight: bold; font-size: 1.2em">as</p>\
<p>Creates new variable from imported template.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{% import 'forms.html' as forms %}\
</code></pre>

OPERATOR_is=<p style="font-weight: bold; font-size: 1.2em">is</p>\
<p>The <code>is</code> operator performs tests. Tests can be used to test a variable against a common expression. The right operand is name of the test:</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
{# find out if a variable is odd #}\n\
\n\
{{ name is odd }}\n\
</code></pre>\
<p>\
Tests can accept arguments too:\
<p>\
<pre><code>\n\
{% if loop.index is divisibleby(3) %}\n\
</code></pre>\
<p>\
Tests can be negated by using the <code>is not</code> operator:\
<p>\
<pre><code>\n\
{% if loop.index is not divisibleby(3) %}\n\
\n\
{# is equivalent to #}\n\
{% if not (loop.index is divisibleby(3)) %}\n\
</code></pre>

OPERATOR_and=<p style="font-weight: bold; font-size: 1.2em">and</p>\
<p>Returns <code>true</code> if the left and the right operands are both true.</p>

OPERATOR_or=<p style="font-weight: bold; font-size: 1.2em">or</p>\
<p>Returns <code>true</code> if the left or the right operand is true.</p>

OPERATOR_not=<p style="font-weight: bold; font-size: 1.2em">not</p>\
<p>Negates a statement.</p>

OPERATOR_b-and=<p style="font-weight: bold; font-size: 1.2em">b-and</p>\
<p>Bitwise <code>and</code> operation.</p>

OPERATOR_b-or=<p style="font-weight: bold; font-size: 1.2em">b-or</p>\
<p>Bitwise <code>or</code> operation.</p>

OPERATOR_b-xor=<p style="font-weight: bold; font-size: 1.2em">b-xor</p>\
<p>Bitwise <code>xor</code> operation.</p>
