/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2012 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2012 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.twig.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>/home/warden/NetBeansProjects/web-main-new/php.twig/tools/TwigColoringLexer.flex</tt>
 */
public class TwigColoringLexer {
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ST_BLOCK = 2;
  public static final int ST_BLOCK_START = 4;
  public static final int ST_VAR = 6;
  public static final int ST_COMMENT = 8;
  public static final int ST_D_STRING = 10;
  public static final int ST_S_STRING = 12;
  public static final int ST_INTERPOLATION = 14;
  public static final int ST_HIGHLIGHTING_ERROR = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8, 8
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\1\1\1\1\53\1\53\1\1\22\0\1\1\1\21\1\34"+
    "\1\37\1\0\1\3\1\0\1\36\1\27\1\27\1\24\1\13\1\27"+
    "\1\14\1\26\1\25\12\30\1\27\1\0\1\22\1\7\1\22\1\27"+
    "\1\0\1\5\1\16\1\42\1\20\1\41\1\50\1\31\1\51\1\33"+
    "\1\31\1\46\1\44\1\47\1\10\1\11\1\43\1\31\1\15\1\32"+
    "\1\12\1\40\1\31\1\52\1\17\2\31\1\27\1\35\1\27\1\0"+
    "\1\31\1\0\1\5\1\16\1\42\1\20\1\41\1\50\1\31\1\51"+
    "\1\33\1\31\1\46\1\44\1\47\1\10\1\11\1\43\1\31\1\15"+
    "\1\32\1\12\1\40\1\31\1\52\1\17\2\31\1\2\1\27\1\4"+
    "\1\13\6\31\1\54\172\31\60\0\2\23\115\0\1\6\u1ea8\0\1\53"+
    "\1\53\u0100\0\1\45\uded5\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\1\1\3\1\4\1\5\1\4"+
    "\3\5\1\4\1\5\2\1\2\4\1\3\1\6\1\5"+
    "\2\1\1\7\1\1\4\7\2\1\6\7\1\3\1\1"+
    "\1\2\1\1\1\0\1\1\1\2\1\10\2\1\1\0"+
    "\1\11\1\1\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\5\1\4\1\5\3\0\1\20\3\0\1\21\1\7"+
    "\3\0\2\7\1\22\1\4\1\0\1\22\5\7\1\0"+
    "\10\7\1\0\2\7\1\23\1\0\1\24\1\10\5\0"+
    "\1\10\1\25\1\26\3\0\1\6\1\20\1\21\1\7"+
    "\2\0\1\7\2\0\6\7\1\0\4\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\2\0\5\7\1\0\1\7"+
    "\1\0\4\7\2\22\1\7\1\0\1\7\1\0\2\7"+
    "\3\0\4\7\2\0\1\7\2\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u0195\0\u021c\0\u0249\0\u0276"+
    "\0\u02a3\0\u02d0\0\u02fd\0\u0195\0\u032a\0\u0276\0\u0357\0\u0384"+
    "\0\u03b1\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec"+
    "\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u03de\0\u05fa\0\u0627"+
    "\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f"+
    "\0\u0735\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u07bc\0\u0195"+
    "\0\u089d\0\u0195\0\u08ca\0\u0195\0\u0195\0\u0195\0\u0195\0\u08f7"+
    "\0\u02fd\0\u0924\0\u0951\0\u097e\0\u0465\0\u0195\0\u09ab\0\u0492"+
    "\0\u09d8\0\u0195\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6"+
    "\0\u0519\0\u0b13\0\u0b40\0\u0195\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4"+
    "\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c"+
    "\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0195\0\u078f\0\u0735"+
    "\0\u0195\0\u0843\0\u0870\0\u0816\0\u0e6a\0\u0e97\0\u07bc\0\u0195"+
    "\0\u0195\0\u0ec4\0\u0ef1\0\u0f1e\0\u097e\0\u0465\0\u0492\0\u0f4b"+
    "\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3"+
    "\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b"+
    "\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383"+
    "\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be\0\u04ec"+
    "\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9\0\u1626"+
    "\0\u1653\0\u1680\0\u16ad\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e"+
    "\0\u17bb\0\u17e8\0\u1815\0\u1842\0\u186f\0\u189c\0\u18c9\0\u18f6"+
    "\0\u1923\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u1a5e"+
    "\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\50\12\2\0\1\12\1\13\1\15"+
    "\1\16\1\15\1\17\1\12\1\20\1\21\1\22\1\23"+
    "\2\24\1\23\1\25\2\23\1\26\1\20\1\27\1\30"+
    "\1\31\1\32\1\15\1\33\2\23\1\34\1\35\1\12"+
    "\1\36\1\12\5\23\1\12\5\23\1\0\1\23\1\12"+
    "\1\13\1\12\1\24\1\12\1\37\1\40\1\20\3\41"+
    "\2\24\1\42\1\43\1\41\1\44\1\26\1\20\1\45"+
    "\1\30\1\31\1\46\2\12\1\41\1\47\1\50\4\12"+
    "\1\51\1\52\3\41\1\12\1\41\1\53\1\54\2\41"+
    "\1\0\1\41\1\12\1\13\1\15\1\24\1\55\1\17"+
    "\1\12\1\20\1\21\1\22\1\23\2\24\1\23\1\25"+
    "\2\23\1\26\1\20\1\27\1\30\1\31\1\32\1\15"+
    "\1\33\2\23\1\34\1\35\1\12\1\36\1\12\5\23"+
    "\1\12\5\23\1\0\1\23\1\56\1\57\35\56\1\60"+
    "\13\56\2\61\1\62\1\63\32\62\1\64\1\65\1\62"+
    "\1\66\13\62\2\67\1\12\1\13\51\12\2\0\1\12"+
    "\1\13\1\15\1\24\1\70\1\17\1\12\1\20\1\21"+
    "\1\22\1\23\2\24\1\23\1\25\2\23\1\26\1\20"+
    "\1\27\1\30\1\31\1\32\1\15\1\33\2\23\1\34"+
    "\1\35\1\12\1\36\1\71\5\23\1\12\5\23\1\0"+
    "\1\23\1\72\1\73\51\72\60\0\1\13\55\0\1\74"+
    "\1\75\33\0\1\76\21\0\1\77\55\0\1\23\1\24"+
    "\1\0\1\100\2\23\2\0\4\23\7\0\2\23\1\101"+
    "\1\23\4\0\5\23\1\0\5\23\1\0\1\23\7\0"+
    "\1\24\52\0\1\23\2\0\1\23\1\102\1\23\2\0"+
    "\4\23\7\0\4\23\4\0\5\23\1\0\5\23\1\0"+
    "\1\23\5\0\1\23\2\0\3\23\2\0\1\101\3\23"+
    "\7\0\4\23\4\0\5\23\1\0\5\23\1\0\1\23"+
    "\5\0\1\23\2\0\3\23\2\0\4\23\7\0\4\23"+
    "\4\0\5\23\1\0\5\23\1\0\1\23\5\0\1\23"+
    "\2\0\3\23\1\0\1\103\4\23\7\0\4\23\4\0"+
    "\5\23\1\0\5\23\1\0\1\23\6\0\1\24\1\0"+
    "\1\24\21\0\1\24\46\0\1\24\55\0\1\24\55\0"+
    "\1\24\54\0\1\104\1\0\1\33\31\0\1\23\1\24"+
    "\1\0\1\101\2\23\2\0\4\23\7\0\2\23\1\101"+
    "\1\23\4\0\5\23\1\0\5\23\1\0\1\23\34\105"+
    "\1\106\1\107\17\105\35\110\1\111\1\112\16\110\5\0"+
    "\1\41\1\24\1\0\3\41\2\0\4\41\7\0\4\41"+
    "\4\0\1\113\4\41\1\0\5\41\1\0\1\41\5\0"+
    "\1\114\33\0\1\115\1\0\1\116\16\0\1\41\2\0"+
    "\3\41\2\0\4\41\7\0\4\41\4\0\5\41\1\0"+
    "\5\41\1\0\1\41\5\0\1\117\2\0\3\41\2\0"+
    "\4\41\7\0\4\41\4\0\5\41\1\0\5\41\1\0"+
    "\1\41\5\0\1\41\2\0\3\41\1\0\1\103\4\41"+
    "\7\0\4\41\4\0\4\41\1\120\1\0\5\41\1\0"+
    "\1\41\5\0\1\41\2\0\1\41\1\121\1\41\2\0"+
    "\4\41\7\0\4\41\4\0\5\41\1\0\5\41\1\0"+
    "\1\41\6\0\1\24\1\0\1\122\21\0\1\24\14\0"+
    "\1\123\1\124\11\0\1\125\2\0\3\41\2\0\4\41"+
    "\7\0\4\41\4\0\1\41\1\126\1\41\1\127\1\41"+
    "\1\0\5\41\1\0\1\41\5\0\1\41\1\24\1\0"+
    "\1\130\2\41\2\0\4\41\7\0\4\41\4\0\5\41"+
    "\1\0\1\41\1\131\1\121\2\41\1\0\1\41\5\0"+
    "\1\41\1\132\1\0\3\41\2\0\4\41\7\0\2\41"+
    "\1\133\1\41\4\0\5\41\1\0\5\41\1\0\1\41"+
    "\5\0\1\41\2\0\1\134\2\41\2\0\2\41\1\135"+
    "\1\41\7\0\4\41\4\0\4\41\1\136\1\0\1\41"+
    "\1\137\3\41\1\0\1\41\5\0\1\140\2\0\3\41"+
    "\2\0\4\41\7\0\4\41\4\0\5\41\1\0\5\41"+
    "\1\0\1\41\5\0\1\41\2\0\1\41\1\141\1\41"+
    "\2\0\1\142\3\41\2\0\1\143\4\0\3\41\1\144"+
    "\4\0\4\41\1\145\1\0\5\41\1\0\1\41\4\0"+
    "\1\146\50\0\37\61\1\147\16\61\1\57\35\61\1\147"+
    "\21\61\1\150\32\61\1\147\15\61\34\67\1\151\1\152"+
    "\1\67\1\153\16\67\1\63\32\67\1\151\1\152\1\67"+
    "\1\153\15\67\34\154\1\151\1\155\1\154\1\156\15\154"+
    "\34\67\1\157\1\152\1\67\1\153\17\67\1\160\31\67"+
    "\1\0\20\67\2\0\1\161\53\0\1\73\60\0\1\23"+
    "\2\0\3\23\2\0\3\23\1\101\7\0\4\23\4\0"+
    "\5\23\1\0\5\23\1\0\1\23\5\0\1\23\2\0"+
    "\2\23\1\101\2\0\4\23\7\0\4\23\4\0\5\23"+
    "\1\0\5\23\1\0\1\23\5\0\1\162\3\0\1\163"+
    "\5\0\1\164\65\0\1\165\24\0\34\105\1\166\1\107"+
    "\17\105\35\110\1\111\1\167\16\110\5\0\1\41\2\0"+
    "\2\41\1\170\2\0\4\41\7\0\4\41\4\0\5\41"+
    "\1\0\5\41\1\0\1\41\10\0\1\171\56\0\1\124"+
    "\47\0\1\172\54\0\1\41\2\0\3\41\2\0\4\41"+
    "\7\0\4\41\4\0\5\41\1\0\4\41\1\121\1\0"+
    "\1\41\5\0\1\41\2\0\1\41\1\173\1\41\2\0"+
    "\4\41\7\0\4\41\4\0\5\41\1\0\5\41\1\0"+
    "\1\41\42\0\1\174\55\0\1\175\16\0\1\41\2\0"+
    "\1\176\2\41\2\0\4\41\7\0\4\41\4\0\5\41"+
    "\1\0\5\41\1\0\1\41\5\0\1\41\2\0\2\41"+
    "\1\121\2\0\4\41\7\0\4\41\4\0\5\41\1\0"+
    "\5\41\1\0\1\41\5\0\1\177\2\0\3\41\2\0"+
    "\4\41\7\0\4\41\4\0\5\41\1\0\5\41\1\0"+
    "\1\41\5\0\1\41\2\0\3\41\2\0\4\41\7\0"+
    "\4\41\4\0\2\41\1\200\2\41\1\0\5\41\1\0"+
    "\1\41\5\0\1\41\2\0\3\41\2\0\4\41\7\0"+
    "\4\41\4\0\3\41\1\201\1\41\1\0\5\41\1\0"+
    "\1\41\41\0\1\124\20\0\1\41\2\0\3\41\2\0"+
    "\4\41\7\0\4\41\4\0\1\41\1\121\3\41\1\0"+
    "\5\41\1\0\1\41\5\0\1\41\2\0\3\41\2\0"+
    "\3\41\1\202\7\0\4\41\4\0\5\41\1\0\5\41"+
    "\1\0\1\41\5\0\1\41\2\0\2\41\1\203\2\0"+
    "\4\41\7\0\4\41\4\0\5\41\1\0\5\41\1\0"+
    "\1\41\5\0\1\41\1\204\1\0\3\41\2\0\4\41"+
    "\7\0\2\41\1\205\1\41\4\0\5\41\1\0\5\41"+
    "\1\0\1\41\5\0\1\41\2\0\3\41\2\0\1\41"+
    "\1\206\2\41\7\0\4\41\4\0\5\41\1\0\5\41"+
    "\1\0\1\41\5\0\1\41\2\0\3\41\2\0\4\41"+
    "\7\0\4\41\4\0\2\41\1\207\2\41\1\0\5\41"+
    "\1\0\1\41\5\0\1\41\2\0\3\41\2\0\1\121"+
    "\3\41\7\0\4\41\4\0\5\41\1\0\5\41\1\0"+
    "\1\41\5\0\1\41\2\0\1\41\1\210\1\41\2\0"+
    "\4\41\7\0\4\41\4\0\5\41\1\0\5\41\1\0"+
    "\1\41\44\0\1\211\15\0\1\41\2\0\3\41\2\0"+
    "\4\41\7\0\4\41\4\0\4\41\1\212\1\0\5\41"+
    "\1\0\1\41\5\0\1\41\2\0\3\41\2\0\4\41"+
    "\7\0\4\41\4\0\1\213\4\41\1\0\5\41\1\0"+
    "\1\41\34\154\1\64\1\155\1\154\1\156\17\154\1\160"+
    "\31\154\1\151\20\154\10\0\1\214\61\0\1\24\50\0"+
    "\1\163\50\0\1\41\2\0\1\41\1\215\1\41\2\0"+
    "\4\41\7\0\4\41\4\0\5\41\1\0\5\41\1\0"+
    "\1\41\20\0\1\216\76\0\1\217\17\0\1\41\2\0"+
    "\3\41\2\0\4\41\7\0\4\41\4\0\2\41\1\220"+
    "\2\41\1\0\5\41\1\0\1\41\44\0\1\221\21\0"+
    "\1\222\50\0\1\41\2\0\3\41\2\0\3\41\1\223"+
    "\7\0\4\41\4\0\5\41\1\0\5\41\1\0\1\41"+
    "\5\0\1\41\2\0\3\41\2\0\4\41\7\0\4\41"+
    "\4\0\2\41\1\224\2\41\1\0\5\41\1\0\1\41"+
    "\5\0\1\41\2\0\3\41\2\0\4\41\7\0\4\41"+
    "\4\0\4\41\1\225\1\0\5\41\1\0\1\41\5\0"+
    "\1\41\2\0\1\41\1\226\1\41\2\0\4\41\7\0"+
    "\4\41\4\0\5\41\1\0\5\41\1\0\1\41\5\0"+
    "\1\227\1\230\1\0\3\41\2\0\1\42\1\231\2\41"+
    "\2\0\1\232\4\0\2\41\1\47\1\233\4\0\1\41"+
    "\1\234\3\41\1\0\1\41\1\53\1\235\2\41\1\0"+
    "\1\41\5\0\1\41\2\0\3\41\2\0\4\41\7\0"+
    "\4\41\4\0\1\41\1\236\3\41\1\0\5\41\1\0"+
    "\1\41\41\0\1\237\20\0\1\41\2\0\3\41\2\0"+
    "\4\41\7\0\4\41\4\0\1\41\1\240\3\41\1\0"+
    "\5\41\1\0\1\41\5\0\1\41\2\0\3\41\2\0"+
    "\4\41\7\0\4\41\4\0\1\41\1\241\3\41\1\0"+
    "\5\41\1\0\1\41\5\0\1\41\2\0\3\41\2\0"+
    "\1\44\3\41\7\0\4\41\4\0\5\41\1\0\5\41"+
    "\1\0\1\41\5\0\1\41\2\0\3\41\2\0\4\41"+
    "\7\0\4\41\4\0\5\41\1\0\1\41\1\121\3\41"+
    "\1\0\1\41\12\0\1\242\47\0\1\41\2\0\2\41"+
    "\1\243\2\0\4\41\7\0\4\41\4\0\5\41\1\0"+
    "\5\41\1\0\1\41\5\0\1\41\1\244\1\0\3\41"+
    "\2\0\4\41\7\0\2\41\1\245\1\41\4\0\5\41"+
    "\1\0\5\41\1\0\1\41\20\0\1\24\41\0\1\41"+
    "\2\0\3\41\2\0\4\41\7\0\4\41\4\0\1\41"+
    "\1\246\3\41\1\0\5\41\1\0\1\41\16\0\1\247"+
    "\77\0\1\250\20\0\1\41\2\0\3\41\2\0\4\41"+
    "\7\0\4\41\4\0\5\41\1\124\1\121\4\41\1\0"+
    "\1\41\40\0\1\251\31\0\1\115\44\0\1\41\2\0"+
    "\3\41\2\0\1\41\1\252\2\41\7\0\4\41\4\0"+
    "\5\41\1\0\5\41\1\0\1\41\5\0\1\41\2\0"+
    "\3\41\2\0\4\41\7\0\4\41\4\0\1\41\1\253"+
    "\3\41\1\0\5\41\1\0\1\41\5\0\1\41\2\0"+
    "\3\41\2\0\4\41\7\0\4\41\4\0\1\254\4\41"+
    "\1\0\5\41\1\0\1\41\5\0\1\41\2\0\3\41"+
    "\2\0\1\126\3\41\7\0\4\41\4\0\5\41\1\0"+
    "\5\41\1\0\1\41\5\0\1\41\2\0\3\41\2\0"+
    "\4\41\7\0\4\41\4\0\1\113\4\41\1\0\5\41"+
    "\1\0\1\41\5\0\1\41\2\0\3\41\2\0\4\41"+
    "\7\0\4\41\4\0\4\41\1\120\1\0\5\41\1\0"+
    "\1\41\50\0\1\124\11\0\1\41\2\0\3\41\2\0"+
    "\4\41\7\0\4\41\4\0\5\41\1\0\2\41\1\121"+
    "\2\41\1\0\1\41\5\0\1\41\2\0\3\41\2\0"+
    "\4\41\7\0\4\41\4\0\5\41\1\0\1\41\1\137"+
    "\3\41\1\0\1\41\5\0\1\41\2\0\1\41\1\141"+
    "\1\41\2\0\4\41\2\0\1\143\4\0\3\41\1\144"+
    "\4\0\5\41\1\0\5\41\1\0\1\41\5\0\1\41"+
    "\2\0\1\255\2\41\2\0\4\41\7\0\4\41\4\0"+
    "\5\41\1\0\5\41\1\0\1\41\23\0\1\232\7\0"+
    "\1\232\26\0\1\41\2\0\3\41\2\0\4\41\2\0"+
    "\1\232\4\0\3\41\1\233\4\0\5\41\1\0\5\41"+
    "\1\0\1\41\5\0\1\41\2\0\3\41\2\0\3\41"+
    "\1\121\7\0\4\41\4\0\5\41\1\0\5\41\1\0"+
    "\1\41\41\0\1\256\20\0\1\41\2\0\3\41\2\0"+
    "\4\41\7\0\4\41\4\0\1\41\1\141\3\41\1\0"+
    "\5\41\1\0\1\41\51\0\1\124\10\0\1\41\2\0"+
    "\3\41\2\0\4\41\7\0\4\41\4\0\5\41\1\0"+
    "\3\41\1\121\1\41\1\0\1\41\5\0\1\41\1\257"+
    "\1\0\3\41\2\0\4\41\7\0\2\41\1\260\1\41"+
    "\4\0\5\41\1\0\5\41\1\0\1\41\11\0\1\261"+
    "\107\0\1\262\30\0\1\132\41\0\1\41\2\0\1\41"+
    "\1\263\1\41\2\0\4\41\7\0\4\41\4\0\5\41"+
    "\1\0\5\41\1\0\1\41\5\0\1\41\2\0\3\41"+
    "\2\0\4\41\7\0\4\41\4\0\4\41\1\264\1\0"+
    "\5\41\1\0\1\41\5\0\1\41\2\0\3\41\2\0"+
    "\3\41\1\133\7\0\4\41\4\0\5\41\1\0\5\41"+
    "\1\0\1\41\5\0\1\41\2\0\3\41\2\0\3\41"+
    "\1\265\7\0\4\41\4\0\5\41\1\0\5\41\1\0"+
    "\1\41\15\0\1\124\101\0\1\266\17\0\1\41\2\0"+
    "\3\41\2\0\4\41\7\0\4\41\4\0\2\41\1\267"+
    "\2\41\1\0\5\41\1\0\1\41\17\0\1\124\76\0"+
    "\1\270\20\0\1\41\2\0\3\41\2\0\2\41\1\121"+
    "\1\41\7\0\4\41\4\0\5\41\1\0\5\41\1\0"+
    "\1\41\5\0\1\41\2\0\3\41\2\0\4\41\7\0"+
    "\4\41\4\0\1\41\1\271\3\41\1\0\5\41\1\0"+
    "\1\41\5\0\1\41\1\124\1\0\3\41\2\0\4\41"+
    "\7\0\2\41\1\121\1\41\4\0\5\41\1\0\5\41"+
    "\1\0\1\41\5\0\1\272\54\0\1\273\2\0\3\41"+
    "\2\0\4\41\7\0\4\41\4\0\5\41\1\0\5\41"+
    "\1\0\1\41\6\0\1\274\23\0\1\274\27\0\1\41"+
    "\1\274\1\0\3\41\2\0\4\41\7\0\2\41\1\265"+
    "\1\41\4\0\5\41\1\0\5\41\1\0\1\41\43\0"+
    "\1\132\16\0\1\41\2\0\3\41\2\0\4\41\7\0"+
    "\4\41\4\0\3\41\1\133\1\41\1\0\5\41\1\0"+
    "\1\41\6\0\1\124\23\0\1\124\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6975];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\2\1\1\11\6\1\1\11\34\1\1\0"+
    "\5\1\1\0\1\11\1\1\1\11\1\1\4\11\3\1"+
    "\3\0\1\11\3\0\1\11\1\1\3\0\4\1\1\0"+
    "\1\11\5\1\1\0\10\1\1\0\2\1\1\11\1\0"+
    "\1\1\1\11\5\0\1\1\2\11\3\0\4\1\2\0"+
    "\1\1\2\0\6\1\1\0\4\1\1\0\2\1\1\0"+
    "\1\1\2\0\1\1\2\0\5\1\1\0\1\1\1\0"+
    "\7\1\1\0\1\1\1\0\2\1\3\0\4\1\2\0"+
    "\1\1\2\0\3\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    private TwigStateStack stack = new TwigStateStack();
    private LexerInput input;

    public TwigColoringLexer(LexerRestartInfo info) {
        this.input = info.input();
        if(info.state() != null) {
            //reset state
            setState((LexerState) info.state());
        } else {
            zzState = zzLexicalState = YYINITIAL;
            stack.clear();
        }

    }

    public static final class LexerState  {
        final TwigStateStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;

        LexerState(TwigStateStack stack, int zzState, int zzLexicalState) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null || obj.getClass() != this.getClass()) {
                return false;
            }
            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                && (this.zzLexicalState == state.zzLexicalState));
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.createClone(), zzState, zzLexicalState);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected void popState() {
        yybegin(stack.popStack());
    }

    protected void pushState(final int state) {
        stack.pushStack(getZZLexicalState());
        yybegin(state);
    }


 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TwigColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TwigColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 208) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public TwigTokenId findNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1:
          { yypushback(yylength());
        pushState(ST_HIGHLIGHTING_ERROR);
          }
        case 23: break;
        case 2:
          { return TwigTokenId.T_TWIG_WHITESPACE;
          }
        case 24: break;
        case 3:
          { return TwigTokenId.T_TWIG_PUNCTUATION;
          }
        case 25: break;
        case 4:
          { return TwigTokenId.T_TWIG_OPERATOR;
          }
        case 26: break;
        case 5:
          { return TwigTokenId.T_TWIG_NAME;
          }
        case 27: break;
        case 6:
          { return TwigTokenId.T_TWIG_NUMBER;
          }
        case 28: break;
        case 7:
          { popState();
        pushState(ST_BLOCK);
        return TwigTokenId.T_TWIG_NAME;
          }
        case 29: break;
        case 8:
          { popState();
        return TwigTokenId.T_TWIG_STRING;
          }
        case 30: break;
        case 9:
          { popState();
        return TwigTokenId.T_TWIG_INTERPOLATION_END;
          }
        case 31: break;
        case 10:
          { return TwigTokenId.T_TWIG_OTHER;
          }
        case 32: break;
        case 11:
          { popState();
        return TwigTokenId.T_TWIG_WHITESPACE;
          }
        case 33: break;
        case 12:
          { pushState(ST_VAR);
        return TwigTokenId.T_TWIG_VAR_START;
          }
        case 34: break;
        case 13:
          { pushState(ST_BLOCK_START);
        return TwigTokenId.T_TWIG_BLOCK_START;
          }
        case 35: break;
        case 14:
          { pushState(ST_COMMENT);
          }
        case 36: break;
        case 15:
          { popState();
        return TwigTokenId.T_TWIG_BLOCK_END;
          }
        case 37: break;
        case 16:
          { yypushback(yylength());
        pushState(ST_D_STRING);
          }
        case 38: break;
        case 17:
          { return TwigTokenId.T_TWIG_STRING;
          }
        case 39: break;
        case 18:
          { popState();
        pushState(ST_BLOCK);
        return TwigTokenId.T_TWIG_TAG;
          }
        case 40: break;
        case 19:
          { popState();
        return TwigTokenId.T_TWIG_VAR_END;
          }
        case 41: break;
        case 20:
          { popState();
        return TwigTokenId.T_TWIG_COMMENT;
          }
        case 42: break;
        case 21:
          { yypushback(2);
        pushState(ST_INTERPOLATION);
        return TwigTokenId.T_TWIG_STRING;
          }
        case 43: break;
        case 22:
          { return TwigTokenId.T_TWIG_INTERPOLATION_START;
          }
        case 44: break;
        default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
              {         if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return TwigTokenId.T_TWIG_OTHER;
        } else {
            return null;
        }
 }

          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
