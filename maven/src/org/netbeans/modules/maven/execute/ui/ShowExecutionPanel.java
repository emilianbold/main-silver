/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2013 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2013 Sun Microsystems, Inc.
 */
package org.netbeans.modules.maven.execute.ui;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.Action;
import static javax.swing.Action.NAME;
import javax.swing.tree.TreeSelectionModel;
import org.apache.maven.execution.ExecutionEvent;
import org.netbeans.modules.maven.api.ModelUtils;
import org.netbeans.modules.maven.execute.ExecutionEventObject;
import org.netbeans.modules.maven.execute.cmd.ExecMojo;
import org.netbeans.modules.maven.execute.cmd.ExecProject;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.ChildFactory;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.lookup.Lookups;

/**
 *
 * @author mkleint
 */
public class ShowExecutionPanel extends javax.swing.JPanel implements ExplorerManager.Provider {

    private final ExplorerManager manager;

    /**
     * Creates new form ShowExecutionPanel
     */
    public ShowExecutionPanel() {
        manager = new ExplorerManager();
        initComponents();
        ((BeanTreeView)btvExec).setRootVisible(false);
        ((BeanTreeView)btvExec).setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btvExec = new BeanTreeView();

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(btvExec, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(btvExec, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane btvExec;
    // End of variables declaration//GEN-END:variables

    @Override
    public ExplorerManager getExplorerManager() {
        return manager;
    }
    
    public void setTreeToDisplay(ExecutionEventObject.Tree item) {
        manager.setRootContext(createNodeForExecutionEventTree(item));
        
        manager.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (ExplorerManager.PROP_SELECTED_NODES.equals(evt.getPropertyName())) {
                    Node[] nds = manager.getSelectedNodes();
                    if (nds.length > 0) {
                        ExecutionEventObject.Tree tree = nds[0].getLookup().lookup(ExecutionEventObject.Tree.class);
                        tree.getStartOffset().scrollTo();
                    }
                }
            }
        });
    }

    @Override
    public void addNotify() {
        super.addNotify();
        Node[] nds = manager.getRootContext().getChildren().getNodes(true);
        for (Node nd : nds) {
            ((BeanTreeView)btvExec).expandNode(nd);
        }
    }
    
    
    
    private static Node createNodeForExecutionEventTree(ExecutionEventObject.Tree item) {
        ExecutionEventObject se = item.startEvent;
        if (se != null) {
            //TODO
            AbstractNode nd = new AbstractNode(createChildren(item.childrenNodes), Lookups.fixed(item));
            switch (se.type) {
                case ProjectStarted :
                    return new ProjectNode(createChildren(item.childrenNodes), Lookups.fixed(item));
                case MojoStarted :
                    return new MojoNode(Children.LEAF, Lookups.fixed(item));
                case ForkStarted :
                case ForkedProjectStarted :
                default :
                    nd.setDisplayName(se.type.name());
                    break;
            }
            
            return nd;
        }
        return new AbstractNode(createChildren(item.childrenNodes));
    }
    
    private static Children createChildren(final List<ExecutionEventObject.Tree> childrenNodes) {
        return Children.create(new ChildFactory<ExecutionEventObject.Tree>() {
            @Override
            protected boolean createKeys(List<ExecutionEventObject.Tree> toPopulate) {
                toPopulate.addAll(childrenNodes);
                return true;
            }
            
            @Override
            protected Node createNodeForKey(ExecutionEventObject.Tree key) {
                return createNodeForExecutionEventTree(key);
            }
            
        }, false);
    }
    
    private static class MojoNode extends AbstractNode {
        private final ExecMojo start;
        private final ExecMojo end;
        private final ExecutionEventObject.Tree tree;

        public MojoNode(Children children, Lookup lookup) {
            super(children, lookup);
            this.tree = lookup.lookup(ExecutionEventObject.Tree.class);
            this.start = (ExecMojo) tree.startEvent;
            this.end = (ExecMojo) tree.endEvent;
            setIconBaseWithExtension("org/netbeans/modules/maven/execute/ui/mojo.png");
            setDisplayName(start.goal);
        }

        @Override
        public String getHtmlDisplayName() {
            return "<html><b>" + start.goal + "</b>" + (end.getErrorMessage() != null ? " <font color='#a40000'>" + end.getErrorMessage() + "</font>" : "") +" <font color='!controlShadow'>" + start.plugin.groupId + ":" + start.plugin.artifactId + ":" + start.plugin.version + "</font></html>";
        }

        @Override
        public String getShortDescription() {
            return "<html>Goal: " + start.goal + "<br/>Phase:" + start.phase + "<br/>Execution Id:" + start.executionId + (end.getErrorMessage() != null ? "<br/>Error<b>" + end.getErrorMessage() + "</b>": "") + "</html>";
        }

        @Override
        public Action[] getActions(boolean context) {
            return new Action[] {
                new GotoOutputAction(tree),
                new GotoSourceAction(start)
            };
        }
        
        
        

        @Override
        public Image getIcon(int type) {
            Image img =  super.getIcon(type);
            if (ExecutionEvent.Type.MojoFailed.equals(end.type)) {
                Image ann = ImageUtilities.loadImage("org/netbeans/modules/maven/execute/ui/error.png"); //NOI18N
//                ann = ImageUtilities.addToolTipToImage(ann, "Mojo execution failed");
                return ImageUtilities.mergeImages(img, ann, 8, 0);//NOI18N
            }
            return img;
        }

    
        
    }
    private static class ProjectNode extends AbstractNode {
        private final ExecProject start;
        private final ExecProject end;

        public ProjectNode(Children children, Lookup lookup) {
            super(children, lookup);
            this.start = (ExecProject) lookup.lookup(ExecutionEventObject.Tree.class).startEvent;
            this.end = (ExecProject) lookup.lookup(ExecutionEventObject.Tree.class).endEvent;
            setIconBaseWithExtension("org/netbeans/modules/maven/execute/ui/lifecycle.png");
            setDisplayName(start.gav.artifactId);
        }

        @Override
        public String getHtmlDisplayName() {
            return "<html><font color='!controlShadow'>" + start.gav.groupId + " </font><b>" + start.gav.artifactId + "</b> " + start.gav.version + "</html>";
        }

        @Override
        public String getShortDescription() {
            return "<html>Project GAV: " + start.gav.getId() + "<br/>Location: " + start.currentProjectLocation.getAbsolutePath() + "</html>";
        }
        
        

        @Override
        public Image getIcon(int type) {
            Image img =  super.getIcon(type);
            if (ExecutionEvent.Type.ProjectFailed.equals(end.type)) {
                Image ann = ImageUtilities.loadImage("org/netbeans/modules/maven/execute/ui/error.png"); //NOI18N
        //        ann = ImageUtilities.addToolTipToImage(ann, "Project build failed");
                return ImageUtilities.mergeImages(img, ann, 8, 0);//NOI18N
            }
            return img;
        }        

        @Override
        public Image getOpenedIcon(int type) {
            return this.getIcon(type); 
        }

    
    
    
     
    }

    private static class GotoOutputAction extends AbstractAction {
        private final ExecutionEventObject.Tree item;

        public GotoOutputAction(ExecutionEventObject.Tree item) {
            putValue(NAME, "Go to Build Output");
            this.item = item;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            item.getStartOffset().scrollTo();
        }
    }

    private static class GotoSourceAction extends AbstractAction {
        private final ExecMojo mojo;

        public GotoSourceAction(ExecMojo start) {
            putValue(NAME, "Go to Execution source");
            setEnabled(start.getLocation() != null);
            this.mojo = start;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            if (mojo.getLocation() != null) {
                ModelUtils.openAtSource(mojo.getLocation());
            }
        }
    }
}
