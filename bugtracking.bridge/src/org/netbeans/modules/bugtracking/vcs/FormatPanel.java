/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2009 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2009 Sun Microsystems, Inc.
 */

/*
 * FormatPanel.java
 *
 * Created on Jan 9, 2009, 5:12:31 PM
 */

package org.netbeans.modules.bugtracking.vcs;

import org.netbeans.modules.bugtracking.vcs.VCSHooksConfig.Format;

/**
 *
 * @author Tomas Stupka
 */
public class FormatPanel extends javax.swing.JPanel {
    private final Format defaultIssueInfoTemplate;
    private final Format defaultRevisionTemplate;

    /** Creates new form FormatPanel */
    FormatPanel(Format revisionTemplate, Format defaultRevisionTemplate, Format issueInfoTemplate, Format defaultIssueInfoTemplate) {
        initComponents();
        this.defaultIssueInfoTemplate = defaultIssueInfoTemplate;
        this.defaultRevisionTemplate = defaultRevisionTemplate;
        setRevisionTemplate(revisionTemplate);
        setIssueInfoTemplate(issueInfoTemplate);
    }

    Format getCommitFormat() {
        return new Format(aboveCommitRadio.isSelected(), issueInfoTextArea.getText());
    }

    Format getIssueFormat() {
        return new Format(false, revisionTextArea.getText());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        issueInfoTextArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        aboveCommitRadio = new javax.swing.JRadioButton();
        belowCommitRadio = new javax.swing.JRadioButton();
        resetCommitButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        revisionTextArea = new javax.swing.JTextArea();
        resetIssueButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        jLabel1.setLabelFor(issueInfoTextArea);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(FormatPanel.class, "FormatPanel.jLabel1.text")); // NOI18N

        issueInfoTextArea.setColumns(20);
        issueInfoTextArea.setFont(new java.awt.Font("Monospaced", 0, 13));
        issueInfoTextArea.setRows(5);
        issueInfoTextArea.setToolTipText(org.openide.util.NbBundle.getMessage(FormatPanel.class, "FormatPanel.issueInfoTextArea.toolTipText")); // NOI18N
        jScrollPane1.setViewportView(issueInfoTextArea);
        issueInfoTextArea.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(FormatPanel.class, "FormatPanel.jTextArea1.AccessibleContext.accessibleDescription")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(FormatPanel.class, "FormatPanel.jLabel2.text")); // NOI18N

        buttonGroup1.add(aboveCommitRadio);
        org.openide.awt.Mnemonics.setLocalizedText(aboveCommitRadio, org.openide.util.NbBundle.getMessage(FormatPanel.class, "FormatPanel.aboveCommitRadio.text")); // NOI18N

        buttonGroup1.add(belowCommitRadio);
        org.openide.awt.Mnemonics.setLocalizedText(belowCommitRadio, org.openide.util.NbBundle.getMessage(FormatPanel.class, "FormatPanel.belowCommitRadio.text")); // NOI18N
        belowCommitRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                belowCommitRadioActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(resetCommitButton, org.openide.util.NbBundle.getMessage(FormatPanel.class, "FormatPanel.resetCommitButton.text")); // NOI18N
        resetCommitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetCommitButtonActionPerformed(evt);
            }
        });

        jLabel3.setLabelFor(issueInfoTextArea);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(FormatPanel.class, "FormatPanel.jLabel3.text")); // NOI18N

        revisionTextArea.setColumns(20);
        revisionTextArea.setFont(new java.awt.Font("Monospaced", 0, 13));
        revisionTextArea.setRows(5);
        revisionTextArea.setToolTipText(org.openide.util.NbBundle.getMessage(FormatPanel.class, "FormatPanel.revisionTextArea.toolTipText")); // NOI18N
        jScrollPane2.setViewportView(revisionTextArea);

        org.openide.awt.Mnemonics.setLocalizedText(resetIssueButton, org.openide.util.NbBundle.getMessage(FormatPanel.class, "FormatPanel.resetIssueButton.text")); // NOI18N
        resetIssueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetIssueButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(FormatPanel.class, "FormatPanel.jLabel4.text")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(aboveCommitRadio)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(resetCommitButton)
                                .add(belowCommitRadio)))
                        .add(89, 89, 89)
                        .add(resetIssueButton))
                    .add(jLabel4)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel3, 0, 0, Short.MAX_VALUE)
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 216, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 131, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 131, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(resetIssueButton)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2)
                            .add(aboveCommitRadio))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(belowCommitRadio)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(resetCommitButton)))
                .add(33, 33, 33))
        );

        aboveCommitRadio.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(FormatPanel.class, "FormatPanel.aboveRadio.AccessibleContext.accessibleDescription")); // NOI18N
        belowCommitRadio.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(FormatPanel.class, "FormatPanel.beloveRadio.AccessibleContext.accessibleDescription")); // NOI18N
        resetCommitButton.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(FormatPanel.class, "FormatPanel.jButton1.AccessibleContext.accessibleDescription")); // NOI18N

        getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(FormatPanel.class, "FormatPanel.AccessibleContext.accessibleDescription")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void belowCommitRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_belowCommitRadioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_belowCommitRadioActionPerformed

    private void resetCommitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetCommitButtonActionPerformed
        setRevisionTemplate(defaultRevisionTemplate);
    }//GEN-LAST:event_resetCommitButtonActionPerformed

    private void resetIssueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetIssueButtonActionPerformed
        setIssueInfoTemplate(defaultIssueInfoTemplate);
    }//GEN-LAST:event_resetIssueButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton aboveCommitRadio;
    private javax.swing.JRadioButton belowCommitRadio;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JTextArea issueInfoTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton resetCommitButton;
    private javax.swing.JButton resetIssueButton;
    private javax.swing.JTextArea revisionTextArea;
    // End of variables declaration//GEN-END:variables

    private void setRevisionTemplate(Format format) {
        revisionTextArea.setText(format.getFormat());
    }

    private void setIssueInfoTemplate(Format format) {
        issueInfoTextArea.setText(format.getFormat());
        aboveCommitRadio.setSelected(format.isAbove());
        belowCommitRadio.setSelected(!format.isAbove());
    }

}
