/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2012 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2012 Sun Microsystems, Inc.
 */
package org.netbeans.modules.search.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.HierarchyEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.beans.IntrospectionException;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JSeparator;
import javax.swing.JToolBar;
import javax.swing.SwingConstants;
import org.netbeans.modules.search.MatchingObject;
import org.netbeans.modules.search.ResultModel;
//import org.netbeans.modules.search.ResultView;
import org.netbeans.modules.search.TextDetail;
import org.netbeans.swing.outline.Outline;
import org.openide.cookies.LineCookie;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.OutlineView;
import org.openide.loaders.DataObject;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.BeanNode;
import org.openide.nodes.Children;
import org.openide.nodes.FilterNode;
import org.openide.nodes.Node;
import org.openide.nodes.Node.PropertySet;
import org.openide.text.Line;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;

/**
 *
 * @author jhavlin
 */
public class BasicSearchResultsPanel extends javax.swing.JPanel
        implements ExplorerManager.Provider {

    private ExplorerManager explorerManager;
    private ResultModel resultModel;
    ResultsNode resultsNode;
    private JButton btnPrev;
    private JButton btnNext;

    /**
     * Creates new form BasicSearchResultsPanel
     */
    public BasicSearchResultsPanel(ResultModel resulModel) {
        initComponents();
        explorerManager = new ExplorerManager();
        resultsNode = new ResultsNode();
        this.resultModel = resulModel;
        explorerManager.setRootContext(resultsNode);
        getOutlineView().addPropertyColumn("detailsCount", "detailsCount");
        getOutlineView().addPropertyColumn("path", "path");
        getOutlineView().addPropertyColumn("size", "size");
        getOutlineView().addPropertyColumn("lastModified", "lastModified");
        getOutlineView().getOutline().setAutoResizeMode(
                Outline.AUTO_RESIZE_ALL_COLUMNS);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        toolBar = new javax.swing.JToolBar();
        outline = new OutlineView("Files");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        toolBar.setFloatable(false);
        toolBar.setOrientation(JToolBar.VERTICAL);
        toolBar.setRollover(true);

        outline.setBorder(null);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outline, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outline, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
            .addComponent(toolBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane outline;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    public void update() {
        resultsNode.update();
    }

    /**
     * Class for representation of the root node.
     */
    private class ResultsNode extends AbstractNode {

        private ResultChildren children;

        public ResultsNode() {
            super(new ResultChildren());
            this.children = (ResultChildren) this.getChildren();
        }

        void update() {
            setDisplayName(resultModel.size() + " matching objects found.");       //TODO
            children.update();
        }
    }

    /**
     * Children of the main results node.
     *
     * Shows list of matching data objects.
     */
    private class ResultChildren extends Children.Keys<MatchingObject> {

        @Override
        protected Node[] createNodes(MatchingObject key) {
            Node delegate;
            if (key.getDataObject() == null) {
                return new Node[0];
            }
            delegate = key.getDataObject().getNodeDelegate();
            Children children;
            if (key.getTextDetails() == null
                    || key.getTextDetails().isEmpty()) {
                children = Children.LEAF;
            } else {
                children = new MatchesChildren(key.getTextDetails(),
                        key.getDataObject());
            }
            Node n = new MatchingObjectNode(delegate, children, key);
            return new Node[]{n};
        }

        private synchronized void update() {
            setKeys(resultModel.getMatchingObjects());
        }
    }

    private class MatchesChildren
            extends Children.Keys<TextDetail> {

        private DataObject dataObject;

        public MatchesChildren(List<TextDetail> matches,
                DataObject dataObject) {

            this.dataObject = dataObject;
            setKeys(matches);
        }

        @Override
        protected Node[] createNodes(final TextDetail key) {

            final Action openAction = new AbstractAction("Open") {      //NOI18N

                @Override
                public void actionPerformed(ActionEvent ae) {
                    LineCookie lc = dataObject.getLookup().lookup(
                            LineCookie.class);
                    if (lc != null) {
                        Line l = lc.getLineSet().getOriginal(
                                key.getLine() - 1); // counted from zero
                        l.show(Line.ShowOpenType.OPEN,
                                Line.ShowVisibilityType.FOCUS);
                    }
                }
            };

            AbstractNode n = new AbstractNode(LEAF) {

                @Override
                public Action[] getActions(boolean context) {
                    return new Action[]{openAction};
                }

                @Override
                public Action getPreferredAction() {
                    return openAction;
                }
            };

            n.setDisplayName(key.getLineText() + "[" //NOI18N
                    + key.getLine() + ":" + key.getColumn() + "]");

            return new Node[]{n};
        }
    }

    private void initToolbar() {

        //Toolbar
//        toolBar = new JToolBar(SwingConstants.VERTICAL);
//
//        btnPrev = new JButton();
//        btnPrev.setIcon(ImageUtilities.loadImageIcon(PREV_ICON, true));
//        btnPrev.setToolTipText(NbBundle.getMessage(
//                                            getClass(),
//                                            "TEXT_BUTTON_PREV_MATCH")); //NOI18N
//        btnNext = new JButton();
//        btnNext.setIcon(ImageUtilities.loadImageIcon(NEXT_ICON, true));
//        btnNext.setToolTipText(NbBundle.getMessage(
//                                            getClass(),
//                                            "TEXT_BUTTON_NEXT_MATCH")); //NOI18N
        toolBar.add(btnPrev);
        toolBar.add(btnNext);
        toolBar.setRollover(true);
        toolBar.setFloatable(false);

        btnPrev.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                //goToNext(false);
            }
        });

        btnNext.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                //goToNext(true);
            }
        });

//        btnDisplayContext.addItemListener(new ItemListener() {
//            @Override
//            public void itemStateChanged(ItemEvent e) {
//                if (!ignoreContextButtonToggle) {
//                    contextViewEnabled =
//                            (e.getStateChange() == ItemEvent.SELECTED);
//                    updateContextViewVisibility();
//                }
//            }
//        });
//
//        // Toolbar separator
//        toolbarSeparator = new JSeparator();
//        toolbarSeparator.setOrientation(SwingConstants.VERTICAL);
//
//        //Buttons panel
//        btnShowDetails.addActionListener(new ActionListener(){
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                fillOutput();
//            }
//        });
//        btnModifySearch.addActionListener(new ActionListener(){
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                customizeCriteria();
//            }
//        });
//        btnStop.addActionListener(new ActionListener(){
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                composition.terminate(null);
//            }
//        });
//        btnReplace.addActionListener(new ActionListener(){
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                replaceMatches();
//            }
//        });
//
//        btnStop.setToolTipText(NbBundle.getMessage(ResultView.class,
//                                                   "TEXT_BUTTON_STOP"));//NOI18N
//        btnShowDetails.setToolTipText(NbBundle.getMessage(ResultView.class,
//                                                   "TEXT_BUTTON_FILL"));//NOI18N
//        btnReplace.setToolTipText(NbBundle.getMessage(ResultView.class,
//                                                "TEXT_BUTTON_REPLACE"));//NOI18N
//        btnModifySearch.setToolTipText(NbBundle.getMessage(ResultView.class,
//                                              "TEXT_BUTTON_CUSTOMIZE"));//NOI18N
//
//        btnModifySearch.setIcon(
//                ImageUtilities.loadImageIcon(CUSTOMIZER_ICON, true));
//        btnStop.setIcon(ImageUtilities.loadImageIcon(STOP_ICON, true));
//        btnShowDetails.setIcon(ImageUtilities.loadImageIcon(SEARCH_ICON, true));
//        btnReplace.setIcon(ImageUtilities.loadImageIcon(REPLACE_ICON, true));
//
//        btnStop.setEnabled(false);
//        btnShowDetails.setEnabled(false);
//
//        btnReplace.setVisible(false);
//
//        toolBar.add(new JToolBar.Separator());
//        toolBar.add(btnReplace);
//        toolBar.add(Box.createHorizontalGlue());
//        toolBar.add(btnShowDetails);
//        toolBar.add(btnModifySearch);
//        toolBar.add(btnStop);
    }

    private OutlineView getOutlineView() {
        return (OutlineView) outline;
    }
}
