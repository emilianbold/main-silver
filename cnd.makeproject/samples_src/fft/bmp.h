/*
 * Copyright (c) 2009, Sun Microsystems, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the distribution.
 *  * Neither the name of Sun Microsystems, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _BMP_H
#define	_BMP_H

#include <string>
#include <stdint.h>

using namespace std;

// Specifies packing alignment for structures.
#pragma pack(1)

// Structures of bitmap file format

// Bitmap header

typedef struct tagBITMAPFILEHEADER {
    int16_t bfType;
    int32_t bfSize;
    int16_t bfReserved1;
    int16_t bfReserved2;
    int32_t bfOffBits;
} BITMAPFILEHEADER;

// Header of bitmap info

typedef struct tagBITMAPINFOHEADER {
    int32_t biSize;
    int32_t biWidth;
    int32_t biHeight;
    int16_t biPlanes;
    int16_t biBitCount;
    int32_t biCompression;
    int32_t biSizeImage;
    int32_t biXPelsPerMeter;
    int32_t biYPelsPerMeter;
    int32_t biClrUsed;
    int32_t biClrImportant;
} BITMAPINFOHEADER;

// Color

typedef struct tagRGBQUAD {
    unsigned char rgbBlue;
    unsigned char rgbGreen;
    unsigned char rgbRed;
    unsigned char rgbReserved;
} RGBQUAD;

// Bitmap info

typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER bmiHeader;
    RGBQUAD bmiColors[1];
} BITMAPINFO;

// Calling pack with no arguments sets packing alignment to its default value
#pragma pack()


//
// Bitmap class.
//

class Bitmap {
public:
    // Constructor
    Bitmap();
    // Constructor that loads bitmap from file
    Bitmap(string filename);
    // Copy constructor
    Bitmap(const Bitmap& orig);

    // Destructor
    virtual ~Bitmap();

    // Save to file
    void Save(string filename);

    // Bitmap parameters getters
    int GetWidth();
    int GetHeight();
    int GetBitCount();
    int GetImageSize();

    // Returns pointer to image data
    unsigned char* GetData();

    // Prints bitmap info to console
    void PrintInfo();

    // Initializes bitmap with test autogenerated image
    void GenerateTestImage();

private:
    long long bitmapSize; // size of whole bitmap with bitmap info
    unsigned char* bitmap; // pointer to whole bitmap
    unsigned char* data; // pointer to bitmap data
    BITMAPFILEHEADER fileHeader; // header of bitmap file
    BITMAPINFO *bitmapInfo; // pointer to BITMAPINFO
    BITMAPINFOHEADER *bitmapHeader; // pointer to BITMAPINFOHEADER

    // Load from file (is not public. use constructor instead)
    void Load(string filename);
};

#endif	/* _BMP_H */

