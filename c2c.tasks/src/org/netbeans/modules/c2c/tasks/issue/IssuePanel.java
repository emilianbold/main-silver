/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2012 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2012 Sun Microsystems, Inc.
 */
package org.netbeans.modules.c2c.tasks.issue;

/**
 *
 * @author tomas
 */
public class IssuePanel extends javax.swing.JPanel {

    /**
     * Creates new form IssuePanel
     */
    public IssuePanel() {
        initComponents();
        
        separatorLabel.setVisible(false);
        separatorLabel3.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        showInBrowserButton = new org.netbeans.modules.bugtracking.util.LinkButton();
        reloadButton = new org.netbeans.modules.bugtracking.util.LinkButton();
        refreshButton = new org.netbeans.modules.bugtracking.util.LinkButton();
        separatorLabel3 = new javax.swing.JLabel();
        separatorLabel = new javax.swing.JLabel();
        issueTypeLabel = new javax.swing.JLabel();
        reportedLabel = new javax.swing.JLabel();
        modifiedLabel = new javax.swing.JLabel();
        summaryLabel = new javax.swing.JLabel();
        summaryField = new javax.swing.JTextField();
        summaryWarning = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        statusCombo = new javax.swing.JComboBox();
        statusWarning = new javax.swing.JLabel();
        resolutionLabel = new javax.swing.JLabel();
        resolutionField = new javax.swing.JTextField();
        resolutionWarning = new javax.swing.JLabel();
        duplicateField = new javax.swing.JTextField();
        duplicateButton = new javax.swing.JButton();
        priorityLabel = new javax.swing.JLabel();
        priorityCombo = new javax.swing.JComboBox();
        priorityWarning = new javax.swing.JLabel();
        severityCombo = new javax.swing.JComboBox();
        severityWarning = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        productCombo = new javax.swing.JComboBox();
        productLabel = new javax.swing.JLabel();
        productWarning = new javax.swing.JLabel();
        componentLabel = new javax.swing.JLabel();
        componentCombo = new javax.swing.JComboBox();
        componentWarning = new javax.swing.JLabel();
        versionLabel = new javax.swing.JLabel();
        versionCombo = new javax.swing.JComboBox();
        versionWarning = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        targetMilestoneLabel = new javax.swing.JLabel();
        targetMilestoneCombo = new javax.swing.JComboBox();
        milestoneWarning = new javax.swing.JLabel();
        productWarning1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        productWarning2 = new javax.swing.JLabel();
        refreshButton1 = new org.netbeans.modules.bugtracking.util.LinkButton();
        dependsLabel = new javax.swing.JLabel();
        dependsField = new javax.swing.JTextField();
        dependsOnButton = new javax.swing.JButton();
        dependsOnWarning = new javax.swing.JLabel();
        dependsLabel1 = new javax.swing.JLabel();
        dependsField1 = new javax.swing.JTextField();
        dependsOnButton1 = new javax.swing.JButton();
        dependsOnWarning1 = new javax.swing.JLabel();
        dependsLabel2 = new javax.swing.JLabel();
        dependsField2 = new javax.swing.JTextField();
        dependsOnButton2 = new javax.swing.JButton();
        dependsOnWarning2 = new javax.swing.JLabel();
        assignedToWarning = new javax.swing.JLabel();
        assignedField = new javax.swing.JTextField();
        assignedLabel = new javax.swing.JLabel();
        assignedLabel1 = new javax.swing.JLabel();
        assignedField1 = new javax.swing.JTextField();
        assignedToWarning1 = new javax.swing.JLabel();
        attachmentsLabel = new javax.swing.JLabel();
        dummyAttachmentsPanel = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        summaryWarning1 = new javax.swing.JLabel();
        attachmentsLabel1 = new javax.swing.JLabel();
        dummyAttachmentsPanel1 = new javax.swing.JPanel();
        refreshButton2 = new org.netbeans.modules.bugtracking.util.LinkButton();
        separator = new javax.swing.JSeparator();
        dummyCommentsPanel = new javax.swing.JPanel();
        submitButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setBackground(javax.swing.UIManager.getDefaults().getColor("TextArea.background"));

        org.openide.awt.Mnemonics.setLocalizedText(showInBrowserButton, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.showInBrowserButton.text_1")); // NOI18N
        showInBrowserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showInBrowserButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(reloadButton, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.reloadButton.text_1")); // NOI18N
        reloadButton.setToolTipText(org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.reloadButton.toolTipText_1")); // NOI18N
        reloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(refreshButton, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.refreshButton.text_1")); // NOI18N
        refreshButton.setToolTipText(org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.refreshButton.toolTipText_1")); // NOI18N
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        headerField.setEditable(false);
        headerField.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        separatorLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        separatorLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.openide.awt.Mnemonics.setLocalizedText(issueTypeLabel, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.issueTypeLabel.text_1")); // NOI18N

        issueTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                issueTypeComboActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(reportedLabel, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.reportedLabel.text_1")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(modifiedLabel, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.modifiedLabel.text_1")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(summaryLabel, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.summaryLabel.text_1")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(statusLabel, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.statusLabel.text_1")); // NOI18N

        statusCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusComboActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(resolutionLabel, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.resolutionLabel.text_1")); // NOI18N

        resolutionField.setEditable(false);
        resolutionField.setText(org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.resolutionField.text")); // NOI18N
        resolutionField.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        resolutionField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resolutionFieldActionPerformed(evt);
            }
        });

        duplicateField.setColumns(15);

        org.openide.awt.Mnemonics.setLocalizedText(duplicateButton, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.duplicateButton.text_1")); // NOI18N
        duplicateButton.setFocusPainted(false);
        duplicateButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        duplicateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicateButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(priorityLabel, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.priorityLabel.text_1")); // NOI18N

        priorityCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priorityComboActionPerformed(evt);
            }
        });

        severityCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                severityComboActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.jLabel2.text")); // NOI18N

        productCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productComboActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(productLabel, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.productLabel.text_1")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(componentLabel, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.componentLabel.text_1")); // NOI18N

        componentCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                componentComboActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(versionLabel, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.versionLabel.text_1")); // NOI18N

        versionCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                versionComboActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(targetMilestoneLabel, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.targetMilestoneLabel.text_1")); // NOI18N

        targetMilestoneCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetMilestoneComboActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(refreshButton1, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.refreshButton1.text")); // NOI18N
        refreshButton1.setToolTipText(org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.refreshButton1.toolTipText")); // NOI18N
        refreshButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButton1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(dependsLabel, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.dependsLabel.text_1")); // NOI18N

        dependsField.setColumns(15);

        org.openide.awt.Mnemonics.setLocalizedText(dependsOnButton, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.dependsOnButton.text_1")); // NOI18N
        dependsOnButton.setFocusPainted(false);
        dependsOnButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        dependsOnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dependsOnButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(dependsLabel1, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.dependsLabel1.text")); // NOI18N

        dependsField1.setColumns(15);

        org.openide.awt.Mnemonics.setLocalizedText(dependsOnButton1, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.dependsOnButton1.text")); // NOI18N
        dependsOnButton1.setFocusPainted(false);
        dependsOnButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        dependsOnButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dependsOnButton1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(dependsLabel2, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.dependsLabel2.text")); // NOI18N

        dependsField2.setColumns(15);
        dependsField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dependsField2ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(dependsOnButton2, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.dependsOnButton2.text")); // NOI18N
        dependsOnButton2.setFocusPainted(false);
        dependsOnButton2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        dependsOnButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dependsOnButton2ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(assignedLabel, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.assignedLabel.text_1")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(assignedLabel1, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.assignedLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(attachmentsLabel, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.attachmentsLabel.text_1")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel15, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.jLabel15.text")); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        org.openide.awt.Mnemonics.setLocalizedText(attachmentsLabel1, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.attachmentsLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(refreshButton2, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.refreshButton2.text")); // NOI18N
        refreshButton2.setToolTipText(org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.refreshButton2.toolTipText")); // NOI18N
        refreshButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButton2ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(submitButton, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.submitButton.text_1")); // NOI18N
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, org.openide.util.NbBundle.getMessage(IssuePanel.class, "IssuePanel.cancelButton.text_1")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, separator)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, dummyCommentsPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(headerField)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(refreshButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(separatorLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(reloadButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(separatorLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(showInBrowserButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel15)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, summaryLabel)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, attachmentsLabel1)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, attachmentsLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(dummyAttachmentsPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                        .add(dummyAttachmentsPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(3, 3, 3)))
                                .add(28, 28, 28))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jScrollPane1)
                                    .add(summaryField))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, summaryWarning1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, summaryWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(16, 16, 16))
                            .add(refreshButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(refreshButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(submitButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(cancelButton))))
                    .add(layout.createSequentialGroup()
                        .add(221, 221, 221)
                        .add(dependsOnButton2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(dependsOnWarning2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(7, 7, 7)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, issueTypeLabel)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, statusLabel)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, priorityLabel)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel2)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, productLabel)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel3)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel4)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, dependsLabel)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, dependsLabel1)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, dependsLabel2))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(issueTypeCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 135, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(issueTypeWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(layout.createSequentialGroup()
                                        .add(productCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 116, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(productWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(layout.createSequentialGroup()
                                        .add(priorityCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 126, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(priorityWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(statusCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 135, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(tagsComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 126, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, resolutionLabel)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel1)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, componentLabel)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, targetMilestoneLabel)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel5)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, reportedLabel))
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(layout.createSequentialGroup()
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                                    .add(componentCombo, 0, 135, Short.MAX_VALUE)
                                                    .add(targetMilestoneCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 135, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                                .add(6, 6, 6)
                                                .add(jComboBox3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 135, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(layout.createSequentialGroup()
                                                .add(componentWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(versionLabel)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(versionCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 135, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                            .add(milestoneWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(productWarning2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(versionWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(layout.createSequentialGroup()
                                        .add(18, 18, 18)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(layout.createSequentialGroup()
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                                    .add(resolutionField)
                                                    .add(severityCombo, 0, 126, Short.MAX_VALUE))
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                    .add(severityWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                                        .add(statusWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                        .add(duplicateField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 119, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                        .add(duplicateButton)
                                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                        .add(resolutionWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                                            .add(modifiedLabel)))))
                            .add(layout.createSequentialGroup()
                                .add(dependsField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 114, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(dependsOnButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(dependsOnWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(assignedLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(assignedField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 136, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(assignedToWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(dependsField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 114, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(dependsOnButton1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(dependsOnWarning1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(267, 267, 267)
                                .add(assignedLabel1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(assignedField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 136, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(assignedToWarning1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(dependsField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 114, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .add(84, 84, 84)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jComboBox2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 135, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 135, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(productWarning1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {componentCombo, issueTypeCombo, priorityCombo, productCombo, severityCombo, statusCombo, tagsComboBox, versionCombo}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.linkSize(new java.awt.Component[] {assignedField, dependsField, dependsField1, dependsField2}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap(7, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(separatorLabel)
                    .add(reloadButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(refreshButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(headerField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(separatorLabel3)
                    .add(showInBrowserButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(issueTypeLabel)
                        .add(issueTypeCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(reportedLabel)
                        .add(modifiedLabel))
                    .add(issueTypeWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(statusWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(statusLabel)
                        .add(statusCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(resolutionLabel)
                        .add(resolutionField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(duplicateField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(duplicateButton))
                    .add(resolutionWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(priorityLabel)
                        .add(priorityCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(priorityWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(severityWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(severityCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel1)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(tagsComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(componentLabel)
                                .add(componentCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(componentWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(versionCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(versionLabel))
                            .add(versionWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(milestoneWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(productWarning2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(targetMilestoneLabel)
                                    .add(targetMilestoneCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel5)
                                    .add(jComboBox3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(productWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(productCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(productLabel)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel3)
                            .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(productWarning1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(jLabel4)
                                .add(jComboBox2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(dependsOnWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(assignedToWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(assignedLabel)
                        .add(assignedField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(dependsField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(dependsOnButton)
                        .add(dependsLabel)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(dependsOnWarning1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(dependsField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(dependsOnButton1)
                        .add(dependsLabel1))
                    .add(assignedToWarning1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(assignedLabel1)
                        .add(assignedField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(dependsField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(dependsLabel2)
                            .add(dependsOnButton2))
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(attachmentsLabel)
                            .add(dummyAttachmentsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(7, 7, 7)
                        .add(refreshButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(attachmentsLabel1)
                            .add(dummyAttachmentsPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(refreshButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(summaryLabel)
                                .add(summaryField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(summaryWarning1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel15)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(summaryWarning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(submitButton)
                            .add(cancelButton))
                        .add(1, 1, 1)
                        .add(separator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(dummyCommentsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(dependsOnWarning2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void showInBrowserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showInBrowserButtonActionPerformed
//        try {
//            URL url = new URL(issue.getRepository().getUrl() + BugzillaConstants.URL_SHOW_BUG + issue.getID());
//            HtmlBrowser.URLDisplayer.getDefault().showURL(url);
//        } catch (MalformedURLException muex) {
//            Bugzilla.LOG.log(Level.INFO, "Unable to show the issue in the browser.", muex); // NOI18N
//        }
    }//GEN-LAST:event_showInBrowserButtonActionPerformed

    private void reloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadButtonActionPerformed
//        String reloadMessage = NbBundle.getMessage(IssuePanel.class, "IssuePanel.reloadMessage"); // NOI18N
//        final ProgressHandle handle = ProgressHandleFactory.createHandle(reloadMessage);
//        handle.start();
//        handle.switchToIndeterminate();
//        skipReload = true;
//        enableComponents(false);
//        RP.post(new Runnable() {
//            @Override
//            public void run() {
//                issue.getRepository().refreshConfiguration();
//                EventQueue.invokeLater(new Runnable() {
//                    @Override
//                    public void run() {
//                        try {
//                            reloading = true;
//                            Object product = productCombo.getSelectedItem();
//                            Object platform = platformCombo.getSelectedItem();
//                            Object os = osCombo.getSelectedItem();
//                            Object priority = priorityCombo.getSelectedItem();
//                            Object severity = severityCombo.getSelectedItem();
//                            Object resolution = resolutionCombo.getSelectedItem();
//                            Object issueType = issueTypeCombo.getSelectedItem();
//                            initCombos();
//                            initCustomFields();
//                            selectInCombo(productCombo, product, false);
//                            selectInCombo(platformCombo, platform, false);
//                            selectInCombo(osCombo, os, false);
//                            selectInCombo(priorityCombo, priority, false);
//                            selectInCombo(severityCombo, severity, false);
//                            initStatusCombo(statusCombo.getSelectedItem().toString());
//                            selectInCombo(resolutionCombo, resolution, false);
//                            if (BugzillaUtil.isNbRepository(issue.getRepository())) {
//                                issueTypeCombo.setSelectedItem(issueType);
//                            }
//                            reloadCustomFields(true);
//                        } finally {
//                            reloading = false;
//                            enableComponents(true);
//                            skipReload = false;
//                        }
//                    }
//                });
//                handle.finish();
//            }
//        });
    }//GEN-LAST:event_reloadButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
//        String refreshMessageFormat = NbBundle.getMessage(IssuePanel.class, "IssuePanel.refreshMessage"); // NOI18N
//        String refreshMessage = MessageFormat.format(refreshMessageFormat, issue.getID());
//        final ProgressHandle handle = ProgressHandleFactory.createHandle(refreshMessage);
//        handle.start();
//        handle.switchToIndeterminate();
//        skipReload = true;
//        enableComponents(false);
//        RP.post(new Runnable() {
//            @Override
//            public void run() {
//                try {
//                    issue.refresh();
//                } finally {
//                    EventQueue.invokeLater(new Runnable() {
//                        @Override
//                        public void run() {
//                            enableComponents(true);
//                            skipReload = false;
//                        }
//                    });
//                    handle.finish();
//                    reloadFormInAWT(true);
//                }
//            }
//        });
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void issueTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_issueTypeComboActionPerformed
//        cancelHighlight(issueTypeLabel);
    }//GEN-LAST:event_issueTypeComboActionPerformed

    private void statusComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusComboActionPerformed
//        cancelHighlight(statusLabel);
//        cancelHighlight(resolutionLabel);
//        // Hide/show resolution combo
//        String initialStatus = initialValues.get(IssueField.STATUS.getKey());
//        boolean resolvedInitial = "RESOLVED".equals(initialStatus); // NOI18N
//        if (!resolvedInitial) {
//            if ("RESOLVED".equals(statusCombo.getSelectedItem())) { // NOI18N
//                if (resolutionCombo.getParent() == null) {
//                    ((GroupLayout)getLayout()).replace(resolutionField, resolutionCombo);
//                }
//                resolutionCombo.setSelectedItem("FIXED"); // NOI18N
//                resolutionCombo.setVisible(true);
//            } else {
//                resolutionCombo.setVisible(false);
//                duplicateLabel.setVisible(false);
//                duplicateField.setVisible(false);
//                duplicateButton.setVisible(false);
//            }
//        }
//        if (!resolutionField.getText().trim().equals("")) { // NOI18N
//            if (statusCombo.getSelectedIndex() >= resolvedIndex) {
//                if (resolutionField.getParent() == null) {
//                    ((GroupLayout)getLayout()).replace(resolutionCombo, resolutionField);
//                }
//                resolutionField.setVisible(true);
//            } else {
//                resolutionField.setVisible(false);
//            }
//            duplicateLabel.setVisible(false);
//            duplicateField.setVisible(false);
//            duplicateButton.setVisible(false);
//        }
//        resolutionLabel.setLabelFor(resolutionCombo.isVisible() ? resolutionCombo : resolutionField);
    }//GEN-LAST:event_statusComboActionPerformed

    private void duplicateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicateButtonActionPerformed
//        String newIssueID = BugtrackingUtil.selectIssue(
//            NbBundle.getMessage(IssuePanel.class, "IssuePanel.duplicateButton.message"), //NOI18N
//            BugzillaUtil.getRepository(issue.getRepository()),
//            this,
//            new HelpCtx("org.netbeans.modules.bugzilla.duplicateChooser")); // NOI18N
//        if (newIssueID != null) {
//            duplicateField.setText(newIssueID);
//        }
    }//GEN-LAST:event_duplicateButtonActionPerformed

    private void priorityComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priorityComboActionPerformed
//        cancelHighlight(priorityLabel);
    }//GEN-LAST:event_priorityComboActionPerformed

    private void severityComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_severityComboActionPerformed
//        cancelHighlight(priorityLabel);
    }//GEN-LAST:event_severityComboActionPerformed

    private void productComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productComboActionPerformed
//        cancelHighlight(productLabel);
//        // Reload componentCombo, versionCombo and targetMilestoneCombo
//        BugzillaRepository repository = issue.getRepository();
//        BugzillaConfiguration bc = repository.getConfiguration();
//        if(bc == null || !bc.isValid()) {
//            // XXX nice error msg?
//            return;
//        }
//        String product = productCombo.getSelectedItem().toString();
//        Object component = componentCombo.getSelectedItem();
//        Object version = versionCombo.getSelectedItem();
//        Object targetMilestone = targetMilestoneCombo.getSelectedItem();
//        componentCombo.setModel(toComboModel(bc.getComponents(product)));
//        versionCombo.setModel(toComboModel(bc.getVersions(product)));
//        List<String> targetMilestones = bc.getTargetMilestones(product);
//        usingTargetMilestones = !targetMilestones.isEmpty();
//        targetMilestoneCombo.setModel(toComboModel(targetMilestones));
//        // Attempt to keep selection
//        boolean isNew = issue.getTaskData().isNew();
//        if (!isNew && !selectInCombo(componentCombo, component, false) && (componentCombo.getModel().getSize()>1)) {
//            componentCombo.setSelectedItem(null);
//        }
//        if (!isNew && !selectInCombo(versionCombo, version, false) && (versionCombo.getModel().getSize()>1)) {
//            versionCombo.setSelectedItem(null);
//        }
//        if (usingTargetMilestones) {
//            if (!isNew && !selectInCombo(targetMilestoneCombo, targetMilestone, false) && (targetMilestoneCombo.getModel().getSize()>1)) {
//                targetMilestoneCombo.setSelectedItem(null);
//            }
//        }
//        targetMilestoneLabel.setVisible(usingTargetMilestones);
//        targetMilestoneCombo.setVisible(usingTargetMilestones);
//        milestoneWarning.setVisible(usingTargetMilestones);
//        TaskData data = issue.getTaskData();
//        if (data.isNew()) {
//            issue.setFieldValue(IssueField.PRODUCT, product);
//            BugzillaRepositoryConnector connector = Bugzilla.getInstance().getRepositoryConnector();
//            try {
//                connector.getTaskDataHandler().initializeTaskData(issue.getRepository().getTaskRepository(), data, connector.getTaskMapping(data), new NullProgressMonitor());
//                if (BugzillaUtil.isNbRepository(repository)) { // IssueProvider 180467, 184412
//                    // Default target milestone
//                    List<String> milestones = repository.getConfiguration().getTargetMilestones(product);
//                    String defaultMilestone = "TBD"; // NOI18N
//                    if (milestones.contains(defaultMilestone)) {
//                        issue.setFieldValue(IssueField.MILESTONE, defaultMilestone);
//                    }
//                    // Default version
//                    List<String> versions = repository.getConfiguration().getVersions(product);
//                    String defaultVersion = getCurrentNetBeansVersion();
//                    for (String v : versions) {
//                        if (v.trim().toLowerCase().equals(defaultVersion.toLowerCase())) {
//                            issue.setFieldValue(IssueField.VERSION, v);
//                        }
//                    }
//                }
//                initialValues.remove(IssueField.COMPONENT.getKey());
//                initialValues.remove(IssueField.VERSION.getKey());
//                initialValues.remove(IssueField.MILESTONE.getKey());
//                reloadForm(false);
//            } catch (CoreException cex) {
//                Bugzilla.LOG.log(Level.INFO, cex.getMessage(), cex);
//            }
//        }
    }//GEN-LAST:event_productComboActionPerformed

    private void componentComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_componentComboActionPerformed
//        cancelHighlight(componentLabel);
//        updateNoComponent();
    }//GEN-LAST:event_componentComboActionPerformed

    private void versionComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_versionComboActionPerformed
//        cancelHighlight(versionLabel);
//        updateNoVersion();
    }//GEN-LAST:event_versionComboActionPerformed

    private void targetMilestoneComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetMilestoneComboActionPerformed
//        cancelHighlight(targetMilestoneLabel);
//        updateNoTargetMilestone();
    }//GEN-LAST:event_targetMilestoneComboActionPerformed

    private void refreshButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButton1ActionPerformed
    }//GEN-LAST:event_refreshButton1ActionPerformed

    private void dependsOnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dependsOnButtonActionPerformed
//        String newIssueID = BugtrackingUtil.selectIssue(
//            NbBundle.getMessage(IssuePanel.class, "IssuePanel.dependsOnButton.message"), // NOI18N
//            BugzillaUtil.getRepository(issue.getRepository()),
//            this,
//            new HelpCtx("org.netbeans.modules.bugzilla.dependsOnChooser")); // NOI18N
//        if (newIssueID != null) {
//            StringBuilder sb = new StringBuilder();
//            if (!dependsField.getText().trim().equals("")) { // NOI18N
//                sb.append(dependsField.getText()).append(',').append(' ');
//            }
//            sb.append(newIssueID);
//            dependsField.setText(sb.toString());
//        }
    }//GEN-LAST:event_dependsOnButtonActionPerformed

    private void dependsOnButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dependsOnButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dependsOnButton1ActionPerformed

    private void dependsOnButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dependsOnButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dependsOnButton2ActionPerformed

    private void dependsField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dependsField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dependsField2ActionPerformed

    private void refreshButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshButton2ActionPerformed

    private void resolutionFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resolutionFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resolutionFieldActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
//        final boolean isNew = issue.getTaskData().isNew();
//        if (isNew) {
//            storeFieldValue(IssueField.DESCRIPTION, addCommentArea);
//        }
//        storeFieldValue(IssueField.SUMMARY, summaryField);
//        storeFieldValue(IssueField.PRODUCT, productCombo);
//        storeFieldValue(IssueField.COMPONENT, componentCombo);
//        storeFieldValue(IssueField.VERSION, versionCombo);
//        storeFieldValue(IssueField.PLATFORM, platformCombo);
//        storeFieldValue(IssueField.OS, osCombo);
//        storeFieldValue(IssueField.STATUS, statusCombo);
//        if (resolutionCombo.isVisible()) {
//            storeFieldValue(IssueField.RESOLUTION, resolutionCombo);
//        } else if (!resolutionField.isVisible()) {
//            storeFieldValue(IssueField.RESOLUTION, ""); // NOI18N
//        }
//        if (duplicateField.isVisible() && duplicateField.isEditable()) {
//            issue.duplicate(duplicateField.getText());
//        }
//        storeFieldValue(IssueField.PRIORITY, priorityCombo);
//        if (BugzillaUtil.isNbRepository(issue.getRepository())) {
//            storeFieldValue(IssueField.ISSUE_TYPE, issueTypeCombo);
//        }
//        storeFieldValue(IssueField.SEVERITY, severityCombo);
//        if (usingTargetMilestones) {
//            storeFieldValue(IssueField.MILESTONE, targetMilestoneCombo);
//        }
//        storeAssignToDefault();
//        storeFieldValue(IssueField.URL, urlField);
//        storeFieldValue(IssueField.WHITEBOARD, statusWhiteboardField);
//        storeFieldValue(IssueField.KEYWORDS, keywordsField);
//        if (assignedField.getParent() == null) {
//            storeFieldValue(IssueField.ASSIGNED_TO, assignedCombo);
//        } else {
//            storeFieldValue(IssueField.ASSIGNED_TO, assignedField);
//        }
//        storeFieldValue(IssueField.QA_CONTACT, qaContactField);
//        storeCCValue();
//        storeFieldValue(IssueField.DEPENDS_ON, dependsField);
//        storeFieldValue(IssueField.BLOCKS, blocksField);
//        if (!isNew && !"".equals(addCommentArea.getText().trim())) { // NOI18N
//            issue.addComment(addCommentArea.getText());
//        }
//        if (!isNew && issue.hasTimeTracking()) {
//            storeFieldValue(IssueField.ESTIMATED_TIME, estimatedField);
//            storeFieldValue(IssueField.WORK_TIME, workedField);
//            storeFieldValue(IssueField.REMAINING_TIME, remainingField);
//            if(!deadlineField.getText().trim().equals(YYYY_MM_DD)) {
//                storeFieldValue(IssueField.DEADLINE, deadlineField);
//            }
//        }
//        // Store custom fields
//        for (CustomFieldInfo field : customFields) {
//            if (field.comp instanceof JTextComponent) {
//                storeFieldValue(field.field, (JTextComponent)field.comp);
//            } else if (field.comp instanceof JComboBox) {
//                storeFieldValue(field.field, (JComboBox)field.comp);
//            } else if (field.comp instanceof JList) {
//                storeFieldValue(field.field, (JList)field.comp);
//            } else {
//                Bugzilla.LOG.log(Level.INFO, "Custom field component {0} is not supported!", field.comp); // NOI18N
//            }
//        }
//        String submitMessage;
//        if (isNew) {
//            submitMessage = NbBundle.getMessage(IssuePanel.class, "IssuePanel.submitNewMessage"); // NOI18N
//        } else {
//            String submitMessageFormat = NbBundle.getMessage(IssuePanel.class, "IssuePanel.submitMessage"); // NOI18N
//            submitMessage = MessageFormat.format(submitMessageFormat, issue.getID());
//        }
//        final ProgressHandle handle = ProgressHandleFactory.createHandle(submitMessage);
//        handle.start();
//        handle.switchToIndeterminate();
//        skipReload = true;
//        enableComponents(false);
//        RP.post(new Runnable() {
//            @Override
//            public void run() {
//                boolean ret = false;
//                try {
//                    ret = issue.submitAndRefresh();
//                    for (AttachmentsPanel.AttachmentInfo attachment : attachmentsPanel.getNewAttachments()) {
//                        if (attachment.file.exists() && attachment.file.isFile()) {
//                            if (attachment.description.trim().length() == 0) {
//                                attachment.description = NbBundle.getMessage(IssuePanel.class, "IssuePanel.attachment.noDescription"); // NOI18N
//                            }
//                            issue.addAttachment(attachment.file, null, attachment.description, attachment.contentType, attachment.isPatch); // NOI18N
//                        } else {
//                            // PENDING notify user
//                        }
//                    }
//                    if(attachLogCheckBox.isVisible() && attachLogCheckBox.isSelected()) {
//                        File f = new File(Places.getUserDirectory(), NbBugzillaConstants.NB_LOG_FILE_PATH);
//                        if(f.exists()) {
//                            issue.addAttachment(f, "", NbBundle.getMessage(IssuePanel.class, "MSG_LOG_FILE_DESC"), NbBugzillaConstants.NB_LOG_FILE_ATT_CONT_TYPE, false); // NOI18N
//                        }
//                        BugzillaConfig.getInstance().putAttachLogFile(true);
//                    } else {
//                        BugzillaConfig.getInstance().putAttachLogFile(false);
//                    }
//                } finally {
//                    EventQueue.invokeLater(new Runnable() {
//                        @Override
//                        public void run() {
//                            enableComponents(true);
//                            skipReload = false;
//                        }
//                    });
//                    handle.finish();
//                    if(ret) {
//                        if (isNew) {
//                            // Show all custom fields, not only the ones shown on bug creation
//                            EventQueue.invokeLater(new Runnable() {
//                                @Override
//                                public void run() {
//                                    initCustomFields();
//                                }
//                            });
//                        }
//                        reloadFormInAWT(true);
//                    }
//                }
//            }
//        });
//        if (isNew) {
//            BugzillaRepository repository = issue.getRepository();
//            if (repository != null) {
//                OwnerUtils.setLooseAssociation(BugzillaUtil.getRepository(repository), false);
//            }
//        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
//        reloadForm(true);
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField assignedField;
    private javax.swing.JTextField assignedField1;
    private javax.swing.JLabel assignedLabel;
    private javax.swing.JLabel assignedLabel1;
    private javax.swing.JLabel assignedToWarning;
    private javax.swing.JLabel assignedToWarning1;
    private javax.swing.JLabel attachmentsLabel;
    private javax.swing.JLabel attachmentsLabel1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox componentCombo;
    private javax.swing.JLabel componentLabel;
    private javax.swing.JLabel componentWarning;
    private javax.swing.JTextField dependsField;
    private javax.swing.JTextField dependsField1;
    private javax.swing.JTextField dependsField2;
    private javax.swing.JLabel dependsLabel;
    private javax.swing.JLabel dependsLabel1;
    private javax.swing.JLabel dependsLabel2;
    private javax.swing.JButton dependsOnButton;
    private javax.swing.JButton dependsOnButton1;
    private javax.swing.JButton dependsOnButton2;
    private javax.swing.JLabel dependsOnWarning;
    private javax.swing.JLabel dependsOnWarning1;
    private javax.swing.JLabel dependsOnWarning2;
    private javax.swing.JPanel dummyAttachmentsPanel;
    private javax.swing.JPanel dummyAttachmentsPanel1;
    private javax.swing.JPanel dummyCommentsPanel;
    private javax.swing.JButton duplicateButton;
    private javax.swing.JTextField duplicateField;
    final javax.swing.JTextField headerField = new javax.swing.JTextField();
    final javax.swing.JComboBox issueTypeCombo = new javax.swing.JComboBox();
    private javax.swing.JLabel issueTypeLabel;
    final javax.swing.JLabel issueTypeWarning = new javax.swing.JLabel();
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel milestoneWarning;
    private javax.swing.JLabel modifiedLabel;
    private javax.swing.JComboBox priorityCombo;
    private javax.swing.JLabel priorityLabel;
    private javax.swing.JLabel priorityWarning;
    private javax.swing.JComboBox productCombo;
    private javax.swing.JLabel productLabel;
    private javax.swing.JLabel productWarning;
    private javax.swing.JLabel productWarning1;
    private javax.swing.JLabel productWarning2;
    private org.netbeans.modules.bugtracking.util.LinkButton refreshButton;
    private org.netbeans.modules.bugtracking.util.LinkButton refreshButton1;
    private org.netbeans.modules.bugtracking.util.LinkButton refreshButton2;
    private org.netbeans.modules.bugtracking.util.LinkButton reloadButton;
    private javax.swing.JLabel reportedLabel;
    private javax.swing.JTextField resolutionField;
    private javax.swing.JLabel resolutionLabel;
    private javax.swing.JLabel resolutionWarning;
    private javax.swing.JSeparator separator;
    private javax.swing.JLabel separatorLabel;
    private javax.swing.JLabel separatorLabel3;
    private javax.swing.JComboBox severityCombo;
    private javax.swing.JLabel severityWarning;
    private org.netbeans.modules.bugtracking.util.LinkButton showInBrowserButton;
    private javax.swing.JComboBox statusCombo;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel statusWarning;
    private javax.swing.JButton submitButton;
    private javax.swing.JTextField summaryField;
    private javax.swing.JLabel summaryLabel;
    private javax.swing.JLabel summaryWarning;
    private javax.swing.JLabel summaryWarning1;
    final javax.swing.JComboBox tagsComboBox = new javax.swing.JComboBox();
    private javax.swing.JComboBox targetMilestoneCombo;
    private javax.swing.JLabel targetMilestoneLabel;
    private javax.swing.JComboBox versionCombo;
    private javax.swing.JLabel versionLabel;
    private javax.swing.JLabel versionWarning;
    // End of variables declaration//GEN-END:variables
}
