/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2009 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2009 Sun Microsystems, Inc.
 */

/*
 * SourcesInformationPanel.java
 *
 * Created on Aug 26, 2009, 12:55:51 PM
 */

package org.netbeans.modules.kenai.ui.project;

import java.awt.Cursor;
import java.awt.Font;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.StyleSheet;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.netbeans.modules.kenai.api.Kenai;
import org.netbeans.modules.kenai.api.KenaiFeature;
import org.netbeans.modules.kenai.api.KenaiProject;
import org.netbeans.modules.kenai.api.KenaiService.Type;
import org.openide.awt.HtmlBrowser.URLDisplayer;
import org.openide.util.Exceptions;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author Petr Dvorak (Petr.Dvorak@sun.com)
 */
public class SourcesInformationPanel extends javax.swing.JPanel implements RefreshableContentPanel {
    public static final int MAX_ENTRIES = 10;

    /** Creates new form SourcesInformationPanel */
    public SourcesInformationPanel() {
        initComponents();
        srcFeedPane.addHyperlinkListener(new HyperlinkListener() {

            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType() == HyperlinkEvent.EventType.ENTERED) {
                    srcFeedPane.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                    return;
                }
                if (e.getEventType() == HyperlinkEvent.EventType.EXITED) {
                    srcFeedPane.setCursor(Cursor.getDefaultCursor());
                    return;
                }
                if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    URLDisplayer.getDefault().showURL(e.getURL());
                    return;
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        srcFeedPane = new javax.swing.JEditorPane();

        setLayout(new java.awt.BorderLayout());

        srcFeedPane.setContentType(org.openide.util.NbBundle.getMessage(SourcesInformationPanel.class, "SourcesInformationPanel.srcFeedPane.contentType")); // NOI18N
        srcFeedPane.setEditable(false);
        add(srcFeedPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    public String loadRepoFeeds(final KenaiProject proj) throws DOMException {
        String _appString = "<div class=\"section\"><table>"; //NOI18N
        try {
            KenaiFeature[] repos = proj.getFeatures(Type.SOURCE);
            for (int k = 0; k < repos.length; k++) {
                KenaiFeature repo = repos[k];

                DocumentBuilder dbf = DocumentBuilderFactory.newInstance().newDocumentBuilder();
                String base = Kenai.normalizeUrl(System.getProperty("kenai.com.url", "https://kenai.com")).replaceFirst("https://", "http://");
                String urlStr = base + repo.getWebLocation().getPath().replaceAll("/show$", "/history.atom"); //NOI18N
                int entriesCount = 0;
                NodeList entries = null;
                try {
                    new URL(urlStr).openStream(); // just to fail quickly if URL is invalid...
                    Document doc = dbf.parse(urlStr);
                    entries = doc.getElementsByTagName("entry"); //NOI18N
                    entriesCount = entries.getLength();
                } catch (FileNotFoundException e) {
                    // url does not exist?
                    break;
                }
                _appString += String.format("<tr><td colspan=\"2\"><h3>%s</h3></td></tr>", repo.getDisplayName());
                if (entriesCount > 0 && entries != null) {
                    _appString += "<tr>";
                    for (int i = 0; i < entriesCount && i < MAX_ENTRIES; i++) {
                        Node entry = entries.item(i);
                        NodeList entryProps = entry.getChildNodes();
                        String title = null;
                        String updated = "";
                        String content = "<i>no commit message...</i>";
                        String href = null;
                        for (int j = 0; j < entryProps.getLength(); j++) {
                            Node elem = entryProps.item(j);
                            if (elem.getNodeName().equals("title")) { //NOI18N - get title of the topic
                                title = elem.getFirstChild().getNodeValue();
                            } else if (elem.getNodeName().equals("updated")) { //NOI18N - get update date of the topic
                                updated = elem.getFirstChild().getNodeValue();
                            } else if (elem.getNodeName().equals("link")) { //NOI18N - found link of the topic, get href...
                                href = elem.getAttributes().getNamedItem("href").getNodeValue(); //NOI18N
                                if (!href.startsWith(base)) {
                                    href = base + href;
                                }
                            } else if (elem.getNodeName().equals("content")) { //NOI18N get title of the topic
                                content = elem.getFirstChild().getNodeValue();
                            }
                        }
                    if (title != null && href != null) {
                        // Not correct - the Atom feed contains a timestamp (RFC 3339) with T/Z characters, i.e., that should be interpretted better than by replacing...
                        _appString += String.format("<td><a href=\"%s\">%s</a>:</td><td> %s - <i>%s</i></td></tr>", href, title, content, updated.replaceAll("[a-zA-Z]", " ")); //NOI18N
                    }
                }
            }
            }
            _appString += "</table></div>"; //NOI18N
            return _appString;
        } catch (SAXException ex) {
            Exceptions.printStackTrace(ex);
            return null;
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
            return null;
        } catch (ParserConfigurationException ex) {
            Exceptions.printStackTrace(ex);
            return null;
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane srcFeedPane;
    // End of variables declaration//GEN-END:variables

    public synchronized void resetContent(final KenaiProject instProj) {
        // Style the document in order to look nice
        Font font = UIManager.getFont("Label.font"); // NOI18N
        String bodyRule = "body { background-color: white; font-family: " + font.getFamily() + "; " + // NOI18N
                "font-size: " + font.getSize() + "pt; padding: 10px;}"; // NOI18N
        final StyleSheet styleSheet = ((HTMLDocument) srcFeedPane.getDocument()).getStyleSheet();
        styleSheet.addRule(bodyRule);
        styleSheet.addRule("div.section {margin-bottom: 10px;}"); //NOI18N
        styleSheet.addRule("div.item {margin-bottom: 5px;}"); //NOI18N
        styleSheet.addRule("i {color: gray}"); //NOI18N

        srcFeedPane.setText("");

        final String str = loadRepoFeeds(instProj);
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                if (str != null) {
                    srcFeedPane.setText("<html><h2>Recent changes</h2>" + str + "</html>");
                    srcFeedPane.revalidate();
                    srcFeedPane.repaint();
                }
            }
        });
    }

}
