/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2009 Sun Microsystems, Inc.
 */

package org.netbeans.modules.kenai.ui;

import java.util.List;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import org.netbeans.modules.kenai.api.KenaiService;
import org.netbeans.modules.kenai.ui.NewKenaiProjectWizardIterator.SharedItem;
import org.openide.WizardDescriptor;
import org.openide.awt.Mnemonics;
import org.openide.util.NbBundle;

/**
 *
 * @author Maros Sandor
 */
public class SummaryWizardPanelGUI extends javax.swing.JPanel {

    private SummaryWizardPanel panel;

    public SummaryWizardPanelGUI(SummaryWizardPanel pnl) {
        panel = pnl;
        initComponents();
    }

    @Override
    public String getName() {
        return NbBundle.getMessage(SummaryWizardPanelGUI.class,
                "SummaryWizardPanelGUI.panelName"); // NOI18N
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new JLabel();
        projectCreatedLabel = new JLabel();
        commitedLabel = new JLabel();
        projectURL = new JLabel();
        repoURL = new JLabel();
        jScrollPane1 = new JScrollPane();
        commitedItems = new JList();
        issueTrackingLabel = new JLabel();
        chatroomLabel = new JLabel();
        repoLabel = new JLabel();
        commitPrepareLabel = new JLabel();
        tobeSharedLabel = new JLabel();
        projectsMoveLabel = new JLabel();
        localRoot = new JLabel();

        Mnemonics.setLocalizedText(jLabel1, NbBundle.getMessage(SummaryWizardPanelGUI.class, "SummaryWizardPanelGUI.jLabel1.text")); // NOI18N
        Mnemonics.setLocalizedText(projectCreatedLabel, NbBundle.getMessage(SummaryWizardPanelGUI.class, "SummaryWizardPanelGUI.projectCreatedLabel.text"));
        Mnemonics.setLocalizedText(commitedLabel, NbBundle.getMessage(SummaryWizardPanelGUI.class, "SummaryWizardPanelGUI.commitedLabel.text"));
        Mnemonics.setLocalizedText(projectURL, NbBundle.getMessage(SummaryWizardPanelGUI.class, "SummaryWizardPanelGUI.projectURL.text"));
        Mnemonics.setLocalizedText(repoURL, NbBundle.getMessage(SummaryWizardPanelGUI.class, "SummaryWizardPanelGUI.repoURL.text"));

        jScrollPane1.setViewportView(commitedItems);

        Mnemonics.setLocalizedText(issueTrackingLabel, NbBundle.getMessage(SummaryWizardPanelGUI.class, "SummaryWizardPanelGUI.issueTrackingLabel.text")); // NOI18N
        Mnemonics.setLocalizedText(chatroomLabel, NbBundle.getMessage(SummaryWizardPanelGUI.class, "SummaryWizardPanelGUI.chatroomLabel.text"));
        Mnemonics.setLocalizedText(repoLabel, NbBundle.getMessage(SummaryWizardPanelGUI.class, "SummaryWizardPanelGUI.repoLabel.text"));
        Mnemonics.setLocalizedText(commitPrepareLabel, NbBundle.getMessage(SummaryWizardPanelGUI.class, "SummaryWizardPanelGUI.commitPrepareLabel.text"));

        tobeSharedLabel.setLabelFor(commitedItems);
        Mnemonics.setLocalizedText(tobeSharedLabel, NbBundle.getMessage(SummaryWizardPanelGUI.class, "SummaryWizardPanelGUI.tobeSharedLabel.text"));
        Mnemonics.setLocalizedText(projectsMoveLabel, NbBundle.getMessage(SummaryWizardPanelGUI.class, "SummaryWizardPanelGUI.projectsMoveLabel.text"));
        Mnemonics.setLocalizedText(localRoot, NbBundle.getMessage(SummaryWizardPanelGUI.class, "SummaryWizardPanelGUI.localRoot.text"));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(projectURL, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                    .addComponent(localRoot, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                    .addComponent(repoURL, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(issueTrackingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(commitedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(commitPrepareLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(projectsMoveLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                .addGap(12, 12, 12))
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tobeSharedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(projectCreatedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 484, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chatroomLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(repoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(projectCreatedLabel)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(projectURL)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(tobeSharedLabel)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(projectsMoveLabel)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(localRoot)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(repoLabel)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(commitPrepareLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(commitedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(repoURL)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(issueTrackingLabel)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(chatroomLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleName(NbBundle.getMessage(SummaryWizardPanelGUI.class, "SourceAndIssuesWizardPanelGUI.AccessibleContext.accessibleName")); // NOI18N
        getAccessibleContext().setAccessibleDescription(NbBundle.getMessage(SummaryWizardPanelGUI.class, "SourceAndIssuesWizardPanelGUI.AccessibleContext.accessibleDescription")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel chatroomLabel;
    private JLabel commitPrepareLabel;
    private JList commitedItems;
    private JLabel commitedLabel;
    private JLabel issueTrackingLabel;
    private JLabel jLabel1;
    private JScrollPane jScrollPane1;
    private JLabel localRoot;
    private JLabel projectCreatedLabel;
    private JLabel projectURL;
    private JLabel projectsMoveLabel;
    private JLabel repoLabel;
    private JLabel repoURL;
    private JLabel tobeSharedLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addNotify() {
        super.addNotify();
        panel.fireChangeEvent();
    }

    @Override
    public void removeNotify() {
        super.removeNotify();
        this.putClientProperty(NewKenaiProjectWizardIterator.PROP_EXC_ERR_MSG, null);
    }

    public void read(WizardDescriptor settings) {
        projectCreatedLabel.setText(NbBundle.getMessage(SummaryWizardPanelGUI.class, "SummaryWizardPanelGUI.projectCreatedLabel.text",
                settings.getProperty(NewKenaiProjectWizardIterator.PROP_PRJ_TITLE),
                settings.getProperty(NewKenaiProjectWizardIterator.PROP_PRJ_LICENSE))
        );
        projectURL.setText("<html><b>" + NameAndLicenseWizardPanelGUI.getPreviewPrefix(panel.getKenai()) + settings.getProperty(NewKenaiProjectWizardIterator.PROP_PRJ_NAME)+"</b></html>");

        boolean autoCommit = Boolean.valueOf((String) settings.getProperty(NewKenaiProjectWizardIterator.PROP_AUTO_COMMIT));
        commitedLabel.setText(NbBundle.getMessage(SummaryWizardPanelGUI.class, "SummaryWizardPanelGUI.commitedLabel.text",
                settings.getProperty(NewKenaiProjectWizardIterator.PROP_SCM_TYPE)));
        repoLabel.setText(NbBundle.getMessage(SummaryWizardPanelGUI.class, "SummaryWizardPanelGUI.repoLabel.text",
                settings.getProperty(NewKenaiProjectWizardIterator.PROP_SCM_TYPE)));
        commitPrepareLabel.setText(NbBundle.getMessage(SummaryWizardPanelGUI.class, "SummaryWizardPanelGUI.commitPrepareLabel.text",
                settings.getProperty(NewKenaiProjectWizardIterator.PROP_SCM_TYPE)));

        repoURL.setText("<html><b>" + settings.getProperty(NewKenaiProjectWizardIterator.PROP_SCM_PREVIEW) + "</b></html>");

        List<SharedItem> sharedItems = (List<SharedItem>) settings.getProperty(NewKenaiProjectWizardIterator.PROP_FOLDERS_TO_SHARE);
        commitedItems.setListData(sharedItems.toArray(new SharedItem[sharedItems.size()]));

        String  scmType = (String) settings.getProperty(NewKenaiProjectWizardIterator.PROP_SCM_TYPE);
        boolean scmCreated = KenaiService.Names.SUBVERSION.equals(scmType) || KenaiService.Names.MERCURIAL.equals(scmType);

        commitPrepareLabel.setVisible(sharedItems.size() > 0 && !autoCommit && scmCreated);
        commitedLabel.setVisible(sharedItems.size() > 0 && autoCommit && scmCreated);
        repoLabel.setVisible(sharedItems.size() == 0 && scmCreated);
        jScrollPane1.setVisible(sharedItems.size() > 0 && scmCreated);
        tobeSharedLabel.setVisible(sharedItems.size() > 0 && scmCreated);

        String newPrjScmLocal = (String) settings.getProperty(NewKenaiProjectWizardIterator.PROP_SCM_LOCAL);
        boolean inPlaceRepository = NewKenaiProjectWizardIterator.isCommonParent(sharedItems, newPrjScmLocal);
        projectsMoveLabel.setVisible(!inPlaceRepository && scmCreated);
        if (sharedItems.size()==0) {
            Mnemonics.setLocalizedText(projectsMoveLabel, NbBundle.getMessage(SummaryWizardPanelGUI.class, "SummaryWizardPanelGUI.projectsMoveLabelNoSelection.text"));
        }
        localRoot.setVisible(!inPlaceRepository && scmCreated);
        localRoot.setText("<html><b>"+newPrjScmLocal+"</b></html>"); // NOI18N

        String issues = (String) settings.getProperty(NewKenaiProjectWizardIterator.PROP_ISSUES);
        issueTrackingLabel.setVisible(KenaiService.Names.BUGZILLA.equals(issues) || KenaiService.Names.JIRA.equals(issues));

        repoURL.setVisible(scmCreated);

        validate();
    }

    public void store(WizardDescriptor settings) {
    }
}
