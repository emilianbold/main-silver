/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2012 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2012 Sun Microsystems, Inc.
 */
package org.netbeans.modules.web.clientproject.ui.wizard;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.modules.web.common.spi.clientproject.SiteTemplateCustomizer;
import org.netbeans.modules.web.common.spi.clientproject.SiteTemplateImplementation;
import org.openide.WizardDescriptor;
import org.openide.filesystems.FileObject;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.util.RequestProcessor;

@NbBundle.Messages({"MSG_Loading=loading...",
    "MSG_None=Do not use any"})
public class SiteTemplateWizard extends javax.swing.JPanel {

    private SiteTemplateCustomizer customizer = null;
    private SiteTemplateImplementation site = null;
    private JComponent component = null;
    
    /**
     * Creates new form SiteTemplateWizard
     */
    public SiteTemplateWizard(SiteTemplateWizardPanel wizardPanel) {
        initComponents();
        loadTemplates();
        final ListCellRenderer defaultRender = sitesComboBox.getRenderer();
        sitesComboBox.setRenderer(new ListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                SiteTemplateImplementation site = (SiteTemplateImplementation)value;
                return defaultRender.getListCellRendererComponent(list, site.getName(), index, isSelected, cellHasFocus);
            }
        });
        sitesComboBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                updatePlaceholder();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sitesComboBox = new javax.swing.JComboBox();
        placeholder = new javax.swing.JPanel();

        placeholder.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sitesComboBox, 0, 400, Short.MAX_VALUE)
            .addComponent(placeholder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(sitesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(placeholder, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel placeholder;
    private javax.swing.JComboBox sitesComboBox;
    // End of variables declaration//GEN-END:variables

    private void loadTemplates() {
        sitesComboBox.addItem(new SiteTemplateImplementation() {

            @Override
            public String getName() {
                return Bundle.MSG_Loading();
            }

            @Override
            public SiteTemplateCustomizer getCustomizer() {
                return null;
            }

            @Override
            public void apply(FileObject p, ProgressHandle handle) {
            }
        });
        RequestProcessor.getDefault().post(new Runnable() {
            @Override
            public void run() {
                loadTemplatesImpl();
            }
        });
    }
    
    private void loadTemplatesImpl() {
        List<SiteTemplateImplementation> sites = new ArrayList<SiteTemplateImplementation>();
        sites.add(new SiteTemplateImplementation() {

            @Override
            public String getName() {
                return Bundle.MSG_None();
            }

            @Override
            public SiteTemplateCustomizer getCustomizer() {
                return null;
            }

            @Override
            public void apply(FileObject projectRoot, ProgressHandle handle) {
            }
        });
        sites.addAll(Lookup.getDefault().lookupAll(SiteTemplateImplementation.class));
        sitesComboBox.setModel(new DefaultComboBoxModel(sites.toArray(new SiteTemplateImplementation[sites.size()])));
        updatePlaceholder();
    }
    
    private void updatePlaceholder() {
        Runnable r = new Runnable() {
            @Override
            public void run() {
                if (component != null) {
                    placeholder.remove(component);
                }
                site = (SiteTemplateImplementation)sitesComboBox.getSelectedItem();
                customizer = site.getCustomizer();
                if (customizer != null) {
                    component = customizer.getComponent();
                    placeholder.add(component, BorderLayout.CENTER);
                } else {
                    component = null;
                }
                placeholder.revalidate();
            }
        };
        if (SwingUtilities.isEventDispatchThread()) {
            r.run();
        } else {
            SwingUtilities.invokeLater(r);
        }
    }
    
    boolean valid(WizardDescriptor wizardDescriptor) {
        return true;
    }

    void validate(WizardDescriptor wizardDescriptor) {
    }

    void store(WizardDescriptor d) {
    }

    void read(WizardDescriptor wizardDescriptor) {
    }
    
    public void apply(FileObject p, ProgressHandle handle) {
        site.apply(p, handle);
    }
}
