/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2012 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2012 Sun Microsystems, Inc.
 */
package org.netbeans.modules.web.clientproject.ui.browser;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.netbeans.modules.web.clientproject.ClientSideProject;
import org.netbeans.modules.web.clientproject.browser.ClientProjectConfigurationImpl;
import org.netbeans.modules.web.clientproject.spi.webserver.WebServer;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;

/**
 *
 * @author david
 */
public class RunConfigurationPanel extends javax.swing.JPanel implements DocumentListener, ItemListener {

    private ClientSideProject project;
    private ClientProjectConfigurationImpl cfg;
    private ComboBoxModel model;
    /**
     * Creates new form RunConfigurationPanel
     */
    public RunConfigurationPanel(ClientSideProject project, ClientProjectConfigurationImpl cfg) {
        this.project = project;
        initComponents();
        jFileToRunTextField.setText(cfg.getMainFile());
        model = new DefaultComboBoxModel(new String[]{"None", "Internal Server"});
        jServerComboBox.setModel(model);
        jServerComboBox.addItemListener(this);
        jServerComboBox.setSelectedIndex(cfg.isUseServer() ? 1 : 0);
        jWebRootTextField.getDocument().addDocumentListener(this);
        jWebRootTextField.setText(cfg.getWebContextRoot());
        updateWebRootEnablement();
    }

    public boolean isUseServer() {
        return jServerComboBox.getSelectedIndex() > 0;
    }

    public String getMainFile() {
        return jFileToRunTextField.getText();
    }
    
    public String getWebContextRoot() {
        return jWebRootTextField.getText();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jFileToRunTextField = new javax.swing.JTextField();
        jBrowseButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jServerComboBox = new javax.swing.JComboBox();
        jWebRootLabel = new javax.swing.JLabel();
        jWebRootTextField = new javax.swing.JTextField();
        jWebRootExampleLabel = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(RunConfigurationPanel.class, "RunConfigurationPanel.jLabel1.text")); // NOI18N

        jFileToRunTextField.setText(org.openide.util.NbBundle.getMessage(RunConfigurationPanel.class, "RunConfigurationPanel.jFileToRunTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jBrowseButton, org.openide.util.NbBundle.getMessage(RunConfigurationPanel.class, "RunConfigurationPanel.jBrowseButton.text")); // NOI18N
        jBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBrowseButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(RunConfigurationPanel.class, "RunConfigurationPanel.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jWebRootLabel, org.openide.util.NbBundle.getMessage(RunConfigurationPanel.class, "RunConfigurationPanel.jWebRootLabel.text")); // NOI18N

        jWebRootTextField.setText(org.openide.util.NbBundle.getMessage(RunConfigurationPanel.class, "RunConfigurationPanel.jWebRootTextField.text")); // NOI18N

        jWebRootExampleLabel.setFont(jWebRootExampleLabel.getFont().deriveFont(jWebRootExampleLabel.getFont().getSize()-1f));
        org.openide.awt.Mnemonics.setLocalizedText(jWebRootExampleLabel, org.openide.util.NbBundle.getMessage(RunConfigurationPanel.class, "RunConfigurationPanel.jWebRootExampleLabel.text")); // NOI18N
        jWebRootExampleLabel.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jWebRootLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jWebRootExampleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                    .addComponent(jServerComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jWebRootTextField)))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFileToRunTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBrowseButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jFileToRunTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jServerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jWebRootLabel)
                    .addComponent(jWebRootTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jWebRootExampleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBrowseButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.addChoosableFileFilter(new FileNameExtensionFilter("HTML Documents", "html"));
        chooser.addChoosableFileFilter(chooser.getAcceptAllFileFilter());
        File file = new File(FileUtil.toFile(project.getProjectDirectory()), jFileToRunTextField.getText());
        if (file.exists()) {
            chooser.setSelectedFile(file);
        } else {
            chooser.setCurrentDirectory(FileUtil.toFile(project.getProjectDirectory()));
        }
        if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
            File selected = FileUtil.normalizeFile(chooser.getSelectedFile());
            FileObject fo = FileUtil.toFileObject(selected);
            if (fo != null) {
                String rel = FileUtil.getRelativePath(project.getProjectDirectory(), fo);
                if (rel != null) {
                    jFileToRunTextField.setText(rel);
                }
            }
        }
        
    }//GEN-LAST:event_jBrowseButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBrowseButton;
    private javax.swing.JTextField jFileToRunTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox jServerComboBox;
    private javax.swing.JLabel jWebRootExampleLabel;
    private javax.swing.JLabel jWebRootLabel;
    private javax.swing.JTextField jWebRootTextField;
    // End of variables declaration//GEN-END:variables

    private void updateWebRooExample() {
        if (!jWebRootTextField.isEnabled()) {
            jWebRootExampleLabel.setText(" ");
            return;
        }
        StringBuilder s = new StringBuilder(org.openide.util.NbBundle.getMessage(RunConfigurationPanel.class, "RunConfigurationPanel.jWebRootExampleLabel.text")); // NOI18N        
        s.append(WebServer.getWebserver().getPort());
        if (getWebContextRoot().trim().length() == 0) {
            s.append("/");
        } else {
            if (!getWebContextRoot().startsWith("/")) {
                s.append("/");
            }
            s.append(getWebContextRoot());
        }
        jWebRootExampleLabel.setText(s.toString());
    }
    
    private void updateWebRootEnablement() {
        jWebRootTextField.setEnabled(jServerComboBox.getSelectedIndex() > 0);
        jWebRootLabel.setEnabled(jServerComboBox.getSelectedIndex() > 0);
        updateWebRooExample();
    }
    
    @Override
    public void insertUpdate(DocumentEvent e) {
        updateWebRooExample();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        updateWebRooExample();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        updateWebRootEnablement();
    }
}
