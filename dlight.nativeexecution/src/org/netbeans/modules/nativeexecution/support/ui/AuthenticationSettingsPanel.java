/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2010 Sun Microsystems, Inc.
 */

/*
 * NewJPanel.java
 *
 * Created on 27.04.2010, 22:10:44
 */
package org.netbeans.modules.nativeexecution.support.ui;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.modules.nativeexecution.ConnectionManagerAccessor;
import org.netbeans.modules.nativeexecution.api.ExecutionEnvironment;
import org.netbeans.modules.nativeexecution.api.util.PasswordManager;
import org.netbeans.modules.nativeexecution.api.util.Validateable;
import org.netbeans.modules.nativeexecution.api.util.ValidationListener;
import org.netbeans.modules.nativeexecution.support.Authentication;
import org.openide.util.ChangeSupport;
import org.openide.util.NbBundle;
import org.openide.util.RequestProcessor;
import org.openide.util.RequestProcessor.Task;

/**
 *
 * @author ak119685
 */
public class AuthenticationSettingsPanel extends javax.swing.JPanel implements Validateable {

    private final ExecutionEnvironment env;
    private final Task validationTask;
    private final ChangeSupport validationSupport;
    private String problem;
    private final Authentication auth;

    public AuthenticationSettingsPanel(Authentication auth, boolean showClearPwdButton) {
        this.env = auth.getEnv();
        this.auth = auth;
        initComponents();

        pwdClearButton.setVisible(showClearPwdButton);

        tfHost.setText(env.getHost());
        tfPort.setText("" + env.getSSHPort()); // NOI18N
        tfUser.setText(env.getUser());

        if (auth.getType() == Authentication.Type.SSH_KEY) {
            keyRadioButton.setSelected(true);
            pwdRadioButton.setSelected(false);
        } else {
            keyRadioButton.setSelected(false);
            pwdRadioButton.setSelected(true);
        }

        keyFld.setText(auth.getKey());

        validationSupport = new ChangeSupport(this);

        pwdClearButton.setEnabled(PasswordManager.getInstance().isRememberPassword(env));

        validationTask = new RequestProcessor("", 1).create(new ValidationTask(), true);

        keyFld.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                validationTask.schedule(0);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                validationTask.schedule(0);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                validationTask.schedule(0);
            }
        });

        enableControls();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        lblHost = new javax.swing.JLabel();
        tfHost = new javax.swing.JTextField();
        lblPort = new javax.swing.JLabel();
        tfPort = new javax.swing.JTextField();
        tfUser = new javax.swing.JTextField();
        lblUser = new javax.swing.JLabel();
        lblAuth = new javax.swing.JLabel();
        pwdRadioButton = new javax.swing.JRadioButton();
        pwdClearButton = new javax.swing.JButton();
        keyRadioButton = new javax.swing.JRadioButton();
        keyFld = new javax.swing.JTextField();
        keyBrowseButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(lblHost, org.openide.util.NbBundle.getMessage(AuthenticationSettingsPanel.class, "AuthenticationSettingsPanel.lblHost.text")); // NOI18N

        tfHost.setEditable(false);
        tfHost.setText(org.openide.util.NbBundle.getMessage(AuthenticationSettingsPanel.class, "AuthenticationSettingsPanel.tfHost.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblPort, org.openide.util.NbBundle.getMessage(AuthenticationSettingsPanel.class, "AuthenticationSettingsPanel.lblPort.text")); // NOI18N

        tfPort.setEditable(false);
        tfPort.setText(org.openide.util.NbBundle.getMessage(AuthenticationSettingsPanel.class, "AuthenticationSettingsPanel.tfPort.text")); // NOI18N

        tfUser.setEditable(false);
        tfUser.setText(org.openide.util.NbBundle.getMessage(AuthenticationSettingsPanel.class, "AuthenticationSettingsPanel.tfUser.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblUser, org.openide.util.NbBundle.getMessage(AuthenticationSettingsPanel.class, "AuthenticationSettingsPanel.lblUser.text")); // NOI18N

        lblAuth.setText(org.openide.util.NbBundle.getMessage(AuthenticationSettingsPanel.class, "AuthenticationSettingsPanel.lblAuth.text")); // NOI18N

        buttonGroup1.add(pwdRadioButton);
        pwdRadioButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(pwdRadioButton, org.openide.util.NbBundle.getMessage(AuthenticationSettingsPanel.class, "AuthenticationSettingsPanel.pwdRadioButton.text")); // NOI18N
        pwdRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwdRadioButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(pwdClearButton, org.openide.util.NbBundle.getMessage(AuthenticationSettingsPanel.class, "AuthenticationSettingsPanel.pwdClearButton.text_1")); // NOI18N
        pwdClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwdClearButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(keyRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(keyRadioButton, org.openide.util.NbBundle.getMessage(AuthenticationSettingsPanel.class, "AuthenticationSettingsPanel.keyRadioButton.text")); // NOI18N
        keyRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyRadioButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(keyBrowseButton, org.openide.util.NbBundle.getMessage(AuthenticationSettingsPanel.class, "AuthenticationSettingsPanel.keyBrowseButton.text_1")); // NOI18N
        keyBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyBrowseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblAuth)
                .addContainerGap(298, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfUser, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblHost)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfHost, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(keyRadioButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pwdRadioButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(keyFld, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfPort, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(pwdClearButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(keyBrowseButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHost)
                    .addComponent(tfHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPort))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUser)
                    .addComponent(tfUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lblAuth)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pwdRadioButton)
                    .addComponent(pwdClearButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyRadioButton)
                    .addComponent(keyBrowseButton)
                    .addComponent(keyFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void keyRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyRadioButtonActionPerformed
        enableControls();
    }//GEN-LAST:event_keyRadioButtonActionPerformed

    private void pwdClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwdClearButtonActionPerformed
        PasswordManager.getInstance().forceClearPassword(env);
        pwdClearButton.setEnabled(false);
    }//GEN-LAST:event_pwdClearButtonActionPerformed

    private void keyBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyBrowseButtonActionPerformed
        File file = openFile();
        if (file != null) {
            keyFld.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_keyBrowseButtonActionPerformed

    private void pwdRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwdRadioButtonActionPerformed
        enableControls();
    }//GEN-LAST:event_pwdRadioButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton keyBrowseButton;
    private javax.swing.JTextField keyFld;
    private javax.swing.JRadioButton keyRadioButton;
    private javax.swing.JLabel lblAuth;
    private javax.swing.JLabel lblHost;
    private javax.swing.JLabel lblPort;
    private javax.swing.JLabel lblUser;
    private javax.swing.JButton pwdClearButton;
    private javax.swing.JRadioButton pwdRadioButton;
    private javax.swing.JTextField tfHost;
    private javax.swing.JTextField tfPort;
    private javax.swing.JTextField tfUser;
    // End of variables declaration//GEN-END:variables

    private void enableControls() {
        keyBrowseButton.setEnabled(keyRadioButton.isSelected());
        keyFld.setEnabled(keyRadioButton.isSelected());
        validationTask.schedule(0);
    }

    private File openFile() {
        File dir = null;

        File f = new File(keyFld.getText().trim());

        if (f.exists() && f.isDirectory()) {
            dir = f;
        } else {
            f = f.getParentFile();
            if (f != null && f.exists() && f.isDirectory()) {
                dir = f;
            }
        }

        if (f == null) {
            f = new File(System.getProperty("user.home")); // NOI18N
        }

        JFileChooser chooser = new JFileChooser(dir);
        chooser.setMultiSelectionEnabled(false);
        chooser.setFileHidingEnabled(false);
        int dlgResult = chooser.showOpenDialog(this);
        if (JFileChooser.APPROVE_OPTION == dlgResult) {
            File result = chooser.getSelectedFile();
            if (result != null && !result.exists()) {
                result = null;
            }
            return result;
        } else {
            return null;
        }
    }

    @Override
    public void addValidationListener(ValidationListener listener) {
        validationSupport.addChangeListener(listener);
    }

    @Override
    public void removeValidationListener(ValidationListener listener) {
        validationSupport.removeChangeListener(listener);
    }

    @Override
    public boolean hasProblem() {
        return problem != null;
    }

    @Override
    public String getProblem() {
        return problem;
    }

    @Override
    public void applyChanges() {
        auth.store();
        ConnectionManagerAccessor access = ConnectionManagerAccessor.getDefault();
        access.changeAuth(env, auth);
    }

    private class ValidationTask implements Runnable {

        @Override
        public void run() {
            boolean oldState = !hasProblem();
            boolean newState = validate();
            if (oldState != newState) {
                validationSupport.fireChange();
            }
        }

        private boolean validate() {
            if (pwdRadioButton.isSelected()) {
                problem = null;
                auth.setPassword();
                return true;
            }

            String key = keyFld.getText();
            if (key.length() == 0) {
                problem = NbBundle.getMessage(AuthenticationSettingsPanel.class, "AuthenticationSettingsPanel.validationError.emptyKey.text");
                return false;
            }

            if (!Authentication.isValidKey(key)) {
                problem = NbBundle.getMessage(AuthenticationSettingsPanel.class, "AuthenticationSettingsPanel.validationError.invalidKey.text", key);
                return false;
            }

            auth.setSSHKey(key);
            problem = null;
            return true;
        }
    }
}
