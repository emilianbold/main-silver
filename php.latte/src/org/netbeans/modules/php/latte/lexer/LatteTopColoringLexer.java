/* The following code was generated by JFlex 1.4.3 on 17.1.14 16:53 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2012 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2012 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.latte.lexer;

import java.util.ArrayDeque;
import java.util.Objects;
import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17.1.14 16:53 from the specification file
 * <tt>/Users/ondrej/NetBeansProjects/web-main/php.latte/tools/LatteTopColoringLexer.flex</tt>
 */
public class LatteTopColoringLexer {
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_N_ATTR_DOUBLE = 22;
  public static final int ST_DOUBLE = 8;
  public static final int ST_SYNTAX_CHANGE = 16;
  public static final int ST_POSSIBLE_LATTE = 4;
  public static final int ST_ASP = 10;
  public static final int ST_N_ATTR_SINGLE = 24;
  public static final int ST_LATTE = 6;
  public static final int ST_COMMENT = 2;
  public static final int ST_PYTHON_DOUBLE = 14;
  public static final int ST_HIGHLIGHTING_ERROR = 26;
  public static final int ST_IN_HTML_TAG = 18;
  public static final int YYINITIAL = 0;
  public static final int ST_IN_SYNTAX_ATTR = 20;
  public static final int ST_PYTHON = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\12\1\22\2\0\1\1\22\0\1\23\1\21\1\30\1\0"+
    "\1\25\1\3\1\0\1\31\2\0\1\2\2\0\1\26\1\0\1\13"+
    "\12\20\1\24\1\0\1\16\1\27\1\17\1\25\1\0\1\10\1\37"+
    "\1\20\1\34\1\33\1\42\1\20\1\41\3\20\1\32\1\20\1\6"+
    "\1\35\1\40\2\20\1\4\1\7\1\36\2\20\1\11\1\5\1\20"+
    "\1\0\1\43\2\0\1\25\1\0\1\10\1\37\1\20\1\34\1\33"+
    "\1\42\1\20\1\41\3\20\1\32\1\20\1\6\1\35\1\40\2\20"+
    "\1\4\1\7\1\36\2\20\1\11\1\5\1\20\1\14\1\0\1\15"+
    "\uff82\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\14\0\2\2\1\3\2\2\1\1\1\4"+
    "\1\5\2\6\1\7\1\10\1\4\1\10\1\4\1\10"+
    "\1\11\1\12\1\4\2\12\1\5\1\12\1\4\1\5"+
    "\3\12\1\4\1\5\2\12\1\0\3\2\7\13\1\4"+
    "\2\13\1\4\1\13\1\14\2\2\1\15\3\0\1\16"+
    "\3\0\1\17\1\7\1\20\1\21\2\10\1\0\2\12"+
    "\1\0\2\12\1\0\2\12\1\0\1\22\7\0\1\23"+
    "\1\0\1\23\2\0\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\2\10\6\12\2\0"+
    "\1\35\2\0\1\36\1\0\2\10\6\12\1\0\1\37"+
    "\3\0\2\10\6\12\1\40\1\41\1\42\2\0\2\10"+
    "\6\12\1\43\1\44\1\10\1\45\1\12\1\45\1\12"+
    "\1\45\1\12\1\45\5\10\17\12\5\10\17\12\1\46"+
    "\2\10\1\47\1\10\1\46\2\12\1\47\1\12\1\46"+
    "\2\12\1\47\1\12\1\46\2\12\1\47\1\12\1\46"+
    "\2\10\1\47\1\10\1\46\2\12\1\47\1\12\1\46"+
    "\2\12\1\47\1\12\1\46\2\12\1\47\1\12\1\50"+
    "\2\10\1\50\2\12\1\50\2\12\1\50\2\12\1\50"+
    "\1\51\1\52\1\50\1\51\1\52\1\50\1\51\1\52"+
    "\1\50\1\51\1\52\1\51\1\52\1\51\1\52\1\51"+
    "\1\52\1\51\1\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8\0\u021c"+
    "\0\u0240\0\u0264\0\u0120\0\u0288\0\u02ac\0\u02d0\0\u021c\0\u02f4"+
    "\0\u0318\0\u033c\0\u0360\0\u0384\0\u03a8\0\u03cc\0\u021c\0\u03f0"+
    "\0\u0414\0\u0438\0\u045c\0\u0480\0\u04a4\0\u04c8\0\u04ec\0\u0510"+
    "\0\u0534\0\u0558\0\u057c\0\u05a0\0\u05c4\0\u05e8\0\u0480\0\u060c"+
    "\0\u0630\0\u0654\0\u021c\0\u0678\0\u069c\0\u06c0\0\u06e4\0\u0708"+
    "\0\u072c\0\u0750\0\u0774\0\u0798\0\u07bc\0\u07e0\0\u021c\0\u0804"+
    "\0\u0828\0\u021c\0\u084c\0\u0870\0\u0894\0\u08b8\0\u08b8\0\u08dc"+
    "\0\u0900\0\u0924\0\u0948\0\u021c\0\u021c\0\u096c\0\u0990\0\u09b4"+
    "\0\u09d8\0\u09fc\0\u0a20\0\u0a44\0\u0a68\0\u0a8c\0\u0ab0\0\u0ad4"+
    "\0\u0af8\0\u021c\0\u0b1c\0\u0b40\0\u0b64\0\u0b88\0\u0bac\0\u0bd0"+
    "\0\u072c\0\u021c\0\u0774\0\u072c\0\u0798\0\u07e0\0\u0798\0\u021c"+
    "\0\u021c\0\u021c\0\u021c\0\u021c\0\u021c\0\u021c\0\u021c\0\u021c"+
    "\0\u0bf4\0\u0c18\0\u0c3c\0\u0c60\0\u0c84\0\u0ca8\0\u0ccc\0\u0cf0"+
    "\0\u0d14\0\u0d38\0\u021c\0\u0d5c\0\u0d80\0\u021c\0\u0da4\0\u0dc8"+
    "\0\u0dec\0\u0e10\0\u0e34\0\u0e58\0\u0e7c\0\u0ea0\0\u0ec4\0\u0ee8"+
    "\0\u021c\0\u0f0c\0\u0f30\0\u0f54\0\u0f78\0\u0f9c\0\u0fc0\0\u0fe4"+
    "\0\u1008\0\u102c\0\u1050\0\u1074\0\u021c\0\u021c\0\u021c\0\u1098"+
    "\0\u10bc\0\u10e0\0\u1104\0\u1128\0\u114c\0\u1170\0\u1194\0\u11b8"+
    "\0\u11dc\0\u021c\0\u021c\0\u1200\0\u033c\0\u1224\0\u03f0\0\u1248"+
    "\0\u04a4\0\u126c\0\u0558\0\u1290\0\u12b4\0\u12d8\0\u12fc\0\u1320"+
    "\0\u1344\0\u1368\0\u138c\0\u13b0\0\u13d4\0\u13f8\0\u141c\0\u1440"+
    "\0\u1464\0\u1488\0\u14ac\0\u14d0\0\u14f4\0\u1518\0\u153c\0\u1560"+
    "\0\u1584\0\u15a8\0\u15cc\0\u15f0\0\u1614\0\u1638\0\u165c\0\u1680"+
    "\0\u16a4\0\u16c8\0\u16ec\0\u1710\0\u1734\0\u1758\0\u177c\0\u17a0"+
    "\0\u17c4\0\u17e8\0\u180c\0\u1830\0\u1854\0\u1878\0\u189c\0\u18c0"+
    "\0\u18e4\0\u1908\0\u192c\0\u1950\0\u1974\0\u1998\0\u19bc\0\u19e0"+
    "\0\u1a04\0\u1a28\0\u1a4c\0\u1a70\0\u1a94\0\u1ab8\0\u1adc\0\u021c"+
    "\0\u1b00\0\u1b24\0\u021c\0\u1b48\0\u09b4\0\u1b6c\0\u1b90\0\u09b4"+
    "\0\u1bb4\0\u04a4\0\u1bd8\0\u1bfc\0\u04a4\0\u1c20\0\u0558\0\u1c44"+
    "\0\u1c68\0\u0558\0\u1c8c\0\u1cb0\0\u1cd4\0\u1cf8\0\u1d1c\0\u1d40"+
    "\0\u1d64\0\u1d88\0\u1dac\0\u1dd0\0\u1df4\0\u1e18\0\u1e3c\0\u021c"+
    "\0\u1e60\0\u1e84\0\u09b4\0\u1ea8\0\u1ecc\0\u04a4\0\u1ef0\0\u1f14"+
    "\0\u0558\0\u1f38\0\u1f5c\0\u021c\0\u021c\0\u09b4\0\u09b4\0\u04a4"+
    "\0\u04a4\0\u0558\0\u0558";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\6\17\1\20\4\17\1\20\1\21\1\17\1\22\3\17"+
    "\2\23\20\17\1\24\1\25\1\26\7\24\1\25\7\24"+
    "\2\25\20\24\1\27\1\30\10\27\1\30\1\27\1\31"+
    "\5\27\2\30\20\27\1\32\1\33\2\32\1\34\5\32"+
    "\1\35\1\36\1\32\1\37\4\32\1\33\1\35\20\32"+
    "\1\40\1\41\2\40\1\42\5\40\1\41\1\43\1\40"+
    "\1\44\4\40\2\41\20\40\1\45\1\46\1\45\1\47"+
    "\1\50\5\45\1\46\1\51\6\45\2\46\20\45\1\52"+
    "\1\53\1\52\1\54\1\55\5\52\1\53\1\56\6\52"+
    "\2\53\20\52\1\40\1\41\2\40\1\42\5\40\1\41"+
    "\1\43\1\40\1\57\4\40\2\41\20\40\1\0\1\23"+
    "\10\0\1\23\7\0\2\23\20\0\6\17\1\60\4\17"+
    "\1\61\1\21\1\17\1\62\3\17\2\23\20\17\1\63"+
    "\1\33\6\63\1\64\1\63\1\33\7\63\2\33\6\63"+
    "\1\65\1\63\1\66\1\67\2\63\1\70\3\63\1\71"+
    "\1\72\10\71\1\72\7\71\2\72\4\71\1\63\12\71"+
    "\1\73\1\74\1\75\10\74\1\75\7\74\2\75\5\74"+
    "\1\63\11\74\1\76\22\77\1\0\21\77\6\17\1\100"+
    "\4\17\2\0\1\17\1\0\3\17\2\101\20\17\46\0"+
    "\1\102\1\103\10\0\1\104\32\0\1\105\6\106\6\0"+
    "\1\106\1\107\2\0\1\106\5\0\11\106\1\0\2\24"+
    "\1\110\42\24\1\25\1\110\7\24\1\25\7\24\2\25"+
    "\23\24\1\111\11\24\1\112\26\24\1\0\1\30\10\0"+
    "\1\30\7\0\2\30\21\0\1\113\2\0\6\114\1\113"+
    "\1\114\4\0\2\114\2\113\1\0\1\114\4\0\11\114"+
    "\1\0\1\32\1\0\13\32\1\115\4\32\1\0\21\32"+
    "\1\0\1\33\10\0\1\33\7\0\2\33\20\0\1\32"+
    "\1\0\3\32\1\116\7\32\1\115\4\32\1\0\22\32"+
    "\1\33\10\32\1\35\2\32\1\115\4\32\1\33\1\35"+
    "\21\32\1\0\2\32\1\117\10\32\1\115\4\32\1\0"+
    "\21\32\15\40\1\120\27\40\1\41\10\40\1\41\2\40"+
    "\1\120\4\40\2\41\25\40\1\121\7\40\1\120\32\40"+
    "\1\122\10\40\1\120\43\40\1\37\26\40\3\45\1\123"+
    "\41\45\1\46\1\45\1\123\6\45\1\46\7\45\2\46"+
    "\37\45\1\37\27\45\1\123\1\45\1\124\41\45\1\123"+
    "\1\125\37\45\3\52\1\126\41\52\1\53\1\52\1\126"+
    "\6\52\1\53\7\52\2\53\35\52\1\37\31\52\1\126"+
    "\1\52\1\127\41\52\1\126\1\130\37\52\24\0\1\131"+
    "\36\0\1\132\27\0\1\105\6\106\1\0\1\133\4\0"+
    "\1\106\1\107\2\0\1\106\5\0\11\106\5\0\1\134"+
    "\47\0\1\135\70\0\1\136\50\0\1\137\6\0\1\140"+
    "\36\0\30\141\1\142\12\141\1\143\1\141\1\72\10\141"+
    "\1\72\7\141\2\72\4\141\1\142\12\141\1\143\30\141"+
    "\1\144\12\141\1\143\31\145\1\142\11\145\1\146\1\145"+
    "\1\75\10\145\1\75\7\145\2\75\5\145\1\142\11\145"+
    "\1\146\31\145\1\147\11\145\1\146\6\17\1\100\43\17"+
    "\1\0\4\17\2\0\1\17\1\0\3\17\2\101\20\17"+
    "\1\150\1\0\1\151\7\150\1\0\7\150\2\0\20\150"+
    "\1\152\1\0\1\153\7\152\1\0\1\152\1\0\5\152"+
    "\2\0\20\152\1\154\1\0\1\155\7\154\1\0\7\154"+
    "\2\0\20\154\4\0\6\106\6\0\1\106\3\0\1\106"+
    "\5\0\11\106\1\0\3\24\1\0\11\24\1\0\26\24"+
    "\15\0\1\156\1\0\1\157\41\0\1\160\27\0\1\113"+
    "\10\0\1\113\7\0\2\113\20\0\1\32\1\0\4\32"+
    "\1\161\6\32\1\115\4\32\1\0\22\32\1\0\3\32"+
    "\1\162\7\32\1\115\4\32\1\0\21\32\15\40\1\0"+
    "\34\40\1\163\6\40\1\120\33\40\1\164\7\40\1\120"+
    "\26\40\17\45\1\0\27\45\1\123\2\45\1\165\40\45"+
    "\1\123\1\45\1\166\36\45\15\52\1\0\31\52\1\126"+
    "\2\52\1\167\40\52\1\126\1\52\1\170\36\52\4\0"+
    "\6\171\6\0\1\171\5\0\1\171\3\0\11\171\5\0"+
    "\6\172\6\0\1\172\3\0\1\172\5\0\11\172\41\0"+
    "\1\173\12\0\1\174\72\0\1\175\47\0\1\176\10\0"+
    "\1\177\34\0\1\32\1\0\5\32\1\200\5\32\1\115"+
    "\4\32\1\0\22\32\1\0\4\32\1\201\6\32\1\115"+
    "\4\32\1\0\21\32\7\40\1\202\5\40\1\120\34\40"+
    "\1\203\6\40\1\120\26\40\3\45\1\123\3\45\1\204"+
    "\37\45\1\123\2\45\1\205\35\45\3\52\1\126\3\52"+
    "\1\206\37\52\1\126\2\52\1\207\35\52\4\0\6\171"+
    "\6\0\1\171\5\0\1\171\1\210\2\0\11\171\5\0"+
    "\6\172\5\0\1\211\1\172\3\0\1\172\5\0\11\172"+
    "\10\0\1\212\73\0\1\213\45\0\1\214\2\0\1\32"+
    "\1\0\6\32\1\215\4\32\1\115\4\32\1\0\22\32"+
    "\1\0\5\32\1\216\5\32\1\115\4\32\1\0\21\32"+
    "\10\40\1\217\4\40\1\120\35\40\1\220\5\40\1\120"+
    "\26\40\3\45\1\123\4\45\1\221\36\45\1\123\3\45"+
    "\1\222\34\45\3\52\1\126\4\52\1\223\36\52\1\126"+
    "\3\52\1\224\34\52\30\0\1\225\1\226\45\0\1\227"+
    "\42\0\1\230\46\0\1\231\6\0\1\32\1\0\7\32"+
    "\1\232\3\32\1\115\4\32\1\0\22\32\1\0\6\32"+
    "\1\233\4\32\1\115\4\32\1\0\21\32\11\40\1\234"+
    "\3\40\1\120\36\40\1\235\4\40\1\120\26\40\3\45"+
    "\1\123\5\45\1\236\35\45\1\123\4\45\1\237\33\45"+
    "\3\52\1\126\5\52\1\240\35\52\1\126\4\52\1\241"+
    "\33\52\33\0\1\242\16\0\1\243\35\0\1\32\1\0"+
    "\10\32\1\244\2\32\1\115\4\32\1\0\1\244\21\32"+
    "\1\0\7\32\1\245\3\32\1\115\4\32\1\0\21\32"+
    "\12\40\1\246\2\40\1\120\5\40\1\246\31\40\1\247"+
    "\3\40\1\120\26\40\3\45\1\123\6\45\1\250\10\45"+
    "\1\250\23\45\1\123\5\45\1\251\32\45\3\52\1\126"+
    "\6\52\1\252\10\52\1\252\23\52\1\126\5\52\1\253"+
    "\32\52\1\32\1\0\6\32\1\254\1\32\1\244\2\32"+
    "\1\115\4\32\1\0\1\244\6\32\1\255\1\32\1\256"+
    "\1\257\2\32\1\260\3\32\10\40\1\261\1\40\1\246"+
    "\2\40\1\120\5\40\1\246\6\40\1\262\1\40\1\263"+
    "\1\264\2\40\1\265\3\40\3\45\1\123\4\45\1\266"+
    "\1\45\1\250\10\45\1\250\6\45\1\267\1\45\1\270"+
    "\1\271\2\45\1\272\3\45\3\52\1\126\4\52\1\273"+
    "\1\52\1\252\10\52\1\252\6\52\1\274\1\52\1\275"+
    "\1\276\2\52\1\277\3\52\1\32\1\0\2\32\1\300"+
    "\10\32\1\115\4\32\1\0\22\32\1\0\6\32\1\301"+
    "\4\32\1\115\4\32\1\0\22\32\1\0\13\32\1\115"+
    "\4\32\1\0\12\32\1\302\7\32\1\0\13\32\1\115"+
    "\4\32\1\0\17\32\1\303\2\32\1\0\3\32\1\304"+
    "\7\32\1\115\4\32\1\0\21\32\4\40\1\305\10\40"+
    "\1\120\36\40\1\306\4\40\1\120\43\40\1\120\17\40"+
    "\1\307\23\40\1\120\24\40\1\310\6\40\1\311\7\40"+
    "\1\120\26\40\3\45\1\123\1\312\42\45\1\123\4\45"+
    "\1\313\36\45\1\123\31\45\1\314\11\45\1\123\36\45"+
    "\1\315\4\45\1\123\1\45\1\316\36\45\3\52\1\126"+
    "\1\317\42\52\1\126\4\52\1\320\36\52\1\126\31\52"+
    "\1\321\11\52\1\126\36\52\1\322\4\52\1\126\1\52"+
    "\1\323\36\52\1\32\1\0\13\32\1\115\4\32\1\0"+
    "\15\32\1\324\4\32\1\0\5\32\1\325\5\32\1\115"+
    "\4\32\1\0\22\32\1\0\13\32\1\115\4\32\1\0"+
    "\13\32\1\326\6\32\1\0\13\32\1\115\4\32\1\0"+
    "\17\32\1\327\2\32\1\0\5\32\1\330\5\32\1\115"+
    "\4\32\1\0\21\32\15\40\1\120\22\40\1\331\12\40"+
    "\1\332\5\40\1\120\43\40\1\120\20\40\1\333\22\40"+
    "\1\120\24\40\1\334\10\40\1\335\5\40\1\120\26\40"+
    "\3\45\1\123\34\45\1\336\6\45\1\123\3\45\1\337"+
    "\37\45\1\123\32\45\1\340\10\45\1\123\36\45\1\341"+
    "\4\45\1\123\3\45\1\342\34\45\3\52\1\126\34\52"+
    "\1\343\6\52\1\126\3\52\1\344\37\52\1\126\32\52"+
    "\1\345\10\52\1\126\36\52\1\346\4\52\1\126\3\52"+
    "\1\347\34\52\1\32\1\0\13\32\1\350\4\32\1\0"+
    "\22\32\1\0\5\32\1\351\5\32\1\115\4\32\1\0"+
    "\22\32\1\0\13\32\1\115\4\32\1\0\14\32\1\352"+
    "\5\32\1\0\13\32\1\353\4\32\1\0\22\32\1\0"+
    "\13\32\1\115\4\32\1\0\16\32\1\354\2\32\15\40"+
    "\1\355\35\40\1\356\5\40\1\120\43\40\1\120\21\40"+
    "\1\357\21\40\1\360\43\40\1\120\23\40\1\361\2\40"+
    "\3\45\1\123\11\45\1\362\31\45\1\123\3\45\1\363"+
    "\37\45\1\123\33\45\1\364\7\45\1\123\11\45\1\365"+
    "\31\45\1\123\35\45\1\366\2\45\3\52\1\126\11\52"+
    "\1\367\31\52\1\126\3\52\1\370\37\52\1\126\33\52"+
    "\1\371\7\52\1\126\11\52\1\372\31\52\1\126\35\52"+
    "\1\373\2\52\1\32\1\0\13\32\1\115\4\32\1\0"+
    "\10\32\1\374\11\32\1\0\13\32\1\115\4\32\1\0"+
    "\7\32\1\375\12\32\1\0\13\32\1\115\4\32\1\0"+
    "\12\32\1\376\6\32\15\40\1\120\15\40\1\377\25\40"+
    "\1\120\14\40\1\u0100\26\40\1\120\17\40\1\u0101\6\40"+
    "\3\45\1\123\27\45\1\u0102\13\45\1\123\26\45\1\u0103"+
    "\14\45\1\123\31\45\1\u0104\6\45\3\52\1\126\27\52"+
    "\1\u0105\13\52\1\126\26\52\1\u0106\14\52\1\126\31\52"+
    "\1\u0107\6\52\1\32\1\0\13\32\1\u0108\4\32\1\0"+
    "\22\32\1\0\13\32\1\115\4\32\1\0\10\32\1\u0109"+
    "\11\32\1\0\4\32\1\u010a\6\32\1\115\4\32\1\0"+
    "\21\32\15\40\1\u010b\43\40\1\120\15\40\1\u010c\16\40"+
    "\1\u010d\6\40\1\120\26\40\3\45\1\123\11\45\1\u010e"+
    "\31\45\1\123\27\45\1\u010f\13\45\1\123\2\45\1\u0110"+
    "\35\45\3\52\1\126\11\52\1\u0111\31\52\1\126\27\52"+
    "\1\u0112\13\52\1\126\2\52\1\u0113\35\52\1\32\1\0"+
    "\13\32\1\u0114\4\32\1\0\22\32\1\0\13\32\1\u0115"+
    "\4\32\1\0\21\32\15\40\1\u0116\43\40\1\u0117\26\40"+
    "\3\45\1\123\11\45\1\u0118\31\45\1\123\11\45\1\u0119"+
    "\26\45\3\52\1\126\11\52\1\u011a\31\52\1\126\11\52"+
    "\1\u011b\26\52";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8064];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\14\0\1\1\1\11\6\1\1\11\7\1"+
    "\1\11\17\1\1\0\3\1\1\11\13\1\1\11\2\1"+
    "\1\11\3\0\1\1\3\0\2\1\2\11\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\1\11\7\0"+
    "\1\11\1\0\1\1\2\0\1\1\11\11\10\1\2\0"+
    "\1\11\2\0\1\11\1\0\10\1\1\0\1\11\3\0"+
    "\10\1\3\11\2\0\10\1\2\11\104\1\1\11\2\1"+
    "\1\11\34\1\1\11\13\1\2\11\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    private LatteStateStack stack = new LatteStateStack();
    private LexerInput input;
    private Syntax syntax;
    private ArrayDeque<HtmlTag> tags;

    public LatteTopColoringLexer(LexerRestartInfo info) {
        this.input = info.input();
        if(info.state() != null) {
            //reset state
            setState((LexerState) info.state());
            this.syntax = ((LexerState) info.state()).syntax;
            this.tags = ((LexerState) info.state()).tags.clone();
        } else {
            zzState = zzLexicalState = YYINITIAL;
            this.syntax = Syntax.LATTE;
            this.tags = new ArrayDeque<>() ;
            stack.clear();
        }

    }

    private boolean curlyInBalance(String text) {
        int textLength = text.length();
        int openCurly = textLength - text.replace("{", "").length();
        int closeCurly = textLength - text.replace("}", "").length();
        return openCurly == closeCurly;
    }

    private enum Syntax {
        LATTE,
        DOUBLE,
        ASP,
        PYTHON,
        OFF;
    }

    private static final class HtmlTag {
        private boolean isSyntax;

        public void setIsSyntax(boolean isSyntax) {
            this.isSyntax = isSyntax;
        }

        public boolean isSyntax() {
            return isSyntax;
        }

    }

    public static final class LexerState  {
        final LatteStateStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;
        private final Syntax syntax;
        private final ArrayDeque<HtmlTag> tags;

        LexerState(LatteStateStack stack, int zzState, int zzLexicalState, Syntax syntax, ArrayDeque<HtmlTag> tags) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.syntax = syntax;
            this.tags = tags;
        }

        @Override
        public int hashCode() {
            int hash = 7;
            hash = 89 * hash + Objects.hashCode(this.stack);
            hash = 89 * hash + this.zzState;
            hash = 89 * hash + this.zzLexicalState;
            hash = 89 * hash + (this.syntax != null ? this.syntax.hashCode() : 0);
            hash = 89 * hash + Objects.hashCode(this.tags);
            return hash;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final LexerState other = (LexerState) obj;
            if (!Objects.equals(this.stack, other.stack)) {
                return false;
            }
            if (this.zzState != other.zzState) {
                return false;
            }
            if (this.zzLexicalState != other.zzLexicalState) {
                return false;
            }
            if (this.syntax != other.syntax) {
                return false;
            }
            if (!Objects.equals(this.tags, other.tags)) {
                return false;
            }
            return true;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.createClone(), zzState, zzLexicalState, syntax, tags.clone());
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected void popState() {
        yybegin(stack.popStack());
    }

    protected void pushState(final int state) {
        stack.pushStack(getZZLexicalState());
        yybegin(state);
    }


 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatteTopColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LatteTopColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public LatteTopTokenId findNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 42:
          { if (yytext().endsWith("}")) {
            yypushback(1);
        }
        syntax = Syntax.PYTHON;
        return LatteTopTokenId.T_LATTE;
          }
        case 43: break;
        case 40:
          { if (yytext().endsWith("}")) {
            yypushback(1);
        }
        syntax = Syntax.LATTE;
        return LatteTopTokenId.T_LATTE;
          }
        case 44: break;
        case 12:
          { return LatteTopTokenId.T_LATTE_ERROR;
          }
        case 45: break;
        case 8:
          { if (curlyInBalance(yytext())) {
            return LatteTopTokenId.T_LATTE;
        }
          }
        case 46: break;
        case 2:
          { return LatteTopTokenId.T_HTML;
          }
        case 47: break;
        case 16:
          { yypushback(1);
        if (syntax == Syntax.LATTE) {
            pushState(ST_LATTE);
            return LatteTopTokenId.T_LATTE_OPEN_DELIMITER;
        } else {
            popState();
            return LatteTopTokenId.T_HTML;
        }
          }
        case 48: break;
        case 32:
          { String text = yytext().toLowerCase().trim();
        String attributeName = text.substring(2, text.length() - 2);
        if ("syntax".equals(attributeName)) { //NOI18N
            tags.peek().setIsSyntax(true);
            pushState(ST_IN_SYNTAX_ATTR);
        } else {
            pushState(ST_N_ATTR_DOUBLE);
        }
        return LatteTopTokenId.T_HTML;
          }
        case 49: break;
        case 17:
          { if (curlyInBalance(yytext().substring(0, yylength() - 1))) {
            yypushback(1);
            return LatteTopTokenId.T_LATTE;
        }
          }
        case 50: break;
        case 5:
          { yypushback(yylength());
        pushState(ST_HIGHLIGHTING_ERROR);
          }
        case 51: break;
        case 21:
          { if (syntax == Syntax.PYTHON) {
            pushState(ST_COMMENT);
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 52: break;
        case 29:
          { popState();
        syntax = Syntax.ASP;
        return LatteTopTokenId.T_LATTE;
          }
        case 53: break;
        case 35:
          { popState();
        syntax = Syntax.DOUBLE;
        return LatteTopTokenId.T_LATTE;
          }
        case 54: break;
        case 38:
          { if (yytext().endsWith("}")) {
            yypushback(1);
        }
        syntax = Syntax.ASP;
        return LatteTopTokenId.T_LATTE;
          }
        case 55: break;
        case 24:
          { yypushback(1);
        if (syntax == Syntax.ASP) {
            pushState(ST_ASP);
            return LatteTopTokenId.T_LATTE_OPEN_DELIMITER;
        }
          }
        case 56: break;
        case 19:
          { yypushback(1);
        popState();
        return LatteTopTokenId.T_LATTE;
          }
        case 57: break;
        case 30:
          { popState();
        syntax = Syntax.OFF;
        return LatteTopTokenId.T_LATTE;
          }
        case 58: break;
        case 13:
          { if (syntax == Syntax.LATTE) {
            pushState(ST_COMMENT);
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 59: break;
        case 3:
          { yypushback(1);
        pushState(ST_POSSIBLE_LATTE);
          }
        case 60: break;
        case 26:
          { if (syntax == Syntax.PYTHON) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 61: break;
        case 39:
          { if (yytext().endsWith("}")) {
            yypushback(1);
        }
        syntax = Syntax.OFF;
        return LatteTopTokenId.T_LATTE;
          }
        case 62: break;
        case 25:
          { if (syntax == Syntax.ASP) {
            pushState(ST_COMMENT);
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 63: break;
        case 6:
          { yypushback(yylength());
        popState();
          }
        case 64: break;
        case 1:
          { return LatteTopTokenId.T_LATTE_COMMENT;
          }
        case 65: break;
        case 14:
          { tags.push(new HtmlTag());
        pushState(ST_IN_HTML_TAG);
        return LatteTopTokenId.T_HTML;
          }
        case 66: break;
        case 11:
          { popState();
          }
        case 67: break;
        case 33:
          { String text = yytext().toLowerCase().trim();
        String attributeName = text.substring(2, text.length() - 2);
        if ("syntax".equals(attributeName)) { //NOI18N
            tags.peek().setIsSyntax(true);
            pushState(ST_IN_SYNTAX_ATTR);
        } else {
            pushState(ST_N_ATTR_SINGLE);
        }
        return LatteTopTokenId.T_HTML;
          }
        case 68: break;
        case 10:
          { return LatteTopTokenId.T_LATTE;
          }
        case 69: break;
        case 7:
          { popState();
        return LatteTopTokenId.T_HTML;
          }
        case 70: break;
        case 18:
          { if (!tags.isEmpty()) {
            HtmlTag tag = tags.pop();
            if (tag.isSyntax()) {
                syntax = Syntax.LATTE;
            }
        }
        popState();
        return LatteTopTokenId.T_HTML;
          }
        case 71: break;
        case 41:
          { if (yytext().endsWith("}")) {
            yypushback(1);
        }
        syntax = Syntax.DOUBLE;
        return LatteTopTokenId.T_LATTE;
          }
        case 72: break;
        case 36:
          { popState();
        syntax = Syntax.PYTHON;
        return LatteTopTokenId.T_LATTE;
          }
        case 73: break;
        case 28:
          { if (syntax == Syntax.DOUBLE || syntax == Syntax.PYTHON) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 74: break;
        case 31:
          { HtmlTag tag = tags.pop();
        if (tag.isSyntax()) {
            syntax = Syntax.LATTE;
        }
        popState();
        return LatteTopTokenId.T_HTML;
          }
        case 75: break;
        case 20:
          { yypushback(1);
        if (syntax == Syntax.PYTHON) {
            pushState(ST_PYTHON);
            return LatteTopTokenId.T_LATTE_OPEN_DELIMITER;
        }
          }
        case 76: break;
        case 22:
          { yypushback(1);
        if (syntax == Syntax.DOUBLE) {
            pushState(ST_DOUBLE);
            return LatteTopTokenId.T_LATTE_OPEN_DELIMITER;
        }
        if (syntax == Syntax.PYTHON) {
            pushState(ST_PYTHON_DOUBLE);
            return LatteTopTokenId.T_LATTE_OPEN_DELIMITER;
        }
        if (syntax == Syntax.LATTE) {
            yypushback(1);
            return LatteTopTokenId.T_HTML;
        }
          }
        case 77: break;
        case 37:
          { syntax = Syntax.LATTE;
        return LatteTopTokenId.T_LATTE;
          }
        case 78: break;
        case 9:
          { popState();
        return LatteTopTokenId.T_LATTE_CLOSE_DELIMITER;
          }
        case 79: break;
        case 23:
          { if (syntax == Syntax.DOUBLE || syntax == Syntax.PYTHON) {
            pushState(ST_COMMENT);
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 80: break;
        case 27:
          { if (syntax == Syntax.ASP) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 81: break;
        case 15:
          { if (syntax == Syntax.LATTE) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 82: break;
        case 34:
          { popState();
        syntax = Syntax.LATTE;
        return LatteTopTokenId.T_LATTE;
          }
        case 83: break;
        case 4:
          {
          }
        case 84: break;
        default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
              {         if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return LatteTopTokenId.T_LATTE_ERROR;
        } else {
            return null;
        }
 }

          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
