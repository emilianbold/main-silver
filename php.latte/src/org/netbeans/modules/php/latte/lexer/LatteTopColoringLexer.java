/* The following code was generated by JFlex 1.4.3 on 19.4.13 9:48 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2012 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2012 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.latte.lexer;

import java.util.Objects;
import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19.4.13 9:48 from the specification file
 * <tt>/Users/ondrej/NetBeansProjects/web-main/php.latte/tools/LatteTopColoringLexer.flex</tt>
 */
public class LatteTopColoringLexer {
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_N_ATTR_DOUBLE = 16;
  public static final int ST_DOUBLE = 6;
  public static final int ST_SYNTAX_CHANGE = 14;
  public static final int ST_ASP = 8;
  public static final int ST_N_ATTR_SINGLE = 18;
  public static final int ST_LATTE = 4;
  public static final int ST_COMMENT = 2;
  public static final int ST_PYTHON_DOUBLE = 12;
  public static final int ST_HIGHLIGHTING_ERROR = 20;
  public static final int YYINITIAL = 0;
  public static final int ST_PYTHON = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\11\1\1\2\0\1\1\22\0\1\11\1\0\1\23\2\0"+
    "\1\16\1\0\1\24\2\0\1\2\2\0\1\21\1\0\1\12\12\21"+
    "\1\20\1\0\1\15\1\22\1\17\2\0\1\7\1\33\1\21\1\30"+
    "\1\27\1\36\1\21\1\35\3\21\1\26\1\21\1\5\1\31\1\34"+
    "\2\21\1\3\1\6\1\32\2\21\1\10\1\4\1\21\1\0\1\25"+
    "\2\0\1\21\1\0\1\7\1\33\1\21\1\30\1\27\1\36\1\21"+
    "\1\35\3\21\1\26\1\21\1\5\1\31\1\34\2\21\1\3\1\6"+
    "\1\32\2\21\1\10\1\4\1\21\1\13\1\0\1\14\uff82\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\4\1\1\2\1\3\1\2\1\4\1\3\2\4"+
    "\1\5\1\4\1\3\2\4\1\6\1\4\1\3\2\4"+
    "\1\6\1\4\1\3\2\4\1\6\1\0\1\6\1\3"+
    "\3\6\1\3\1\6\1\7\1\10\1\11\1\12\1\0"+
    "\1\13\2\0\1\14\2\0\1\15\1\0\2\4\1\0"+
    "\2\4\1\0\2\4\1\0\2\4\1\0\1\16\1\0"+
    "\1\16\2\0\1\16\1\17\1\20\1\21\1\0\1\22"+
    "\1\23\1\24\1\25\10\4\2\0\10\4\1\0\10\4"+
    "\1\26\1\27\11\4\1\30\1\4\1\30\1\4\1\30"+
    "\1\4\1\30\50\4\1\31\2\4\1\32\1\4\1\31"+
    "\2\4\1\32\1\4\1\31\2\4\1\32\1\4\1\31"+
    "\2\4\1\32\25\4\1\33\1\34\1\33\1\34\1\33"+
    "\1\34\1\33\1\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\174\0\233\0\272\0\331"+
    "\0\370\0\u0117\0\u0136\0\331\0\u0155\0\u0174\0\u0193\0\u01b2"+
    "\0\u01d1\0\u01f0\0\u020f\0\u022e\0\u024d\0\u026c\0\331\0\u028b"+
    "\0\u02aa\0\u02c9\0\u02e8\0\u0307\0\u0326\0\u0345\0\u0364\0\u0383"+
    "\0\u03a2\0\u03c1\0\u03e0\0\u03ff\0\u041e\0\u043d\0\u0307\0\u045c"+
    "\0\u047b\0\331\0\u049a\0\u04b9\0\u04d8\0\u04f7\0\331\0\u0516"+
    "\0\331\0\331\0\u0535\0\u0554\0\u0573\0\u0592\0\u05b1\0\u01b2"+
    "\0\u01f0\0\u05d0\0\u05ef\0\u060e\0\u062d\0\u064c\0\u066b\0\u068a"+
    "\0\u06a9\0\u06c8\0\u06e7\0\u0706\0\u0725\0\u0744\0\u045c\0\331"+
    "\0\u049a\0\u045c\0\u04b9\0\u04f7\0\u04b9\0\331\0\331\0\331"+
    "\0\u0763\0\u0573\0\331\0\331\0\331\0\u0782\0\u07a1\0\u07c0"+
    "\0\u07df\0\u07fe\0\u081d\0\u083c\0\u085b\0\u087a\0\u0899\0\u08b8"+
    "\0\u08d7\0\u08f6\0\u0915\0\u0934\0\u0953\0\u0972\0\u0991\0\u09b0"+
    "\0\u09cf\0\u09ee\0\u0a0d\0\u0a2c\0\u0a4b\0\u0a6a\0\u0a89\0\u0aa8"+
    "\0\u0573\0\u0573\0\u0ac7\0\u0ae6\0\u0b05\0\u0b24\0\u0b43\0\u0b62"+
    "\0\u0b81\0\u0ba0\0\u0bbf\0\u020f\0\u0bde\0\u028b\0\u0bfd\0\u0326"+
    "\0\u0c1c\0\u03c1\0\u0c3b\0\u0c5a\0\u0c79\0\u0c98\0\u0cb7\0\u0cd6"+
    "\0\u0cf5\0\u0d14\0\u0d33\0\u0d52\0\u0d71\0\u0d90\0\u0daf\0\u0dce"+
    "\0\u0ded\0\u0e0c\0\u0e2b\0\u0e4a\0\u0e69\0\u0e88\0\u0ea7\0\u0ec6"+
    "\0\u0ee5\0\u0f04\0\u0f23\0\u0f42\0\u0f61\0\u0f80\0\u0f9f\0\u0fbe"+
    "\0\u0fdd\0\u0ffc\0\u101b\0\u103a\0\u1059\0\u1078\0\u1097\0\u10b6"+
    "\0\u10d5\0\u10f4\0\u020f\0\u1113\0\u1132\0\u020f\0\u1151\0\u028b"+
    "\0\u1170\0\u118f\0\u028b\0\u11ae\0\u0326\0\u11cd\0\u11ec\0\u0326"+
    "\0\u120b\0\u03c1\0\u122a\0\u1249\0\u03c1\0\u1268\0\u1287\0\u12a6"+
    "\0\u12c5\0\u12e4\0\u1303\0\u1322\0\u1341\0\u1360\0\u137f\0\u139e"+
    "\0\u13bd\0\u13dc\0\u13fb\0\u141a\0\u1439\0\u1458\0\u1477\0\u1496"+
    "\0\u14b5\0\u14d4\0\u020f\0\u020f\0\u028b\0\u028b\0\u0326\0\u0326"+
    "\0\u03c1\0\u03c1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\7\14\1\15\1\14\1\16\1\14\1\17"+
    "\21\14\1\20\1\21\1\22\6\20\1\21\25\20\1\23"+
    "\1\24\1\23\1\25\5\23\1\24\1\26\1\23\1\27"+
    "\22\23\1\30\1\31\1\30\1\32\5\30\1\31\1\33"+
    "\1\30\1\34\22\30\1\35\1\36\1\35\1\37\5\35"+
    "\1\36\1\40\3\35\1\41\20\35\1\42\1\43\1\42"+
    "\1\44\5\42\1\43\1\45\3\42\1\46\20\42\1\30"+
    "\1\31\1\30\1\32\5\30\1\31\1\33\1\30\1\47"+
    "\22\30\37\0\1\50\1\51\7\50\1\51\11\50\1\52"+
    "\1\50\1\53\11\50\1\54\1\55\7\54\1\55\12\54"+
    "\1\52\1\56\11\54\1\57\1\60\7\57\1\60\25\57"+
    "\1\0\1\15\7\0\1\15\25\0\2\61\1\62\10\61"+
    "\1\63\2\61\1\64\20\61\5\65\1\66\10\65\1\67"+
    "\1\0\17\65\2\70\1\71\35\70\1\21\1\71\6\70"+
    "\1\21\25\70\14\0\1\72\1\0\1\73\20\0\14\23"+
    "\1\0\23\23\1\24\7\23\1\24\2\23\1\0\26\23"+
    "\1\74\7\23\1\0\25\23\1\75\10\23\1\0\22\23"+
    "\14\30\1\76\23\30\1\31\7\30\1\31\2\30\1\76"+
    "\26\30\1\77\7\30\1\76\25\30\1\100\10\30\1\76"+
    "\36\30\1\27\22\30\16\35\1\101\21\35\1\36\7\35"+
    "\1\36\4\35\1\101\24\35\1\102\11\35\1\101\23\35"+
    "\1\103\12\35\1\101\37\35\1\27\17\35\16\42\1\104"+
    "\21\42\1\43\7\42\1\43\4\42\1\104\24\42\1\105"+
    "\11\42\1\104\23\42\1\106\12\42\1\104\34\42\1\27"+
    "\22\42\23\107\1\110\1\107\1\111\12\107\1\51\7\107"+
    "\1\51\11\107\1\110\1\107\1\111\34\107\1\112\1\107"+
    "\1\111\11\107\24\113\1\110\1\114\12\113\1\55\7\113"+
    "\1\55\12\113\1\110\1\114\35\113\1\115\1\114\11\113"+
    "\1\0\1\60\7\0\1\60\25\0\2\116\1\117\10\116"+
    "\1\0\23\116\2\0\1\120\34\0\5\65\1\66\11\65"+
    "\1\0\24\65\1\66\11\65\1\0\1\121\20\65\1\122"+
    "\2\65\1\66\11\65\1\0\17\65\14\0\1\123\36\0"+
    "\1\124\2\0\1\125\17\0\5\23\1\126\6\23\1\0"+
    "\26\23\1\127\7\23\1\0\22\23\14\30\1\0\27\30"+
    "\1\130\6\30\1\76\26\30\1\131\7\30\1\76\22\30"+
    "\17\35\1\0\24\35\1\132\10\35\1\101\24\35\1\133"+
    "\11\35\1\101\20\35\14\42\1\0\27\42\1\134\10\42"+
    "\1\104\24\42\1\135\11\42\1\104\20\42\3\65\2\136"+
    "\1\137\3\136\6\65\1\0\1\65\1\136\4\65\11\136"+
    "\6\23\1\140\5\23\1\0\27\23\1\141\6\23\1\0"+
    "\22\23\6\30\1\142\5\30\1\76\27\30\1\143\6\30"+
    "\1\76\22\30\6\35\1\144\7\35\1\101\25\35\1\145"+
    "\10\35\1\101\20\35\6\42\1\146\7\42\1\104\25\42"+
    "\1\147\10\42\1\104\20\42\3\65\2\136\1\137\3\136"+
    "\6\65\1\0\1\65\1\136\1\150\3\65\11\136\3\65"+
    "\2\136\1\137\3\136\6\65\1\0\1\121\1\136\1\150"+
    "\3\65\11\136\7\23\1\151\4\23\1\0\30\23\1\152"+
    "\5\23\1\0\22\23\7\30\1\153\4\30\1\76\30\30"+
    "\1\154\5\30\1\76\22\30\7\35\1\155\6\35\1\101"+
    "\26\35\1\156\7\35\1\101\20\35\7\42\1\157\6\42"+
    "\1\104\26\42\1\160\7\42\1\104\20\42\5\65\1\66"+
    "\11\65\1\0\3\65\1\161\1\162\12\65\10\23\1\163"+
    "\3\23\1\0\31\23\1\164\4\23\1\0\22\23\10\30"+
    "\1\165\3\30\1\76\31\30\1\166\4\30\1\76\22\30"+
    "\10\35\1\167\5\35\1\101\27\35\1\170\6\35\1\101"+
    "\20\35\10\42\1\171\5\42\1\104\27\42\1\172\6\42"+
    "\1\104\20\42\11\23\1\173\2\23\1\0\32\23\1\174"+
    "\3\23\1\0\22\23\11\30\1\175\2\30\1\76\32\30"+
    "\1\176\3\30\1\76\22\30\11\35\1\177\4\35\1\101"+
    "\30\35\1\200\5\35\1\101\20\35\11\42\1\201\4\42"+
    "\1\104\30\42\1\202\5\42\1\104\20\42\7\23\1\203"+
    "\1\23\1\173\2\23\1\0\11\23\1\204\1\23\1\205"+
    "\1\206\2\23\1\207\2\23\7\30\1\210\1\30\1\175"+
    "\2\30\1\76\11\30\1\211\1\30\1\212\1\213\2\30"+
    "\1\214\2\30\7\35\1\215\1\35\1\177\4\35\1\101"+
    "\7\35\1\216\1\35\1\217\1\220\2\35\1\221\2\35"+
    "\7\42\1\222\1\42\1\201\4\42\1\104\7\42\1\223"+
    "\1\42\1\224\1\225\2\42\1\226\2\42\3\23\1\227"+
    "\10\23\1\0\31\23\1\230\4\23\1\0\36\23\1\0"+
    "\14\23\1\231\21\23\1\0\21\23\1\232\4\23\1\233"+
    "\7\23\1\0\22\23\3\30\1\234\10\30\1\76\31\30"+
    "\1\235\4\30\1\76\36\30\1\76\14\30\1\236\21\30"+
    "\1\76\21\30\1\237\4\30\1\240\7\30\1\76\22\30"+
    "\3\35\1\241\12\35\1\101\27\35\1\242\6\35\1\101"+
    "\36\35\1\101\12\35\1\243\23\35\1\101\17\35\1\244"+
    "\4\35\1\245\11\35\1\101\20\35\3\42\1\246\12\42"+
    "\1\104\27\42\1\247\6\42\1\104\36\42\1\104\12\42"+
    "\1\250\23\42\1\104\17\42\1\251\4\42\1\252\11\42"+
    "\1\104\20\42\14\23\1\0\17\23\1\253\10\23\1\254"+
    "\5\23\1\0\36\23\1\0\15\23\1\255\20\23\1\0"+
    "\21\23\1\256\6\23\1\257\5\23\1\0\22\23\14\30"+
    "\1\76\17\30\1\260\10\30\1\261\5\30\1\76\36\30"+
    "\1\76\15\30\1\262\20\30\1\76\21\30\1\263\6\30"+
    "\1\264\5\30\1\76\22\30\16\35\1\101\15\35\1\265"+
    "\10\35\1\266\7\35\1\101\36\35\1\101\13\35\1\267"+
    "\22\35\1\101\17\35\1\270\6\35\1\271\7\35\1\101"+
    "\20\35\16\42\1\104\15\42\1\272\10\42\1\273\7\42"+
    "\1\104\36\42\1\104\13\42\1\274\22\42\1\104\17\42"+
    "\1\275\6\42\1\276\7\42\1\104\20\42\6\23\1\277"+
    "\5\23\1\0\36\23\1\0\16\23\1\300\17\23\1\0"+
    "\20\23\1\301\1\23\6\30\1\302\5\30\1\76\36\30"+
    "\1\76\16\30\1\303\17\30\1\76\20\30\1\304\1\30"+
    "\6\35\1\305\7\35\1\101\36\35\1\101\14\35\1\306"+
    "\21\35\1\101\16\35\1\307\1\35\6\42\1\310\7\42"+
    "\1\104\36\42\1\104\14\42\1\311\21\42\1\104\16\42"+
    "\1\312\1\42\14\23\1\0\12\23\1\174\23\23\1\0"+
    "\11\23\1\313\24\23\1\0\14\23\1\314\5\23\14\30"+
    "\1\76\12\30\1\176\23\30\1\76\11\30\1\315\24\30"+
    "\1\76\14\30\1\316\5\30\16\35\1\101\10\35\1\200"+
    "\25\35\1\101\7\35\1\317\26\35\1\101\12\35\1\320"+
    "\5\35\16\42\1\104\10\42\1\202\25\42\1\104\7\42"+
    "\1\321\26\42\1\104\12\42\1\322\5\42\14\23\1\0"+
    "\12\23\1\323\14\23\1\324\6\23\1\0\22\23\14\30"+
    "\1\76\12\30\1\325\14\30\1\326\6\30\1\76\22\30"+
    "\16\35\1\101\10\35\1\327\14\35\1\330\10\35\1\101"+
    "\20\35\16\42\1\104\10\42\1\331\14\42\1\332\10\42"+
    "\1\104\20\42";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5363];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\10\3\0\1\11\12\1\1\11\17\1\1\0"+
    "\2\1\1\11\4\1\1\11\1\1\2\11\1\0\1\1"+
    "\2\0\1\1\2\0\1\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\1\11\1\0\1\1"+
    "\2\0\1\1\3\11\1\0\1\1\3\11\10\1\2\0"+
    "\10\1\1\0\162\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    private LatteStateStack stack = new LatteStateStack();
    private LexerInput input;
    private Syntax syntax;

    public LatteTopColoringLexer(LexerRestartInfo info) {
        this.input = info.input();
        if(info.state() != null) {
            //reset state
            setState((LexerState) info.state());
            this.syntax = ((LexerState) info.state()).syntax;
        } else {
            zzState = zzLexicalState = YYINITIAL;
            this.syntax = Syntax.LATTE;
            stack.clear();
        }

    }

    private enum Syntax {
        LATTE,
        DOUBLE,
        ASP,
        PYTHON,
        OFF;
    }

    public static final class LexerState  {
        final LatteStateStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;
        private final Syntax syntax;

        LexerState(LatteStateStack stack, int zzState, int zzLexicalState, Syntax syntax) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.syntax = syntax;
        }

        @Override
        public int hashCode() {
            int hash = 5;
            hash = 29 * hash + Objects.hashCode(this.stack);
            hash = 29 * hash + this.zzState;
            hash = 29 * hash + this.zzLexicalState;
            hash = 29 * hash + (this.syntax != null ? this.syntax.hashCode() : 0);
            return hash;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final LexerState other = (LexerState) obj;
            if (!Objects.equals(this.stack, other.stack)) {
                return false;
            }
            if (this.zzState != other.zzState) {
                return false;
            }
            if (this.zzLexicalState != other.zzLexicalState) {
                return false;
            }
            if (this.syntax != other.syntax) {
                return false;
            }
            return true;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.createClone(), zzState, zzLexicalState, syntax);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected void popState() {
        yybegin(stack.popStack());
    }

    protected void pushState(final int state) {
        stack.pushStack(getZZLexicalState());
        yybegin(state);
    }


 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatteTopColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LatteTopColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public LatteTopTokenId findNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5:
          { popState();
        return LatteTopTokenId.T_LATTE_DELIMITER;
          }
        case 29: break;
        case 22:
          { pushState(ST_N_ATTR_DOUBLE);
        return LatteTopTokenId.T_HTML;
          }
        case 30: break;
        case 17:
          { if (syntax == Syntax.PYTHON) {
            pushState(ST_COMMENT);
        }
          }
        case 31: break;
        case 12:
          { if (syntax == Syntax.ASP) {
            pushState(ST_ASP);
            return LatteTopTokenId.T_LATTE_DELIMITER;
        }
          }
        case 32: break;
        case 28:
          { syntax = Syntax.PYTHON;
        return LatteTopTokenId.T_LATTE;
          }
        case 33: break;
        case 15:
          { yypushback(1);
        if (syntax == Syntax.DOUBLE) {
            pushState(ST_DOUBLE);
            return LatteTopTokenId.T_LATTE_DELIMITER;
        }
        if (syntax == Syntax.PYTHON) {
            pushState(ST_PYTHON_DOUBLE);
            return LatteTopTokenId.T_LATTE_DELIMITER;
        }
        if (syntax == Syntax.LATTE) {
            yypushback(1);
            return LatteTopTokenId.T_HTML;
        }
          }
        case 34: break;
        case 14:
          { yypushback(1);
        popState();
        return LatteTopTokenId.T_LATTE;
          }
        case 35: break;
        case 7:
          { return LatteTopTokenId.T_LATTE_ERROR;
          }
        case 36: break;
        case 6:
          { yypushback(yylength());
        pushState(ST_HIGHLIGHTING_ERROR);
          }
        case 37: break;
        case 11:
          { if (syntax == Syntax.PYTHON) {
            pushState(ST_PYTHON);
            return LatteTopTokenId.T_LATTE_DELIMITER;
        }
          }
        case 38: break;
        case 1:
          { return LatteTopTokenId.T_HTML;
          }
        case 39: break;
        case 18:
          { if (syntax == Syntax.ASP) {
            pushState(ST_COMMENT);
        }
          }
        case 40: break;
        case 25:
          { syntax = Syntax.ASP;
        return LatteTopTokenId.T_LATTE;
          }
        case 41: break;
        case 19:
          { if (syntax == Syntax.DOUBLE || syntax == Syntax.PYTHON) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT;
        }
          }
        case 42: break;
        case 2:
          { popState();
        return LatteTopTokenId.T_HTML;
          }
        case 43: break;
        case 20:
          { if (syntax == Syntax.PYTHON) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT;
        }
          }
        case 44: break;
        case 27:
          { syntax = Syntax.DOUBLE;
        return LatteTopTokenId.T_LATTE;
          }
        case 45: break;
        case 13:
          { if (syntax == Syntax.LATTE) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT;
        }
          }
        case 46: break;
        case 24:
          { syntax = Syntax.LATTE;
        return LatteTopTokenId.T_LATTE;
          }
        case 47: break;
        case 16:
          { if (syntax == Syntax.DOUBLE || syntax == Syntax.PYTHON) {
            pushState(ST_COMMENT);
        }
          }
        case 48: break;
        case 4:
          { return LatteTopTokenId.T_LATTE;
          }
        case 49: break;
        case 9:
          { yypushback(1);
        if (syntax == Syntax.LATTE) {
            pushState(ST_LATTE);
            return LatteTopTokenId.T_LATTE_DELIMITER;
        }
          }
        case 50: break;
        case 26:
          { syntax = Syntax.OFF;
        return LatteTopTokenId.T_LATTE;
          }
        case 51: break;
        case 21:
          { if (syntax == Syntax.ASP) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT;
        }
          }
        case 52: break;
        case 10:
          { if (syntax == Syntax.LATTE) {
            pushState(ST_COMMENT);
        }
          }
        case 53: break;
        case 23:
          { pushState(ST_N_ATTR_SINGLE);
        return LatteTopTokenId.T_HTML;
          }
        case 54: break;
        case 3:
          {
          }
        case 55: break;
        case 8:
          { popState();
          }
        case 56: break;
        default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
              {         if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return LatteTopTokenId.T_LATTE_ERROR;
        } else {
            return null;
        }
 }

          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
