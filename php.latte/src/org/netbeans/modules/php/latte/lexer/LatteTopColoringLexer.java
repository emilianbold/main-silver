/* The following code was generated by JFlex 1.4.3 on 19.6.13 11:40 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2012 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2012 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.latte.lexer;

import java.util.ArrayDeque;
import java.util.Objects;
import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19.6.13 11:40 from the specification file
 * <tt>/home/warden/NetBeansProjects/web-main-new/php.latte/tools/LatteTopColoringLexer.flex</tt>
 */
public class LatteTopColoringLexer {
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_N_ATTR_DOUBLE = 22;
  public static final int ST_DOUBLE = 8;
  public static final int ST_SYNTAX_CHANGE = 16;
  public static final int ST_POSSIBLE_LATTE = 4;
  public static final int ST_ASP = 10;
  public static final int ST_N_ATTR_SINGLE = 24;
  public static final int ST_LATTE = 6;
  public static final int ST_COMMENT = 2;
  public static final int ST_PYTHON_DOUBLE = 14;
  public static final int ST_HIGHLIGHTING_ERROR = 26;
  public static final int ST_IN_HTML_TAG = 18;
  public static final int YYINITIAL = 0;
  public static final int ST_IN_SYNTAX_ATTR = 20;
  public static final int ST_PYTHON = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\12\1\22\2\0\1\1\22\0\1\23\1\21\1\27\2\0"+
    "\1\3\1\0\1\30\2\0\1\2\2\0\1\25\1\0\1\13\12\20"+
    "\1\24\1\0\1\16\1\26\1\17\2\0\1\10\1\36\1\20\1\33"+
    "\1\32\1\41\1\20\1\40\3\20\1\31\1\20\1\6\1\34\1\37"+
    "\2\20\1\4\1\7\1\35\2\20\1\11\1\5\1\20\1\0\1\42"+
    "\4\0\1\10\1\36\1\20\1\33\1\32\1\41\1\20\1\40\3\20"+
    "\1\31\1\20\1\6\1\34\1\37\2\20\1\4\1\7\1\35\2\20"+
    "\1\11\1\5\1\20\1\14\1\0\1\15\uff82\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\14\0\2\2\1\3\2\2\1\1\1\4"+
    "\1\5\2\6\1\7\1\10\1\4\2\10\1\11\1\10"+
    "\1\4\2\10\1\5\1\10\1\4\1\5\3\10\1\4"+
    "\1\5\2\10\1\0\3\2\1\12\1\4\6\12\1\4"+
    "\2\12\1\4\1\12\1\13\2\2\1\14\3\0\1\15"+
    "\3\0\1\16\1\17\1\7\2\10\1\0\2\10\1\0"+
    "\2\10\1\0\2\10\1\0\1\20\7\0\1\21\1\0"+
    "\1\21\2\0\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\10\10\2\0\1\33\2\0"+
    "\1\34\1\0\10\10\1\0\1\35\3\0\10\10\1\36"+
    "\1\37\1\40\2\0\10\10\1\41\1\42\1\10\1\43"+
    "\1\10\1\43\1\10\1\43\1\10\1\43\50\10\1\44"+
    "\2\10\1\45\1\10\1\44\2\10\1\45\1\10\1\44"+
    "\2\10\1\45\1\10\1\44\2\10\1\45\25\10\1\46"+
    "\1\47\1\46\1\47\1\46\1\47\1\46\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\365"+
    "\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7\0\u01ea\0\u020d"+
    "\0\u0230\0\u0253\0\u0118\0\u0276\0\u0299\0\u02bc\0\u020d\0\u02df"+
    "\0\u0302\0\u0325\0\u0348\0\u036b\0\u038e\0\u020d\0\u03b1\0\u03d4"+
    "\0\u03f7\0\u041a\0\u043d\0\u0460\0\u0483\0\u04a6\0\u04c9\0\u04ec"+
    "\0\u050f\0\u0532\0\u0555\0\u0578\0\u059b\0\u043d\0\u05be\0\u05e1"+
    "\0\u0604\0\u020d\0\u0627\0\u064a\0\u066d\0\u0690\0\u06b3\0\u06d6"+
    "\0\u06f9\0\u071c\0\u073f\0\u0762\0\u0785\0\u07a8\0\u020d\0\u07cb"+
    "\0\u07ee\0\u020d\0\u0811\0\u0834\0\u0857\0\u087a\0\u087a\0\u089d"+
    "\0\u08c0\0\u08e3\0\u020d\0\u0906\0\u0929\0\u094c\0\u096f\0\u0992"+
    "\0\u09b5\0\u09d8\0\u09fb\0\u0a1e\0\u0a41\0\u0a64\0\u0a87\0\u0aaa"+
    "\0\u020d\0\u0acd\0\u0af0\0\u0b13\0\u0b36\0\u0b59\0\u0b7c\0\u06f9"+
    "\0\u020d\0\u073f\0\u06f9\0\u0762\0\u07a8\0\u0762\0\u020d\0\u020d"+
    "\0\u020d\0\u020d\0\u020d\0\u020d\0\u020d\0\u020d\0\u020d\0\u0b9f"+
    "\0\u0bc2\0\u0be5\0\u0c08\0\u0c2b\0\u0c4e\0\u0c71\0\u0c94\0\u0cb7"+
    "\0\u0cda\0\u020d\0\u0cfd\0\u0d20\0\u020d\0\u0d43\0\u0d66\0\u0d89"+
    "\0\u0dac\0\u0dcf\0\u0df2\0\u0e15\0\u0e38\0\u0e5b\0\u0e7e\0\u020d"+
    "\0\u0ea1\0\u0ec4\0\u0ee7\0\u0f0a\0\u0f2d\0\u0f50\0\u0f73\0\u0f96"+
    "\0\u0fb9\0\u0fdc\0\u0fff\0\u020d\0\u020d\0\u020d\0\u1022\0\u1045"+
    "\0\u1068\0\u108b\0\u10ae\0\u10d1\0\u10f4\0\u1117\0\u113a\0\u115d"+
    "\0\u020d\0\u020d\0\u1180\0\u0325\0\u11a3\0\u03b1\0\u11c6\0\u0460"+
    "\0\u11e9\0\u050f\0\u120c\0\u122f\0\u1252\0\u1275\0\u1298\0\u12bb"+
    "\0\u12de\0\u1301\0\u1324\0\u1347\0\u136a\0\u138d\0\u13b0\0\u13d3"+
    "\0\u13f6\0\u1419\0\u143c\0\u145f\0\u1482\0\u14a5\0\u14c8\0\u14eb"+
    "\0\u150e\0\u1531\0\u1554\0\u1577\0\u159a\0\u15bd\0\u15e0\0\u1603"+
    "\0\u1626\0\u1649\0\u166c\0\u168f\0\u16b2\0\u16d5\0\u16f8\0\u171b"+
    "\0\u173e\0\u1761\0\u0325\0\u1784\0\u17a7\0\u0325\0\u17ca\0\u03b1"+
    "\0\u17ed\0\u1810\0\u03b1\0\u1833\0\u0460\0\u1856\0\u1879\0\u0460"+
    "\0\u189c\0\u050f\0\u18bf\0\u18e2\0\u050f\0\u1905\0\u1928\0\u194b"+
    "\0\u196e\0\u1991\0\u19b4\0\u19d7\0\u19fa\0\u1a1d\0\u1a40\0\u1a63"+
    "\0\u1a86\0\u1aa9\0\u1acc\0\u1aef\0\u1b12\0\u1b35\0\u1b58\0\u1b7b"+
    "\0\u1b9e\0\u1bc1\0\u0325\0\u0325\0\u03b1\0\u03b1\0\u0460\0\u0460"+
    "\0\u050f\0\u050f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\6\17\1\20\4\17\1\20\1\21\1\17\1\22\3\17"+
    "\2\23\17\17\1\24\1\25\1\26\7\24\1\25\7\24"+
    "\2\25\17\24\1\27\1\30\10\27\1\30\1\27\1\31"+
    "\5\27\2\30\17\27\1\32\1\33\2\32\1\34\5\32"+
    "\1\33\1\35\1\32\1\36\4\32\2\33\17\32\1\37"+
    "\1\40\2\37\1\41\5\37\1\40\1\42\1\37\1\43"+
    "\4\37\2\40\17\37\1\44\1\45\1\44\1\46\1\47"+
    "\5\44\1\45\1\50\6\44\2\45\17\44\1\51\1\52"+
    "\1\51\1\53\1\54\5\51\1\52\1\55\6\51\2\52"+
    "\17\51\1\37\1\40\2\37\1\41\5\37\1\40\1\42"+
    "\1\37\1\56\4\37\2\40\17\37\1\0\1\23\10\0"+
    "\1\23\7\0\2\23\17\0\6\17\1\57\4\17\1\60"+
    "\1\21\1\17\1\61\3\17\2\23\17\17\1\62\1\63"+
    "\6\62\1\64\1\62\1\63\7\62\2\63\5\62\1\65"+
    "\1\62\1\66\1\67\2\62\1\70\3\62\1\71\1\72"+
    "\10\71\1\72\7\71\2\72\3\71\1\62\12\71\1\73"+
    "\1\74\1\75\10\74\1\75\7\74\2\75\4\74\1\62"+
    "\11\74\1\76\22\77\1\0\20\77\6\17\1\100\4\17"+
    "\2\0\1\17\1\0\3\17\2\101\17\17\45\0\1\102"+
    "\1\103\10\0\1\104\31\0\1\105\6\106\6\0\1\106"+
    "\1\107\2\0\1\106\4\0\11\106\1\0\2\24\1\110"+
    "\41\24\1\25\1\110\7\24\1\25\7\24\2\25\22\24"+
    "\1\111\11\24\1\112\25\24\1\0\1\30\10\0\1\30"+
    "\7\0\2\30\17\0\1\113\1\114\10\113\1\114\1\113"+
    "\2\0\4\113\2\114\17\113\15\32\1\0\26\32\1\33"+
    "\10\32\1\33\2\32\1\0\4\32\2\33\24\32\1\115"+
    "\7\32\1\0\31\32\1\116\10\32\1\0\25\32\15\37"+
    "\1\117\26\37\1\40\10\37\1\40\2\37\1\117\4\37"+
    "\2\40\24\37\1\120\7\37\1\117\31\37\1\121\10\37"+
    "\1\117\42\37\1\36\25\37\3\44\1\122\40\44\1\45"+
    "\1\44\1\122\6\44\1\45\7\44\2\45\36\44\1\36"+
    "\26\44\1\122\1\44\1\123\40\44\1\122\1\124\36\44"+
    "\3\51\1\125\40\51\1\52\1\51\1\125\6\51\1\52"+
    "\7\51\2\52\34\51\1\36\30\51\1\125\1\51\1\126"+
    "\40\51\1\125\1\127\36\51\24\0\1\130\35\0\1\131"+
    "\26\0\1\105\6\106\1\0\1\132\4\0\1\106\1\107"+
    "\2\0\1\106\4\0\11\106\2\0\1\63\10\0\1\63"+
    "\7\0\2\63\23\0\1\133\46\0\1\134\66\0\1\135"+
    "\47\0\1\136\6\0\1\137\35\0\27\140\1\141\12\140"+
    "\1\142\1\140\1\72\10\140\1\72\7\140\2\72\3\140"+
    "\1\141\12\140\1\142\27\140\1\143\12\140\1\142\30\144"+
    "\1\141\11\144\1\145\1\144\1\75\10\144\1\75\7\144"+
    "\2\75\4\144\1\141\11\144\1\145\30\144\1\146\11\144"+
    "\1\145\6\17\1\100\42\17\1\0\4\17\2\0\1\17"+
    "\1\0\3\17\2\101\17\17\1\147\1\0\1\150\7\147"+
    "\1\0\7\147\2\0\17\147\1\151\1\0\1\152\7\151"+
    "\1\0\1\151\1\0\5\151\2\0\17\151\1\153\1\0"+
    "\1\154\7\153\1\0\7\153\2\0\17\153\4\0\6\106"+
    "\6\0\1\106\3\0\1\106\4\0\11\106\1\0\3\24"+
    "\1\0\11\24\1\0\25\24\15\0\1\155\1\0\1\156"+
    "\40\0\1\157\26\0\1\114\10\0\1\114\7\0\2\114"+
    "\17\0\6\32\1\160\6\32\1\0\32\32\1\161\7\32"+
    "\1\0\25\32\15\37\1\0\33\37\1\162\6\37\1\117"+
    "\32\37\1\163\7\37\1\117\25\37\17\44\1\0\26\44"+
    "\1\122\2\44\1\164\37\44\1\122\1\44\1\165\35\44"+
    "\15\51\1\0\30\51\1\125\2\51\1\166\37\51\1\125"+
    "\1\51\1\167\35\51\4\0\6\170\6\0\1\170\4\0"+
    "\1\170\3\0\11\170\5\0\6\171\6\0\1\171\3\0"+
    "\1\171\4\0\11\171\40\0\1\172\12\0\1\173\70\0"+
    "\1\174\46\0\1\175\10\0\1\176\33\0\7\32\1\177"+
    "\5\32\1\0\33\32\1\200\6\32\1\0\25\32\7\37"+
    "\1\201\5\37\1\117\33\37\1\202\6\37\1\117\25\37"+
    "\3\44\1\122\3\44\1\203\36\44\1\122\2\44\1\204"+
    "\34\44\3\51\1\125\3\51\1\205\36\51\1\125\2\51"+
    "\1\206\34\51\4\0\6\170\6\0\1\170\4\0\1\170"+
    "\1\207\2\0\11\170\5\0\6\171\5\0\1\210\1\171"+
    "\3\0\1\171\4\0\11\171\10\0\1\211\71\0\1\212"+
    "\44\0\1\213\2\0\10\32\1\214\4\32\1\0\34\32"+
    "\1\215\5\32\1\0\25\32\10\37\1\216\4\37\1\117"+
    "\34\37\1\217\5\37\1\117\25\37\3\44\1\122\4\44"+
    "\1\220\35\44\1\122\3\44\1\221\33\44\3\51\1\125"+
    "\4\51\1\222\35\51\1\125\3\51\1\223\33\51\27\0"+
    "\1\224\1\225\44\0\1\226\41\0\1\227\45\0\1\230"+
    "\6\0\11\32\1\231\3\32\1\0\35\32\1\232\4\32"+
    "\1\0\25\32\11\37\1\233\3\37\1\117\35\37\1\234"+
    "\4\37\1\117\25\37\3\44\1\122\5\44\1\235\34\44"+
    "\1\122\4\44\1\236\32\44\3\51\1\125\5\51\1\237"+
    "\34\51\1\125\4\51\1\240\32\51\32\0\1\241\16\0"+
    "\1\242\34\0\12\32\1\243\2\32\1\0\5\32\1\243"+
    "\30\32\1\244\3\32\1\0\25\32\12\37\1\245\2\37"+
    "\1\117\5\37\1\245\30\37\1\246\3\37\1\117\25\37"+
    "\3\44\1\122\6\44\1\247\10\44\1\247\22\44\1\122"+
    "\5\44\1\250\31\44\3\51\1\125\6\51\1\251\10\51"+
    "\1\251\22\51\1\125\5\51\1\252\31\51\10\32\1\253"+
    "\1\32\1\243\2\32\1\0\5\32\1\243\5\32\1\254"+
    "\1\32\1\255\1\256\2\32\1\257\3\32\10\37\1\260"+
    "\1\37\1\245\2\37\1\117\5\37\1\245\5\37\1\261"+
    "\1\37\1\262\1\263\2\37\1\264\3\37\3\44\1\122"+
    "\4\44\1\265\1\44\1\247\10\44\1\247\5\44\1\266"+
    "\1\44\1\267\1\270\2\44\1\271\3\44\3\51\1\125"+
    "\4\51\1\272\1\51\1\251\10\51\1\251\5\51\1\273"+
    "\1\51\1\274\1\275\2\51\1\276\3\51\4\32\1\277"+
    "\10\32\1\0\35\32\1\300\4\32\1\0\42\32\1\0"+
    "\16\32\1\301\23\32\1\0\23\32\1\302\6\32\1\303"+
    "\7\32\1\0\25\32\4\37\1\304\10\37\1\117\35\37"+
    "\1\305\4\37\1\117\42\37\1\117\16\37\1\306\23\37"+
    "\1\117\23\37\1\307\6\37\1\310\7\37\1\117\25\37"+
    "\3\44\1\122\1\311\41\44\1\122\4\44\1\312\35\44"+
    "\1\122\30\44\1\313\11\44\1\122\35\44\1\314\4\44"+
    "\1\122\1\44\1\315\35\44\3\51\1\125\1\316\41\51"+
    "\1\125\4\51\1\317\35\51\1\125\30\51\1\320\11\51"+
    "\1\125\35\51\1\321\4\51\1\125\1\51\1\322\35\51"+
    "\15\32\1\0\21\32\1\323\12\32\1\324\5\32\1\0"+
    "\42\32\1\0\17\32\1\325\22\32\1\0\23\32\1\326"+
    "\10\32\1\327\5\32\1\0\25\32\15\37\1\117\21\37"+
    "\1\330\12\37\1\331\5\37\1\117\42\37\1\117\17\37"+
    "\1\332\22\37\1\117\23\37\1\333\10\37\1\334\5\37"+
    "\1\117\25\37\3\44\1\122\33\44\1\335\6\44\1\122"+
    "\3\44\1\336\36\44\1\122\31\44\1\337\10\44\1\122"+
    "\35\44\1\340\4\44\1\122\3\44\1\341\33\44\3\51"+
    "\1\125\33\51\1\342\6\51\1\125\3\51\1\343\36\51"+
    "\1\125\31\51\1\344\10\51\1\125\35\51\1\345\4\51"+
    "\1\125\3\51\1\346\33\51\7\32\1\347\5\32\1\0"+
    "\42\32\1\0\20\32\1\350\21\32\1\0\22\32\1\351"+
    "\2\32\7\37\1\352\5\37\1\117\42\37\1\117\20\37"+
    "\1\353\21\37\1\117\22\37\1\354\2\37\3\44\1\122"+
    "\3\44\1\355\36\44\1\122\32\44\1\356\7\44\1\122"+
    "\34\44\1\357\2\44\3\51\1\125\3\51\1\360\36\51"+
    "\1\125\32\51\1\361\7\51\1\125\34\51\1\362\2\51"+
    "\15\32\1\0\14\32\1\244\25\32\1\0\13\32\1\363"+
    "\26\32\1\0\16\32\1\364\6\32\15\37\1\117\14\37"+
    "\1\246\25\37\1\117\13\37\1\365\26\37\1\117\16\37"+
    "\1\366\6\37\3\44\1\122\26\44\1\250\13\44\1\122"+
    "\25\44\1\367\14\44\1\122\30\44\1\370\6\44\3\51"+
    "\1\125\26\51\1\252\13\51\1\125\25\51\1\371\14\51"+
    "\1\125\30\51\1\372\6\51\15\32\1\0\14\32\1\373"+
    "\16\32\1\374\6\32\1\0\25\32\15\37\1\117\14\37"+
    "\1\375\16\37\1\376\6\37\1\117\25\37\3\44\1\122"+
    "\26\44\1\377\13\44\1\122\2\44\1\u0100\34\44\3\51"+
    "\1\125\26\51\1\u0101\13\51\1\125\2\51\1\u0102\34\51";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7140];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\14\0\1\1\1\11\6\1\1\11\6\1"+
    "\1\11\17\1\1\0\3\1\1\11\14\1\1\11\2\1"+
    "\1\11\3\0\1\1\3\0\1\1\1\11\3\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\1\11\7\0"+
    "\1\11\1\0\1\1\2\0\1\1\11\11\10\1\2\0"+
    "\1\11\2\0\1\11\1\0\10\1\1\0\1\11\3\0"+
    "\10\1\3\11\2\0\10\1\2\11\140\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    private LatteStateStack stack = new LatteStateStack();
    private LexerInput input;
    private Syntax syntax;
    private ArrayDeque<HtmlTag> tags;

    public LatteTopColoringLexer(LexerRestartInfo info) {
        this.input = info.input();
        if(info.state() != null) {
            //reset state
            setState((LexerState) info.state());
            this.syntax = ((LexerState) info.state()).syntax;
            this.tags = ((LexerState) info.state()).tags.clone();
        } else {
            zzState = zzLexicalState = YYINITIAL;
            this.syntax = Syntax.LATTE;
            this.tags = new ArrayDeque<>() ;
            stack.clear();
        }

    }

    private enum Syntax {
        LATTE,
        DOUBLE,
        ASP,
        PYTHON,
        OFF;
    }

    private static final class HtmlTag {
        private boolean isSyntax;

        public void setIsSyntax(boolean isSyntax) {
            this.isSyntax = isSyntax;
        }

        public boolean isSyntax() {
            return isSyntax;
        }

    }

    public static final class LexerState  {
        final LatteStateStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;
        private final Syntax syntax;
        private final ArrayDeque<HtmlTag> tags;

        LexerState(LatteStateStack stack, int zzState, int zzLexicalState, Syntax syntax, ArrayDeque<HtmlTag> tags) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.syntax = syntax;
            this.tags = tags;
        }

        @Override
        public int hashCode() {
            int hash = 7;
            hash = 89 * hash + Objects.hashCode(this.stack);
            hash = 89 * hash + this.zzState;
            hash = 89 * hash + this.zzLexicalState;
            hash = 89 * hash + (this.syntax != null ? this.syntax.hashCode() : 0);
            hash = 89 * hash + Objects.hashCode(this.tags);
            return hash;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final LexerState other = (LexerState) obj;
            if (!Objects.equals(this.stack, other.stack)) {
                return false;
            }
            if (this.zzState != other.zzState) {
                return false;
            }
            if (this.zzLexicalState != other.zzLexicalState) {
                return false;
            }
            if (this.syntax != other.syntax) {
                return false;
            }
            if (!Objects.equals(this.tags, other.tags)) {
                return false;
            }
            return true;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.createClone(), zzState, zzLexicalState, syntax, tags.clone());
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected void popState() {
        yybegin(stack.popStack());
    }

    protected void pushState(final int state) {
        stack.pushStack(getZZLexicalState());
        yybegin(state);
    }


 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatteTopColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LatteTopColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public LatteTopTokenId findNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11:
          { return LatteTopTokenId.T_LATTE_ERROR;
          }
        case 40: break;
        case 2:
          { return LatteTopTokenId.T_HTML;
          }
        case 41: break;
        case 15:
          { yypushback(1);
        if (syntax == Syntax.LATTE) {
            pushState(ST_LATTE);
            return LatteTopTokenId.T_LATTE_OPEN_DELIMITER;
        } else {
            popState();
            return LatteTopTokenId.T_HTML;
        }
          }
        case 42: break;
        case 30:
          { String text = yytext().toLowerCase().trim();
        String attributeName = text.substring(2, text.length() - 2);
        if ("syntax".equals(attributeName)) { //NOI18N
            tags.peek().setIsSyntax(true);
            pushState(ST_IN_SYNTAX_ATTR);
        } else {
            pushState(ST_N_ATTR_DOUBLE);
        }
        return LatteTopTokenId.T_HTML;
          }
        case 43: break;
        case 5:
          { yypushback(yylength());
        pushState(ST_HIGHLIGHTING_ERROR);
          }
        case 44: break;
        case 39:
          { syntax = Syntax.PYTHON;
        return LatteTopTokenId.T_LATTE;
          }
        case 45: break;
        case 19:
          { if (syntax == Syntax.PYTHON) {
            pushState(ST_COMMENT);
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 46: break;
        case 27:
          { popState();
        syntax = Syntax.ASP;
        return LatteTopTokenId.T_LATTE;
          }
        case 47: break;
        case 33:
          { popState();
        syntax = Syntax.DOUBLE;
        return LatteTopTokenId.T_LATTE;
          }
        case 48: break;
        case 22:
          { yypushback(1);
        if (syntax == Syntax.ASP) {
            pushState(ST_ASP);
            return LatteTopTokenId.T_LATTE_OPEN_DELIMITER;
        }
          }
        case 49: break;
        case 17:
          { yypushback(1);
        popState();
        return LatteTopTokenId.T_LATTE;
          }
        case 50: break;
        case 28:
          { popState();
        syntax = Syntax.OFF;
        return LatteTopTokenId.T_LATTE;
          }
        case 51: break;
        case 12:
          { if (syntax == Syntax.LATTE) {
            pushState(ST_COMMENT);
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 52: break;
        case 3:
          { yypushback(1);
        pushState(ST_POSSIBLE_LATTE);
          }
        case 53: break;
        case 24:
          { if (syntax == Syntax.PYTHON) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 54: break;
        case 23:
          { if (syntax == Syntax.ASP) {
            pushState(ST_COMMENT);
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 55: break;
        case 6:
          { yypushback(yylength());
        popState();
          }
        case 56: break;
        case 1:
          { return LatteTopTokenId.T_LATTE_COMMENT;
          }
        case 57: break;
        case 13:
          { tags.push(new HtmlTag());
        pushState(ST_IN_HTML_TAG);
        return LatteTopTokenId.T_HTML;
          }
        case 58: break;
        case 10:
          { popState();
          }
        case 59: break;
        case 31:
          { String text = yytext().toLowerCase().trim();
        String attributeName = text.substring(2, text.length() - 2);
        if ("syntax".equals(attributeName)) { //NOI18N
            tags.peek().setIsSyntax(true);
            pushState(ST_IN_SYNTAX_ATTR);
        } else {
            pushState(ST_N_ATTR_SINGLE);
        }
        return LatteTopTokenId.T_HTML;
          }
        case 60: break;
        case 8:
          { return LatteTopTokenId.T_LATTE;
          }
        case 61: break;
        case 36:
          { syntax = Syntax.ASP;
        return LatteTopTokenId.T_LATTE;
          }
        case 62: break;
        case 7:
          { popState();
        return LatteTopTokenId.T_HTML;
          }
        case 63: break;
        case 16:
          { if (!tags.isEmpty()) {
            HtmlTag tag = tags.pop();
            if (tag.isSyntax()) {
                syntax = Syntax.LATTE;
            }
        }
        popState();
        return LatteTopTokenId.T_HTML;
          }
        case 64: break;
        case 34:
          { popState();
        syntax = Syntax.PYTHON;
        return LatteTopTokenId.T_LATTE;
          }
        case 65: break;
        case 26:
          { if (syntax == Syntax.DOUBLE || syntax == Syntax.PYTHON) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 66: break;
        case 29:
          { HtmlTag tag = tags.pop();
        if (tag.isSyntax()) {
            syntax = Syntax.LATTE;
        }
        popState();
        return LatteTopTokenId.T_HTML;
          }
        case 67: break;
        case 18:
          { yypushback(1);
        if (syntax == Syntax.PYTHON) {
            pushState(ST_PYTHON);
            return LatteTopTokenId.T_LATTE_OPEN_DELIMITER;
        }
          }
        case 68: break;
        case 20:
          { yypushback(1);
        if (syntax == Syntax.DOUBLE) {
            pushState(ST_DOUBLE);
            return LatteTopTokenId.T_LATTE_OPEN_DELIMITER;
        }
        if (syntax == Syntax.PYTHON) {
            pushState(ST_PYTHON_DOUBLE);
            return LatteTopTokenId.T_LATTE_OPEN_DELIMITER;
        }
        if (syntax == Syntax.LATTE) {
            yypushback(1);
            return LatteTopTokenId.T_HTML;
        }
          }
        case 69: break;
        case 37:
          { syntax = Syntax.OFF;
        return LatteTopTokenId.T_LATTE;
          }
        case 70: break;
        case 35:
          { syntax = Syntax.LATTE;
        return LatteTopTokenId.T_LATTE;
          }
        case 71: break;
        case 9:
          { popState();
        return LatteTopTokenId.T_LATTE_CLOSE_DELIMITER;
          }
        case 72: break;
        case 21:
          { if (syntax == Syntax.DOUBLE || syntax == Syntax.PYTHON) {
            pushState(ST_COMMENT);
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 73: break;
        case 38:
          { syntax = Syntax.DOUBLE;
        return LatteTopTokenId.T_LATTE;
          }
        case 74: break;
        case 25:
          { if (syntax == Syntax.ASP) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 75: break;
        case 14:
          { if (syntax == Syntax.LATTE) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 76: break;
        case 32:
          { popState();
        syntax = Syntax.LATTE;
        return LatteTopTokenId.T_LATTE;
          }
        case 77: break;
        case 4:
          {
          }
        case 78: break;
        default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
              {         if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return LatteTopTokenId.T_LATTE_ERROR;
        } else {
            return null;
        }
 }

          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
