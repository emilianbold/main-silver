/* The following code was generated by JFlex 1.4.3 on 18.4.13 11:05 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2012 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2012 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.latte.lexer;

import java.util.Objects;
import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 18.4.13 11:05 from the specification file
 * <tt>/home/warden/NetBeansProjects/web-main-new/php.latte/tools/LatteTopColoringLexer.flex</tt>
 */
public class LatteTopColoringLexer {
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_DOUBLE = 6;
  public static final int ST_N_ATTR_DOUBLE = 14;
  public static final int ST_SYNTAX_CHANGE = 12;
  public static final int ST_ASP = 8;
  public static final int ST_N_ATTR_SINGLE = 16;
  public static final int ST_LATTE = 4;
  public static final int ST_COMMENT = 2;
  public static final int ST_HIGHLIGHTING_ERROR = 18;
  public static final int YYINITIAL = 0;
  public static final int ST_PYTHON = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9, 9
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\11\1\1\2\0\1\1\22\0\1\11\1\0\1\23\2\0"+
    "\1\16\1\0\1\24\2\0\1\2\2\0\1\21\1\0\1\12\12\21"+
    "\1\20\1\0\1\15\1\22\1\17\2\0\1\7\1\32\1\21\1\27"+
    "\1\26\1\35\1\21\1\34\3\21\1\25\1\21\1\5\1\30\1\33"+
    "\2\21\1\3\1\6\1\31\2\21\1\10\1\4\1\21\4\0\1\21"+
    "\1\0\1\7\1\32\1\21\1\27\1\26\1\35\1\21\1\34\3\21"+
    "\1\25\1\21\1\5\1\30\1\33\2\21\1\3\1\6\1\31\2\21"+
    "\1\10\1\4\1\21\1\13\1\0\1\14\uff82\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\4\1\1\2\1\3\1\2\1\4\1\3\2\4"+
    "\1\5\2\6\1\4\1\6\1\3\1\7\1\6\1\3"+
    "\1\10\1\11\1\12\1\13\1\0\1\14\2\0\1\15"+
    "\2\0\1\16\5\0\1\17\1\20\1\21\1\0\1\22"+
    "\1\23\1\24\1\25\11\0\1\26\1\27\3\0\1\30"+
    "\12\0\1\31\2\0\1\32\6\0\1\33\1\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\170\0\226\0\264\0\322"+
    "\0\360\0\u010e\0\264\0\u012c\0\u014a\0\u0168\0\u0186\0\u01a4"+
    "\0\u01c2\0\264\0\u01e0\0\u01fe\0\u021c\0\264\0\u023a\0\u0258"+
    "\0\u023a\0\u0276\0\u0294\0\264\0\u02b2\0\u02d0\0\264\0\u02ee"+
    "\0\264\0\264\0\u030c\0\u032a\0\u0348\0\u0366\0\u0384\0\u0186"+
    "\0\u01c2\0\u03a2\0\u03c0\0\u03de\0\u03fc\0\u0276\0\u02b2\0\264"+
    "\0\264\0\264\0\u041a\0\u0348\0\264\0\264\0\264\0\u0438"+
    "\0\u0456\0\u0474\0\u0492\0\u04b0\0\u04ce\0\u04ec\0\u050a\0\u0528"+
    "\0\u0348\0\u0348\0\u0546\0\u0564\0\u0582\0\264\0\u05a0\0\u05be"+
    "\0\u05dc\0\u05fa\0\u0618\0\u0636\0\u0654\0\u0672\0\u0690\0\u06ae"+
    "\0\264\0\u06cc\0\u06ea\0\264\0\u0708\0\u0726\0\u0744\0\u0762"+
    "\0\u0780\0\u079e\0\264\0\264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\7\13\1\14\1\13\1\15\1\13\1\16"+
    "\20\13\1\17\1\20\1\21\6\17\1\20\24\17\1\22"+
    "\1\23\1\22\1\24\5\22\1\23\1\25\1\22\1\26"+
    "\22\22\1\23\1\22\1\24\5\22\1\23\1\25\1\22"+
    "\1\27\22\22\1\23\1\22\1\24\5\22\1\23\1\25"+
    "\3\22\1\30\20\22\1\23\1\22\1\24\5\22\1\23"+
    "\1\25\1\22\1\31\1\22\1\31\17\22\36\0\1\32"+
    "\1\33\7\32\1\33\11\32\1\34\12\32\1\35\1\36"+
    "\7\35\1\36\12\35\1\34\11\35\1\37\1\40\7\37"+
    "\1\40\24\37\1\0\1\14\7\0\1\14\24\0\2\41"+
    "\1\42\10\41\1\43\2\41\1\44\17\41\5\45\1\46"+
    "\10\45\1\47\1\0\16\45\2\50\1\51\34\50\1\20"+
    "\1\51\6\50\1\20\24\50\14\0\1\52\1\0\1\53"+
    "\20\0\1\23\7\0\1\23\30\0\1\54\34\0\1\55"+
    "\32\0\14\22\1\26\40\22\1\26\16\22\23\56\1\34"+
    "\13\56\1\33\7\56\1\33\11\56\1\34\12\56\24\57"+
    "\1\34\12\57\1\36\7\57\1\36\12\57\1\34\11\57"+
    "\1\0\1\40\7\0\1\40\24\0\2\60\1\61\10\60"+
    "\1\0\22\60\2\0\1\62\33\0\5\45\1\46\11\45"+
    "\1\0\23\45\1\46\11\45\1\0\1\63\17\45\1\64"+
    "\2\45\1\46\11\45\1\0\16\45\14\0\1\65\35\0"+
    "\1\66\2\0\1\67\23\0\1\70\34\0\1\71\31\0"+
    "\3\45\2\72\1\73\3\72\6\45\1\0\1\45\1\72"+
    "\3\45\11\72\6\0\1\74\34\0\1\75\30\0\3\45"+
    "\2\72\1\73\3\72\6\45\1\0\1\45\1\72\1\76"+
    "\2\45\11\72\3\45\2\72\1\73\3\72\6\45\1\0"+
    "\1\63\1\72\1\76\2\45\11\72\7\0\1\77\34\0"+
    "\1\100\27\0\5\45\1\46\11\45\1\0\3\45\1\101"+
    "\1\102\11\45\10\0\1\103\34\0\1\104\37\0\1\105"+
    "\34\0\1\106\34\0\1\107\1\0\1\105\13\0\1\110"+
    "\1\0\1\111\1\112\2\0\1\113\5\0\1\114\41\0"+
    "\1\115\56\0\1\116\42\0\1\117\4\0\1\120\64\0"+
    "\1\121\10\0\1\122\60\0\1\123\41\0\1\124\6\0"+
    "\1\125\35\0\1\126\61\0\1\127\37\0\1\130\27\0"+
    "\1\106\34\0\1\131\40\0\1\132\33\0\1\133\14\0"+
    "\1\134\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1980];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\10\3\0\1\11\6\1\1\11\3\1\1\11"+
    "\5\1\1\11\2\1\1\11\1\1\2\11\1\0\1\1"+
    "\2\0\1\1\2\0\1\1\5\0\3\11\1\0\1\1"+
    "\3\11\11\0\2\1\3\0\1\11\12\0\1\11\2\0"+
    "\1\11\6\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    private LatteStateStack stack = new LatteStateStack();
    private LexerInput input;
    private Syntax syntax;

    public LatteTopColoringLexer(LexerRestartInfo info) {
        this.input = info.input();
        if(info.state() != null) {
            //reset state
            setState((LexerState) info.state());
            this.syntax = ((LexerState) info.state()).syntax;
        } else {
            zzState = zzLexicalState = YYINITIAL;
            this.syntax = Syntax.LATTE;
            stack.clear();
        }

    }

    private enum Syntax {
        LATTE,
        DOUBLE,
        ASP,
        PYTHON,
        OFF;
    }

    public static final class LexerState  {
        final LatteStateStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;
        private final Syntax syntax;

        LexerState(LatteStateStack stack, int zzState, int zzLexicalState, Syntax syntax) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.syntax = syntax;
        }

        @Override
        public int hashCode() {
            int hash = 5;
            hash = 29 * hash + Objects.hashCode(this.stack);
            hash = 29 * hash + this.zzState;
            hash = 29 * hash + this.zzLexicalState;
            hash = 29 * hash + (this.syntax != null ? this.syntax.hashCode() : 0);
            return hash;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final LexerState other = (LexerState) obj;
            if (!Objects.equals(this.stack, other.stack)) {
                return false;
            }
            if (this.zzState != other.zzState) {
                return false;
            }
            if (this.zzLexicalState != other.zzLexicalState) {
                return false;
            }
            if (this.syntax != other.syntax) {
                return false;
            }
            return true;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.createClone(), zzState, zzLexicalState, syntax);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected void popState() {
        yybegin(stack.popStack());
    }

    protected void pushState(final int state) {
        stack.pushStack(getZZLexicalState());
        yybegin(state);
    }


 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatteTopColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LatteTopColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public LatteTopTokenId findNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5:
          { popState();
        return LatteTopTokenId.T_LATTE_DELIMITER;
          }
        case 29: break;
        case 22:
          { pushState(ST_N_ATTR_DOUBLE);
        return LatteTopTokenId.T_HTML;
          }
        case 30: break;
        case 17:
          { if (syntax == Syntax.PYTHON) {
            pushState(ST_COMMENT);
        }
          }
        case 31: break;
        case 13:
          { if (syntax == Syntax.ASP) {
            pushState(ST_ASP);
            return LatteTopTokenId.T_LATTE_DELIMITER;
        }
          }
        case 32: break;
        case 28:
          { syntax = Syntax.PYTHON;
        return LatteTopTokenId.T_LATTE;
          }
        case 33: break;
        case 7:
          { yypushback(1);
        popState();
        return LatteTopTokenId.T_LATTE;
          }
        case 34: break;
        case 8:
          { return LatteTopTokenId.T_LATTE_ERROR;
          }
        case 35: break;
        case 6:
          { yypushback(yylength());
        pushState(ST_HIGHLIGHTING_ERROR);
          }
        case 36: break;
        case 12:
          { if (syntax == Syntax.PYTHON) {
            pushState(ST_PYTHON);
            return LatteTopTokenId.T_LATTE_DELIMITER;
        }
          }
        case 37: break;
        case 1:
          { return LatteTopTokenId.T_HTML;
          }
        case 38: break;
        case 18:
          { if (syntax == Syntax.ASP) {
            pushState(ST_COMMENT);
        }
          }
        case 39: break;
        case 25:
          { syntax = Syntax.ASP;
        return LatteTopTokenId.T_LATTE;
          }
        case 40: break;
        case 19:
          { if (syntax == Syntax.DOUBLE || syntax == Syntax.PYTHON) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT;
        }
          }
        case 41: break;
        case 2:
          { popState();
        return LatteTopTokenId.T_HTML;
          }
        case 42: break;
        case 20:
          { if (syntax == Syntax.PYTHON) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT;
        }
          }
        case 43: break;
        case 27:
          { syntax = Syntax.DOUBLE;
        return LatteTopTokenId.T_LATTE;
          }
        case 44: break;
        case 14:
          { if (syntax == Syntax.LATTE) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT;
        }
          }
        case 45: break;
        case 24:
          { syntax = Syntax.LATTE;
        return LatteTopTokenId.T_LATTE;
          }
        case 46: break;
        case 16:
          { if (syntax == Syntax.DOUBLE || syntax == Syntax.PYTHON) {
            pushState(ST_COMMENT);
        }
          }
        case 47: break;
        case 15:
          { yypushback(1);
        if (syntax == Syntax.DOUBLE) {
            pushState(ST_DOUBLE);
            return LatteTopTokenId.T_LATTE_DELIMITER;
        }
        if (syntax == Syntax.PYTHON) {
            pushState(ST_PYTHON);
            return LatteTopTokenId.T_LATTE_DELIMITER;
        }
        if (syntax == Syntax.LATTE) {
            yypushback(1);
            return LatteTopTokenId.T_HTML;
        }
          }
        case 48: break;
        case 4:
          { return LatteTopTokenId.T_LATTE;
          }
        case 49: break;
        case 10:
          { yypushback(1);
        if (syntax == Syntax.LATTE) {
            pushState(ST_LATTE);
            return LatteTopTokenId.T_LATTE_DELIMITER;
        }
          }
        case 50: break;
        case 26:
          { syntax = Syntax.OFF;
        return LatteTopTokenId.T_LATTE;
          }
        case 51: break;
        case 21:
          { if (syntax == Syntax.ASP) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT;
        }
          }
        case 52: break;
        case 11:
          { if (syntax == Syntax.LATTE) {
            pushState(ST_COMMENT);
        }
          }
        case 53: break;
        case 23:
          { pushState(ST_N_ATTR_SINGLE);
        return LatteTopTokenId.T_HTML;
          }
        case 54: break;
        case 3:
          {
          }
        case 55: break;
        case 9:
          { popState();
          }
        case 56: break;
        default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
              {         if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return LatteTopTokenId.T_LATTE_ERROR;
        } else {
            return null;
        }
 }

          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
