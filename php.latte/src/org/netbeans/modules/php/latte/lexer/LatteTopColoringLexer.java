/* The following code was generated by JFlex 1.4.3 on 30.5.13 12:34 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2012 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2012 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.latte.lexer;

import java.util.ArrayDeque;
import java.util.Objects;
import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30.5.13 12:34 from the specification file
 * <tt>/home/warden/NetBeansProjects/web-main-new/php.latte/tools/LatteTopColoringLexer.flex</tt>
 */
public class LatteTopColoringLexer {
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_N_ATTR_DOUBLE = 22;
  public static final int ST_DOUBLE = 8;
  public static final int ST_SYNTAX_CHANGE = 16;
  public static final int ST_POSSIBLE_LATTE = 4;
  public static final int ST_ASP = 10;
  public static final int ST_N_ATTR_SINGLE = 24;
  public static final int ST_LATTE = 6;
  public static final int ST_COMMENT = 2;
  public static final int ST_PYTHON_DOUBLE = 14;
  public static final int ST_HIGHLIGHTING_ERROR = 26;
  public static final int ST_IN_HTML_TAG = 18;
  public static final int YYINITIAL = 0;
  public static final int ST_IN_SYNTAX_ATTR = 20;
  public static final int ST_PYTHON = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\12\1\22\2\0\1\1\22\0\1\12\1\21\1\26\2\0"+
    "\1\3\1\0\1\27\2\0\1\2\2\0\1\24\1\0\1\13\12\20"+
    "\1\23\1\0\1\16\1\25\1\17\2\0\1\10\1\35\1\20\1\32"+
    "\1\31\1\40\1\20\1\37\3\20\1\30\1\20\1\6\1\33\1\36"+
    "\2\20\1\4\1\7\1\34\2\20\1\11\1\5\1\20\1\0\1\41"+
    "\4\0\1\10\1\35\1\20\1\32\1\31\1\40\1\20\1\37\3\20"+
    "\1\30\1\20\1\6\1\33\1\36\2\20\1\4\1\7\1\34\2\20"+
    "\1\11\1\5\1\20\1\14\1\0\1\15\uff82\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\14\0\2\2\1\3\1\2\1\1\1\4"+
    "\1\5\2\6\1\7\1\10\1\4\2\10\1\11\1\10"+
    "\1\4\2\10\1\5\1\10\1\4\1\5\3\10\1\4"+
    "\1\5\2\10\1\0\3\2\1\12\1\4\6\12\1\4"+
    "\2\12\1\4\1\12\1\13\1\14\3\0\1\15\3\0"+
    "\1\16\1\17\2\10\1\0\2\10\1\0\2\10\1\0"+
    "\2\10\1\0\1\20\7\0\1\21\1\0\1\21\2\0"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\10\10\2\0\1\33\2\0\1\34\1\0"+
    "\10\10\1\0\1\35\3\0\10\10\1\36\1\37\1\40"+
    "\2\0\10\10\1\41\1\42\1\10\1\43\1\10\1\43"+
    "\1\10\1\43\1\10\1\43\50\10\1\44\2\10\1\45"+
    "\1\10\1\44\2\10\1\45\1\10\1\44\2\10\1\45"+
    "\1\10\1\44\2\10\1\45\25\10\1\46\1\47\1\46"+
    "\1\47\1\46\1\47\1\46\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc\0\u0110"+
    "\0\u01fe\0\u0220\0\u0242\0\u0264\0\u0286\0\u0110\0\u02a8\0\u02ca"+
    "\0\u02ec\0\u030e\0\u0330\0\u0352\0\u0110\0\u0374\0\u0396\0\u03b8"+
    "\0\u03da\0\u03fc\0\u041e\0\u0440\0\u0462\0\u0484\0\u04a6\0\u04c8"+
    "\0\u04ea\0\u050c\0\u052e\0\u0550\0\u03fc\0\u0572\0\u0594\0\u05b6"+
    "\0\u0110\0\u05d8\0\u05fa\0\u061c\0\u063e\0\u0660\0\u0682\0\u06a4"+
    "\0\u06c6\0\u06e8\0\u070a\0\u072c\0\u074e\0\u0110\0\u0110\0\u0770"+
    "\0\u0792\0\u07b4\0\u07d6\0\u07d6\0\u07f8\0\u081a\0\u083c\0\u0110"+
    "\0\u085e\0\u0880\0\u08a2\0\u08c4\0\u08e6\0\u0908\0\u092a\0\u094c"+
    "\0\u096e\0\u0990\0\u09b2\0\u09d4\0\u0110\0\u09f6\0\u0a18\0\u0a3a"+
    "\0\u0a5c\0\u0a7e\0\u0aa0\0\u06a4\0\u0110\0\u06e8\0\u06a4\0\u070a"+
    "\0\u074e\0\u070a\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110"+
    "\0\u0110\0\u0110\0\u0110\0\u0ac2\0\u0ae4\0\u0b06\0\u0b28\0\u0b4a"+
    "\0\u0b6c\0\u0b8e\0\u0bb0\0\u0bd2\0\u0bf4\0\u0110\0\u0c16\0\u0c38"+
    "\0\u0110\0\u0c5a\0\u0c7c\0\u0c9e\0\u0cc0\0\u0ce2\0\u0d04\0\u0d26"+
    "\0\u0d48\0\u0d6a\0\u0d8c\0\u0110\0\u0dae\0\u0dd0\0\u0df2\0\u0e14"+
    "\0\u0e36\0\u0e58\0\u0e7a\0\u0e9c\0\u0ebe\0\u0ee0\0\u0f02\0\u0110"+
    "\0\u0110\0\u0110\0\u0f24\0\u0f46\0\u0f68\0\u0f8a\0\u0fac\0\u0fce"+
    "\0\u0ff0\0\u1012\0\u1034\0\u1056\0\u0110\0\u0110\0\u1078\0\u02ec"+
    "\0\u109a\0\u0374\0\u10bc\0\u041e\0\u10de\0\u04c8\0\u1100\0\u1122"+
    "\0\u1144\0\u1166\0\u1188\0\u11aa\0\u11cc\0\u11ee\0\u1210\0\u1232"+
    "\0\u1254\0\u1276\0\u1298\0\u12ba\0\u12dc\0\u12fe\0\u1320\0\u1342"+
    "\0\u1364\0\u1386\0\u13a8\0\u13ca\0\u13ec\0\u140e\0\u1430\0\u1452"+
    "\0\u1474\0\u1496\0\u14b8\0\u14da\0\u14fc\0\u151e\0\u1540\0\u1562"+
    "\0\u1584\0\u15a6\0\u15c8\0\u15ea\0\u160c\0\u162e\0\u02ec\0\u1650"+
    "\0\u1672\0\u02ec\0\u1694\0\u0374\0\u16b6\0\u16d8\0\u0374\0\u16fa"+
    "\0\u041e\0\u171c\0\u173e\0\u041e\0\u1760\0\u04c8\0\u1782\0\u17a4"+
    "\0\u04c8\0\u17c6\0\u17e8\0\u180a\0\u182c\0\u184e\0\u1870\0\u1892"+
    "\0\u18b4\0\u18d6\0\u18f8\0\u191a\0\u193c\0\u195e\0\u1980\0\u19a2"+
    "\0\u19c4\0\u19e6\0\u1a08\0\u1a2a\0\u1a4c\0\u1a6e\0\u02ec\0\u02ec"+
    "\0\u0374\0\u0374\0\u041e\0\u041e\0\u04c8\0\u04c8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\6\17\1\20\4\17\1\20\1\21\1\17\1\22\23\17"+
    "\1\23\1\24\1\25\7\23\1\24\7\23\1\24\17\23"+
    "\1\26\1\27\10\26\1\27\1\26\1\30\5\26\1\27"+
    "\17\26\1\31\1\32\2\31\1\33\5\31\1\32\1\34"+
    "\1\31\1\35\4\31\1\32\17\31\1\36\1\37\2\36"+
    "\1\40\5\36\1\37\1\41\1\36\1\42\4\36\1\37"+
    "\17\36\1\43\1\44\1\43\1\45\1\46\5\43\1\44"+
    "\1\47\6\43\1\44\17\43\1\50\1\51\1\50\1\52"+
    "\1\53\5\50\1\51\1\54\6\50\1\51\17\50\1\36"+
    "\1\37\2\36\1\40\5\36\1\37\1\41\1\36\1\55"+
    "\4\36\1\37\17\36\42\0\6\17\1\56\4\17\1\57"+
    "\1\21\1\17\1\60\23\17\1\61\1\62\6\61\1\63"+
    "\1\61\1\62\7\61\1\62\5\61\1\64\1\61\1\65"+
    "\1\66\2\61\1\67\3\61\1\70\1\71\10\70\1\71"+
    "\7\70\1\71\3\70\1\61\12\70\1\72\1\73\1\74"+
    "\10\73\1\74\7\73\1\74\4\73\1\61\11\73\1\75"+
    "\22\76\1\0\17\76\6\17\1\0\4\17\2\0\1\17"+
    "\1\0\23\17\2\0\1\77\1\100\10\0\1\101\30\0"+
    "\1\102\6\103\6\0\1\103\1\104\1\0\1\103\4\0"+
    "\11\103\1\0\2\23\1\105\40\23\1\24\1\105\7\23"+
    "\1\24\7\23\1\24\22\23\1\106\11\23\1\107\24\23"+
    "\1\0\1\27\10\0\1\27\7\0\1\27\17\0\1\110"+
    "\1\0\10\110\1\0\1\110\1\0\5\110\1\0\17\110"+
    "\15\31\1\0\25\31\1\32\10\31\1\32\2\31\1\0"+
    "\4\31\1\32\24\31\1\111\7\31\1\0\30\31\1\112"+
    "\10\31\1\0\24\31\15\36\1\113\25\36\1\37\10\36"+
    "\1\37\2\36\1\113\4\36\1\37\24\36\1\114\7\36"+
    "\1\113\30\36\1\115\10\36\1\113\41\36\1\35\24\36"+
    "\3\43\1\116\37\43\1\44\1\43\1\116\6\43\1\44"+
    "\7\43\1\44\36\43\1\35\25\43\1\116\1\43\1\117"+
    "\37\43\1\116\1\120\35\43\3\50\1\121\37\50\1\51"+
    "\1\50\1\121\6\50\1\51\7\50\1\51\34\50\1\35"+
    "\27\50\1\121\1\50\1\122\37\50\1\121\1\123\35\50"+
    "\23\0\1\124\35\0\1\125\25\0\1\102\6\103\1\0"+
    "\1\126\4\0\1\103\1\104\1\0\1\103\4\0\11\103"+
    "\2\0\1\62\10\0\1\62\7\0\1\62\23\0\1\127"+
    "\45\0\1\130\64\0\1\131\46\0\1\132\6\0\1\133"+
    "\34\0\26\134\1\135\12\134\1\136\1\134\1\71\10\134"+
    "\1\71\7\134\1\71\3\134\1\135\12\134\1\136\26\134"+
    "\1\137\12\134\1\136\27\140\1\135\11\140\1\141\1\140"+
    "\1\74\10\140\1\74\7\140\1\74\4\140\1\135\11\140"+
    "\1\141\27\140\1\142\11\140\1\141\1\143\1\0\1\144"+
    "\7\143\1\0\7\143\1\0\17\143\1\145\1\0\1\146"+
    "\7\145\1\0\1\145\1\0\5\145\1\0\17\145\1\147"+
    "\1\0\1\150\7\147\1\0\7\147\1\0\17\147\4\0"+
    "\6\103\6\0\1\103\2\0\1\103\4\0\11\103\1\0"+
    "\3\23\1\0\11\23\1\0\24\23\15\0\1\151\1\0"+
    "\1\152\37\0\1\153\24\0\6\31\1\154\6\31\1\0"+
    "\31\31\1\155\7\31\1\0\24\31\15\36\1\0\32\36"+
    "\1\156\6\36\1\113\31\36\1\157\7\36\1\113\24\36"+
    "\17\43\1\0\25\43\1\116\2\43\1\160\36\43\1\116"+
    "\1\43\1\161\34\43\15\50\1\0\27\50\1\121\2\50"+
    "\1\162\36\50\1\121\1\50\1\163\34\50\4\0\6\164"+
    "\6\0\1\164\3\0\1\164\3\0\11\164\5\0\6\165"+
    "\6\0\1\165\2\0\1\165\4\0\11\165\37\0\1\166"+
    "\12\0\1\167\66\0\1\170\45\0\1\171\10\0\1\172"+
    "\32\0\7\31\1\173\5\31\1\0\32\31\1\174\6\31"+
    "\1\0\24\31\7\36\1\175\5\36\1\113\32\36\1\176"+
    "\6\36\1\113\24\36\3\43\1\116\3\43\1\177\35\43"+
    "\1\116\2\43\1\200\33\43\3\50\1\121\3\50\1\201"+
    "\35\50\1\121\2\50\1\202\33\50\4\0\6\164\6\0"+
    "\1\164\3\0\1\164\1\203\2\0\11\164\5\0\6\165"+
    "\5\0\1\204\1\165\2\0\1\165\4\0\11\165\10\0"+
    "\1\205\67\0\1\206\43\0\1\207\2\0\10\31\1\210"+
    "\4\31\1\0\33\31\1\211\5\31\1\0\24\31\10\36"+
    "\1\212\4\36\1\113\33\36\1\213\5\36\1\113\24\36"+
    "\3\43\1\116\4\43\1\214\34\43\1\116\3\43\1\215"+
    "\32\43\3\50\1\121\4\50\1\216\34\50\1\121\3\50"+
    "\1\217\32\50\26\0\1\220\1\221\43\0\1\222\40\0"+
    "\1\223\44\0\1\224\6\0\11\31\1\225\3\31\1\0"+
    "\34\31\1\226\4\31\1\0\24\31\11\36\1\227\3\36"+
    "\1\113\34\36\1\230\4\36\1\113\24\36\3\43\1\116"+
    "\5\43\1\231\33\43\1\116\4\43\1\232\31\43\3\50"+
    "\1\121\5\50\1\233\33\50\1\121\4\50\1\234\31\50"+
    "\31\0\1\235\16\0\1\236\33\0\12\31\1\237\2\31"+
    "\1\0\35\31\1\240\3\31\1\0\24\31\12\36\1\241"+
    "\2\36\1\113\35\36\1\242\3\36\1\113\24\36\3\43"+
    "\1\116\6\43\1\243\32\43\1\116\5\43\1\244\30\43"+
    "\3\50\1\121\6\50\1\245\32\50\1\121\5\50\1\246"+
    "\30\50\10\31\1\247\1\31\1\237\2\31\1\0\12\31"+
    "\1\250\1\31\1\251\1\252\2\31\1\253\3\31\10\36"+
    "\1\254\1\36\1\241\2\36\1\113\12\36\1\255\1\36"+
    "\1\256\1\257\2\36\1\260\3\36\3\43\1\116\4\43"+
    "\1\261\1\43\1\243\15\43\1\262\1\43\1\263\1\264"+
    "\2\43\1\265\3\43\3\50\1\121\4\50\1\266\1\50"+
    "\1\245\15\50\1\267\1\50\1\270\1\271\2\50\1\272"+
    "\3\50\4\31\1\273\10\31\1\0\34\31\1\274\4\31"+
    "\1\0\41\31\1\0\15\31\1\275\23\31\1\0\22\31"+
    "\1\276\6\31\1\277\7\31\1\0\24\31\4\36\1\300"+
    "\10\36\1\113\34\36\1\301\4\36\1\113\41\36\1\113"+
    "\15\36\1\302\23\36\1\113\22\36\1\303\6\36\1\304"+
    "\7\36\1\113\24\36\3\43\1\116\1\305\40\43\1\116"+
    "\4\43\1\306\34\43\1\116\27\43\1\307\11\43\1\116"+
    "\34\43\1\310\4\43\1\116\1\43\1\311\34\43\3\50"+
    "\1\121\1\312\40\50\1\121\4\50\1\313\34\50\1\121"+
    "\27\50\1\314\11\50\1\121\34\50\1\315\4\50\1\121"+
    "\1\50\1\316\34\50\15\31\1\0\20\31\1\317\12\31"+
    "\1\320\5\31\1\0\41\31\1\0\16\31\1\321\22\31"+
    "\1\0\22\31\1\322\10\31\1\323\5\31\1\0\24\31"+
    "\15\36\1\113\20\36\1\324\12\36\1\325\5\36\1\113"+
    "\41\36\1\113\16\36\1\326\22\36\1\113\22\36\1\327"+
    "\10\36\1\330\5\36\1\113\24\36\3\43\1\116\32\43"+
    "\1\331\6\43\1\116\3\43\1\332\35\43\1\116\30\43"+
    "\1\333\10\43\1\116\34\43\1\334\4\43\1\116\3\43"+
    "\1\335\32\43\3\50\1\121\32\50\1\336\6\50\1\121"+
    "\3\50\1\337\35\50\1\121\30\50\1\340\10\50\1\121"+
    "\34\50\1\341\4\50\1\121\3\50\1\342\32\50\7\31"+
    "\1\343\5\31\1\0\41\31\1\0\17\31\1\344\21\31"+
    "\1\0\21\31\1\345\2\31\7\36\1\346\5\36\1\113"+
    "\41\36\1\113\17\36\1\347\21\36\1\113\21\36\1\350"+
    "\2\36\3\43\1\116\3\43\1\351\35\43\1\116\31\43"+
    "\1\352\7\43\1\116\33\43\1\353\2\43\3\50\1\121"+
    "\3\50\1\354\35\50\1\121\31\50\1\355\7\50\1\121"+
    "\33\50\1\356\2\50\15\31\1\0\13\31\1\240\25\31"+
    "\1\0\12\31\1\357\26\31\1\0\15\31\1\360\6\31"+
    "\15\36\1\113\13\36\1\242\25\36\1\113\12\36\1\361"+
    "\26\36\1\113\15\36\1\362\6\36\3\43\1\116\25\43"+
    "\1\244\13\43\1\116\24\43\1\363\14\43\1\116\27\43"+
    "\1\364\6\43\3\50\1\121\25\50\1\246\13\50\1\121"+
    "\24\50\1\365\14\50\1\121\27\50\1\366\6\50\15\31"+
    "\1\0\13\31\1\367\16\31\1\370\6\31\1\0\24\31"+
    "\15\36\1\113\13\36\1\371\16\36\1\372\6\36\1\113"+
    "\24\36\3\43\1\116\25\43\1\373\13\43\1\116\2\43"+
    "\1\374\33\43\3\50\1\121\25\50\1\375\13\50\1\121"+
    "\2\50\1\376\33\50";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\6\0\1\10\5\0\1\1\1\11\5\1"+
    "\1\11\6\1\1\11\17\1\1\0\3\1\1\11\14\1"+
    "\2\11\3\0\1\1\3\0\1\1\1\11\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\1\11\7\0"+
    "\1\11\1\0\1\1\2\0\1\1\11\11\10\1\2\0"+
    "\1\11\2\0\1\11\1\0\10\1\1\0\1\11\3\0"+
    "\10\1\3\11\2\0\10\1\2\11\140\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    private LatteStateStack stack = new LatteStateStack();
    private LexerInput input;
    private Syntax syntax;
    private ArrayDeque<HtmlTag> tags;

    public LatteTopColoringLexer(LexerRestartInfo info) {
        this.input = info.input();
        if(info.state() != null) {
            //reset state
            setState((LexerState) info.state());
            this.syntax = ((LexerState) info.state()).syntax;
            this.tags = ((LexerState) info.state()).tags.clone();
        } else {
            zzState = zzLexicalState = YYINITIAL;
            this.syntax = Syntax.LATTE;
            this.tags = new ArrayDeque<>() ;
            stack.clear();
        }

    }

    private enum Syntax {
        LATTE,
        DOUBLE,
        ASP,
        PYTHON,
        OFF;
    }

    private static final class HtmlTag {
        private boolean isSyntax;

        public void setIsSyntax(boolean isSyntax) {
            this.isSyntax = isSyntax;
        }

        public boolean isSyntax() {
            return isSyntax;
        }

    }

    public static final class LexerState  {
        final LatteStateStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;
        private final Syntax syntax;
        private final ArrayDeque<HtmlTag> tags;

        LexerState(LatteStateStack stack, int zzState, int zzLexicalState, Syntax syntax, ArrayDeque<HtmlTag> tags) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.syntax = syntax;
            this.tags = tags;
        }

        @Override
        public int hashCode() {
            int hash = 7;
            hash = 89 * hash + Objects.hashCode(this.stack);
            hash = 89 * hash + this.zzState;
            hash = 89 * hash + this.zzLexicalState;
            hash = 89 * hash + (this.syntax != null ? this.syntax.hashCode() : 0);
            hash = 89 * hash + Objects.hashCode(this.tags);
            return hash;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final LexerState other = (LexerState) obj;
            if (!Objects.equals(this.stack, other.stack)) {
                return false;
            }
            if (this.zzState != other.zzState) {
                return false;
            }
            if (this.zzLexicalState != other.zzLexicalState) {
                return false;
            }
            if (this.syntax != other.syntax) {
                return false;
            }
            if (!Objects.equals(this.tags, other.tags)) {
                return false;
            }
            return true;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.createClone(), zzState, zzLexicalState, syntax, tags.clone());
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected void popState() {
        yybegin(stack.popStack());
    }

    protected void pushState(final int state) {
        stack.pushStack(getZZLexicalState());
        yybegin(state);
    }


 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatteTopColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LatteTopColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public LatteTopTokenId findNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11:
          { return LatteTopTokenId.T_LATTE_ERROR;
          }
        case 40: break;
        case 2:
          { return LatteTopTokenId.T_HTML;
          }
        case 41: break;
        case 15:
          { yypushback(1);
        if (syntax == Syntax.LATTE) {
            pushState(ST_LATTE);
            return LatteTopTokenId.T_LATTE_OPEN_DELIMITER;
        } else {
            popState();
            return LatteTopTokenId.T_HTML;
        }
          }
        case 42: break;
        case 30:
          { String text = yytext().toLowerCase().trim();
        String attributeName = text.substring(2, text.length() - 2);
        if ("syntax".equals(attributeName)) { //NOI18N
            tags.peek().setIsSyntax(true);
            pushState(ST_IN_SYNTAX_ATTR);
        } else {
            pushState(ST_N_ATTR_DOUBLE);
        }
        return LatteTopTokenId.T_HTML;
          }
        case 43: break;
        case 5:
          { yypushback(yylength());
        pushState(ST_HIGHLIGHTING_ERROR);
          }
        case 44: break;
        case 39:
          { syntax = Syntax.PYTHON;
        return LatteTopTokenId.T_LATTE;
          }
        case 45: break;
        case 19:
          { if (syntax == Syntax.PYTHON) {
            pushState(ST_COMMENT);
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 46: break;
        case 27:
          { popState();
        syntax = Syntax.ASP;
        return LatteTopTokenId.T_LATTE;
          }
        case 47: break;
        case 33:
          { popState();
        syntax = Syntax.DOUBLE;
        return LatteTopTokenId.T_LATTE;
          }
        case 48: break;
        case 22:
          { yypushback(1);
        if (syntax == Syntax.ASP) {
            pushState(ST_ASP);
            return LatteTopTokenId.T_LATTE_OPEN_DELIMITER;
        }
          }
        case 49: break;
        case 17:
          { yypushback(1);
        popState();
        return LatteTopTokenId.T_LATTE;
          }
        case 50: break;
        case 28:
          { popState();
        syntax = Syntax.OFF;
        return LatteTopTokenId.T_LATTE;
          }
        case 51: break;
        case 12:
          { if (syntax == Syntax.LATTE) {
            pushState(ST_COMMENT);
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 52: break;
        case 3:
          { yypushback(1);
        pushState(ST_POSSIBLE_LATTE);
          }
        case 53: break;
        case 24:
          { if (syntax == Syntax.PYTHON) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 54: break;
        case 23:
          { if (syntax == Syntax.ASP) {
            pushState(ST_COMMENT);
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 55: break;
        case 6:
          { yypushback(yylength());
        popState();
          }
        case 56: break;
        case 1:
          { return LatteTopTokenId.T_LATTE_COMMENT;
          }
        case 57: break;
        case 13:
          { tags.push(new HtmlTag());
        pushState(ST_IN_HTML_TAG);
        return LatteTopTokenId.T_HTML;
          }
        case 58: break;
        case 10:
          { popState();
          }
        case 59: break;
        case 31:
          { String text = yytext().toLowerCase().trim();
        String attributeName = text.substring(2, text.length() - 2);
        if ("syntax".equals(attributeName)) { //NOI18N
            tags.peek().setIsSyntax(true);
            pushState(ST_IN_SYNTAX_ATTR);
        } else {
            pushState(ST_N_ATTR_SINGLE);
        }
        return LatteTopTokenId.T_HTML;
          }
        case 60: break;
        case 8:
          { return LatteTopTokenId.T_LATTE;
          }
        case 61: break;
        case 36:
          { syntax = Syntax.ASP;
        return LatteTopTokenId.T_LATTE;
          }
        case 62: break;
        case 7:
          { popState();
        return LatteTopTokenId.T_HTML;
          }
        case 63: break;
        case 16:
          { if (!tags.isEmpty()) {
            HtmlTag tag = tags.pop();
            if (tag.isSyntax()) {
                syntax = Syntax.LATTE;
            }
        }
        popState();
        return LatteTopTokenId.T_HTML;
          }
        case 64: break;
        case 34:
          { popState();
        syntax = Syntax.PYTHON;
        return LatteTopTokenId.T_LATTE;
          }
        case 65: break;
        case 26:
          { if (syntax == Syntax.DOUBLE || syntax == Syntax.PYTHON) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 66: break;
        case 29:
          { HtmlTag tag = tags.pop();
        if (tag.isSyntax()) {
            syntax = Syntax.LATTE;
        }
        popState();
        return LatteTopTokenId.T_HTML;
          }
        case 67: break;
        case 18:
          { yypushback(1);
        if (syntax == Syntax.PYTHON) {
            pushState(ST_PYTHON);
            return LatteTopTokenId.T_LATTE_OPEN_DELIMITER;
        }
          }
        case 68: break;
        case 20:
          { yypushback(1);
        if (syntax == Syntax.DOUBLE) {
            pushState(ST_DOUBLE);
            return LatteTopTokenId.T_LATTE_OPEN_DELIMITER;
        }
        if (syntax == Syntax.PYTHON) {
            pushState(ST_PYTHON_DOUBLE);
            return LatteTopTokenId.T_LATTE_OPEN_DELIMITER;
        }
        if (syntax == Syntax.LATTE) {
            yypushback(1);
            return LatteTopTokenId.T_HTML;
        }
          }
        case 69: break;
        case 37:
          { syntax = Syntax.OFF;
        return LatteTopTokenId.T_LATTE;
          }
        case 70: break;
        case 35:
          { syntax = Syntax.LATTE;
        return LatteTopTokenId.T_LATTE;
          }
        case 71: break;
        case 9:
          { popState();
        return LatteTopTokenId.T_LATTE_CLOSE_DELIMITER;
          }
        case 72: break;
        case 21:
          { if (syntax == Syntax.DOUBLE || syntax == Syntax.PYTHON) {
            pushState(ST_COMMENT);
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 73: break;
        case 38:
          { syntax = Syntax.DOUBLE;
        return LatteTopTokenId.T_LATTE;
          }
        case 74: break;
        case 25:
          { if (syntax == Syntax.ASP) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 75: break;
        case 14:
          { if (syntax == Syntax.LATTE) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 76: break;
        case 32:
          { popState();
        syntax = Syntax.LATTE;
        return LatteTopTokenId.T_LATTE;
          }
        case 77: break;
        case 4:
          {
          }
        case 78: break;
        default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
              {         if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return LatteTopTokenId.T_LATTE_ERROR;
        } else {
            return null;
        }
 }

          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
