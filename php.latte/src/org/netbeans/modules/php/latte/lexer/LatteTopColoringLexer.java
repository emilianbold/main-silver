/* The following code was generated by JFlex 1.4.3 on 23.4.13 11:02 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2012 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2012 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.latte.lexer;

import java.util.ArrayDeque;
import java.util.Objects;
import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 23.4.13 11:02 from the specification file
 * <tt>/home/warden/NetBeansProjects/web-main-new/php.latte/tools/LatteTopColoringLexer.flex</tt>
 */
public class LatteTopColoringLexer {
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_N_ATTR_DOUBLE = 20;
  public static final int ST_DOUBLE = 6;
  public static final int ST_SYNTAX_CHANGE = 14;
  public static final int ST_ASP = 8;
  public static final int ST_N_ATTR_SINGLE = 22;
  public static final int ST_LATTE = 4;
  public static final int ST_COMMENT = 2;
  public static final int ST_PYTHON_DOUBLE = 12;
  public static final int ST_HIGHLIGHTING_ERROR = 24;
  public static final int ST_IN_HTML_TAG = 16;
  public static final int YYINITIAL = 0;
  public static final int ST_IN_SYNTAX_ATTR = 18;
  public static final int ST_PYTHON = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\12\1\30\2\0\1\1\22\0\1\12\1\0\1\34\2\0"+
    "\1\3\1\0\1\35\2\0\1\2\2\0\1\32\1\0\1\13\12\20"+
    "\1\31\1\0\1\16\1\33\1\17\2\0\1\10\1\51\1\27\1\43"+
    "\1\41\1\57\1\27\1\55\3\27\1\37\1\27\1\6\1\45\1\53"+
    "\2\27\1\4\1\7\1\47\2\27\1\11\1\5\1\27\1\0\1\60"+
    "\4\0\1\25\1\50\1\20\1\42\1\40\1\56\1\20\1\54\3\20"+
    "\1\36\1\20\1\23\1\44\1\52\2\20\1\21\1\24\1\46\2\20"+
    "\1\26\1\22\1\20\1\14\1\0\1\15\uff82\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\13\0\4\2\1\1\1\3\1\4\1\5"+
    "\1\3\2\5\1\6\1\5\1\3\2\5\1\4\1\5"+
    "\1\3\1\4\3\5\1\3\1\4\2\5\1\0\1\3"+
    "\2\2\7\7\1\3\2\7\1\3\1\7\1\10\1\11"+
    "\1\12\1\11\3\0\1\13\2\0\1\14\2\5\1\0"+
    "\2\5\1\0\2\5\1\0\2\5\1\0\1\15\6\0"+
    "\1\16\1\0\1\16\2\0\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\0\1\25\1\26\1\27\10\5"+
    "\1\0\1\30\2\0\1\31\1\0\1\32\10\5\4\0"+
    "\10\5\1\33\1\34\1\35\2\0\10\5\1\36\1\37"+
    "\1\5\1\40\1\5\1\40\1\5\1\40\1\5\1\40"+
    "\50\5\1\41\2\5\1\42\1\5\1\41\2\5\1\42"+
    "\1\5\1\41\2\5\1\42\1\5\1\41\2\5\1\42"+
    "\25\5\1\43\1\44\1\43\1\44\1\43\1\44\1\43"+
    "\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u0157\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0157\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d"+
    "\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715"+
    "\0\u052b\0\u0746\0\u0777\0\u07a8\0\u0157\0\u07d9\0\u080a\0\u083b"+
    "\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3"+
    "\0\u0157\0\u0157\0\u0157\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8"+
    "\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40"+
    "\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0157"+
    "\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u08ce\0\u0157\0\u0930"+
    "\0\u08ce\0\u0961\0\u09c3\0\u0961\0\u0157\0\u0157\0\u0157\0\u0157"+
    "\0\u0157\0\u0157\0\u0ebd\0\u0157\0\u0157\0\u0157\0\u0eee\0\u0f1f"+
    "\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u0157"+
    "\0\u10a7\0\u10d8\0\u0157\0\u1109\0\u0157\0\u113a\0\u116b\0\u119c"+
    "\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324"+
    "\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac"+
    "\0\u14dd\0\u0157\0\u0157\0\u0157\0\u150e\0\u153f\0\u1570\0\u15a1"+
    "\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u0157\0\u0157"+
    "\0\u16f8\0\u03a3\0\u1729\0\u0467\0\u175a\0\u055c\0\u178b\0\u0651"+
    "\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913"+
    "\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b"+
    "\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23"+
    "\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab"+
    "\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33"+
    "\0\u03a3\0\u1f64\0\u1f95\0\u03a3\0\u1fc6\0\u0467\0\u1ff7\0\u2028"+
    "\0\u0467\0\u2059\0\u055c\0\u208a\0\u20bb\0\u055c\0\u20ec\0\u0651"+
    "\0\u211d\0\u214e\0\u0651\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243"+
    "\0\u2274\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb"+
    "\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u2553"+
    "\0\u03a3\0\u03a3\0\u0467\0\u0467\0\u055c\0\u055c\0\u0651\0\u0651";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\10\16\1\17\1\16\1\20\1\16\1\21"+
    "\11\16\1\17\30\16\1\22\1\23\1\24\7\22\1\23"+
    "\15\22\1\23\30\22\1\25\1\26\2\25\1\27\5\25"+
    "\1\26\1\30\1\25\1\31\3\25\1\27\6\25\1\26"+
    "\30\25\1\32\1\33\2\32\1\34\5\32\1\33\1\35"+
    "\1\32\1\36\3\32\1\34\6\32\1\33\30\32\1\37"+
    "\1\40\1\37\1\41\1\42\5\37\1\40\1\43\5\37"+
    "\1\42\6\37\1\40\30\37\1\44\1\45\1\44\1\46"+
    "\1\47\5\44\1\45\1\50\5\44\1\47\6\44\1\45"+
    "\30\44\1\32\1\33\2\32\1\34\5\32\1\33\1\35"+
    "\1\32\1\51\3\32\1\34\6\32\1\33\30\32\61\0"+
    "\1\16\1\52\4\16\1\53\3\16\1\52\1\54\1\20"+
    "\1\16\1\21\4\16\1\53\4\16\1\52\30\16\1\55"+
    "\1\52\6\55\1\56\1\55\1\52\12\55\1\56\2\55"+
    "\1\52\5\55\2\57\2\55\2\60\2\61\4\55\2\62"+
    "\5\55\1\63\1\64\10\63\1\64\15\63\1\64\3\63"+
    "\1\55\23\63\1\65\1\66\1\67\10\66\1\67\15\66"+
    "\1\67\4\66\1\55\22\66\1\70\30\71\1\0\30\71"+
    "\1\0\1\17\10\0\1\17\15\0\1\17\30\0\1\72"+
    "\1\0\1\73\1\74\6\72\1\0\1\72\1\75\13\72"+
    "\1\0\30\72\3\0\1\76\7\0\1\77\4\0\7\100"+
    "\2\0\1\100\4\0\1\100\1\0\1\100\1\0\1\100"+
    "\1\0\1\100\1\0\1\100\1\0\1\100\1\0\1\100"+
    "\1\0\1\100\1\0\1\100\2\0\2\22\1\101\57\22"+
    "\1\23\1\101\7\22\1\23\15\22\1\23\33\22\1\102"+
    "\11\22\1\103\43\22\15\25\1\0\44\25\1\26\10\25"+
    "\1\26\2\25\1\0\12\25\1\26\35\25\1\104\7\25"+
    "\1\0\4\25\1\104\42\25\1\105\10\25\1\0\3\25"+
    "\1\105\37\25\15\32\1\106\44\32\1\33\10\32\1\33"+
    "\2\32\1\106\12\32\1\33\35\32\1\107\7\32\1\106"+
    "\4\32\1\107\42\32\1\110\10\32\1\106\3\32\1\110"+
    "\54\32\1\31\43\32\3\37\1\111\56\37\1\40\1\37"+
    "\1\111\6\37\1\40\15\37\1\40\47\37\1\31\44\37"+
    "\1\111\1\37\1\112\14\37\1\112\41\37\1\111\1\113"+
    "\14\37\1\113\37\37\3\44\1\114\56\44\1\45\1\44"+
    "\1\114\6\44\1\45\15\44\1\45\45\44\1\31\46\44"+
    "\1\114\1\44\1\115\14\44\1\115\41\44\1\114\1\116"+
    "\14\44\1\116\37\44\1\0\1\52\10\0\1\52\15\0"+
    "\1\52\61\0\1\117\46\0\1\120\45\0\1\121\14\0"+
    "\1\121\47\0\1\122\14\0\1\122\77\0\2\123\71\0"+
    "\2\124\6\0\1\125\14\0\1\125\36\0\34\126\1\127"+
    "\23\126\1\130\1\126\1\64\10\126\1\64\15\126\1\64"+
    "\3\126\1\127\23\126\1\130\34\126\1\131\23\126\1\130"+
    "\35\132\1\127\22\132\1\133\1\132\1\67\10\132\1\67"+
    "\15\132\1\67\4\132\1\127\22\132\1\133\35\132\1\134"+
    "\22\132\1\133\1\135\1\0\1\136\7\135\1\0\15\135"+
    "\1\0\30\135\1\137\1\0\1\140\7\137\1\0\1\137"+
    "\1\0\13\137\1\0\30\137\1\141\1\0\1\142\7\141"+
    "\1\0\15\141\1\0\30\141\4\0\6\143\6\0\10\143"+
    "\1\0\1\143\4\0\22\143\21\0\7\100\2\0\1\100"+
    "\4\0\1\100\1\0\1\100\1\0\1\100\1\0\1\100"+
    "\1\0\1\100\1\0\1\100\1\0\1\100\1\0\1\100"+
    "\1\0\1\100\2\0\3\22\1\0\11\22\1\0\43\22"+
    "\15\0\1\144\1\0\1\145\56\0\1\146\43\0\6\25"+
    "\1\147\6\25\1\0\5\25\1\147\42\25\1\150\7\25"+
    "\1\0\4\25\1\150\36\25\15\32\1\0\51\32\1\151"+
    "\6\32\1\106\5\32\1\151\42\32\1\152\7\32\1\106"+
    "\4\32\1\152\36\32\17\37\1\0\44\37\1\111\2\37"+
    "\1\153\14\37\1\153\40\37\1\111\1\37\1\154\14\37"+
    "\1\154\36\37\15\44\1\0\46\44\1\114\2\44\1\155"+
    "\14\44\1\155\40\44\1\114\1\44\1\156\14\44\1\156"+
    "\36\44\4\0\6\157\6\0\10\157\2\0\1\157\3\0"+
    "\22\157\53\0\2\160\14\0\1\161\14\0\1\161\102\0"+
    "\2\162\67\0\2\163\10\0\1\164\14\0\1\164\40\0"+
    "\6\143\5\0\1\165\10\143\1\0\1\143\4\0\22\143"+
    "\1\0\7\25\1\166\5\25\1\0\6\25\1\166\42\25"+
    "\1\167\6\25\1\0\5\25\1\167\35\25\7\32\1\170"+
    "\5\32\1\106\6\32\1\170\42\32\1\171\6\32\1\106"+
    "\5\32\1\171\35\32\3\37\1\111\3\37\1\172\14\37"+
    "\1\172\37\37\1\111\2\37\1\173\14\37\1\173\35\37"+
    "\3\44\1\114\3\44\1\174\14\44\1\174\37\44\1\114"+
    "\2\44\1\175\14\44\1\175\35\44\4\0\6\157\6\0"+
    "\10\157\2\0\1\157\1\176\2\0\22\157\10\0\1\177"+
    "\14\0\1\177\104\0\2\200\63\0\2\201\3\0\10\25"+
    "\1\202\4\25\1\0\7\25\1\202\42\25\1\203\5\25"+
    "\1\0\6\25\1\203\34\25\10\32\1\204\4\32\1\106"+
    "\7\32\1\204\42\32\1\205\5\32\1\106\6\32\1\205"+
    "\34\32\3\37\1\111\4\37\1\206\14\37\1\206\36\37"+
    "\1\111\3\37\1\207\14\37\1\207\34\37\3\44\1\114"+
    "\4\44\1\210\14\44\1\210\36\44\1\114\3\44\1\211"+
    "\14\44\1\211\34\44\34\0\1\212\1\213\63\0\2\214"+
    "\55\0\2\215\65\0\2\216\13\0\11\25\1\217\3\25"+
    "\1\0\10\25\1\217\42\25\1\220\4\25\1\0\7\25"+
    "\1\220\33\25\11\32\1\221\3\32\1\106\10\32\1\221"+
    "\42\32\1\222\4\32\1\106\7\32\1\222\33\32\3\37"+
    "\1\111\5\37\1\223\14\37\1\223\35\37\1\111\4\37"+
    "\1\224\14\37\1\224\33\37\3\44\1\114\5\44\1\225"+
    "\14\44\1\225\35\44\1\114\4\44\1\226\14\44\1\226"+
    "\33\44\40\0\2\227\25\0\1\230\14\0\1\230\35\0"+
    "\12\25\1\231\2\25\1\0\54\25\1\232\3\25\1\0"+
    "\10\25\1\232\32\25\12\32\1\233\2\32\1\106\54\32"+
    "\1\234\3\32\1\106\10\32\1\234\32\32\3\37\1\111"+
    "\6\37\1\235\51\37\1\111\5\37\1\236\14\37\1\236"+
    "\32\37\3\44\1\114\6\44\1\237\51\44\1\114\5\44"+
    "\1\240\14\44\1\240\32\44\10\25\1\241\1\25\1\231"+
    "\2\25\1\0\7\25\1\241\10\25\2\242\2\25\2\243"+
    "\2\244\4\25\2\245\5\25\10\32\1\246\1\32\1\233"+
    "\2\32\1\106\7\32\1\246\10\32\2\247\2\32\2\250"+
    "\2\251\4\32\2\252\5\32\3\37\1\111\4\37\1\253"+
    "\1\37\1\235\12\37\1\253\10\37\2\254\2\37\2\255"+
    "\2\256\4\37\2\257\5\37\3\44\1\114\4\44\1\260"+
    "\1\44\1\237\12\44\1\260\10\44\2\261\2\44\2\262"+
    "\2\263\4\44\2\264\5\44\4\25\1\265\10\25\1\0"+
    "\3\25\1\265\47\25\1\266\4\25\1\0\7\25\1\266"+
    "\50\25\1\0\26\25\2\267\30\25\1\0\40\25\2\270"+
    "\6\25\1\271\7\25\1\0\4\25\1\271\36\25\4\32"+
    "\1\272\10\32\1\106\3\32\1\272\47\32\1\273\4\32"+
    "\1\106\7\32\1\273\50\32\1\106\26\32\2\274\30\32"+
    "\1\106\40\32\2\275\6\32\1\276\7\32\1\106\4\32"+
    "\1\276\36\32\3\37\1\111\1\277\14\37\1\277\42\37"+
    "\1\111\4\37\1\300\14\37\1\300\36\37\1\111\40\37"+
    "\2\301\16\37\1\111\52\37\2\302\4\37\1\111\1\37"+
    "\1\303\14\37\1\303\36\37\3\44\1\114\1\304\14\44"+
    "\1\304\42\44\1\114\4\44\1\305\14\44\1\305\36\44"+
    "\1\114\40\44\2\306\16\44\1\114\52\44\2\307\4\44"+
    "\1\114\1\44\1\310\14\44\1\310\36\44\15\25\1\0"+
    "\34\25\2\311\14\25\1\312\5\25\1\0\6\25\1\312"+
    "\51\25\1\0\30\25\2\313\26\25\1\0\40\25\2\314"+
    "\10\25\1\315\5\25\1\0\6\25\1\315\34\25\15\32"+
    "\1\106\34\32\2\316\14\32\1\317\5\32\1\106\6\32"+
    "\1\317\51\32\1\106\30\32\2\320\26\32\1\106\40\32"+
    "\2\321\10\32\1\322\5\32\1\106\6\32\1\322\34\32"+
    "\3\37\1\111\46\37\2\323\10\37\1\111\3\37\1\324"+
    "\14\37\1\324\37\37\1\111\42\37\2\325\14\37\1\111"+
    "\52\37\2\326\4\37\1\111\3\37\1\327\14\37\1\327"+
    "\34\37\3\44\1\114\46\44\2\330\10\44\1\114\3\44"+
    "\1\331\14\44\1\331\37\44\1\114\42\44\2\332\14\44"+
    "\1\114\52\44\2\333\4\44\1\114\3\44\1\334\14\44"+
    "\1\334\34\44\7\25\1\335\5\25\1\0\6\25\1\335"+
    "\51\25\1\0\32\25\2\336\24\25\1\0\36\25\2\337"+
    "\3\25\7\32\1\340\5\32\1\106\6\32\1\340\51\32"+
    "\1\106\32\32\2\341\24\32\1\106\36\32\2\342\3\32"+
    "\3\37\1\111\3\37\1\343\14\37\1\343\37\37\1\111"+
    "\44\37\2\344\12\37\1\111\50\37\2\345\3\37\3\44"+
    "\1\114\3\44\1\346\14\44\1\346\37\44\1\114\44\44"+
    "\2\347\12\44\1\114\50\44\2\350\3\44\15\25\1\0"+
    "\22\25\2\232\34\25\1\0\20\25\2\351\36\25\1\0"+
    "\26\25\2\352\13\25\15\32\1\106\22\32\2\234\34\32"+
    "\1\106\20\32\2\353\36\32\1\106\26\32\2\354\13\32"+
    "\3\37\1\111\34\37\2\236\22\37\1\111\32\37\2\355"+
    "\24\37\1\111\40\37\2\356\13\37\3\44\1\114\34\44"+
    "\2\240\22\44\1\114\32\44\2\357\24\44\1\114\40\44"+
    "\2\360\13\44\15\25\1\0\22\25\2\361\25\25\1\362"+
    "\6\25\1\0\5\25\1\362\35\25\15\32\1\106\22\32"+
    "\2\363\25\32\1\364\6\32\1\106\5\32\1\364\35\32"+
    "\3\37\1\111\34\37\2\365\22\37\1\111\2\37\1\366"+
    "\14\37\1\366\35\37\3\44\1\114\34\44\2\367\22\44"+
    "\1\114\2\44\1\370\14\44\1\370\35\44";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9604];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\5\0\1\10\5\0\1\11\12\1\1\11"+
    "\17\1\1\0\3\1\1\11\13\1\3\11\1\1\3\0"+
    "\1\1\2\0\3\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\1\11\6\0\1\11\1\0\1\1\2\0"+
    "\1\1\6\11\1\0\3\11\10\1\1\0\1\11\2\0"+
    "\1\11\1\0\1\11\10\1\4\0\10\1\3\11\2\0"+
    "\10\1\2\11\140\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    private LatteStateStack stack = new LatteStateStack();
    private LexerInput input;
    private Syntax syntax;
    private ArrayDeque<HtmlTag> tags;

    public LatteTopColoringLexer(LexerRestartInfo info) {
        this.input = info.input();
        if(info.state() != null) {
            //reset state
            setState((LexerState) info.state());
            this.syntax = ((LexerState) info.state()).syntax;
            this.tags = ((LexerState) info.state()).tags;
        } else {
            zzState = zzLexicalState = YYINITIAL;
            this.syntax = Syntax.LATTE;
            this.tags = new ArrayDeque<>() ;
            stack.clear();
        }

    }

    private enum Syntax {
        LATTE,
        DOUBLE,
        ASP,
        PYTHON,
        OFF;
    }

    private static final class HtmlTag {
        private boolean isSyntax;

        public void setIsSyntax(boolean isSyntax) {
            this.isSyntax = isSyntax;
        }

        public boolean isSyntax() {
            return isSyntax;
        }

    }

    public static final class LexerState  {
        final LatteStateStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;
        private final Syntax syntax;
        private final ArrayDeque<HtmlTag> tags;

        LexerState(LatteStateStack stack, int zzState, int zzLexicalState, Syntax syntax, ArrayDeque<HtmlTag> tags) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.syntax = syntax;
            this.tags = tags;
        }

        @Override
        public int hashCode() {
            int hash = 7;
            hash = 89 * hash + Objects.hashCode(this.stack);
            hash = 89 * hash + this.zzState;
            hash = 89 * hash + this.zzLexicalState;
            hash = 89 * hash + (this.syntax != null ? this.syntax.hashCode() : 0);
            hash = 89 * hash + Objects.hashCode(this.tags);
            return hash;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final LexerState other = (LexerState) obj;
            if (!Objects.equals(this.stack, other.stack)) {
                return false;
            }
            if (this.zzState != other.zzState) {
                return false;
            }
            if (this.zzLexicalState != other.zzLexicalState) {
                return false;
            }
            if (this.syntax != other.syntax) {
                return false;
            }
            if (!Objects.equals(this.tags, other.tags)) {
                return false;
            }
            return true;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.createClone(), zzState, zzLexicalState, syntax, tags.clone());
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected void popState() {
        yybegin(stack.popStack());
    }

    protected void pushState(final int state) {
        stack.pushStack(getZZLexicalState());
        yybegin(state);
    }


 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatteTopColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LatteTopColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public LatteTopTokenId findNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8:
          { return LatteTopTokenId.T_LATTE_ERROR;
          }
        case 37: break;
        case 2:
          { return LatteTopTokenId.T_HTML;
          }
        case 38: break;
        case 27:
          { String text = yytext().toLowerCase().trim();
        String attributeName = text.substring(2, text.length() - 2);
        if ("syntax".equals(attributeName)) { //NOI18N
            tags.peek().setIsSyntax(true);
            pushState(ST_IN_SYNTAX_ATTR);
        } else {
            pushState(ST_N_ATTR_DOUBLE);
        }
        return LatteTopTokenId.T_HTML;
          }
        case 39: break;
        case 4:
          { yypushback(yylength());
        pushState(ST_HIGHLIGHTING_ERROR);
          }
        case 40: break;
        case 17:
          { yypushback(1);
        if (syntax == Syntax.DOUBLE) {
            pushState(ST_DOUBLE);
            return LatteTopTokenId.T_LATTE_DELIMITER;
        }
        if (syntax == Syntax.PYTHON) {
            pushState(ST_PYTHON_DOUBLE);
            return LatteTopTokenId.T_LATTE_DELIMITER;
        }
        if (syntax == Syntax.LATTE) {
            yypushback(1);
            return LatteTopTokenId.T_HTML;
        }
          }
        case 41: break;
        case 36:
          { syntax = Syntax.PYTHON;
        return LatteTopTokenId.T_LATTE;
          }
        case 42: break;
        case 9:
          { yypushback(1);
        if (syntax == Syntax.LATTE) {
            pushState(ST_LATTE);
            return LatteTopTokenId.T_LATTE_DELIMITER;
        }
          }
        case 43: break;
        case 15:
          { yypushback(1);
        if (syntax == Syntax.PYTHON) {
            pushState(ST_PYTHON);
            return LatteTopTokenId.T_LATTE_DELIMITER;
        }
          }
        case 44: break;
        case 16:
          { if (syntax == Syntax.PYTHON) {
            pushState(ST_COMMENT);
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 45: break;
        case 24:
          { popState();
        syntax = Syntax.ASP;
        return LatteTopTokenId.T_LATTE;
          }
        case 46: break;
        case 30:
          { popState();
        syntax = Syntax.DOUBLE;
        return LatteTopTokenId.T_LATTE;
          }
        case 47: break;
        case 19:
          { yypushback(1);
        if (syntax == Syntax.ASP) {
            pushState(ST_ASP);
            return LatteTopTokenId.T_LATTE_DELIMITER;
        }
          }
        case 48: break;
        case 14:
          { yypushback(1);
        popState();
        return LatteTopTokenId.T_LATTE;
          }
        case 49: break;
        case 25:
          { popState();
        syntax = Syntax.OFF;
        return LatteTopTokenId.T_LATTE;
          }
        case 50: break;
        case 26:
          { if (!tags.isEmpty()) {
            HtmlTag tag = tags.pop();
            if (tag.isSyntax()) {
                syntax = Syntax.LATTE;
            }
        }
        return LatteTopTokenId.T_HTML;
          }
        case 51: break;
        case 10:
          { if (syntax == Syntax.LATTE) {
            pushState(ST_COMMENT);
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 52: break;
        case 21:
          { if (syntax == Syntax.PYTHON) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 53: break;
        case 20:
          { if (syntax == Syntax.ASP) {
            pushState(ST_COMMENT);
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 54: break;
        case 1:
          { return LatteTopTokenId.T_LATTE_COMMENT;
          }
        case 55: break;
        case 11:
          { tags.push(new HtmlTag());
        pushState(ST_IN_HTML_TAG);
        return LatteTopTokenId.T_HTML;
          }
        case 56: break;
        case 7:
          { popState();
          }
        case 57: break;
        case 28:
          { String text = yytext().toLowerCase().trim();
        String attributeName = text.substring(2, text.length() - 2);
        if ("syntax".equals(attributeName)) { //NOI18N
            tags.peek().setIsSyntax(true);
            pushState(ST_IN_SYNTAX_ATTR);
        } else {
            pushState(ST_N_ATTR_SINGLE);
        }
        return LatteTopTokenId.T_HTML;
          }
        case 58: break;
        case 5:
          { return LatteTopTokenId.T_LATTE;
          }
        case 59: break;
        case 33:
          { syntax = Syntax.ASP;
        return LatteTopTokenId.T_LATTE;
          }
        case 60: break;
        case 13:
          { if (!tags.isEmpty()) {
            HtmlTag tag = tags.pop();
            if (tag.isSyntax()) {
                syntax = Syntax.LATTE;
            }
        }
        popState();
        return LatteTopTokenId.T_HTML;
          }
        case 61: break;
        case 31:
          { popState();
        syntax = Syntax.PYTHON;
        return LatteTopTokenId.T_LATTE;
          }
        case 62: break;
        case 23:
          { if (syntax == Syntax.DOUBLE || syntax == Syntax.PYTHON) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 63: break;
        case 34:
          { syntax = Syntax.OFF;
        return LatteTopTokenId.T_LATTE;
          }
        case 64: break;
        case 32:
          { syntax = Syntax.LATTE;
        return LatteTopTokenId.T_LATTE;
          }
        case 65: break;
        case 6:
          { popState();
        return LatteTopTokenId.T_LATTE_DELIMITER;
          }
        case 66: break;
        case 18:
          { if (syntax == Syntax.DOUBLE || syntax == Syntax.PYTHON) {
            pushState(ST_COMMENT);
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 67: break;
        case 35:
          { syntax = Syntax.DOUBLE;
        return LatteTopTokenId.T_LATTE;
          }
        case 68: break;
        case 22:
          { if (syntax == Syntax.ASP) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 69: break;
        case 12:
          { if (syntax == Syntax.LATTE) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 70: break;
        case 29:
          { popState();
        syntax = Syntax.LATTE;
        return LatteTopTokenId.T_LATTE;
          }
        case 71: break;
        case 3:
          {
          }
        case 72: break;
        default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
              {         if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return LatteTopTokenId.T_LATTE_ERROR;
        } else {
            return null;
        }
 }

          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
