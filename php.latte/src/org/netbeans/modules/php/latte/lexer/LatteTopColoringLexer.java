/* The following code was generated by JFlex 1.4.3 on 26.4.13 13:58 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2012 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2012 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.latte.lexer;

import java.util.ArrayDeque;
import java.util.Objects;
import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 26.4.13 13:58 from the specification file
 * <tt>/Users/ondrej/NetBeansProjects/web-main/php.latte/tools/LatteTopColoringLexer.flex</tt>
 */
public class LatteTopColoringLexer {
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_N_ATTR_DOUBLE = 22;
  public static final int ST_DOUBLE = 8;
  public static final int ST_SYNTAX_CHANGE = 16;
  public static final int ST_POSSIBLE_LATTE = 4;
  public static final int ST_ASP = 10;
  public static final int ST_N_ATTR_SINGLE = 24;
  public static final int ST_LATTE = 6;
  public static final int ST_COMMENT = 2;
  public static final int ST_PYTHON_DOUBLE = 14;
  public static final int ST_HIGHLIGHTING_ERROR = 26;
  public static final int ST_IN_HTML_TAG = 18;
  public static final int YYINITIAL = 0;
  public static final int ST_IN_SYNTAX_ATTR = 20;
  public static final int ST_PYTHON = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\12\1\30\2\0\1\1\22\0\1\12\1\0\1\34\2\0"+
    "\1\3\1\0\1\35\2\0\1\2\2\0\1\32\1\0\1\13\12\27"+
    "\1\31\1\0\1\16\1\33\1\17\2\0\1\10\1\50\1\20\1\42"+
    "\1\40\1\56\1\20\1\54\3\20\1\36\1\20\1\6\1\44\1\52"+
    "\2\20\1\4\1\7\1\46\2\20\1\11\1\5\1\20\1\0\1\60"+
    "\4\0\1\25\1\51\1\27\1\43\1\41\1\57\1\27\1\55\3\27"+
    "\1\37\1\27\1\23\1\45\1\53\2\27\1\21\1\24\1\47\2\27"+
    "\1\26\1\22\1\27\1\14\1\0\1\15\uff82\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\14\0\2\2\1\3\1\2\1\1\1\4"+
    "\1\5\3\6\1\7\1\4\2\7\1\10\1\7\1\4"+
    "\2\7\1\5\1\7\1\4\1\5\3\7\1\4\1\5"+
    "\2\7\1\0\3\2\1\11\1\4\6\11\1\4\2\11"+
    "\1\4\1\11\1\12\1\13\3\0\1\14\2\0\1\15"+
    "\1\16\2\7\1\0\2\7\1\0\2\7\1\0\2\7"+
    "\1\0\1\17\7\0\1\20\1\0\1\20\2\0\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\10\7\2\0\1\32\2\0\1\33\1\0\10\7"+
    "\1\0\1\34\3\0\10\7\1\35\1\36\1\37\2\0"+
    "\10\7\1\40\1\41\1\7\1\42\1\7\1\42\1\7"+
    "\1\42\1\7\1\42\50\7\1\43\2\7\1\44\1\7"+
    "\1\43\2\7\1\44\1\7\1\43\2\7\1\44\1\7"+
    "\1\43\2\7\1\44\25\7\1\45\1\46\1\45\1\46"+
    "\1\45\1\46\1\45\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u0188\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u0188\0\u03d4\0\u0405"+
    "\0\u0436\0\u0467\0\u0498\0\u04c9\0\u0188\0\u04fa\0\u052b\0\u055c"+
    "\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4"+
    "\0\u0715\0\u0746\0\u0777\0\u07a8\0\u05be\0\u07d9\0\u080a\0\u083b"+
    "\0\u0188\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992"+
    "\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0188\0\u0188\0\u0ab8"+
    "\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0188\0\u0c0f"+
    "\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97"+
    "\0\u0dc8\0\u0df9\0\u0e2a\0\u0188\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee"+
    "\0\u0f1f\0\u0f50\0\u0992\0\u0188\0\u09f4\0\u0992\0\u0a25\0\u0a87"+
    "\0\u0a25\0\u0188\0\u0188\0\u0188\0\u0188\0\u0188\0\u0188\0\u0188"+
    "\0\u0188\0\u0188\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076"+
    "\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u0188\0\u116b\0\u119c\0\u0188"+
    "\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324"+
    "\0\u1355\0\u1386\0\u0188\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b"+
    "\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u0188\0\u0188"+
    "\0\u0188\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8"+
    "\0\u1729\0\u175a\0\u178b\0\u0188\0\u0188\0\u17bc\0\u0436\0\u17ed"+
    "\0\u04fa\0\u181e\0\u05ef\0\u184f\0\u06e4\0\u1880\0\u18b1\0\u18e2"+
    "\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a"+
    "\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2"+
    "\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a"+
    "\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02"+
    "\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7\0\u0436\0\u2028\0\u2059"+
    "\0\u0436\0\u208a\0\u04fa\0\u20bb\0\u20ec\0\u04fa\0\u211d\0\u05ef"+
    "\0\u214e\0\u217f\0\u05ef\0\u21b0\0\u06e4\0\u21e1\0\u2212\0\u06e4"+
    "\0\u2243\0\u2274\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u2369\0\u239a"+
    "\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522"+
    "\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u0436\0\u0436\0\u04fa"+
    "\0\u04fa\0\u05ef\0\u05ef\0\u06e4\0\u06e4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\17\1\20\10\17\1\20\1\17\1\21\1\17\1\22"+
    "\11\17\1\20\30\17\1\23\1\24\1\25\7\23\1\24"+
    "\15\23\1\24\30\23\1\26\1\27\10\26\1\27\1\26"+
    "\1\30\13\26\1\27\30\26\1\31\1\32\2\31\1\33"+
    "\5\31\1\32\1\34\1\31\1\35\3\31\1\33\6\31"+
    "\1\32\30\31\1\36\1\37\2\36\1\40\5\36\1\37"+
    "\1\41\1\36\1\42\3\36\1\40\6\36\1\37\30\36"+
    "\1\43\1\44\1\43\1\45\1\46\5\43\1\44\1\47"+
    "\5\43\1\46\6\43\1\44\30\43\1\50\1\51\1\50"+
    "\1\52\1\53\5\50\1\51\1\54\5\50\1\53\6\50"+
    "\1\51\30\50\1\36\1\37\2\36\1\40\5\36\1\37"+
    "\1\41\1\36\1\55\3\36\1\40\6\36\1\37\30\36"+
    "\61\0\1\17\1\20\4\17\1\56\3\17\1\20\1\57"+
    "\1\21\1\17\1\60\4\17\1\56\4\17\1\20\30\17"+
    "\1\61\1\62\6\61\1\63\1\61\1\62\12\61\1\63"+
    "\2\61\1\62\5\61\2\64\2\61\2\65\2\66\4\61"+
    "\2\67\5\61\1\70\1\71\10\70\1\71\15\70\1\71"+
    "\3\70\1\61\23\70\1\72\1\73\1\74\10\73\1\74"+
    "\15\73\1\74\4\73\1\61\22\73\1\75\30\76\1\0"+
    "\30\76\1\0\1\20\10\0\1\20\15\0\1\20\32\0"+
    "\1\77\1\100\10\0\1\101\47\0\1\102\15\0\7\103"+
    "\1\0\1\103\5\0\1\103\1\0\1\103\1\0\1\103"+
    "\1\0\1\103\1\0\1\103\1\0\1\103\1\0\1\103"+
    "\1\0\1\103\1\0\1\103\1\0\2\23\1\104\57\23"+
    "\1\24\1\104\7\23\1\24\15\23\1\24\33\23\1\105"+
    "\11\23\1\106\43\23\1\0\1\27\10\0\1\27\15\0"+
    "\1\27\30\0\1\107\1\0\10\107\1\0\1\107\1\0"+
    "\13\107\1\0\30\107\15\31\1\0\44\31\1\32\10\31"+
    "\1\32\2\31\1\0\12\31\1\32\35\31\1\110\7\31"+
    "\1\0\4\31\1\110\42\31\1\111\10\31\1\0\3\31"+
    "\1\111\37\31\15\36\1\112\44\36\1\37\10\36\1\37"+
    "\2\36\1\112\12\36\1\37\35\36\1\113\7\36\1\112"+
    "\4\36\1\113\42\36\1\114\10\36\1\112\3\36\1\114"+
    "\54\36\1\35\43\36\3\43\1\115\56\43\1\44\1\43"+
    "\1\115\6\43\1\44\15\43\1\44\47\43\1\35\44\43"+
    "\1\115\1\43\1\116\14\43\1\116\41\43\1\115\1\117"+
    "\14\43\1\117\37\43\3\50\1\120\56\50\1\51\1\50"+
    "\1\120\6\50\1\51\15\50\1\51\45\50\1\35\46\50"+
    "\1\120\1\50\1\121\14\50\1\121\41\50\1\120\1\122"+
    "\14\50\1\122\37\50\31\0\1\123\46\0\1\124\44\0"+
    "\1\102\7\0\1\125\5\0\7\103\1\0\1\103\5\0"+
    "\1\103\1\0\1\103\1\0\1\103\1\0\1\103\1\0"+
    "\1\103\1\0\1\103\1\0\1\103\1\0\1\103\1\0"+
    "\1\103\2\0\1\62\10\0\1\62\15\0\1\62\34\0"+
    "\1\126\14\0\1\126\47\0\1\127\14\0\1\127\77\0"+
    "\2\130\71\0\2\131\6\0\1\132\14\0\1\132\36\0"+
    "\34\133\1\134\23\133\1\135\1\133\1\71\10\133\1\71"+
    "\15\133\1\71\3\133\1\134\23\133\1\135\34\133\1\136"+
    "\23\133\1\135\35\137\1\134\22\137\1\140\1\137\1\74"+
    "\10\137\1\74\15\137\1\74\4\137\1\134\22\137\1\140"+
    "\35\137\1\141\22\137\1\140\1\142\1\0\1\143\7\142"+
    "\1\0\15\142\1\0\30\142\1\144\1\0\1\145\7\144"+
    "\1\0\1\144\1\0\13\144\1\0\30\144\1\146\1\0"+
    "\1\147\7\146\1\0\15\146\1\0\30\146\21\0\7\103"+
    "\1\0\1\103\5\0\1\103\1\0\1\103\1\0\1\103"+
    "\1\0\1\103\1\0\1\103\1\0\1\103\1\0\1\103"+
    "\1\0\1\103\1\0\1\103\1\0\3\23\1\0\11\23"+
    "\1\0\43\23\15\0\1\150\1\0\1\151\56\0\1\152"+
    "\43\0\6\31\1\153\6\31\1\0\5\31\1\153\42\31"+
    "\1\154\7\31\1\0\4\31\1\154\36\31\15\36\1\0"+
    "\51\36\1\155\6\36\1\112\5\36\1\155\42\36\1\156"+
    "\7\36\1\112\4\36\1\156\36\36\17\43\1\0\44\43"+
    "\1\115\2\43\1\157\14\43\1\157\40\43\1\115\1\43"+
    "\1\160\14\43\1\160\36\43\15\50\1\0\46\50\1\120"+
    "\2\50\1\161\14\50\1\161\40\50\1\120\1\50\1\162"+
    "\14\50\1\162\36\50\4\0\6\163\6\0\10\163\2\0"+
    "\1\163\3\0\22\163\5\0\6\164\6\0\10\164\1\0"+
    "\1\164\4\0\22\164\53\0\2\165\14\0\1\166\14\0"+
    "\1\166\102\0\2\167\67\0\2\170\10\0\1\171\14\0"+
    "\1\171\34\0\7\31\1\172\5\31\1\0\6\31\1\172"+
    "\42\31\1\173\6\31\1\0\5\31\1\173\35\31\7\36"+
    "\1\174\5\36\1\112\6\36\1\174\42\36\1\175\6\36"+
    "\1\112\5\36\1\175\35\36\3\43\1\115\3\43\1\176"+
    "\14\43\1\176\37\43\1\115\2\43\1\177\14\43\1\177"+
    "\35\43\3\50\1\120\3\50\1\200\14\50\1\200\37\50"+
    "\1\120\2\50\1\201\14\50\1\201\35\50\4\0\6\163"+
    "\6\0\10\163\2\0\1\163\1\202\2\0\22\163\5\0"+
    "\6\164\5\0\1\203\10\164\1\0\1\164\4\0\22\164"+
    "\10\0\1\204\14\0\1\204\104\0\2\205\63\0\2\206"+
    "\3\0\10\31\1\207\4\31\1\0\7\31\1\207\42\31"+
    "\1\210\5\31\1\0\6\31\1\210\34\31\10\36\1\211"+
    "\4\36\1\112\7\36\1\211\42\36\1\212\5\36\1\112"+
    "\6\36\1\212\34\36\3\43\1\115\4\43\1\213\14\43"+
    "\1\213\36\43\1\115\3\43\1\214\14\43\1\214\34\43"+
    "\3\50\1\120\4\50\1\215\14\50\1\215\36\50\1\120"+
    "\3\50\1\216\14\50\1\216\34\50\34\0\1\217\1\220"+
    "\63\0\2\221\55\0\2\222\65\0\2\223\13\0\11\31"+
    "\1\224\3\31\1\0\10\31\1\224\42\31\1\225\4\31"+
    "\1\0\7\31\1\225\33\31\11\36\1\226\3\36\1\112"+
    "\10\36\1\226\42\36\1\227\4\36\1\112\7\36\1\227"+
    "\33\36\3\43\1\115\5\43\1\230\14\43\1\230\35\43"+
    "\1\115\4\43\1\231\14\43\1\231\33\43\3\50\1\120"+
    "\5\50\1\232\14\50\1\232\35\50\1\120\4\50\1\233"+
    "\14\50\1\233\33\50\40\0\2\234\25\0\1\235\14\0"+
    "\1\235\35\0\12\31\1\236\2\31\1\0\54\31\1\237"+
    "\3\31\1\0\10\31\1\237\32\31\12\36\1\240\2\36"+
    "\1\112\54\36\1\241\3\36\1\112\10\36\1\241\32\36"+
    "\3\43\1\115\6\43\1\242\51\43\1\115\5\43\1\243"+
    "\14\43\1\243\32\43\3\50\1\120\6\50\1\244\51\50"+
    "\1\120\5\50\1\245\14\50\1\245\32\50\10\31\1\246"+
    "\1\31\1\236\2\31\1\0\7\31\1\246\10\31\2\247"+
    "\2\31\2\250\2\251\4\31\2\252\5\31\10\36\1\253"+
    "\1\36\1\240\2\36\1\112\7\36\1\253\10\36\2\254"+
    "\2\36\2\255\2\256\4\36\2\257\5\36\3\43\1\115"+
    "\4\43\1\260\1\43\1\242\12\43\1\260\10\43\2\261"+
    "\2\43\2\262\2\263\4\43\2\264\5\43\3\50\1\120"+
    "\4\50\1\265\1\50\1\244\12\50\1\265\10\50\2\266"+
    "\2\50\2\267\2\270\4\50\2\271\5\50\4\31\1\272"+
    "\10\31\1\0\3\31\1\272\47\31\1\273\4\31\1\0"+
    "\7\31\1\273\50\31\1\0\26\31\2\274\30\31\1\0"+
    "\40\31\2\275\6\31\1\276\7\31\1\0\4\31\1\276"+
    "\36\31\4\36\1\277\10\36\1\112\3\36\1\277\47\36"+
    "\1\300\4\36\1\112\7\36\1\300\50\36\1\112\26\36"+
    "\2\301\30\36\1\112\40\36\2\302\6\36\1\303\7\36"+
    "\1\112\4\36\1\303\36\36\3\43\1\115\1\304\14\43"+
    "\1\304\42\43\1\115\4\43\1\305\14\43\1\305\36\43"+
    "\1\115\40\43\2\306\16\43\1\115\52\43\2\307\4\43"+
    "\1\115\1\43\1\310\14\43\1\310\36\43\3\50\1\120"+
    "\1\311\14\50\1\311\42\50\1\120\4\50\1\312\14\50"+
    "\1\312\36\50\1\120\40\50\2\313\16\50\1\120\52\50"+
    "\2\314\4\50\1\120\1\50\1\315\14\50\1\315\36\50"+
    "\15\31\1\0\34\31\2\316\14\31\1\317\5\31\1\0"+
    "\6\31\1\317\51\31\1\0\30\31\2\320\26\31\1\0"+
    "\40\31\2\321\10\31\1\322\5\31\1\0\6\31\1\322"+
    "\34\31\15\36\1\112\34\36\2\323\14\36\1\324\5\36"+
    "\1\112\6\36\1\324\51\36\1\112\30\36\2\325\26\36"+
    "\1\112\40\36\2\326\10\36\1\327\5\36\1\112\6\36"+
    "\1\327\34\36\3\43\1\115\46\43\2\330\10\43\1\115"+
    "\3\43\1\331\14\43\1\331\37\43\1\115\42\43\2\332"+
    "\14\43\1\115\52\43\2\333\4\43\1\115\3\43\1\334"+
    "\14\43\1\334\34\43\3\50\1\120\46\50\2\335\10\50"+
    "\1\120\3\50\1\336\14\50\1\336\37\50\1\120\42\50"+
    "\2\337\14\50\1\120\52\50\2\340\4\50\1\120\3\50"+
    "\1\341\14\50\1\341\34\50\7\31\1\342\5\31\1\0"+
    "\6\31\1\342\51\31\1\0\32\31\2\343\24\31\1\0"+
    "\36\31\2\344\3\31\7\36\1\345\5\36\1\112\6\36"+
    "\1\345\51\36\1\112\32\36\2\346\24\36\1\112\36\36"+
    "\2\347\3\36\3\43\1\115\3\43\1\350\14\43\1\350"+
    "\37\43\1\115\44\43\2\351\12\43\1\115\50\43\2\352"+
    "\3\43\3\50\1\120\3\50\1\353\14\50\1\353\37\50"+
    "\1\120\44\50\2\354\12\50\1\120\50\50\2\355\3\50"+
    "\15\31\1\0\22\31\2\237\34\31\1\0\20\31\2\356"+
    "\36\31\1\0\26\31\2\357\13\31\15\36\1\112\22\36"+
    "\2\241\34\36\1\112\20\36\2\360\36\36\1\112\26\36"+
    "\2\361\13\36\3\43\1\115\34\43\2\243\22\43\1\115"+
    "\32\43\2\362\24\43\1\115\40\43\2\363\13\43\3\50"+
    "\1\120\34\50\2\245\22\50\1\120\32\50\2\364\24\50"+
    "\1\120\40\50\2\365\13\50\15\31\1\0\22\31\2\366"+
    "\25\31\1\367\6\31\1\0\5\31\1\367\35\31\15\36"+
    "\1\112\22\36\2\370\25\36\1\371\6\36\1\112\5\36"+
    "\1\371\35\36\3\43\1\115\34\43\2\372\22\43\1\115"+
    "\2\43\1\373\14\43\1\373\35\43\3\50\1\120\34\50"+
    "\2\374\22\50\1\120\2\50\1\375\14\50\1\375\35\50";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\6\0\1\10\5\0\1\11\6\1\1\11"+
    "\6\1\1\11\17\1\1\0\3\1\1\11\14\1\2\11"+
    "\3\0\1\1\2\0\1\1\1\11\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\1\11\7\0\1\11"+
    "\1\0\1\1\2\0\1\1\11\11\10\1\2\0\1\11"+
    "\2\0\1\11\1\0\10\1\1\0\1\11\3\0\10\1"+
    "\3\11\2\0\10\1\2\11\140\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    private LatteStateStack stack = new LatteStateStack();
    private LexerInput input;
    private Syntax syntax;
    private ArrayDeque<HtmlTag> tags;

    public LatteTopColoringLexer(LexerRestartInfo info) {
        this.input = info.input();
        if(info.state() != null) {
            //reset state
            setState((LexerState) info.state());
            this.syntax = ((LexerState) info.state()).syntax;
            this.tags = ((LexerState) info.state()).tags.clone();
        } else {
            zzState = zzLexicalState = YYINITIAL;
            this.syntax = Syntax.LATTE;
            this.tags = new ArrayDeque<>() ;
            stack.clear();
        }

    }

    private enum Syntax {
        LATTE,
        DOUBLE,
        ASP,
        PYTHON,
        OFF;
    }

    private static final class HtmlTag {
        private boolean isSyntax;

        public void setIsSyntax(boolean isSyntax) {
            this.isSyntax = isSyntax;
        }

        public boolean isSyntax() {
            return isSyntax;
        }

    }

    public static final class LexerState  {
        final LatteStateStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;
        private final Syntax syntax;
        private final ArrayDeque<HtmlTag> tags;

        LexerState(LatteStateStack stack, int zzState, int zzLexicalState, Syntax syntax, ArrayDeque<HtmlTag> tags) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.syntax = syntax;
            this.tags = tags;
        }

        @Override
        public int hashCode() {
            int hash = 7;
            hash = 89 * hash + Objects.hashCode(this.stack);
            hash = 89 * hash + this.zzState;
            hash = 89 * hash + this.zzLexicalState;
            hash = 89 * hash + (this.syntax != null ? this.syntax.hashCode() : 0);
            hash = 89 * hash + Objects.hashCode(this.tags);
            return hash;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final LexerState other = (LexerState) obj;
            if (!Objects.equals(this.stack, other.stack)) {
                return false;
            }
            if (this.zzState != other.zzState) {
                return false;
            }
            if (this.zzLexicalState != other.zzLexicalState) {
                return false;
            }
            if (this.syntax != other.syntax) {
                return false;
            }
            if (!Objects.equals(this.tags, other.tags)) {
                return false;
            }
            return true;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.createClone(), zzState, zzLexicalState, syntax, tags.clone());
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected void popState() {
        yybegin(stack.popStack());
    }

    protected void pushState(final int state) {
        stack.pushStack(getZZLexicalState());
        yybegin(state);
    }


 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatteTopColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LatteTopColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public LatteTopTokenId findNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10:
          { return LatteTopTokenId.T_LATTE_ERROR;
          }
        case 39: break;
        case 2:
          { return LatteTopTokenId.T_HTML;
          }
        case 40: break;
        case 29:
          { String text = yytext().toLowerCase().trim();
        String attributeName = text.substring(2, text.length() - 2);
        if ("syntax".equals(attributeName)) { //NOI18N
            tags.peek().setIsSyntax(true);
            pushState(ST_IN_SYNTAX_ATTR);
        } else {
            pushState(ST_N_ATTR_DOUBLE);
        }
        return LatteTopTokenId.T_HTML;
          }
        case 41: break;
        case 5:
          { yypushback(yylength());
        pushState(ST_HIGHLIGHTING_ERROR);
          }
        case 42: break;
        case 19:
          { yypushback(1);
        if (syntax == Syntax.DOUBLE) {
            pushState(ST_DOUBLE);
            return LatteTopTokenId.T_LATTE_DELIMITER;
        }
        if (syntax == Syntax.PYTHON) {
            pushState(ST_PYTHON_DOUBLE);
            return LatteTopTokenId.T_LATTE_DELIMITER;
        }
        if (syntax == Syntax.LATTE) {
            yypushback(1);
            return LatteTopTokenId.T_HTML;
        }
          }
        case 43: break;
        case 38:
          { syntax = Syntax.PYTHON;
        return LatteTopTokenId.T_LATTE;
          }
        case 44: break;
        case 17:
          { yypushback(1);
        if (syntax == Syntax.PYTHON) {
            pushState(ST_PYTHON);
            return LatteTopTokenId.T_LATTE_DELIMITER;
        }
          }
        case 45: break;
        case 18:
          { if (syntax == Syntax.PYTHON) {
            pushState(ST_COMMENT);
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 46: break;
        case 26:
          { popState();
        syntax = Syntax.ASP;
        return LatteTopTokenId.T_LATTE;
          }
        case 47: break;
        case 32:
          { popState();
        syntax = Syntax.DOUBLE;
        return LatteTopTokenId.T_LATTE;
          }
        case 48: break;
        case 21:
          { yypushback(1);
        if (syntax == Syntax.ASP) {
            pushState(ST_ASP);
            return LatteTopTokenId.T_LATTE_DELIMITER;
        }
          }
        case 49: break;
        case 16:
          { yypushback(1);
        popState();
        return LatteTopTokenId.T_LATTE;
          }
        case 50: break;
        case 27:
          { popState();
        syntax = Syntax.OFF;
        return LatteTopTokenId.T_LATTE;
          }
        case 51: break;
        case 11:
          { if (syntax == Syntax.LATTE) {
            pushState(ST_COMMENT);
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 52: break;
        case 3:
          { yypushback(1);
        pushState(ST_POSSIBLE_LATTE);
          }
        case 53: break;
        case 23:
          { if (syntax == Syntax.PYTHON) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 54: break;
        case 22:
          { if (syntax == Syntax.ASP) {
            pushState(ST_COMMENT);
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 55: break;
        case 1:
          { return LatteTopTokenId.T_LATTE_COMMENT;
          }
        case 56: break;
        case 12:
          { tags.push(new HtmlTag());
        pushState(ST_IN_HTML_TAG);
        return LatteTopTokenId.T_HTML;
          }
        case 57: break;
        case 14:
          { yypushback(1);
        if (syntax == Syntax.LATTE) {
            pushState(ST_LATTE);
            return LatteTopTokenId.T_LATTE_DELIMITER;
        } else {
            popState();
            return LatteTopTokenId.T_HTML;
        }
          }
        case 58: break;
        case 9:
          { popState();
          }
        case 59: break;
        case 30:
          { String text = yytext().toLowerCase().trim();
        String attributeName = text.substring(2, text.length() - 2);
        if ("syntax".equals(attributeName)) { //NOI18N
            tags.peek().setIsSyntax(true);
            pushState(ST_IN_SYNTAX_ATTR);
        } else {
            pushState(ST_N_ATTR_SINGLE);
        }
        return LatteTopTokenId.T_HTML;
          }
        case 60: break;
        case 7:
          { return LatteTopTokenId.T_LATTE;
          }
        case 61: break;
        case 6:
          { popState();
        return LatteTopTokenId.T_HTML;
          }
        case 62: break;
        case 35:
          { syntax = Syntax.ASP;
        return LatteTopTokenId.T_LATTE;
          }
        case 63: break;
        case 15:
          { if (!tags.isEmpty()) {
            HtmlTag tag = tags.pop();
            if (tag.isSyntax()) {
                syntax = Syntax.LATTE;
            }
        }
        popState();
        return LatteTopTokenId.T_HTML;
          }
        case 64: break;
        case 33:
          { popState();
        syntax = Syntax.PYTHON;
        return LatteTopTokenId.T_LATTE;
          }
        case 65: break;
        case 25:
          { if (syntax == Syntax.DOUBLE || syntax == Syntax.PYTHON) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 66: break;
        case 28:
          { HtmlTag tag = tags.pop();
        if (tag.isSyntax()) {
            syntax = Syntax.LATTE;
        }
        popState();
        return LatteTopTokenId.T_HTML;
          }
        case 67: break;
        case 36:
          { syntax = Syntax.OFF;
        return LatteTopTokenId.T_LATTE;
          }
        case 68: break;
        case 34:
          { syntax = Syntax.LATTE;
        return LatteTopTokenId.T_LATTE;
          }
        case 69: break;
        case 8:
          { popState();
        return LatteTopTokenId.T_LATTE_DELIMITER;
          }
        case 70: break;
        case 20:
          { if (syntax == Syntax.DOUBLE || syntax == Syntax.PYTHON) {
            pushState(ST_COMMENT);
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 71: break;
        case 37:
          { syntax = Syntax.DOUBLE;
        return LatteTopTokenId.T_LATTE;
          }
        case 72: break;
        case 24:
          { if (syntax == Syntax.ASP) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 73: break;
        case 13:
          { if (syntax == Syntax.LATTE) {
            popState();
            return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
        }
          }
        case 74: break;
        case 31:
          { popState();
        syntax = Syntax.LATTE;
        return LatteTopTokenId.T_LATTE;
          }
        case 75: break;
        case 4:
          {
          }
        case 76: break;
        default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
              {         if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return LatteTopTokenId.T_LATTE_ERROR;
        } else {
            return null;
        }
 }

          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
