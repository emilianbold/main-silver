/* The following code was generated by JFlex 1.4.3 on 19.4.13 11:53 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2012 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2012 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.latte.lexer;

import java.util.Objects;
import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19.4.13 11:53 from the specification file
 * <tt>/Users/ondrej/NetBeansProjects/web-main/php.latte/tools/LatteMarkupColoringLexer.flex</tt>
 */
public class LatteMarkupColoringLexer {
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_HIGHLIGHTING_ERROR = 4;
  public static final int ST_OTHER = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\1\1\3\2\0\1\3\22\0\1\1\1\0\1\2\1\0"+
    "\1\34\2\0\1\4\1\26\1\33\1\0\1\36\1\0\1\44\1\40"+
    "\1\45\12\37\1\41\2\0\1\42\1\43\2\0\1\12\1\24\1\21"+
    "\1\16\1\10\1\11\1\30\1\35\1\23\1\32\1\25\1\13\1\35"+
    "\1\15\1\17\1\27\1\35\1\6\1\14\1\5\1\7\1\35\1\22"+
    "\1\20\1\31\1\35\4\0\1\35\1\0\1\12\1\24\1\21\1\16"+
    "\1\10\1\11\1\30\1\35\1\23\1\32\1\25\1\13\1\35\1\15"+
    "\1\17\1\27\1\35\1\6\1\14\1\5\1\7\1\35\1\22\1\20"+
    "\1\31\1\35\uff85\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\1\1\4\2\5\13\6"+
    "\3\4\1\7\2\4\1\10\1\11\1\0\1\12\1\0"+
    "\1\13\1\0\1\6\1\0\2\6\1\4\3\6\1\14"+
    "\4\6\7\0\1\15\1\7\1\6\2\0\10\6\10\0"+
    "\2\7\4\6\7\0\1\7\3\6\6\0\1\16\1\0"+
    "\1\6\5\0\1\6\2\0\2\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\162"+
    "\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214"+
    "\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344"+
    "\0\u036a\0\u0390\0\u03b6\0\162\0\u03dc\0\u0402\0\u0428\0\u010a"+
    "\0\162\0\u0130\0\u044e\0\u0474\0\u049a\0\u04c0\0\u01a2\0\u04e6"+
    "\0\u050c\0\u0532\0\u01a2\0\u0558\0\u057e\0\u05a4\0\u05ca\0\u05f0"+
    "\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u031e\0\u06fa"+
    "\0\u0720\0\u0746\0\344\0\u076c\0\u0792\0\u07b8\0\u07de\0\u0804"+
    "\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u090e\0\u0934"+
    "\0\u095a\0\u0980\0\u09a6\0\u0720\0\u09cc\0\u09f2\0\u0a18\0\u0a3e"+
    "\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48\0\u0b6e"+
    "\0\u09a6\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78"+
    "\0\u0c9e\0\u0cc4\0\162\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82"+
    "\0\u0da8\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\5\1\4\21\6\1\4\4\6"+
    "\2\4\1\6\1\4\1\6\5\4\1\7\1\10\1\5"+
    "\1\11\1\5\1\12\1\13\1\14\2\15\1\16\1\17"+
    "\2\15\1\20\1\15\1\21\1\22\1\23\1\15\1\24"+
    "\1\25\1\15\1\26\4\15\1\10\1\27\1\15\1\30"+
    "\1\31\1\10\1\32\1\33\1\10\1\30\1\10\1\34"+
    "\1\35\1\34\1\35\42\34\47\0\1\5\1\0\1\5"+
    "\47\0\21\6\1\0\4\6\2\0\1\6\1\0\1\6"+
    "\4\0\1\36\6\0\21\37\1\0\4\37\2\0\1\37"+
    "\1\0\1\37\6\0\2\40\1\41\1\0\42\40\3\42"+
    "\1\0\1\41\41\42\5\0\1\15\1\43\17\15\1\0"+
    "\4\15\2\0\1\15\1\0\1\15\4\0\1\44\6\0"+
    "\3\15\1\45\15\15\1\0\4\15\2\0\1\15\1\0"+
    "\1\15\4\0\1\44\6\0\21\15\1\0\4\15\2\0"+
    "\1\15\1\0\1\15\4\0\1\44\6\0\5\15\1\46"+
    "\13\15\1\0\4\15\2\0\1\15\1\0\1\15\4\0"+
    "\1\44\6\0\7\15\1\47\1\50\10\15\1\0\4\15"+
    "\2\0\1\15\1\0\1\15\4\0\1\44\6\0\2\15"+
    "\1\51\1\52\15\15\1\0\4\15\2\0\1\15\1\0"+
    "\1\15\4\0\1\44\6\0\1\15\1\53\17\15\1\0"+
    "\4\15\2\0\1\15\1\0\1\15\4\0\1\44\6\0"+
    "\12\15\1\21\6\15\1\0\4\15\2\0\1\15\1\0"+
    "\1\15\4\0\1\44\6\0\6\15\1\54\3\15\1\55"+
    "\6\15\1\0\4\15\2\0\1\15\1\0\1\15\4\0"+
    "\1\44\6\0\10\15\1\56\10\15\1\0\4\15\2\0"+
    "\1\15\1\0\1\15\4\0\1\44\6\0\1\15\1\57"+
    "\17\15\1\0\4\15\2\0\1\15\1\0\1\15\4\0"+
    "\1\44\11\0\1\60\1\61\1\62\1\0\1\63\2\0"+
    "\1\64\3\0\1\65\1\66\26\0\21\67\1\0\4\67"+
    "\2\0\1\67\1\0\1\67\45\0\1\70\13\0\3\15"+
    "\1\71\15\15\1\0\4\15\2\0\1\15\1\0\1\31"+
    "\1\72\3\0\1\44\42\0\1\10\47\0\1\10\3\0"+
    "\1\35\1\0\1\35\47\0\21\6\1\0\4\6\2\0"+
    "\1\6\1\0\1\6\13\0\21\37\1\0\4\37\2\0"+
    "\1\37\1\0\1\37\4\0\1\73\6\0\2\15\1\74"+
    "\16\15\1\0\4\15\2\0\1\15\1\0\1\15\4\0"+
    "\1\44\6\0\21\15\1\0\4\15\2\0\1\15\1\0"+
    "\1\15\13\0\1\75\20\15\1\0\4\15\2\0\1\15"+
    "\1\0\1\15\4\0\1\44\6\0\6\15\1\76\12\15"+
    "\1\0\4\15\2\0\1\15\1\0\1\15\4\0\1\44"+
    "\6\0\11\15\1\53\7\15\1\0\4\15\2\0\1\15"+
    "\1\0\1\15\4\0\1\44\6\0\6\15\1\77\12\15"+
    "\1\0\4\15\2\0\1\15\1\0\1\15\4\0\1\44"+
    "\6\0\15\15\1\53\3\15\1\0\4\15\2\0\1\15"+
    "\1\0\1\15\4\0\1\44\6\0\12\15\1\100\6\15"+
    "\1\0\4\15\2\0\1\15\1\0\1\15\4\0\1\44"+
    "\6\0\10\15\1\101\10\15\1\0\4\15\2\0\1\15"+
    "\1\0\1\15\4\0\1\44\6\0\7\15\1\102\11\15"+
    "\1\0\4\15\2\0\1\15\1\0\1\15\4\0\1\44"+
    "\6\0\3\15\1\103\15\15\1\0\4\15\2\0\1\15"+
    "\1\0\1\15\4\0\1\44\21\0\1\104\40\0\1\105"+
    "\40\0\1\106\44\0\1\107\64\0\1\110\36\0\1\111"+
    "\47\0\1\112\36\0\1\113\26\0\1\70\1\72\12\0"+
    "\21\15\1\0\4\15\2\0\1\15\1\0\1\114\4\0"+
    "\1\44\40\0\1\115\13\0\3\15\1\53\15\15\1\0"+
    "\4\15\2\0\1\15\1\0\1\15\4\0\1\44\6\0"+
    "\2\15\1\116\16\15\1\0\4\15\2\0\1\15\1\0"+
    "\1\15\4\0\1\44\6\0\7\15\1\74\11\15\1\0"+
    "\4\15\2\0\1\15\1\0\1\15\4\0\1\44\6\0"+
    "\6\15\1\53\12\15\1\0\4\15\2\0\1\15\1\0"+
    "\1\15\4\0\1\44\6\0\10\15\1\74\10\15\1\0"+
    "\4\15\2\0\1\15\1\0\1\15\4\0\1\44\6\0"+
    "\1\117\20\15\1\0\4\15\2\0\1\15\1\0\1\15"+
    "\4\0\1\44\6\0\1\120\20\15\1\0\4\15\2\0"+
    "\1\15\1\0\1\15\4\0\1\44\6\0\5\15\1\121"+
    "\13\15\1\0\4\15\2\0\1\15\1\0\1\15\4\0"+
    "\1\44\30\0\1\122\35\0\1\123\34\0\1\124\45\0"+
    "\1\125\71\0\1\126\20\0\1\127\57\0\1\130\65\0"+
    "\1\131\16\0\1\113\26\0\1\115\13\0\1\15\1\132"+
    "\17\15\1\0\4\15\2\0\1\15\1\0\1\15\4\0"+
    "\1\44\6\0\16\15\1\133\2\15\1\0\4\15\2\0"+
    "\1\15\1\0\1\15\4\0\1\44\6\0\5\15\1\134"+
    "\13\15\1\0\4\15\2\0\1\15\1\0\1\15\4\0"+
    "\1\44\6\0\20\15\1\53\1\0\4\15\2\0\1\15"+
    "\1\0\1\15\4\0\1\44\13\0\1\135\45\0\1\136"+
    "\45\0\1\137\56\0\1\140\32\0\1\141\45\0\1\142"+
    "\22\0\1\143\25\0\1\144\37\0\10\15\1\53\10\15"+
    "\1\0\4\15\2\0\1\15\1\0\1\15\4\0\1\44"+
    "\6\0\10\15\1\43\10\15\1\0\4\15\2\0\1\15"+
    "\1\0\1\15\4\0\1\44\6\0\10\15\1\145\10\15"+
    "\1\0\4\15\2\0\1\15\1\0\1\15\4\0\1\44"+
    "\16\0\1\146\35\0\1\147\71\0\1\147\31\0\1\150"+
    "\51\0\1\136\54\0\1\151\25\0\1\152\22\0\1\143"+
    "\17\0\14\15\1\153\4\15\1\0\4\15\2\0\1\15"+
    "\1\0\1\15\4\0\1\44\17\0\1\147\62\0\1\143"+
    "\42\0\1\147\25\0\1\154\47\0\1\155\40\0\3\15"+
    "\1\156\15\15\1\0\4\15\2\0\1\15\1\0\1\15"+
    "\4\0\1\44\7\0\1\147\54\0\1\147\35\0\12\15"+
    "\1\157\6\15\1\0\4\15\2\0\1\15\1\0\1\15"+
    "\4\0\1\44\6\0\4\15\1\53\14\15\1\0\4\15"+
    "\2\0\1\15\1\0\1\15\4\0\1\44\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3762];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\23\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\11\1\0\1\1\1\0\13\1\7\0"+
    "\3\1\2\0\10\1\10\0\6\1\7\0\4\1\6\0"+
    "\1\11\1\0\1\1\5\0\1\1\2\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    private LatteStateStack stack = new LatteStateStack();
    private LexerInput input;

    public LatteMarkupColoringLexer(LexerRestartInfo info) {
        this.input = info.input();
        if(info.state() != null) {
            //reset state
            setState((LexerState) info.state());
        } else {
            zzState = zzLexicalState = YYINITIAL;
            stack.clear();
        }

    }

    private enum Syntax {
        LATTE,
        DOUBLE,
        ASP,
        PYTHON,
        OFF;
    }

    public static final class LexerState  {
        final LatteStateStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;

        LexerState(LatteStateStack stack, int zzState, int zzLexicalState) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
        }

        @Override
        public int hashCode() {
            int hash = 5;
            hash = 29 * hash + Objects.hashCode(this.stack);
            hash = 29 * hash + this.zzState;
            hash = 29 * hash + this.zzLexicalState;
            return hash;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final LexerState other = (LexerState) obj;
            if (!Objects.equals(this.stack, other.stack)) {
                return false;
            }
            if (this.zzState != other.zzState) {
                return false;
            }
            if (this.zzLexicalState != other.zzLexicalState) {
                return false;
            }
            return true;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.createClone(), zzState, zzLexicalState);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected void popState() {
        yybegin(stack.popStack());
    }

    protected void pushState(final int state) {
        stack.pushStack(getZZLexicalState());
        yybegin(state);
    }


 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatteMarkupColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LatteMarkupColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public LatteMarkupTokenId findNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 13:
          { return LatteMarkupTokenId.T_VARIABLE;
          }
        case 15: break;
        case 4:
          { return LatteMarkupTokenId.T_CHAR;
          }
        case 16: break;
        case 14:
          { return LatteMarkupTokenId.T_CAST;
          }
        case 17: break;
        case 11:
          { return LatteMarkupTokenId.T_STRING;
          }
        case 18: break;
        case 1:
          { yypushback(yylength());
        pushState(ST_OTHER);
          }
        case 19: break;
        case 7:
          { return LatteMarkupTokenId.T_NUMBER;
          }
        case 20: break;
        case 6:
          { return LatteMarkupTokenId.T_SYMBOL;
          }
        case 21: break;
        case 8:
          { return LatteMarkupTokenId.T_ERROR;
          }
        case 22: break;
        case 12:
          { return LatteMarkupTokenId.T_KEYWORD;
          }
        case 23: break;
        case 3:
          { pushState(ST_OTHER);
        return LatteMarkupTokenId.T_MACRO_START;
          }
        case 24: break;
        case 5:
          { yypushback(yylength());
        pushState(ST_HIGHLIGHTING_ERROR);
          }
        case 25: break;
        case 2:
          { return LatteMarkupTokenId.T_WHITESPACE;
          }
        case 26: break;
        case 10:
          { pushState(ST_OTHER);
        return LatteMarkupTokenId.T_MACRO_END;
          }
        case 27: break;
        case 9:
          { popState();
          }
        case 28: break;
        default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
              {         if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return LatteMarkupTokenId.T_ERROR;
        } else {
            return null;
        }
 }

          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
