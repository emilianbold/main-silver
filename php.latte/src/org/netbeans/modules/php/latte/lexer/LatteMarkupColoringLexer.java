/* The following code was generated by JFlex 1.4.3 on 14.5.13 11:37 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2012 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2012 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.latte.lexer;

import java.util.Objects;
import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14.5.13 11:37 from the specification file
 * <tt>/home/warden/NetBeansProjects/web-main-new/php.latte/tools/LatteMarkupColoringLexer.flex</tt>
 */
public class LatteMarkupColoringLexer {
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_HIGHLIGHTING_ERROR = 6;
  public static final int ST_END_MACRO = 4;
  public static final int ST_OTHER = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\1\1\3\2\0\1\3\22\0\1\1\1\0\1\2\1\0"+
    "\1\34\2\0\1\4\1\26\1\33\1\0\1\36\1\0\1\44\1\40"+
    "\1\51\12\37\1\41\2\0\1\42\1\43\2\0\1\12\1\24\1\21"+
    "\1\16\1\10\1\11\1\30\1\45\1\23\1\32\1\25\1\13\1\47"+
    "\1\15\1\17\1\27\1\35\1\6\1\14\1\5\1\7\1\50\1\22"+
    "\1\20\1\31\1\35\4\0\1\46\1\0\1\12\1\24\1\21\1\16"+
    "\1\10\1\11\1\30\1\45\1\23\1\32\1\25\1\13\1\47\1\15"+
    "\1\17\1\27\1\35\1\6\1\14\1\5\1\7\1\50\1\22\1\20"+
    "\1\31\1\35\uff85\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\3\1\1\3\10\1\1\4"+
    "\1\5\2\6\13\7\3\5\1\10\3\5\1\11\1\12"+
    "\1\13\20\0\1\3\6\0\1\14\1\0\1\7\1\0"+
    "\2\7\1\5\3\7\1\15\4\7\7\0\1\16\1\10"+
    "\1\7\10\0\1\11\2\0\1\3\24\0\10\7\10\0"+
    "\2\10\10\0\1\11\1\0\1\3\16\0\4\7\7\0"+
    "\1\10\1\11\31\0\3\7\6\0\1\17\11\0\1\3"+
    "\7\0\1\7\15\0\1\3\1\7\7\0\1\7\2\0"+
    "\1\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\250\0\374"+
    "\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c"+
    "\0\u0276\0\u02a0\0\u02ca\0\250\0\250\0\u02f4\0\u031e\0\u0348"+
    "\0\u0372\0\u039c\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498"+
    "\0\u04c2\0\u04ec\0\u0516\0\u0540\0\u056a\0\u0594\0\u05be\0\u05e8"+
    "\0\u0612\0\u063c\0\250\0\u0666\0\u0690\0\u06ba\0\u06e4\0\u070e"+
    "\0\u0738\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e"+
    "\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u095a\0\u0984\0\u09ae"+
    "\0\u09d8\0\u0a02\0\u02f4\0\250\0\u031e\0\u0a2c\0\u0a56\0\u0a80"+
    "\0\u0aaa\0\u039c\0\u0ad4\0\u0afe\0\u0b28\0\u039c\0\u0b52\0\u0b7c"+
    "\0\u0ba6\0\u0bd0\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc"+
    "\0\u0cf6\0\u0540\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2"+
    "\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a\0\250\0\u0ec4\0\u0eee\0\u0f18"+
    "\0\u0f42\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea\0\u1014\0\u103e\0\u1068"+
    "\0\u1092\0\u10bc\0\u10e6\0\u1110\0\u113a\0\u1164\0\u118e\0\u11b8"+
    "\0\u11e2\0\u120c\0\u1236\0\u1260\0\u128a\0\u12b4\0\u12de\0\u1308"+
    "\0\u1332\0\u135c\0\u1386\0\u13b0\0\u13da\0\u1404\0\u142e\0\u1458"+
    "\0\u1482\0\u14ac\0\u14d6\0\u1500\0\u0d4a\0\u152a\0\u1554\0\u157e"+
    "\0\u15a8\0\u15d2\0\u15fc\0\u1626\0\u1650\0\u167a\0\u16a4\0\u16ce"+
    "\0\u16f8\0\u1722\0\u174c\0\u1776\0\u17a0\0\u17ca\0\u17f4\0\u181e"+
    "\0\u1848\0\u1872\0\u189c\0\u18c6\0\u18f0\0\u191a\0\u1944\0\u196e"+
    "\0\u1998\0\u19c2\0\u19ec\0\u1a16\0\u1a40\0\u1a6a\0\u1a94\0\u1abe"+
    "\0\u1ae8\0\u1b12\0\u1500\0\u1b3c\0\u1b66\0\u1b90\0\u1bba\0\u1be4"+
    "\0\u1c0e\0\u1c38\0\u1c62\0\u1c8c\0\u1cb6\0\u1ce0\0\u1d0a\0\u1d34"+
    "\0\u1d5e\0\u1d88\0\u1db2\0\u1ddc\0\u1e06\0\u1e30\0\u1e5a\0\u1e84"+
    "\0\u1eae\0\u1ed8\0\u1f02\0\u1f2c\0\u1f56\0\u1f80\0\u1faa\0\u1fd4"+
    "\0\u1ffe\0\u2028\0\u2052\0\u207c\0\u20a6\0\u20d0\0\250\0\u20fa"+
    "\0\u2124\0\u214e\0\u2178\0\u21a2\0\u21cc\0\u21f6\0\u2220\0\u224a"+
    "\0\u2274\0\u229e\0\u22c8\0\u22f2\0\u231c\0\u2346\0\u2370\0\u239a"+
    "\0\u23c4\0\u23ee\0\u2418\0\u2442\0\u246c\0\u2496\0\u24c0\0\u24ea"+
    "\0\u2514\0\u253e\0\u2568\0\u2592\0\u25bc\0\u25e6\0\u2610\0\u263a"+
    "\0\u2664\0\u268e\0\u26b8\0\u26e2\0\u270c\0\u2736\0\u2760\0\u278a"+
    "\0\u27b4\0\u27de\0\u2808";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\5\1\6\2\5\1\7\1\10\1\11"+
    "\1\12\1\5\1\13\1\14\1\5\1\15\2\5\1\16"+
    "\1\17\1\20\1\21\2\5\1\22\16\5\1\7\1\5"+
    "\1\23\1\24\1\25\1\6\1\26\1\6\1\27\1\30"+
    "\1\31\2\32\1\33\1\34\2\32\1\35\1\32\1\36"+
    "\1\37\1\40\1\32\1\41\1\42\1\32\1\43\4\32"+
    "\1\25\1\44\1\32\1\45\1\46\1\25\1\47\1\50"+
    "\1\25\1\51\4\32\1\25\1\5\1\6\1\5\1\6"+
    "\45\5\1\52\1\53\1\54\1\53\1\54\46\53\53\0"+
    "\1\6\1\0\1\6\62\0\1\55\50\0\1\56\4\0"+
    "\1\57\50\0\1\60\3\0\1\61\40\0\1\62\10\0"+
    "\1\63\33\0\1\64\2\0\1\65\4\0\1\66\13\0"+
    "\1\67\27\0\1\70\1\71\53\0\1\72\4\0\1\73"+
    "\77\0\1\74\15\0\1\75\3\0\1\76\42\0\1\77"+
    "\4\0\1\100\51\0\1\101\50\0\1\102\37\0\2\103"+
    "\1\104\1\0\46\103\3\105\1\0\1\104\45\105\5\0"+
    "\1\32\1\106\17\32\1\0\4\32\2\0\1\32\1\0"+
    "\1\32\4\0\1\107\4\32\6\0\3\32\1\110\15\32"+
    "\1\0\4\32\2\0\1\32\1\0\1\32\4\0\1\107"+
    "\4\32\6\0\21\32\1\0\4\32\2\0\1\32\1\0"+
    "\1\32\4\0\1\107\4\32\6\0\5\32\1\111\13\32"+
    "\1\0\4\32\2\0\1\32\1\0\1\32\4\0\1\107"+
    "\4\32\6\0\7\32\1\112\1\113\10\32\1\0\4\32"+
    "\2\0\1\32\1\0\1\32\4\0\1\107\4\32\6\0"+
    "\2\32\1\114\1\115\15\32\1\0\4\32\2\0\1\32"+
    "\1\0\1\32\4\0\1\107\4\32\6\0\1\32\1\116"+
    "\17\32\1\0\4\32\2\0\1\32\1\0\1\32\4\0"+
    "\1\107\4\32\6\0\12\32\1\36\6\32\1\0\4\32"+
    "\2\0\1\32\1\0\1\32\4\0\1\107\4\32\6\0"+
    "\6\32\1\117\3\32\1\120\6\32\1\0\4\32\2\0"+
    "\1\32\1\0\1\32\4\0\1\107\4\32\6\0\10\32"+
    "\1\121\10\32\1\0\4\32\2\0\1\32\1\0\1\32"+
    "\4\0\1\107\4\32\6\0\1\32\1\122\17\32\1\0"+
    "\4\32\2\0\1\32\1\0\1\32\4\0\1\107\4\32"+
    "\11\0\1\123\1\124\1\125\1\0\1\126\2\0\1\127"+
    "\3\0\1\130\1\131\32\0\21\132\1\0\4\132\2\0"+
    "\1\132\1\0\1\132\5\0\4\132\40\0\1\133\17\0"+
    "\3\32\1\134\15\32\1\0\4\32\2\0\1\32\1\0"+
    "\1\46\1\135\3\0\1\107\4\32\42\0\1\25\53\0"+
    "\1\25\45\0\1\133\3\0\1\25\17\0\1\136\1\0"+
    "\1\137\1\140\4\0\1\141\1\142\1\143\1\144\21\0"+
    "\1\145\4\0\1\54\1\0\1\54\56\0\1\7\55\0"+
    "\1\146\42\0\1\147\52\0\1\150\51\0\1\151\57\0"+
    "\1\152\7\0\1\153\4\0\1\154\35\0\1\155\46\0"+
    "\1\156\66\0\1\7\45\0\1\157\43\0\1\160\103\0"+
    "\1\65\13\0\1\161\12\0\1\162\46\0\1\163\5\0"+
    "\1\164\37\0\1\165\57\0\1\166\42\0\1\167\4\0"+
    "\1\170\51\0\1\171\5\0\1\172\32\0\1\173\60\0"+
    "\1\174\55\0\1\63\34\0\1\7\50\0\2\32\1\175"+
    "\16\32\1\0\4\32\2\0\1\32\1\0\1\32\4\0"+
    "\1\107\4\32\6\0\21\32\1\0\4\32\2\0\1\32"+
    "\1\0\1\32\5\0\4\32\6\0\1\176\20\32\1\0"+
    "\4\32\2\0\1\32\1\0\1\32\4\0\1\107\4\32"+
    "\6\0\6\32\1\177\12\32\1\0\4\32\2\0\1\32"+
    "\1\0\1\32\4\0\1\107\4\32\6\0\11\32\1\116"+
    "\7\32\1\0\4\32\2\0\1\32\1\0\1\32\4\0"+
    "\1\107\4\32\6\0\6\32\1\200\12\32\1\0\4\32"+
    "\2\0\1\32\1\0\1\32\4\0\1\107\4\32\6\0"+
    "\15\32\1\116\3\32\1\0\4\32\2\0\1\32\1\0"+
    "\1\32\4\0\1\107\4\32\6\0\12\32\1\201\6\32"+
    "\1\0\4\32\2\0\1\32\1\0\1\32\4\0\1\107"+
    "\4\32\6\0\10\32\1\202\10\32\1\0\4\32\2\0"+
    "\1\32\1\0\1\32\4\0\1\107\4\32\6\0\7\32"+
    "\1\203\11\32\1\0\4\32\2\0\1\32\1\0\1\32"+
    "\4\0\1\107\4\32\6\0\3\32\1\204\15\32\1\0"+
    "\4\32\2\0\1\32\1\0\1\32\4\0\1\107\4\32"+
    "\21\0\1\205\44\0\1\206\44\0\1\207\50\0\1\210"+
    "\70\0\1\211\42\0\1\212\53\0\1\213\42\0\1\214"+
    "\26\0\1\133\1\135\16\0\21\32\1\0\4\32\2\0"+
    "\1\32\1\0\1\215\4\0\1\107\4\32\40\0\1\216"+
    "\31\0\1\217\3\0\1\220\40\0\1\221\47\0\1\222"+
    "\4\0\1\223\13\0\1\224\32\0\1\225\104\0\1\226"+
    "\15\0\1\227\53\0\1\230\46\0\1\231\51\0\1\232"+
    "\51\0\1\233\36\0\1\7\16\0\1\152\42\0\1\7"+
    "\54\0\1\234\60\0\1\172\57\0\1\7\31\0\1\235"+
    "\73\0\1\236\27\0\1\237\56\0\1\240\10\0\1\241"+
    "\35\0\1\242\107\0\1\55\11\0\1\243\51\0\1\244"+
    "\57\0\1\55\46\0\1\152\50\0\1\245\55\0\1\246"+
    "\45\0\1\152\54\0\1\247\60\0\1\155\35\0\3\32"+
    "\1\116\15\32\1\0\4\32\2\0\1\32\1\0\1\32"+
    "\4\0\1\107\4\32\6\0\2\32\1\250\16\32\1\0"+
    "\4\32\2\0\1\32\1\0\1\32\4\0\1\107\4\32"+
    "\6\0\7\32\1\175\11\32\1\0\4\32\2\0\1\32"+
    "\1\0\1\32\4\0\1\107\4\32\6\0\6\32\1\116"+
    "\12\32\1\0\4\32\2\0\1\32\1\0\1\32\4\0"+
    "\1\107\4\32\6\0\10\32\1\175\10\32\1\0\4\32"+
    "\2\0\1\32\1\0\1\32\4\0\1\107\4\32\6\0"+
    "\1\251\20\32\1\0\4\32\2\0\1\32\1\0\1\32"+
    "\4\0\1\107\4\32\6\0\1\252\20\32\1\0\4\32"+
    "\2\0\1\32\1\0\1\32\4\0\1\107\4\32\6\0"+
    "\5\32\1\253\13\32\1\0\4\32\2\0\1\32\1\0"+
    "\1\32\4\0\1\107\4\32\30\0\1\254\41\0\1\255"+
    "\40\0\1\256\51\0\1\257\75\0\1\260\24\0\1\261"+
    "\63\0\1\262\71\0\1\263\22\0\1\214\26\0\1\216"+
    "\20\0\1\264\51\0\1\265\57\0\1\266\7\0\1\267"+
    "\54\0\1\145\45\0\1\270\43\0\1\271\55\0\1\272"+
    "\5\0\1\273\45\0\1\274\42\0\1\275\4\0\1\276"+
    "\47\0\1\277\55\0\1\300\43\0\1\301\46\0\1\302"+
    "\52\0\1\7\45\0\1\303\71\0\1\167\34\0\1\304"+
    "\46\0\1\305\57\0\1\55\64\0\1\306\30\0\1\307"+
    "\50\0\1\310\1\0\1\311\12\0\1\312\34\0\1\313"+
    "\52\0\1\314\67\0\1\315\31\0\1\32\1\316\17\32"+
    "\1\0\4\32\2\0\1\32\1\0\1\32\4\0\1\107"+
    "\4\32\6\0\16\32\1\317\2\32\1\0\4\32\2\0"+
    "\1\32\1\0\1\32\4\0\1\107\4\32\6\0\5\32"+
    "\1\320\13\32\1\0\4\32\2\0\1\32\1\0\1\32"+
    "\4\0\1\107\4\32\6\0\20\32\1\116\1\0\4\32"+
    "\2\0\1\32\1\0\1\32\4\0\1\107\4\32\13\0"+
    "\1\321\51\0\1\322\51\0\1\323\62\0\1\324\36\0"+
    "\1\325\51\0\1\326\22\0\1\327\31\0\1\330\46\0"+
    "\1\331\36\0\1\145\16\0\1\266\42\0\1\145\54\0"+
    "\1\332\70\0\1\333\27\0\1\334\111\0\1\335\11\0"+
    "\1\336\57\0\1\335\46\0\1\266\50\0\1\337\63\0"+
    "\1\340\41\0\1\341\56\0\1\303\54\0\1\342\44\0"+
    "\1\7\55\0\1\7\44\0\1\152\62\0\1\343\33\0"+
    "\1\55\62\0\1\234\47\0\1\344\51\0\1\345\42\0"+
    "\1\346\61\0\1\347\56\0\1\350\33\0\10\32\1\116"+
    "\10\32\1\0\4\32\2\0\1\32\1\0\1\32\4\0"+
    "\1\107\4\32\6\0\10\32\1\106\10\32\1\0\4\32"+
    "\2\0\1\32\1\0\1\32\4\0\1\107\4\32\6\0"+
    "\10\32\1\351\10\32\1\0\4\32\2\0\1\32\1\0"+
    "\1\32\4\0\1\107\4\32\16\0\1\352\41\0\1\353"+
    "\75\0\1\353\35\0\1\354\55\0\1\322\60\0\1\355"+
    "\31\0\1\356\22\0\1\327\30\0\1\357\52\0\1\145"+
    "\65\0\1\275\34\0\1\360\47\0\1\145\50\0\1\361"+
    "\50\0\1\362\70\0\1\145\40\0\1\167\102\0\1\7"+
    "\12\0\1\363\50\0\1\364\53\0\1\365\52\0\1\366"+
    "\51\0\1\367\52\0\1\7\45\0\14\32\1\370\4\32"+
    "\1\0\4\32\2\0\1\32\1\0\1\32\4\0\1\107"+
    "\4\32\17\0\1\353\66\0\1\327\46\0\1\353\31\0"+
    "\1\371\53\0\1\372\60\0\1\373\50\0\1\145\37\0"+
    "\1\335\51\0\1\374\53\0\1\375\46\0\1\376\54\0"+
    "\1\315\56\0\1\152\60\0\1\377\32\0\3\32\1\u0100"+
    "\15\32\1\0\4\32\2\0\1\32\1\0\1\32\4\0"+
    "\1\107\4\32\7\0\1\353\60\0\1\353\101\0\1\145"+
    "\14\0\1\u0101\53\0\1\155\70\0\1\u0102\33\0\1\100"+
    "\43\0\12\32\1\u0103\6\32\1\0\4\32\2\0\1\32"+
    "\1\0\1\32\4\0\1\107\4\32\16\0\1\266\63\0"+
    "\1\55\27\0\4\32\1\116\14\32\1\0\4\32\2\0"+
    "\1\32\1\0\1\32\4\0\1\107\4\32\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10290];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\14\1\2\11\25\1\1\11"+
    "\1\1\20\0\1\1\6\0\1\11\1\0\1\1\1\0"+
    "\13\1\7\0\3\1\10\0\1\11\2\0\1\1\24\0"+
    "\10\1\10\0\2\1\10\0\1\1\1\0\1\1\16\0"+
    "\4\1\7\0\2\1\31\0\3\1\6\0\1\11\11\0"+
    "\1\1\7\0\1\1\15\0\2\1\7\0\1\1\2\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    private LatteStateStack stack = new LatteStateStack();
    private LexerInput input;

    public LatteMarkupColoringLexer(LexerRestartInfo info) {
        this.input = info.input();
        if(info.state() != null) {
            //reset state
            setState((LexerState) info.state());
        } else {
            zzState = zzLexicalState = YYINITIAL;
            stack.clear();
        }

    }

    private enum Syntax {
        LATTE,
        DOUBLE,
        ASP,
        PYTHON,
        OFF;
    }

    public static final class LexerState  {
        final LatteStateStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;

        LexerState(LatteStateStack stack, int zzState, int zzLexicalState) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
        }

        @Override
        public int hashCode() {
            int hash = 5;
            hash = 29 * hash + Objects.hashCode(this.stack);
            hash = 29 * hash + this.zzState;
            hash = 29 * hash + this.zzLexicalState;
            return hash;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final LexerState other = (LexerState) obj;
            if (!Objects.equals(this.stack, other.stack)) {
                return false;
            }
            if (this.zzState != other.zzState) {
                return false;
            }
            if (this.zzLexicalState != other.zzLexicalState) {
                return false;
            }
            return true;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.createClone(), zzState, zzLexicalState);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected void popState() {
        yybegin(stack.popStack());
    }

    protected void pushState(final int state) {
        stack.pushStack(getZZLexicalState());
        yybegin(state);
    }


 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatteMarkupColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LatteMarkupColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public LatteMarkupTokenId findNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14:
          { return LatteMarkupTokenId.T_VARIABLE;
          }
        case 16: break;
        case 4:
          { yypushback(yylength());
        pushState(ST_END_MACRO);
          }
        case 17: break;
        case 5:
          { return LatteMarkupTokenId.T_CHAR;
          }
        case 18: break;
        case 15:
          { return LatteMarkupTokenId.T_CAST;
          }
        case 19: break;
        case 12:
          { return LatteMarkupTokenId.T_STRING;
          }
        case 20: break;
        case 1:
          { yypushback(yylength());
        pushState(ST_OTHER);
          }
        case 21: break;
        case 8:
          { return LatteMarkupTokenId.T_NUMBER;
          }
        case 22: break;
        case 7:
          { return LatteMarkupTokenId.T_SYMBOL;
          }
        case 23: break;
        case 10:
          { return LatteMarkupTokenId.T_ERROR;
          }
        case 24: break;
        case 13:
          { return LatteMarkupTokenId.T_KEYWORD;
          }
        case 25: break;
        case 3:
          { pushState(ST_OTHER);
        return LatteMarkupTokenId.T_MACRO_START;
          }
        case 26: break;
        case 6:
          { yypushback(yylength());
        pushState(ST_HIGHLIGHTING_ERROR);
          }
        case 27: break;
        case 2:
          { return LatteMarkupTokenId.T_WHITESPACE;
          }
        case 28: break;
        case 11:
          { popState();
          }
        case 29: break;
        case 9:
          { pushState(ST_OTHER);
        return LatteMarkupTokenId.T_MACRO_END;
          }
        case 30: break;
        default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
              {         if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return LatteMarkupTokenId.T_ERROR;
        } else {
            return null;
        }
 }

          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
