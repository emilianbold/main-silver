# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 2013 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.
#
# Contributor(s):
#
# Portions Copyrighted 2013 Sun Microsystems, Inc.

NotBlankTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@NotBlank</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is not blank, defined as not equal to a blank string and also not equal to <code>null</code>. To force that a value is simply not equal to <code>null</code>, \
see the <code>NotNull</code> constraint.</p>\
\n\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td>Options</td>\
    <td><ul style="margin:0 0 0 10px;"><li>message</li></ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>NotBlank</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>NotBlankValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>If you wanted to ensure that the <code>firstName</code> property of an <code>Author</code> class were not blank, you could do the following:</p>\
<pre><code>\n\
use Symfony\Component\Validator\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\NotBlank()\n\
\     */\n\
\    protected $firstName;\n\
}\n\
</code></pre>\n\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should not be blank</code></p>\
<p>This is the message that will be shown if the value is blank.</p>
BlankTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Blank</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is blank, defined as equal to a blank string or equal to <code>null</code>. To force that a value strictly be equal to <code>null</code>, \
see the <code>Null</code> constraint. To force that a value is not blank, see <code>NotBlank</code>.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td>Options</td>\
    <td><ul style="margin:0 0 0 10px;"><li>message</li></ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Blank</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>BlankValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>If, for some reason, you wanted to ensure that the <code>firstName</code> property of an <code>Author</code> class were blank, you could do the following:</p>\
<pre><code>\n\
use Symfony\Component\Validator\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Blank()\n\
\     */\n\
\    protected $firstName;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be blank</code></p>\
<p>This is the message that will be shown if the value is not blank.</p>
NotNullTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@NotNull</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is not strictly equal to <code>null</code>. To ensure that a value is simply not blank (not a blank string), see the <code>NotBlank</code> constraint.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td>Options</td>\
    <td><ul style="margin:0 0 0 10px;"><li>message</li></ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>NotNull</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>NotNullValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>If you wanted to ensure that the <code>firstName</code> property of an <code>Author</code> class were not strictly equal to <code>null</code>, you would:</p>\
<pre><code>\n\
use Symfony\Component\Validator\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\NotNull()\n\
\     */\n\
\    protected $firstName;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should not be null</code></p>\
<p>This is the message that will be shown if the value is <code>null</code>.</p>
NullTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Null</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is exactly equal to <code>null</code>. To force that a property is simply blank (blank string or <code>null</code>), \
see the <code>Blank</code> constraint. To ensure that a property is not <code>null</code>, see <code>NotNull</code>.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td>Options</td>\
    <td><ul style="margin:0 0 0 10px;"><li>message</li></ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Null</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>NullValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>If, for some reason, you wanted to ensure that the <code>firstName</code> property of an <code>Author</code> class exactly equal to <code>null</code>, you could do the following:</p>\
<pre><code>\n\
use Symfony\Component\Validator\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Null()\n\
\     */\n\
\    protected $firstName;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be null</code></p>\
<p>This is the message that will be shown if the value is not <code>null</code>.</p>
TrueTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@True</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is <code>true</code>. Specifically, this checks to see if the value is exactly <code>true</code>, exactly the integer 1, or exactly the string "1". \
Also see <code>False</code>.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td>Options</td>\
    <td><ul style="margin:0 0 0 10px;"><li>message</li></ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>True</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>TrueValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>This constraint can be applied to properties (e.g. a <code>termsAccepted</code> property on a registration model) or to a "getter" method. It's most powerful in the latter case, \
where you can assert that a method returns a true value. For example, suppose you have the following method:</p>\
<pre><code>\n\
class Author {\n\
\    protected $token;\n\
\n\
\    public function isTokenValid() {\n\
\        return $this->token == $this->generateToken();\n\
\    }\n\
}\n\
</code></pre>\
<p>Then you can constrain this method with <code>True</code>.</p>\
<pre><code>\n\
use Symfony\Component\Validator\Constraints as Assert;\n\
\n\
class Author {\n\
\    protected $token;\n\
\n\
\    /**\n\
\     * @Assert\\True(message = "The token is invalid")\n\
\     */\n\
\    public function isTokenValid() {\n\
\        return $this->token == $this->generateToken();\n\
\    }\n\
}\n\
</code></pre>\
<p>If the <code>isTokenValid()</code> returns false, the validation will fail.</p>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be true</code></p>\
<p>This message is shown if the underlying data is not true.</p>
FalseTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@False</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is <code>false</code>. Specifically, this checks to see if the value is exactly <code>false</code>, exactly the integer 0, or exactly the string "0". \
Also see <code>True</code>.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td>Options</td>\
    <td><ul style="margin:0 0 0 10px;"><li>message</li></ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>False</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>FalseValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>The <code>False</code> constraint can be applied to a property or a "getter" method, but is most commonly useful in the latter case. For example, suppose that you want to \
guarantee that some state property is <i>not</i> in a dynamic <code>invalidStates</code> array. First, you'd create a "getter" method:</p>\
<pre><code>\n\
protected $state;\n\
\n\
protected $invalidStates = array();\n\
\n\
public function isStateInvalid() {\n\
    return in_array($this->state, $this->invalidStates);\n\
}\n\
</code></pre>\
<p>In this case, the underlying object is only valid if the <code>isStateInvalid</code> method returns <b>false</b>:</p>\
<pre><code>\n\
use Symfony\Component\Validator\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\False()\n\
\     */\n\
\     public function isStateInvalid($message = "You've entered an invalid state.") {\n\
\        // ...\n\
\     }\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be false</code></p>\
<p>This message is shown if the underlying data is not false.</p>
TypeTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Type</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is of a specific data type. For example, if a variable should be an array, you can use this constraint with the array type option to validate this.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td>Options</td>\
    <td><ul style="margin:0 0 0 10px;"><li>type</li><li>message</li></ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Type</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>TypeValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use Symfony\Component\Validator\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Type(type="integer", message="The value {{ value }} is not a valid {{ type }}.")\n\
\     */\n\
\    protected $age;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">type</p>\
<p><strong>type</strong>: <code>string</code></p>\
<p>This required option is the fully qualified class name or one of the PHP datatypes as determined by PHP's <code>is_</code> functions.</p>\
<ul>\
    <li>array</li>\
    <li>bool</li>\
    <li>callable</li>\
    <li>float</li>\
    <li>double</li>\
    <li>int</li>\
    <li>integer</li>\
    <li>long</li>\
    <li>null</li>\
    <li>numeric</li>\
    <li>object</li>\
    <li>real</li>\
    <li>resource</li>\
    <li>scalar</li>\
    <li>string</li>\
</ul>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be of type {{ type }}</code></p>\
<p>The message if the underlying data is not of the given type.</p>
