# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 2013 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.
#
# Contributor(s):
#
# Portions Copyrighted 2013 Sun Microsystems, Inc.

NotBlankTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@NotBlank</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is not blank, defined as not equal to a blank string and also not equal to <code>null</code>. To force that a value is simply not equal to <code>null</code>, \
see the <code>NotNull</code> constraint.</p>\
\n\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;"><li>message</li></ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>NotBlank</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>NotBlankValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>If you wanted to ensure that the <code>firstName</code> property of an <code>Author</code> class were not blank, you could do the following:</p>\
<pre><code>\n\
use Symfony\Component\Validator\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\NotBlank()\n\
\     */\n\
\    protected $firstName;\n\
}\n\
</code></pre>\n\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should not be blank</code></p>\
<p>This is the message that will be shown if the value is blank.</p>
BlankTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Blank</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is blank, defined as equal to a blank string or equal to <code>null</code>. To force that a value strictly be equal to <code>null</code>, \
see the <code>Null</code> constraint. To force that a value is not blank, see <code>NotBlank</code>.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;"><li>message</li></ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Blank</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>BlankValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>If, for some reason, you wanted to ensure that the <code>firstName</code> property of an <code>Author</code> class were blank, you could do the following:</p>\
<pre><code>\n\
use Symfony\Component\Validator\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Blank()\n\
\     */\n\
\    protected $firstName;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be blank</code></p>\
<p>This is the message that will be shown if the value is not blank.</p>
NotNullTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@NotNull</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is not strictly equal to <code>null</code>. To ensure that a value is simply not blank (not a blank string), see the <code>NotBlank</code> constraint.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;"><li>message</li></ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>NotNull</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>NotNullValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>If you wanted to ensure that the <code>firstName</code> property of an <code>Author</code> class were not strictly equal to <code>null</code>, you would:</p>\
<pre><code>\n\
use Symfony\Component\Validator\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\NotNull()\n\
\     */\n\
\    protected $firstName;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should not be null</code></p>\
<p>This is the message that will be shown if the value is <code>null</code>.</p>
NullTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Null</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is exactly equal to <code>null</code>. To force that a property is simply blank (blank string or <code>null</code>), \
see the <code>Blank</code> constraint. To ensure that a property is not <code>null</code>, see <code>NotNull</code>.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;"><li>message</li></ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Null</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>NullValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>If, for some reason, you wanted to ensure that the <code>firstName</code> property of an <code>Author</code> class exactly equal to <code>null</code>, you could do the following:</p>\
<pre><code>\n\
use Symfony\Component\Validator\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Null()\n\
\     */\n\
\    protected $firstName;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be null</code></p>\
<p>This is the message that will be shown if the value is not <code>null</code>.</p>
TrueTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@True</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is <code>true</code>. Specifically, this checks to see if the value is exactly <code>true</code>, exactly the integer 1, or exactly the string "1". \
Also see <code>False</code>.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;"><li>message</li></ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>True</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>TrueValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>This constraint can be applied to properties (e.g. a <code>termsAccepted</code> property on a registration model) or to a "getter" method. It's most powerful in the latter case, \
where you can assert that a method returns a true value. For example, suppose you have the following method:</p>\
<pre><code>\n\
class Author {\n\
\    protected $token;\n\
\n\
\    public function isTokenValid() {\n\
\        return $this->token == $this->generateToken();\n\
\    }\n\
}\n\
</code></pre>\
<p>Then you can constrain this method with <code>True</code>.</p>\
<pre><code>\n\
use Symfony\Component\Validator\Constraints as Assert;\n\
\n\
class Author {\n\
\    protected $token;\n\
\n\
\    /**\n\
\     * @Assert\\True(message = "The token is invalid")\n\
\     */\n\
\    public function isTokenValid() {\n\
\        return $this->token == $this->generateToken();\n\
\    }\n\
}\n\
</code></pre>\
<p>If the <code>isTokenValid()</code> returns false, the validation will fail.</p>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be true</code></p>\
<p>This message is shown if the underlying data is not true.</p>
FalseTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@False</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is <code>false</code>. Specifically, this checks to see if the value is exactly <code>false</code>, exactly the integer 0, or exactly the string "0". \
Also see <code>True</code>.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;"><li>message</li></ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>False</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>FalseValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>The <code>False</code> constraint can be applied to a property or a "getter" method, but is most commonly useful in the latter case. For example, suppose that you want to \
guarantee that some state property is <i>not</i> in a dynamic <code>invalidStates</code> array. First, you'd create a "getter" method:</p>\
<pre><code>\n\
protected $state;\n\
\n\
protected $invalidStates = array();\n\
\n\
public function isStateInvalid() {\n\
    return in_array($this->state, $this->invalidStates);\n\
}\n\
</code></pre>\
<p>In this case, the underlying object is only valid if the <code>isStateInvalid</code> method returns <b>false</b>:</p>\
<pre><code>\n\
use Symfony\Component\Validator\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\False()\n\
\     */\n\
\     public function isStateInvalid($message = "You've entered an invalid state.") {\n\
\        // ...\n\
\     }\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be false</code></p>\
<p>This message is shown if the underlying data is not false.</p>
TypeTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Type</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is of a specific data type. For example, if a variable should be an array, you can use this constraint with the array type option to validate this.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;"><li>type</li><li>message</li></ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Type</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>TypeValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use Symfony\Component\Validator\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Type(type="integer", message="The value {{ value }} is not a valid {{ type }}.")\n\
\     */\n\
\    protected $age;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">type</p>\
<p><strong>type</strong>: <code>string</code> [default option]</p>\
<p>This required option is the fully qualified class name or one of the PHP datatypes as determined by PHP's <code>is_</code> functions.</p>\
<ul>\
    <li>array</li>\
    <li>bool</li>\
    <li>callable</li>\
    <li>float</li>\
    <li>double</li>\
    <li>int</li>\
    <li>integer</li>\
    <li>long</li>\
    <li>null</li>\
    <li>numeric</li>\
    <li>object</li>\
    <li>real</li>\
    <li>resource</li>\
    <li>scalar</li>\
    <li>string</li>\
</ul>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be of type {{ type }}</code></p>\
<p>The message if the underlying data is not of the given type.</p>
EmailTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Email</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is a valid email address. The underlying value is cast to a string before being validated.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>message</li>\
            <li>checkMX</li>\
            <li>checkHost</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Email</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>EmailValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use Symfony\Component\Validator\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Email(\n\
\     *     message = "The email '{{ value }}' is not a valid email.",\n\
\     *     checkMX = true\n\
\     * )\n\
\     */\n\
\     protected $email;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value is not a valid email address</code></p>\
<p>This message is shown if the underlying data is not a valid email address.</p>\
<p style="font-weight: bold; font-style: italic">checkMX</p>\
<p><strong>type</strong>: <code>Boolean</code> <strong>default</strong>: <code>false</code></p>\
<p>If true, then the <code>checkdnsrr</code> PHP function will be used to check the validity of the MX record of the host of the given email.</p>\
<p style="font-weight: bold; font-style: italic">checkHost</p>\
<p style="font-style: italic">New in version 2.1: The <code>checkHost</code> option was added in Symfony 2.1</p>\
<p><strong>type</strong>: <code>Boolean</code> <strong>default</strong>: <code>false</code></p>\
<p>If true, then the <code>checkdnsrr</code> PHP function will be used to check the validity of the MX or the A or the AAAA record of the host of the given email.</p>
MinLengthTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@MinLength</p>\
<p style="font-style: italic">The <code>MinLength</code> constraint is deprecated since version 2.1 and will be removed in Symfony 2.3. \
Use <code>Length</code> with the <code>min</code> option instead.</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that the length of a string is at least as long as the given limit.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>limit</li>\
            <li>message</li>\
            <li>charset</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>MinLength</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>MinLengthValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use Symfony\Component\Validator\Constraints as Assert;\n\
\n\
class Blog {\n\
\    /**\n\
\     * @Assert\\MinLength(\n\
\     *     limit=3,\n\
\     *     message="Your name must have at least {{ limit }} characters."\n\
\     * )\n\
\     */\n\
\    protected $summary;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">limit</p>\
<p><strong>type</strong>: <code>integer</code> [default option]</p>\
<p>This required option is the "min" value. Validation will fail if the length of the give string is <b>less</b> than this number.</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value is too short. It should have {{ limit }} characters or more</code></p>\
<p>The message that will be shown if the underlying string has a length that is shorter than the limit option.</p>\
<p style="font-weight: bold; font-style: italic">charset</p>\
<p><strong>type</strong>: <code>charset</code> <strong>default</strong>: <code>UTF-8</code></p>\
<p>If the PHP extension "mbstring" is installed, then the PHP function <code>mb_strlen</code> will be used to calculate the length of the string. \
The value of the <code>charset</code> option is passed as the second argument to that function.</p>
MaxLengthTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@MaxLength</p>\
<p style="font-style: italic">The <code>MaxLength</code> constraint is deprecated since version 2.1 and will be removed in Symfony 2.3. \
Use <code>Length</code> with the <code>min</code> option instead.</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that the length of a string is not larger than the given limit.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>limit</li>\
            <li>message</li>\
            <li>charset</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>MaxLength</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>MaxLengthValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use Symfony\Component\Validator\Constraints as Assert;\n\
\n\
class Blog {\n\
\    /**\n\
\     * @Assert\\MaxLength(100)\n\
\     */\n\
\    protected $summary;\n\
}</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">limit</p>\
<p><strong>type</strong>: <code>integer</code> [default option]</p>\
<p>This required option is the "max" value. Validation will fail if the length of the give string is <b>greater</b> than this number.</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value is too long. It should have {{ limit }} characters or less</code></p>\
<p>The message that will be shown if the underlying string has a length that is longer than the limit option.</p>\
<p style="font-weight: bold; font-style: italic">charset</p>\
<p><strong>type</strong>: <code>charset</code> <strong>default</strong>: <code>UTF-8</code></p>\
<p>If the PHP extension "mbstring" is installed, then the PHP function <code>mb_strlen</code> will be used to calculate the length of the string. \
The value of the <code>charset</code> option is passed as the second argument to that function.</p>
LengthTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Length</p>\
<p style="font-style: italic">New in version 2.1: The <code>Length</code> constraint was added in Symfony 2.1.</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a given string length is between some minimum and maximum value.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>min</li>\
            <li>max</li>\
            <li>charset</li>\
            <li>minMessage</li>\
            <li>maxMessage</li>\
            <li>exactMessage</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Length</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>LengthValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>To verify that the <code>firstName</code> field length of a class is between "2" and "50", you might add the following:</p>\
<pre><code>\n\
use Symfony\Component\Validator\Constraints as Assert;\n\
\n\
class Participant {\n\
\    /**\n\
\     * @Assert\\Length(\n\
\     *      min = "2",\n\
\     *      max = "50",\n\
\     *      minMessage = "Your first name must be at least {{ limit }} characters length",\n\
\     *      maxMessage = "Your first name cannot be longer than than {{ limit }} characters length"\n\
\     * )\n\
\     */\n\
\     protected $firstName;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">min</p>\
<p><strong>type</strong>: <code>integer</code> [default option]</p>\
<p>This required option is the "min" length value. Validation will fail if the given value's length is <b>less</b> than this min value.</p>\
<p style="font-weight: bold; font-style: italic">max</p>\
<p><strong>type</strong>: <code>integer</code> [default option]</p>\
<p>This required option is the "max" length value. Validation will fail if the given value's length is <b>greater</b> than this max value.</p>\
<p><strong>type</strong>: <code>charset</code> <strong>default</strong>: <code>UTF-8</code></p>\
<p>The charset to be used when computing value's length. The <code>grapheme_strlen</code> PHP function is used if available. If not, the the <code>mb_strlen</code> PHP function \
is used if available. If neither are available, the <code>strlen</code> PHP function is used.</p>\
<p style="font-weight: bold; font-style: italic">minMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value is too short. It should have {{ limit }} characters or more.</code></p>\
<p>The message that will be shown if the underlying value's length is less than the <code>min</code> option.</p>\
<p style="font-weight: bold; font-style: italic">maxMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value is too long. It should have {{ limit }} characters or less.</code></p>\
<p>The message that will be shown if the underlying value's length is more than the <code>max</code> option.</p>\
<p style="font-weight: bold; font-style: italic">exactMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should have exactly {{ limit }} characters.</code></p>\
<p>The message that will be shown if <code>min</code> and <code>max</code> values are equal and the underlying value's length is not exactly this value.</p>
UrlTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Url</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is a valid URL string.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>message</li>\
            <li>protocols</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Url</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>UrlValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p></p>\
<pre><code>\n\
use Symfony\Component\Validator\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Url()\n\
\     */\n\
\     protected $bioUrl;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value is not a valid URL</code></p>\
<p>This message is shown if the URL is invalid.</p>\
<p style="font-weight: bold; font-style: italic">protocols</p>\
<p><strong>type</strong>: <code>array</code> <strong>default</strong>: <code>array('http', 'https')</code></p>\
<p>The protocols that will be considered to be valid. For example, if you also needed <code>ftp://</code> type URLs to be valid, you'd redefine the <code>protocols</code> array, \
listing <code>http</code>, <code>https</code>, and also <code>ftp</code>.</p>
RegexTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Regex</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value matches a regular expression.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>pattern</li>\
            <li>match</li>\
            <li>message</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Regex</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>RegexValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>Suppose you have a <code>description</code> field and you want to verify that it begins with a valid word character. The regular expression to test for this would be <code>/^\w+/</code>, \
indicating that you're looking for at least one or more word characters at the beginning of your string:</p>\
<pre><code>\n\
use Symfony\Component\Validator\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Regex("/^\w+/")\n\
\     */\n\
\    protected $description;\n\
}\n\
</code></pre>\
<p>Alternatively, you can set the <code>match</code> option to <code>false</code> in order to assert that a given string does <i>not</i> match. \
In the following example, you'll assert that the <code>firstName</code> field does not contain any numbers and give it a custom message:</p>\
<pre><code>\n\
use Symfony\Component\Validator\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Regex(\n\
\     *     pattern="/\d/",\n\
\     *     match=false,\n\
\     *     message="Your name cannot contain a number"\n\
\     * )\n\
\     */\n\
\    protected $firstName;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">pattern</p>\
<p><strong>type</strong>: <code>string</code> [default option]</p>\
<p>This required option is the regular expression pattern that the input will be matched against. By default, this validator will fail if the input string does <i>not</i> match \
this regular expression (via the <code>preg_match</code> PHP function). However, if <code>match</code> is set to <code>false</code>, then validation will fail if the input string <i>does</i> \
match this pattern.</p>\
<p style="font-weight: bold; font-style: italic">match</p>\
<p><strong>type</strong>: <code>Boolean</code> <strong>default</strong>: <code>true</code></p>\
<p>If <code>true</code> (or not set), this validator will pass if the given string matches the given pattern regular expression. However, when this option is set to <code>false</code>, \
the opposite will occur: validation will pass only if the given string does <b>not</b> match the pattern regular expression.</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value is not valid</code></p>\
<p>This is the message that will be shown if this validator fails.</p>
IpTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Ip</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is a valid IP address. By default, this will validate the value as IPv4, but a number of different options exist to validate as IPv6 and many other combinations.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>version</li>\
            <li>message</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Ip</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>IpValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use Symfony\Component\Validator\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Ip\n\
\     */\n\
\     protected $ipAddress;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">version</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>4</code></p>\
<p>This determines exactly how the ip address is validated and can take one of a variety of different values:</p>\
<p><strong>All ranges</strong></p>\
<ul>\
<li><code>4</code> - Validates for IPv4 addresses</li>\
<li><code>6</code> - Validates for IPv6 addresses</li>\
<li><code>all</code> - Validates all IP formats</li>\
</ul>\
<p><strong>No private ranges</strong></p>\
<ul>\
<li><code>4_no_priv</code> - Validates for IPv4 but without private IP ranges</li>\
<li><code>6_no_priv</code> - Validates for IPv6 but without private IP ranges</li>\
<li><code>all_no_priv</code> - Validates for all IP formats but without private IP ranges</li>\
</ul>\
<p><strong>No reserved ranges</strong></p>\
<ul>\
<li><code>4_no_res</code> - Validates for IPv4 but without reserved IP ranges</li>\
<li><code>6_no_res</code> - Validates for IPv6 but without reserved IP ranges</li>\
<li><code>all_no_res</code> - Validates for all IP formats but without reserved IP ranges</li>\
</ul>\
<p><strong>Only public ranges</strong></p>\
<ul>\
<li><code>4_public</code> - Validates for IPv4 but without private and reserved ranges</li>\
<li><code>6_public</code> - Validates for IPv6 but without private and reserved ranges</li>\
<li><code>all_public</code> - Validates for all IP formats but without private and reserved ranges</li>\
</ul>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This is not a valid IP address</code></p>\
<p>This message is shown if the string is not a valid IP address.</p>
