/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */

/*
 * PoliciesVisualPanel.java
 *
 * Created on 22.07.2011, 15:11:27
 */
package org.netbeans.modules.websvc.owsm;

import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.ListSelectionModel;
import javax.swing.plaf.ListUI;

/**
 *
 * @author den
 */
public class PoliciesVisualPanel extends javax.swing.JPanel {

    /** Creates new form PoliciesVisualPanel */
    public PoliciesVisualPanel( List<String> policyIds ) {
        initComponents();
        DefaultComboBoxModel model = new DefaultComboBoxModel( 
                policyIds.toArray( new String[policyIds.size()]));
        myPoliciesList.setModel( model );
        
        myRenderer = new PoliciesListCellRenderer();
        myPoliciesList.setCellRenderer(myRenderer);
        myPoliciesList.setSelectionMode( ListSelectionModel.SINGLE_SELECTION );
        myPoliciesList.addMouseListener( new MouseListener() {
            
            @Override
            public void mouseReleased( MouseEvent e ) {
            }
            
            @Override
            public void mousePressed( MouseEvent e ) {
            }
            
            @Override
            public void mouseExited( MouseEvent e ) {
            }
            
            @Override
            public void mouseEntered( MouseEvent e ) {
            }
            
            @Override
            public void mouseClicked( MouseEvent e ) {
                int index = myPoliciesList.getSelectedIndex();
                ListUI listUi = myPoliciesList.getUI();
                Rectangle bounds = listUi.getCellBounds( myPoliciesList, 
                        index, index+1);
                Point listLocatoin = myPoliciesList.getLocationOnScreen();
                Point location = bounds.getLocation();
                Point clickPoint = e.getLocationOnScreen();
                myRenderer.click( clickPoint.getX() -listLocatoin.getX()  -location.getX() , 
                        clickPoint.getY() - listLocatoin.getY() - location.getY() , index );
                myPoliciesList.repaint(bounds );
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        myPoliciesList = new javax.swing.JList();
        myLabel = new javax.swing.JLabel();

        jScrollPane1.setViewportView(myPoliciesList);

        myLabel.setLabelFor(myPoliciesList);
        org.openide.awt.Mnemonics.setLocalizedText(myLabel, org.openide.util.NbBundle.getMessage(PoliciesVisualPanel.class, "LBL_Policies")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(myLabel))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(myLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel myLabel;
    private javax.swing.JList myPoliciesList;
    // End of variables declaration//GEN-END:variables
    
    private final PoliciesListCellRenderer myRenderer ;
    
    private class PoliciesListCellRenderer extends JPanel implements ListCellRenderer {
        
        PoliciesListCellRenderer(){
            JList list = new JList(new Object[]{""});
            Component comp = new DefaultListCellRenderer().
                getListCellRendererComponent( list, "", 0, true, true);
            mySelectedBckgrnd = comp.getBackground();
            setOpaque( true );
            setLayout( new FlowLayout(FlowLayout.LEFT) );
            myCheckBox = new JCheckBox();
            myCheckBox.setBackground( Color.WHITE );
            add( myCheckBox );
            myLbl = new JLabel( );
            myLbl.setBackground( Color.WHITE );
            add( myLbl );
            setBackground( Color.WHITE );
            
            mySelected = new boolean[ myPoliciesList.getModel().getSize()];
        }

        /* (non-Javadoc)
         * @see javax.swing.ListCellRenderer#getListCellRendererComponent(javax.swing.JList, java.lang.Object, int, boolean, boolean)
         */
        @Override
        public Component getListCellRendererComponent( JList list,
                Object value, int index, boolean isSelected,
                boolean cellHasFocus )
        {
            myLbl.setText( value.toString() );
            if ( isSelected ){
                setBackground( mySelectedBckgrnd );
                myLbl.setBackground( mySelectedBckgrnd );
                myCheckBox.setBackground( mySelectedBckgrnd );
            }
            else {
                setBackground(Color.WHITE);
                myLbl.setBackground( Color.WHITE );
                myCheckBox.setBackground( Color.WHITE );
            }
            myCheckBox.setSelected(mySelected[index]);
            return this;
        }
        
        /* (non-Javadoc)
         * @see javax.swing.JComponent#paint(java.awt.Graphics)
         */
        @Override
        public void paint( Graphics g ) {
            super.paint(g);
            
            if ( myLocation == null ){
                myLocation = myCheckBox.getBounds();
            }
        }

        void click( double x, double y, int index) {
            if ( myLocation.contains( new Point((int)x, (int)y))){
                mySelected[index] =!mySelected[index];
            }
        }
        
        private JCheckBox myCheckBox;
        private JLabel myLbl;
        private Color mySelectedBckgrnd; 
        private Rectangle myLocation;
        private boolean[] mySelected; 
    }
}
