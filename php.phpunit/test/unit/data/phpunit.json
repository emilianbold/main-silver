{
    "event": "suiteStart",
    "suite": "",
    "tests": 1364
}{
    "event": "suiteStart",
    "suite": "small",
    "tests": 1254
}{
    "event": "suiteStart",
    "suite": "Framework_AssertTest",
    "tests": 652
}{
    "event": "testStart",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testFail"
}{
    "event": "test",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testFail",
    "status": "pass",
    "time": 0.00036096572875977,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertSplObjectStorageContainsObject"
}{
    "event": "test",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertSplObjectStorageContainsObject",
    "status": "pass",
    "time": 0.0011930465698242,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertArrayContainsObject"
}{
    "event": "test",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertArrayContainsObject",
    "status": "pass",
    "time": 0.00030899047851562,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertArrayContainsString"
}{
    "event": "test",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertArrayContainsString",
    "status": "pass",
    "time": 0.00027894973754883,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertArrayContainsNonObject"
}{
    "event": "test",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertArrayContainsNonObject",
    "status": "pass",
    "time": 0.00025415420532227,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertContainsOnlyInstancesOf"
}{
    "event": "test",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertContainsOnlyInstancesOf",
    "status": "pass",
    "time": 0.00075292587280273,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertArrayHasKeyThrowsExceptionForInvalidFirstArgument"
}{
    "event": "test",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertArrayHasKeyThrowsExceptionForInvalidFirstArgument",
    "status": "pass",
    "time": 0.0005640983581543,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertArrayHasKeyThrowsExceptionForInvalidSecondArgument"
}{
    "event": "test",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertArrayHasKeyThrowsExceptionForInvalidSecondArgument",
    "status": "pass",
    "time": 0.00029778480529785,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertArrayHasIntegerKey"
}{
    "event": "test",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertArrayHasIntegerKey",
    "status": "pass",
    "time": 0.00045013427734375,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertArraySubset"
}{
    "event": "test",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertArraySubset",
    "status": "pass",
    "time": 0.00074505805969238,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertArraySubsetWithDeepNestedArrays"
}{
    "event": "test",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertArraySubsetWithDeepNestedArrays",
    "status": "pass",
    "time": 0.00047612190246582,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertArraySubsetWithNoStrictCheckAndObjects"
}{
    "event": "test",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertArraySubsetWithNoStrictCheckAndObjects",
    "status": "pass",
    "time": 0.00018596649169922,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertArraySubsetWithStrictCheckAndObjects"
}{
    "event": "test",
    "suite": "Framework_AssertTest",
    "test": "Framework_AssertTest::testAssertArraySubsetWithStrictCheckAndObjects",
    "status": "pass",
    "time": 0.0003819465637207,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_AssertTest::testAssertArraySubsetRaisesExceptionForInvalidArguments",
    "tests": 2
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertArraySubsetRaisesExceptionForInvalidArguments",
    "test": "Framework_AssertTest::testAssertArraySubsetRaisesExceptionForInvalidArguments with data set #0 (false, array())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertArraySubsetRaisesExceptionForInvalidArguments",
    "test": "Framework_AssertTest::testAssertArraySubsetRaisesExceptionForInvalidArguments with data set #0 (false, array())",
    "status": "pass",
    "time": 0.00051999092102051,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertArraySubsetRaisesExceptionForInvalidArguments",
    "test": "Framework_AssertTest::testAssertArraySubsetRaisesExceptionForInvalidArguments with data set #1 (array(), false)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertArraySubsetRaisesExceptionForInvalidArguments",
    "test": "Framework_AssertTest::testAssertArraySubsetRaisesExceptionForInvalidArguments with data set #1 (array(), false)",
    "status": "pass",
    "time": 0.00035786628723145,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayNotHasKeyThrowsExceptionForInvalidFirstArgument"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayNotHasKeyThrowsExceptionForInvalidFirstArgument",
    "status": "pass",
    "time": 0.00033998489379883,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayNotHasKeyThrowsExceptionForInvalidSecondArgument"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayNotHasKeyThrowsExceptionForInvalidSecondArgument",
    "status": "pass",
    "time": 0.0004570484161377,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayNotHasIntegerKey"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayNotHasIntegerKey",
    "status": "pass",
    "time": 0.00068092346191406,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayHasStringKey"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayHasStringKey",
    "status": "pass",
    "time": 0.00033712387084961,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayNotHasStringKey"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayNotHasStringKey",
    "status": "pass",
    "time": 0.00033879280090332,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayHasKeyAcceptsArrayObjectValue"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayHasKeyAcceptsArrayObjectValue",
    "status": "pass",
    "time": 0.00018405914306641,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayHasKeyProperlyFailsWithArrayObjectValue"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayHasKeyProperlyFailsWithArrayObjectValue",
    "status": "pass",
    "time": 0.00032806396484375,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayHasKeyAcceptsArrayAccessValue"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayHasKeyAcceptsArrayAccessValue",
    "status": "pass",
    "time": 0.00031089782714844,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayHasKeyProperlyFailsWithArrayAccessValue"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayHasKeyProperlyFailsWithArrayAccessValue",
    "status": "pass",
    "time": 0.00032687187194824,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayNotHasKeyAcceptsArrayAccessValue"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayNotHasKeyAcceptsArrayAccessValue",
    "status": "pass",
    "time": 0.00016617774963379,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayNotHasKeyPropertlyFailsWithArrayAccessValue"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayNotHasKeyPropertlyFailsWithArrayAccessValue",
    "status": "pass",
    "time": 0.0003509521484375,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertContainsThrowsException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertContainsThrowsException",
    "status": "pass",
    "time": 0.00028800964355469,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertIteratorContainsObject"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertIteratorContainsObject",
    "status": "pass",
    "time": 0.00053596496582031,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertIteratorContainsString"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertIteratorContainsString",
    "status": "pass",
    "time": 0.00036907196044922,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringContainsString"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringContainsString",
    "status": "pass",
    "time": 0.0077030658721924,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotContainsThrowsException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotContainsThrowsException",
    "status": "pass",
    "time": 0.00053000450134277,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertSplObjectStorageNotContainsObject"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertSplObjectStorageNotContainsObject",
    "status": "pass",
    "time": 0.00059604644775391,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayNotContainsObject"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayNotContainsObject",
    "status": "pass",
    "time": 0.00061988830566406,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayNotContainsString"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayNotContainsString",
    "status": "pass",
    "time": 0.00041699409484863,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayNotContainsNonObject"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayNotContainsNonObject",
    "status": "pass",
    "time": 0.00033092498779297,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringNotContainsString"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringNotContainsString",
    "status": "pass",
    "time": 0.00042200088500977,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertContainsOnlyThrowsException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertContainsOnlyThrowsException",
    "status": "pass",
    "time": 0.00032901763916016,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotContainsOnlyThrowsException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotContainsOnlyThrowsException",
    "status": "pass",
    "time": 0.00026297569274902,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertContainsOnlyInstancesOfThrowsException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertContainsOnlyInstancesOfThrowsException",
    "status": "pass",
    "time": 0.00025105476379395,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayContainsOnlyIntegers"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayContainsOnlyIntegers",
    "status": "pass",
    "time": 0.00066590309143066,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayNotContainsOnlyIntegers"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayNotContainsOnlyIntegers",
    "status": "pass",
    "time": 0.00041890144348145,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayContainsOnlyStdClass"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayContainsOnlyStdClass",
    "status": "pass",
    "time": 0.00032782554626465,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayNotContainsOnlyStdClass"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertArrayNotContainsOnlyStdClass",
    "status": "pass",
    "time": 0.00037789344787598,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "tests": 47
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #0 ('a', 'A', 0, false, true)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #0 ('a', 'A', 0, false, true)",
    "status": "pass",
    "time": 0.0033719539642334,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #1 (array(1, 2), array(2, 1))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #1 (array(1, 2), array(2, 1))",
    "status": "pass",
    "time": 0.00036215782165527,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #2 (array(1), array('1'))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #2 (array(1), array('1'))",
    "status": "pass",
    "time": 0.00028800964355469,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #3 (array(3, 2, 1), array(2, 3, 1), 0, true)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #3 (array(3, 2, 1), array(2, 3, 1), 0, true)",
    "status": "pass",
    "time": 0.00065088272094727,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #4 (2.3, 2.5, 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #4 (2.3, 2.5, 0.5)",
    "status": "pass",
    "time": 0.0001990795135498,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #5 (array(2.3), array(2.5), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #5 (array(2.3), array(2.5), 0.5)",
    "status": "pass",
    "time": 0.00023794174194336,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #6 (array(array(2.3)), array(array(2.5)), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #6 (array(array(2.3)), array(array(2.5)), 0.5)",
    "status": "pass",
    "time": 0.00027012825012207,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #7 (Struct Object (...), Struct Object (...), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #7 (Struct Object (...), Struct Object (...), 0.5)",
    "status": "pass",
    "time": 0.00025296211242676,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #8 (array(Struct Object (...)), array(Struct Object (...)), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #8 (array(Struct Object (...)), array(Struct Object (...)), 0.5)",
    "status": "pass",
    "time": 0.00030112266540527,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #9 (1, 2, 1)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #9 (1, 2, 1)",
    "status": "pass",
    "time": 0.00015401840209961,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #10 (SampleClass Object (...), SampleClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #10 (SampleClass Object (...), SampleClass Object (...))",
    "status": "pass",
    "time": 0.00036716461181641,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #11 (Book Object (...), Book Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #11 (Book Object (...), Book Object (...))",
    "status": "pass",
    "time": 0.00042510032653809,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #12 (SplObjectStorage Object (...), SplObjectStorage Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #12 (SplObjectStorage Object (...), SplObjectStorage Object (...))",
    "status": "pass",
    "time": 0.00015115737915039,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #13 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #13 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00023913383483887,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #14 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #14 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00021100044250488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #15 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #15 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00021505355834961,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #16 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #16 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00062084197998047,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #17 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #17 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.0004878044128418,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #18 (DateTime Object (...), DateTime Object (...), 10)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #18 (DateTime Object (...), DateTime Object (...), 10)",
    "status": "pass",
    "time": 0.00017285346984863,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #19 (DateTime Object (...), DateTime Object (...), 65)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #19 (DateTime Object (...), DateTime Object (...), 65)",
    "status": "pass",
    "time": 0.00016617774963379,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #20 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #20 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00016283988952637,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #21 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #21 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00016212463378906,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #22 (DateTime Object (...), DateTime Object (...), 15)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #22 (DateTime Object (...), DateTime Object (...), 15)",
    "status": "pass",
    "time": 0.00016188621520996,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #23 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #23 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00015902519226074,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #24 (DateTime Object (...), DateTime Object (...), 100)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #24 (DateTime Object (...), DateTime Object (...), 100)",
    "status": "pass",
    "time": 0.00016093254089355,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #25 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #25 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00015902519226074,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #26 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #26 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00015687942504883,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #27 (0, '0')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #27 (0, '0')",
    "status": "pass",
    "time": 0.00028395652770996,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #28 ('0', 0)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #28 ('0', 0)",
    "status": "pass",
    "time": 0.0001990795135498,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #29 (2.3, '2.3')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #29 (2.3, '2.3')",
    "status": "pass",
    "time": 0.00018405914306641,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #30 ('2.3', 2.3)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #30 ('2.3', 2.3)",
    "status": "pass",
    "time": 0.00018692016601562,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #31 ('0.33333333333333', 0.33333333333333)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #31 ('0.33333333333333', 0.33333333333333)",
    "status": "pass",
    "time": 0.00018787384033203,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #32 (0.33333333333333, '0.33333333333333')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #32 (0.33333333333333, '0.33333333333333')",
    "status": "pass",
    "time": 0.00021505355834961,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #33 ('string representation', ClassWithToString Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #33 ('string representation', ClassWithToString Object ())",
    "status": "pass",
    "time": 0.00045609474182129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #34 (ClassWithToString Object (), 'string representation')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #34 (ClassWithToString Object (), 'string representation')",
    "status": "pass",
    "time": 0.00036811828613281,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #35 (null, null)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #35 (null, null)",
    "status": "pass",
    "time": 0.00015497207641602,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #36 ('a', 'a')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #36 ('a', 'a')",
    "status": "pass",
    "time": 0.00014591217041016,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #37 (0, 0)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #37 (0, 0)",
    "status": "pass",
    "time": 0.00013494491577148,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #38 (2.3, 2.3)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #38 (2.3, 2.3)",
    "status": "pass",
    "time": 0.00013399124145508,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #39 (0.33333333333333, 0.33333333333333)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #39 (0.33333333333333, 0.33333333333333)",
    "status": "pass",
    "time": 0.00018405914306641,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #40 (-INF, -INF)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #40 (-INF, -INF)",
    "status": "pass",
    "time": 0.00013399124145508,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #41 (array(), array())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #41 (array(), array())",
    "status": "pass",
    "time": 0.00014710426330566,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #42 (array(1), array(1))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #42 (array(1), array(1))",
    "status": "pass",
    "time": 0.00013589859008789,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #43 (array(null), array(null))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #43 (array(null), array(null))",
    "status": "pass",
    "time": 0.00025105476379395,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #44 (array('a', array(1, 2)), array('a', array(1, 2)))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #44 (array('a', array(1, 2)), array('a', array(1, 2)))",
    "status": "pass",
    "time": 0.00044012069702148,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #45 (SampleClass Object (...), SampleClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #45 (SampleClass Object (...), SampleClass Object (...))",
    "status": "pass",
    "time": 0.00025606155395508,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #46 (resource(49) of type (stream), resource(49) of type (stream))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertEqualsSucceeds with data set #46 (resource(49) of type (stream), resource(49) of type (stream))",
    "status": "pass",
    "time": 0.00016593933105469,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "tests": 48
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #0 ('a', 'b')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #0 ('a', 'b')",
    "status": "pass",
    "time": 0.00075817108154297,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #1 ('a', 'A')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #1 ('a', 'A')",
    "status": "pass",
    "time": 0.00042009353637695,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #2 ('9E6666666', '9E7777777')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #2 ('9E6666666', '9E7777777')",
    "status": "pass",
    "time": 0.00039410591125488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #3 (1, 2)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #3 (1, 2)",
    "status": "pass",
    "time": 0.00039815902709961,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #4 (2, 1)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #4 (2, 1)",
    "status": "pass",
    "time": 0.00037717819213867,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #5 (2.3, 4.2)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #5 (2.3, 4.2)",
    "status": "pass",
    "time": 0.00039505958557129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #6 (2.3, 4.2, 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #6 (2.3, 4.2, 0.5)",
    "status": "pass",
    "time": 0.00040197372436523,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #7 (array(2.3), array(4.2), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #7 (array(2.3), array(4.2), 0.5)",
    "status": "pass",
    "time": 0.00053811073303223,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #8 (array(array(2.3)), array(array(4.2)), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #8 (array(array(2.3)), array(array(4.2)), 0.5)",
    "status": "pass",
    "time": 0.00069499015808105,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #9 (Struct Object (...), Struct Object (...), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #9 (Struct Object (...), Struct Object (...), 0.5)",
    "status": "pass",
    "time": 0.00076699256896973,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #10 (array(Struct Object (...)), array(Struct Object (...)), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #10 (array(Struct Object (...)), array(Struct Object (...)), 0.5)",
    "status": "pass",
    "time": 0.00091886520385742,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #11 (NAN, NAN)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #11 (NAN, NAN)",
    "status": "pass",
    "time": 0.00046992301940918,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #12 (array(), array(1))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #12 (array(), array(1))",
    "status": "pass",
    "time": 0.00048995018005371,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #13 (array(1), array())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #13 (array(1), array())",
    "status": "pass",
    "time": 0.0004880428314209,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #14 (array(null), array())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #14 (array(null), array())",
    "status": "pass",
    "time": 0.00046706199645996,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #15 (array(1, 2), array(1, 3))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #15 (array(1, 2), array(1, 3))",
    "status": "pass",
    "time": 0.00068211555480957,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #16 (array('a', array(1, 2)), array('a', array(2, 1)))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #16 (array('a', array(1, 2)), array('a', array(2, 1)))",
    "status": "pass",
    "time": 0.0011930465698242,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #17 (SampleClass Object (...), SampleClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #17 (SampleClass Object (...), SampleClass Object (...))",
    "status": "pass",
    "time": 0.0010859966278076,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #18 (SampleClass Object (...), SampleClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #18 (SampleClass Object (...), SampleClass Object (...))",
    "status": "pass",
    "time": 0.0010321140289307,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #19 (Book Object (...), Book Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #19 (Book Object (...), Book Object (...))",
    "status": "pass",
    "time": 0.00098609924316406,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #20 (Book Object (...), stdClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #20 (Book Object (...), stdClass Object (...))",
    "status": "pass",
    "time": 0.0005500316619873,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #21 (resource(50) of type (stream), resource(51) of type (stream))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #21 (resource(50) of type (stream), resource(51) of type (stream))",
    "status": "pass",
    "time": 0.0005040168762207,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #22 (SplObjectStorage Object (...), SplObjectStorage Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #22 (SplObjectStorage Object (...), SplObjectStorage Object (...))",
    "status": "pass",
    "time": 0.00079894065856934,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #23 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #23 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00047707557678223,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #24 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #24 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00046205520629883,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #25 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #25 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00052213668823242,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #26 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #26 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00064802169799805,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #27 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #27 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.0022590160369873,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #28 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #28 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00046992301940918,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #29 (DateTime Object (...), DateTime Object (...), 3500)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #29 (DateTime Object (...), DateTime Object (...), 3500)",
    "status": "pass",
    "time": 0.00044608116149902,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #30 (DateTime Object (...), DateTime Object (...), 3500)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #30 (DateTime Object (...), DateTime Object (...), 3500)",
    "status": "pass",
    "time": 0.00042200088500977,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #31 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #31 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00041294097900391,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #32 (DateTime Object (...), DateTime Object (...), 43200)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #32 (DateTime Object (...), DateTime Object (...), 43200)",
    "status": "pass",
    "time": 0.00043702125549316,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #33 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #33 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00041699409484863,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #34 (DateTime Object (...), DateTime Object (...), 3500)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #34 (DateTime Object (...), DateTime Object (...), 3500)",
    "status": "pass",
    "time": 0.00040292739868164,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #35 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #35 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.0003960132598877,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #36 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #36 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00040602684020996,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #37 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #37 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00039291381835938,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #38 (SampleClass Object (...), false)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #38 (SampleClass Object (...), false)",
    "status": "pass",
    "time": 0.00045895576477051,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #39 (false, SampleClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #39 (false, SampleClass Object (...))",
    "status": "pass",
    "time": 0.00043892860412598,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #40 (array(1, 2), false)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #40 (array(1, 2), false)",
    "status": "pass",
    "time": 0.00043916702270508,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #41 (false, array(1, 2))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #41 (false, array(1, 2))",
    "status": "pass",
    "time": 0.00041794776916504,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #42 (array(), stdClass Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #42 (array(), stdClass Object ())",
    "status": "pass",
    "time": 0.00042390823364258,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #43 (stdClass Object (), array())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #43 (stdClass Object (), array())",
    "status": "pass",
    "time": 0.0004119873046875,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #44 (0, 'Foobar')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #44 (0, 'Foobar')",
    "status": "pass",
    "time": 0.00044894218444824,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #45 ('Foobar', 0)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #45 ('Foobar', 0)",
    "status": "pass",
    "time": 0.00042510032653809,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #46 (3, NAN)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #46 (3, NAN)",
    "status": "pass",
    "time": 0.00042104721069336,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #47 (NAN, 3)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertEqualsFails",
    "test": "Framework_AssertTest::testAssertEqualsFails with data set #47 (NAN, 3)",
    "status": "pass",
    "time": 0.00042295455932617,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "tests": 48
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #0 ('a', 'b')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #0 ('a', 'b')",
    "status": "pass",
    "time": 0.00036215782165527,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #1 ('a', 'A')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #1 ('a', 'A')",
    "status": "pass",
    "time": 0.00062203407287598,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #2 ('9E6666666', '9E7777777')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #2 ('9E6666666', '9E7777777')",
    "status": "pass",
    "time": 0.00063180923461914,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #3 (1, 2)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #3 (1, 2)",
    "status": "pass",
    "time": 0.00061798095703125,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #4 (2, 1)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #4 (2, 1)",
    "status": "pass",
    "time": 0.00058388710021973,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #5 (2.3, 4.2)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #5 (2.3, 4.2)",
    "status": "pass",
    "time": 0.00065183639526367,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #6 (2.3, 4.2, 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #6 (2.3, 4.2, 0.5)",
    "status": "pass",
    "time": 0.00046992301940918,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #7 (array(2.3), array(4.2), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #7 (array(2.3), array(4.2), 0.5)",
    "status": "pass",
    "time": 0.0009300708770752,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #8 (array(array(2.3)), array(array(4.2)), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #8 (array(array(2.3)), array(array(4.2)), 0.5)",
    "status": "pass",
    "time": 0.00079512596130371,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #9 (Struct Object (...), Struct Object (...), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #9 (Struct Object (...), Struct Object (...), 0.5)",
    "status": "pass",
    "time": 0.00071096420288086,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #10 (array(Struct Object (...)), array(Struct Object (...)), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #10 (array(Struct Object (...)), array(Struct Object (...)), 0.5)",
    "status": "pass",
    "time": 0.00088977813720703,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #11 (NAN, NAN)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #11 (NAN, NAN)",
    "status": "pass",
    "time": 0.00046706199645996,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #12 (array(), array(1))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #12 (array(), array(1))",
    "status": "pass",
    "time": 0.00080299377441406,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #13 (array(1), array())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #13 (array(1), array())",
    "status": "pass",
    "time": 0.00058698654174805,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #14 (array(null), array())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #14 (array(null), array())",
    "status": "pass",
    "time": 0.00054407119750977,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #15 (array(1, 2), array(1, 3))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #15 (array(1, 2), array(1, 3))",
    "status": "pass",
    "time": 0.0006561279296875,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #16 (array('a', array(1, 2)), array('a', array(2, 1)))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #16 (array('a', array(1, 2)), array('a', array(2, 1)))",
    "status": "pass",
    "time": 0.0008997917175293,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #17 (SampleClass Object (...), SampleClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #17 (SampleClass Object (...), SampleClass Object (...))",
    "status": "pass",
    "time": 0.0009760856628418,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #18 (SampleClass Object (...), SampleClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #18 (SampleClass Object (...), SampleClass Object (...))",
    "status": "pass",
    "time": 0.00094008445739746,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #19 (Book Object (...), Book Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #19 (Book Object (...), Book Object (...))",
    "status": "pass",
    "time": 0.00083780288696289,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #20 (Book Object (...), stdClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #20 (Book Object (...), stdClass Object (...))",
    "status": "pass",
    "time": 0.00041890144348145,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #21 (resource(52) of type (stream), resource(53) of type (stream))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #21 (resource(52) of type (stream), resource(53) of type (stream))",
    "status": "pass",
    "time": 0.00025606155395508,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #22 (SplObjectStorage Object (...), SplObjectStorage Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #22 (SplObjectStorage Object (...), SplObjectStorage Object (...))",
    "status": "pass",
    "time": 0.00062704086303711,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #23 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #23 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00036001205444336,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #24 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #24 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00032281875610352,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #25 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #25 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00031399726867676,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #26 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #26 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00034689903259277,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #27 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #27 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00040292739868164,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #28 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #28 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00031113624572754,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #29 (DateTime Object (...), DateTime Object (...), 3500)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #29 (DateTime Object (...), DateTime Object (...), 3500)",
    "status": "pass",
    "time": 0.00029206275939941,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #30 (DateTime Object (...), DateTime Object (...), 3500)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #30 (DateTime Object (...), DateTime Object (...), 3500)",
    "status": "pass",
    "time": 0.00028419494628906,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #31 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #31 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00028896331787109,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #32 (DateTime Object (...), DateTime Object (...), 43200)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #32 (DateTime Object (...), DateTime Object (...), 43200)",
    "status": "pass",
    "time": 0.00029897689819336,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #33 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #33 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00029397010803223,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #34 (DateTime Object (...), DateTime Object (...), 3500)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #34 (DateTime Object (...), DateTime Object (...), 3500)",
    "status": "pass",
    "time": 0.00027894973754883,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #35 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #35 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00031900405883789,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #36 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #36 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00029397010803223,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #37 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #37 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00043702125549316,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #38 (SampleClass Object (...), false)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #38 (SampleClass Object (...), false)",
    "status": "pass",
    "time": 0.00037312507629395,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #39 (false, SampleClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #39 (false, SampleClass Object (...))",
    "status": "pass",
    "time": 0.00038290023803711,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #40 (array(1, 2), false)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #40 (array(1, 2), false)",
    "status": "pass",
    "time": 0.00034093856811523,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #41 (false, array(1, 2))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #41 (false, array(1, 2))",
    "status": "pass",
    "time": 0.00033807754516602,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #42 (array(), stdClass Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #42 (array(), stdClass Object ())",
    "status": "pass",
    "time": 0.00036001205444336,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #43 (stdClass Object (), array())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #43 (stdClass Object (), array())",
    "status": "pass",
    "time": 0.00036406517028809,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #44 (0, 'Foobar')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #44 (0, 'Foobar')",
    "status": "pass",
    "time": 0.00040698051452637,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #45 ('Foobar', 0)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #45 ('Foobar', 0)",
    "status": "pass",
    "time": 0.0015640258789062,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #46 (3, NAN)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #46 (3, NAN)",
    "status": "pass",
    "time": 0.00033092498779297,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #47 (NAN, 3)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsSucceeds",
    "test": "Framework_AssertTest::testAssertNotEqualsSucceeds with data set #47 (NAN, 3)",
    "status": "pass",
    "time": 0.00028896331787109,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "tests": 47
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #0 ('a', 'A', 0, false, true)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #0 ('a', 'A', 0, false, true)",
    "status": "pass",
    "time": 0.0003211498260498,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #1 (array(1, 2), array(2, 1))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #1 (array(1, 2), array(2, 1))",
    "status": "pass",
    "time": 0.00056290626525879,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #2 (array(1), array('1'))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #2 (array(1), array('1'))",
    "status": "pass",
    "time": 0.00041580200195312,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #3 (array(3, 2, 1), array(2, 3, 1), 0, true)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #3 (array(3, 2, 1), array(2, 3, 1), 0, true)",
    "status": "pass",
    "time": 0.00058698654174805,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #4 (2.3, 2.5, 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #4 (2.3, 2.5, 0.5)",
    "status": "pass",
    "time": 0.00028300285339355,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #5 (array(2.3), array(2.5), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #5 (array(2.3), array(2.5), 0.5)",
    "status": "pass",
    "time": 0.00040411949157715,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #6 (array(array(2.3)), array(array(2.5)), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #6 (array(array(2.3)), array(array(2.5)), 0.5)",
    "status": "pass",
    "time": 0.00048708915710449,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #7 (Struct Object (...), Struct Object (...), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #7 (Struct Object (...), Struct Object (...), 0.5)",
    "status": "pass",
    "time": 0.00043702125549316,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #8 (array(Struct Object (...)), array(Struct Object (...)), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #8 (array(Struct Object (...)), array(Struct Object (...)), 0.5)",
    "status": "pass",
    "time": 0.00053286552429199,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #9 (1, 2, 1)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #9 (1, 2, 1)",
    "status": "pass",
    "time": 0.00042200088500977,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #10 (SampleClass Object (...), SampleClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #10 (SampleClass Object (...), SampleClass Object (...))",
    "status": "pass",
    "time": 0.00068211555480957,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #11 (Book Object (...), Book Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #11 (Book Object (...), Book Object (...))",
    "status": "pass",
    "time": 0.00076603889465332,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #12 (SplObjectStorage Object (...), SplObjectStorage Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #12 (SplObjectStorage Object (...), SplObjectStorage Object (...))",
    "status": "pass",
    "time": 0.00058484077453613,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #13 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #13 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00053215026855469,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #14 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #14 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00056099891662598,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #15 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #15 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00076198577880859,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #16 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #16 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.0004270076751709,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #17 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #17 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00048995018005371,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #18 (DateTime Object (...), DateTime Object (...), 10)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #18 (DateTime Object (...), DateTime Object (...), 10)",
    "status": "pass",
    "time": 0.00045514106750488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #19 (DateTime Object (...), DateTime Object (...), 65)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #19 (DateTime Object (...), DateTime Object (...), 65)",
    "status": "pass",
    "time": 0.00045585632324219,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #20 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #20 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00041699409484863,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #21 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #21 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00042605400085449,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #22 (DateTime Object (...), DateTime Object (...), 15)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #22 (DateTime Object (...), DateTime Object (...), 15)",
    "status": "pass",
    "time": 0.00045394897460938,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #23 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #23 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00040888786315918,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #24 (DateTime Object (...), DateTime Object (...), 100)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #24 (DateTime Object (...), DateTime Object (...), 100)",
    "status": "pass",
    "time": 0.00043320655822754,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #25 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #25 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00094890594482422,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #26 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #26 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00055789947509766,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #27 (0, '0')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #27 (0, '0')",
    "status": "pass",
    "time": 0.0004878044128418,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #28 ('0', 0)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #28 ('0', 0)",
    "status": "pass",
    "time": 0.00033092498779297,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #29 (2.3, '2.3')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #29 (2.3, '2.3')",
    "status": "pass",
    "time": 0.00031208992004395,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #30 ('2.3', 2.3)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #30 ('2.3', 2.3)",
    "status": "pass",
    "time": 0.00029706954956055,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #31 ('0.33333333333333', 0.33333333333333)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #31 ('0.33333333333333', 0.33333333333333)",
    "status": "pass",
    "time": 0.00030899047851562,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #32 (0.33333333333333, '0.33333333333333')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #32 (0.33333333333333, '0.33333333333333')",
    "status": "pass",
    "time": 0.00037097930908203,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #33 ('string representation', ClassWithToString Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #33 ('string representation', ClassWithToString Object ())",
    "status": "pass",
    "time": 0.0012609958648682,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #34 (ClassWithToString Object (), 'string representation')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #34 (ClassWithToString Object (), 'string representation')",
    "status": "pass",
    "time": 0.00037097930908203,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #35 (null, null)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #35 (null, null)",
    "status": "pass",
    "time": 0.00029587745666504,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #36 ('a', 'a')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #36 ('a', 'a')",
    "status": "pass",
    "time": 0.00025391578674316,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #37 (0, 0)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #37 (0, 0)",
    "status": "pass",
    "time": 0.00025391578674316,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #38 (2.3, 2.3)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #38 (2.3, 2.3)",
    "status": "pass",
    "time": 0.00026607513427734,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #39 (0.33333333333333, 0.33333333333333)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #39 (0.33333333333333, 0.33333333333333)",
    "status": "pass",
    "time": 0.00029397010803223,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #40 (-INF, -INF)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #40 (-INF, -INF)",
    "status": "pass",
    "time": 0.00026607513427734,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #41 (array(), array())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #41 (array(), array())",
    "status": "pass",
    "time": 0.00028610229492188,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #42 (array(1), array(1))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #42 (array(1), array(1))",
    "status": "pass",
    "time": 0.00030994415283203,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #43 (array(null), array(null))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #43 (array(null), array(null))",
    "status": "pass",
    "time": 0.00030183792114258,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #44 (array('a', array(1, 2)), array('a', array(1, 2)))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #44 (array('a', array(1, 2)), array('a', array(1, 2)))",
    "status": "pass",
    "time": 0.00042009353637695,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #45 (SampleClass Object (...), SampleClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #45 (SampleClass Object (...), SampleClass Object (...))",
    "status": "pass",
    "time": 0.00037598609924316,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #46 (resource(54) of type (stream), resource(54) of type (stream))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotEqualsFails",
    "test": "Framework_AssertTest::testAssertNotEqualsFails with data set #46 (resource(54) of type (stream), resource(54) of type (stream))",
    "status": "pass",
    "time": 0.00023603439331055,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "tests": 12
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #0 (null, null)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #0 (null, null)",
    "status": "pass",
    "time": 0.00033783912658691,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #1 ('a', 'a')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #1 ('a', 'a')",
    "status": "pass",
    "time": 0.0001220703125,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #2 (0, 0)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #2 (0, 0)",
    "status": "pass",
    "time": 0.00011992454528809,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #3 (2.3, 2.3)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #3 (2.3, 2.3)",
    "status": "pass",
    "time": 0.00011801719665527,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #4 (0.33333333333333, 0.33333333333333)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #4 (0.33333333333333, 0.33333333333333)",
    "status": "pass",
    "time": 0.00011301040649414,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #5 (-INF, -INF)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #5 (-INF, -INF)",
    "status": "pass",
    "time": 0.00010895729064941,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #6 (array(), array())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #6 (array(), array())",
    "status": "pass",
    "time": 0.00011205673217773,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #7 (array(1), array(1))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #7 (array(1), array(1))",
    "status": "pass",
    "time": 0.00011491775512695,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #8 (array(null), array(null))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #8 (array(null), array(null))",
    "status": "pass",
    "time": 0.00016188621520996,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #9 (array('a', array(1, 2)), array('a', array(1, 2)))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #9 (array('a', array(1, 2)), array('a', array(1, 2)))",
    "status": "pass",
    "time": 0.00013303756713867,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #10 (SampleClass Object (...), SampleClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #10 (SampleClass Object (...), SampleClass Object (...))",
    "status": "pass",
    "time": 0.00011682510375977,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #11 (resource(55) of type (stream), resource(55) of type (stream))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameSucceeds",
    "test": "Framework_AssertTest::testAssertSameSucceeds with data set #11 (resource(55) of type (stream), resource(55) of type (stream))",
    "status": "pass",
    "time": 0.00011491775512695,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "tests": 83
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #0 ('a', 'b')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #0 ('a', 'b')",
    "status": "pass",
    "time": 0.00027704238891602,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #1 ('a', 'A')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #1 ('a', 'A')",
    "status": "pass",
    "time": 0.00023484230041504,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #2 ('9E6666666', '9E7777777')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #2 ('9E6666666', '9E7777777')",
    "status": "pass",
    "time": 0.00021505355834961,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #3 (1, 2)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #3 (1, 2)",
    "status": "pass",
    "time": 0.00025200843811035,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #4 (2, 1)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #4 (2, 1)",
    "status": "pass",
    "time": 0.00021505355834961,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #5 (2.3, 4.2)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #5 (2.3, 4.2)",
    "status": "pass",
    "time": 0.00023508071899414,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #6 (2.3, 4.2, 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #6 (2.3, 4.2, 0.5)",
    "status": "pass",
    "time": 0.00024294853210449,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #7 (array(2.3), array(4.2), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #7 (array(2.3), array(4.2), 0.5)",
    "status": "pass",
    "time": 0.00029301643371582,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #8 (array(array(2.3)), array(array(4.2)), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #8 (array(array(2.3)), array(array(4.2)), 0.5)",
    "status": "pass",
    "time": 0.00034594535827637,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #9 (Struct Object (...), Struct Object (...), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #9 (Struct Object (...), Struct Object (...), 0.5)",
    "status": "pass",
    "time": 0.00020098686218262,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #10 (array(Struct Object (...)), array(Struct Object (...)), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #10 (array(Struct Object (...)), array(Struct Object (...)), 0.5)",
    "status": "pass",
    "time": 0.00036382675170898,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #11 (NAN, NAN)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #11 (NAN, NAN)",
    "status": "pass",
    "time": 0.0002281665802002,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #12 (array(), array(1))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #12 (array(), array(1))",
    "status": "pass",
    "time": 0.00056719779968262,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #13 (array(1), array())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #13 (array(1), array())",
    "status": "pass",
    "time": 0.0012979507446289,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #14 (array(null), array())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #14 (array(null), array())",
    "status": "pass",
    "time": 0.00038790702819824,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #15 (array(1, 2), array(1, 3))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #15 (array(1, 2), array(1, 3))",
    "status": "pass",
    "time": 0.00037980079650879,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #16 (array('a', array(1, 2)), array('a', array(2, 1)))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #16 (array('a', array(1, 2)), array('a', array(2, 1)))",
    "status": "pass",
    "time": 0.00043296813964844,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #17 (SampleClass Object (...), SampleClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #17 (SampleClass Object (...), SampleClass Object (...))",
    "status": "pass",
    "time": 0.00023293495178223,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #18 (SampleClass Object (...), SampleClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #18 (SampleClass Object (...), SampleClass Object (...))",
    "status": "pass",
    "time": 0.00022602081298828,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #19 (Book Object (...), Book Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #19 (Book Object (...), Book Object (...))",
    "status": "pass",
    "time": 0.00022506713867188,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #20 (Book Object (...), stdClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #20 (Book Object (...), stdClass Object (...))",
    "status": "pass",
    "time": 0.00032901763916016,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #21 (resource(56) of type (stream), resource(57) of type (stream))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #21 (resource(56) of type (stream), resource(57) of type (stream))",
    "status": "pass",
    "time": 0.0011610984802246,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #22 (SplObjectStorage Object (...), SplObjectStorage Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #22 (SplObjectStorage Object (...), SplObjectStorage Object (...))",
    "status": "pass",
    "time": 0.00031304359436035,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #23 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #23 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00024795532226562,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #24 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #24 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00023317337036133,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #25 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #25 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00023412704467773,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #26 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #26 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00022602081298828,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #27 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #27 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00024294853210449,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #28 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #28 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00022196769714355,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #29 (DateTime Object (...), DateTime Object (...), 3500)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #29 (DateTime Object (...), DateTime Object (...), 3500)",
    "status": "pass",
    "time": 0.00022387504577637,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #30 (DateTime Object (...), DateTime Object (...), 3500)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #30 (DateTime Object (...), DateTime Object (...), 3500)",
    "status": "pass",
    "time": 0.00022196769714355,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #31 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #31 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00021982192993164,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #32 (DateTime Object (...), DateTime Object (...), 43200)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #32 (DateTime Object (...), DateTime Object (...), 43200)",
    "status": "pass",
    "time": 0.0002291202545166,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #33 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #33 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00025010108947754,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #34 (DateTime Object (...), DateTime Object (...), 3500)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #34 (DateTime Object (...), DateTime Object (...), 3500)",
    "status": "pass",
    "time": 0.00026416778564453,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #35 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #35 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00023794174194336,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #36 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #36 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.0002291202545166,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #37 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #37 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00024199485778809,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #38 (SampleClass Object (...), false)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #38 (SampleClass Object (...), false)",
    "status": "pass",
    "time": 0.00023388862609863,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #39 (false, SampleClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #39 (false, SampleClass Object (...))",
    "status": "pass",
    "time": 0.00033020973205566,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #40 (array(1, 2), false)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #40 (array(1, 2), false)",
    "status": "pass",
    "time": 0.00030684471130371,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #41 (false, array(1, 2))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #41 (false, array(1, 2))",
    "status": "pass",
    "time": 0.00031805038452148,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #42 (array(), stdClass Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #42 (array(), stdClass Object ())",
    "status": "pass",
    "time": 0.00027894973754883,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #43 (stdClass Object (), array())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #43 (stdClass Object (), array())",
    "status": "pass",
    "time": 0.00024986267089844,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #44 (0, 'Foobar')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #44 (0, 'Foobar')",
    "status": "pass",
    "time": 0.00023198127746582,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #45 ('Foobar', 0)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #45 ('Foobar', 0)",
    "status": "pass",
    "time": 0.00023198127746582,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #46 (3, NAN)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #46 (3, NAN)",
    "status": "pass",
    "time": 0.00023293495178223,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #47 (NAN, 3)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #47 (NAN, 3)",
    "status": "pass",
    "time": 0.00023007392883301,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #48 ('a', 'A', 0, false, true)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #48 ('a', 'A', 0, false, true)",
    "status": "pass",
    "time": 0.00025010108947754,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #49 (array(1, 2), array(2, 1))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #49 (array(1, 2), array(2, 1))",
    "status": "pass",
    "time": 0.00032210350036621,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #50 (array(1), array('1'))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #50 (array(1), array('1'))",
    "status": "pass",
    "time": 0.00029611587524414,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #51 (array(3, 2, 1), array(2, 3, 1), 0, true)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #51 (array(3, 2, 1), array(2, 3, 1), 0, true)",
    "status": "pass",
    "time": 0.00034117698669434,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #52 (2.3, 2.5, 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #52 (2.3, 2.5, 0.5)",
    "status": "pass",
    "time": 0.00026798248291016,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #53 (array(2.3), array(2.5), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #53 (array(2.3), array(2.5), 0.5)",
    "status": "pass",
    "time": 0.00029683113098145,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #54 (array(array(2.3)), array(array(2.5)), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #54 (array(array(2.3)), array(array(2.5)), 0.5)",
    "status": "pass",
    "time": 0.0004880428314209,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #55 (Struct Object (...), Struct Object (...), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #55 (Struct Object (...), Struct Object (...), 0.5)",
    "status": "pass",
    "time": 0.0002291202545166,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #56 (array(Struct Object (...)), array(Struct Object (...)), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #56 (array(Struct Object (...)), array(Struct Object (...)), 0.5)",
    "status": "pass",
    "time": 0.0003960132598877,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #57 (1, 2, 1)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #57 (1, 2, 1)",
    "status": "pass",
    "time": 0.00024318695068359,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #58 (SampleClass Object (...), SampleClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #58 (SampleClass Object (...), SampleClass Object (...))",
    "status": "pass",
    "time": 0.00024509429931641,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #59 (Book Object (...), Book Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #59 (Book Object (...), Book Object (...))",
    "status": "pass",
    "time": 0.00022983551025391,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #60 (SplObjectStorage Object (...), SplObjectStorage Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #60 (SplObjectStorage Object (...), SplObjectStorage Object (...))",
    "status": "pass",
    "time": 0.00022196769714355,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #61 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #61 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.0002138614654541,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #62 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #62 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00021100044250488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #63 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #63 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00033998489379883,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #64 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #64 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00039005279541016,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #65 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #65 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.0011370182037354,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #66 (DateTime Object (...), DateTime Object (...), 10)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #66 (DateTime Object (...), DateTime Object (...), 10)",
    "status": "pass",
    "time": 0.00047993659973145,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #67 (DateTime Object (...), DateTime Object (...), 65)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #67 (DateTime Object (...), DateTime Object (...), 65)",
    "status": "pass",
    "time": 0.00047397613525391,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #68 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #68 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00037908554077148,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #69 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #69 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00028491020202637,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #70 (DateTime Object (...), DateTime Object (...), 15)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #70 (DateTime Object (...), DateTime Object (...), 15)",
    "status": "pass",
    "time": 0.00026392936706543,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #71 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #71 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00024104118347168,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #72 (DateTime Object (...), DateTime Object (...), 100)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #72 (DateTime Object (...), DateTime Object (...), 100)",
    "status": "pass",
    "time": 0.00023078918457031,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #73 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #73 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00023102760314941,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #74 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #74 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00022006034851074,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #75 (0, '0')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #75 (0, '0')",
    "status": "pass",
    "time": 0.00025200843811035,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #76 ('0', 0)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #76 ('0', 0)",
    "status": "pass",
    "time": 0.00023794174194336,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #77 (2.3, '2.3')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #77 (2.3, '2.3')",
    "status": "pass",
    "time": 0.00024700164794922,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #78 ('2.3', 2.3)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #78 ('2.3', 2.3)",
    "status": "pass",
    "time": 0.00027298927307129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #79 ('0.33333333333333', 0.33333333333333)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #79 ('0.33333333333333', 0.33333333333333)",
    "status": "pass",
    "time": 0.00029993057250977,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #80 (0.33333333333333, '0.33333333333333')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #80 (0.33333333333333, '0.33333333333333')",
    "status": "pass",
    "time": 0.00025510787963867,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #81 ('string representation', ClassWithToString Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #81 ('string representation', ClassWithToString Object ())",
    "status": "pass",
    "time": 0.00026392936706543,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #82 (ClassWithToString Object (), 'string representation')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertSameFails",
    "test": "Framework_AssertTest::testAssertSameFails with data set #82 (ClassWithToString Object (), 'string representation')",
    "status": "pass",
    "time": 0.00022792816162109,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "tests": 83
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #0 ('a', 'b')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #0 ('a', 'b')",
    "status": "pass",
    "time": 0.0001380443572998,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #1 ('a', 'A')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #1 ('a', 'A')",
    "status": "pass",
    "time": 0.00019383430480957,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #2 ('9E6666666', '9E7777777')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #2 ('9E6666666', '9E7777777')",
    "status": "pass",
    "time": 0.00021195411682129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #3 (1, 2)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #3 (1, 2)",
    "status": "pass",
    "time": 0.00021100044250488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #4 (2, 1)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #4 (2, 1)",
    "status": "pass",
    "time": 0.00017404556274414,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #5 (2.3, 4.2)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #5 (2.3, 4.2)",
    "status": "pass",
    "time": 0.00017404556274414,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #6 (2.3, 4.2, 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #6 (2.3, 4.2, 0.5)",
    "status": "pass",
    "time": 0.00016283988952637,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #7 (array(2.3), array(4.2), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #7 (array(2.3), array(4.2), 0.5)",
    "status": "pass",
    "time": 0.00018596649169922,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #8 (array(array(2.3)), array(array(4.2)), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #8 (array(array(2.3)), array(array(4.2)), 0.5)",
    "status": "pass",
    "time": 0.00017309188842773,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #9 (Struct Object (...), Struct Object (...), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #9 (Struct Object (...), Struct Object (...), 0.5)",
    "status": "pass",
    "time": 0.00015902519226074,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #10 (array(Struct Object (...)), array(Struct Object (...)), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #10 (array(Struct Object (...)), array(Struct Object (...)), 0.5)",
    "status": "pass",
    "time": 0.00015997886657715,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #11 (NAN, NAN)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #11 (NAN, NAN)",
    "status": "pass",
    "time": 0.00014996528625488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #12 (array(), array(1))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #12 (array(), array(1))",
    "status": "pass",
    "time": 0.00015115737915039,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #13 (array(1), array())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #13 (array(1), array())",
    "status": "pass",
    "time": 0.00014805793762207,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #14 (array(null), array())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #14 (array(null), array())",
    "status": "pass",
    "time": 0.00016093254089355,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #15 (array(1, 2), array(1, 3))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #15 (array(1, 2), array(1, 3))",
    "status": "pass",
    "time": 0.00015521049499512,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #16 (array('a', array(1, 2)), array('a', array(2, 1)))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #16 (array('a', array(1, 2)), array('a', array(2, 1)))",
    "status": "pass",
    "time": 0.00015783309936523,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #17 (SampleClass Object (...), SampleClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #17 (SampleClass Object (...), SampleClass Object (...))",
    "status": "pass",
    "time": 0.00015091896057129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #18 (SampleClass Object (...), SampleClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #18 (SampleClass Object (...), SampleClass Object (...))",
    "status": "pass",
    "time": 0.00020289421081543,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #19 (Book Object (...), Book Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #19 (Book Object (...), Book Object (...))",
    "status": "pass",
    "time": 0.00034999847412109,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #20 (Book Object (...), stdClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #20 (Book Object (...), stdClass Object (...))",
    "status": "pass",
    "time": 0.0001828670501709,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #21 (resource(58) of type (stream), resource(59) of type (stream))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #21 (resource(58) of type (stream), resource(59) of type (stream))",
    "status": "pass",
    "time": 0.00016379356384277,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #22 (SplObjectStorage Object (...), SplObjectStorage Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #22 (SplObjectStorage Object (...), SplObjectStorage Object (...))",
    "status": "pass",
    "time": 0.00016403198242188,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #23 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #23 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00015497207641602,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #24 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #24 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00014901161193848,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #25 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #25 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00014305114746094,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #26 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #26 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00014281272888184,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #27 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #27 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.0001370906829834,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #28 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #28 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.0002439022064209,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #29 (DateTime Object (...), DateTime Object (...), 3500)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #29 (DateTime Object (...), DateTime Object (...), 3500)",
    "status": "pass",
    "time": 0.00015807151794434,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #30 (DateTime Object (...), DateTime Object (...), 3500)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #30 (DateTime Object (...), DateTime Object (...), 3500)",
    "status": "pass",
    "time": 0.00014805793762207,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #31 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #31 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00046896934509277,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #32 (DateTime Object (...), DateTime Object (...), 43200)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #32 (DateTime Object (...), DateTime Object (...), 43200)",
    "status": "pass",
    "time": 0.00026893615722656,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #33 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #33 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00024700164794922,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #34 (DateTime Object (...), DateTime Object (...), 3500)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #34 (DateTime Object (...), DateTime Object (...), 3500)",
    "status": "pass",
    "time": 0.00027799606323242,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #35 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #35 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00025796890258789,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #36 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #36 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00025391578674316,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #37 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #37 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00026607513427734,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #38 (SampleClass Object (...), false)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #38 (SampleClass Object (...), false)",
    "status": "pass",
    "time": 0.00024104118347168,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #39 (false, SampleClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #39 (false, SampleClass Object (...))",
    "status": "pass",
    "time": 0.00023293495178223,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #40 (array(1, 2), false)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #40 (array(1, 2), false)",
    "status": "pass",
    "time": 0.00022482872009277,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #41 (false, array(1, 2))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #41 (false, array(1, 2))",
    "status": "pass",
    "time": 0.00022792816162109,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #42 (array(), stdClass Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #42 (array(), stdClass Object ())",
    "status": "pass",
    "time": 0.00025200843811035,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #43 (stdClass Object (), array())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #43 (stdClass Object (), array())",
    "status": "pass",
    "time": 0.0002901554107666,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #44 (0, 'Foobar')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #44 (0, 'Foobar')",
    "status": "pass",
    "time": 0.00023913383483887,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #45 ('Foobar', 0)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #45 ('Foobar', 0)",
    "status": "pass",
    "time": 0.00019979476928711,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #46 (3, NAN)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #46 (3, NAN)",
    "status": "pass",
    "time": 0.00019502639770508,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #47 (NAN, 3)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #47 (NAN, 3)",
    "status": "pass",
    "time": 0.00019311904907227,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #48 ('a', 'A', 0, false, true)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #48 ('a', 'A', 0, false, true)",
    "status": "pass",
    "time": 0.00019502639770508,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #49 (array(1, 2), array(2, 1))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #49 (array(1, 2), array(2, 1))",
    "status": "pass",
    "time": 0.00023984909057617,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #50 (array(1), array('1'))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #50 (array(1), array('1'))",
    "status": "pass",
    "time": 0.00021815299987793,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #51 (array(3, 2, 1), array(2, 3, 1), 0, true)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #51 (array(3, 2, 1), array(2, 3, 1), 0, true)",
    "status": "pass",
    "time": 0.00023198127746582,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #52 (2.3, 2.5, 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #52 (2.3, 2.5, 0.5)",
    "status": "pass",
    "time": 0.00014400482177734,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #53 (array(2.3), array(2.5), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #53 (array(2.3), array(2.5), 0.5)",
    "status": "pass",
    "time": 0.00013995170593262,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #54 (array(array(2.3)), array(array(2.5)), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #54 (array(array(2.3)), array(array(2.5)), 0.5)",
    "status": "pass",
    "time": 0.00013899803161621,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #55 (Struct Object (...), Struct Object (...), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #55 (Struct Object (...), Struct Object (...), 0.5)",
    "status": "pass",
    "time": 0.00013995170593262,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #56 (array(Struct Object (...)), array(Struct Object (...)), 0.5)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #56 (array(Struct Object (...)), array(Struct Object (...)), 0.5)",
    "status": "pass",
    "time": 0.00014710426330566,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #57 (1, 2, 1)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #57 (1, 2, 1)",
    "status": "pass",
    "time": 0.00041794776916504,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #58 (SampleClass Object (...), SampleClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #58 (SampleClass Object (...), SampleClass Object (...))",
    "status": "pass",
    "time": 0.0005650520324707,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #59 (Book Object (...), Book Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #59 (Book Object (...), Book Object (...))",
    "status": "pass",
    "time": 0.00031495094299316,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #60 (SplObjectStorage Object (...), SplObjectStorage Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #60 (SplObjectStorage Object (...), SplObjectStorage Object (...))",
    "status": "pass",
    "time": 0.00027608871459961,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #61 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #61 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00017309188842773,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #62 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #62 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00021219253540039,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #63 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #63 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00017499923706055,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #64 (DOMDocument Object (), DOMDocument Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #64 (DOMDocument Object (), DOMDocument Object ())",
    "status": "pass",
    "time": 0.00025701522827148,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #65 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #65 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00069594383239746,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #66 (DateTime Object (...), DateTime Object (...), 10)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #66 (DateTime Object (...), DateTime Object (...), 10)",
    "status": "pass",
    "time": 0.00018191337585449,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #67 (DateTime Object (...), DateTime Object (...), 65)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #67 (DateTime Object (...), DateTime Object (...), 65)",
    "status": "pass",
    "time": 0.00017309188842773,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #68 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #68 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00021004676818848,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #69 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #69 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00014996528625488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #70 (DateTime Object (...), DateTime Object (...), 15)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #70 (DateTime Object (...), DateTime Object (...), 15)",
    "status": "pass",
    "time": 0.00014781951904297,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #71 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #71 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00014305114746094,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #72 (DateTime Object (...), DateTime Object (...), 100)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #72 (DateTime Object (...), DateTime Object (...), 100)",
    "status": "pass",
    "time": 0.00024509429931641,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #73 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #73 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00025510787963867,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #74 (DateTime Object (...), DateTime Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #74 (DateTime Object (...), DateTime Object (...))",
    "status": "pass",
    "time": 0.00018191337585449,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #75 (0, '0')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #75 (0, '0')",
    "status": "pass",
    "time": 0.00015711784362793,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #76 ('0', 0)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #76 ('0', 0)",
    "status": "pass",
    "time": 0.00016903877258301,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #77 (2.3, '2.3')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #77 (2.3, '2.3')",
    "status": "pass",
    "time": 0.00016379356384277,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #78 ('2.3', 2.3)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #78 ('2.3', 2.3)",
    "status": "pass",
    "time": 0.00014615058898926,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #79 ('0.33333333333333', 0.33333333333333)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #79 ('0.33333333333333', 0.33333333333333)",
    "status": "pass",
    "time": 0.00014805793762207,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #80 (0.33333333333333, '0.33333333333333')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #80 (0.33333333333333, '0.33333333333333')",
    "status": "pass",
    "time": 0.00014400482177734,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #81 ('string representation', ClassWithToString Object ())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #81 ('string representation', ClassWithToString Object ())",
    "status": "pass",
    "time": 0.00025105476379395,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #82 (ClassWithToString Object (), 'string representation')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameSucceeds",
    "test": "Framework_AssertTest::testAssertNotSameSucceeds with data set #82 (ClassWithToString Object (), 'string representation')",
    "status": "pass",
    "time": 0.00072789192199707,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "tests": 12
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #0 (null, null)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #0 (null, null)",
    "status": "pass",
    "time": 0.0003969669342041,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #1 ('a', 'a')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #1 ('a', 'a')",
    "status": "pass",
    "time": 0.00028800964355469,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #2 (0, 0)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #2 (0, 0)",
    "status": "pass",
    "time": 0.00055217742919922,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #3 (2.3, 2.3)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #3 (2.3, 2.3)",
    "status": "pass",
    "time": 0.00041103363037109,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #4 (0.33333333333333, 0.33333333333333)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #4 (0.33333333333333, 0.33333333333333)",
    "status": "pass",
    "time": 0.00043988227844238,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #5 (-INF, -INF)"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #5 (-INF, -INF)",
    "status": "pass",
    "time": 0.00045514106750488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #6 (array(), array())"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #6 (array(), array())",
    "status": "pass",
    "time": 0.00046396255493164,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #7 (array(1), array(1))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #7 (array(1), array(1))",
    "status": "pass",
    "time": 0.00055599212646484,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #8 (array(null), array(null))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #8 (array(null), array(null))",
    "status": "pass",
    "time": 0.0005490779876709,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #9 (array('a', array(1, 2)), array('a', array(1, 2)))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #9 (array('a', array(1, 2)), array('a', array(1, 2)))",
    "status": "pass",
    "time": 0.00088810920715332,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #10 (SampleClass Object (...), SampleClass Object (...))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #10 (SampleClass Object (...), SampleClass Object (...))",
    "status": "pass",
    "time": 0.0012030601501465,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #11 (resource(60) of type (stream), resource(60) of type (stream))"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertNotSameFails",
    "test": "Framework_AssertTest::testAssertNotSameFails with data set #11 (resource(60) of type (stream), resource(60) of type (stream))",
    "status": "pass",
    "time": 0.00048398971557617,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertXmlFileEqualsXmlFile"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertXmlFileEqualsXmlFile",
    "status": "pass",
    "time": 0.0010578632354736,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertXmlFileNotEqualsXmlFile"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertXmlFileNotEqualsXmlFile",
    "status": "pass",
    "time": 0.0010819435119629,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertXmlStringEqualsXmlFile"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertXmlStringEqualsXmlFile",
    "status": "pass",
    "time": 0.0011730194091797,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testXmlStringNotEqualsXmlFile"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testXmlStringNotEqualsXmlFile",
    "status": "pass",
    "time": 0.0010950565338135,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertXmlStringEqualsXmlString"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertXmlStringEqualsXmlString",
    "status": "pass",
    "time": 0.00083088874816895,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertXmlStringEqualsXmlString2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertXmlStringEqualsXmlString2",
    "status": "pass",
    "time": 0.00036311149597168,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertXmlStringEqualsXmlString3"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertXmlStringEqualsXmlString3",
    "status": "pass",
    "time": 0.00034785270690918,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertXmlStringNotEqualsXmlString"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertXmlStringNotEqualsXmlString",
    "status": "pass",
    "time": 0.00074195861816406,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testXMLStructureIsSame"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testXMLStructureIsSame",
    "status": "pass",
    "time": 0.0016219615936279,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testXMLStructureWrongNumberOfAttributes"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testXMLStructureWrongNumberOfAttributes",
    "status": "pass",
    "time": 0.0016539096832275,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testXMLStructureWrongNumberOfNodes"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testXMLStructureWrongNumberOfNodes",
    "status": "pass",
    "time": 0.001399040222168,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testXMLStructureIsSameButDataIsNot"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testXMLStructureIsSameButDataIsNot",
    "status": "pass",
    "time": 0.0013179779052734,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testXMLStructureAttributesAreSameButValuesAreNot"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testXMLStructureAttributesAreSameButValuesAreNot",
    "status": "pass",
    "time": 0.0015468597412109,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testXMLStructureIgnoreTextNodes"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testXMLStructureIgnoreTextNodes",
    "status": "pass",
    "time": 0.0014019012451172,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringEqualsNumeric"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringEqualsNumeric",
    "status": "pass",
    "time": 0.00072407722473145,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringEqualsNumeric2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringEqualsNumeric2",
    "status": "pass",
    "time": 0.00049114227294922,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertFileExistsThrowsException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertFileExistsThrowsException",
    "status": "pass",
    "time": 0.00045490264892578,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertFileExists"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertFileExists",
    "status": "pass",
    "time": 0.00043487548828125,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertFileNotExistsThrowsException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertFileNotExistsThrowsException",
    "status": "pass",
    "time": 0.00053906440734863,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertFileNotExists"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertFileNotExists",
    "status": "pass",
    "time": 0.00041508674621582,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertObjectHasAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertObjectHasAttribute",
    "status": "pass",
    "time": 0.00057101249694824,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertObjectNotHasAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertObjectNotHasAttribute",
    "status": "pass",
    "time": 0.00033092498779297,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertFinite"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertFinite",
    "status": "pass",
    "time": 0.00053191184997559,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertInfinite"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertInfinite",
    "status": "pass",
    "time": 0.00043106079101562,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNan"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNan",
    "status": "pass",
    "time": 0.00048303604125977,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNull"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNull",
    "status": "pass",
    "time": 0.0007469654083252,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotNull"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotNull",
    "status": "pass",
    "time": 0.00058794021606445,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertTrue"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertTrue",
    "status": "pass",
    "time": 0.00098800659179688,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotTrue"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotTrue",
    "status": "pass",
    "time": 0.00053811073303223,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertFalse"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertFalse",
    "status": "pass",
    "time": 0.00041794776916504,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotFalse"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotFalse",
    "status": "pass",
    "time": 0.00032210350036621,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertRegExpThrowsException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertRegExpThrowsException",
    "status": "pass",
    "time": 0.00029611587524414,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertRegExpThrowsException2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertRegExpThrowsException2",
    "status": "pass",
    "time": 0.00026798248291016,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotRegExpThrowsException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotRegExpThrowsException",
    "status": "pass",
    "time": 0.00026297569274902,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotRegExpThrowsException2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotRegExpThrowsException2",
    "status": "pass",
    "time": 0.0002748966217041,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertRegExp"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertRegExp",
    "status": "pass",
    "time": 0.00047898292541504,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotRegExp"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotRegExp",
    "status": "pass",
    "time": 0.00035691261291504,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertSame"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertSame",
    "status": "pass",
    "time": 0.00098800659179688,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertSame2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertSame2",
    "status": "pass",
    "time": 0.00049686431884766,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotSame"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotSame",
    "status": "pass",
    "time": 0.00037097930908203,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotSame2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotSame2",
    "status": "pass",
    "time": 0.00061416625976562,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotSameFailsNull"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotSameFailsNull",
    "status": "pass",
    "time": 0.00031399726867676,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testGreaterThan"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testGreaterThan",
    "status": "pass",
    "time": 0.00048708915710449,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAttributeGreaterThan"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAttributeGreaterThan",
    "status": "pass",
    "time": 0.00054216384887695,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testGreaterThanOrEqual"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testGreaterThanOrEqual",
    "status": "pass",
    "time": 0.0010480880737305,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAttributeGreaterThanOrEqual"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAttributeGreaterThanOrEqual",
    "status": "pass",
    "time": 0.00075101852416992,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testLessThan"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testLessThan",
    "status": "pass",
    "time": 0.00051403045654297,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAttributeLessThan"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAttributeLessThan",
    "status": "pass",
    "time": 0.0003821849822998,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testLessThanOrEqual"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testLessThanOrEqual",
    "status": "pass",
    "time": 0.00066399574279785,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAttributeLessThanOrEqual"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAttributeLessThanOrEqual",
    "status": "pass",
    "time": 0.00072908401489258,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testReadAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testReadAttribute",
    "status": "pass",
    "time": 0.0003819465637207,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testReadAttribute2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testReadAttribute2",
    "status": "pass",
    "time": 0.00044012069702148,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testReadAttribute3"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testReadAttribute3",
    "status": "pass",
    "time": 0.001209020614624,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testReadAttribute4"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testReadAttribute4",
    "status": "pass",
    "time": 0.00042414665222168,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testReadAttribute5"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testReadAttribute5",
    "status": "pass",
    "time": 0.00034093856811523,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testReadAttributeIfAttributeNameIsNotValid"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testReadAttributeIfAttributeNameIsNotValid",
    "status": "pass",
    "time": 0.00034189224243164,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testGetStaticAttributeRaisesExceptionForInvalidFirstArgument"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testGetStaticAttributeRaisesExceptionForInvalidFirstArgument",
    "status": "pass",
    "time": 0.00032615661621094,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testGetStaticAttributeRaisesExceptionForInvalidFirstArgument2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testGetStaticAttributeRaisesExceptionForInvalidFirstArgument2",
    "status": "pass",
    "time": 0.00048518180847168,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testGetStaticAttributeRaisesExceptionForInvalidSecondArgument"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testGetStaticAttributeRaisesExceptionForInvalidSecondArgument",
    "status": "pass",
    "time": 0.00036311149597168,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testGetStaticAttributeRaisesExceptionForInvalidSecondArgument2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testGetStaticAttributeRaisesExceptionForInvalidSecondArgument2",
    "status": "pass",
    "time": 0.00036406517028809,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testGetStaticAttributeRaisesExceptionForInvalidSecondArgument3"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testGetStaticAttributeRaisesExceptionForInvalidSecondArgument3",
    "status": "pass",
    "time": 0.0003199577331543,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testGetObjectAttributeRaisesExceptionForInvalidFirstArgument"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testGetObjectAttributeRaisesExceptionForInvalidFirstArgument",
    "status": "pass",
    "time": 0.0003349781036377,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testGetObjectAttributeRaisesExceptionForInvalidSecondArgument"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testGetObjectAttributeRaisesExceptionForInvalidSecondArgument",
    "status": "pass",
    "time": 0.00032615661621094,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testGetObjectAttributeRaisesExceptionForInvalidSecondArgument2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testGetObjectAttributeRaisesExceptionForInvalidSecondArgument2",
    "status": "pass",
    "time": 0.00031590461730957,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testGetObjectAttributeRaisesExceptionForInvalidSecondArgument3"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testGetObjectAttributeRaisesExceptionForInvalidSecondArgument3",
    "status": "pass",
    "time": 0.00038290023803711,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testGetObjectAttributeWorksForInheritedAttributes"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testGetObjectAttributeWorksForInheritedAttributes",
    "status": "pass",
    "time": 0.00035190582275391,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPublicAttributeContains"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPublicAttributeContains",
    "status": "pass",
    "time": 0.0010349750518799,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPublicAttributeContainsOnly"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPublicAttributeContainsOnly",
    "status": "pass",
    "time": 0.00072884559631348,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPublicAttributeNotContains"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPublicAttributeNotContains",
    "status": "pass",
    "time": 0.001431941986084,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPublicAttributeNotContainsOnly"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPublicAttributeNotContainsOnly",
    "status": "pass",
    "time": 0.00097393989562988,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertProtectedAttributeContains"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertProtectedAttributeContains",
    "status": "pass",
    "time": 0.00039410591125488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertProtectedAttributeNotContains"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertProtectedAttributeNotContains",
    "status": "pass",
    "time": 0.00041604042053223,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPrivateAttributeContains"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPrivateAttributeContains",
    "status": "pass",
    "time": 0.00055718421936035,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPrivateAttributeNotContains"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPrivateAttributeNotContains",
    "status": "pass",
    "time": 0.00057697296142578,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertAttributeContainsNonObject"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertAttributeContainsNonObject",
    "status": "pass",
    "time": 0.00030398368835449,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertAttributeNotContainsNonObject"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertAttributeNotContainsNonObject",
    "status": "pass",
    "time": 0.00029802322387695,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPublicAttributeEquals"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPublicAttributeEquals",
    "status": "pass",
    "time": 0.00038313865661621,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPublicAttributeNotEquals"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPublicAttributeNotEquals",
    "status": "pass",
    "time": 0.0004270076751709,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPublicAttributeSame"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPublicAttributeSame",
    "status": "pass",
    "time": 0.00030708312988281,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPublicAttributeNotSame"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPublicAttributeNotSame",
    "status": "pass",
    "time": 0.0002751350402832,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertProtectedAttributeEquals"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertProtectedAttributeEquals",
    "status": "pass",
    "time": 0.00036811828613281,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertProtectedAttributeNotEquals"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertProtectedAttributeNotEquals",
    "status": "pass",
    "time": 0.00046610832214355,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPrivateAttributeEquals"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPrivateAttributeEquals",
    "status": "pass",
    "time": 0.00036382675170898,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPrivateAttributeNotEquals"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPrivateAttributeNotEquals",
    "status": "pass",
    "time": 0.00042009353637695,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPublicStaticAttributeEquals"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPublicStaticAttributeEquals",
    "status": "pass",
    "time": 0.00044417381286621,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPublicStaticAttributeNotEquals"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPublicStaticAttributeNotEquals",
    "status": "pass",
    "time": 0.0010018348693848,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertProtectedStaticAttributeEquals"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertProtectedStaticAttributeEquals",
    "status": "pass",
    "time": 0.00044798851013184,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertProtectedStaticAttributeNotEquals"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertProtectedStaticAttributeNotEquals",
    "status": "pass",
    "time": 0.00042486190795898,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPrivateStaticAttributeEquals"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPrivateStaticAttributeEquals",
    "status": "pass",
    "time": 0.00036907196044922,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPrivateStaticAttributeNotEquals"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertPrivateStaticAttributeNotEquals",
    "status": "pass",
    "time": 0.00040006637573242,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassHasAttributeThrowsException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassHasAttributeThrowsException",
    "status": "pass",
    "time": 0.00030803680419922,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassHasAttributeThrowsException2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassHasAttributeThrowsException2",
    "status": "pass",
    "time": 0.00041294097900391,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassHasAttributeThrowsExceptionIfAttributeNameIsNotValid"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassHasAttributeThrowsExceptionIfAttributeNameIsNotValid",
    "status": "pass",
    "time": 0.00027012825012207,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassNotHasAttributeThrowsException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassNotHasAttributeThrowsException",
    "status": "pass",
    "time": 0.00021481513977051,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassNotHasAttributeThrowsException2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassNotHasAttributeThrowsException2",
    "status": "pass",
    "time": 0.00022697448730469,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassNotHasAttributeThrowsExceptionIfAttributeNameIsNotValid"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassNotHasAttributeThrowsExceptionIfAttributeNameIsNotValid",
    "status": "pass",
    "time": 0.00021791458129883,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassHasStaticAttributeThrowsException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassHasStaticAttributeThrowsException",
    "status": "pass",
    "time": 0.00022387504577637,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassHasStaticAttributeThrowsException2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassHasStaticAttributeThrowsException2",
    "status": "pass",
    "time": 0.00032210350036621,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassHasStaticAttributeThrowsExceptionIfAttributeNameIsNotValid"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassHasStaticAttributeThrowsExceptionIfAttributeNameIsNotValid",
    "status": "pass",
    "time": 0.00022411346435547,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassNotHasStaticAttributeThrowsException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassNotHasStaticAttributeThrowsException",
    "status": "pass",
    "time": 0.00020790100097656,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassNotHasStaticAttributeThrowsException2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassNotHasStaticAttributeThrowsException2",
    "status": "pass",
    "time": 0.00027298927307129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassNotHasStaticAttributeThrowsExceptionIfAttributeNameIsNotValid"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertClassNotHasStaticAttributeThrowsExceptionIfAttributeNameIsNotValid",
    "status": "pass",
    "time": 0.00022006034851074,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertObjectHasAttributeThrowsException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertObjectHasAttributeThrowsException",
    "status": "pass",
    "time": 0.00021505355834961,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertObjectHasAttributeThrowsException2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertObjectHasAttributeThrowsException2",
    "status": "pass",
    "time": 0.00022196769714355,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertObjectHasAttributeThrowsExceptionIfAttributeNameIsNotValid"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertObjectHasAttributeThrowsExceptionIfAttributeNameIsNotValid",
    "status": "pass",
    "time": 0.00021481513977051,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertObjectNotHasAttributeThrowsException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertObjectNotHasAttributeThrowsException",
    "status": "pass",
    "time": 0.00042295455932617,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertObjectNotHasAttributeThrowsException2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertObjectNotHasAttributeThrowsException2",
    "status": "pass",
    "time": 0.00059604644775391,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertObjectNotHasAttributeThrowsExceptionIfAttributeNameIsNotValid"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertObjectNotHasAttributeThrowsExceptionIfAttributeNameIsNotValid",
    "status": "pass",
    "time": 0.0013811588287354,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testClassHasPublicAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testClassHasPublicAttribute",
    "status": "pass",
    "time": 0.00044989585876465,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testClassNotHasPublicAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testClassNotHasPublicAttribute",
    "status": "pass",
    "time": 0.0003359317779541,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testClassHasPublicStaticAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testClassHasPublicStaticAttribute",
    "status": "pass",
    "time": 0.00064706802368164,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testClassNotHasPublicStaticAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testClassNotHasPublicStaticAttribute",
    "status": "pass",
    "time": 0.00053000450134277,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testObjectHasPublicAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testObjectHasPublicAttribute",
    "status": "pass",
    "time": 0.00049710273742676,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testObjectNotHasPublicAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testObjectNotHasPublicAttribute",
    "status": "pass",
    "time": 0.00045609474182129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testObjectHasOnTheFlyAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testObjectHasOnTheFlyAttribute",
    "status": "pass",
    "time": 0.00044393539428711,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testObjectNotHasOnTheFlyAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testObjectNotHasOnTheFlyAttribute",
    "status": "pass",
    "time": 0.00036311149597168,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testObjectHasProtectedAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testObjectHasProtectedAttribute",
    "status": "pass",
    "time": 0.00023794174194336,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testObjectNotHasProtectedAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testObjectNotHasProtectedAttribute",
    "status": "pass",
    "time": 0.00029301643371582,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testObjectHasPrivateAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testObjectHasPrivateAttribute",
    "status": "pass",
    "time": 0.00038695335388184,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testObjectNotHasPrivateAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testObjectNotHasPrivateAttribute",
    "status": "pass",
    "time": 0.00047898292541504,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatAttributeEquals"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatAttributeEquals",
    "status": "pass",
    "time": 0.00063395500183105,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatAttributeEquals2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatAttributeEquals2",
    "status": "pass",
    "time": 0.0017430782318115,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatAttributeEqualTo"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatAttributeEqualTo",
    "status": "pass",
    "time": 0.00019311904907227,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatAnything"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatAnything",
    "status": "pass",
    "time": 0.00024008750915527,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatIsTrue"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatIsTrue",
    "status": "pass",
    "time": 0.00010895729064941,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatIsFalse"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatIsFalse",
    "status": "pass",
    "time": 0.00010180473327637,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatIsJson"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatIsJson",
    "status": "pass",
    "time": 0.00024318695068359,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatAnythingAndAnything"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatAnythingAndAnything",
    "status": "pass",
    "time": 0.00027585029602051,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatAnythingOrAnything"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatAnythingOrAnything",
    "status": "pass",
    "time": 0.00014209747314453,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatAnythingXorNotAnything"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatAnythingXorNotAnything",
    "status": "pass",
    "time": 0.00053286552429199,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatContains"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatContains",
    "status": "pass",
    "time": 0.00023484230041504,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatStringContains"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatStringContains",
    "status": "pass",
    "time": 0.00014400482177734,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatContainsOnly"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatContainsOnly",
    "status": "pass",
    "time": 0.00012803077697754,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatContainsOnlyInstancesOf"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatContainsOnlyInstancesOf",
    "status": "pass",
    "time": 0.00011706352233887,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatArrayHasKey"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatArrayHasKey",
    "status": "pass",
    "time": 0.00011205673217773,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatClassHasAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatClassHasAttribute",
    "status": "pass",
    "time": 0.00011801719665527,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatClassHasStaticAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatClassHasStaticAttribute",
    "status": "pass",
    "time": 0.00011610984802246,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatObjectHasAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatObjectHasAttribute",
    "status": "pass",
    "time": 0.00010895729064941,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatEqualTo"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatEqualTo",
    "status": "pass",
    "time": 0.00011205673217773,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatIdenticalTo"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatIdenticalTo",
    "status": "pass",
    "time": 0.00010800361633301,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatIsInstanceOf"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatIsInstanceOf",
    "status": "pass",
    "time": 0.0001070499420166,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatIsType"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatIsType",
    "status": "pass",
    "time": 0.00011110305786133,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatIsEmpty"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatIsEmpty",
    "status": "pass",
    "time": 0.00026893615722656,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatFileExists"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatFileExists",
    "status": "pass",
    "time": 0.00017404556274414,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatGreaterThan"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatGreaterThan",
    "status": "pass",
    "time": 0.00012302398681641,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatGreaterThanOrEqual"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatGreaterThanOrEqual",
    "status": "pass",
    "time": 0.00033092498779297,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatLessThan"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatLessThan",
    "status": "pass",
    "time": 0.00012302398681641,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatLessThanOrEqual"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatLessThanOrEqual",
    "status": "pass",
    "time": 0.00040483474731445,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatMatchesRegularExpression"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatMatchesRegularExpression",
    "status": "pass",
    "time": 0.00022196769714355,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatCallback"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatCallback",
    "status": "pass",
    "time": 0.00057506561279297,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatCountOf"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertThatCountOf",
    "status": "pass",
    "time": 0.00029492378234863,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertFileEquals"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertFileEquals",
    "status": "pass",
    "time": 0.00053596496582031,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertFileNotEquals"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertFileNotEquals",
    "status": "pass",
    "time": 0.00051999092102051,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringEqualsFile"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringEqualsFile",
    "status": "pass",
    "time": 0.0004270076751709,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringNotEqualsFile"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringNotEqualsFile",
    "status": "pass",
    "time": 0.00051689147949219,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringStartsWithThrowsException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringStartsWithThrowsException",
    "status": "pass",
    "time": 0.00027704238891602,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringStartsWithThrowsException2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringStartsWithThrowsException2",
    "status": "pass",
    "time": 0.00041699409484863,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringStartsNotWithThrowsException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringStartsNotWithThrowsException",
    "status": "pass",
    "time": 0.00044512748718262,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringStartsNotWithThrowsException2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringStartsNotWithThrowsException2",
    "status": "pass",
    "time": 0.00029802322387695,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringEndsWithThrowsException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringEndsWithThrowsException",
    "status": "pass",
    "time": 0.00029397010803223,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringEndsWithThrowsException2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringEndsWithThrowsException2",
    "status": "pass",
    "time": 0.00031805038452148,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringEndsNotWithThrowsException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringEndsNotWithThrowsException",
    "status": "pass",
    "time": 0.00023984909057617,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringEndsNotWithThrowsException2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringEndsNotWithThrowsException2",
    "status": "pass",
    "time": 0.00024580955505371,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringStartsWith"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringStartsWith",
    "status": "pass",
    "time": 0.00044798851013184,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringStartsNotWith"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringStartsNotWith",
    "status": "pass",
    "time": 0.00029277801513672,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringEndsWith"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringEndsWith",
    "status": "pass",
    "time": 0.00046396255493164,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringEndsNotWith"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringEndsNotWith",
    "status": "pass",
    "time": 0.0002748966217041,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringMatchesFormatRaisesExceptionForInvalidFirstArgument"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringMatchesFormatRaisesExceptionForInvalidFirstArgument",
    "status": "pass",
    "time": 0.00025701522827148,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringMatchesFormatRaisesExceptionForInvalidSecondArgument"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringMatchesFormatRaisesExceptionForInvalidSecondArgument",
    "status": "pass",
    "time": 0.00029301643371582,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringMatchesFormat"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringMatchesFormat",
    "status": "pass",
    "time": 0.00061392784118652,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringMatchesFormatFailure"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringMatchesFormatFailure",
    "status": "pass",
    "time": 0.0022649765014648,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringNotMatchesFormatRaisesExceptionForInvalidFirstArgument"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringNotMatchesFormatRaisesExceptionForInvalidFirstArgument",
    "status": "pass",
    "time": 0.00032401084899902,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringNotMatchesFormatRaisesExceptionForInvalidSecondArgument"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringNotMatchesFormatRaisesExceptionForInvalidSecondArgument",
    "status": "pass",
    "time": 0.00024509429931641,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringNotMatchesFormat"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringNotMatchesFormat",
    "status": "pass",
    "time": 0.00036191940307617,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertEmpty"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertEmpty",
    "status": "pass",
    "time": 0.00039887428283691,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotEmpty"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotEmpty",
    "status": "pass",
    "time": 0.00048112869262695,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertAttributeEmpty"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertAttributeEmpty",
    "status": "pass",
    "time": 0.00043582916259766,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertAttributeNotEmpty"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertAttributeNotEmpty",
    "status": "pass",
    "time": 0.00032305717468262,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testMarkTestIncomplete"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testMarkTestIncomplete",
    "status": "pass",
    "time": 0.00031685829162598,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testMarkTestSkipped"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testMarkTestSkipped",
    "status": "pass",
    "time": 0.00027894973754883,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertCount"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertCount",
    "status": "pass",
    "time": 0.00023388862609863,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertCountTraversable"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertCountTraversable",
    "status": "pass",
    "time": 0.00022411346435547,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertCountThrowsExceptionIfExpectedCountIsNoInteger"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertCountThrowsExceptionIfExpectedCountIsNoInteger",
    "status": "pass",
    "time": 0.00021600723266602,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertCountThrowsExceptionIfElementIsNotCountable"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertCountThrowsExceptionIfElementIsNotCountable",
    "status": "pass",
    "time": 0.00021791458129883,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertAttributeCount"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertAttributeCount",
    "status": "pass",
    "time": 0.00014209747314453,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotCount"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotCount",
    "status": "pass",
    "time": 0.00024795532226562,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotCountThrowsExceptionIfExpectedCountIsNoInteger"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotCountThrowsExceptionIfExpectedCountIsNoInteger",
    "status": "pass",
    "time": 0.00024008750915527,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotCountThrowsExceptionIfElementIsNotCountable"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotCountThrowsExceptionIfElementIsNotCountable",
    "status": "pass",
    "time": 0.00023198127746582,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertAttributeNotCount"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertAttributeNotCount",
    "status": "pass",
    "time": 0.00016093254089355,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertSameSize"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertSameSize",
    "status": "pass",
    "time": 0.00062894821166992,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertSameSizeThrowsExceptionIfExpectedIsNotCountable"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertSameSizeThrowsExceptionIfExpectedIsNotCountable",
    "status": "pass",
    "time": 0.00091409683227539,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertSameSizeThrowsExceptionIfActualIsNotCountable"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertSameSizeThrowsExceptionIfActualIsNotCountable",
    "status": "pass",
    "time": 0.00052189826965332,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotSameSize"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotSameSize",
    "status": "pass",
    "time": 0.00027990341186523,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotSameSizeThrowsExceptionIfExpectedIsNotCountable"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotSameSizeThrowsExceptionIfExpectedIsNotCountable",
    "status": "pass",
    "time": 0.00023698806762695,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotSameSizeThrowsExceptionIfActualIsNotCountable"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotSameSizeThrowsExceptionIfActualIsNotCountable",
    "status": "pass",
    "time": 0.00021696090698242,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertJsonRaisesExceptionForInvalidArgument"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertJsonRaisesExceptionForInvalidArgument",
    "status": "pass",
    "time": 0.0002140998840332,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertJson"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertJson",
    "status": "pass",
    "time": 0.00013494491577148,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertJsonStringEqualsJsonString"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertJsonStringEqualsJsonString",
    "status": "pass",
    "time": 0.00039100646972656,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_AssertTest::testAssertJsonStringEqualsJsonStringErrorRaised",
    "tests": 2
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertJsonStringEqualsJsonStringErrorRaised",
    "test": "Framework_AssertTest::testAssertJsonStringEqualsJsonStringErrorRaised with data set \"error syntax in expected JSON\" ('{\"Mascott\"::}', '{\"Mascott\" : \"Tux\"}')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertJsonStringEqualsJsonStringErrorRaised",
    "test": "Framework_AssertTest::testAssertJsonStringEqualsJsonStringErrorRaised with data set \"error syntax in expected JSON\" ('{\"Mascott\"::}', '{\"Mascott\" : \"Tux\"}')",
    "status": "pass",
    "time": 0.0004880428314209,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertJsonStringEqualsJsonStringErrorRaised",
    "test": "Framework_AssertTest::testAssertJsonStringEqualsJsonStringErrorRaised with data set \"error UTF-8 in actual JSON\" ('{\"Mascott\" : \"Tux\"}', '{\"Mascott\" : :}')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertJsonStringEqualsJsonStringErrorRaised",
    "test": "Framework_AssertTest::testAssertJsonStringEqualsJsonStringErrorRaised with data set \"error UTF-8 in actual JSON\" ('{\"Mascott\" : \"Tux\"}', '{\"Mascott\" : :}')",
    "status": "pass",
    "time": 0.00026607513427734,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertJsonStringNotEqualsJsonString"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertJsonStringNotEqualsJsonString",
    "status": "pass",
    "time": 0.00052189826965332,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_AssertTest::testAssertJsonStringNotEqualsJsonStringErrorRaised",
    "tests": 2
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertJsonStringNotEqualsJsonStringErrorRaised",
    "test": "Framework_AssertTest::testAssertJsonStringNotEqualsJsonStringErrorRaised with data set \"error syntax in expected JSON\" ('{\"Mascott\"::}', '{\"Mascott\" : \"Tux\"}')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertJsonStringNotEqualsJsonStringErrorRaised",
    "test": "Framework_AssertTest::testAssertJsonStringNotEqualsJsonStringErrorRaised with data set \"error syntax in expected JSON\" ('{\"Mascott\"::}', '{\"Mascott\" : \"Tux\"}')",
    "status": "pass",
    "time": 0.00023984909057617,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_AssertTest::testAssertJsonStringNotEqualsJsonStringErrorRaised",
    "test": "Framework_AssertTest::testAssertJsonStringNotEqualsJsonStringErrorRaised with data set \"error UTF-8 in actual JSON\" ('{\"Mascott\" : \"Tux\"}', '{\"Mascott\" : :}')"
}{
    "event": "test",
    "suite": "Framework_AssertTest::testAssertJsonStringNotEqualsJsonStringErrorRaised",
    "test": "Framework_AssertTest::testAssertJsonStringNotEqualsJsonStringErrorRaised with data set \"error UTF-8 in actual JSON\" ('{\"Mascott\" : \"Tux\"}', '{\"Mascott\" : :}')",
    "status": "pass",
    "time": 0.00024795532226562,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertJsonStringEqualsJsonFile"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertJsonStringEqualsJsonFile",
    "status": "pass",
    "time": 0.00034713745117188,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertJsonStringEqualsJsonFileExpectingExpectationFailedException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertJsonStringEqualsJsonFileExpectingExpectationFailedException",
    "status": "pass",
    "time": 0.00032496452331543,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertJsonStringEqualsJsonFileExpectingException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertJsonStringEqualsJsonFileExpectingException",
    "status": "pass",
    "time": 0.00025391578674316,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertJsonStringNotEqualsJsonFile"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertJsonStringNotEqualsJsonFile",
    "status": "pass",
    "time": 0.00019407272338867,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertJsonStringNotEqualsJsonFileExpectingException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertJsonStringNotEqualsJsonFileExpectingException",
    "status": "pass",
    "time": 0.0002439022064209,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertJsonFileNotEqualsJsonFile"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertJsonFileNotEqualsJsonFile",
    "status": "pass",
    "time": 0.00023484230041504,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertJsonFileEqualsJsonFile"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertJsonFileEqualsJsonFile",
    "status": "pass",
    "time": 0.00028395652770996,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertInstanceOf"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertInstanceOf",
    "status": "pass",
    "time": 0.00028204917907715,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertInstanceOfThrowsExceptionForInvalidArgument"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertInstanceOfThrowsExceptionForInvalidArgument",
    "status": "pass",
    "time": 0.00086688995361328,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertAttributeInstanceOf"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertAttributeInstanceOf",
    "status": "pass",
    "time": 0.00027704238891602,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotInstanceOf"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotInstanceOf",
    "status": "pass",
    "time": 0.0004270076751709,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotInstanceOfThrowsExceptionForInvalidArgument"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotInstanceOfThrowsExceptionForInvalidArgument",
    "status": "pass",
    "time": 0.00023007392883301,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertAttributeNotInstanceOf"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertAttributeNotInstanceOf",
    "status": "pass",
    "time": 0.00014686584472656,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertInternalType"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertInternalType",
    "status": "pass",
    "time": 0.00024700164794922,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertInternalTypeDouble"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertInternalTypeDouble",
    "status": "pass",
    "time": 0.00022697448730469,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertInternalTypeThrowsExceptionForInvalidArgument"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertInternalTypeThrowsExceptionForInvalidArgument",
    "status": "pass",
    "time": 0.0003359317779541,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertAttributeInternalType"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertAttributeInternalType",
    "status": "pass",
    "time": 0.00023508071899414,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotInternalType"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotInternalType",
    "status": "pass",
    "time": 0.00030803680419922,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotInternalTypeThrowsExceptionForInvalidArgument"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertNotInternalTypeThrowsExceptionForInvalidArgument",
    "status": "pass",
    "time": 0.00024604797363281,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertAttributeNotInternalType"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertAttributeNotInternalType",
    "status": "pass",
    "time": 0.00014185905456543,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringMatchesFormatFileThrowsExceptionForInvalidArgument"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringMatchesFormatFileThrowsExceptionForInvalidArgument",
    "status": "pass",
    "time": 0.00041508674621582,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringMatchesFormatFileThrowsExceptionForInvalidArgument2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringMatchesFormatFileThrowsExceptionForInvalidArgument2",
    "status": "pass",
    "time": 0.00062894821166992,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringMatchesFormatFile"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringMatchesFormatFile",
    "status": "pass",
    "time": 0.00052809715270996,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringNotMatchesFormatFileThrowsExceptionForInvalidArgument"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringNotMatchesFormatFileThrowsExceptionForInvalidArgument",
    "status": "pass",
    "time": 0.00028705596923828,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringNotMatchesFormatFileThrowsExceptionForInvalidArgument2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringNotMatchesFormatFileThrowsExceptionForInvalidArgument2",
    "status": "pass",
    "time": 0.00024795532226562,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringNotMatchesFormatFile"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_AssertTest::testAssertStringNotMatchesFormatFile",
    "status": "pass",
    "time": 0.00030803680419922,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_BaseTestListenerTest",
    "tests": 1
}{
    "event": "testStart",
    "suite": "Framework_BaseTestListenerTest",
    "test": "Framework_BaseTestListenerTest::testEndEventsAreCounted"
}{
    "event": "test",
    "suite": "Framework_BaseTestListenerTest",
    "test": "Framework_BaseTestListenerTest::testEndEventsAreCounted",
    "status": "pass",
    "time": 0.0050649642944336,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "CountTest",
    "tests": 2
}{
    "event": "testStart",
    "suite": "CountTest",
    "test": "CountTest::testCount"
}{
    "event": "test",
    "suite": "CountTest",
    "test": "CountTest::testCount",
    "status": "pass",
    "time": 0.0002131462097168,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "CountTest",
    "test": "CountTest::testCountDoesNotChangeIteratorKey"
}{
    "event": "test",
    "suite": "CountTest",
    "test": "CountTest::testCountDoesNotChangeIteratorKey",
    "status": "pass",
    "time": 0.00040698051452637,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "ExceptionMessageRegExpTest",
    "tests": 4
}{
    "event": "testStart",
    "suite": "ExceptionMessageRegExpTest",
    "test": "ExceptionMessageRegExpTest::testRegexMessage"
}{
    "event": "test",
    "suite": "ExceptionMessageRegExpTest",
    "test": "ExceptionMessageRegExpTest::testRegexMessage",
    "status": "pass",
    "time": 0.0004570484161377,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "ExceptionMessageRegExpTest",
    "test": "ExceptionMessageRegExpTest::testRegexMessageExtreme"
}{
    "event": "test",
    "suite": "ExceptionMessageRegExpTest",
    "test": "ExceptionMessageRegExpTest::testRegexMessageExtreme",
    "status": "pass",
    "time": 0.00023198127746582,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "ExceptionMessageRegExpTest",
    "test": "ExceptionMessageRegExpTest::testMessageXdebugScreamCompatibility"
}{
    "event": "test",
    "suite": "ExceptionMessageRegExpTest",
    "test": "ExceptionMessageRegExpTest::testMessageXdebugScreamCompatibility",
    "status": "pass",
    "time": 0.0024521350860596,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "ExceptionMessageRegExpTest",
    "test": "ExceptionMessageRegExpTest::testSimultaneousLiteralAndRegExpExceptionMessage"
}{
    "event": "test",
    "suite": "ExceptionMessageRegExpTest",
    "test": "ExceptionMessageRegExpTest::testSimultaneousLiteralAndRegExpExceptionMessage",
    "status": "pass",
    "time": 0.00042009353637695,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "ExceptionMessageTest",
    "tests": 4
}{
    "event": "testStart",
    "suite": "ExceptionMessageTest",
    "test": "ExceptionMessageTest::testLiteralMessage"
}{
    "event": "test",
    "suite": "ExceptionMessageTest",
    "test": "ExceptionMessageTest::testLiteralMessage",
    "status": "pass",
    "time": 0.00027799606323242,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "ExceptionMessageTest",
    "test": "ExceptionMessageTest::testPatialMessageBegin"
}{
    "event": "test",
    "suite": "ExceptionMessageTest",
    "test": "ExceptionMessageTest::testPatialMessageBegin",
    "status": "pass",
    "time": 0.00022387504577637,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "ExceptionMessageTest",
    "test": "ExceptionMessageTest::testPatialMessageMiddle"
}{
    "event": "test",
    "suite": "ExceptionMessageTest",
    "test": "ExceptionMessageTest::testPatialMessageMiddle",
    "status": "pass",
    "time": 0.0002138614654541,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "ExceptionMessageTest",
    "test": "ExceptionMessageTest::testPatialMessageEnd"
}{
    "event": "test",
    "suite": "ExceptionMessageTest",
    "test": "ExceptionMessageTest::testPatialMessageEnd",
    "status": "pass",
    "time": 0.00024199485778809,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_Constraint_IsJsonTest",
    "tests": 2
}{
    "event": "suiteStart",
    "suite": "Framework_Constraint_IsJsonTest::testEvaluate",
    "tests": 2
}{
    "event": "testStart",
    "suite": "Framework_Constraint_IsJsonTest::testEvaluate",
    "test": "Framework_Constraint_IsJsonTest::testEvaluate with data set \"valid JSON\" (true, '{}')"
}{
    "event": "test",
    "suite": "Framework_Constraint_IsJsonTest::testEvaluate",
    "test": "Framework_Constraint_IsJsonTest::testEvaluate with data set \"valid JSON\" (true, '{}')",
    "status": "pass",
    "time": 0.00018000602722168,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_Constraint_IsJsonTest::testEvaluate",
    "test": "Framework_Constraint_IsJsonTest::testEvaluate with data set \"empty string should be treated as invalid JSON\" (false, '')"
}{
    "event": "test",
    "suite": "Framework_Constraint_IsJsonTest::testEvaluate",
    "test": "Framework_Constraint_IsJsonTest::testEvaluate with data set \"empty string should be treated as invalid JSON\" (false, '')",
    "status": "pass",
    "time": 0.00013184547424316,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest",
    "tests": 11
}{
    "event": "suiteStart",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testTranslateTypeToPrefix",
    "tests": 3
}{
    "event": "testStart",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testTranslateTypeToPrefix",
    "test": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testTranslateTypeToPrefix with data set \"expected\" ('Expected value JSON decode error - ', 'expected')"
}{
    "event": "test",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testTranslateTypeToPrefix",
    "test": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testTranslateTypeToPrefix with data set \"expected\" ('Expected value JSON decode error - ', 'expected')",
    "status": "pass",
    "time": 0.00015091896057129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testTranslateTypeToPrefix",
    "test": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testTranslateTypeToPrefix with data set \"actual\" ('Actual value JSON decode error - ', 'actual')"
}{
    "event": "test",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testTranslateTypeToPrefix",
    "test": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testTranslateTypeToPrefix with data set \"actual\" ('Actual value JSON decode error - ', 'actual')",
    "status": "pass",
    "time": 0.00013017654418945,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testTranslateTypeToPrefix",
    "test": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testTranslateTypeToPrefix with data set \"default\" ('', '')"
}{
    "event": "test",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testTranslateTypeToPrefix",
    "test": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testTranslateTypeToPrefix with data set \"default\" ('', '')",
    "status": "pass",
    "time": 0.00012516975402832,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError",
    "tests": 8
}{
    "event": "testStart",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError",
    "test": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError with data set \"JSON_ERROR_NONE\" (null, 'json_error_none', '')"
}{
    "event": "test",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError",
    "test": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError with data set \"JSON_ERROR_NONE\" (null, 'json_error_none', '')",
    "status": "pass",
    "time": 0.00012898445129395,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError",
    "test": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError with data set \"JSON_ERROR_DEPTH\" ('Maximum stack depth exceeded', 1, '')"
}{
    "event": "test",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError",
    "test": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError with data set \"JSON_ERROR_DEPTH\" ('Maximum stack depth exceeded', 1, '')",
    "status": "pass",
    "time": 0.00012493133544922,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError",
    "test": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError with data set \"prefixed JSON_ERROR_DEPTH\" ('TUX: Maximum stack depth exceeded', 1, 'TUX: ')"
}{
    "event": "test",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError",
    "test": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError with data set \"prefixed JSON_ERROR_DEPTH\" ('TUX: Maximum stack depth exceeded', 1, 'TUX: ')",
    "status": "pass",
    "time": 0.00012302398681641,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError",
    "test": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError with data set \"JSON_ERROR_STATE_MISMatch\" ('Underflow or the modes mismatch', 2, '')"
}{
    "event": "test",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError",
    "test": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError with data set \"JSON_ERROR_STATE_MISMatch\" ('Underflow or the modes mismatch', 2, '')",
    "status": "pass",
    "time": 0.00012516975402832,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError",
    "test": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError with data set \"JSON_ERROR_CTRL_CHAR\" ('Unexpected control character found', 3, '')"
}{
    "event": "test",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError",
    "test": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError with data set \"JSON_ERROR_CTRL_CHAR\" ('Unexpected control character found', 3, '')",
    "status": "pass",
    "time": 0.00012493133544922,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError",
    "test": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError with data set \"JSON_ERROR_SYNTAX\" ('Syntax error, malformed JSON', 4, '')"
}{
    "event": "test",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError",
    "test": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError with data set \"JSON_ERROR_SYNTAX\" ('Syntax error, malformed JSON', 4, '')",
    "status": "pass",
    "time": 0.0001220703125,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError",
    "test": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError with data set \"JSON_ERROR_UTF8`\" ('Malformed UTF-8 characters, p...ncoded', 5, '')"
}{
    "event": "test",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError",
    "test": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError with data set \"JSON_ERROR_UTF8`\" ('Malformed UTF-8 characters, p...ncoded', 5, '')",
    "status": "pass",
    "time": 0.0001220703125,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError",
    "test": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError with data set \"Invalid error indicator\" ('Unknown error', 55, '')"
}{
    "event": "test",
    "suite": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError",
    "test": "Framework_Constraint_JsonMatches_ErrorMessageProviderTest::testDetermineJsonError with data set \"Invalid error indicator\" ('Unknown error', 55, '')",
    "status": "pass",
    "time": 0.0001218318939209,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_Constraint_JsonMatchesTest",
    "tests": 5
}{
    "event": "suiteStart",
    "suite": "Framework_Constraint_JsonMatchesTest::testEvaluate",
    "tests": 4
}{
    "event": "testStart",
    "suite": "Framework_Constraint_JsonMatchesTest::testEvaluate",
    "test": "Framework_Constraint_JsonMatchesTest::testEvaluate with data set \"valid JSON\" (true, '{\"Mascott\":\"Tux\"}', '{\"Mascott\":\"Tux\"}')"
}{
    "event": "test",
    "suite": "Framework_Constraint_JsonMatchesTest::testEvaluate",
    "test": "Framework_Constraint_JsonMatchesTest::testEvaluate with data set \"valid JSON\" (true, '{\"Mascott\":\"Tux\"}', '{\"Mascott\":\"Tux\"}')",
    "status": "pass",
    "time": 0.00016903877258301,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_Constraint_JsonMatchesTest::testEvaluate",
    "test": "Framework_Constraint_JsonMatchesTest::testEvaluate with data set \"error syntax\" (false, '{\"Mascott\"::}', '{\"Mascott\":\"Tux\"}')"
}{
    "event": "test",
    "suite": "Framework_Constraint_JsonMatchesTest::testEvaluate",
    "test": "Framework_Constraint_JsonMatchesTest::testEvaluate with data set \"error syntax\" (false, '{\"Mascott\"::}', '{\"Mascott\":\"Tux\"}')",
    "status": "pass",
    "time": 0.0001380443572998,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_Constraint_JsonMatchesTest::testEvaluate",
    "test": "Framework_Constraint_JsonMatchesTest::testEvaluate with data set \"error UTF-8\" (false, '\"\\\\xB1\\\\x31\"', '{\"Mascott\":\"Tux\"}')"
}{
    "event": "test",
    "suite": "Framework_Constraint_JsonMatchesTest::testEvaluate",
    "test": "Framework_Constraint_JsonMatchesTest::testEvaluate with data set \"error UTF-8\" (false, '\"\\\\xB1\\\\x31\"', '{\"Mascott\":\"Tux\"}')",
    "status": "pass",
    "time": 0.00014185905456543,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_Constraint_JsonMatchesTest::testEvaluate",
    "test": "Framework_Constraint_JsonMatchesTest::testEvaluate with data set \"invalid JSON in class instantiation\" (false, '{\"Mascott\":\"Tux\"}', '{\"Mascott\"::}')"
}{
    "event": "test",
    "suite": "Framework_Constraint_JsonMatchesTest::testEvaluate",
    "test": "Framework_Constraint_JsonMatchesTest::testEvaluate with data set \"invalid JSON in class instantiation\" (false, '{\"Mascott\":\"Tux\"}', '{\"Mascott\"::}')",
    "status": "pass",
    "time": 0.00013995170593262,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_Constraint_JsonMatchesTest::testToString"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_Constraint_JsonMatchesTest::testToString",
    "status": "pass",
    "time": 0.00012493133544922,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_ConstraintTest",
    "tests": 125
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintArrayHasKey"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintArrayHasKey",
    "status": "pass",
    "time": 0.000518798828125,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintArrayHasKey2"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintArrayHasKey2",
    "status": "pass",
    "time": 0.00024890899658203,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintArrayNotHasKey"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintArrayNotHasKey",
    "status": "pass",
    "time": 0.00031399726867676,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintArrayNotHasKey2"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintArrayNotHasKey2",
    "status": "pass",
    "time": 0.00027012825012207,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintFileExists"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintFileExists",
    "status": "pass",
    "time": 0.00025296211242676,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintFileExists2"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintFileExists2",
    "status": "pass",
    "time": 0.00022292137145996,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintFileNotExists"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintFileNotExists",
    "status": "pass",
    "time": 0.0003058910369873,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintFileNotExists2"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintFileNotExists2",
    "status": "pass",
    "time": 0.00026082992553711,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintGreaterThan"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintGreaterThan",
    "status": "pass",
    "time": 0.00029611587524414,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintGreaterThan2"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintGreaterThan2",
    "status": "pass",
    "time": 0.0002601146697998,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintNotGreaterThan"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintNotGreaterThan",
    "status": "pass",
    "time": 0.00037384033203125,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintNotGreaterThan2"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintNotGreaterThan2",
    "status": "pass",
    "time": 0.00038003921508789,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintGreaterThanOrEqual"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintGreaterThanOrEqual",
    "status": "pass",
    "time": 0.001244068145752,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintGreaterThanOrEqual2"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintGreaterThanOrEqual2",
    "status": "pass",
    "time": 0.0004880428314209,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintNotGreaterThanOrEqual"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintNotGreaterThanOrEqual",
    "status": "pass",
    "time": 0.00037312507629395,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintNotGreaterThanOrEqual2"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintNotGreaterThanOrEqual2",
    "status": "pass",
    "time": 0.00029206275939941,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintIsAnything"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintIsAnything",
    "status": "pass",
    "time": 0.00017404556274414,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintNotIsAnything"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintNotIsAnything",
    "status": "pass",
    "time": 0.00028491020202637,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintIsEqual"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest",
    "test": "Framework_ConstraintTest::testConstraintIsEqual",
    "status": "pass",
    "time": 0.00055313110351562,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "tests": 16
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #0 (1, 0, 'Failed asserting that 0 match...ed 1.\\n')"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #0 (1, 0, 'Failed asserting that 0 match...ed 1.\\n')",
    "status": "pass",
    "time": 0.00039815902709961,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #1 (1.1, 0, 'Failed asserting that 0 match... 1.1.\\n')"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #1 (1.1, 0, 'Failed asserting that 0 match... 1.1.\\n')",
    "status": "pass",
    "time": 0.0010972023010254,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #2 ('a', 'b', 'Failed asserting that two str...\\n+'b'\\n')"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #2 ('a', 'b', 'Failed asserting that two str...\\n+'b'\\n')",
    "status": "pass",
    "time": 0.00087189674377441,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #3 ('a\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\nj\\nk', 'a\\np\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\nw\\nk', 'Failed asserting that two str...w\\n k'\\n')"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #3 ('a\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\nj\\nk', 'a\\np\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\nw\\nk', 'Failed asserting that two str...w\\n k'\\n')",
    "status": "pass",
    "time": 0.00061392784118652,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #4 (1, array(0), 'Array (...) does not match ex...ger\".\\n')"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #4 (1, array(0), 'Array (...) does not match ex...ger\".\\n')",
    "status": "pass",
    "time": 0.00034093856811523,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #5 (array(0), 1, '1 does not match expected typ...ray\".\\n')"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #5 (array(0), 1, '1 does not match expected typ...ray\".\\n')",
    "status": "pass",
    "time": 0.00033783912658691,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #6 (array(0), array(1), 'Failed asserting that two arr... 1\\n )\\n')"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #6 (array(0), array(1), 'Failed asserting that two arr... 1\\n )\\n')",
    "status": "pass",
    "time": 0.00052905082702637,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #7 (array(true), array('true'), 'Failed asserting that two arr...e'\\n )\\n')"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #7 (array(true), array('true'), 'Failed asserting that two arr...e'\\n )\\n')",
    "status": "pass",
    "time": 0.00051498413085938,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #8 (array(0, array(1), array(2), 3), array(0, array(4), array(2), 3), 'Failed asserting that two arr... 3\\n )\\n')"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #8 (array(0, array(1), array(2), 3), array(0, array(4), array(2), 3), 'Failed asserting that two arr... 3\\n )\\n')",
    "status": "pass",
    "time": 0.00090479850769043,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #9 (stdClass Object (...), array(0), 'Array (...) does not match ex...ect\".\\n')"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #9 (stdClass Object (...), array(0), 'Array (...) does not match ex...ect\".\\n')",
    "status": "pass",
    "time": 0.00031614303588867,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #10 (array(0), stdClass Object (...), 'stdClass Object (...) does no...ray\".\\n')"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #10 (array(0), stdClass Object (...), 'stdClass Object (...) does no...ray\".\\n')",
    "status": "pass",
    "time": 0.00031709671020508,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #11 (stdClass Object (...), stdClass Object (), 'Failed asserting that two obj...r'\\n )\\n')"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #11 (stdClass Object (...), stdClass Object (), 'Failed asserting that two obj...r'\\n )\\n')",
    "status": "pass",
    "time": 0.00046110153198242,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #12 (stdClass Object (...), stdClass Object (...), 'Failed asserting that two obj....)\\n )\\n')"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #12 (stdClass Object (...), stdClass Object (...), 'Failed asserting that two obj....)\\n )\\n')",
    "status": "pass",
    "time": 0.0023198127746582,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #13 (DOMDocument Object (), DOMDocument Object (), 'Failed asserting that two DOM...root>\\n')"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #13 (DOMDocument Object (), DOMDocument Object (), 'Failed asserting that two DOM...root>\\n')",
    "status": "pass",
    "time": 0.00045394897460938,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #14 (DateTime Object (...), DateTime Object (...), 'Failed asserting that two Dat...-0500\\n')"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #14 (DateTime Object (...), DateTime Object (...), 'Failed asserting that two Dat...-0500\\n')",
    "status": "pass",
    "time": 0.0003819465637207,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #15 (SplObjectStorage Object (...), SplObjectStorage Object (...), 'Failed asserting that two obj...&0\\n )\\n')"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest::testConstraintIsEqual2",
    "test": "Framework_ConstraintTest::testConstraintIsEqual2 with data set #15 (SplObjectStorage Object (...), SplObjectStorage Object (...), 'Failed asserting that two obj...&0\\n )\\n')",
    "status": "pass",
    "time": 0.00078606605529785,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNotEqual"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNotEqual",
    "status": "pass",
    "time": 0.00048589706420898,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNotEqual2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNotEqual2",
    "status": "pass",
    "time": 0.00029706954956055,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsIdentical"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsIdentical",
    "status": "pass",
    "time": 0.00032186508178711,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsIdentical2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsIdentical2",
    "status": "pass",
    "time": 0.00024986267089844,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsIdentical3"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsIdentical3",
    "status": "pass",
    "time": 0.00036811828613281,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNotIdentical"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNotIdentical",
    "status": "pass",
    "time": 0.00036883354187012,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNotIdentical2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNotIdentical2",
    "status": "pass",
    "time": 0.00028109550476074,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNotIdentical3"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNotIdentical3",
    "status": "pass",
    "time": 0.00030398368835449,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsInstanceOf"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsInstanceOf",
    "status": "pass",
    "time": 0.0003969669342041,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsInstanceOf2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsInstanceOf2",
    "status": "pass",
    "time": 0.00026607513427734,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNotInstanceOf"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNotInstanceOf",
    "status": "pass",
    "time": 0.00035715103149414,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNotInstanceOf2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNotInstanceOf2",
    "status": "pass",
    "time": 0.00026988983154297,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsType"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsType",
    "status": "pass",
    "time": 0.00039505958557129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsType2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsType2",
    "status": "pass",
    "time": 0.00033020973205566,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_ConstraintTest::testConstraintIsResourceTypeEvaluatesCorrectlyWithResources",
    "tests": 2
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest::testConstraintIsResourceTypeEvaluatesCorrectlyWithResources",
    "test": "Framework_ConstraintTest::testConstraintIsResourceTypeEvaluatesCorrectlyWithResources with data set \"open resource\" (resource(70) of type (stream))"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest::testConstraintIsResourceTypeEvaluatesCorrectlyWithResources",
    "test": "Framework_ConstraintTest::testConstraintIsResourceTypeEvaluatesCorrectlyWithResources with data set \"open resource\" (resource(70) of type (stream))",
    "status": "pass",
    "time": 0.00015783309936523,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_ConstraintTest::testConstraintIsResourceTypeEvaluatesCorrectlyWithResources",
    "test": "Framework_ConstraintTest::testConstraintIsResourceTypeEvaluatesCorrectlyWithResources with data set \"closed resource\" (NULL)"
}{
    "event": "test",
    "suite": "Framework_ConstraintTest::testConstraintIsResourceTypeEvaluatesCorrectlyWithResources",
    "test": "Framework_ConstraintTest::testConstraintIsResourceTypeEvaluatesCorrectlyWithResources with data set \"closed resource\" (NULL)",
    "status": "pass",
    "time": 0.0001521110534668,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNotType"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNotType",
    "status": "pass",
    "time": 0.00040292739868164,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNotType2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNotType2",
    "status": "pass",
    "time": 0.00027084350585938,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNull"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNull",
    "status": "pass",
    "time": 0.0003211498260498,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNull2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNull2",
    "status": "pass",
    "time": 0.00023603439331055,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNotNull"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNotNull",
    "status": "pass",
    "time": 0.00031113624572754,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNotNull2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsNotNull2",
    "status": "pass",
    "time": 0.00024795532226562,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintLessThan"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintLessThan",
    "status": "pass",
    "time": 0.00029397010803223,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintLessThan2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintLessThan2",
    "status": "pass",
    "time": 0.00024509429931641,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintNotLessThan"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintNotLessThan",
    "status": "pass",
    "time": 0.00033187866210938,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintNotLessThan2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintNotLessThan2",
    "status": "pass",
    "time": 0.00025510787963867,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintLessThanOrEqual"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintLessThanOrEqual",
    "status": "pass",
    "time": 0.00086784362792969,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintCallback"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintCallback",
    "status": "pass",
    "time": 0.00036096572875977,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintCallbackFailure"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintCallbackFailure",
    "status": "pass",
    "time": 0.00044393539428711,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintLessThanOrEqual2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintLessThanOrEqual2",
    "status": "pass",
    "time": 0.00041389465332031,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintNotLessThanOrEqual"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintNotLessThanOrEqual",
    "status": "pass",
    "time": 0.00047492980957031,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintNotLessThanOrEqual2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintNotLessThanOrEqual2",
    "status": "pass",
    "time": 0.00028610229492188,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintClassHasAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintClassHasAttribute",
    "status": "pass",
    "time": 0.00029087066650391,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintClassHasAttribute2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintClassHasAttribute2",
    "status": "pass",
    "time": 0.0002288818359375,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintClassNotHasAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintClassNotHasAttribute",
    "status": "pass",
    "time": 0.00029993057250977,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintClassNotHasAttribute2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintClassNotHasAttribute2",
    "status": "pass",
    "time": 0.00023698806762695,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintClassHasStaticAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintClassHasStaticAttribute",
    "status": "pass",
    "time": 0.0002751350402832,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintClassHasStaticAttribute2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintClassHasStaticAttribute2",
    "status": "pass",
    "time": 0.00021886825561523,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintClassNotHasStaticAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintClassNotHasStaticAttribute",
    "status": "pass",
    "time": 0.00038695335388184,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintClassNotHasStaticAttribute2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintClassNotHasStaticAttribute2",
    "status": "pass",
    "time": 0.00024986267089844,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintObjectHasAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintObjectHasAttribute",
    "status": "pass",
    "time": 0.00027298927307129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintObjectHasAttribute2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintObjectHasAttribute2",
    "status": "pass",
    "time": 0.00022792816162109,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintObjectNotHasAttribute"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintObjectNotHasAttribute",
    "status": "pass",
    "time": 0.00031113624572754,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintObjectNotHasAttribute2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintObjectNotHasAttribute2",
    "status": "pass",
    "time": 0.00025296211242676,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintPCREMatch"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintPCREMatch",
    "status": "pass",
    "time": 0.00028800964355469,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintPCREMatch2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintPCREMatch2",
    "status": "pass",
    "time": 0.00023388862609863,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintPCRENotMatch"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintPCRENotMatch",
    "status": "pass",
    "time": 0.00029182434082031,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintPCRENotMatch2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintPCRENotMatch2",
    "status": "pass",
    "time": 0.00024795532226562,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringMatches"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringMatches",
    "status": "pass",
    "time": 0.00018906593322754,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringMatches2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringMatches2",
    "status": "pass",
    "time": 0.00017118453979492,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringMatches3"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringMatches3",
    "status": "pass",
    "time": 0.00018692016601562,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringMatches4"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringMatches4",
    "status": "pass",
    "time": 0.00018095970153809,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringMatches5"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringMatches5",
    "status": "pass",
    "time": 0.00017809867858887,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringMatches6"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringMatches6",
    "status": "pass",
    "time": 0.00018811225891113,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringStartsWith"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringStartsWith",
    "status": "pass",
    "time": 0.00027608871459961,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringStartsWith2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringStartsWith2",
    "status": "pass",
    "time": 0.00022292137145996,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringStartsNotWith"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringStartsNotWith",
    "status": "pass",
    "time": 0.00030207633972168,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringStartsNotWith2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringStartsNotWith2",
    "status": "pass",
    "time": 0.00024604797363281,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringContains"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringContains",
    "status": "pass",
    "time": 0.00028896331787109,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringContains2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringContains2",
    "status": "pass",
    "time": 0.00023388862609863,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringNotContains"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringNotContains",
    "status": "pass",
    "time": 0.00030899047851562,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringNotContains2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringNotContains2",
    "status": "pass",
    "time": 0.00024509429931641,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringEndsWith"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringEndsWith",
    "status": "pass",
    "time": 0.00028204917907715,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringEndsWith2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringEndsWith2",
    "status": "pass",
    "time": 0.00022792816162109,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringEndsNotWith"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringEndsNotWith",
    "status": "pass",
    "time": 0.00030708312988281,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringEndsNotWith2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintStringEndsNotWith2",
    "status": "pass",
    "time": 0.00024008750915527,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintArrayContainsCheckForObjectIdentity"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintArrayContainsCheckForObjectIdentity",
    "status": "pass",
    "time": 0.00017118453979492,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintArrayContains"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintArrayContains",
    "status": "pass",
    "time": 0.00031805038452148,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintArrayContains2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintArrayContains2",
    "status": "pass",
    "time": 0.00025701522827148,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintArrayNotContains"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintArrayNotContains",
    "status": "pass",
    "time": 0.00035691261291504,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintArrayNotContains2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintArrayNotContains2",
    "status": "pass",
    "time": 0.0003058910369873,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintSplObjectStorageContains"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintSplObjectStorageContains",
    "status": "pass",
    "time": 0.00048589706420898,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintSplObjectStorageContains2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintSplObjectStorageContains2",
    "status": "pass",
    "time": 0.00037503242492676,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testAttributeEqualTo"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testAttributeEqualTo",
    "status": "pass",
    "time": 0.00083208084106445,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testAttributeEqualTo2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testAttributeEqualTo2",
    "status": "pass",
    "time": 0.00052809715270996,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testAttributeNotEqualTo"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testAttributeNotEqualTo",
    "status": "pass",
    "time": 0.00095295906066895,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testAttributeNotEqualTo2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testAttributeNotEqualTo2",
    "status": "pass",
    "time": 0.00074100494384766,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsEmpty"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsEmpty",
    "status": "pass",
    "time": 0.0003659725189209,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsEmpty2"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintIsEmpty2",
    "status": "pass",
    "time": 0.00024318695068359,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintCountWithAnArray"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintCountWithAnArray",
    "status": "pass",
    "time": 0.00015711784362793,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintCountWithAnIteratorWhichDoesNotImplementCountable"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintCountWithAnIteratorWhichDoesNotImplementCountable",
    "status": "pass",
    "time": 0.00021195411682129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintCountWithAnObjectImplementingCountable"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintCountWithAnObjectImplementingCountable",
    "status": "pass",
    "time": 0.00014710426330566,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintCountFailing"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintCountFailing",
    "status": "pass",
    "time": 0.00023913383483887,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintNotCountFailing"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintNotCountFailing",
    "status": "pass",
    "time": 0.00025701522827148,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintSameSizeWithAnArray"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintSameSizeWithAnArray",
    "status": "pass",
    "time": 0.00014305114746094,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintSameSizeWithAnIteratorWhichDoesNotImplementCountable"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintSameSizeWithAnIteratorWhichDoesNotImplementCountable",
    "status": "pass",
    "time": 0.00020384788513184,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintSameSizeWithAnObjectImplementingCountable"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintSameSizeWithAnObjectImplementingCountable",
    "status": "pass",
    "time": 0.00014591217041016,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintSameSizeFailing"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintSameSizeFailing",
    "status": "pass",
    "time": 0.00034809112548828,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintNotSameSizeFailing"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintNotSameSizeFailing",
    "status": "pass",
    "time": 0.00083708763122559,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintException"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_ConstraintTest::testConstraintException",
    "status": "pass",
    "time": 0.00070500373840332,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "",
    "tests": 16
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_SuiteTest::testAddTestSuite"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_SuiteTest::testAddTestSuite",
    "status": "pass",
    "time": 0.006587028503418,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_SuiteTest::testInheritedTests"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_SuiteTest::testInheritedTests",
    "status": "pass",
    "time": 0.0047409534454346,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_SuiteTest::testNoTestCases"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_SuiteTest::testNoTestCases",
    "status": "pass",
    "time": 0.0062360763549805,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_SuiteTest::testNoTestCaseClass"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_SuiteTest::testNoTestCaseClass",
    "status": "pass",
    "time": 0.00024294853210449,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_SuiteTest::testNotExistingTestCase"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_SuiteTest::testNotExistingTestCase",
    "status": "pass",
    "time": 0.0010619163513184,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_SuiteTest::testNotPublicTestCase"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_SuiteTest::testNotPublicTestCase",
    "status": "pass",
    "time": 0.0013689994812012,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_SuiteTest::testNotVoidTestCase"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_SuiteTest::testNotVoidTestCase",
    "status": "pass",
    "time": 0.0012021064758301,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_SuiteTest::testOneTestCase"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_SuiteTest::testOneTestCase",
    "status": "pass",
    "time": 0.0019900798797607,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_SuiteTest::testShadowedTests"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_SuiteTest::testShadowedTests",
    "status": "pass",
    "time": 0.0049700736999512,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_SuiteTest::testBeforeClassAndAfterClassAnnotations"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_SuiteTest::testBeforeClassAndAfterClassAnnotations",
    "status": "pass",
    "time": 0.0050170421600342,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_SuiteTest::testBeforeAnnotation"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_SuiteTest::testBeforeAnnotation",
    "status": "pass",
    "time": 0.006321907043457,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_SuiteTest::testTestWithAnnotation"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_SuiteTest::testTestWithAnnotation",
    "status": "pass",
    "time": 0.0063130855560303,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_SuiteTest::testSkippedTestDataProvider"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_SuiteTest::testSkippedTestDataProvider",
    "status": "pass",
    "time": 0.0079429149627686,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_SuiteTest::testIncompleteTestDataProvider"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_SuiteTest::testIncompleteTestDataProvider",
    "status": "pass",
    "time": 0.0078449249267578,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_SuiteTest::testRequirementsBeforeClassHook"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_SuiteTest::testRequirementsBeforeClassHook",
    "status": "pass",
    "time": 0.0035400390625,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Framework_SuiteTest::testDontSkipInheritedClass"
}{
    "event": "test",
    "suite": "",
    "test": "Framework_SuiteTest::testDontSkipInheritedClass",
    "status": "pass",
    "time": 0.011660099029541,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_TestCaseTest",
    "tests": 46
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testCaseToString"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testCaseToString",
    "status": "pass",
    "time": 0.00015497207641602,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testSuccess"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testSuccess",
    "status": "pass",
    "time": 0.00085091590881348,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testFailure"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testFailure",
    "status": "pass",
    "time": 0.0031719207763672,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testError"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testError",
    "status": "pass",
    "time": 0.0033249855041504,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testSkipped"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testSkipped",
    "status": "pass",
    "time": 0.0033271312713623,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testIncomplete"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testIncomplete",
    "status": "pass",
    "time": 0.0032479763031006,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionInSetUp"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionInSetUp",
    "status": "pass",
    "time": 0.0032057762145996,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionInAssertPreConditions"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionInAssertPreConditions",
    "status": "pass",
    "time": 0.0050680637359619,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionInTest"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionInTest",
    "status": "pass",
    "time": 0.0049331188201904,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionInAssertPostConditions"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionInAssertPostConditions",
    "status": "pass",
    "time": 0.0032970905303955,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionInTearDown"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionInTearDown",
    "status": "pass",
    "time": 0.0034110546112061,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testNoArgTestCasePasses"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testNoArgTestCasePasses",
    "status": "pass",
    "time": 0.0040900707244873,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testWasRun"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testWasRun",
    "status": "pass",
    "time": 0.004464864730835,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testException"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testException",
    "status": "pass",
    "time": 0.003148078918457,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionWithEmptyMessage"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionWithEmptyMessage",
    "status": "pass",
    "time": 0.00081300735473633,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionWithNullMessage"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionWithNullMessage",
    "status": "pass",
    "time": 0.00078105926513672,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionWithMessage"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionWithMessage",
    "status": "pass",
    "time": 0.00083112716674805,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionWithWrongMessage"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionWithWrongMessage",
    "status": "pass",
    "time": 0.0010018348693848,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionWithRegexpMessage"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionWithRegexpMessage",
    "status": "pass",
    "time": 0.00089502334594727,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionWithWrongRegexpMessage"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionWithWrongRegexpMessage",
    "status": "pass",
    "time": 0.0010428428649902,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionWithInvalidRegexpMessage"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExceptionWithInvalidRegexpMessage",
    "status": "pass",
    "time": 0.0014441013336182,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testNoException"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testNoException",
    "status": "pass",
    "time": 0.0038831233978271,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testWrongException"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testWrongException",
    "status": "pass",
    "time": 0.0010590553283691,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testGlobalsBackupPre"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testGlobalsBackupPre",
    "status": "pass",
    "time": 0.00070309638977051,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testGlobalsBackupPost"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testGlobalsBackupPost",
    "status": "pass",
    "time": 0.00022697448730469,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testStaticAttributesBackupPre"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testStaticAttributesBackupPre",
    "status": "pass",
    "time": 0.007457971572876,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testStaticAttributesBackupPost"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testStaticAttributesBackupPost",
    "status": "pass",
    "time": 0.00026607513427734,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testIsInIsolationReturnsFalse"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testIsInIsolationReturnsFalse",
    "status": "pass",
    "time": 0.0033490657806396,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testIsInIsolationReturnsTrue"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testIsInIsolationReturnsTrue",
    "status": "pass",
    "time": 0.091995000839233,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExpectOutputStringFooActualFoo"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExpectOutputStringFooActualFoo",
    "status": "pass",
    "time": 0.0042250156402588,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExpectOutputStringFooActualBar"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExpectOutputStringFooActualBar",
    "status": "pass",
    "time": 0.00130295753479,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExpectOutputRegexFooActualFoo"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExpectOutputRegexFooActualFoo",
    "status": "pass",
    "time": 0.00081396102905273,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExpectOutputRegexFooActualBar"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testExpectOutputRegexFooActualBar",
    "status": "pass",
    "time": 0.00093483924865723,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testSkipsIfRequiresHigherVersionOfPHPUnit"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testSkipsIfRequiresHigherVersionOfPHPUnit",
    "status": "pass",
    "time": 0.0036849975585938,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testSkipsIfRequiresHigherVersionOfPHP"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testSkipsIfRequiresHigherVersionOfPHP",
    "status": "pass",
    "time": 0.00091409683227539,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testSkipsIfRequiresNonExistingOs"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testSkipsIfRequiresNonExistingOs",
    "status": "pass",
    "time": 0.00089216232299805,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testSkipsIfRequiresNonExistingFunction"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testSkipsIfRequiresNonExistingFunction",
    "status": "pass",
    "time": 0.0008699893951416,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testSkipsIfRequiresNonExistingExtension"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testSkipsIfRequiresNonExistingExtension",
    "status": "pass",
    "time": 0.00084495544433594,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testSkipsIfRequiresExtensionWithAMinimumVersion"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testSkipsIfRequiresExtensionWithAMinimumVersion",
    "status": "pass",
    "time": 0.00084710121154785,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testSkipsProvidesMessagesForAllSkippingReasons"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testSkipsProvidesMessagesForAllSkippingReasons",
    "status": "pass",
    "time": 0.00092291831970215,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testRequiringAnExistingMethodDoesNotSkip"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testRequiringAnExistingMethodDoesNotSkip",
    "status": "pass",
    "time": 0.00077199935913086,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testRequiringAnExistingFunctionDoesNotSkip"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testRequiringAnExistingFunctionDoesNotSkip",
    "status": "pass",
    "time": 0.00071907043457031,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testRequiringAnExistingExtensionDoesNotSkip"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testRequiringAnExistingExtensionDoesNotSkip",
    "status": "pass",
    "time": 0.00071096420288086,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testRequiringAnExistingOsDoesNotSkip"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testRequiringAnExistingOsDoesNotSkip",
    "status": "pass",
    "time": 0.00078010559082031,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testCurrentWorkingDirectoryIsRestored"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testCurrentWorkingDirectoryIsRestored",
    "status": "pass",
    "time": 0.004080057144165,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testTypeErrorCanBeExpected"
}{
    "event": "test",
    "suite": "Framework_TestCaseTest",
    "test": "Framework_TestCaseTest::testTypeErrorCanBeExpected",
    "status": "error",
    "time": 0.00023484230041504,
    "trace": [
        {
            "file": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/src\/Framework\/Assert.php",
            "line": 2902
        },
        {
            "file": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/src\/Framework\/TestCase.php",
            "line": 631,
            "function": "markTestSkipped",
            "class": "PHPUnit_Framework_Assert",
            "type": "::"
        },
        {
            "file": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/src\/Framework\/TestCase.php",
            "line": 828,
            "function": "checkRequirements",
            "class": "PHPUnit_Framework_TestCase",
            "type": "->"
        },
        {
            "file": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/src\/Framework\/TestResult.php",
            "line": 686,
            "function": "runBare",
            "class": "PHPUnit_Framework_TestCase",
            "type": "->"
        },
        {
            "file": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/src\/Framework\/TestCase.php",
            "line": 800,
            "function": "run",
            "class": "PHPUnit_Framework_TestResult",
            "type": "->"
        },
        {
            "file": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/src\/Framework\/TestSuite.php",
            "line": 747,
            "function": "run",
            "class": "PHPUnit_Framework_TestCase",
            "type": "->"
        },
        {
            "file": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/src\/Framework\/TestSuite.php",
            "line": 747,
            "function": "run",
            "class": "PHPUnit_Framework_TestSuite",
            "type": "->"
        },
        {
            "file": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/src\/Framework\/TestSuite.php",
            "line": 747,
            "function": "run",
            "class": "PHPUnit_Framework_TestSuite",
            "type": "->"
        },
        {
            "file": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/src\/TextUI\/TestRunner.php",
            "line": 432,
            "function": "run",
            "class": "PHPUnit_Framework_TestSuite",
            "type": "->"
        },
        {
            "file": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/src\/TextUI\/Command.php",
            "line": 158,
            "function": "doRun",
            "class": "PHPUnit_TextUI_TestRunner",
            "type": "->"
        },
        {
            "file": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/src\/TextUI\/Command.php",
            "line": 109,
            "function": "run",
            "class": "PHPUnit_TextUI_Command",
            "type": "->"
        }
    ],
    "message": "Skipped Test: PHP 7 (or later) is required.",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_TestFailureTest",
    "tests": 1
}{
    "event": "testStart",
    "suite": "Framework_TestFailureTest",
    "test": "Framework_TestFailureTest::testToString"
}{
    "event": "test",
    "suite": "Framework_TestFailureTest",
    "test": "Framework_TestFailureTest::testToString",
    "status": "pass",
    "time": 0.00022697448730469,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_TestImplementorTest",
    "tests": 1
}{
    "event": "testStart",
    "suite": "Framework_TestImplementorTest",
    "test": "Framework_TestImplementorTest::testSuccessfulRun"
}{
    "event": "test",
    "suite": "Framework_TestImplementorTest",
    "test": "Framework_TestImplementorTest::testSuccessfulRun",
    "status": "pass",
    "time": 0.0017979145050049,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Framework_TestListenerTest",
    "tests": 3
}{
    "event": "testStart",
    "suite": "Framework_TestListenerTest",
    "test": "Framework_TestListenerTest::testError"
}{
    "event": "test",
    "suite": "Framework_TestListenerTest",
    "test": "Framework_TestListenerTest::testError",
    "status": "pass",
    "time": 0.0011851787567139,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestListenerTest",
    "test": "Framework_TestListenerTest::testFailure"
}{
    "event": "test",
    "suite": "Framework_TestListenerTest",
    "test": "Framework_TestListenerTest::testFailure",
    "status": "pass",
    "time": 0.0010170936584473,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Framework_TestListenerTest",
    "test": "Framework_TestListenerTest::testStartStop"
}{
    "event": "test",
    "suite": "Framework_TestListenerTest",
    "test": "Framework_TestListenerTest::testStartStop",
    "status": "pass",
    "time": 0.00082802772521973,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Extensions_PhptTestCaseTest",
    "tests": 11
}{
    "event": "testStart",
    "suite": "Extensions_PhptTestCaseTest",
    "test": "Extensions_PhptTestCaseTest::testShouldRunFileSectionAsTest"
}{
    "event": "test",
    "suite": "Extensions_PhptTestCaseTest",
    "test": "Extensions_PhptTestCaseTest::testShouldRunFileSectionAsTest",
    "status": "pass",
    "time": 0.005101203918457,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Extensions_PhptTestCaseTest",
    "test": "Extensions_PhptTestCaseTest::testShouldRunSkipifSectionWhenExists"
}{
    "event": "test",
    "suite": "Extensions_PhptTestCaseTest",
    "test": "Extensions_PhptTestCaseTest::testShouldRunSkipifSectionWhenExists",
    "status": "pass",
    "time": 0.00090909004211426,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Extensions_PhptTestCaseTest",
    "test": "Extensions_PhptTestCaseTest::testShouldNotRunTestSectionIfSkipifSectionReturnsOutputWithSkipWord"
}{
    "event": "test",
    "suite": "Extensions_PhptTestCaseTest",
    "test": "Extensions_PhptTestCaseTest::testShouldNotRunTestSectionIfSkipifSectionReturnsOutputWithSkipWord",
    "status": "pass",
    "time": 0.00052785873413086,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Extensions_PhptTestCaseTest",
    "test": "Extensions_PhptTestCaseTest::testShouldRunCleanSectionWhenDefined"
}{
    "event": "test",
    "suite": "Extensions_PhptTestCaseTest",
    "test": "Extensions_PhptTestCaseTest::testShouldRunCleanSectionWhenDefined",
    "status": "pass",
    "time": 0.00072216987609863,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Extensions_PhptTestCaseTest",
    "test": "Extensions_PhptTestCaseTest::testShouldThrowsAnExceptionWhenPhptFileIsEmpty"
}{
    "event": "test",
    "suite": "Extensions_PhptTestCaseTest",
    "test": "Extensions_PhptTestCaseTest::testShouldThrowsAnExceptionWhenPhptFileIsEmpty",
    "status": "pass",
    "time": 0.00040602684020996,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Extensions_PhptTestCaseTest",
    "test": "Extensions_PhptTestCaseTest::testShouldThrowsAnExceptionWhenFileSectionIsMissing"
}{
    "event": "test",
    "suite": "Extensions_PhptTestCaseTest",
    "test": "Extensions_PhptTestCaseTest::testShouldThrowsAnExceptionWhenFileSectionIsMissing",
    "status": "pass",
    "time": 0.00038909912109375,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Extensions_PhptTestCaseTest",
    "test": "Extensions_PhptTestCaseTest::testShouldThrowsAnExceptionWhenThereIsNoExpecOrExpectifOrExpecregexSectionInPhptFile"
}{
    "event": "test",
    "suite": "Extensions_PhptTestCaseTest",
    "test": "Extensions_PhptTestCaseTest::testShouldThrowsAnExceptionWhenThereIsNoExpecOrExpectifOrExpecregexSectionInPhptFile",
    "status": "pass",
    "time": 0.00038290023803711,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Extensions_PhptTestCaseTest",
    "test": "Extensions_PhptTestCaseTest::testShouldValidateExpectSession"
}{
    "event": "test",
    "suite": "Extensions_PhptTestCaseTest",
    "test": "Extensions_PhptTestCaseTest::testShouldValidateExpectSession",
    "status": "pass",
    "time": 0.00046801567077637,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Extensions_PhptTestCaseTest",
    "test": "Extensions_PhptTestCaseTest::testShouldValidateExpectfSession"
}{
    "event": "test",
    "suite": "Extensions_PhptTestCaseTest",
    "test": "Extensions_PhptTestCaseTest::testShouldValidateExpectfSession",
    "status": "pass",
    "time": 0.00049090385437012,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Extensions_PhptTestCaseTest",
    "test": "Extensions_PhptTestCaseTest::testShouldValidateExpectregexSession"
}{
    "event": "test",
    "suite": "Extensions_PhptTestCaseTest",
    "test": "Extensions_PhptTestCaseTest::testShouldValidateExpectregexSession",
    "status": "pass",
    "time": 0.00047111511230469,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Extensions_PhptTestCaseTest",
    "test": "Extensions_PhptTestCaseTest::testParseIniSection"
}{
    "event": "test",
    "suite": "Extensions_PhptTestCaseTest",
    "test": "Extensions_PhptTestCaseTest::testParseIniSection",
    "status": "pass",
    "time": 0.00026488304138184,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Extensions_RepeatedTestTest",
    "tests": 4
}{
    "event": "testStart",
    "suite": "Extensions_RepeatedTestTest",
    "test": "Extensions_RepeatedTestTest::testRepeatedOnce"
}{
    "event": "test",
    "suite": "Extensions_RepeatedTestTest",
    "test": "Extensions_RepeatedTestTest::testRepeatedOnce",
    "status": "pass",
    "time": 0.0019810199737549,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Extensions_RepeatedTestTest",
    "test": "Extensions_RepeatedTestTest::testRepeatedMoreThanOnce"
}{
    "event": "test",
    "suite": "Extensions_RepeatedTestTest",
    "test": "Extensions_RepeatedTestTest::testRepeatedMoreThanOnce",
    "status": "pass",
    "time": 0.0040218830108643,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Extensions_RepeatedTestTest",
    "test": "Extensions_RepeatedTestTest::testRepeatedZero"
}{
    "event": "test",
    "suite": "Extensions_RepeatedTestTest",
    "test": "Extensions_RepeatedTestTest::testRepeatedZero",
    "status": "pass",
    "time": 0.00021600723266602,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Extensions_RepeatedTestTest",
    "test": "Extensions_RepeatedTestTest::testRepeatedNegative"
}{
    "event": "test",
    "suite": "Extensions_RepeatedTestTest",
    "test": "Extensions_RepeatedTestTest::testRepeatedNegative",
    "status": "pass",
    "time": 0.00040888786315918,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Runner_BaseTestRunnerTest",
    "tests": 1
}{
    "event": "testStart",
    "suite": "Runner_BaseTestRunnerTest",
    "test": "Runner_BaseTestRunnerTest::testInvokeNonStaticSuite"
}{
    "event": "test",
    "suite": "Runner_BaseTestRunnerTest",
    "test": "Runner_BaseTestRunnerTest::testInvokeNonStaticSuite",
    "status": "pass",
    "time": 0.0015602111816406,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Util_ConfigurationTest",
    "tests": 16
}{
    "event": "testStart",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testExceptionIsThrownForNotExistingConfigurationFile"
}{
    "event": "test",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testExceptionIsThrownForNotExistingConfigurationFile",
    "status": "pass",
    "time": 0.0015909671783447,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testShouldReadColorsWhenTrueInConfigurationfile"
}{
    "event": "test",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testShouldReadColorsWhenTrueInConfigurationfile",
    "status": "pass",
    "time": 0.00033283233642578,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testShouldReadColorsWhenFalseInConfigurationfile"
}{
    "event": "test",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testShouldReadColorsWhenFalseInConfigurationfile",
    "status": "pass",
    "time": 0.00027585029602051,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testShouldReadColorsWhenEmptyInConfigurationfile"
}{
    "event": "test",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testShouldReadColorsWhenEmptyInConfigurationfile",
    "status": "pass",
    "time": 0.00028085708618164,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testShouldReadColorsWhenInvalidInConfigurationfile"
}{
    "event": "test",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testShouldReadColorsWhenInvalidInConfigurationfile",
    "status": "pass",
    "time": 0.00026202201843262,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testFilterConfigurationIsReadCorrectly"
}{
    "event": "test",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testFilterConfigurationIsReadCorrectly",
    "status": "pass",
    "time": 0.00024509429931641,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testGroupConfigurationIsReadCorrectly"
}{
    "event": "test",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testGroupConfigurationIsReadCorrectly",
    "status": "pass",
    "time": 0.00015497207641602,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testListenerConfigurationIsReadCorrectly"
}{
    "event": "test",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testListenerConfigurationIsReadCorrectly",
    "status": "pass",
    "time": 0.0014300346374512,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testLoggingConfigurationIsReadCorrectly"
}{
    "event": "test",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testLoggingConfigurationIsReadCorrectly",
    "status": "pass",
    "time": 0.00077104568481445,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testPHPConfigurationIsReadCorrectly"
}{
    "event": "test",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testPHPConfigurationIsReadCorrectly",
    "status": "pass",
    "time": 0.0002448558807373,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testPHPConfigurationIsHandledCorrectly"
}{
    "event": "test",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testPHPConfigurationIsHandledCorrectly",
    "status": "pass",
    "time": 0.001140832901001,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testHandlePHPConfigurationDoesNotOverwrittenExistingEnvArrayVariables"
}{
    "event": "test",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testHandlePHPConfigurationDoesNotOverwrittenExistingEnvArrayVariables",
    "status": "pass",
    "time": 0.00098204612731934,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testHandlePHPConfigurationDoesNotOverriteVariablesFromPutEnv"
}{
    "event": "test",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testHandlePHPConfigurationDoesNotOverriteVariablesFromPutEnv",
    "status": "pass",
    "time": 0.0008997917175293,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testPHPUnitConfigurationIsReadCorrectly"
}{
    "event": "test",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testPHPUnitConfigurationIsReadCorrectly",
    "status": "pass",
    "time": 0.0017600059509277,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testXincludeInConfiguration"
}{
    "event": "test",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testXincludeInConfiguration",
    "status": "pass",
    "time": 0.0037028789520264,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testWithEmptyConfigurations"
}{
    "event": "test",
    "suite": "Util_ConfigurationTest",
    "test": "Util_ConfigurationTest::testWithEmptyConfigurations",
    "status": "pass",
    "time": 0.0005650520324707,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Util_GetoptTest",
    "tests": 2
}{
    "event": "testStart",
    "suite": "Util_GetoptTest",
    "test": "Util_GetoptTest::testItIncludeTheLongOptionsAfterTheArgument"
}{
    "event": "test",
    "suite": "Util_GetoptTest",
    "test": "Util_GetoptTest::testItIncludeTheLongOptionsAfterTheArgument",
    "status": "pass",
    "time": 0.00019502639770508,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_GetoptTest",
    "test": "Util_GetoptTest::testItIncludeTheShortOptionsAfterTheArgument"
}{
    "event": "test",
    "suite": "Util_GetoptTest",
    "test": "Util_GetoptTest::testItIncludeTheShortOptionsAfterTheArgument",
    "status": "pass",
    "time": 0.00016188621520996,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Util_GlobalStateTest",
    "tests": 1
}{
    "event": "testStart",
    "suite": "Util_GlobalStateTest",
    "test": "Util_GlobalStateTest::testIncludedFilesAsStringSkipsVfsProtocols"
}{
    "event": "test",
    "suite": "Util_GlobalStateTest",
    "test": "Util_GlobalStateTest::testIncludedFilesAsStringSkipsVfsProtocols",
    "status": "pass",
    "time": 0.00018477439880371,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "PHPUnit_Util_PHPTest",
    "tests": 6
}{
    "event": "testStart",
    "suite": "PHPUnit_Util_PHPTest",
    "test": "PHPUnit_Util_PHPTest::testShouldNotUseStderrRedirectionByDefault"
}{
    "event": "test",
    "suite": "PHPUnit_Util_PHPTest",
    "test": "PHPUnit_Util_PHPTest::testShouldNotUseStderrRedirectionByDefault",
    "status": "pass",
    "time": 0.00023698806762695,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPUnit_Util_PHPTest",
    "test": "PHPUnit_Util_PHPTest::testShouldDefinedIfUseStderrRedirection"
}{
    "event": "test",
    "suite": "PHPUnit_Util_PHPTest",
    "test": "PHPUnit_Util_PHPTest::testShouldDefinedIfUseStderrRedirection",
    "status": "pass",
    "time": 0.00020194053649902,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPUnit_Util_PHPTest",
    "test": "PHPUnit_Util_PHPTest::testShouldDefinedIfDoNotUseStderrRedirection"
}{
    "event": "test",
    "suite": "PHPUnit_Util_PHPTest",
    "test": "PHPUnit_Util_PHPTest::testShouldDefinedIfDoNotUseStderrRedirection",
    "status": "pass",
    "time": 0.0001981258392334,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPUnit_Util_PHPTest",
    "test": "PHPUnit_Util_PHPTest::testShouldThrowsExceptionWhenStderrRedirectionVariableIsNotABoolean"
}{
    "event": "test",
    "suite": "PHPUnit_Util_PHPTest",
    "test": "PHPUnit_Util_PHPTest::testShouldThrowsExceptionWhenStderrRedirectionVariableIsNotABoolean",
    "status": "pass",
    "time": 0.0003669261932373,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPUnit_Util_PHPTest",
    "test": "PHPUnit_Util_PHPTest::testShouldUseGivenSettingsToCreateCommand"
}{
    "event": "test",
    "suite": "PHPUnit_Util_PHPTest",
    "test": "PHPUnit_Util_PHPTest::testShouldUseGivenSettingsToCreateCommand",
    "status": "pass",
    "time": 0.00024604797363281,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPUnit_Util_PHPTest",
    "test": "PHPUnit_Util_PHPTest::testShouldRedirectStderrToStdoutWhenDefined"
}{
    "event": "test",
    "suite": "PHPUnit_Util_PHPTest",
    "test": "PHPUnit_Util_PHPTest::testShouldRedirectStderrToStdoutWhenDefined",
    "status": "pass",
    "time": 0.00022292137145996,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Util_RegexTest",
    "tests": 7
}{
    "event": "suiteStart",
    "suite": "Util_RegexTest::testValidRegex",
    "tests": 4
}{
    "event": "testStart",
    "suite": "Util_RegexTest::testValidRegex",
    "test": "Util_RegexTest::testValidRegex with data set #0 ('#valid regexp#', 'valid regexp', 1)"
}{
    "event": "test",
    "suite": "Util_RegexTest::testValidRegex",
    "test": "Util_RegexTest::testValidRegex with data set #0 ('#valid regexp#', 'valid regexp', 1)",
    "status": "pass",
    "time": 0.00019598007202148,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_RegexTest::testValidRegex",
    "test": "Util_RegexTest::testValidRegex with data set #1 (';val.*xp;', 'valid regexp', 1)"
}{
    "event": "test",
    "suite": "Util_RegexTest::testValidRegex",
    "test": "Util_RegexTest::testValidRegex with data set #1 (';val.*xp;', 'valid regexp', 1)",
    "status": "pass",
    "time": 0.00016117095947266,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_RegexTest::testValidRegex",
    "test": "Util_RegexTest::testValidRegex with data set #2 ('\/val.*xp\/i', 'VALID REGEXP', 1)"
}{
    "event": "test",
    "suite": "Util_RegexTest::testValidRegex",
    "test": "Util_RegexTest::testValidRegex with data set #2 ('\/val.*xp\/i', 'VALID REGEXP', 1)",
    "status": "pass",
    "time": 0.00015687942504883,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_RegexTest::testValidRegex",
    "test": "Util_RegexTest::testValidRegex with data set #3 ('\/a val.*p\/', 'valid regexp', 0)"
}{
    "event": "test",
    "suite": "Util_RegexTest::testValidRegex",
    "test": "Util_RegexTest::testValidRegex with data set #3 ('\/a val.*p\/', 'valid regexp', 0)",
    "status": "pass",
    "time": 0.0001521110534668,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Util_RegexTest::testInvalidRegex",
    "tests": 3
}{
    "event": "testStart",
    "suite": "Util_RegexTest::testInvalidRegex",
    "test": "Util_RegexTest::testInvalidRegex with data set #0 ('valid regexp', 'valid regexp')"
}{
    "event": "test",
    "suite": "Util_RegexTest::testInvalidRegex",
    "test": "Util_RegexTest::testInvalidRegex with data set #0 ('valid regexp', 'valid regexp')",
    "status": "pass",
    "time": 0.00014615058898926,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_RegexTest::testInvalidRegex",
    "test": "Util_RegexTest::testInvalidRegex with data set #1 (';val.*xp', 'valid regexp')"
}{
    "event": "test",
    "suite": "Util_RegexTest::testInvalidRegex",
    "test": "Util_RegexTest::testInvalidRegex with data set #1 (';val.*xp', 'valid regexp')",
    "status": "pass",
    "time": 0.00013613700866699,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_RegexTest::testInvalidRegex",
    "test": "Util_RegexTest::testInvalidRegex with data set #2 ('val.*xp\/i', 'VALID REGEXP')"
}{
    "event": "test",
    "suite": "Util_RegexTest::testInvalidRegex",
    "test": "Util_RegexTest::testInvalidRegex with data set #2 ('val.*xp\/i', 'VALID REGEXP')",
    "status": "pass",
    "time": 0.00018310546875,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Util_TestDox_NamePrettifierTest",
    "tests": 5
}{
    "event": "testStart",
    "suite": "Util_TestDox_NamePrettifierTest",
    "test": "Util_TestDox_NamePrettifierTest::testTitleHasSensibleDefaults"
}{
    "event": "test",
    "suite": "Util_TestDox_NamePrettifierTest",
    "test": "Util_TestDox_NamePrettifierTest::testTitleHasSensibleDefaults",
    "status": "pass",
    "time": 0.00048589706420898,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestDox_NamePrettifierTest",
    "test": "Util_TestDox_NamePrettifierTest::testCaterForUserDefinedSuffix"
}{
    "event": "test",
    "suite": "Util_TestDox_NamePrettifierTest",
    "test": "Util_TestDox_NamePrettifierTest::testCaterForUserDefinedSuffix",
    "status": "pass",
    "time": 0.00017213821411133,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestDox_NamePrettifierTest",
    "test": "Util_TestDox_NamePrettifierTest::testCaterForUserDefinedPrefix"
}{
    "event": "test",
    "suite": "Util_TestDox_NamePrettifierTest",
    "test": "Util_TestDox_NamePrettifierTest::testCaterForUserDefinedPrefix",
    "status": "pass",
    "time": 0.00016188621520996,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestDox_NamePrettifierTest",
    "test": "Util_TestDox_NamePrettifierTest::testTestNameIsConvertedToASentence"
}{
    "event": "test",
    "suite": "Util_TestDox_NamePrettifierTest",
    "test": "Util_TestDox_NamePrettifierTest::testTestNameIsConvertedToASentence",
    "status": "pass",
    "time": 0.00030398368835449,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestDox_NamePrettifierTest",
    "test": "Util_TestDox_NamePrettifierTest::testTestNameIsNotGroupedWhenNotInSequence"
}{
    "event": "test",
    "suite": "Util_TestDox_NamePrettifierTest",
    "test": "Util_TestDox_NamePrettifierTest::testTestNameIsNotGroupedWhenNotInSequence",
    "status": "pass",
    "time": 0.00024294853210449,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Util_TestTest",
    "tests": 69
}{
    "event": "testStart",
    "suite": "Util_TestTest",
    "test": "Util_TestTest::testGetExpectedException"
}{
    "event": "test",
    "suite": "Util_TestTest",
    "test": "Util_TestTest::testGetExpectedException",
    "status": "pass",
    "time": 0.001054048538208,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest",
    "test": "Util_TestTest::testGetExpectedRegExp"
}{
    "event": "test",
    "suite": "Util_TestTest",
    "test": "Util_TestTest::testGetExpectedRegExp",
    "status": "pass",
    "time": 0.00026392936706543,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Util_TestTest::testGetRequirements",
    "tests": 14
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #0 ('testOne', array())"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #0 ('testOne', array())",
    "status": "pass",
    "time": 0.00015687942504883,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #1 ('testTwo', array('1.0'))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #1 ('testTwo', array('1.0'))",
    "status": "pass",
    "time": 0.00014591217041016,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #2 ('testThree', array('2.0'))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #2 ('testThree', array('2.0'))",
    "status": "pass",
    "time": 0.00013899803161621,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #3 ('testFour', array('2.0', '1.0'))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #3 ('testFour', array('2.0', '1.0'))",
    "status": "pass",
    "time": 0.00014209747314453,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #4 ('testFive', array('5.4.0RC6'))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #4 ('testFive', array('5.4.0RC6'))",
    "status": "pass",
    "time": 0.00013899803161621,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #5 ('testSix', array('5.4.0-alpha1'))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #5 ('testSix', array('5.4.0-alpha1'))",
    "status": "pass",
    "time": 0.00013899803161621,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #6 ('testSeven', array('5.4.0beta2'))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #6 ('testSeven', array('5.4.0beta2'))",
    "status": "pass",
    "time": 0.00014805793762207,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #7 ('testEight', array('5.4-dev'))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #7 ('testEight', array('5.4-dev'))",
    "status": "pass",
    "time": 0.00013589859008789,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #8 ('testNine', array(array('testFunc')))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #8 ('testNine', array(array('testFunc')))",
    "status": "pass",
    "time": 0.00014805793762207,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #9 ('testTen', array(array('testExt')))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #9 ('testTen', array(array('testExt')))",
    "status": "pass",
    "time": 0.00014495849609375,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #10 ('testEleven', array('\/Linux\/i'))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #10 ('testEleven', array('\/Linux\/i'))",
    "status": "pass",
    "time": 0.00013995170593262,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #11 ('testSpace', array(array('spl'), '\/.*\/i'))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #11 ('testSpace', array(array('spl'), '\/.*\/i'))",
    "status": "pass",
    "time": 0.0003509521484375,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #12 ('testAllPossibleRequirements', array('99-dev', '9-dev', '\/DOESNOTEXIST\/i', array('testFuncOne', 'testFuncTwo'), array('testExtOne', 'testExtTwo', 'testExtThree'), array('2.0')))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #12 ('testAllPossibleRequirements', array('99-dev', '9-dev', '\/DOESNOTEXIST\/i', array('testFuncOne', 'testFuncTwo'), array('testExtOne', 'testExtTwo', 'testExtThree'), array('2.0')))",
    "status": "pass",
    "time": 0.0007789134979248,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #13 ('testSpecificExtensionVersion', array(array('1.8.0'), array('testExt')))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetRequirements",
    "test": "Util_TestTest::testGetRequirements with data set #13 ('testSpecificExtensionVersion', array(array('1.8.0'), array('testExt')))",
    "status": "pass",
    "time": 0.00035500526428223,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_TestTest::testGetRequirementsMergesClassAndMethodDocBlocks"
}{
    "event": "test",
    "suite": "",
    "test": "Util_TestTest::testGetRequirementsMergesClassAndMethodDocBlocks",
    "status": "pass",
    "time": 0.00072598457336426,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Util_TestTest::testGetMissingRequirements",
    "tests": 7
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetMissingRequirements",
    "test": "Util_TestTest::testGetMissingRequirements with data set #0 ('testOne', array())"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetMissingRequirements",
    "test": "Util_TestTest::testGetMissingRequirements with data set #0 ('testOne', array())",
    "status": "pass",
    "time": 0.00014305114746094,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetMissingRequirements",
    "test": "Util_TestTest::testGetMissingRequirements with data set #1 ('testNine', array('Function testFunc is required.'))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetMissingRequirements",
    "test": "Util_TestTest::testGetMissingRequirements with data set #1 ('testNine', array('Function testFunc is required.'))",
    "status": "pass",
    "time": 0.00014901161193848,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetMissingRequirements",
    "test": "Util_TestTest::testGetMissingRequirements with data set #2 ('testTen', array('Extension testExt is required.'))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetMissingRequirements",
    "test": "Util_TestTest::testGetMissingRequirements with data set #2 ('testTen', array('Extension testExt is required.'))",
    "status": "pass",
    "time": 0.00014805793762207,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetMissingRequirements",
    "test": "Util_TestTest::testGetMissingRequirements with data set #3 ('testAlwaysSkip', array('PHPUnit 1111111 (or later) is...uired.'))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetMissingRequirements",
    "test": "Util_TestTest::testGetMissingRequirements with data set #3 ('testAlwaysSkip', array('PHPUnit 1111111 (or later) is...uired.'))",
    "status": "pass",
    "time": 0.00014805793762207,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetMissingRequirements",
    "test": "Util_TestTest::testGetMissingRequirements with data set #4 ('testAlwaysSkip2', array('PHP 9999999 (or later) is required.'))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetMissingRequirements",
    "test": "Util_TestTest::testGetMissingRequirements with data set #4 ('testAlwaysSkip2', array('PHP 9999999 (or later) is required.'))",
    "status": "pass",
    "time": 0.00014400482177734,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetMissingRequirements",
    "test": "Util_TestTest::testGetMissingRequirements with data set #5 ('testAlwaysSkip3', array('Operating system matching \/DO...uired.'))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetMissingRequirements",
    "test": "Util_TestTest::testGetMissingRequirements with data set #5 ('testAlwaysSkip3', array('Operating system matching \/DO...uired.'))",
    "status": "pass",
    "time": 0.00014209747314453,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetMissingRequirements",
    "test": "Util_TestTest::testGetMissingRequirements with data set #6 ('testAllPossibleRequirements', array('PHP 99-dev (or later) is required.', 'PHPUnit 9-dev (or later) is required.', 'Operating system matching \/DO...uired.', 'Function testFuncOne is required.', 'Function testFuncTwo is required.', 'Extension testExtOne is required.', 'Extension testExtTwo is required.', 'Extension testExtThree 2.0 (o...uired.'))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetMissingRequirements",
    "test": "Util_TestTest::testGetMissingRequirements with data set #6 ('testAllPossibleRequirements', array('PHP 99-dev (or later) is required.', 'PHPUnit 9-dev (or later) is required.', 'Operating system matching \/DO...uired.', 'Function testFuncOne is required.', 'Function testFuncTwo is required.', 'Extension testExtOne is required.', 'Extension testExtTwo is required.', 'Extension testExtThree 2.0 (o...uired.'))",
    "status": "pass",
    "time": 0.00020408630371094,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_TestTest::testGetProvidedDataRegEx"
}{
    "event": "test",
    "suite": "",
    "test": "Util_TestTest::testGetProvidedDataRegEx",
    "status": "pass",
    "time": 0.00020217895507812,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_TestTest::testTestWithEmptyAnnotation"
}{
    "event": "test",
    "suite": "",
    "test": "Util_TestTest::testTestWithEmptyAnnotation",
    "status": "pass",
    "time": 0.00013113021850586,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_TestTest::testTestWithSimpleCase"
}{
    "event": "test",
    "suite": "",
    "test": "Util_TestTest::testTestWithSimpleCase",
    "status": "pass",
    "time": 0.00023388862609863,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_TestTest::testTestWithMultiLineMultiParameterCase"
}{
    "event": "test",
    "suite": "",
    "test": "Util_TestTest::testTestWithMultiLineMultiParameterCase",
    "status": "pass",
    "time": 0.00026106834411621,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_TestTest::testTestWithVariousTypes"
}{
    "event": "test",
    "suite": "",
    "test": "Util_TestTest::testTestWithVariousTypes",
    "status": "pass",
    "time": 0.00027680397033691,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_TestTest::testTestWithAnnotationAfter"
}{
    "event": "test",
    "suite": "",
    "test": "Util_TestTest::testTestWithAnnotationAfter",
    "status": "pass",
    "time": 0.00029110908508301,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_TestTest::testTestWithSimpleTextAfter"
}{
    "event": "test",
    "suite": "",
    "test": "Util_TestTest::testTestWithSimpleTextAfter",
    "status": "pass",
    "time": 0.00023603439331055,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_TestTest::testTestWithCharacterEscape"
}{
    "event": "test",
    "suite": "",
    "test": "Util_TestTest::testTestWithCharacterEscape",
    "status": "pass",
    "time": 0.00040888786315918,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_TestTest::testTestWithThrowsProperExceptionIfDatasetCannotBeParsed"
}{
    "event": "test",
    "suite": "",
    "test": "Util_TestTest::testTestWithThrowsProperExceptionIfDatasetCannotBeParsed",
    "status": "pass",
    "time": 0.00096583366394043,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_TestTest::testParseAnnotation"
}{
    "event": "test",
    "suite": "",
    "test": "Util_TestTest::testParseAnnotation",
    "status": "pass",
    "time": 0.0003049373626709,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_TestTest::testParseAnnotationThatIsOnlyOneLine"
}{
    "event": "test",
    "suite": "",
    "test": "Util_TestTest::testParseAnnotationThatIsOnlyOneLine",
    "status": "pass",
    "time": 0.00026202201843262,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "tests": 24
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #0 ('CoverageNoneTest', array())"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #0 ('CoverageNoneTest', array())",
    "status": "pass",
    "time": 0.0004889965057373,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #1 ('CoverageClassExtendedTest', array(19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #1 ('CoverageClassExtendedTest', array(19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))",
    "status": "pass",
    "time": 0.00064611434936523,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #2 ('CoverageClassTest', array(19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #2 ('CoverageClassTest', array(19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))",
    "status": "pass",
    "time": 0.00045895576477051,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #3 ('CoverageMethodTest', array(31, 32, 33, 34, 35))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #3 ('CoverageMethodTest', array(31, 32, 33, 34, 35))",
    "status": "pass",
    "time": 0.0016918182373047,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #4 ('CoverageMethodOneLineAnnotationTest', array(31, 32, 33, 34, 35))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #4 ('CoverageMethodOneLineAnnotationTest', array(31, 32, 33, 34, 35))",
    "status": "pass",
    "time": 0.00042009353637695,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #5 ('CoverageNotPrivateTest', array(25, 26, 27, 28, 29, 31, 32, 33, 34, 35))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #5 ('CoverageNotPrivateTest', array(25, 26, 27, 28, 29, 31, 32, 33, 34, 35))",
    "status": "pass",
    "time": 0.00040292739868164,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #6 ('CoverageNotProtectedTest', array(21, 22, 23, 31, 32, 33, 34, 35))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #6 ('CoverageNotProtectedTest', array(21, 22, 23, 31, 32, 33, 34, 35))",
    "status": "pass",
    "time": 0.00039792060852051,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #7 ('CoverageNotPublicTest', array(21, 22, 23, 25, 26, 27, 28, 29))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #7 ('CoverageNotPublicTest', array(21, 22, 23, 25, 26, 27, 28, 29))",
    "status": "pass",
    "time": 0.00043797492980957,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #8 ('CoveragePrivateTest', array(21, 22, 23))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #8 ('CoveragePrivateTest', array(21, 22, 23))",
    "status": "pass",
    "time": 0.00036120414733887,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #9 ('CoverageProtectedTest', array(25, 26, 27, 28, 29))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #9 ('CoverageProtectedTest', array(25, 26, 27, 28, 29))",
    "status": "pass",
    "time": 0.00035905838012695,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #10 ('CoveragePublicTest', array(31, 32, 33, 34, 35))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #10 ('CoveragePublicTest', array(31, 32, 33, 34, 35))",
    "status": "pass",
    "time": 0.00034999847412109,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #11 ('CoverageFunctionTest', array(2, 3, 4))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #11 ('CoverageFunctionTest', array(2, 3, 4))",
    "status": "pass",
    "time": 0.00033712387084961,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #12 ('NamespaceCoverageClassExtendedTest', array(21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #12 ('NamespaceCoverageClassExtendedTest', array(21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))",
    "status": "pass",
    "time": 0.0005180835723877,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #13 ('NamespaceCoverageClassTest', array(21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #13 ('NamespaceCoverageClassTest', array(21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38))",
    "status": "pass",
    "time": 0.00034689903259277,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #14 ('NamespaceCoverageMethodTest', array(33, 34, 35, 36, 37))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #14 ('NamespaceCoverageMethodTest', array(33, 34, 35, 36, 37))",
    "status": "pass",
    "time": 0.00034379959106445,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #15 ('NamespaceCoverageNotPrivateTest', array(27, 28, 29, 30, 31, 33, 34, 35, 36, 37))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #15 ('NamespaceCoverageNotPrivateTest', array(27, 28, 29, 30, 31, 33, 34, 35, 36, 37))",
    "status": "pass",
    "time": 0.00035595893859863,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #16 ('NamespaceCoverageNotProtectedTest', array(23, 24, 25, 33, 34, 35, 36, 37))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #16 ('NamespaceCoverageNotProtectedTest', array(23, 24, 25, 33, 34, 35, 36, 37))",
    "status": "pass",
    "time": 0.00036907196044922,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #17 ('NamespaceCoverageNotPublicTest', array(23, 24, 25, 27, 28, 29, 30, 31))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #17 ('NamespaceCoverageNotPublicTest', array(23, 24, 25, 27, 28, 29, 30, 31))",
    "status": "pass",
    "time": 0.00035190582275391,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #18 ('NamespaceCoveragePrivateTest', array(23, 24, 25))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #18 ('NamespaceCoveragePrivateTest', array(23, 24, 25))",
    "status": "pass",
    "time": 0.0003359317779541,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #19 ('NamespaceCoverageProtectedTest', array(27, 28, 29, 30, 31))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #19 ('NamespaceCoverageProtectedTest', array(27, 28, 29, 30, 31))",
    "status": "pass",
    "time": 0.0003349781036377,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #20 ('NamespaceCoveragePublicTest', array(33, 34, 35, 36, 37))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #20 ('NamespaceCoveragePublicTest', array(33, 34, 35, 36, 37))",
    "status": "pass",
    "time": 0.00037693977355957,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #21 ('NamespaceCoverageCoversClassTest', array(23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #21 ('NamespaceCoverageCoversClassTest', array(23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18))",
    "status": "pass",
    "time": 0.00050592422485352,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #22 ('NamespaceCoverageCoversClassPublicTest', array(33, 34, 35, 36, 37))"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #22 ('NamespaceCoverageCoversClassPublicTest', array(33, 34, 35, 36, 37))",
    "status": "pass",
    "time": 0.0003352165222168,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #23 ('CoverageNothingTest', false)"
}{
    "event": "test",
    "suite": "Util_TestTest::testGetLinesToBeCovered",
    "test": "Util_TestTest::testGetLinesToBeCovered with data set #23 ('CoverageNothingTest', false)",
    "status": "pass",
    "time": 0.00028491020202637,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_TestTest::testGetLinesToBeCovered2"
}{
    "event": "test",
    "suite": "",
    "test": "Util_TestTest::testGetLinesToBeCovered2",
    "status": "pass",
    "time": 0.0005800724029541,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_TestTest::testGetLinesToBeCovered3"
}{
    "event": "test",
    "suite": "",
    "test": "Util_TestTest::testGetLinesToBeCovered3",
    "status": "pass",
    "time": 0.00027990341186523,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_TestTest::testGetLinesToBeCovered4"
}{
    "event": "test",
    "suite": "",
    "test": "Util_TestTest::testGetLinesToBeCovered4",
    "status": "pass",
    "time": 0.00029778480529785,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_TestTest::testGetLinesToBeCoveredSkipsNonExistentMethods"
}{
    "event": "test",
    "suite": "",
    "test": "Util_TestTest::testGetLinesToBeCoveredSkipsNonExistentMethods",
    "status": "pass",
    "time": 0.0001981258392334,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_TestTest::testTwoCoversDefaultClassAnnoationsAreNotAllowed"
}{
    "event": "test",
    "suite": "",
    "test": "Util_TestTest::testTwoCoversDefaultClassAnnoationsAreNotAllowed",
    "status": "pass",
    "time": 0.00033903121948242,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_TestTest::testFunctionParenthesesAreAllowed"
}{
    "event": "test",
    "suite": "",
    "test": "Util_TestTest::testFunctionParenthesesAreAllowed",
    "status": "pass",
    "time": 0.00033092498779297,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_TestTest::testFunctionParenthesesAreAllowedWithWhitespace"
}{
    "event": "test",
    "suite": "",
    "test": "Util_TestTest::testFunctionParenthesesAreAllowedWithWhitespace",
    "status": "pass",
    "time": 0.00035405158996582,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_TestTest::testMethodParenthesesAreAllowed"
}{
    "event": "test",
    "suite": "",
    "test": "Util_TestTest::testMethodParenthesesAreAllowed",
    "status": "pass",
    "time": 0.0003659725189209,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_TestTest::testMethodParenthesesAreAllowedWithWhitespace"
}{
    "event": "test",
    "suite": "",
    "test": "Util_TestTest::testMethodParenthesesAreAllowedWithWhitespace",
    "status": "pass",
    "time": 0.00032806396484375,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_TestTest::testNamespacedFunctionCanBeCoveredOrUsed"
}{
    "event": "test",
    "suite": "",
    "test": "Util_TestTest::testNamespacedFunctionCanBeCoveredOrUsed",
    "status": "pass",
    "time": 0.0001828670501709,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Util_XMLTest",
    "tests": 259
}{
    "event": "suiteStart",
    "suite": "Util_XMLTest::testPrepareString",
    "tests": 256
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #0 (Binary String: 0x00)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #0 (Binary String: 0x00)",
    "status": "pass",
    "time": 0.00029993057250977,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #1 (Binary String: 0x01)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #1 (Binary String: 0x01)",
    "status": "pass",
    "time": 0.00017404556274414,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #2 (Binary String: 0x02)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #2 (Binary String: 0x02)",
    "status": "pass",
    "time": 0.00016498565673828,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #3 (Binary String: 0x03)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #3 (Binary String: 0x03)",
    "status": "pass",
    "time": 0.00015592575073242,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #4 (Binary String: 0x04)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #4 (Binary String: 0x04)",
    "status": "pass",
    "time": 0.00015091896057129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #5 (Binary String: 0x05)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #5 (Binary String: 0x05)",
    "status": "pass",
    "time": 0.00014710426330566,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #6 (Binary String: 0x06)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #6 (Binary String: 0x06)",
    "status": "pass",
    "time": 0.00016498565673828,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #7 (Binary String: 0x07)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #7 (Binary String: 0x07)",
    "status": "pass",
    "time": 0.00014710426330566,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #8 (Binary String: 0x08)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #8 (Binary String: 0x08)",
    "status": "pass",
    "time": 0.00014400482177734,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #9 ('\t')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #9 ('\t')",
    "status": "pass",
    "time": 0.00014305114746094,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #10 ('\\n')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #10 ('\\n')",
    "status": "pass",
    "time": 0.00014185905456543,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #11 ('\u000b')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #11 ('\u000b')",
    "status": "pass",
    "time": 0.00013899803161621,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #12 ('\f')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #12 ('\f')",
    "status": "pass",
    "time": 0.00014090538024902,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #13 ('\\n')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #13 ('\\n')",
    "status": "pass",
    "time": 0.00014090538024902,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #14 (Binary String: 0x0e)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #14 (Binary String: 0x0e)",
    "status": "pass",
    "time": 0.00013899803161621,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #15 (Binary String: 0x0f)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #15 (Binary String: 0x0f)",
    "status": "pass",
    "time": 0.0001380443572998,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #16 (Binary String: 0x10)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #16 (Binary String: 0x10)",
    "status": "pass",
    "time": 0.0001370906829834,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #17 (Binary String: 0x11)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #17 (Binary String: 0x11)",
    "status": "pass",
    "time": 0.00013494491577148,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #18 (Binary String: 0x12)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #18 (Binary String: 0x12)",
    "status": "pass",
    "time": 0.00020003318786621,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #19 (Binary String: 0x13)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #19 (Binary String: 0x13)",
    "status": "pass",
    "time": 0.00064301490783691,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #20 (Binary String: 0x14)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #20 (Binary String: 0x14)",
    "status": "pass",
    "time": 0.00017285346984863,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #21 (Binary String: 0x15)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #21 (Binary String: 0x15)",
    "status": "pass",
    "time": 0.0001518726348877,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #22 (Binary String: 0x16)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #22 (Binary String: 0x16)",
    "status": "pass",
    "time": 0.00014686584472656,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #23 (Binary String: 0x17)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #23 (Binary String: 0x17)",
    "status": "pass",
    "time": 0.00014281272888184,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #24 (Binary String: 0x18)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #24 (Binary String: 0x18)",
    "status": "pass",
    "time": 0.00016403198242188,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #25 (Binary String: 0x19)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #25 (Binary String: 0x19)",
    "status": "pass",
    "time": 0.00015497207641602,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #26 (Binary String: 0x1a)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #26 (Binary String: 0x1a)",
    "status": "pass",
    "time": 0.00014090538024902,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #27 (Binary String: 0x1b)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #27 (Binary String: 0x1b)",
    "status": "pass",
    "time": 0.00014114379882812,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #28 (Binary String: 0x1c)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #28 (Binary String: 0x1c)",
    "status": "pass",
    "time": 0.00014185905456543,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #29 (Binary String: 0x1d)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #29 (Binary String: 0x1d)",
    "status": "pass",
    "time": 0.00013899803161621,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #30 (Binary String: 0x1e)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #30 (Binary String: 0x1e)",
    "status": "pass",
    "time": 0.00013995170593262,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #31 (Binary String: 0x1f)"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #31 (Binary String: 0x1f)",
    "status": "pass",
    "time": 0.00014710426330566,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #32 (' ')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #32 (' ')",
    "status": "pass",
    "time": 0.00014090538024902,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #33 ('!')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #33 ('!')",
    "status": "pass",
    "time": 0.0001380443572998,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #34 ('\"')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #34 ('\"')",
    "status": "pass",
    "time": 0.00014781951904297,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #35 ('#')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #35 ('#')",
    "status": "pass",
    "time": 0.0001380443572998,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #36 ('$')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #36 ('$')",
    "status": "pass",
    "time": 0.0001380443572998,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #37 ('%')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #37 ('%')",
    "status": "pass",
    "time": 0.0001380443572998,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #38 ('&')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #38 ('&')",
    "status": "pass",
    "time": 0.00014710426330566,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #39 (''')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #39 (''')",
    "status": "pass",
    "time": 0.00013899803161621,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #40 ('(')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #40 ('(')",
    "status": "pass",
    "time": 0.0001370906829834,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #41 (')')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #41 (')')",
    "status": "pass",
    "time": 0.00013494491577148,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #42 ('*')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #42 ('*')",
    "status": "pass",
    "time": 0.0001368522644043,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #43 ('+')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #43 ('+')",
    "status": "pass",
    "time": 0.0001370906829834,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #44 (',')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #44 (',')",
    "status": "pass",
    "time": 0.00013613700866699,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #45 ('-')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #45 ('-')",
    "status": "pass",
    "time": 0.00013494491577148,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #46 ('.')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #46 ('.')",
    "status": "pass",
    "time": 0.00013589859008789,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #47 ('\/')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #47 ('\/')",
    "status": "pass",
    "time": 0.00013399124145508,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #48 ('0')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #48 ('0')",
    "status": "pass",
    "time": 0.00013399124145508,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #49 ('1')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #49 ('1')",
    "status": "pass",
    "time": 0.00013399124145508,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #50 ('2')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #50 ('2')",
    "status": "pass",
    "time": 0.00013613700866699,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #51 ('3')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #51 ('3')",
    "status": "pass",
    "time": 0.00013422966003418,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #52 ('4')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #52 ('4')",
    "status": "pass",
    "time": 0.00013399124145508,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #53 ('5')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #53 ('5')",
    "status": "pass",
    "time": 0.00014185905456543,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #54 ('6')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #54 ('6')",
    "status": "pass",
    "time": 0.00013494491577148,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #55 ('7')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #55 ('7')",
    "status": "pass",
    "time": 0.00013399124145508,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #56 ('8')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #56 ('8')",
    "status": "pass",
    "time": 0.00013399124145508,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #57 ('9')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #57 ('9')",
    "status": "pass",
    "time": 0.00013399124145508,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #58 (':')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #58 (':')",
    "status": "pass",
    "time": 0.00013518333435059,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #59 (';')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #59 (';')",
    "status": "pass",
    "time": 0.00014805793762207,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #60 ('<')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #60 ('<')",
    "status": "pass",
    "time": 0.0001378059387207,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #61 ('=')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #61 ('=')",
    "status": "pass",
    "time": 0.0001368522644043,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #62 ('>')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #62 ('>')",
    "status": "pass",
    "time": 0.00013613700866699,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #63 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #63 ('?')",
    "status": "pass",
    "time": 0.00013589859008789,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #64 ('@')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #64 ('@')",
    "status": "pass",
    "time": 0.00013589859008789,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #65 ('A')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #65 ('A')",
    "status": "pass",
    "time": 0.00013399124145508,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #66 ('B')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #66 ('B')",
    "status": "pass",
    "time": 0.00013494491577148,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #67 ('C')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #67 ('C')",
    "status": "pass",
    "time": 0.00013589859008789,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #68 ('D')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #68 ('D')",
    "status": "pass",
    "time": 0.00013589859008789,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #69 ('E')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #69 ('E')",
    "status": "pass",
    "time": 0.00014019012451172,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #70 ('F')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #70 ('F')",
    "status": "pass",
    "time": 0.00020194053649902,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #71 ('G')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #71 ('G')",
    "status": "pass",
    "time": 0.0001978874206543,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #72 ('H')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #72 ('H')",
    "status": "pass",
    "time": 0.00038290023803711,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #73 ('I')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #73 ('I')",
    "status": "pass",
    "time": 0.00032496452331543,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #74 ('J')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #74 ('J')",
    "status": "pass",
    "time": 0.00018620491027832,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #75 ('K')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #75 ('K')",
    "status": "pass",
    "time": 0.00016498565673828,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #76 ('L')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #76 ('L')",
    "status": "pass",
    "time": 0.00015592575073242,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #77 ('M')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #77 ('M')",
    "status": "pass",
    "time": 0.00014996528625488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #78 ('N')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #78 ('N')",
    "status": "pass",
    "time": 0.00014996528625488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #79 ('O')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #79 ('O')",
    "status": "pass",
    "time": 0.00015997886657715,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #80 ('P')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #80 ('P')",
    "status": "pass",
    "time": 0.00015807151794434,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #81 ('Q')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #81 ('Q')",
    "status": "pass",
    "time": 0.00014996528625488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #82 ('R')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #82 ('R')",
    "status": "pass",
    "time": 0.00015687942504883,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #83 ('S')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #83 ('S')",
    "status": "pass",
    "time": 0.00049209594726562,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #84 ('T')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #84 ('T')",
    "status": "pass",
    "time": 0.00060606002807617,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #85 ('U')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #85 ('U')",
    "status": "pass",
    "time": 0.00017213821411133,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #86 ('V')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #86 ('V')",
    "status": "pass",
    "time": 0.00016093254089355,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #87 ('W')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #87 ('W')",
    "status": "pass",
    "time": 0.00015997886657715,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #88 ('X')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #88 ('X')",
    "status": "pass",
    "time": 0.00015616416931152,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #89 ('Y')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #89 ('Y')",
    "status": "pass",
    "time": 0.0001528263092041,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #90 ('Z')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #90 ('Z')",
    "status": "pass",
    "time": 0.00017189979553223,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #91 ('[')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #91 ('[')",
    "status": "pass",
    "time": 0.00015020370483398,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #92 ('\\')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #92 ('\\')",
    "status": "pass",
    "time": 0.00014901161193848,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #93 (']')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #93 (']')",
    "status": "pass",
    "time": 0.00014901161193848,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #94 ('^')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #94 ('^')",
    "status": "pass",
    "time": 0.00014996528625488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #95 ('_')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #95 ('_')",
    "status": "pass",
    "time": 0.00014996528625488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #96 ('`')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #96 ('`')",
    "status": "pass",
    "time": 0.00014901161193848,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #97 ('a')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #97 ('a')",
    "status": "pass",
    "time": 0.0001530647277832,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #98 ('b')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #98 ('b')",
    "status": "pass",
    "time": 0.00014781951904297,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #99 ('c')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #99 ('c')",
    "status": "pass",
    "time": 0.00014710426330566,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #100 ('d')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #100 ('d')",
    "status": "pass",
    "time": 0.00014710426330566,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #101 ('e')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #101 ('e')",
    "status": "pass",
    "time": 0.00016379356384277,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #102 ('f')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #102 ('f')",
    "status": "pass",
    "time": 0.0001521110534668,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #103 ('g')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #103 ('g')",
    "status": "pass",
    "time": 0.00014877319335938,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #104 ('h')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #104 ('h')",
    "status": "pass",
    "time": 0.00014591217041016,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #105 ('i')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #105 ('i')",
    "status": "pass",
    "time": 0.00014495849609375,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #106 ('j')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #106 ('j')",
    "status": "pass",
    "time": 0.00014591217041016,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #107 ('k')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #107 ('k')",
    "status": "pass",
    "time": 0.00014495849609375,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #108 ('l')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #108 ('l')",
    "status": "pass",
    "time": 0.0001518726348877,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #109 ('m')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #109 ('m')",
    "status": "pass",
    "time": 0.00015091896057129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #110 ('n')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #110 ('n')",
    "status": "pass",
    "time": 0.00014805793762207,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #111 ('o')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #111 ('o')",
    "status": "pass",
    "time": 0.00014901161193848,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #112 ('p')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #112 ('p')",
    "status": "pass",
    "time": 0.00014805793762207,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #113 ('q')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #113 ('q')",
    "status": "pass",
    "time": 0.00014686584472656,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #114 ('r')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #114 ('r')",
    "status": "pass",
    "time": 0.00014495849609375,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #115 ('s')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #115 ('s')",
    "status": "pass",
    "time": 0.00014615058898926,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #116 ('t')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #116 ('t')",
    "status": "pass",
    "time": 0.00014996528625488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #117 ('u')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #117 ('u')",
    "status": "pass",
    "time": 0.00014495849609375,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #118 ('v')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #118 ('v')",
    "status": "pass",
    "time": 0.00014591217041016,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #119 ('w')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #119 ('w')",
    "status": "pass",
    "time": 0.00014591217041016,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #120 ('x')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #120 ('x')",
    "status": "pass",
    "time": 0.00014901161193848,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #121 ('y')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #121 ('y')",
    "status": "pass",
    "time": 0.00014805793762207,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #122 ('z')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #122 ('z')",
    "status": "pass",
    "time": 0.00014591217041016,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #123 ('{')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #123 ('{')",
    "status": "pass",
    "time": 0.00014495849609375,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #124 ('|')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #124 ('|')",
    "status": "pass",
    "time": 0.00014710426330566,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #125 ('}')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #125 ('}')",
    "status": "pass",
    "time": 0.00014710426330566,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #126 ('~')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #126 ('~')",
    "status": "pass",
    "time": 0.00014686584472656,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #127 ('')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #127 ('')",
    "status": "pass",
    "time": 0.00014591217041016,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #128 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #128 ('?')",
    "status": "pass",
    "time": 0.00015401840209961,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #129 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #129 ('?')",
    "status": "pass",
    "time": 0.0001530647277832,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #130 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #130 ('?')",
    "status": "pass",
    "time": 0.00015497207641602,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #131 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #131 ('?')",
    "status": "pass",
    "time": 0.00015401840209961,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #132 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #132 ('?')",
    "status": "pass",
    "time": 0.0001528263092041,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #133 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #133 ('?')",
    "status": "pass",
    "time": 0.00015521049499512,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #134 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #134 ('?')",
    "status": "pass",
    "time": 0.0001521110534668,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #135 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #135 ('?')",
    "status": "pass",
    "time": 0.00029706954956055,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #136 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #136 ('?')",
    "status": "pass",
    "time": 0.00022196769714355,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #137 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #137 ('?')",
    "status": "pass",
    "time": 0.00034618377685547,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #138 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #138 ('?')",
    "status": "pass",
    "time": 0.00020885467529297,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #139 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #139 ('?')",
    "status": "pass",
    "time": 0.00018596649169922,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #140 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #140 ('?')",
    "status": "pass",
    "time": 0.00016999244689941,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #141 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #141 ('?')",
    "status": "pass",
    "time": 0.00016617774963379,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #142 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #142 ('?')",
    "status": "pass",
    "time": 0.00016307830810547,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #143 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #143 ('?')",
    "status": "pass",
    "time": 0.00016498565673828,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #144 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #144 ('?')",
    "status": "pass",
    "time": 0.00016689300537109,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #145 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #145 ('?')",
    "status": "pass",
    "time": 0.00015783309936523,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #146 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #146 ('?')",
    "status": "pass",
    "time": 0.00016117095947266,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #147 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #147 ('?')",
    "status": "pass",
    "time": 0.00017499923706055,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #148 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #148 ('?')",
    "status": "pass",
    "time": 0.0006251335144043,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #149 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #149 ('?')",
    "status": "pass",
    "time": 0.00028204917907715,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #150 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #150 ('?')",
    "status": "pass",
    "time": 0.00016593933105469,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #151 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #151 ('?')",
    "status": "pass",
    "time": 0.00016617774963379,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #152 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #152 ('?')",
    "status": "pass",
    "time": 0.0001518726348877,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #153 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #153 ('?')",
    "status": "pass",
    "time": 0.00015401840209961,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #154 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #154 ('?')",
    "status": "pass",
    "time": 0.0001521110534668,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #155 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #155 ('?')",
    "status": "pass",
    "time": 0.00014996528625488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #156 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #156 ('?')",
    "status": "pass",
    "time": 0.00014996528625488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #157 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #157 ('?')",
    "status": "pass",
    "time": 0.00015997886657715,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #158 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #158 ('?')",
    "status": "pass",
    "time": 0.00015592575073242,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #159 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #159 ('?')",
    "status": "pass",
    "time": 0.0001530647277832,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #160 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #160 ('?')",
    "status": "pass",
    "time": 0.00015401840209961,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #161 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #161 ('?')",
    "status": "pass",
    "time": 0.00015091896057129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #162 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #162 ('?')",
    "status": "pass",
    "time": 0.00015091896057129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #163 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #163 ('?')",
    "status": "pass",
    "time": 0.00015115737915039,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #164 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #164 ('?')",
    "status": "pass",
    "time": 0.00015401840209961,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #165 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #165 ('?')",
    "status": "pass",
    "time": 0.00015091896057129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #166 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #166 ('?')",
    "status": "pass",
    "time": 0.00016093254089355,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #167 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #167 ('?')",
    "status": "pass",
    "time": 0.00015020370483398,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #168 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #168 ('?')",
    "status": "pass",
    "time": 0.0001521110534668,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #169 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #169 ('?')",
    "status": "pass",
    "time": 0.00014996528625488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #170 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #170 ('?')",
    "status": "pass",
    "time": 0.00015091896057129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #171 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #171 ('?')",
    "status": "pass",
    "time": 0.00014901161193848,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #172 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #172 ('?')",
    "status": "pass",
    "time": 0.0001521110534668,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #173 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #173 ('?')",
    "status": "pass",
    "time": 0.0001528263092041,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #174 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #174 ('?')",
    "status": "pass",
    "time": 0.00015497207641602,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #175 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #175 ('?')",
    "status": "pass",
    "time": 0.00014996528625488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #176 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #176 ('?')",
    "status": "pass",
    "time": 0.00015377998352051,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #177 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #177 ('?')",
    "status": "pass",
    "time": 0.0001518726348877,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #178 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #178 ('?')",
    "status": "pass",
    "time": 0.0001528263092041,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #179 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #179 ('?')",
    "status": "pass",
    "time": 0.00015115737915039,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #180 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #180 ('?')",
    "status": "pass",
    "time": 0.0001521110534668,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #181 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #181 ('?')",
    "status": "pass",
    "time": 0.0001530647277832,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #182 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #182 ('?')",
    "status": "pass",
    "time": 0.0001521110534668,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #183 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #183 ('?')",
    "status": "pass",
    "time": 0.0001530647277832,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #184 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #184 ('?')",
    "status": "pass",
    "time": 0.0001521110534668,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #185 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #185 ('?')",
    "status": "pass",
    "time": 0.00015091896057129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #186 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #186 ('?')",
    "status": "pass",
    "time": 0.00015807151794434,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #187 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #187 ('?')",
    "status": "pass",
    "time": 0.0001530647277832,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #188 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #188 ('?')",
    "status": "pass",
    "time": 0.0001521110534668,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #189 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #189 ('?')",
    "status": "pass",
    "time": 0.00015497207641602,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #190 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #190 ('?')",
    "status": "pass",
    "time": 0.0001530647277832,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #191 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #191 ('?')",
    "status": "pass",
    "time": 0.00015091896057129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #192 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #192 ('?')",
    "status": "pass",
    "time": 0.00015115737915039,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #193 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #193 ('?')",
    "status": "pass",
    "time": 0.00015091896057129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #194 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #194 ('?')",
    "status": "pass",
    "time": 0.0001521110534668,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #195 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #195 ('?')",
    "status": "pass",
    "time": 0.0001521110534668,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #196 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #196 ('?')",
    "status": "pass",
    "time": 0.0001518726348877,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #197 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #197 ('?')",
    "status": "pass",
    "time": 0.00015807151794434,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #198 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #198 ('?')",
    "status": "pass",
    "time": 0.00015711784362793,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #199 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #199 ('?')",
    "status": "pass",
    "time": 0.00019693374633789,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #200 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #200 ('?')",
    "status": "pass",
    "time": 0.00023603439331055,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #201 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #201 ('?')",
    "status": "pass",
    "time": 0.00039196014404297,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #202 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #202 ('?')",
    "status": "pass",
    "time": 0.0002129077911377,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #203 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #203 ('?')",
    "status": "pass",
    "time": 0.00015997886657715,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #204 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #204 ('?')",
    "status": "pass",
    "time": 0.00014996528625488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #205 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #205 ('?')",
    "status": "pass",
    "time": 0.00015902519226074,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #206 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #206 ('?')",
    "status": "pass",
    "time": 0.00015401840209961,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #207 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #207 ('?')",
    "status": "pass",
    "time": 0.00015115737915039,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #208 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #208 ('?')",
    "status": "pass",
    "time": 0.00017309188842773,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #209 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #209 ('?')",
    "status": "pass",
    "time": 0.00015687942504883,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #210 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #210 ('?')",
    "status": "pass",
    "time": 0.0001528263092041,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #211 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #211 ('?')",
    "status": "pass",
    "time": 0.00017094612121582,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #212 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #212 ('?')",
    "status": "pass",
    "time": 0.00062298774719238,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #213 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #213 ('?')",
    "status": "pass",
    "time": 0.00029802322387695,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #214 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #214 ('?')",
    "status": "pass",
    "time": 0.00015711784362793,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #215 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #215 ('?')",
    "status": "pass",
    "time": 0.00016689300537109,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #216 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #216 ('?')",
    "status": "pass",
    "time": 0.0001518726348877,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #217 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #217 ('?')",
    "status": "pass",
    "time": 0.00014901161193848,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #218 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #218 ('?')",
    "status": "pass",
    "time": 0.00015115737915039,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #219 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #219 ('?')",
    "status": "pass",
    "time": 0.0001530647277832,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #220 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #220 ('?')",
    "status": "pass",
    "time": 0.00014901161193848,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #221 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #221 ('?')",
    "status": "pass",
    "time": 0.00015091896057129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #222 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #222 ('?')",
    "status": "pass",
    "time": 0.00015902519226074,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #223 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #223 ('?')",
    "status": "pass",
    "time": 0.00015091896057129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #224 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #224 ('?')",
    "status": "pass",
    "time": 0.00014996528625488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #225 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #225 ('?')",
    "status": "pass",
    "time": 0.00014996528625488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #226 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #226 ('?')",
    "status": "pass",
    "time": 0.00014901161193848,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #227 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #227 ('?')",
    "status": "pass",
    "time": 0.00014781951904297,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #228 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #228 ('?')",
    "status": "pass",
    "time": 0.0001528263092041,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #229 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #229 ('?')",
    "status": "pass",
    "time": 0.0001521110534668,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #230 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #230 ('?')",
    "status": "pass",
    "time": 0.00015091896057129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #231 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #231 ('?')",
    "status": "pass",
    "time": 0.0001518726348877,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #232 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #232 ('?')",
    "status": "pass",
    "time": 0.00015497207641602,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #233 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #233 ('?')",
    "status": "pass",
    "time": 0.00014996528625488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #234 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #234 ('?')",
    "status": "pass",
    "time": 0.00014996528625488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #235 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #235 ('?')",
    "status": "pass",
    "time": 0.00016498565673828,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #236 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #236 ('?')",
    "status": "pass",
    "time": 0.0001521110534668,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #237 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #237 ('?')",
    "status": "pass",
    "time": 0.00014996528625488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #238 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #238 ('?')",
    "status": "pass",
    "time": 0.00015401840209961,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #239 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #239 ('?')",
    "status": "pass",
    "time": 0.00015377998352051,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #240 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #240 ('?')",
    "status": "pass",
    "time": 0.00015401840209961,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #241 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #241 ('?')",
    "status": "pass",
    "time": 0.0001521110534668,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #242 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #242 ('?')",
    "status": "pass",
    "time": 0.00016093254089355,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #243 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #243 ('?')",
    "status": "pass",
    "time": 0.0001518726348877,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #244 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #244 ('?')",
    "status": "pass",
    "time": 0.0001518726348877,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #245 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #245 ('?')",
    "status": "pass",
    "time": 0.00015091896057129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #246 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #246 ('?')",
    "status": "pass",
    "time": 0.0001518726348877,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #247 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #247 ('?')",
    "status": "pass",
    "time": 0.00014996528625488,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #248 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #248 ('?')",
    "status": "pass",
    "time": 0.00015115737915039,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #249 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #249 ('?')",
    "status": "pass",
    "time": 0.0001530647277832,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #250 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #250 ('?')",
    "status": "pass",
    "time": 0.00015377998352051,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #251 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #251 ('?')",
    "status": "pass",
    "time": 0.0001518726348877,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #252 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #252 ('?')",
    "status": "pass",
    "time": 0.00015091896057129,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #253 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #253 ('?')",
    "status": "pass",
    "time": 0.0001518726348877,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #254 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #254 ('?')",
    "status": "pass",
    "time": 0.0001521110534668,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #255 ('?')"
}{
    "event": "test",
    "suite": "Util_XMLTest::testPrepareString",
    "test": "Util_XMLTest::testPrepareString with data set #255 ('?')",
    "status": "pass",
    "time": 0.00015592575073242,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_XMLTest::testLoadEmptyString"
}{
    "event": "test",
    "suite": "",
    "test": "Util_XMLTest::testLoadEmptyString",
    "status": "pass",
    "time": 0.0002748966217041,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_XMLTest::testLoadArray"
}{
    "event": "test",
    "suite": "",
    "test": "Util_XMLTest::testLoadArray",
    "status": "pass",
    "time": 0.00022602081298828,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "Util_XMLTest::testLoadBoolean"
}{
    "event": "test",
    "suite": "",
    "test": "Util_XMLTest::testLoadBoolean",
    "status": "pass",
    "time": 0.00021886825561523,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "large",
    "tests": 110
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/abstract-test-class.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/abstract-test-class.phpt",
    "status": "pass",
    "time": 0.075802087783813,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/code-coverage-ignore.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/code-coverage-ignore.phpt",
    "status": "pass",
    "time": 0.10841798782349,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/colors-always.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/colors-always.phpt",
    "status": "pass",
    "time": 0.067155122756958,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/concrete-test-class.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/concrete-test-class.phpt",
    "status": "pass",
    "time": 0.063538074493408,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/custom-printer-debug.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/custom-printer-debug.phpt",
    "status": "pass",
    "time": 0.064407110214233,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/custom-printer-verbose.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/custom-printer-verbose.phpt",
    "status": "pass",
    "time": 0.075982093811035,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/dataprovider-debug.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/dataprovider-debug.phpt",
    "status": "pass",
    "time": 0.066493988037109,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/dataprovider-log-xml-isolation.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/dataprovider-log-xml-isolation.phpt",
    "status": "pass",
    "time": 0.32771801948547,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/dataprovider-log-xml.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/dataprovider-log-xml.phpt",
    "status": "pass",
    "time": 0.077769994735718,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/dataprovider-testdox.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/dataprovider-testdox.phpt",
    "status": "pass",
    "time": 0.066383838653564,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/debug.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/debug.phpt",
    "status": "pass",
    "time": 0.063766002655029,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/default-isolation.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/default-isolation.phpt",
    "status": "pass",
    "time": 0.25757694244385,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/default.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/default.phpt",
    "status": "pass",
    "time": 0.067584991455078,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/dependencies-clone.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/dependencies-clone.phpt",
    "status": "pass",
    "time": 0.074946165084839,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/dependencies-isolation.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/dependencies-isolation.phpt",
    "status": "pass",
    "time": 0.33387494087219,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/dependencies.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/dependencies.phpt",
    "status": "pass",
    "time": 0.077069997787476,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/dependencies2-isolation.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/dependencies2-isolation.phpt",
    "status": "pass",
    "time": 0.19055199623108,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/dependencies2.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/dependencies2.phpt",
    "status": "pass",
    "time": 0.063244819641113,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/dependencies3-isolation.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/dependencies3-isolation.phpt",
    "status": "pass",
    "time": 0.25586414337158,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/dependencies3.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/dependencies3.phpt",
    "status": "pass",
    "time": 0.07028603553772,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/disable-code-coverage-ignore.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/disable-code-coverage-ignore.phpt",
    "status": "pass",
    "time": 0.10614919662476,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/empty-testcase.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/empty-testcase.phpt",
    "status": "pass",
    "time": 0.071806907653809,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/exception-stack.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/exception-stack.phpt",
    "status": "pass",
    "time": 0.078888177871704,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/exclude-group-isolation.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/exclude-group-isolation.phpt",
    "status": "pass",
    "time": 0.20509314537048,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/exclude-group.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/exclude-group.phpt",
    "status": "pass",
    "time": 0.066593170166016,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/failure-isolation.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/failure-isolation.phpt",
    "status": "pass",
    "time": 0.9089720249176,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/failure-reverse-list.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/failure-reverse-list.phpt",
    "status": "pass",
    "time": 0.085055112838745,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/failure.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/failure.phpt",
    "status": "pass",
    "time": 0.086804151535034,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/fatal-isolation.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/fatal-isolation.phpt",
    "status": "pass",
    "time": 0.13106513023376,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-class-isolation.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-class-isolation.phpt",
    "status": "pass",
    "time": 0.26578903198242,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-class.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-class.phpt",
    "status": "pass",
    "time": 0.069990873336792,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-classname-and-range-isolation.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-classname-and-range-isolation.phpt",
    "status": "pass",
    "time": 0.25563192367554,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-classname-and-range.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-classname-and-range.phpt",
    "status": "pass",
    "time": 0.064795970916748,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-number-isolation.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-number-isolation.phpt",
    "status": "pass",
    "time": 0.13384199142456,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-number.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-number.phpt",
    "status": "pass",
    "time": 0.065499067306519,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-only-range-isolation.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-only-range-isolation.phpt",
    "status": "pass",
    "time": 0.2596070766449,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-only-range.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-only-range.phpt",
    "status": "pass",
    "time": 0.075418949127197,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-only-regexp-isolation.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-only-regexp-isolation.phpt",
    "status": "pass",
    "time": 0.25456714630127,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-only-regexp.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-only-regexp.phpt",
    "status": "pass",
    "time": 0.079024076461792,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-only-string-isolation.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-only-string-isolation.phpt",
    "status": "pass",
    "time": 0.14876890182495,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-only-string.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-only-string.phpt",
    "status": "pass",
    "time": 0.065019130706787,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-range-isolation.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-range-isolation.phpt",
    "status": "pass",
    "time": 0.26168394088745,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-range.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-range.phpt",
    "status": "pass",
    "time": 0.065167188644409,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-regexp-isolation.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-regexp-isolation.phpt",
    "status": "pass",
    "time": 0.20535492897034,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-regexp.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-regexp.phpt",
    "status": "pass",
    "time": 0.069031000137329,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-string-isolation.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-string-isolation.phpt",
    "status": "pass",
    "time": 0.13420009613037,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-string.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-dataprovider-by-string.phpt",
    "status": "pass",
    "time": 0.067867994308472,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-method-case-insensitive.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-method-case-insensitive.phpt",
    "status": "pass",
    "time": 0.062634944915771,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-method-case-sensitive-no-result.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-method-case-sensitive-no-result.phpt",
    "status": "pass",
    "time": 0.060962915420532,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-method-isolation.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-method-isolation.phpt",
    "status": "pass",
    "time": 0.13012599945068,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-method.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-method.phpt",
    "status": "pass",
    "time": 0.063719987869263,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-no-results.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/filter-no-results.phpt",
    "status": "pass",
    "time": 0.059639930725098,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/group-isolation.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/group-isolation.phpt",
    "status": "pass",
    "time": 0.13304209709167,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/group.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/group.phpt",
    "status": "pass",
    "time": 0.066468000411987,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/help.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/help.phpt",
    "status": "pass",
    "time": 0.052054882049561,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/help2.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/help2.phpt",
    "status": "pass",
    "time": 0.048083066940308,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/ini-isolation.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/ini-isolation.phpt",
    "status": "pass",
    "time": 0.12751317024231,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/list-groups.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/list-groups.phpt",
    "status": "pass",
    "time": 0.055531978607178,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/log-json-post-66021.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/log-json-post-66021.phpt",
    "status": "pass",
    "time": 0.068347930908203,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/log-tap.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/log-tap.phpt",
    "status": "pass",
    "time": 0.064029932022095,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/log-teamcity.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/log-teamcity.phpt",
    "status": "pass",
    "time": 0.065284013748169,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/log-xml.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/log-xml.phpt",
    "status": "pass",
    "time": 0.06370210647583,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/options-after-arguments.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/options-after-arguments.phpt",
    "status": "pass",
    "time": 0.065534830093384,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/output-isolation.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/output-isolation.phpt",
    "status": "pass",
    "time": 0.13228607177734,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/phpt-stderr.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/phpt-stderr.phpt",
    "status": "pass",
    "time": 0.042558908462524,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/repeat.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/repeat.phpt",
    "status": "pass",
    "time": 0.067299842834473,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/report-useless-tests-incomplete.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/report-useless-tests-incomplete.phpt",
    "status": "pass",
    "time": 0.061599969863892,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/report-useless-tests-isolation.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/report-useless-tests-isolation.phpt",
    "status": "pass",
    "time": 0.13099408149719,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/report-useless-tests.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/report-useless-tests.phpt",
    "status": "pass",
    "time": 0.062252044677734,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/stop-on-warning-via-cli.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/stop-on-warning-via-cli.phpt",
    "status": "pass",
    "time": 0.072703123092651,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/stop-on-warning-via-config.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/stop-on-warning-via-config.phpt",
    "status": "pass",
    "time": 0.070575952529907,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/tap.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/tap.phpt",
    "status": "pass",
    "time": 0.06535816192627,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/teamcity.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/teamcity.phpt",
    "status": "pass",
    "time": 0.06731390953064,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/test-suffix-multiple.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/test-suffix-multiple.phpt",
    "status": "pass",
    "time": 0.074348926544189,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/test-suffix-single.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/test-suffix-single.phpt",
    "status": "pass",
    "time": 0.068620920181274,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/testdox-html.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/testdox-html.phpt",
    "status": "pass",
    "time": 0.066332817077637,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/testdox-text.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/testdox-text.phpt",
    "status": "pass",
    "time": 0.06469202041626,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/testdox.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/TextUI\/testdox.phpt",
    "status": "pass",
    "time": 0.066560983657837,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/1021.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/1021.phpt",
    "status": "pass",
    "time": 0.065562009811401,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/523.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/523.phpt",
    "status": "pass",
    "time": 0.064203977584839,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/578.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/578.phpt",
    "status": "pass",
    "time": 0.071516036987305,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/684.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/684.phpt",
    "status": "pass",
    "time": 0.072271823883057,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/783.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/783.phpt",
    "status": "pass",
    "time": 0.067888975143433,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1149.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1149.phpt",
    "status": "pass",
    "time": 0.12929797172546,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1216.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1216.phpt",
    "status": "pass",
    "time": 0.062329053878784,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1265.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1265.phpt",
    "status": "pass",
    "time": 0.067383050918579,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1330.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1330.phpt",
    "status": "pass",
    "time": 0.06484317779541,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1335.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1335.phpt",
    "status": "pass",
    "time": 0.8000910282135,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1337.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1337.phpt",
    "status": "pass",
    "time": 0.20641016960144,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1348.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1348.phpt",
    "status": "pass",
    "time": 0.19183897972107,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1351.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1351.phpt",
    "status": "pass",
    "time": 0.38059902191162,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1374.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1374.phpt",
    "status": "pass",
    "time": 0.059283971786499,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1437.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1437.phpt",
    "status": "pass",
    "time": 0.071850061416626,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1468.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1468.phpt",
    "status": "pass",
    "time": 0.063960075378418,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1471.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1471.phpt",
    "status": "pass",
    "time": 0.07488489151001,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1472.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1472.phpt",
    "status": "pass",
    "time": 0.062406778335571,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1570.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/1570.phpt",
    "status": "pass",
    "time": 0.06367301940918,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/244.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/244.phpt",
    "status": "pass",
    "time": 0.32026505470276,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/322.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/322.phpt",
    "status": "pass",
    "time": 0.063627004623413,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/433.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/433.phpt",
    "status": "pass",
    "time": 0.076833009719849,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/445.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/445.phpt",
    "status": "pass",
    "time": 0.074885129928589,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/498.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/498.phpt",
    "status": "pass",
    "time": 0.072026968002319,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/503.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/503.phpt",
    "status": "pass",
    "time": 0.068761110305786,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/581.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/581.phpt",
    "status": "pass",
    "time": 0.071758985519409,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/74.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/74.phpt",
    "status": "pass",
    "time": 0.13512396812439,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/765.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/765.phpt",
    "status": "pass",
    "time": 0.072697877883911,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/797.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/797.phpt",
    "status": "pass",
    "time": 0.11604595184326,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/863.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/863.phpt",
    "status": "pass",
    "time": 0.15328502655029,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/873-php5.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/873-php5.phpt",
    "status": "pass",
    "time": 0.050249814987183,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/873-php7.phpt"
}{
    "event": "test",
    "suite": "large",
    "test": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/tests\/Regression\/GitHub\/873-php7.phpt",
    "status": "error",
    "time": 0,
    "trace": [
        {
            "file": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/src\/Extensions\/PhptTestCase.php",
            "line": 157
        },
        {
            "file": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/src\/Framework\/TestSuite.php",
            "line": 747,
            "function": "run",
            "class": "PHPUnit_Extensions_PhptTestCase",
            "type": "->"
        },
        {
            "file": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/src\/Framework\/TestSuite.php",
            "line": 747,
            "function": "run",
            "class": "PHPUnit_Framework_TestSuite",
            "type": "->"
        },
        {
            "file": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/src\/TextUI\/TestRunner.php",
            "line": 432,
            "function": "run",
            "class": "PHPUnit_Framework_TestSuite",
            "type": "->"
        },
        {
            "file": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/src\/TextUI\/Command.php",
            "line": 158,
            "function": "doRun",
            "class": "PHPUnit_TextUI_TestRunner",
            "type": "->"
        },
        {
            "file": "\/home\/gapon\/NetBeansProjects\/Calculator-PHPUnit1\/vendor\/phpunit\/phpunit\/src\/TextUI\/Command.php",
            "line": 109,
            "function": "run",
            "class": "PHPUnit_TextUI_Command",
            "type": "->"
        }
    ],
    "message": "Skipped Test: PHP 7 is required",
    "output": ""
}