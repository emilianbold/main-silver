/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2009 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2009 Sun Microsystems, Inc.
 */

package org.netbeans.modules.javacard.project.deps.ui;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.Document;
import org.netbeans.spi.project.ui.support.ProjectChooser;
import org.openide.WizardDescriptor;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.util.ChangeSupport;
import org.openide.util.NbBundle;

final class ChooseOriginPanelVisual extends JPanel implements DocumentListener {
    private WizardDepKind kind;
    private final ChangeSupport supp = new ChangeSupport(this);
    private final WizardDescriptor wiz;

    public void removeChangeListener(ChangeListener listener) {
        supp.removeChangeListener(listener);
    }

    public void fireChange() {
        supp.fireChange();
    }

    public void addChangeListener(ChangeListener listener) {
        supp.addChangeListener(listener);
    }

    /** Creates new form DependencyVisualPanel2 */
    ChooseOriginPanelVisual(WizardDescriptor wiz) {
        this.wiz = wiz;
        initComponents();
        originField.getDocument().addDocumentListener(this);
        expFileField.getDocument().addDocumentListener(this);
        sigFileField.getDocument().addDocumentListener(this);
    }

    @Override
    public String getName() {
        return NbBundle.getMessage(ChooseOriginPanelVisual.class, 
                "WIZARD_STEP_CHOOSE_ORIGIN"); //NOI18N
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        originLbl = new javax.swing.JLabel();
        originField = new javax.swing.JTextField();
        browseOriginButton = new javax.swing.JButton();
        expFileLabel = new javax.swing.JLabel();
        expFileField = new javax.swing.JTextField();
        browseExpFileButton = new javax.swing.JButton();
        sigFileLabel = new javax.swing.JLabel();
        sigFileField = new javax.swing.JTextField();
        browseSigFileButton = new javax.swing.JButton();
        sourcesLabel = new javax.swing.JLabel();
        sourcesField = new javax.swing.JTextField();
        browseSourcesButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 12, 12, 12));
        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(originLbl, org.openide.util.NbBundle.getMessage(ChooseOriginPanelVisual.class, "ChooseOriginPanelVisual.originLbl.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 12, 0);
        add(originLbl, gridBagConstraints);

        originField.setText(org.openide.util.NbBundle.getMessage(ChooseOriginPanelVisual.class, "ChooseOriginPanelVisual.originField.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 140;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 12, 5);
        add(originField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(browseOriginButton, org.openide.util.NbBundle.getMessage(ChooseOriginPanelVisual.class, "ChooseOriginPanelVisual.browseOriginButton.text")); // NOI18N
        browseOriginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onBrowseOrigin(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 12, 0);
        add(browseOriginButton, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(expFileLabel, org.openide.util.NbBundle.getMessage(ChooseOriginPanelVisual.class, "ChooseOriginPanelVisual.expFileLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 12, 0);
        add(expFileLabel, gridBagConstraints);

        expFileField.setText(org.openide.util.NbBundle.getMessage(ChooseOriginPanelVisual.class, "ChooseOriginPanelVisual.expFileField.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 140;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 12, 5);
        add(expFileField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(browseExpFileButton, org.openide.util.NbBundle.getMessage(ChooseOriginPanelVisual.class, "ChooseOriginPanelVisual.browseExpFileButton.text")); // NOI18N
        browseExpFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onBrowseExpFile(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 12, 0);
        add(browseExpFileButton, gridBagConstraints);

        sigFileLabel.setLabelFor(sigFileField);
        org.openide.awt.Mnemonics.setLocalizedText(sigFileLabel, org.openide.util.NbBundle.getMessage(ChooseOriginPanelVisual.class, "ChooseOriginPanelVisual.sigFileLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 12, 0);
        add(sigFileLabel, gridBagConstraints);

        sigFileField.setText(org.openide.util.NbBundle.getMessage(ChooseOriginPanelVisual.class, "ChooseOriginPanelVisual.sigFileField.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 140;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 12, 5);
        add(sigFileField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(browseSigFileButton, org.openide.util.NbBundle.getMessage(ChooseOriginPanelVisual.class, "ChooseOriginPanelVisual.browseSigFileButton.text")); // NOI18N
        browseSigFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onBrowseSigFile(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 12, 0);
        add(browseSigFileButton, gridBagConstraints);

        sourcesLabel.setLabelFor(sourcesField);
        org.openide.awt.Mnemonics.setLocalizedText(sourcesLabel, org.openide.util.NbBundle.getMessage(ChooseOriginPanelVisual.class, "ChooseOriginPanelVisual.sourcesLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 12, 0);
        add(sourcesLabel, gridBagConstraints);

        sourcesField.setText(org.openide.util.NbBundle.getMessage(ChooseOriginPanelVisual.class, "ChooseOriginPanelVisual.sourcesField.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 140;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 12, 5);
        add(sourcesField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(browseSourcesButton, org.openide.util.NbBundle.getMessage(ChooseOriginPanelVisual.class, "ChooseOriginPanelVisual.browseSourcesButton.text")); // NOI18N
        browseSourcesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onBrowseSourceFile(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 12, 0);
        add(browseSourcesButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void onBrowseExpFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onBrowseExpFile
        File f;
        if ((f = new FileChooserBuilder(ChooseOriginPanelVisual.class).setFileFilter(new ExpFileFilter()).setTitle(kind.toString()).setFilesOnly(true).showOpenDialog()) != null) {
            expFileField.setText(f.getAbsolutePath());
        }
    }//GEN-LAST:event_onBrowseExpFile

    private void onBrowseOrigin(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onBrowseOrigin
        if (kind == WizardDepKind.PROJECT) {
            JFileChooser chooser = ProjectChooser.projectChooser();
            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File f = chooser.getSelectedFile();
                originField.setText(f.getAbsolutePath());
            }
        } else {
            File f;
            if ((f = new FileChooserBuilder(ChooseOriginPanelVisual.class).setFileFilter(kind.createFileFilter()).setTitle(kind.toString()).setFilesOnly(true).showOpenDialog()) != null) {
                originField.setText(f.getAbsolutePath());
            }
        }
    }//GEN-LAST:event_onBrowseOrigin

    private void onBrowseSigFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onBrowseSigFile
            File f;
            if ((f = new FileChooserBuilder(ChooseOriginPanelVisual.class).
                    setFileFilter(new SigFilter()).setTitle(
                    NbBundle.getMessage(ChooseOriginPanelVisual.class, "TTL_BROWSE_SIGFILE")) //NOI18N
                    .setFilesOnly(true).showOpenDialog()) != null) {
                sigFileField.setText(f.getAbsolutePath());
            }

    }//GEN-LAST:event_onBrowseSigFile

    private void onBrowseSourceFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onBrowseSourceFile
            File f;
            if ((f = new FileChooserBuilder(ChooseOriginPanelVisual.class).
                    setFileFilter(new SourcesFilter()).setTitle(
                    NbBundle.getMessage(ChooseOriginPanelVisual.class, "TTL_BROWSE_SOURCES")) //NOI18N
                    .setFilesOnly(true).showOpenDialog()) != null) {
                sourcesField.setText(f.getAbsolutePath());
            }

    }//GEN-LAST:event_onBrowseSourceFile

    private static final class SigFilter extends FileFilter {
        public boolean accept (File f) {
            return f.isDirectory() || f.getName().toLowerCase().endsWith(".sig") || //NOI18N
                    f.getName().toLowerCase().endsWith(".signature"); //NOI18N
        }

        @Override
        public String getDescription() {
            return NbBundle.getMessage(SourcesFilter.class, "FILE_FILTER_SIGNATURE"); //NOI18N
        }

    }

    private static final class SourcesFilter extends FileFilter {

        @Override
        public boolean accept(File f) {
            return f.isDirectory() || f.getName().toLowerCase().endsWith(".zip") || //NOI18N
                    f.getName().toLowerCase().endsWith(".jar"); //NOI18N
        }

        @Override
        public String getDescription() {
            return NbBundle.getMessage(SourcesFilter.class, "FILE_FILTER_SOURCES"); //NOI18N
        }
    }

    private static final class ExpFileFilter extends FileFilter {

        @Override
        public boolean accept(File f) {
            return f != null && f.getPath().toLowerCase().endsWith(".exp") || f.isDirectory();
        }

        @Override
        public String getDescription() {
            return NbBundle.getMessage(ExpFileFilter.class, "FILE_FILTER_EXP_FILES"); //NOI18N
        }

    }

    boolean valid() {
        if (kind == null) {
            return false;
        }
        if (originField.getText().trim().length() == 0) {
            wiz.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, NbBundle.getMessage(ChooseOriginPanelVisual.class, "ERR_ORIGIN_NOT_SET"));
            return false;
        }
        File f = new File (originField.getText().trim());
        boolean e = f.exists();
        boolean result = e && kind.isProject() ? f.isDirectory() : f.isFile();
        if (!result) {
            String key = e ? kind.isProject() ? "ERR_EXPECTING_DIR" : "ERR_EXPECTING_FILE" : "ERR_NON_EXISTENT_FILE";
            wiz.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, NbBundle.getMessage(ChooseOriginPanelVisual.class, key, f.getName()));
            return result;
        }
        if (kind.requiresExpFile()) {
            f = new File(expFileField.getText().trim());
            result = f.exists() && !f.isDirectory();
            if (!result) {
                String key = "ERR_EXP_FILE_MISSING";
                wiz.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, NbBundle.getMessage(ChooseOriginPanelVisual.class, key));
                return result;
            }
        }
        if (result) {
            wiz.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, null);
        }
        return result;
    }

    File getOriginFile() {
        return valid() ? new File (originField.getText().trim()) : null;
    }

    File getExpFile() {
        return !expFileField.isVisible() ? null : valid() ? new File (expFileField.getText().trim()) : null;
    }

    File getSigFile() {
        return !sigFileField.isVisible() ? null : valid() ? new File (sigFileField.getText().trim()) : null;
    }

    File getSourceFile() {
        return !sourcesField.isVisible() ? null : valid() ? new File (sourcesField.getText().trim()) : null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseExpFileButton;
    private javax.swing.JButton browseOriginButton;
    private javax.swing.JButton browseSigFileButton;
    private javax.swing.JButton browseSourcesButton;
    private javax.swing.JTextField expFileField;
    private javax.swing.JLabel expFileLabel;
    private javax.swing.JTextField originField;
    private javax.swing.JLabel originLbl;
    private javax.swing.JTextField sigFileField;
    private javax.swing.JLabel sigFileLabel;
    private javax.swing.JTextField sourcesField;
    private javax.swing.JLabel sourcesLabel;
    // End of variables declaration//GEN-END:variables

    void setDepKind(WizardDepKind kind) {
        if (kind != null) {
            switch (kind) {
                case PROJECT :
                    originLbl.setText(NbBundle.getMessage(
                            ChooseOriginPanelVisual.class, "LBL_PROJECT")); //NOI18N
                    break;
                default :
                    originLbl.setText(NbBundle.getMessage(
                            ChooseOriginPanelVisual.class, "LBL_FILE")); //NOI18N
            }
        }
        this.kind = kind;
        boolean expVis = kind == null ? true : kind.requiresExpFile();
        boolean sigVis = kind == null ? true : kind.requiresSigFile();
        expFileLabel.setVisible(expVis);
        expFileField.setVisible(expVis);
        browseExpFileButton.setVisible(expVis);
        sigFileLabel.setVisible(sigVis);
        sigFileField.setVisible(sigVis);
        browseSigFileButton.setVisible(sigVis);
        sourcesField.setVisible (kind != WizardDepKind.PROJECT);
        sourcesLabel.setVisible (kind != WizardDepKind.PROJECT);
        browseSourcesButton.setVisible (kind != WizardDepKind.PROJECT);
    }

    public void insertUpdate(DocumentEvent e) {
        Document d = e.getDocument();
        if (d == expFileField.getDocument() && kind.requiresExpFile()) {
            fireChange();
        } else if (d == originField.getDocument()) {
            fireChange();
        }
    }

    public void removeUpdate(DocumentEvent e) {
        insertUpdate(e);
    }

    public void changedUpdate(DocumentEvent e) {
        insertUpdate(e);
    }
}

