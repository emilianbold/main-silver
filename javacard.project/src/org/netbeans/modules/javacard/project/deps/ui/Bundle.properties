#DependenciesChildren
MSG_REMOVING_DEPENDENCY=Removing Dependency {0}

DependencyPanel.jLabel1.text=&Library Kind
DependencyPanel.jTextField1.text=
DependencyPanel.jLabel2.text=&Deployment Strategy
DependencyPanel.jLabel3.text=&Path
DependencyPanel.jTextField2.text=
DependencyPanel.jLabel4.text=&Exp File
DependencyPanel.jTextField3.text=

#Depend
ACTION_REMOVE_DEPENDENCY=Remove
LIBRARIES_NODE_NAME=Libraries
DependenciesEditorPanel.libsLabel.text=&Libraries
DependenciesEditorPanel.addButton.text=&Add
DependenciesEditorPanel.remButton.text=&Remove
DependenciesEditorPanel.moveUpButton.text=Move &Up
DependenciesEditorPanel.moveDownButton.text=Move &Down
DependenciesEditorPanel.editButton.text=&Edit
DependenciesEditorPanel.depStrategyField.text=
DependenciesEditorPanel.pathField.text=
DependenciesEditorPanel.pathLabel.text=&Path
DependenciesEditorPanel.depStrategyLabel.text=Deployment &Strategy
TTL_EDIT_LIBRARY=Edit Library Details

#DependenciesPanel
MSG_LOADING=Loading and resolving libraries...
MSG_LOAD_FAILED=Could not resolve libraries - project metatdata probably corrupted
ChooseDependencyKindPanelVisual.jarFileDescription.text=<html>Depend on a JAR file you have on disk.  Use this option if you have either <ul><li>A JAR file that should not be deployed, but represents some API that exists on the target card, or</li><li>A JAR file which contains classes that should be included into your project's JAR file</li></ul>
ChooseDependencyKindPanelVisual.projectDescription.text=<html>Depend on another project you have on disk.  If the project is a Java Card project, it will be be deployed as needed before this project is deployed.
ChooseDependencyKindPanelVisual.jarfileButton.text=JAR File
ChooseDependencyKindPanelVisual.projectButton.text=Project

WIZARD_CHOOSE_LIBRARY_KIND=Choose Type
ChooseOriginPanelVisual.originField.text=
ChooseOriginPanelVisual.originLbl.text=Origin
ChooseOriginPanelVisual.browseOriginButton.text=&Browse...
LBL_FILE=File
LBL_PROJECT=Project
FILE_FILTER_EXP_FILES=Export Files (.exp)
TTL_BROWSE_SOURCES=Find Source Folder, Zip or JAR File
FILE_FILTER_SOURCES=Folders, Zip or JAR Files
FILE_FILTER_SIGNATURE=Signature Files (.sig, .signature)
FILE_FILTER_JAR_FILES=Java Archive Files
TTL_BROWSE_SIGFILE=Find Signature File
ERR_EXP_FILE_MISSING=Export file not set or not a file
ERR_EXPECTING_DIR=''{0}'' is not a folder
ERR_EXPECTING_FILE=''{0}'' is not a file
ERR_NON_EXISTENT_FILE=Location of Project/JAR file not set
ERR_ORIGIN_NOT_SET=Location of Project/JAR file not set
ERR_SOURCE_FILE_DOES_NOT_EXIST=Source location does not exist
ERR_MISSING_MANIFEST=JAR file does not have META-INF/MANFEST.MF
#WizardDepKind
JAR_WITH_EXP_FILE=Jar With Exp File ({0})
PROJECT=Project
JAR_FILE=Jar File ({0})
CLSLIB_JAR=Classic Library JAR ({0})
EXTLIB_JAR=Extension Library JAR ({0})
JAVA_PROJECT=Java Project

#ChooseOriginWizardPanel
ERR_NON_EXISTENT_JAR_FILE={0} does not exist
ERR_NOT_FILE=Not a file: {0}
ERR_NOT_FOLDER=Not a folder: {0}
ERR_EXP_FILE_NOT_SET=Export file not set
ERR_EXP_FILE_NON_EXISTENT={0} does not exist
ERR_PROJECT_CANNOT_DEPEND_ON_SELF=Cannot add a project to itself as a library
ERR_NOT_PROJECT_ROOT={0} is not a project root directory
ERR_NOT_PROJECT={0} is not a project
ERR_NOT_LIBRARY_PROJECT={0} is not a library project
ERR_WRONG_MANIFEST_TAG=Jar manifest should list Application-Type as {0}, not \
    ''{1}''
ERR_NOT_JAVA_PROJECT=Not a Java project - nothing to include in classpath: {0}
ERR_CLASSIC_TO_EXT_DEPENDENCY=Classic projects may not depend on Java Card 3 extension libraries

#ChooseDeploymentStrategyPanelVisual
WIZARD_STEP_CHOOSE_DEPLOYMENT_STRATEGY=Select Deployment Strategy
WARNING_DEPLOYMENT_STRATEGY=<html><font color="red"><b>Important: Build script \
    support for deployment strategies is not yet implemented.</b>  Currently <br>\
    your dependencies will only be added to the compile-time classpath.  This means \
    all dependencies currently must be manually deployed.<p>Set up your deployment \
    strategy as meets your long-term needs;  build-script support for complex \
    dependencies will be available in an upcoming build.



#DependencyWizardIterator
TTL_ADD_LIBRARY=Add Library

#AddDependencyAction
ACTION_ADD_DEPENDENCY=Add Library...
MSG_LOADING_DEPS=Loading Dependencies...
WIZARD_STEP_CHOOSE_ORIGIN=Choose Files

#AddDependencyWizardIterator
LOCATION_IN_WIZARD={0} of {1}

#ChooseDependencyKindWizardPanel
ERR_CHOOSE_DEP_KIND=Choose the type of library to add

#ChooseDependencyKindWizardPanel
ERR_CHOOSE_DEPLOYMENT=Choose how to deploy the library
ChooseOriginPanelVisual.sourcesLabel.text=&Sources
ChooseOriginPanelVisual.sourcesField.text=
ChooseOriginPanelVisual.browseSourcesButton.text=B&rowse
ChooseSigOrExpFilePanelVisual.fileLabel.text=Exp File (optional)
ChooseSigOrExpFilePanelVisual.fileField.text=
ChooseSigOrExpFilePanelVisual.browseFileButton.text=&Browse...

#IntermediatePanelKind
SIG_FILE=Signature File
EXP_FILE=Export File (optional)
SIG_FILE.desc=<html>A signature file is required to deploy classic applet or library projects
EXP_FILE.desc=<html>An export file makes it possible to deploy a JAR file to a \
    card.<br>  If you set an export file, then one of the deployment options for this \
    library will be to (re)deploy it when your project is deployed.<p>&nbsp;<p>If left blank, \
    the only deployment options will be to assume this JAR's classes are already \
    on the card, or to bundle this JAR's classes into your project.

#ChooseSigOrExpFilePanelVisual
ERR_FILE_DOES_NOT_EXIST={0} does not exist
ERR_FILE_IS_A_DIRECTORY={0} is a directory, not a file
ERR_SIG_FILE_NOT_SET=Signature File not set
LBL_EXP_FILE=Export File (optional)
LBL_SIG_FILE=Signature File
ChooseSigOrExpFilePanelVisual.descriptionLabel.text=Description
NAME_EXP_FILE_PANEL=Choose Export File
NAME_SIG_FILE_PANEL=Locate Signature File
EditOneDependencyPanel.deploymentStrategyLabel.text=&Deployment Strategy
EditOneDependencyPanel.pathLabel.text=&Path
EditOneDependencyPanel.pathField.text=
