/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */

/*
 * SelectJavadocPanel.java
 *
 * Created on Aug 8, 2011, 3:25:47 PM
 */
package org.netbeans.modules.java.j2seplatform.queries;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.net.URI;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.netbeans.api.annotations.common.NonNull;
import org.netbeans.modules.java.j2seplatform.queries.SourceJavadocAttacherUtil.Function;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;

/**
 *
 * @author Tomas Zezula
 */
class SelectJavadocPanel extends javax.swing.JPanel implements ItemListener {

    private final String fileName;
    private final Callable<List<? extends String>> browseCall;
    private final Function<String,Collection<? extends URI>> convertor;

    /** Creates new form SelectJavadocPanel */
    SelectJavadocPanel(
            @NonNull final String displayName,
            @NonNull final Callable<List<? extends String>> browseCall,
            @NonNull final Function<String,Collection<? extends URI>> convertor) {
        assert displayName != null;
        assert  browseCall != null;
        assert convertor != null;
        this.fileName = displayName;
        this.browseCall = browseCall;
        this.convertor = convertor;
        initComponents();
        postInitComponents();
    }

    private void postInitComponents() {
        localJavadoc.addItemListener(this);
        remoteJavadoc.addItemListener(this);
        localJavadoc.setSelected(true);
    }

    @NonNull
    List<URI> getJavadoc() throws Exception {
        if (localJavadoc.isSelected()) {
            final List<URI> paths = new ArrayList<URI>();
            final String str = localField.getText();
            for (String pathElement : str.split(File.pathSeparator)) {
                pathElement = pathElement.trim();
                if (pathElement.length() > 0) {
                    paths.addAll(convertor.call(pathElement));
                }
            }
            return paths;
        } else if (remoteJavadoc.isSelected()) {
            return Collections.<URI>singletonList(new URI(remoteField.getText().trim()));
        } else {
            throw new IllegalStateException();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javadocGroup = new javax.swing.ButtonGroup();
        localJavadoc = new javax.swing.JRadioButton();
        localField = new javax.swing.JTextField();
        remoteJavadoc = new javax.swing.JRadioButton();
        remoteField = new javax.swing.JTextField();
        browse = new javax.swing.JButton();
        attachLbl = new javax.swing.JLabel();

        javadocGroup.add(localJavadoc);
        org.openide.awt.Mnemonics.setLocalizedText(localJavadoc, org.openide.util.NbBundle.getMessage(SelectJavadocPanel.class, "TXT_LocalJavadoc")); // NOI18N

        localField.setEditable(false);

        javadocGroup.add(remoteJavadoc);
        org.openide.awt.Mnemonics.setLocalizedText(remoteJavadoc, org.openide.util.NbBundle.getMessage(SelectJavadocPanel.class, "TXT_RemoteJavadoc")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browse, org.openide.util.NbBundle.getMessage(SelectJavadocPanel.class, "TXT_Browse")); // NOI18N
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browse(evt);
            }
        });

        attachLbl.setText(NbBundle.getMessage(SelectJavadocPanel.class, "TXT_AttachJavadocTo",fileName));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(attachLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(remoteJavadoc)
                            .addComponent(localJavadoc))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(localField, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browse))
                            .addComponent(remoteField, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(attachLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(browse)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(localJavadoc)
                        .addComponent(localField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(remoteJavadoc)
                    .addComponent(remoteField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void browse(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browse
    try {
        final List<? extends String> paths = browseCall.call();
        if (paths != null) {
            final StringBuilder sb = new StringBuilder();
            for (String pathElement : paths) {
                if (sb.length() != 0) {
                    sb.append(File.pathSeparatorChar);  //NOI18N
                }
                sb.append(pathElement);
            }
            localField.setText(sb.toString());
        }
    } catch (Exception ex) {
        Exceptions.printStackTrace(ex);
    }
}//GEN-LAST:event_browse

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel attachLbl;
    private javax.swing.JButton browse;
    private javax.swing.ButtonGroup javadocGroup;
    private javax.swing.JTextField localField;
    private javax.swing.JRadioButton localJavadoc;
    private javax.swing.JTextField remoteField;
    private javax.swing.JRadioButton remoteJavadoc;
    // End of variables declaration//GEN-END:variables

    @Override
    public void itemStateChanged(ItemEvent e) {
        localField.setEnabled(localJavadoc.isSelected());
        browse.setEnabled(localJavadoc.isSelected());
        remoteField.setEnabled(remoteJavadoc.isSelected());
    }
}
