/* The following code was generated by JFlex 1.4.3 on 9.2.12 14:20 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9.2.12 14:20 from the specification file
 * <tt>/home/warden/NetBeansProjects/web-main/php.editor/tools/Php5ColoringScanner.flex</tt>
 */
public class PHP5ColoringLexer {
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP_LINE_COMMENT = 30;
  public static final int ST_PHP_NOWDOC = 16;
  public static final int ST_PHP_DOUBLE_QUOTES = 4;
  public static final int ST_PHP_COMMENT = 26;
  public static final int ST_PHP_BACKQUOTE = 6;
  public static final int ST_PHP_DOC_COMMENT = 28;
  public static final int ST_PHP_END_NOWDOC = 20;
  public static final int ST_PHP_START_HEREDOC = 12;
  public static final int ST_PHP_END_HEREDOC = 14;
  public static final int ST_PHP_VAR_OFFSET = 24;
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_IN_SCRIPTING = 2;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 22;
  public static final int ST_PHP_HEREDOC = 10;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 32;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 8;
  public static final int ST_PHP_START_NOWDOC = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
    16, 16
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\15\1\20\2\0\1\14\22\0\1\15\1\33\1\22\1\107"+
    "\1\21\1\37\1\40\1\70\1\100\1\51\1\35\1\32\1\16\1\4"+
    "\1\2\1\36\1\5\1\11\10\1\1\76\1\17\1\34\1\30\1\31"+
    "\1\71\1\16\1\45\1\10\1\56\1\47\1\3\1\7\1\65\1\67"+
    "\1\57\1\101\1\74\1\64\1\75\1\46\1\43\1\61\1\103\1\44"+
    "\1\54\1\63\1\66\1\77\1\73\1\6\1\72\1\23\1\105\1\24"+
    "\1\106\1\42\1\102\1\25\1\45\1\10\1\50\1\47\1\3\1\7"+
    "\1\65\1\67\1\60\1\101\1\74\1\64\1\75\1\46\1\43\1\62"+
    "\1\103\1\53\1\55\1\52\1\66\1\77\1\73\1\6\1\72\1\23"+
    "\1\27\1\41\1\104\1\16\67\23\4\26\1\23\5\26\27\23\1\26"+
    "\37\23\1\26\10\23\u0137\12\31\0\162\12\4\0\14\12\16\0\5\12"+
    "\11\0\1\12\213\0\1\12\13\0\1\12\1\0\3\12\1\0\1\12"+
    "\1\0\24\12\1\0\54\12\1\0\46\12\1\0\5\12\4\0\202\12"+
    "\10\0\105\12\1\0\46\12\2\0\2\12\6\0\20\12\41\0\46\12"+
    "\2\0\1\12\7\0\47\12\110\0\33\12\5\0\3\12\56\0\32\12"+
    "\5\0\13\12\25\0\12\13\4\0\2\12\1\0\143\12\1\0\1\12"+
    "\17\0\2\12\7\0\2\12\12\13\3\12\2\0\1\12\20\0\1\12"+
    "\1\0\36\12\35\0\3\12\60\0\46\12\13\0\1\12\u0152\0\66\12"+
    "\3\0\1\12\22\0\1\12\7\0\12\12\4\0\12\13\25\0\10\12"+
    "\2\0\2\12\2\0\26\12\1\0\7\12\1\0\1\12\3\0\4\12"+
    "\3\0\1\12\36\0\2\12\1\0\3\12\4\0\12\13\2\12\23\0"+
    "\6\12\4\0\2\12\2\0\26\12\1\0\7\12\1\0\2\12\1\0"+
    "\2\12\1\0\2\12\37\0\4\12\1\0\1\12\7\0\12\13\2\0"+
    "\3\12\20\0\11\12\1\0\3\12\1\0\26\12\1\0\7\12\1\0"+
    "\2\12\1\0\5\12\3\0\1\12\22\0\1\12\17\0\2\12\4\0"+
    "\12\13\25\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0"+
    "\2\12\1\0\5\12\3\0\1\12\36\0\2\12\1\0\3\12\4\0"+
    "\12\13\1\0\1\12\21\0\1\12\1\0\6\12\3\0\3\12\1\0"+
    "\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0\2\12\3\0"+
    "\3\12\3\0\10\12\1\0\3\12\55\0\11\13\25\0\10\12\1\0"+
    "\3\12\1\0\27\12\1\0\12\12\1\0\5\12\46\0\2\12\4\0"+
    "\12\13\25\0\10\12\1\0\3\12\1\0\27\12\1\0\12\12\1\0"+
    "\5\12\3\0\1\12\40\0\1\12\1\0\2\12\4\0\12\13\25\0"+
    "\10\12\1\0\3\12\1\0\27\12\1\0\20\12\46\0\2\12\4\0"+
    "\12\13\25\0\22\12\3\0\30\12\1\0\11\12\1\0\1\12\2\0"+
    "\7\12\72\0\60\12\1\0\2\12\14\0\7\12\11\0\12\13\47\0"+
    "\2\12\1\0\1\12\2\0\2\12\1\0\1\12\2\0\1\12\6\0"+
    "\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0\1\12\2\0"+
    "\2\12\1\0\4\12\1\0\2\12\11\0\1\12\2\0\5\12\1\0"+
    "\1\12\11\0\12\13\2\0\2\12\42\0\1\12\37\0\12\13\26\0"+
    "\10\12\1\0\42\12\35\0\4\12\164\0\42\12\1\0\5\12\1\0"+
    "\2\12\25\0\12\13\6\0\6\12\112\0\46\12\12\0\51\12\7\0"+
    "\132\12\5\0\104\12\5\0\122\12\6\0\7\12\1\0\77\12\1\0"+
    "\1\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0"+
    "\47\12\1\0\1\12\1\0\4\12\2\0\37\12\1\0\1\12\1\0"+
    "\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\7\12\1\0"+
    "\7\12\1\0\27\12\1\0\37\12\1\0\1\12\1\0\4\12\2\0"+
    "\7\12\1\0\47\12\1\0\23\12\16\0\11\13\56\0\125\12\14\0"+
    "\u026c\12\2\0\10\12\12\0\32\12\5\0\113\12\25\0\15\12\1\0"+
    "\4\12\16\0\22\12\16\0\22\12\16\0\15\12\1\0\3\12\17\0"+
    "\64\12\43\0\1\12\4\0\1\12\3\0\12\13\46\0\12\13\6\0"+
    "\130\12\10\0\51\12\127\0\35\12\51\0\12\13\36\12\2\0\5\12"+
    "\u038b\0\154\12\224\0\234\12\4\0\132\12\6\0\26\12\2\0\6\12"+
    "\2\0\46\12\2\0\6\12\2\0\10\12\1\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\37\12\2\0\65\12\1\0\7\12\1\0\1\12"+
    "\3\0\3\12\1\0\7\12\3\0\4\12\2\0\6\12\4\0\15\12"+
    "\5\0\3\12\1\0\7\12\164\0\1\12\15\0\1\12\202\0\1\12"+
    "\4\0\1\12\2\0\12\12\1\0\1\12\3\0\5\12\6\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\4\12\1\0\3\12\1\0\7\12"+
    "\3\0\3\12\5\0\5\12\u0ebb\0\2\12\52\0\5\12\5\0\2\12"+
    "\4\0\126\12\6\0\3\12\1\0\132\12\1\0\4\12\5\0\50\12"+
    "\4\0\136\12\21\0\30\12\70\0\20\12\u0200\0\u19b6\12\112\0\u51a6\12"+
    "\132\0\u048d\12\u0773\0\u2ba4\12\u215c\0\u012e\12\2\0\73\12\225\0\7\12"+
    "\14\0\5\12\5\0\1\12\1\0\12\12\1\0\15\12\1\0\5\12"+
    "\1\0\1\12\1\0\2\12\1\0\2\12\1\0\154\12\41\0\u016b\12"+
    "\22\0\100\12\2\0\66\12\50\0\14\12\164\0\5\12\1\0\207\12"+
    "\23\0\12\13\7\0\32\12\6\0\32\12\13\0\131\12\3\0\6\12"+
    "\2\0\6\12\2\0\6\12\2\0\3\12\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\13\0\2\2\1\3\1\4\1\5\1\6"+
    "\1\5\1\4\4\6\1\7\1\5\1\10\1\5\1\11"+
    "\1\12\1\13\1\14\12\5\15\6\1\3\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\15\1\16\1\1\1\17"+
    "\1\20\2\17\1\1\3\17\3\21\2\1\3\3\2\22"+
    "\4\3\1\0\2\23\1\3\1\24\1\25\1\24\1\4"+
    "\1\26\1\4\1\27\1\26\1\30\4\0\4\31\2\32"+
    "\1\33\1\34\1\0\1\35\1\0\1\36\1\4\1\0"+
    "\1\37\6\6\1\40\2\0\5\6\1\0\1\6\1\0"+
    "\1\41\2\0\1\17\2\0\2\37\1\0\1\42\1\43"+
    "\1\37\4\6\1\44\4\6\1\45\11\6\1\46\13\6"+
    "\1\0\1\47\1\6\1\50\1\6\12\0\1\6\3\0"+
    "\2\51\2\52\1\53\1\54\1\52\3\0\1\51\3\55"+
    "\1\56\3\0\2\1\1\51\2\52\1\0\1\57\2\0"+
    "\1\60\7\0\1\61\2\0\1\62\1\0\1\63\1\51"+
    "\1\0\1\64\1\0\1\65\1\66\1\31\1\67\1\70"+
    "\3\0\7\6\2\4\1\71\4\6\1\0\1\6\3\0"+
    "\4\6\1\72\4\6\1\73\7\6\1\74\21\6\1\75"+
    "\1\6\1\76\12\0\7\6\3\77\1\100\1\1\1\100"+
    "\1\1\1\77\1\101\1\0\1\101\1\0\1\102\1\103"+
    "\1\31\2\0\1\6\1\104\5\6\1\105\1\106\1\6"+
    "\1\107\1\6\1\110\4\6\4\0\1\111\5\6\1\112"+
    "\5\6\1\113\3\6\1\114\1\6\1\115\14\6\1\116"+
    "\1\117\3\6\12\0\10\6\1\31\1\0\1\120\4\6"+
    "\1\121\2\6\1\122\1\6\1\123\1\124\1\6\1\125"+
    "\2\126\3\0\3\6\1\127\4\6\1\130\1\131\1\132"+
    "\1\133\1\134\1\135\6\6\1\136\2\6\1\137\4\6"+
    "\1\140\1\141\11\0\1\142\10\6\1\31\1\0\1\6"+
    "\1\143\3\6\1\144\2\6\3\0\1\145\6\6\1\146"+
    "\1\147\7\6\1\150\1\151\1\152\4\0\10\6\1\31"+
    "\1\2\1\153\4\6\1\154\1\6\2\155\1\0\1\156"+
    "\2\6\1\157\1\160\1\6\1\161\5\6\1\162\2\0"+
    "\3\6\1\163\4\6\1\31\1\0\3\6\1\164\1\165"+
    "\1\0\1\6\1\166\1\6\1\167\6\6\1\170\3\6"+
    "\1\171\2\6\1\31\1\0\2\6\1\172\1\173\1\6"+
    "\1\174\1\6\1\175\1\176\2\6\1\177\2\6\1\200"+
    "\2\6\1\31\1\0\1\201\1\202\2\6\1\203\1\204"+
    "\3\6\1\205\1\31\1\0\5\6\1\0\1\206\1\207"+
    "\1\210\2\6\1\0\1\211\1\6\1\0\1\6\1\0"+
    "\1\212\14\0\1\213\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[660];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438"+
    "\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678"+
    "\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828\0\u0558\0\u0558"+
    "\0\u0870\0\u08b8\0\u0558\0\u0558\0\u0558\0\u0900\0\u0948\0\u0990"+
    "\0\u09d8\0\u0a20\0\u0a68\0\u0ab0\0\u0af8\0\u0b40\0\u0b88\0\u0bd0"+
    "\0\u0c18\0\u0c60\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80\0\u0dc8\0\u0e10"+
    "\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u1008\0\u1050"+
    "\0\u1098\0\u10e0\0\u1128\0\u0558\0\u0558\0\u1170\0\u11b8\0\u0558"+
    "\0\u1200\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368\0\u0558\0\u13b0"+
    "\0\u13f8\0\u1440\0\u1488\0\u14d0\0\u1518\0\u1560\0\u0558\0\u15a8"+
    "\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u16c8\0\u0558\0\u1710\0\u1758"+
    "\0\u0558\0\u17a0\0\u17e8\0\u1830\0\u0558\0\u1878\0\u0558\0\u18c0"+
    "\0\u0558\0\u1908\0\u1950\0\u1998\0\u19e0\0\u1a28\0\u1a70\0\u0558"+
    "\0\u1ab8\0\u1b00\0\u0fc0\0\u0558\0\u1b48\0\u1b90\0\u1bd8\0\u1c20"+
    "\0\u1c68\0\u1cb0\0\u1cf8\0\u0558\0\u1d40\0\u1d88\0\u1dd0\0\u1e18"+
    "\0\u1e60\0\u1ea8\0\u0558\0\u1ef0\0\u1f38\0\u1f80\0\u1fc8\0\u2010"+
    "\0\u2058\0\u20a0\0\u20e8\0\u2130\0\u0f78\0\u2178\0\u08b8\0\u21c0"+
    "\0\u0558\0\u2208\0\u2250\0\u0a68\0\u2298\0\u22e0\0\u2328\0\u2370"+
    "\0\u07e0\0\u23b8\0\u2400\0\u2448\0\u2490\0\u07e0\0\u24d8\0\u2520"+
    "\0\u2568\0\u25b0\0\u07e0\0\u25f8\0\u2640\0\u2688\0\u26d0\0\u2718"+
    "\0\u2760\0\u27a8\0\u27f0\0\u2838\0\u07e0\0\u2880\0\u28c8\0\u2910"+
    "\0\u2958\0\u29a0\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\u2b50"+
    "\0\u2b98\0\u2be0\0\u2c28\0\u0558\0\u2c70\0\u2cb8\0\u2d00\0\u10e0"+
    "\0\u2d48\0\u2d90\0\u2dd8\0\u2e20\0\u2e68\0\u2eb0\0\u2ef8\0\u2f40"+
    "\0\u2f88\0\u1200\0\u2fd0\0\u3018\0\u3060\0\u2f88\0\u0558\0\u0558"+
    "\0\u0558\0\u2fd0\0\u30a8\0\u1320\0\u30f0\0\u3138\0\u30a8\0\u0558"+
    "\0\u30f0\0\u0558\0\u3180\0\u1518\0\u31c8\0\u3210\0\u3258\0\u32a0"+
    "\0\u3180\0\u31c8\0\u15a8\0\u0558\0\u32e8\0\u15f0\0\u0558\0\u3330"+
    "\0\u1638\0\u1680\0\u3378\0\u33c0\0\u3408\0\u1710\0\u0558\0\u3450"+
    "\0\u1758\0\u0558\0\u3498\0\u0558\0\u34e0\0\u3528\0\u0558\0\u3570"+
    "\0\u0558\0\u0558\0\u35b8\0\u3600\0\u0558\0\u3648\0\u3690\0\u1830"+
    "\0\u36d8\0\u3720\0\u3768\0\u37b0\0\u37f8\0\u3840\0\u3888\0\u1ef0"+
    "\0\u1f38\0\u38d0\0\u3918\0\u3960\0\u39a8\0\u39f0\0\u3a38\0\u3a80"+
    "\0\u3ac8\0\u3b10\0\u3b58\0\u3ba0\0\u3be8\0\u3c30\0\u3c78\0\u07e0"+
    "\0\u3cc0\0\u3d08\0\u3d50\0\u3d98\0\u07e0\0\u3de0\0\u3e28\0\u3e70"+
    "\0\u3eb8\0\u3f00\0\u3f48\0\u3f90\0\u07e0\0\u3fd8\0\u4020\0\u4068"+
    "\0\u40b0\0\u40f8\0\u4140\0\u4188\0\u41d0\0\u4218\0\u4260\0\u42a8"+
    "\0\u42f0\0\u4338\0\u4380\0\u43c8\0\u4410\0\u4458\0\u07e0\0\u44a0"+
    "\0\u07e0\0\u44e8\0\u4530\0\u4578\0\u45c0\0\u4608\0\u4650\0\u4698"+
    "\0\u46e0\0\u4728\0\u4770\0\u47b8\0\u4800\0\u4848\0\u4890\0\u48d8"+
    "\0\u4920\0\u4968\0\u0558\0\u1170\0\u1290\0\u0558\0\u49b0\0\u1488"+
    "\0\u49f8\0\u1440\0\u0558\0\u4a40\0\u16c8\0\u4a88\0\u0558\0\u0558"+
    "\0\u4ad0\0\u4b18\0\u4b60\0\u4ba8\0\u07e0\0\u4bf0\0\u4c38\0\u4c80"+
    "\0\u4cc8\0\u4d10\0\u07e0\0\u4d58\0\u4da0\0\u07e0\0\u4de8\0\u07e0"+
    "\0\u4e30\0\u4e78\0\u4ec0\0\u4f08\0\u4f50\0\u4f98\0\u4fe0\0\u5028"+
    "\0\u3b58\0\u5070\0\u50b8\0\u5100\0\u5148\0\u5190\0\u07e0\0\u51d8"+
    "\0\u5220\0\u5268\0\u52b0\0\u52f8\0\u07e0\0\u5340\0\u5388\0\u53d0"+
    "\0\u07e0\0\u5418\0\u07e0\0\u5460\0\u54a8\0\u54f0\0\u5538\0\u5580"+
    "\0\u55c8\0\u5610\0\u5658\0\u56a0\0\u56e8\0\u5730\0\u5778\0\u07e0"+
    "\0\u07e0\0\u57c0\0\u5808\0\u5850\0\u5898\0\u58e0\0\u5928\0\u5970"+
    "\0\u59b8\0\u5a00\0\u5a48\0\u5a90\0\u5ad8\0\u5b20\0\u5b68\0\u5bb0"+
    "\0\u5bf8\0\u5c40\0\u5c88\0\u5cd0\0\u5d18\0\u5d60\0\u5da8\0\u5df0"+
    "\0\u0558\0\u5e38\0\u5e80\0\u5ec8\0\u5f10\0\u07e0\0\u5f58\0\u5fa0"+
    "\0\u07e0\0\u5fe8\0\u07e0\0\u07e0\0\u6030\0\u07e0\0\u6078\0\u0558"+
    "\0\u60c0\0\u6108\0\u6150\0\u6198\0\u61e0\0\u6228\0\u07e0\0\u6270"+
    "\0\u62b8\0\u6300\0\u6348\0\u07e0\0\u07e0\0\u07e0\0\u07e0\0\u07e0"+
    "\0\u07e0\0\u6390\0\u63d8\0\u6420\0\u6468\0\u64b0\0\u64f8\0\u07e0"+
    "\0\u6540\0\u6588\0\u07e0\0\u65d0\0\u6618\0\u6660\0\u66a8\0\u07e0"+
    "\0\u07e0\0\u66f0\0\u6738\0\u6780\0\u67c8\0\u6810\0\u6858\0\u68a0"+
    "\0\u68e8\0\u6930\0\u0558\0\u6978\0\u69c0\0\u6a08\0\u6a50\0\u6a98"+
    "\0\u6ae0\0\u6b28\0\u6b70\0\u6bb8\0\u6c00\0\u6c48\0\u6c90\0\u6cd8"+
    "\0\u6d20\0\u6d68\0\u07e0\0\u6db0\0\u6df8\0\u6e40\0\u6e88\0\u6ed0"+
    "\0\u07e0\0\u6f18\0\u6f60\0\u6fa8\0\u6ff0\0\u7038\0\u7080\0\u07e0"+
    "\0\u07e0\0\u70c8\0\u7110\0\u7158\0\u71a0\0\u71e8\0\u7230\0\u7278"+
    "\0\u07e0\0\u07e0\0\u07e0\0\u72c0\0\u7308\0\u7350\0\u7398\0\u73e0"+
    "\0\u7428\0\u7470\0\u74b8\0\u7500\0\u7548\0\u7590\0\u75d8\0\u7620"+
    "\0\u7668\0\u07e0\0\u76b0\0\u76f8\0\u7740\0\u7788\0\u07e0\0\u77d0"+
    "\0\u7818\0\u0558\0\u7860\0\u78a8\0\u78f0\0\u7938\0\u07e0\0\u07e0"+
    "\0\u7980\0\u79c8\0\u7a10\0\u7a58\0\u7aa0\0\u7ae8\0\u7b30\0\u07e0"+
    "\0\u7b78\0\u7bc0\0\u7c08\0\u7c50\0\u7c98\0\u07e0\0\u7ce0\0\u7d28"+
    "\0\u7d70\0\u7db8\0\u7e00\0\u7e48\0\u7e90\0\u7ed8\0\u7f20\0\u07e0"+
    "\0\u07e0\0\u7f68\0\u7fb0\0\u07e0\0\u7ff8\0\u07e0\0\u8040\0\u8088"+
    "\0\u80d0\0\u8118\0\u8160\0\u81a8\0\u07e0\0\u81f0\0\u8238\0\u8280"+
    "\0\u07e0\0\u82c8\0\u8310\0\u8358\0\u83a0\0\u83e8\0\u8430\0\u07e0"+
    "\0\u8478\0\u84c0\0\u07e0\0\u8508\0\u07e0\0\u07e0\0\u8550\0\u8598"+
    "\0\u07e0\0\u85e0\0\u8628\0\u07e0\0\u8670\0\u86b8\0\u8700\0\u8748"+
    "\0\u07e0\0\u07e0\0\u8790\0\u87d8\0\u07e0\0\u07e0\0\u8820\0\u8868"+
    "\0\u88b0\0\u07e0\0\u8478\0\u88f8\0\u8940\0\u8988\0\u89d0\0\u8a18"+
    "\0\u8a60\0\u8aa8\0\u07e0\0\u07e0\0\u07e0\0\u8af0\0\u8b38\0\u8b80"+
    "\0\u07e0\0\u8bc8\0\u8c10\0\u8c58\0\u8ca0\0\u07e0\0\u8ce8\0\u8d30"+
    "\0\u8d78\0\u8dc0\0\u8e08\0\u8e50\0\u8e98\0\u8ee0\0\u8f28\0\u8f70"+
    "\0\u8fb8\0\u9000\0\u0558\0\u9048";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[660];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\34\22\1\23\53\22\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\25\1\35\1\24\2\36"+
    "\1\37\1\40\1\36\1\41\1\42\1\35\1\43\1\44"+
    "\1\24\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\53\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\37\1\66\1\61\2\67\1\65"+
    "\2\70\2\71\1\66\1\72\1\73\1\74\1\35\1\75"+
    "\1\76\1\35\1\77\2\35\1\100\1\101\1\102\1\35"+
    "\1\103\1\35\1\104\2\37\1\105\21\106\1\107\1\110"+
    "\1\106\1\111\2\106\1\112\60\106\21\113\1\114\2\113"+
    "\1\115\1\110\1\113\1\116\60\113\4\117\1\120\22\117"+
    "\1\121\60\117\14\122\1\123\3\122\1\123\1\124\2\122"+
    "\1\125\2\122\1\126\60\122\3\127\1\130\2\127\3\130"+
    "\1\127\1\130\10\127\1\130\17\127\6\130\1\127\16\130"+
    "\2\127\4\130\1\127\1\130\1\127\3\130\4\127\3\24"+
    "\1\131\2\24\3\131\1\24\1\131\5\24\1\0\2\24"+
    "\1\131\17\24\6\131\1\24\16\131\2\24\4\131\1\24"+
    "\1\131\1\24\3\131\4\24\3\132\1\133\2\132\3\133"+
    "\3\132\1\134\3\132\1\135\2\132\1\133\2\132\1\24"+
    "\14\132\6\133\1\132\16\133\2\132\4\133\1\132\1\133"+
    "\1\132\3\133\4\132\3\136\1\137\2\136\3\137\1\136"+
    "\1\137\10\136\1\137\17\136\6\137\1\136\16\137\2\136"+
    "\4\137\1\136\1\137\1\136\3\137\4\136\3\24\1\140"+
    "\2\24\3\140\1\24\1\140\5\24\1\0\2\24\1\140"+
    "\17\24\6\140\1\24\16\140\2\24\4\140\1\24\1\140"+
    "\1\24\3\140\4\24\3\141\1\142\1\143\1\141\3\142"+
    "\1\141\1\142\1\141\2\36\2\141\1\36\2\141\1\142"+
    "\17\141\6\142\1\141\16\142\2\141\4\142\1\141\1\142"+
    "\1\141\3\142\4\141\1\24\1\144\1\145\1\35\1\145"+
    "\1\146\3\35\1\144\1\35\1\24\2\147\2\145\1\147"+
    "\1\150\1\145\1\35\1\147\1\145\1\24\14\145\6\35"+
    "\1\145\16\35\1\147\1\145\4\35\1\145\1\35\1\145"+
    "\3\35\1\145\1\37\1\151\1\147\35\152\1\153\52\152"+
    "\35\154\1\155\52\154\14\156\1\157\3\156\1\160\13\156"+
    "\1\161\2\156\1\162\31\156\1\163\16\156\14\164\2\165"+
    "\2\164\1\165\67\164\34\22\1\166\107\22\1\0\2\22"+
    "\1\167\10\22\4\0\1\22\1\170\2\22\1\0\1\22"+
    "\1\0\6\22\1\171\6\22\1\0\7\22\111\0\1\25"+
    "\1\172\1\173\1\0\1\25\3\0\1\25\77\0\1\172"+
    "\3\0\1\172\3\0\1\172\16\0\1\174\60\0\1\35"+
    "\1\0\1\35\1\0\1\35\1\175\5\35\7\0\1\35"+
    "\17\0\3\35\1\176\1\35\1\177\1\0\4\35\1\177"+
    "\5\35\1\200\3\35\2\0\3\35\1\201\1\0\1\202"+
    "\1\0\3\35\10\0\1\174\23\0\1\174\1\203\57\0"+
    "\1\25\1\172\1\173\1\0\1\25\1\204\1\0\1\205"+
    "\1\25\77\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\1\60\5\35\1\0\16\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\1\206\1\207\1\210"+
    "\3\35\1\0\1\35\1\207\3\35\2\211\5\35\1\212"+
    "\1\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\6\0\1\42\1\35"+
    "\10\0\1\213\6\0\1\35\1\214\4\35\1\0\1\35"+
    "\1\214\14\35\1\215\1\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\16\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\20\0\2\36\2\0\1\36\72\0"+
    "\1\216\2\0\3\216\1\0\1\216\10\0\1\216\17\0"+
    "\6\216\1\0\16\216\2\0\4\216\1\0\1\216\1\0"+
    "\3\216\4\0\21\217\1\220\1\221\1\217\1\222\2\217"+
    "\1\223\60\217\30\0\1\224\1\174\106\0\1\174\1\224"+
    "\106\0\1\174\1\0\1\174\105\0\1\224\107\0\2\174"+
    "\2\0\1\225\1\0\1\226\101\0\1\174\107\0\1\174"+
    "\4\0\1\227\1\105\101\0\1\174\1\230\106\0\1\174"+
    "\7\0\1\174\77\0\1\174\10\0\1\174\47\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\1\35"+
    "\1\231\4\35\1\0\1\35\1\231\14\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\232"+
    "\1\0\7\35\7\0\1\35\17\0\6\35\1\0\16\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\35\1\0\3\35\1\233\3\35\7\0\1\35"+
    "\17\0\1\35\1\234\1\35\1\235\2\35\1\0\1\35"+
    "\1\234\2\236\12\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\237\1\0\7\35\7\0"+
    "\1\35\17\0\2\35\1\240\3\35\1\0\14\35\1\241"+
    "\1\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\242\1\0\7\35\7\0\1\35\17\0"+
    "\1\243\5\35\1\0\5\35\2\244\7\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\1\245\1\35\1\246"+
    "\3\35\1\0\12\35\1\247\3\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\1\35\1\250\4\35\1\0"+
    "\1\35\1\250\13\35\1\251\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\252\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\1\253\10\35\1\253"+
    "\4\35\2\0\1\35\1\254\2\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\2\35\1\255"+
    "\4\35\7\0\1\35\17\0\3\35\1\256\2\35\1\0"+
    "\2\35\2\257\12\35\2\0\3\35\1\260\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\1\35\1\261\1\262\3\35\1\0"+
    "\1\35\1\261\12\35\1\263\1\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\6\35\1\0\5\35\2\264"+
    "\7\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\1\265\5\35\1\0\12\35\1\266\3\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\3\35\1\267\2\35"+
    "\1\0\2\35\2\270\12\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\4\0\24\215\1\271\43\215\1\221\17\215"+
    "\31\0\1\272\57\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\15\35\1\273\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\102\0\1\274\12\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\2\35\1\275\3\35\1\0\16\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\13\0\1\276\1\277\4\0\1\300"+
    "\25\0\1\301\1\302\1\303\1\0\1\304\3\0\1\302"+
    "\2\305\1\0\2\306\5\0\1\307\22\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\6\35\1\0"+
    "\16\35\2\0\4\35\1\0\1\35\1\0\1\35\1\310"+
    "\1\35\4\0\21\106\1\311\1\0\1\106\1\312\2\106"+
    "\1\313\63\106\1\314\2\106\3\314\1\106\1\315\6\106"+
    "\1\316\1\317\1\314\1\312\1\106\1\0\1\320\13\106"+
    "\6\314\1\106\16\314\2\106\4\314\1\106\1\314\1\106"+
    "\3\314\135\106\1\321\1\317\1\106\1\312\2\106\1\322"+
    "\60\106\21\113\1\323\2\113\1\324\1\0\1\113\1\325"+
    "\63\113\1\314\2\113\3\314\1\113\1\326\6\113\1\327"+
    "\1\113\1\314\1\324\1\330\1\0\1\320\13\113\6\314"+
    "\1\113\16\314\2\113\4\314\1\113\1\314\1\113\3\314"+
    "\135\113\1\321\2\113\1\324\1\330\1\113\1\331\60\113"+
    "\31\0\1\332\77\0\1\321\66\0\14\122\1\123\3\122"+
    "\1\123\1\333\2\122\1\334\2\122\1\335\63\122\1\336"+
    "\2\122\3\336\1\122\1\337\1\122\1\123\3\122\1\123"+
    "\1\333\1\122\1\336\1\334\1\122\1\0\1\335\13\122"+
    "\6\336\1\122\16\336\2\122\4\336\1\122\1\336\1\122"+
    "\3\336\7\122\1\314\2\122\3\314\1\122\1\340\1\122"+
    "\1\123\3\122\1\123\1\341\1\122\1\314\1\334\1\122"+
    "\1\0\1\320\13\122\6\314\1\122\16\314\2\122\4\314"+
    "\1\122\1\314\1\122\3\314\20\122\1\123\3\122\1\123"+
    "\103\122\1\123\3\122\1\123\1\321\2\122\1\334\2\122"+
    "\1\342\60\122\1\0\1\343\1\0\1\343\1\0\7\343"+
    "\1\344\2\0\1\345\1\344\2\0\1\343\17\0\6\343"+
    "\1\0\16\343\2\0\4\343\1\0\1\343\1\0\3\343"+
    "\5\0\1\346\1\0\1\346\1\0\7\346\1\347\2\0"+
    "\1\350\1\347\2\0\1\346\17\0\6\346\1\0\16\346"+
    "\2\0\4\346\1\0\1\346\1\0\3\346\4\0\14\351"+
    "\1\135\3\351\1\135\70\351\1\352\1\351\1\352\1\351"+
    "\5\352\2\351\1\0\2\351\1\353\1\0\2\351\1\352"+
    "\2\351\1\0\14\351\6\352\1\351\16\352\2\351\4\352"+
    "\1\351\1\352\1\351\3\352\7\351\1\354\2\351\3\354"+
    "\1\351\1\355\1\351\1\135\3\351\1\135\2\351\1\354"+
    "\2\351\1\0\14\351\6\354\1\351\16\354\2\351\4\354"+
    "\1\351\1\354\1\351\3\354\4\351\1\0\1\356\1\0"+
    "\1\356\1\0\7\356\1\357\2\0\1\360\1\357\2\0"+
    "\1\356\17\0\6\356\1\0\16\356\2\0\4\356\1\0"+
    "\1\356\1\0\3\356\5\0\1\361\1\0\1\361\1\0"+
    "\7\361\1\362\2\0\1\363\1\362\2\0\1\361\17\0"+
    "\6\361\1\0\16\361\2\0\4\361\1\0\1\361\1\0"+
    "\3\361\5\0\1\142\1\0\1\142\1\0\7\142\7\0"+
    "\1\142\17\0\6\142\1\0\16\142\2\0\4\142\1\0"+
    "\1\142\1\0\3\142\35\0\1\364\57\0\1\144\3\0"+
    "\1\144\3\0\1\144\77\0\1\144\3\0\1\144\1\204"+
    "\2\0\1\144\101\0\1\365\2\0\3\365\1\0\1\365"+
    "\10\0\1\365\17\0\6\365\1\0\16\365\2\0\4\365"+
    "\1\0\1\365\1\0\3\365\4\0\35\152\1\366\107\152"+
    "\1\366\1\367\51\152\35\154\1\370\107\154\1\370\1\371"+
    "\51\154\14\156\1\160\3\156\1\160\16\156\1\160\31\156"+
    "\1\160\16\156\20\0\1\372\67\0\14\156\1\160\3\156"+
    "\1\160\15\156\1\373\1\160\31\156\1\160\16\156\31\0"+
    "\1\374\72\0\2\165\2\0\1\165\67\0\34\22\1\0"+
    "\2\22\1\0\10\22\4\0\1\22\1\0\2\22\1\0"+
    "\1\22\1\0\6\22\1\0\6\22\1\0\7\22\30\0"+
    "\1\375\127\0\1\376\5\0\1\376\61\0\1\375\30\0"+
    "\2\377\26\0\1\172\1\0\1\173\1\0\1\172\3\0"+
    "\1\172\77\0\1\144\2\0\1\u0100\1\144\3\0\1\144"+
    "\20\0\1\u0100\56\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\1\u0101\4\35\2\u0102"+
    "\2\35\1\u0101\4\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\4\35\1\u0103\1\35\1\0\16\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\6\35\1\0"+
    "\15\35\1\u0104\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\6\35\1\0\2\35\2\u0105\12\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\6\35\1\0\7\35"+
    "\2\u0106\5\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\2\35\1\u0107\3\35\1\0\16\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\u0108\1\0\1\u0108"+
    "\1\0\1\u0108\1\0\3\u0108\33\0\1\u0108\1\0\2\u0108"+
    "\5\0\1\u0108\36\0\1\u0109\3\0\1\u0109\77\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\1\35"+
    "\1\u010a\4\35\1\0\1\35\1\u010a\14\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\1\u010b\5\35\1\0"+
    "\16\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\6\35\1\0\12\35\1\u010c\3\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\3\35\1\u010d\2\35\1\0"+
    "\16\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\3\35\1\u010e\2\35\1\0\16\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\40\0\1\u010f\54\0\1\35\1\0"+
    "\1\u0110\1\0\7\35\7\0\1\35\17\0\6\35\1\0"+
    "\16\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\216\1\0\1\216\1\0\7\216\7\0\1\216\17\0"+
    "\6\216\1\0\16\216\2\0\4\216\1\0\1\216\1\0"+
    "\3\216\4\0\3\217\1\0\2\217\3\0\10\217\1\220"+
    "\1\221\1\0\1\222\1\217\2\0\13\217\6\0\1\217"+
    "\16\0\2\217\4\0\1\217\1\0\1\217\3\0\135\217"+
    "\1\0\1\221\1\217\1\222\2\217\1\223\60\217\30\0"+
    "\1\174\3\0\1\u0111\127\0\2\u0112\67\0\1\u0113\66\0"+
    "\2\230\2\0\1\230\70\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\6\35\1\0\1\u0114\10\35"+
    "\1\u0114\4\35\2\0\4\35\1\0\1\35\1\0\2\35"+
    "\1\u0115\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\2\35\2\u0116\12\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\1\35\1\u0117"+
    "\4\35\1\0\1\35\1\u0117\14\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\4\35\1\231\1\35\1\0"+
    "\16\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\6\35\1\0\16\35\2\0\1\35\1\u0118\2\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\6\35\1\0\16\35\2\0"+
    "\3\35\1\u0119\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\6\35"+
    "\1\0\12\35\1\u011a\3\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\2\35"+
    "\1\u011b\4\35\7\0\1\35\17\0\5\35\1\u011c\1\0"+
    "\4\35\1\u011c\11\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\u011d\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\16\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\3\35\1\u011e\2\35\1\0"+
    "\16\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\6\35\1\0\1\u011f\1\35\2\u0120\5\35\1\u011f\4\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\1\u0121"+
    "\1\35\1\u0122\3\35\1\0\16\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\2\35\1\u0123\3\35\1\0"+
    "\14\35\1\u0124\1\35\2\0\1\u0125\3\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\1\35\1\u0126\4\35\1\0\1\35"+
    "\1\u0126\14\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\6\35\1\0\12\35\1\u0127\3\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\2\35\1\u0128\3\35"+
    "\1\0\16\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\6\35\1\0\5\35\2\u0129\7\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\5\35\1\u012a\1\0"+
    "\1\u012b\1\35\2\u012c\1\u012a\4\35\1\u012b\4\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\6\35\1\0"+
    "\2\35\2\u012d\12\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\7\35\2\u012e\5\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\1\u012f\5\35"+
    "\1\0\5\35\2\u0130\7\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\1\35\1\u0131\4\35\1\0\1\35"+
    "\1\u0131\14\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\3\35\1\u0132\3\35"+
    "\7\0\1\35\17\0\6\35\1\0\16\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\6\35\1\0\2\35"+
    "\2\u0133\12\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\6\35\1\0\1\u0134\10\35\1\u0134\4\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\1\u0135\5\35"+
    "\1\0\16\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\6\35\1\0\2\35\2\u0136\12\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\u0137"+
    "\1\0\7\35\7\0\1\35\17\0\6\35\1\0\16\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\4\0\110\215"+
    "\14\0\2\272\2\0\1\272\70\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\6\35\1\0\5\35"+
    "\2\u0138\7\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\1\35\1\u0139\4\35\1\0\1\35\1\u0139\14\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\70\0\1\u013a"+
    "\66\0\1\u013b\13\0\2\u013c\37\0\1\u013d\102\0\1\u013e"+
    "\150\0\1\u013f\6\0\1\u013f\77\0\1\u0140\116\0\1\u0141"+
    "\10\0\1\u0141\72\0\1\u0142\107\0\1\u0143\42\0\1\35"+
    "\1\0\1\35\1\0\2\35\1\u0144\4\35\7\0\1\35"+
    "\17\0\3\35\1\u0145\1\u0146\1\u0147\1\0\4\35\1\u0147"+
    "\5\35\1\u0148\2\35\1\u0149\2\0\3\35\1\u014a\1\0"+
    "\1\35\1\0\3\35\4\0\3\106\1\0\2\106\3\0"+
    "\10\106\1\316\1\317\1\0\1\312\1\106\2\0\13\106"+
    "\6\0\1\106\16\0\2\106\4\0\1\106\1\0\1\106"+
    "\3\0\25\106\1\0\1\317\1\106\1\312\2\106\1\322"+
    "\60\106\1\0\1\314\1\0\1\314\1\0\7\314\7\0"+
    "\1\314\17\0\6\314\1\0\16\314\2\0\4\314\1\0"+
    "\1\314\1\0\3\314\1\0\1\u014b\2\0\1\106\1\315"+
    "\1\106\1\315\1\106\7\315\5\106\1\311\1\0\1\315"+
    "\1\312\2\106\1\313\13\106\6\315\1\106\16\315\2\106"+
    "\4\315\1\106\1\315\1\106\3\315\1\106\1\u014c\2\106"+
    "\3\113\1\0\2\113\3\0\10\113\1\327\1\113\1\0"+
    "\1\324\1\330\2\0\13\113\6\0\1\113\16\0\2\113"+
    "\4\0\1\113\1\0\1\113\3\0\25\113\1\0\2\113"+
    "\1\324\1\330\1\113\1\331\61\113\1\326\1\113\1\326"+
    "\1\113\7\326\5\113\1\323\1\113\1\326\1\324\1\0"+
    "\1\113\1\325\13\113\6\326\1\113\16\326\2\113\4\326"+
    "\1\113\1\326\1\113\3\326\1\113\1\u014d\2\113\3\122"+
    "\1\0\2\122\3\0\3\122\1\123\3\122\1\123\1\341"+
    "\1\122\1\0\1\334\1\122\2\0\13\122\6\0\1\122"+
    "\16\0\2\122\4\0\1\122\1\0\1\122\3\0\20\122"+
    "\1\123\3\122\1\123\1\0\2\122\1\334\2\122\1\342"+
    "\61\122\1\336\1\122\1\336\1\122\5\336\2\337\1\u014e"+
    "\2\122\1\u014f\1\u014e\1\333\1\122\1\336\1\334\1\122"+
    "\1\0\1\335\13\122\6\336\1\122\16\336\2\122\4\336"+
    "\1\122\1\336\1\122\3\336\5\122\1\337\1\122\1\337"+
    "\1\122\7\337\1\u0150\2\122\1\u0151\1\u0150\1\333\1\122"+
    "\1\337\1\334\2\122\1\335\13\122\6\337\1\122\16\337"+
    "\2\122\4\337\1\122\1\337\1\122\3\337\5\122\1\340"+
    "\1\122\1\340\1\122\7\340\1\123\3\122\1\123\1\333"+
    "\1\122\1\340\1\334\2\122\1\335\13\122\6\340\1\122"+
    "\16\340\2\122\4\340\1\122\1\340\1\122\3\340\1\122"+
    "\1\u0152\2\122\14\0\1\344\3\0\1\344\103\0\1\347"+
    "\3\0\1\347\67\0\14\351\1\0\3\351\1\0\70\351"+
    "\1\354\1\351\1\354\1\351\5\354\2\355\1\u0153\2\351"+
    "\1\u0154\1\u0153\2\351\1\354\2\351\1\0\14\351\6\354"+
    "\1\351\16\354\2\351\4\354\1\351\1\354\1\351\3\354"+
    "\5\351\1\355\1\351\1\355\1\351\7\355\1\u0155\2\351"+
    "\1\u0156\1\u0155\2\351\1\355\17\351\6\355\1\351\16\355"+
    "\2\351\4\355\1\351\1\355\1\351\3\355\4\351\14\0"+
    "\1\357\3\0\1\357\103\0\1\362\3\0\1\362\70\0"+
    "\1\365\1\0\1\365\1\0\7\365\7\0\1\365\17\0"+
    "\6\365\1\0\16\365\2\0\4\365\1\0\1\365\1\0"+
    "\3\365\4\0\35\152\1\366\1\u0157\51\152\35\154\1\370"+
    "\1\u0158\51\154\14\156\1\160\3\156\1\160\16\156\1\160"+
    "\14\156\2\u0159\13\156\1\160\16\156\14\0\2\374\2\0"+
    "\1\374\133\0\1\u015a\6\0\1\u015a\123\0\1\u015b\21\0"+
    "\1\35\1\0\1\u015c\1\0\7\35\7\0\1\35\17\0"+
    "\6\35\1\0\16\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\1\u015d\10\35\1\u015d\4\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\35\1\0\2\35\1\u015e\4\35\7\0\1\35"+
    "\17\0\4\35\1\u015f\1\35\1\0\2\35\2\u0160\1\35"+
    "\2\u0161\7\35\2\0\1\35\1\u0162\2\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\1\u0163\5\35\1\0\16\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\u0164\1\0\7\35\7\0\1\35\17\0\6\35\1\0"+
    "\16\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\6\35\1\0\1\u0165\10\35\1\u0165\4\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\6\35\1\0\12\35"+
    "\1\u0166\3\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\u0167\1\0\7\35\7\0\1\35"+
    "\17\0\6\35\1\0\16\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\16\35\2\0\3\35"+
    "\1\u0168\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\6\35\1\0"+
    "\2\35\2\u0169\12\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\2\35\1\u016a\3\35\1\0\16\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\5\35\1\u016b"+
    "\1\0\4\35\1\u016b\11\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\40\0\1\u0111\54\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\2\35\1\u016c\3\35"+
    "\1\0\16\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\7\0\1\u016d\2\0\3\u016d\1\0\1\u016d\2\0\1\u0111"+
    "\4\0\1\u016e\1\u016d\17\0\6\u016d\1\0\16\u016d\1\u016f"+
    "\1\0\4\u016d\1\0\1\u016d\1\0\3\u016d\54\0\1\u0170"+
    "\5\0\1\u0170\45\0\2\u0171\2\0\1\u0171\70\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\6\35"+
    "\1\0\14\35\1\u0172\1\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\14\35\1\u0173\1\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\6\35"+
    "\1\0\1\u0174\10\35\1\u0174\4\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\2\35\1\u0175\3\35\1\0"+
    "\16\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\u0176\1\0\7\35\7\0\1\35\17\0"+
    "\6\35\1\0\16\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\12\35\1\u0177\3\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\2\35\1\u0178"+
    "\3\35\1\0\16\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\12\35\1\u0179\3\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\6\35\1\0"+
    "\1\u017a\1\35\2\u017b\5\35\1\u017a\4\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\5\35\1\u017c\1\0"+
    "\4\35\1\u017c\11\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\u017d\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\16\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\3\35\1\u017e\2\35\1\0"+
    "\16\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\6\35\1\0\2\35\2\u017f\12\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\6\35\1\0\5\35\2\u0180"+
    "\7\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\u0181\1\0\7\35\7\0\1\35\17\0"+
    "\6\35\1\0\16\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\1\u0182\5\35\1\0\16\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\2\35\1\u0183\4\35\7\0\1\35\17\0\6\35"+
    "\1\0\16\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\6\35\1\0\1\u0184\10\35\1\u0184\4\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\6\35\1\0"+
    "\1\u0185\10\35\1\u0185\4\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\12\35\1\u0186\3\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\u0187\1\0\7\35\7\0\1\35\17\0\6\35"+
    "\1\0\16\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\6\35\1\0\1\u0188\10\35\1\u0188\4\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\u0189\1\0\7\35\7\0\1\35\17\0\6\35\1\0"+
    "\16\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\6\35\1\0\12\35\1\u018a\3\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\6\35\1\0\1\u018b\10\35"+
    "\1\u018b\4\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\3\35\1\u018c\2\35\1\0\16\35\2\0\4\35"+
    "\1\0\1\u018d\1\0\3\35\5\0\1\35\1\0\1\u018e"+
    "\1\0\7\35\7\0\1\35\17\0\6\35\1\0\16\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\6\35"+
    "\1\0\12\35\1\u018f\3\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\1\u0190\10\35\1\u0190"+
    "\4\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\1\u0191\5\35\1\0\16\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\3\35"+
    "\1\u0192\3\35\7\0\1\35\17\0\6\35\1\0\16\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\u0193\1\0\7\35\7\0\1\35\17\0\6\35"+
    "\1\0\16\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\6\35\1\0\12\35\1\u0194\3\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\47\0\1\u0195\107\0\1\u0196"+
    "\112\0\1\u0197\142\0\1\u0198\53\0\1\u0199\106\0\1\u019a"+
    "\6\0\1\u019a\122\0\1\u019b\65\0\1\u019c\6\0\1\u019c"+
    "\106\0\1\u019d\10\0\1\u019d\100\0\2\u019e\33\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\6\35"+
    "\1\0\5\35\2\u019f\5\35\1\u01a0\1\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\2\35\1\u01a1\3\35"+
    "\1\0\16\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\6\35\1\0\5\35\2\u01a2\7\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\6\35\1\0\12\35"+
    "\1\u01a3\3\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\6\35\1\0\5\35\2\u01a4\7\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\2\35\1\u01a5\3\35"+
    "\1\0\16\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\u01a6\1\0\7\35\7\0\1\35"+
    "\17\0\6\35\1\0\16\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\4\0\14\122\1\u014e\3\122\1\u014e\1\333"+
    "\2\122\1\334\2\122\1\335\74\122\1\u0150\3\122\1\u0150"+
    "\1\333\2\122\1\334\2\122\1\335\60\122\14\351\1\u0153"+
    "\3\351\1\u0153\103\351\1\u0155\3\351\1\u0155\67\351\14\156"+
    "\1\160\3\156\1\160\16\156\1\160\10\156\1\u01a7\5\156"+
    "\1\u01a7\12\156\1\160\16\156\57\0\2\u01a8\110\0\2\u01a9"+
    "\26\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\3\35\1\u01aa\2\35\1\0\16\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\1\u01ab\5\35\1\0"+
    "\16\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\u01ac\1\0\7\35\7\0\1\35\17\0"+
    "\6\35\1\0\16\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\16\35\2\0\1\35\1\u01ad"+
    "\2\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\2\35\1\u01ae\4\35\7\0\1\35\17\0"+
    "\6\35\1\0\16\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\15\35\1\u01af\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\6\35\1\0\5\35"+
    "\2\u01b0\7\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\6\35\1\0\16\35\2\0\1\u01b1\3\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\2\35\1\u01b2\3\35\1\0"+
    "\16\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\u01b3\1\0\7\35\7\0\1\35\17\0"+
    "\6\35\1\0\16\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\12\35\1\u01b4\3\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\6\35\1\0"+
    "\1\u01b5\10\35\1\u01b5\4\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\16\35\2\0\2\35"+
    "\1\u01b6\1\35\1\0\1\35\1\0\3\35\5\0\1\u016d"+
    "\1\0\1\u016d\1\0\7\u016d\1\u01b7\3\0\1\u01b8\2\0"+
    "\1\u016d\17\0\6\u016d\1\0\16\u016d\2\0\4\u016d\1\0"+
    "\1\u016d\1\0\3\u016d\7\0\1\u01b9\2\0\3\u01b9\1\0"+
    "\1\u01b9\10\0\1\u01b9\17\0\6\u01b9\1\0\16\u01b9\2\0"+
    "\4\u01b9\1\0\1\u01b9\1\0\3\u01b9\7\0\1\u01ba\2\0"+
    "\3\u01ba\1\0\1\u01ba\10\0\1\u01ba\17\0\6\u01ba\1\0"+
    "\16\u01ba\2\0\4\u01ba\1\0\1\u01ba\1\0\3\u01ba\50\0"+
    "\1\u01bb\6\0\1\u01bb\35\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\1\35\1\u01bc\4\35\1\0"+
    "\1\35\1\u01bc\14\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\5\35\2\u01bd\7\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\1\35\1\u01be"+
    "\4\35\1\0\1\35\1\u01be\14\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\6\35\1\0\16\35\2\0"+
    "\1\u01bf\3\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\6\35"+
    "\1\0\2\35\2\u01c0\12\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\14\35\1\u01c1\1\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\2\35"+
    "\1\u01c2\3\35\1\0\16\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\5\35\2\u01c3\7\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\6\35"+
    "\1\0\1\u01c4\10\35\1\u01c4\4\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\6\35\1\0\15\35\1\u01c5"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\u01c6\1\0\7\35\7\0\1\35\17\0\6\35"+
    "\1\0\16\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\6\35\1\0\2\35\2\u01c7\12\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\6\35\1\0\1\u01c8"+
    "\10\35\1\u01c8\4\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\16\35\2\0\1\35\1\u01c9"+
    "\2\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\6\35\1\0"+
    "\5\35\2\u01ca\7\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\5\35\1\u01cb\1\0\4\35\1\u01cb\11\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\6\35"+
    "\1\0\14\35\1\u01cc\1\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\1\35\1\u01cd\4\35\1\0\1\35"+
    "\1\u01cd\14\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\u01ce\1\0\7\35\7\0\1\35"+
    "\17\0\2\35\1\u01cf\3\35\1\0\16\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\6\35\1\0\1\u01d0"+
    "\10\35\1\u01d0\4\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\u01d1\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\16\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\u01d2\1\0"+
    "\7\35\7\0\1\35\17\0\6\35\1\0\16\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\6\35\1\0"+
    "\1\u01d3\10\35\1\u01d3\4\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\2\35\1\u01d4\3\35\1\0\16\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\3\35"+
    "\1\u01d5\2\35\1\0\16\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\5\35\2\u01d6\7\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\2\35"+
    "\1\u01d7\3\35\1\0\16\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\1\u01d8\10\35\1\u01d8"+
    "\4\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\u01d9\1\0\7\35\7\0\1\35\17\0"+
    "\6\35\1\0\16\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\51\0\1\u01da\126\0\1\u01db\70\0\1\u01dc\45\0"+
    "\1\u01dd\170\0\1\u01de\70\0\1\u01df\52\0\1\u01e0\156\0"+
    "\2\u01e1\32\0\1\u01e2\11\0\1\u01de\33\0\1\u01e3\41\0"+
    "\1\u01da\105\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\12\35\1\u01e4\3\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\3\35\1\u01e5"+
    "\2\35\1\0\16\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\16\35\2\0\3\35\1\u01e6"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\1\35\1\u01e7\4\35"+
    "\1\0\1\35\1\u01e7\14\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\2\35\1\u01e8\3\35\1\0\16\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\3\35"+
    "\1\u01e9\2\35\1\0\16\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\12\35\1\u01ea\3\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\6\35"+
    "\1\0\1\u01eb\10\35\1\u01eb\4\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\4\0\14\156\1\160\3\156\1\160"+
    "\16\156\1\160\4\156\1\u01ec\6\156\1\u01ec\15\156\1\160"+
    "\16\156\61\0\2\u01ed\26\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\4\35\1\u01ee\1\35\1\0"+
    "\16\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\1\35\1\u01ef\4\35\1\0\1\35\1\u01ef\14\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\5\35\1\u01f0"+
    "\1\0\4\35\1\u01f0\11\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\5\35\2\u01f1\7\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\6\35"+
    "\1\0\5\35\2\u01f2\7\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\2\35"+
    "\1\u01f3\4\35\7\0\1\35\17\0\6\35\1\0\16\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\5\35"+
    "\1\u01f4\1\0\4\35\1\u01f4\11\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\6\35\1\0\5\35\2\u01f5"+
    "\7\35\2\0\4\35\1\0\1\35\1\0\3\35\24\0"+
    "\1\u01b8\70\0\1\u01b9\1\0\1\u01b9\1\0\7\u01b9\6\0"+
    "\1\u01f6\1\u01b9\17\0\6\u01b9\1\0\16\u01b9\2\0\4\u01b9"+
    "\1\0\1\u01b9\1\0\3\u01b9\5\0\1\u01ba\1\0\1\u01ba"+
    "\1\0\7\u01ba\7\0\1\u01ba\17\0\6\u01ba\1\0\16\u01ba"+
    "\1\u01f7\1\0\4\u01ba\1\0\1\u01ba\1\0\3\u01ba\63\0"+
    "\2\u01f8\30\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\3\35\1\u01f9\2\35\1\0\16\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\1\35\1\u01fa"+
    "\4\35\1\0\1\35\1\u01fa\14\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\2\35\1\u01fb\3\35\1\0"+
    "\16\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\6\35\1\0\7\35\2\u01fc\5\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\6\35\1\0\12\35\1\u01fd"+
    "\3\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\1\35\1\u01fe\4\35\1\0\1\35\1\u01fe\14\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\3\35\1\u01ff"+
    "\2\35\1\0\16\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\5\35\1\u0200\1\0\4\35\1\u0200\11\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\6\35"+
    "\1\0\15\35\1\u0201\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\4\35\1\u0202\1\35\1\0\16\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\2\35\1\u0203\4\35\7\0\1\35\17\0"+
    "\6\35\1\0\16\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\2\35\1\u0204\3\35\1\0\16\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\3\35\1\u0205"+
    "\2\35\1\0\16\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\16\35\2\0\3\35\1\u0206"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\5\35\1\u0207\1\0"+
    "\4\35\1\u0207\11\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\1\u0208\10\35\1\u0208\4\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\6\35"+
    "\1\0\1\u0209\10\35\1\u0209\4\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\5\35\1\u020a\1\0\4\35"+
    "\1\u020a\11\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\6\35\1\0\12\35\1\u020b\3\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\56\0\1\u01de\10\0\1\u01de"+
    "\27\0\1\u020c\11\0\1\u01de\33\0\1\u01e3\102\0\1\u01df"+
    "\6\0\1\u01df\104\0\1\u01da\5\0\1\u01da\46\0\1\u01de"+
    "\33\0\1\u01e3\130\0\1\u01de\101\0\1\u020d\71\0\1\u020e"+
    "\126\0\1\u020f\23\0\1\35\1\0\1\u0210\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\16\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\5\35\1\u0211\1\0"+
    "\4\35\1\u0211\11\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\u0212\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\16\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\6\35\1\0\16\35\2\0"+
    "\4\35\1\0\1\35\1\0\1\35\1\u0213\1\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\6\35\1\0\2\35\2\u0214\12\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\u0215\1\0"+
    "\7\35\7\0\1\35\17\0\6\35\1\0\16\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\6\35\1\0"+
    "\1\u0216\10\35\1\u0216\4\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\15\35\1\u0217\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\4\0\14\156\1\160"+
    "\3\156\1\160\16\156\1\160\17\156\2\u0218\10\156\1\160"+
    "\16\156\52\0\1\u0219\10\0\1\u0219\25\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\6\35\1\0"+
    "\2\35\2\u021a\12\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\u021b\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\16\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\6\35\1\0\12\35\1\u021c"+
    "\3\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\6\35\1\0\1\u021d\10\35\1\u021d\4\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\6\35\1\0\12\35"+
    "\1\u021e\3\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\6\35\1\0\15\35\1\u021f\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\1\u0220\5\35\1\0\16\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\20\0\1\u01b7"+
    "\3\0\1\u01b8\103\0\1\u0221\3\0\1\u0222\150\0\2\u0223"+
    "\26\0\1\35\1\0\1\u0224\1\0\7\35\7\0\1\35"+
    "\17\0\6\35\1\0\16\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\5\35\1\u0225\1\0\4\35\1\u0225"+
    "\11\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\2\35\1\u0226\3\35\1\0\16\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\6\35\1\0\1\u0227\10\35"+
    "\1\u0227\4\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\u0228\1\0\7\35\7\0\1\35"+
    "\17\0\6\35\1\0\16\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\14\35\1\u0229\1\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\u022a\1\0\7\35\7\0\1\35\17\0\6\35"+
    "\1\0\16\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\2\35\1\u022b\3\35\1\0\16\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\4\35\1\u022c\1\35"+
    "\1\0\16\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\5\35\1\u022d\1\0\4\35\1\u022d\11\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\u022e\1\0\7\35\7\0\1\35\17\0\6\35\1\0"+
    "\16\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\6\35\1\0\1\u022f\10\35\1\u022f\4\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\u0230"+
    "\1\0\7\35\7\0\1\35\17\0\6\35\1\0\16\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\51\0\1\u0231"+
    "\45\0\1\u01de\171\0\1\u01de\25\0\1\u0232\105\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\6\35"+
    "\1\0\16\35\2\0\4\35\1\0\1\35\1\0\1\35"+
    "\1\u0233\1\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\1\u0234\10\35\1\u0234"+
    "\4\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\6\35\1\0\2\35\2\u0235\12\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\6\35\1\0\16\35\2\0"+
    "\4\35\1\0\1\35\1\0\1\35\1\u0236\1\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\6\35\1\0\2\35\2\u0237\12\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\6\35\1\0\16\35\2\0"+
    "\4\35\1\0\1\35\1\0\1\35\1\u0238\1\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\6\35\1\0\16\35\2\0\4\35\1\0\1\35\1\0"+
    "\1\35\1\u0239\1\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\1\u023a\5\35\1\0\16\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\4\0\14\156"+
    "\1\160\3\156\1\160\16\156\1\160\21\156\2\u023b\6\156"+
    "\1\160\16\156\14\0\2\u023c\2\0\1\u023c\70\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\2\35"+
    "\1\u023d\3\35\1\0\16\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\2\35\1\u023e\3\35\1\0\16\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\5\35"+
    "\1\u023f\1\0\4\35\1\u023f\11\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\u0240\1\0"+
    "\7\35\7\0\1\35\17\0\6\35\1\0\16\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\3\35\1\u0241"+
    "\2\35\1\0\16\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\24\0\1\u0222\141\0\1\u0242\10\0\1\u0242\25\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\6\35\1\0\16\35\2\0\4\35\1\0\1\35\1\0"+
    "\1\35\1\u0243\1\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\6\35\1\0\1\u0244\10\35"+
    "\1\u0244\4\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\5\35\1\u0245\1\0\4\35\1\u0245\11\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\u0246\1\0\7\35\7\0\1\35\17\0\6\35\1\0"+
    "\16\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\6\35\1\0\16\35\2\0\4\35\1\0\1\35\1\0"+
    "\1\35\1\u0247\1\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\5\35\1\u0248\1\0\4\35"+
    "\1\u0248\11\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\1\u0249\5\35\1\0\16\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\u024a\1\0"+
    "\7\35\7\0\1\35\17\0\6\35\1\0\16\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\3\35\1\u024b"+
    "\2\35\1\0\16\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\u024c\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\16\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\52\0\1\u01de\105\0\1\u01de\6\0"+
    "\1\u01de\35\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\16\35\2\0\4\35\1\0"+
    "\1\35\1\0\1\35\1\u024d\1\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\6\35\1\0"+
    "\5\35\2\u024e\7\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\7\35\2\u024f\5\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\6\35\1\0"+
    "\16\35\2\0\4\35\1\0\1\35\1\0\1\35\1\u0250"+
    "\1\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\16\35\2\0\4\35\1\0"+
    "\1\35\1\0\1\35\1\u0251\1\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\5\35\1\u0252"+
    "\1\0\4\35\1\u0252\11\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\4\35\1\u0253\1\35\1\0\16\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\4\0\14\156"+
    "\1\160\3\156\1\160\16\156\1\160\12\156\1\u0254\10\156"+
    "\1\u0254\5\156\1\160\16\156\14\0\2\u023c\2\0\1\u023c"+
    "\43\0\1\u0255\24\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\5\35\1\u0256\1\0\4\35\1\u0256"+
    "\11\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\1\35\1\u0257\4\35\1\0\1\35\1\u0257\14\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\6\35\1\0"+
    "\15\35\1\u0258\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\35\0\1\u0259\57\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\1\u025a\5\35\1\0\16\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\u025b\1\0\7\35\7\0\1\35\17\0\6\35\1\0"+
    "\16\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\1\u025c\5\35\1\0\16\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\u025d\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\16\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\2\35\1\u025e\4\35\7\0\1\35\17\0\6\35"+
    "\1\0\16\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\1\u025f\5\35\1\0\16\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\6\35\1\0\1\u0260\10\35"+
    "\1\u0260\4\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\4\35\1\u0261\1\35\1\0\16\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\1\u0262\5\35\1\0"+
    "\16\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\2\35\1\u0263\3\35\1\0\16\35\2\0\4\35\1\0"+
    "\1\35\1\0\3\35\5\0\1\35\1\0\1\35\1\0"+
    "\7\35\7\0\1\35\17\0\6\35\1\0\16\35\2\0"+
    "\4\35\1\0\1\35\1\0\1\35\1\u0264\1\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\1\u0265\5\35\1\0\16\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\16\35\2\0\4\35"+
    "\1\0\1\35\1\0\1\35\1\u0266\1\35\4\0\14\156"+
    "\1\160\3\156\1\160\10\156\1\u0267\5\156\1\160\31\156"+
    "\1\160\16\156\45\0\1\u0268\43\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\6\35\1\0\15\35"+
    "\1\u0269\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\u026a\1\0\7\35\7\0\1\35\17\0"+
    "\6\35\1\0\16\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\20\0\2\u0259\2\0\1\u0259\70\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\3\35\1\u026b"+
    "\2\35\1\0\16\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\3\35\1\u026c\2\35\1\0\16\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\2\35\1\u026d\4\35\7\0\1\35\17\0"+
    "\6\35\1\0\16\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\2\35\2\u026e\12\35\2\0"+
    "\4\35\1\0\1\35\1\0\3\35\5\0\1\35\1\0"+
    "\1\35\1\0\7\35\7\0\1\35\17\0\3\35\1\u026f"+
    "\2\35\1\0\16\35\2\0\4\35\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\5\35\1\u0270\1\0\4\35\1\u0270\11\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\5\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\6\35"+
    "\1\0\16\35\2\0\3\35\1\u0271\1\0\1\35\1\0"+
    "\3\35\5\0\1\35\1\0\1\35\1\0\7\35\7\0"+
    "\1\35\17\0\6\35\1\0\16\35\2\0\4\35\1\0"+
    "\1\35\1\0\1\35\1\u0272\1\35\4\0\14\156\1\u0273"+
    "\1\u0267\2\156\1\u0273\16\156\1\160\31\156\1\160\16\156"+
    "\46\0\1\u0274\42\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\5\35\1\u0275\1\0\4\35\1\u0275"+
    "\11\35\2\0\4\35\1\0\1\35\1\0\3\35\5\0"+
    "\1\35\1\0\1\35\1\0\7\35\7\0\1\35\17\0"+
    "\5\35\1\u0276\1\0\4\35\1\u0276\11\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\6\35\1\0\16\35"+
    "\2\0\4\35\1\0\1\35\1\0\1\35\1\u0277\1\35"+
    "\5\0\1\35\1\0\1\u0278\1\0\7\35\7\0\1\35"+
    "\17\0\6\35\1\0\16\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\7\35\2\u0279\5\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\71\0\1\u027a"+
    "\23\0\1\35\1\0\1\u027b\1\0\7\35\7\0\1\35"+
    "\17\0\6\35\1\0\16\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\5\0\1\35\1\0\1\u027c\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\16\35\2\0\4\35"+
    "\1\0\1\35\1\0\3\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\6\35\1\0\16\35"+
    "\2\0\4\35\1\0\1\35\1\0\1\35\1\u027d\1\35"+
    "\5\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\6\35\1\0\16\35\2\0\4\35\1\0\1\35"+
    "\1\0\1\35\1\u027e\1\35\5\0\1\35\1\0\1\35"+
    "\1\0\7\35\7\0\1\35\17\0\6\35\1\0\5\35"+
    "\2\u027f\7\35\2\0\4\35\1\0\1\35\1\0\3\35"+
    "\72\0\1\u0280\22\0\1\35\1\0\1\35\1\0\7\35"+
    "\7\0\1\35\17\0\6\35\1\0\16\35\2\0\4\35"+
    "\1\0\1\35\1\0\1\35\1\u0281\1\35\5\0\1\35"+
    "\1\0\1\35\1\0\7\35\7\0\1\35\17\0\6\35"+
    "\1\0\12\35\1\u0282\3\35\2\0\4\35\1\0\1\35"+
    "\1\0\3\35\51\0\1\u0283\43\0\1\35\1\0\1\u0284"+
    "\1\0\7\35\7\0\1\35\17\0\6\35\1\0\16\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\71\0\1\u0285"+
    "\23\0\1\35\1\0\1\35\1\0\7\35\7\0\1\35"+
    "\17\0\1\35\1\u0286\4\35\1\0\1\35\1\u0286\14\35"+
    "\2\0\4\35\1\0\1\35\1\0\3\35\7\0\1\u0287"+
    "\120\0\2\u0287\2\0\1\u0287\7\0\1\u0288\73\0\2\u0288"+
    "\2\0\1\u0288\1\0\1\u0289\36\0\2\u028a\5\0\1\u028b"+
    "\100\0\2\u028c\114\0\1\u028d\101\0\2\u028e\114\0\1\u028f"+
    "\101\0\2\u0290\114\0\1\u0291\101\0\2\u0292\41\0\2\u0290"+
    "\2\0\1\u0290\10\0\1\u0293\137\0\2\u0294\47\0\1\u0290"+
    "\155\0\1\u0290\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[37008];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\13\0\2\1\1\11\12\1\2\11\2\1"+
    "\3\11\36\1\2\11\2\1\1\11\6\1\1\11\7\1"+
    "\1\11\5\1\1\0\1\11\2\1\1\11\3\1\1\11"+
    "\1\1\1\11\1\1\1\11\4\0\2\1\1\11\3\1"+
    "\1\11\1\1\1\0\1\1\1\0\2\1\1\0\1\11"+
    "\6\1\1\11\2\0\5\1\1\0\1\1\1\0\1\1"+
    "\2\0\1\11\2\0\2\1\1\0\42\1\1\0\2\1"+
    "\1\11\1\1\12\0\1\1\3\0\3\1\3\11\1\1"+
    "\3\0\2\1\1\11\1\1\1\11\3\0\5\1\1\0"+
    "\1\11\2\0\1\11\7\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\1\1\0\1\11\1\0\2\11\2\1\1\11"+
    "\3\0\16\1\1\0\1\1\3\0\46\1\12\0\7\1"+
    "\1\11\2\1\1\11\4\1\1\11\1\0\1\1\1\0"+
    "\2\11\1\1\2\0\21\1\4\0\44\1\12\0\11\1"+
    "\1\0\1\11\16\1\1\11\3\0\36\1\11\0\1\11"+
    "\11\1\1\0\10\1\3\0\23\1\4\0\22\1\1\11"+
    "\1\0\15\1\2\0\11\1\1\0\5\1\1\0\22\1"+
    "\1\0\22\1\1\0\13\1\1\0\5\1\1\0\5\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\14\0\1\11"+
    "\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[660];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    protected String heredoc = null;
    protected int heredoc_len = 0;
    private boolean asp_tags = false;
    private StateStack stack = new StateStack();

    private boolean short_tags_allowed;

    private LexerInput input;

    /*public PhpLexer5(int state){
        initialize(state);
    }*/
    /*public void reset(char array[], int offset, int length) {
        this.zzBuffer = array;
        this.zzCurrentPos = offset;
        this.zzMarkedPos = offset;
        this.zzPushbackPos = offset;
        this.yychar = offset;
        this.zzEndRead = offset + length;
        this.zzStartRead = offset;
        this.zzAtEOF = zzCurrentPos >= zzEndRead;
        this.firstPos = offset;
    }



    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
    	this.zzReader = reader;
    	this.zzBuffer = buffer;
    	this.zzMarkedPos = parameters[0];
    	this.zzPushbackPos = parameters[1];
    	this.zzCurrentPos = parameters[2];
    	this.zzStartRead = parameters[3];
    	this.zzEndRead = parameters[4];
    	this.yyline = parameters[5];
    	initialize(parameters[6]);
    }
    */
        public PHP5ColoringLexer(LexerRestartInfo info, boolean short_tags_allowed, boolean asp_tags_allowed, boolean inPHP) {
            this.input = info.input();
            this.asp_tags = asp_tags_allowed;
            this.short_tags_allowed = short_tags_allowed;

            if(info.state() != null) {
                //reset state
                setState((LexerState)info.state());
            } else {
                //initial state
                if (inPHP) {
                    zzState = zzLexicalState = ST_PHP_IN_SCRIPTING;
                }
                else {
                    zzState = zzLexicalState = YYINITIAL;
                }
                stack.clear();
            }

        }

        public static final class LexerState  {
            final StateStack stack;
            /** the current state of the DFA */
            final int zzState;
            /** the current lexical state */
            final int zzLexicalState;
            /** remember the heredoc */
            final String heredoc;
            /** and the lenght of */
            final int heredoc_len;

            final boolean shortTag;
            final boolean aspTag;

            LexerState (StateStack stack, int zzState, int zzLexicalState, String heredoc, int heredoc_len, boolean shortTag, boolean aspTag) {
                this.stack = stack;
                this.zzState = zzState;
                this.zzLexicalState = zzLexicalState;
                this.heredoc = heredoc;
                this.heredoc_len = heredoc_len;
                this.shortTag = shortTag;
                this.aspTag = aspTag;
            }

            @Override
            public boolean equals(Object obj) {
                if (this == obj) {
			return true;
		}

		if (obj == null || obj.getClass() != this.getClass()) {
			return false;
		}

                LexerState state = (LexerState) obj;
                return (this.stack.equals(state.stack)
                    && (this.zzState == state.zzState)
                    && (this.zzLexicalState == state.zzLexicalState)
                    && (this.heredoc_len == state.heredoc_len)
                    && (this.shortTag == state.shortTag)
                    && (this.aspTag == state.aspTag)
                    && ((this.heredoc == null && state.heredoc == null) || (this.heredoc != null && state.heredoc != null && this.heredoc.equals(state.heredoc))));
            }

            @Override
            public int hashCode() {
                int hash = 11;
                hash = 31 * hash + this.zzState;
                hash = 31 * hash + this.zzLexicalState;
                if (stack != null) {
                    hash = 31 * hash + this.stack.hashCode();
                }
                hash = 31 * hash + this.heredoc_len;
                if (heredoc != null) {
                    hash = 31 * hash + this.heredoc.hashCode();
                }
                return hash;
            }
        }

        public LexerState getState() {
            return new LexerState(stack.createClone(), zzState, zzLexicalState, heredoc, heredoc_len, short_tags_allowed, asp_tags);
        }

        public void setState(LexerState state) {
            this.stack.copyFrom(state.stack);
            this.zzState = state.zzState;
            this.zzLexicalState = state.zzLexicalState;
            this.heredoc = state.heredoc;
            this.heredoc_len = state.heredoc_len;
        }

     protected boolean isHeredocState(int state){
    	    	return state == ST_PHP_HEREDOC || state == ST_PHP_START_HEREDOC || state == ST_PHP_END_HEREDOC || state == ST_PHP_NOWDOC;
    }

    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }

    protected int getZZStartRead() {
    	return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
    	return this.zzPushbackPos;
    }

        protected void pushBack(int i) {
		yypushback(i);
	}

        protected void popState() {
		yybegin(stack.popStack());
	}

	protected void pushState(final int state) {
		stack.pushStack(getZZLexicalState());
		yybegin(state);
	}


 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PHP5ColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PHP5ColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1354) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PHPTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();
            
            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2:
          { return PHPTokenId.T_INLINE_HTML;
          }
        case 140: break;
        case 53:
          { popState();
    return PHPTokenId.PHPDOC_COMMENT_END;
          }
        case 141: break;
        case 56:
          { String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?' && short_tags_allowed)) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.T_OPEN_TAG_WITH_ECHO;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 142: break;
        case 137:
          { return PHPTokenId.PHP__NAMESPACE__;
          }
        case 143: break;
        case 9:
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 144: break;
        case 48:
          { heredoc=null;
    heredoc_len=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 1;
    // mark just the label
    if (yytext().charAt(yylength() - 2)==';') {
	    back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_HEREDOC_TAG;
          }
        case 145: break;
        case 97:
          { return PHPTokenId.PHP_WHILE;
          }
        case 146: break;
        case 47:
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_HEREDOC_TAG;
    } else {
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 147: break;
        case 26:
          { return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 148: break;
        case 88:
          { return PHPTokenId.PHP_CONST;
          }
        case 149: break;
        case 110:
          { return PHPTokenId.PHP_REQUIRE;
          }
        case 150: break;
        case 5:
          { return PHPTokenId.PHP_TOKEN;
          }
        case 151: break;
        case 66:
          { yypushback(2);
    return PHPTokenId.PHP_COMMENT;
          }
        case 152: break;
        case 74:
          { return PHPTokenId.PHP_NULL;
          }
        case 153: break;
        case 29:
          { if (asp_tags) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 154: break;
        case 101:
          { return PHPTokenId.PHP_RETURN;
          }
        case 155: break;
        case 7:
          { return PHPTokenId.WHITESPACE;
          }
        case 156: break;
        case 98:
          { return PHPTokenId.PHP_CASTING;
          }
        case 157: break;
        case 130:
          { return PHPTokenId.PHP_ENDDECLARE;
          }
        case 158: break;
        case 127:
          { return PHPTokenId.PHP_PROTECTED;
          }
        case 159: break;
        case 92:
          { return PHPTokenId.PHP_TRAIT;
          }
        case 160: break;
        case 71:
          { return PHPTokenId.PHP_EVAL;
          }
        case 161: break;
        case 87:
          { return PHPTokenId.PHP_ARRAY;
          }
        case 162: break;
        case 37:
          { return PHPTokenId.PHP_DO;
          }
        case 163: break;
        case 114:
          { return PHPTokenId.PHP_PRIVATE;
          }
        case 164: break;
        case 24:
          { popState();
	return PHPTokenId.PHP_TOKEN;
          }
        case 165: break;
        case 35:
          { if (asp_tags) {
            yybegin(YYINITIAL);
            stack.clear();
	    return PHPTokenId.PHP_CLOSETAG;
	}
	return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 166: break;
        case 119:
          { return PHPTokenId.PHP_CONTINUE;
          }
        case 167: break;
        case 19:
          { yypushback(1);
	yybegin(ST_PHP_NOWDOC);
          }
        case 168: break;
        case 105:
          { return PHPTokenId.PHP_PUBLIC;
          }
        case 169: break;
        case 6:
          { return  PHPTokenId.PHP_STRING;
          }
        case 170: break;
        case 134:
          { return PHPTokenId.PHP_REQUIRE_ONCE;
          }
        case 171: break;
        case 3:
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 172: break;
        case 49:
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
        label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_NOWDOC_TAG;
    } else {
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 173: break;
        case 90:
          { return PHPTokenId.PHP_CLONE;
          }
        case 174: break;
        case 85:
          { return PHPTokenId.PHP_BREAK;
          }
        case 175: break;
        case 58:
          { return PHPTokenId.PHP_NEW;
          }
        case 176: break;
        case 72:
          { return PHPTokenId.PHP_FROM;
          }
        case 177: break;
        case 121:
          { return PHPTokenId.PHP__LINE__;
          }
        case 178: break;
        case 109:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
        int startString=3+bprefix;
        /* 3 is <<<, 2 is quotes, 1 is newline */
        heredoc_len = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
        while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
            startString++;
            heredoc_len--;
        }
        // first quate
        startString++;
        heredoc = yytext().substring(startString, heredoc_len+startString);
        yybegin(ST_PHP_START_NOWDOC);
        return PHPTokenId.PHP_NOWDOC_TAG;
          }
        case 179: break;
        case 50:
          { heredoc=null; heredoc_len=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 1;
    // mark just the label
    if (yytext().charAt(yylength() - 2)==';') {
	    back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_NOWDOC_TAG;
          }
        case 180: break;
        case 103:
          { return PHPTokenId.PHP_SWITCH;
          }
        case 181: break;
        case 42:
          { yypushback(1);
    return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 182: break;
        case 34:
          { pushState(ST_PHP_COMMENT);
    return PHPTokenId.PHP_COMMENT_START;
          }
        case 183: break;
        case 117:
          { return PHPTokenId.PHP_FUNCTION;
          }
        case 184: break;
        case 23:
          { yypushback(1);
	popState();
        if (yylength() > 0)
            return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 185: break;
        case 136:
          { return PHPTokenId.PHP__FUNCTION__;
          }
        case 186: break;
        case 116:
          { return PHPTokenId.PHP_ENDWHILE;
          }
        case 187: break;
        case 89:
          { return PHPTokenId.PHP_CATCH;
          }
        case 188: break;
        case 31:
          { return PHPTokenId.PHP_OPERATOR;
          }
        case 189: break;
        case 16:
          { popState();
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 190: break;
        case 27:
          { return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 191: break;
        case 80:
          { pushState(ST_PHP_IN_SCRIPTING);
    //yybegin(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_OPENTAG;
    //return createSymbol(ASTSymbol.T_OPEN_TAG);
          }
        case 192: break;
        case 32:
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 193: break;
        case 62:
          { return PHPTokenId.PHP_VAR;
          }
        case 194: break;
        case 14:
          { pushState(ST_PHP_LINE_COMMENT);
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 195: break;
        case 131:
          { return PHPTokenId.PHP_INSTANCEOF;
          }
        case 196: break;
        case 118:
          { return PHPTokenId.PHP_ABSTRACT;
          }
        case 197: break;
        case 73:
          { pushState(ST_PHP_DOC_COMMENT);
    yypushback(yylength()-3);
    return PHPTokenId.PHPDOC_COMMENT_START;
          }
        case 198: break;
        case 125:
          { return PHPTokenId.PHP_INTERFACE;
          }
        case 199: break;
        case 107:
          { return PHPTokenId.PHP_EXTENDS;
          }
        case 200: break;
        case 135:
          { return PHPTokenId.PHP_INCLUDE_ONCE;
          }
        case 201: break;
        case 132:
          { return PHPTokenId.PHP_IMPLEMENTS;
          }
        case 202: break;
        case 91:
          { return PHPTokenId.PHP_CLASS;
          }
        case 203: break;
        case 67:
          { yypushback(2); // go back to mark end of comment in the next token
        return PHPTokenId.PHPDOC_COMMENT;
          }
        case 204: break;
        case 70:
          { return PHPTokenId.PHP_ELSE;
          }
        case 205: break;
        case 38:
          { return PHPTokenId.PHP_IF;
          }
        case 206: break;
        case 122:
          { return PHPTokenId.PHP_ENDSWITCH;
          }
        case 207: break;
        case 86:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    heredoc_len = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        heredoc_len--;
    }
    // HEREDOC PHP 5.3
    if (yytext().charAt(startString) == '"') {
        heredoc_len -= 2;
        startString ++;
    }
    heredoc = yytext().substring(startString,heredoc_len+startString);
    yybegin(ST_PHP_START_HEREDOC);
    return PHPTokenId.PHP_HEREDOC_TAG;
          }
        case 208: break;
        case 115:
          { return PHPTokenId.PHP__DIR__;
          }
        case 209: break;
        case 79:
          { return PHPTokenId.PHP_GOTO;
          }
        case 210: break;
        case 22:
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens
	return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 211: break;
        case 106:
          { return PHPTokenId.PHP_GLOBAL;
          }
        case 212: break;
        case 17:
          { yypushback(1);
        popState();
          }
        case 213: break;
        case 84:
          { return PHPTokenId.PHP_FINAL;
          }
        case 214: break;
        case 65:
          { int label_len = yylength() - 1;
    int back = 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
           back++;
    }
    if (label_len > heredoc_len && yytext().substring(label_len - heredoc_len,label_len).equals(heredoc)) {
        back = back + heredoc_len;
        yypushback(back);
        yybegin(ST_PHP_END_NOWDOC);
    }
    else {
        yypushback(1);
    }
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 215: break;
        case 57:
          { return PHPTokenId.PHP_FOR;
          }
        case 216: break;
        case 75:
          { return PHPTokenId.PHP_CASE;
          }
        case 217: break;
        case 83:
          { return PHPTokenId.PHP_FALSE;
          }
        case 218: break;
        case 10:
          { return PHPTokenId.PHP_NS_SEPARATOR;
          }
        case 219: break;
        case 21:
          { popState();
    return PHPTokenId.PHP_STRING;
          }
        case 220: break;
        case 113:
          { return PHPTokenId.PHP_INCLUDE;
          }
        case 221: break;
        case 95:
          { return PHPTokenId.PHP_PRINT;
          }
        case 222: break;
        case 51:
          { return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 223: break;
        case 44:
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 224: break;
        case 133:
          { return PHPTokenId.PHP__METHOD__;
          }
        case 225: break;
        case 12:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 226: break;
        case 64:
          { int label_len = yylength() - 1;
    int back = 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
           back++;
    }
    if (label_len > heredoc_len && yytext().substring(label_len - heredoc_len,label_len).equals(heredoc)) {
           back = back + heredoc_len;
    	   yypushback(back);
        yybegin(ST_PHP_END_HEREDOC);
    }
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 227: break;
        case 36:
          { return PHPTokenId.PHP_AS;
          }
        case 228: break;
        case 41:
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 229: break;
        case 78:
          { return PHPTokenId.PHP_LIST;
          }
        case 230: break;
        case 33:
          { return PHPTokenId.PHP_VARIABLE;
          }
        case 231: break;
        case 39:
          { //popState();
        yybegin(YYINITIAL);
        if (yylength() > 2) {
            yypushback(yylength()-2);
        }
        stack.clear();
	return PHPTokenId.PHP_CLOSETAG;
          }
        case 232: break;
        case 96:
          { return PHPTokenId.PHP_UNSET;
          }
        case 233: break;
        case 1:
          { return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 234: break;
        case 126:
          { return PHPTokenId.PHP_INSTEADOF;
          }
        case 235: break;
        case 68:
          { return PHPTokenId.PHP_EXIT;
          }
        case 236: break;
        case 108:
          { return PHPTokenId.PHP_FOREACH;
          }
        case 237: break;
        case 60:
          { return PHPTokenId.PHP_TRY;
          }
        case 238: break;
        case 15:
          { return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 239: break;
        case 52:
          { popState();
    return PHPTokenId.PHP_COMMENT_END;
          }
        case 240: break;
        case 25:
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
			yypushback(1);
			break;
		default:
			popState();
	}
	 return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 241: break;
        case 77:
          { return PHPTokenId.PHP_SELF;
          }
        case 242: break;
        case 111:
          { return PHPTokenId.PHP_DEFAULT;
          }
        case 243: break;
        case 76:
          { return PHPTokenId.PHP_TRUE;
          }
        case 244: break;
        case 55:
          { if (asp_tags) {
            yybegin(YYINITIAL);
            stack.clear();
	    return PHPTokenId.PHP_CLOSETAG;
	}
	String text = yytext();
	if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
		popState();
	}
	return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 245: break;
        case 54:
          { popState();
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 246: break;
        case 18:
          { yypushback(1);
	yybegin(ST_PHP_HEREDOC);
          }
        case 247: break;
        case 120:
          { return PHPTokenId.PHP__FILE__;
          }
        case 248: break;
        case 59:
          { return PHPTokenId.PHP_DIE;
          }
        case 249: break;
        case 40:
          { return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 250: break;
        case 46:
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 251: break;
        case 93:
          { return PHPTokenId.PHP_THROW;
          }
        case 252: break;
        case 94:
          { return PHPTokenId.PHP_ISSET;
          }
        case 253: break;
        case 43:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_TOKEN;
          }
        case 254: break;
        case 123:
          { popState();
	return PHPTokenId.T_INLINE_HTML;
          }
        case 255: break;
        case 100:
          { return PHPTokenId.PHP_ELSEIF;
          }
        case 256: break;
        case 13:
          { //  if (!stack.isEmpty()) {

            //we are pushing state when we enter the PHP code,
            //so we need to ensure we do not pop the top most state
            if(stack.size() > 1) {
                popState();
    }
    return  PHPTokenId.PHP_CURLY_CLOSE;
          }
        case 257: break;
        case 20:
          { yypushback(1);
    popState();
          }
        case 258: break;
        case 99:
          { return PHPTokenId.PHP_ENDFOR;
          }
        case 259: break;
        case 11:
          { pushState(ST_PHP_BACKQUOTE);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 260: break;
        case 30:
          { if (short_tags_allowed ) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 261: break;
        case 8:
          { return PHPTokenId.PHP_SEMICOLON;
          }
        case 262: break;
        case 81:
          { return PHPTokenId.PHP_ENDIF;
          }
        case 263: break;
        case 112:
          { return PHPTokenId.PHP_DECLARE;
          }
        case 264: break;
        case 129:
          { return PHPTokenId.PHP_ENDFOREACH;
          }
        case 265: break;
        case 128:
          { return PHPTokenId.PHP__CLASS__;
          }
        case 266: break;
        case 28:
          { popState();return PHPTokenId.WHITESPACE;
          }
        case 267: break;
        case 61:
          { return PHPTokenId.PHP_USE;
          }
        case 268: break;
        case 138:
          { return PHPTokenId.PHP_HALT_COMPILER;
          }
        case 269: break;
        case 45:
          { yypushback(1);
	return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 270: break;
        case 63:
          { yypushback(1);
	pushState(ST_PHP_VAR_OFFSET);
	return PHPTokenId.PHP_VARIABLE;
          }
        case 271: break;
        case 139:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.T_INLINE_HTML;
          }
        case 272: break;
        case 102:
          { return PHPTokenId.PHP_STATIC;
          }
        case 273: break;
        case 69:
          { return PHPTokenId.PHP_ECHO;
          }
        case 274: break;
        case 4:
          { return PHPTokenId.PHP_NUMBER;
          }
        case 275: break;
        case 104:
          { return PHPTokenId.PHP_PARENT;
          }
        case 276: break;
        case 124:
          { return PHPTokenId.PHP_NAMESPACE;
          }
        case 277: break;
        case 82:
          { return PHPTokenId.PHP_EMPTY;
          }
        case 278: break;
        default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
            switch (zzLexicalState) {
            case ST_PHP_COMMENT: {
              if (input.readLength() > 0) {
                input.backup(1);  // backup eof
                return PHPTokenId.PHP_COMMENT;
              }
              else {
                  return null;
              }
            }
            case 661: break;
            case ST_PHP_DOC_COMMENT: {
              if (input.readLength() > 0) {
                    input.backup(1);  // backup eof
                    return PHPTokenId.PHPDOC_COMMENT;
                }
                else {
                    return null;
                }
            }
            case 662: break;
            default:
              {        if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return PHPTokenId.UNKNOWN_TOKEN;
        } else {
            return null;
        }
 }
            }

          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
