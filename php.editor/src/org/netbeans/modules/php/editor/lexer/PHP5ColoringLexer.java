/* The following code was generated by JFlex 1.4.3 on 16.10.15 11:06 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2015 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2015 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16.10.15 11:06 from the specification file
 * <tt>/home/gapon/worx/sun/nb-main/php.editor/tools/Php5ColoringScanner.flex</tt>
 */
public class PHP5ColoringLexer {
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP_END_NOWDOC = 22;
  public static final int ST_PHP_NOWDOC = 18;
  public static final int ST_PHP_END_HEREDOC = 16;
  public static final int ST_PHP_COMMENT = 28;
  public static final int ST_PHP_START_HEREDOC = 14;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 8;
  public static final int ST_PHP_IN_SCRIPTING = 2;
  public static final int ST_PHP_LOOKING_FOR_CLASS_CONST = 10;
  public static final int ST_PHP_DOC_COMMENT = 30;
  public static final int ST_PHP_LINE_COMMENT = 32;
  public static final int ST_PHP_BACKQUOTE = 6;
  public static final int ST_PHP_START_NOWDOC = 20;
  public static final int ST_PHP_HEREDOC = 12;
  public static final int ST_HALTED_COMPILER = 36;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 34;
  public static final int ST_PHP_VAR_OFFSET = 26;
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_DOUBLE_QUOTES = 4;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
    16, 16, 17, 17, 18, 18
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\16\1\15\2\0\1\21\22\0\1\16\1\32\1\23\1\107"+
    "\1\22\1\36\1\37\1\71\1\100\1\52\1\34\1\31\1\17\1\4"+
    "\1\2\1\35\1\5\1\11\10\1\1\76\1\20\1\33\1\27\1\30"+
    "\1\43\1\42\1\46\1\10\1\57\1\50\1\3\1\7\1\66\1\70"+
    "\1\60\1\101\1\74\1\65\1\75\1\47\1\44\1\62\1\103\1\45"+
    "\1\55\1\64\1\67\1\77\1\73\1\6\1\72\1\13\1\105\1\24"+
    "\1\106\1\41\1\102\1\25\1\46\1\10\1\51\1\50\1\3\1\7"+
    "\1\66\1\70\1\61\1\101\1\74\1\65\1\75\1\47\1\44\1\63"+
    "\1\103\1\54\1\56\1\53\1\67\1\77\1\73\1\6\1\72\1\13"+
    "\1\26\1\40\1\104\1\42\53\13\1\13\12\13\1\13\4\13\1\13"+
    "\5\13\27\13\1\13\37\13\1\13\10\13\u01c2\12\4\0\14\12\16\0"+
    "\5\12\7\0\1\12\1\0\1\12\201\0\5\12\1\0\2\12\2\0"+
    "\4\12\10\0\1\12\1\0\3\12\1\0\1\12\1\0\24\12\1\0"+
    "\123\12\1\0\213\12\10\0\236\12\11\0\46\12\2\0\1\12\7\0"+
    "\47\12\110\0\33\12\5\0\3\12\55\0\53\12\25\0\12\14\4\0"+
    "\2\12\1\0\143\12\1\0\1\12\17\0\2\12\7\0\2\12\12\14"+
    "\3\12\2\0\1\12\20\0\1\12\1\0\36\12\35\0\131\12\13\0"+
    "\1\12\16\0\12\14\41\12\11\0\2\12\4\0\1\12\5\0\26\12"+
    "\4\0\1\12\11\0\1\12\3\0\1\12\27\0\31\12\107\0\1\12"+
    "\1\0\13\12\127\0\66\12\3\0\1\12\22\0\1\12\7\0\12\12"+
    "\4\0\12\14\1\0\7\12\1\0\7\12\5\0\10\12\2\0\2\12"+
    "\2\0\26\12\1\0\7\12\1\0\1\12\3\0\4\12\3\0\1\12"+
    "\20\0\1\12\15\0\2\12\1\0\3\12\4\0\12\14\2\12\23\0"+
    "\6\12\4\0\2\12\2\0\26\12\1\0\7\12\1\0\2\12\1\0"+
    "\2\12\1\0\2\12\37\0\4\12\1\0\1\12\7\0\12\14\2\0"+
    "\3\12\20\0\11\12\1\0\3\12\1\0\26\12\1\0\7\12\1\0"+
    "\2\12\1\0\5\12\3\0\1\12\22\0\1\12\17\0\2\12\4\0"+
    "\12\14\25\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0"+
    "\2\12\1\0\5\12\3\0\1\12\36\0\2\12\1\0\3\12\4\0"+
    "\12\14\1\0\1\12\21\0\1\12\1\0\6\12\3\0\3\12\1\0"+
    "\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0\2\12\3\0"+
    "\3\12\3\0\14\12\26\0\1\12\25\0\12\14\25\0\10\12\1\0"+
    "\3\12\1\0\27\12\1\0\12\12\1\0\5\12\3\0\1\12\32\0"+
    "\2\12\6\0\2\12\4\0\12\14\25\0\10\12\1\0\3\12\1\0"+
    "\27\12\1\0\12\12\1\0\5\12\3\0\1\12\40\0\1\12\1\0"+
    "\2\12\4\0\12\14\1\0\2\12\22\0\10\12\1\0\3\12\1\0"+
    "\51\12\2\0\1\12\20\0\1\12\21\0\2\12\4\0\12\14\12\0"+
    "\6\12\5\0\22\12\3\0\30\12\1\0\11\12\1\0\1\12\2\0"+
    "\7\12\72\0\60\12\1\0\2\12\14\0\7\12\11\0\12\14\47\0"+
    "\2\12\1\0\1\12\2\0\2\12\1\0\1\12\2\0\1\12\6\0"+
    "\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0\1\12\2\0"+
    "\2\12\1\0\4\12\1\0\2\12\11\0\1\12\2\0\5\12\1\0"+
    "\1\12\11\0\12\14\2\0\4\12\40\0\1\12\37\0\12\14\26\0"+
    "\10\12\1\0\44\12\33\0\5\12\163\0\53\12\24\0\1\12\12\14"+
    "\6\0\6\12\4\0\4\12\3\0\1\12\3\0\2\12\7\0\3\12"+
    "\4\0\15\12\14\0\1\12\1\0\12\14\6\0\46\12\1\0\1\12"+
    "\5\0\1\12\2\0\53\12\1\0\u014d\12\1\0\4\12\2\0\7\12"+
    "\1\0\1\12\1\0\4\12\2\0\51\12\1\0\4\12\2\0\41\12"+
    "\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\17\12"+
    "\1\0\71\12\1\0\4\12\2\0\103\12\45\0\20\12\20\0\125\12"+
    "\14\0\u026c\12\2\0\21\12\1\0\32\12\5\0\113\12\25\0\15\12"+
    "\1\0\4\12\16\0\22\12\16\0\22\12\16\0\15\12\1\0\3\12"+
    "\17\0\64\12\43\0\1\12\4\0\1\12\3\0\12\14\46\0\12\14"+
    "\6\0\130\12\10\0\51\12\1\0\1\12\5\0\106\12\12\0\35\12"+
    "\51\0\12\14\36\12\2\0\5\12\13\0\54\12\25\0\7\12\10\0"+
    "\12\14\46\0\27\12\11\0\65\12\53\0\12\14\6\0\12\14\15\0"+
    "\1\12\135\0\57\12\21\0\7\12\4\0\12\14\51\0\36\12\15\0"+
    "\2\12\12\14\54\12\32\0\44\12\34\0\12\14\3\0\3\12\12\14"+
    "\44\12\153\0\4\12\1\0\4\12\3\0\2\12\11\0\300\12\100\0"+
    "\u0116\12\2\0\6\12\2\0\46\12\2\0\6\12\2\0\10\12\1\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\37\12\2\0\65\12\1\0"+
    "\7\12\1\0\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0"+
    "\6\12\4\0\15\12\5\0\3\12\1\0\7\12\164\0\1\12\15\0"+
    "\1\12\20\0\15\12\145\0\1\12\4\0\1\12\2\0\12\12\1\0"+
    "\1\12\3\0\5\12\6\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\4\12\1\0\13\12\2\0\4\12\5\0\5\12\4\0\1\12\64\0"+
    "\2\12\u0a7b\0\57\12\1\0\57\12\1\0\205\12\6\0\4\12\3\0"+
    "\2\12\14\0\46\12\1\0\1\12\5\0\1\12\2\0\70\12\7\0"+
    "\1\12\20\0\27\12\11\0\7\12\1\0\7\12\1\0\7\12\1\0"+
    "\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\120\0"+
    "\1\12\u01d5\0\2\12\52\0\5\12\5\0\2\12\4\0\126\12\6\0"+
    "\3\12\1\0\132\12\1\0\4\12\5\0\51\12\3\0\136\12\21\0"+
    "\33\12\65\0\20\12\u0200\0\u19b6\12\112\0\u51cd\12\63\0\u048d\12\103\0"+
    "\56\12\2\0\u010d\12\3\0\20\12\12\14\2\12\24\0\57\12\20\0"+
    "\31\12\10\0\106\12\61\0\11\12\2\0\147\12\2\0\4\12\1\0"+
    "\4\12\14\0\13\12\115\0\12\12\1\0\3\12\1\0\4\12\1\0"+
    "\27\12\35\0\64\12\16\0\62\12\34\0\12\14\30\0\6\12\3\0"+
    "\1\12\4\0\12\14\34\12\12\0\27\12\31\0\35\12\7\0\57\12"+
    "\34\0\1\12\12\14\46\0\51\12\27\0\3\12\1\0\10\12\4\0"+
    "\12\14\6\0\27\12\3\0\1\12\5\0\60\12\1\0\1\12\3\0"+
    "\2\12\2\0\5\12\2\0\1\12\1\0\1\12\30\0\3\12\2\0"+
    "\13\12\7\0\3\12\14\0\6\12\2\0\6\12\2\0\6\12\11\0"+
    "\7\12\1\0\7\12\221\0\43\12\15\0\12\14\6\0\u2ba4\12\14\0"+
    "\27\12\4\0\61\12\u2104\0\u016e\12\2\0\152\12\46\0\7\12\14\0"+
    "\5\12\5\0\1\12\1\0\12\12\1\0\15\12\1\0\5\12\1\0"+
    "\1\12\1\0\2\12\1\0\2\12\1\0\154\12\41\0\u016b\12\22\0"+
    "\100\12\2\0\66\12\50\0\14\12\164\0\5\12\1\0\207\12\23\0"+
    "\12\14\7\0\32\12\6\0\32\12\13\0\131\12\3\0\6\12\2\0"+
    "\6\12\2\0\6\12\2\0\3\12\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\23\0\2\1\1\2\1\3\1\4\1\5\1\6\1\3"+
    "\4\5\1\7\1\4\1\10\1\4\1\11\1\12\1\13"+
    "\1\14\14\6\1\4\15\5\1\2\2\5\1\4\1\5"+
    "\1\4\1\5\1\15\1\16\1\17\1\20\1\21\2\20"+
    "\1\17\3\20\3\22\2\23\4\20\1\2\1\20\2\24"+
    "\3\2\1\0\1\2\2\25\1\2\1\26\1\27\1\26"+
    "\1\3\1\30\1\3\1\31\1\30\1\32\4\0\4\33"+
    "\2\34\1\35\1\36\1\37\1\0\1\40\1\41\1\0"+
    "\1\3\2\0\6\5\1\42\2\0\4\5\1\0\1\5"+
    "\1\0\1\43\2\0\1\20\2\0\2\6\1\0\1\44"+
    "\1\45\1\46\1\47\4\5\1\50\4\5\1\51\11\5"+
    "\1\52\13\5\1\0\2\5\1\53\1\5\12\0\1\5"+
    "\3\0\2\54\2\55\1\56\1\57\1\55\3\0\1\54"+
    "\2\55\1\60\4\0\1\20\2\0\1\61\2\0\1\62"+
    "\7\0\1\63\2\0\1\64\1\0\1\65\1\54\1\0"+
    "\1\66\1\0\1\67\1\70\1\33\1\71\1\72\3\0"+
    "\7\5\2\3\1\73\3\5\1\0\1\5\3\0\4\5"+
    "\1\74\4\5\1\75\7\5\1\76\21\5\1\77\2\5"+
    "\1\100\12\0\7\5\3\101\1\0\1\102\1\0\1\103"+
    "\1\0\1\104\1\20\1\0\1\105\1\0\1\105\1\0"+
    "\1\106\1\107\1\33\2\0\1\5\1\110\5\5\1\111"+
    "\1\112\1\5\1\113\5\5\4\0\1\114\5\5\1\115"+
    "\5\5\1\116\3\5\1\117\1\5\1\120\14\5\1\121"+
    "\1\122\4\5\12\0\10\5\1\0\1\102\1\0\1\33"+
    "\1\123\1\0\4\5\1\124\2\5\1\125\1\5\1\126"+
    "\1\127\1\5\1\130\2\131\3\0\3\5\1\132\4\5"+
    "\1\133\1\134\1\135\1\136\1\137\1\140\6\5\1\141"+
    "\2\5\1\142\4\5\1\143\1\144\1\145\11\0\1\146"+
    "\10\5\1\147\1\33\1\0\1\5\1\150\3\5\1\151"+
    "\3\5\3\0\1\152\6\5\1\153\1\154\7\5\1\155"+
    "\1\156\1\157\4\0\10\5\1\23\1\33\1\1\1\160"+
    "\4\5\1\161\1\162\1\5\2\163\1\0\1\164\2\5"+
    "\1\165\1\166\1\5\1\167\5\5\1\170\2\0\3\5"+
    "\1\171\4\5\1\33\1\0\3\5\1\172\1\173\1\0"+
    "\1\5\1\174\1\5\1\175\6\5\1\176\3\5\1\177"+
    "\2\5\1\33\1\0\2\5\1\200\1\37\1\5\1\201"+
    "\1\5\1\202\1\203\2\5\1\204\2\5\1\205\2\5"+
    "\1\33\1\0\1\206\1\207\2\5\1\210\1\211\3\5"+
    "\1\212\1\33\1\0\5\5\1\0\1\213\1\214\1\215"+
    "\2\5\1\0\1\216\1\5\1\0\1\5\1\0\1\217"+
    "\14\0\1\220\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[677];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438"+
    "\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678"+
    "\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828\0\u0870\0\u08b8"+
    "\0\u05e8\0\u05e8\0\u0900\0\u0948\0\u05e8\0\u05e8\0\u05e8\0\u0990"+
    "\0\u09d8\0\u0a20\0\u0a68\0\u0ab0\0\u0af8\0\u0b40\0\u0b88\0\u0bd0"+
    "\0\u0c18\0\u0c60\0\u05e8\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80\0\u0dc8"+
    "\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u1008"+
    "\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200\0\u1248"+
    "\0\u05e8\0\u05e8\0\u1290\0\u12d8\0\u05e8\0\u1320\0\u1368\0\u13b0"+
    "\0\u13f8\0\u1440\0\u1488\0\u05e8\0\u14d0\0\u1518\0\u05e8\0\u1560"+
    "\0\u15a8\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u1518\0\u05e8\0\u1710"+
    "\0\u1758\0\u17a0\0\u17e8\0\u1830\0\u1830\0\u05e8\0\u1878\0\u18c0"+
    "\0\u05e8\0\u1908\0\u1950\0\u1998\0\u05e8\0\u19e0\0\u05e8\0\u1a28"+
    "\0\u05e8\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u05e8\0\u1bd8"+
    "\0\u1c20\0\u1c68\0\u1cb0\0\u05e8\0\u1cf8\0\u0510\0\u1d40\0\u1d88"+
    "\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38\0\u1f80\0\u1fc8"+
    "\0\u2010\0\u2058\0\u20a0\0\u05e8\0\u20e8\0\u2130\0\u2178\0\u21c0"+
    "\0\u2208\0\u2250\0\u2298\0\u22e0\0\u1098\0\u2328\0\u0948\0\u2370"+
    "\0\u05e8\0\u23b8\0\u2400\0\u2448\0\u2490\0\u24d8\0\u2520\0\u2568"+
    "\0\u25b0\0\u0870\0\u25f8\0\u2640\0\u2688\0\u26d0\0\u0870\0\u2718"+
    "\0\u2760\0\u27a8\0\u27f0\0\u0870\0\u2838\0\u2880\0\u28c8\0\u2910"+
    "\0\u2958\0\u29a0\0\u29e8\0\u2a30\0\u2a78\0\u0870\0\u2ac0\0\u2b08"+
    "\0\u2b50\0\u2b98\0\u2be0\0\u2c28\0\u2c70\0\u2cb8\0\u2d00\0\u2d48"+
    "\0\u2d90\0\u2dd8\0\u2e20\0\u2e68\0\u05e8\0\u2eb0\0\u2ef8\0\u2f40"+
    "\0\u1200\0\u2f88\0\u2fd0\0\u3018\0\u3060\0\u30a8\0\u30f0\0\u3138"+
    "\0\u3180\0\u31c8\0\u1320\0\u3210\0\u3258\0\u32a0\0\u31c8\0\u05e8"+
    "\0\u05e8\0\u05e8\0\u3210\0\u32e8\0\u1440\0\u3330\0\u3378\0\u32e8"+
    "\0\u3330\0\u05e8\0\u33c0\0\u3408\0\u3450\0\u3498\0\u34e0\0\u3528"+
    "\0\u1710\0\u05e8\0\u3570\0\u1758\0\u05e8\0\u35b8\0\u17a0\0\u17e8"+
    "\0\u3600\0\u3648\0\u3690\0\u1878\0\u05e8\0\u36d8\0\u18c0\0\u05e8"+
    "\0\u3720\0\u05e8\0\u3768\0\u37b0\0\u05e8\0\u37f8\0\u05e8\0\u05e8"+
    "\0\u3840\0\u3888\0\u05e8\0\u38d0\0\u3918\0\u1998\0\u3960\0\u39a8"+
    "\0\u39f0\0\u3a38\0\u3a80\0\u3ac8\0\u3b10\0\u20e8\0\u2130\0\u3b58"+
    "\0\u3ba0\0\u3be8\0\u3c30\0\u3c78\0\u3cc0\0\u3d08\0\u3d50\0\u3d98"+
    "\0\u3de0\0\u3e28\0\u3e70\0\u3eb8\0\u0870\0\u3f00\0\u3f48\0\u3f90"+
    "\0\u3fd8\0\u0870\0\u4020\0\u4068\0\u40b0\0\u40f8\0\u4140\0\u4188"+
    "\0\u41d0\0\u0870\0\u4218\0\u4260\0\u42a8\0\u42f0\0\u4338\0\u4380"+
    "\0\u43c8\0\u4410\0\u4458\0\u44a0\0\u44e8\0\u4530\0\u4578\0\u45c0"+
    "\0\u4608\0\u4650\0\u4698\0\u0870\0\u46e0\0\u4728\0\u0870\0\u4770"+
    "\0\u47b8\0\u4800\0\u4848\0\u4890\0\u48d8\0\u4920\0\u4968\0\u49b0"+
    "\0\u49f8\0\u4a40\0\u4a88\0\u4ad0\0\u4b18\0\u4b60\0\u4ba8\0\u4bf0"+
    "\0\u05e8\0\u1290\0\u13b0\0\u4c38\0\u4c80\0\u4cc8\0\u05e8\0\u4d10"+
    "\0\u05e8\0\u4d58\0\u4da0\0\u05e8\0\u4de8\0\u1830\0\u4e30\0\u05e8"+
    "\0\u05e8\0\u4e78\0\u4ec0\0\u4f08\0\u4f50\0\u0870\0\u4f98\0\u4fe0"+
    "\0\u5028\0\u5070\0\u50b8\0\u0870\0\u5100\0\u5148\0\u0870\0\u5190"+
    "\0\u51d8\0\u5220\0\u5268\0\u52b0\0\u52f8\0\u5340\0\u5388\0\u53d0"+
    "\0\u3d98\0\u5418\0\u5460\0\u54a8\0\u54f0\0\u5538\0\u0870\0\u5580"+
    "\0\u55c8\0\u5610\0\u5658\0\u56a0\0\u0870\0\u56e8\0\u5730\0\u5778"+
    "\0\u0870\0\u57c0\0\u0870\0\u5808\0\u5850\0\u5898\0\u58e0\0\u5928"+
    "\0\u5970\0\u59b8\0\u5a00\0\u5a48\0\u5a90\0\u5ad8\0\u5b20\0\u0870"+
    "\0\u0870\0\u5b68\0\u5bb0\0\u5bf8\0\u5c40\0\u5c88\0\u5cd0\0\u5d18"+
    "\0\u5d60\0\u5da8\0\u5df0\0\u5e38\0\u5e80\0\u5ec8\0\u5f10\0\u5f58"+
    "\0\u5fa0\0\u5fe8\0\u6030\0\u6078\0\u60c0\0\u6108\0\u6150\0\u6198"+
    "\0\u05e8\0\u61e0\0\u6228\0\u05e8\0\u6270\0\u62b8\0\u6300\0\u6348"+
    "\0\u6390\0\u0870\0\u63d8\0\u6420\0\u0870\0\u6468\0\u0870\0\u64b0"+
    "\0\u64f8\0\u0870\0\u05e8\0\u6540\0\u6588\0\u65d0\0\u6618\0\u6660"+
    "\0\u66a8\0\u66f0\0\u0870\0\u6738\0\u6780\0\u67c8\0\u6810\0\u0870"+
    "\0\u0870\0\u0870\0\u0870\0\u0870\0\u0870\0\u6858\0\u68a0\0\u68e8"+
    "\0\u6930\0\u6978\0\u69c0\0\u0870\0\u6a08\0\u6a50\0\u0870\0\u6a98"+
    "\0\u6ae0\0\u6b28\0\u6b70\0\u0870\0\u0870\0\u0870\0\u6bb8\0\u6c00"+
    "\0\u6c48\0\u6c90\0\u6cd8\0\u6d20\0\u6d68\0\u6db0\0\u6df8\0\u05e8"+
    "\0\u6e40\0\u6e88\0\u6ed0\0\u6f18\0\u6f60\0\u6fa8\0\u6ff0\0\u7038"+
    "\0\u7080\0\u70c8\0\u7110\0\u7158\0\u71a0\0\u71e8\0\u7230\0\u7278"+
    "\0\u0870\0\u72c0\0\u7308\0\u7350\0\u7398\0\u73e0\0\u7428\0\u0870"+
    "\0\u7470\0\u74b8\0\u7500\0\u7548\0\u7590\0\u75d8\0\u0870\0\u0870"+
    "\0\u7620\0\u7668\0\u76b0\0\u76f8\0\u7740\0\u7788\0\u77d0\0\u0870"+
    "\0\u0870\0\u0870\0\u7818\0\u7860\0\u78a8\0\u78f0\0\u7938\0\u7980"+
    "\0\u79c8\0\u7a10\0\u7a58\0\u7aa0\0\u7ae8\0\u7b30\0\u7b78\0\u7bc0"+
    "\0\u7c08\0\u0870\0\u7c50\0\u7c98\0\u7ce0\0\u7d28\0\u0870\0\u0870"+
    "\0\u7d70\0\u05e8\0\u7db8\0\u7e00\0\u7e48\0\u7e90\0\u7ed8\0\u0870"+
    "\0\u0870\0\u7f20\0\u7f68\0\u7fb0\0\u7ff8\0\u8040\0\u8088\0\u80d0"+
    "\0\u0870\0\u8118\0\u8160\0\u81a8\0\u81f0\0\u8238\0\u0870\0\u8280"+
    "\0\u82c8\0\u8310\0\u8358\0\u83a0\0\u83e8\0\u8430\0\u8478\0\u84c0"+
    "\0\u0870\0\u0870\0\u8508\0\u8550\0\u0870\0\u8598\0\u0870\0\u85e0"+
    "\0\u8628\0\u8670\0\u86b8\0\u8700\0\u8748\0\u0870\0\u8790\0\u87d8"+
    "\0\u8820\0\u0870\0\u8868\0\u88b0\0\u88f8\0\u8940\0\u8988\0\u89d0"+
    "\0\u0870\0\u8a18\0\u8a60\0\u0870\0\u8aa8\0\u0870\0\u0870\0\u8af0"+
    "\0\u8b38\0\u0870\0\u8b80\0\u8bc8\0\u0870\0\u8c10\0\u8c58\0\u8ca0"+
    "\0\u8ce8\0\u0870\0\u0870\0\u8d30\0\u8d78\0\u0870\0\u0870\0\u8dc0"+
    "\0\u8e08\0\u8e50\0\u0870\0\u8a18\0\u8e98\0\u8ee0\0\u8f28\0\u8f70"+
    "\0\u8fb8\0\u9000\0\u9048\0\u0870\0\u0870\0\u0870\0\u9090\0\u90d8"+
    "\0\u9120\0\u0870\0\u9168\0\u91b0\0\u91f8\0\u9240\0\u0870\0\u9288"+
    "\0\u92d0\0\u9318\0\u9360\0\u93a8\0\u93f0\0\u9438\0\u9480\0\u94c8"+
    "\0\u9510\0\u9558\0\u95a0\0\u05e8\0\u95e8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[677];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\33\24\1\25\54\24\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\27\2\37\1\26\2\40"+
    "\1\41\1\42\1\40\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\41\1\73\1\66\2\74\1\72"+
    "\2\75\2\76\1\73\1\77\1\100\1\101\1\37\1\102"+
    "\1\103\1\104\2\37\1\105\1\106\1\107\1\37\1\110"+
    "\1\37\1\111\2\41\1\112\22\113\1\114\1\115\1\116"+
    "\1\113\1\117\61\113\22\120\1\121\1\120\1\122\1\115"+
    "\1\123\61\120\4\124\1\125\21\124\1\126\61\124\51\127"+
    "\1\130\5\127\1\130\30\127\15\131\1\132\3\131\1\133"+
    "\1\134\1\131\1\135\1\131\1\136\61\131\3\137\1\140"+
    "\2\137\3\140\1\137\2\140\30\137\6\140\1\137\16\140"+
    "\1\137\4\140\1\137\1\140\1\137\3\140\4\137\3\26"+
    "\1\141\2\26\3\141\1\26\2\141\1\26\1\0\26\26"+
    "\6\141\1\26\16\141\1\26\4\141\1\26\1\141\1\26"+
    "\3\141\4\26\3\142\1\143\2\142\3\143\2\142\1\143"+
    "\1\142\1\144\3\142\1\145\22\142\6\143\1\142\16\143"+
    "\1\142\4\143\1\142\1\143\1\142\3\143\4\142\3\146"+
    "\1\147\2\146\3\147\1\146\2\147\30\146\6\147\1\146"+
    "\16\147\1\146\4\147\1\146\1\147\1\146\3\147\4\146"+
    "\3\26\1\150\2\26\3\150\1\26\2\150\1\26\1\0"+
    "\26\26\6\150\1\26\16\150\1\26\4\150\1\26\1\150"+
    "\1\26\3\150\4\26\3\151\1\152\1\153\1\151\3\152"+
    "\1\151\2\152\1\151\2\40\2\151\1\40\22\151\6\152"+
    "\1\151\16\152\1\151\4\152\1\151\1\152\1\151\3\152"+
    "\4\151\1\26\1\154\1\155\1\37\1\26\1\156\3\37"+
    "\1\154\2\37\1\26\2\157\2\155\1\157\1\160\1\155"+
    "\1\157\2\155\6\26\1\155\5\26\1\155\6\37\1\155"+
    "\16\37\1\157\4\37\1\155\1\37\1\155\3\37\1\155"+
    "\1\41\1\161\1\157\34\162\1\163\53\162\34\164\1\165"+
    "\53\164\15\166\1\167\3\166\1\170\11\166\1\171\2\166"+
    "\1\172\4\166\1\173\44\166\15\174\2\175\2\174\1\175"+
    "\66\174\110\176\33\24\1\177\107\24\1\0\2\24\1\200"+
    "\4\24\1\201\5\24\4\0\1\24\1\202\2\24\1\0"+
    "\1\24\1\0\14\24\1\0\7\24\111\0\1\27\1\203"+
    "\1\204\1\0\1\27\3\0\1\27\77\0\1\203\1\205"+
    "\2\0\1\203\3\0\1\203\15\0\1\63\61\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\206\6\37\27\0\3\37"+
    "\1\207\1\37\1\210\1\0\4\37\1\210\5\37\1\211"+
    "\3\37\1\0\3\37\1\212\1\0\1\213\1\0\3\37"+
    "\10\0\1\63\22\0\1\63\1\214\60\0\1\27\1\203"+
    "\1\204\1\0\1\27\1\215\1\0\1\216\1\27\77\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\1\65\5\37"+
    "\1\0\16\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\1\217"+
    "\1\37\1\220\3\37\1\0\5\37\2\221\5\37\1\222"+
    "\1\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\6\0\1\44\7\0"+
    "\1\223\10\0\1\37\1\224\4\37\1\0\1\37\1\224"+
    "\14\37\1\225\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\6\37\1\0"+
    "\16\37\1\0\4\37\1\0\1\37\1\0\3\37\21\0"+
    "\2\40\2\0\1\40\71\0\1\226\2\0\3\226\1\0"+
    "\2\226\30\0\6\226\1\0\16\226\1\0\4\226\1\0"+
    "\1\226\1\0\3\226\4\0\22\227\1\230\1\231\1\232"+
    "\1\227\1\233\61\227\27\0\1\62\1\63\106\0\1\63"+
    "\1\62\106\0\1\63\1\0\1\63\105\0\1\62\107\0"+
    "\1\234\1\63\2\0\1\235\1\0\1\236\101\0\1\63"+
    "\4\0\1\62\102\0\1\63\4\0\1\237\1\112\101\0"+
    "\1\63\1\240\106\0\1\63\7\0\1\63\77\0\1\63"+
    "\10\0\1\63\76\0\1\63\110\0\1\241\12\0\1\63"+
    "\45\0\1\37\1\0\1\37\1\0\10\37\27\0\1\37"+
    "\1\242\4\37\1\0\1\37\1\242\14\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\243"+
    "\1\0\10\37\27\0\6\37\1\0\16\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\3\37\1\244\4\37\27\0\1\37\1\245\1\37"+
    "\1\246\2\37\1\0\1\37\1\245\2\247\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\250\1\0\10\37\27\0\2\37\1\251\3\37\1\0"+
    "\14\37\1\252\1\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\253\1\0\10\37\27\0"+
    "\1\254\5\37\1\0\5\37\2\255\7\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\1\256\1\37\1\257\3\37\1\0"+
    "\12\37\1\260\3\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\1\37\1\261\4\37\1\0\1\37\1\261\13\37\1\262"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\263\1\0\10\37\27\0\6\37\1\0\1\264"+
    "\10\37\1\264\4\37\1\0\1\37\1\265\2\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\2\37\1\266\5\37\27\0\3\37\1\267\2\37\1\0"+
    "\2\37\2\270\12\37\1\0\3\37\1\271\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\1\37\1\272\1\273\3\37\1\0\1\37\1\272"+
    "\12\37\1\274\1\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\6\37\1\0\5\37\2\275\7\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\1\276\5\37\1\0\12\37\1\277\3\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\3\37\1\300\2\37"+
    "\1\0\2\37\2\301\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\4\0\24\225\1\302\44\225\1\231\16\225"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\27\0\6\37"+
    "\1\0\5\37\2\303\7\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\6\37\1\0\15\37\1\304\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\102\0\1\305\12\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\2\37\1\306\3\37\1\0"+
    "\16\37\1\0\4\37\1\0\1\37\1\0\3\37\13\0"+
    "\1\307\1\310\5\0\1\311\25\0\1\312\1\313\1\314"+
    "\1\0\1\315\3\0\1\313\2\316\1\0\2\317\5\0"+
    "\1\320\21\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\6\37\1\0\16\37\1\0\4\37\1\0\1\37\1\0"+
    "\1\37\1\321\1\37\4\0\22\113\1\322\1\0\1\323"+
    "\1\113\1\324\64\113\1\325\2\113\3\325\1\113\1\326"+
    "\1\325\6\113\1\327\1\330\1\323\1\113\1\331\15\113"+
    "\6\325\1\113\16\325\1\113\4\325\1\113\1\325\1\113"+
    "\3\325\136\113\1\332\1\330\1\323\1\113\1\333\61\113"+
    "\22\120\1\334\1\120\1\335\1\0\1\336\64\120\1\325"+
    "\2\120\3\325\1\120\1\337\1\325\6\120\1\340\1\120"+
    "\1\335\1\330\1\331\15\120\6\325\1\120\16\325\1\120"+
    "\4\325\1\120\1\325\1\120\3\325\136\120\1\332\1\120"+
    "\1\335\1\330\1\341\61\120\30\0\1\342\101\0\1\332"+
    "\152\0\1\343\22\0\15\131\1\0\3\131\1\0\1\344"+
    "\1\131\1\345\1\131\1\346\64\131\1\347\2\131\3\347"+
    "\1\131\2\347\1\131\1\0\3\131\1\0\1\344\1\131"+
    "\1\345\1\131\1\346\15\131\6\347\1\131\16\347\1\131"+
    "\4\347\1\131\1\347\1\131\3\347\7\131\1\347\2\131"+
    "\3\347\1\131\2\347\1\131\1\350\3\131\1\0\1\344"+
    "\1\131\1\345\1\131\1\346\15\131\6\347\1\131\16\347"+
    "\1\131\4\347\1\131\1\347\1\131\3\347\4\131\3\0"+
    "\1\325\2\0\3\325\1\0\2\325\12\0\1\331\15\0"+
    "\6\325\1\0\16\325\1\0\4\325\1\0\1\325\1\0"+
    "\3\325\4\0\110\131\1\0\1\351\1\0\1\351\1\0"+
    "\10\351\1\352\2\0\1\353\1\352\22\0\6\351\1\0"+
    "\16\351\1\0\4\351\1\0\1\351\1\0\3\351\5\0"+
    "\1\354\1\0\1\354\1\0\10\354\1\355\2\0\1\356"+
    "\1\355\22\0\6\354\1\0\16\354\1\0\4\354\1\0"+
    "\1\354\1\0\3\354\4\0\15\357\1\144\3\357\1\144"+
    "\67\357\1\360\1\357\1\360\1\357\5\360\1\357\1\360"+
    "\1\357\1\0\2\357\1\361\1\0\22\357\6\360\1\357"+
    "\16\360\1\357\4\360\1\357\1\360\1\357\3\360\7\357"+
    "\1\362\2\357\3\362\1\357\1\363\1\362\1\357\1\144"+
    "\3\357\1\144\22\357\6\362\1\357\16\362\1\357\4\362"+
    "\1\357\1\362\1\357\3\362\4\357\1\0\1\364\1\0"+
    "\1\364\1\0\10\364\1\365\2\0\1\366\1\365\22\0"+
    "\6\364\1\0\16\364\1\0\4\364\1\0\1\364\1\0"+
    "\3\364\5\0\1\367\1\0\1\367\1\0\10\367\1\370"+
    "\2\0\1\371\1\370\22\0\6\367\1\0\16\367\1\0"+
    "\4\367\1\0\1\367\1\0\3\367\5\0\1\152\1\0"+
    "\1\152\1\0\10\152\27\0\6\152\1\0\16\152\1\0"+
    "\4\152\1\0\1\152\1\0\3\152\34\0\1\372\60\0"+
    "\1\154\3\0\1\154\3\0\1\154\77\0\1\154\3\0"+
    "\1\154\1\215\2\0\1\154\101\0\1\373\2\0\3\373"+
    "\1\0\2\373\30\0\6\373\1\0\16\373\1\0\4\373"+
    "\1\0\1\373\1\0\3\373\4\0\34\162\1\374\107\162"+
    "\1\374\1\375\52\162\34\164\1\376\107\164\1\376\1\377"+
    "\52\164\15\166\1\167\3\166\1\167\14\166\1\167\4\166"+
    "\1\167\44\166\15\0\1\u0100\72\0\15\166\1\167\3\166"+
    "\1\167\13\166\1\u0101\1\167\4\166\1\167\44\166\30\0"+
    "\1\u0102\107\0\1\241\74\0\2\175\2\0\1\175\66\0"+
    "\33\24\1\0\2\24\1\0\4\24\1\0\5\24\4\0"+
    "\1\24\1\0\2\24\1\0\1\24\1\0\14\24\1\0"+
    "\7\24\27\0\1\u0103\107\0\1\u0103\32\0\2\u0104\75\0"+
    "\1\u0105\5\0\1\u0105\31\0\1\203\1\0\1\204\1\0"+
    "\1\203\3\0\1\203\77\0\1\154\2\0\1\u0106\1\154"+
    "\3\0\1\154\17\0\1\u0106\60\0\1\63\106\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\6\37\1\0\1\u0107"+
    "\4\37\2\u0108\2\37\1\u0107\4\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\4\37\1\u0109\1\37\1\0\16\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\6\37\1\0\15\37\1\u010a"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\6\37\1\0\2\37"+
    "\2\u010b\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\6\37"+
    "\1\0\7\37\2\u010c\5\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\2\37\1\u010d\3\37\1\0\16\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\u010e\1\0\1\u010e"+
    "\1\0\1\u010e\1\0\3\u010e\34\0\1\u010e\1\0\2\u010e"+
    "\5\0\1\u010e\35\0\1\u010f\3\0\1\u010f\77\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\1\37\1\u0110\4\37"+
    "\1\0\1\37\1\u0110\14\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\6\37\1\0\12\37\1\u0111\3\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\3\37\1\u0112\2\37\1\0\16\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\3\37\1\u0113\2\37"+
    "\1\0\16\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\37\0\1\u0114\55\0\1\37\1\0\1\u0115\1\0\10\37"+
    "\27\0\6\37\1\0\16\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\226\1\0\1\226\1\0\10\226"+
    "\27\0\6\226\1\0\16\226\1\0\4\226\1\0\1\226"+
    "\1\0\3\226\4\0\3\227\1\0\2\227\3\0\2\227"+
    "\1\0\6\227\1\230\1\231\1\232\1\227\1\0\15\227"+
    "\6\0\1\227\16\0\1\227\4\0\1\227\1\0\1\227"+
    "\3\0\136\227\1\0\1\231\1\232\1\227\1\233\61\227"+
    "\30\0\1\63\106\0\1\63\3\0\1\u0116\131\0\2\u0117"+
    "\65\0\1\u0118\70\0\2\240\2\0\1\240\103\0\2\241"+
    "\2\0\1\241\67\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\6\37\1\0\1\u0119\10\37\1\u0119\4\37\1\0"+
    "\4\37\1\0\1\37\1\0\2\37\1\u011a\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\6\37\1\0\2\37"+
    "\2\u011b\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\1\37"+
    "\1\u011c\4\37\1\0\1\37\1\u011c\14\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\4\37\1\242\1\37\1\0\16\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\6\37\1\0\16\37"+
    "\1\0\1\37\1\u011d\2\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\6\37"+
    "\1\0\16\37\1\0\3\37\1\u011e\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\6\37\1\0\12\37\1\u011f\3\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\2\37\1\u0120\5\37\27\0\5\37\1\u0121\1\0\4\37"+
    "\1\u0121\11\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\u0122\1\0\10\37\27\0\6\37"+
    "\1\0\16\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\3\37"+
    "\1\u0123\2\37\1\0\16\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\6\37\1\0\1\u0124\1\37\2\u0125\5\37\1\u0124"+
    "\4\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\1\u0126\1\37"+
    "\1\u0127\3\37\1\0\16\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\2\37\1\u0128\3\37\1\0\14\37\1\u0129\1\37"+
    "\1\0\1\u012a\3\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\1\37\1\u012b"+
    "\4\37\1\0\1\37\1\u012b\14\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\6\37\1\0\12\37\1\u012c\3\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\2\37\1\u012d\3\37\1\0"+
    "\16\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\6\37\1\0"+
    "\5\37\2\u012e\7\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\5\37\1\u012f\1\0\1\u0130\1\37\2\u0131\1\u012f\4\37"+
    "\1\u0130\4\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\6\37"+
    "\1\0\2\37\2\u0132\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\6\37\1\0\7\37\2\u0133\5\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\1\u0134\5\37\1\0\5\37\2\u0135"+
    "\7\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\1\37\1\u0136"+
    "\4\37\1\0\1\37\1\u0136\14\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\3\37\1\u0137\4\37\27\0\6\37\1\0\16\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\6\37\1\0\2\37\2\u0138"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\6\37\1\0"+
    "\1\u0139\10\37\1\u0139\4\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\1\u013a\5\37\1\0\16\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\6\37\1\0\2\37\2\u013b\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\u013c\1\0\10\37\27\0\6\37\1\0\16\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\4\0\110\225\1\0"+
    "\1\37\1\0\1\u013d\1\0\10\37\27\0\6\37\1\0"+
    "\16\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\6\37\1\0"+
    "\5\37\2\u013e\7\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\1\37\1\u013f\4\37\1\0\1\37\1\u013f\14\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\71\0\1\u0140\66\0"+
    "\1\u0141\13\0\2\u0142\36\0\1\u0143\102\0\1\u0144\151\0"+
    "\1\u0145\6\0\1\u0145\77\0\1\u0146\116\0\1\u0147\10\0"+
    "\1\u0147\72\0\1\u0148\107\0\1\u0149\41\0\1\37\1\0"+
    "\1\37\1\0\2\37\1\u014a\5\37\27\0\3\37\1\u014b"+
    "\1\u014c\1\u014d\1\0\4\37\1\u014d\5\37\1\u014e\2\37"+
    "\1\u014f\1\0\3\37\1\u0150\1\0\1\37\1\0\3\37"+
    "\4\0\3\113\1\0\2\113\3\0\2\113\1\0\6\113"+
    "\1\327\1\330\1\323\1\113\1\0\15\113\6\0\1\113"+
    "\16\0\1\113\4\0\1\113\1\0\1\113\3\0\26\113"+
    "\1\0\1\330\1\323\1\113\1\333\61\113\1\0\1\325"+
    "\1\0\1\325\1\0\10\325\27\0\6\325\1\0\16\325"+
    "\1\0\4\325\1\0\1\325\1\0\3\325\1\0\1\u0151"+
    "\2\0\1\113\1\326\1\113\1\326\1\113\10\326\5\113"+
    "\1\322\1\0\1\323\1\113\1\324\15\113\6\326\1\113"+
    "\16\326\1\113\4\326\1\113\1\326\1\113\3\326\1\113"+
    "\1\u0152\2\113\3\120\1\0\2\120\3\0\2\120\1\0"+
    "\6\120\1\340\1\120\1\335\1\330\1\0\15\120\6\0"+
    "\1\120\16\0\1\120\4\0\1\120\1\0\1\120\3\0"+
    "\26\120\1\0\1\120\1\335\1\330\1\341\62\120\1\337"+
    "\1\120\1\337\1\120\10\337\5\120\1\334\1\120\1\335"+
    "\1\0\1\336\15\120\6\337\1\120\16\337\1\120\4\337"+
    "\1\120\1\337\1\120\3\337\1\120\1\u0153\2\120\46\0"+
    "\1\u0154\41\0\3\131\1\u0155\2\131\3\u0155\2\131\1\u0155"+
    "\1\131\1\0\3\131\1\0\1\u0156\1\131\1\345\1\131"+
    "\1\u0157\15\131\6\u0155\1\131\16\u0155\1\131\4\u0155\1\131"+
    "\1\u0155\1\131\3\u0155\21\131\1\0\3\131\1\0\103\131"+
    "\1\0\3\131\1\0\1\u0157\1\131\1\345\1\131\1\u0158"+
    "\62\131\1\347\1\131\1\347\1\131\10\347\1\u0159\2\131"+
    "\1\u015a\1\u0159\1\344\1\131\1\345\1\131\1\346\15\131"+
    "\6\347\1\131\16\347\1\131\4\347\1\131\1\347\1\131"+
    "\3\347\4\131\3\0\1\u015b\2\0\3\u015b\1\0\2\u015b"+
    "\30\0\6\u015b\1\0\16\u015b\1\0\4\u015b\1\0\1\u015b"+
    "\1\0\3\u015b\21\0\1\352\3\0\1\352\103\0\1\355"+
    "\3\0\1\355\66\0\15\357\1\0\3\357\1\0\67\357"+
    "\1\362\1\357\1\362\1\357\5\362\1\363\1\362\1\363"+
    "\1\u015c\2\357\1\u015d\1\u015c\22\357\6\362\1\357\16\362"+
    "\1\357\4\362\1\357\1\362\1\357\3\362\5\357\1\363"+
    "\1\357\1\363\1\357\10\363\1\u015e\2\357\1\u015f\1\u015e"+
    "\22\357\6\363\1\357\16\363\1\357\4\363\1\357\1\363"+
    "\1\357\3\363\4\357\15\0\1\365\3\0\1\365\103\0"+
    "\1\370\3\0\1\370\67\0\1\373\1\0\1\373\1\0"+
    "\10\373\27\0\6\373\1\0\16\373\1\0\4\373\1\0"+
    "\1\373\1\0\3\373\4\0\34\162\1\374\1\u0160\52\162"+
    "\34\164\1\376\1\u0161\52\164\15\166\1\167\3\166\1\167"+
    "\14\166\1\167\4\166\1\167\11\166\2\u0162\31\166\15\0"+
    "\2\u0102\2\0\1\u0102\156\0\1\u0163\64\0\1\u0164\6\0"+
    "\1\u0164\34\0\1\37\1\0\1\u0165\1\0\10\37\27\0"+
    "\6\37\1\0\16\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\6\37\1\0\1\u0166\10\37\1\u0166\4\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\2\37\1\u0167\5\37\27\0\4\37\1\u0168\1\37"+
    "\1\0\2\37\2\u0169\1\37\2\u016a\7\37\1\0\1\37"+
    "\1\u016b\2\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\1\u016c\5\37\1\0"+
    "\16\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\u016d\1\0\10\37\27\0\6\37\1\0"+
    "\16\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\6\37\1\0"+
    "\1\u016e\10\37\1\u016e\4\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\6\37\1\0\12\37\1\u016f\3\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u0170"+
    "\1\0\10\37\27\0\6\37\1\0\16\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\6\37\1\0\2\37\2\u0171\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\2\37\1\u0172\3\37"+
    "\1\0\16\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\5\37"+
    "\1\u0173\1\0\4\37\1\u0173\11\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\37\0\1\u0116\55\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\2\37\1\u0174\3\37\1\0"+
    "\16\37\1\0\4\37\1\0\1\37\1\0\3\37\7\0"+
    "\1\u0175\2\0\3\u0175\1\0\2\u0175\2\0\1\u0116\4\0"+
    "\1\u0176\20\0\6\u0175\1\0\16\u0175\1\u0177\4\u0175\1\0"+
    "\1\u0175\1\0\3\u0175\55\0\1\u0178\5\0\1\u0178\45\0"+
    "\2\u0179\2\0\1\u0179\67\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\6\37\1\0\14\37\1\u017a\1\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\6\37\1\0\14\37\1\u017b"+
    "\1\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\6\37\1\0"+
    "\1\u017c\10\37\1\u017c\4\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\2\37\1\u017d\3\37\1\0\16\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u017e"+
    "\1\0\10\37\27\0\6\37\1\0\16\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\6\37\1\0\12\37\1\u017f\3\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\2\37\1\u0180\3\37"+
    "\1\0\16\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\6\37"+
    "\1\0\12\37\1\u0181\3\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\6\37\1\0\1\u0182\1\37\2\u0183\5\37\1\u0182"+
    "\4\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\5\37\1\u0184"+
    "\1\0\4\37\1\u0184\11\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\u0185\1\0\10\37"+
    "\27\0\6\37\1\0\16\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\3\37\1\u0186\2\37\1\0\16\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\6\37\1\0\2\37\2\u0187\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\6\37\1\0\5\37"+
    "\2\u0188\7\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\u0189\1\0\10\37\27\0\6\37"+
    "\1\0\16\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\1\u018a"+
    "\5\37\1\0\16\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\2\37\1\u018b"+
    "\5\37\27\0\6\37\1\0\16\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\6\37\1\0\1\u018c\10\37\1\u018c\4\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\6\37\1\0\1\u018d"+
    "\10\37\1\u018d\4\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\6\37\1\0\12\37\1\u018e\3\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\u018f\1\0"+
    "\10\37\27\0\6\37\1\0\16\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\6\37\1\0\1\u0190\10\37\1\u0190\4\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\u0191\1\0\10\37\27\0\6\37\1\0\16\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\6\37\1\0\12\37"+
    "\1\u0192\3\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\6\37"+
    "\1\0\1\u0193\10\37\1\u0193\4\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\3\37\1\u0194\2\37\1\0\16\37\1\0"+
    "\4\37\1\0\1\u0195\1\0\3\37\5\0\1\37\1\0"+
    "\1\u0196\1\0\10\37\27\0\6\37\1\0\16\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\6\37\1\0\12\37\1\u0197"+
    "\3\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\6\37\1\0"+
    "\1\u0198\10\37\1\u0198\4\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\1\u0199\5\37\1\0\16\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\3\37\1\u019a\4\37\27\0\6\37\1\0\16\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\u019b\1\0\10\37\27\0\6\37\1\0\16\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\6\37\1\0\12\37\1\u019c"+
    "\3\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\6\37\1\0"+
    "\12\37\1\u019d\3\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\50\0\1\u019e\107\0\1\u019f\112\0\1\u01a0\141\0"+
    "\1\u01a1\54\0\1\u01a2\106\0\1\u01a3\6\0\1\u01a3\122\0"+
    "\1\u01a4\65\0\1\u01a5\6\0\1\u01a5\106\0\1\u01a6\10\0"+
    "\1\u01a6\100\0\2\u01a7\32\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\6\37\1\0\5\37\2\u01a8\5\37\1\u01a9"+
    "\1\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\2\37\1\u01aa"+
    "\3\37\1\0\16\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\6\37\1\0\5\37\2\u01ab\7\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\6\37\1\0\12\37\1\u01ac\3\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\6\37\1\0\5\37\2\u01ad"+
    "\7\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\2\37\1\u01ae"+
    "\3\37\1\0\16\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u01af\1\0\10\37\27\0"+
    "\6\37\1\0\16\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\61\0\2\u01b0\32\0\1\u0155\1\0\1\u0155\1\0"+
    "\10\u0155\27\0\6\u0155\1\0\16\u0155\1\0\4\u0155\1\0"+
    "\1\u0155\1\0\3\u0155\1\0\1\u01b1\2\0\3\131\1\0"+
    "\2\131\3\0\2\131\1\0\1\131\1\0\3\131\1\0"+
    "\1\u0156\1\131\1\345\1\131\1\0\15\131\6\0\1\131"+
    "\16\0\1\131\4\0\1\131\1\0\1\131\3\0\21\131"+
    "\1\0\3\131\2\0\1\131\1\345\1\131\1\u0158\76\131"+
    "\1\u0159\3\131\1\u0159\1\344\1\131\1\345\1\131\1\346"+
    "\61\131\1\0\1\u015b\1\0\1\u015b\1\0\10\u015b\1\u0159"+
    "\2\0\1\u01b2\1\u0159\22\0\6\u015b\1\0\16\u015b\1\0"+
    "\4\u015b\1\0\1\u015b\1\0\3\u015b\4\0\15\357\1\u015c"+
    "\3\357\1\u015c\103\357\1\u015e\3\357\1\u015e\66\357\15\166"+
    "\1\167\3\166\1\167\14\166\1\167\4\166\1\167\5\166"+
    "\1\u01b3\5\166\1\u01b3\30\166\62\0\2\u01b4\104\0\2\u01b5"+
    "\27\0\1\37\1\0\1\37\1\0\10\37\27\0\3\37"+
    "\1\u01b6\2\37\1\0\16\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\1\u01b7\5\37\1\0\16\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\u01b8\1\0"+
    "\10\37\27\0\6\37\1\0\16\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\6\37\1\0\16\37\1\0\1\37\1\u01b9"+
    "\2\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\2\37\1\u01ba\5\37\27\0\6\37\1\0"+
    "\16\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\6\37\1\0"+
    "\15\37\1\u01bb\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\6\37"+
    "\1\0\5\37\2\u01bc\7\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\6\37\1\0\16\37\1\0\1\u01bd\3\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\2\37\1\u01be\3\37\1\0\16\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\u01bf\1\0\10\37\27\0\6\37\1\0\16\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\6\37\1\0\12\37\1\u01c0"+
    "\3\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\6\37\1\0"+
    "\1\u01c1\10\37\1\u01c1\4\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\6\37\1\0\16\37\1\0\2\37\1\u01c2\1\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\u0175\1\0\1\u0175"+
    "\1\0\10\u0175\1\u01c3\3\0\1\u01c4\22\0\6\u0175\1\0"+
    "\16\u0175\1\0\4\u0175\1\0\1\u0175\1\0\3\u0175\7\0"+
    "\1\u01c5\2\0\3\u01c5\1\0\2\u01c5\30\0\6\u01c5\1\0"+
    "\16\u01c5\1\0\4\u01c5\1\0\1\u01c5\1\0\3\u01c5\7\0"+
    "\1\u01c6\2\0\3\u01c6\1\0\2\u01c6\30\0\6\u01c6\1\0"+
    "\16\u01c6\1\0\4\u01c6\1\0\1\u01c6\1\0\3\u01c6\51\0"+
    "\1\u01c7\6\0\1\u01c7\34\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\1\37\1\u01c8\4\37\1\0\1\37\1\u01c8"+
    "\14\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\6\37\1\0"+
    "\5\37\2\u01c9\7\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\1\37\1\u01ca\4\37\1\0\1\37\1\u01ca\14\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\6\37\1\0\16\37\1\0"+
    "\1\u01cb\3\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\6\37\1\0\2\37"+
    "\2\u01cc\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\6\37"+
    "\1\0\14\37\1\u01cd\1\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\2\37\1\u01ce\3\37\1\0\16\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\6\37\1\0\5\37\2\u01cf\7\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\6\37\1\0\1\u01d0"+
    "\10\37\1\u01d0\4\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\6\37\1\0\15\37\1\u01d1\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\u01d2\1\0\10\37"+
    "\27\0\6\37\1\0\16\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\6\37\1\0\2\37\2\u01d3\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\6\37\1\0\1\u01d4\10\37\1\u01d4"+
    "\4\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\6\37\1\0"+
    "\16\37\1\0\1\37\1\u01d5\2\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\6\37\1\0\5\37\2\u01d6\7\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\5\37\1\u01d7\1\0\4\37\1\u01d7\11\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\6\37\1\0\14\37"+
    "\1\u01d8\1\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\1\37"+
    "\1\u01d9\4\37\1\0\1\37\1\u01d9\14\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u01da"+
    "\1\0\10\37\27\0\2\37\1\u01db\3\37\1\0\16\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\6\37\1\0\1\u01dc"+
    "\10\37\1\u01dc\4\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u01dd\1\0\10\37\27\0"+
    "\6\37\1\0\16\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u01de\1\0\10\37\27\0"+
    "\6\37\1\0\16\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\6\37\1\0\1\u01df\10\37\1\u01df\4\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\2\37\1\u01e0\3\37\1\0\16\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\3\37\1\u01e1\2\37"+
    "\1\0\16\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\6\37"+
    "\1\0\5\37\2\u01e2\7\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\2\37\1\u01e3\3\37\1\0\16\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\6\37\1\0\1\u01e4\10\37\1\u01e4"+
    "\4\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\4\37\1\u01e5"+
    "\1\37\1\0\16\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u01e6\1\0\10\37\27\0"+
    "\6\37\1\0\16\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\52\0\1\u01e7\126\0\1\u01e8\70\0\1\u01e9\44\0"+
    "\1\u01ea\171\0\1\u01eb\70\0\1\u01ec\51\0\1\u01ed\157\0"+
    "\2\u01ee\31\0\1\u01ef\12\0\1\u01eb\33\0\1\u01f0\40\0"+
    "\1\u01e7\105\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\6\37\1\0\12\37\1\u01f1\3\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\3\37\1\u01f2\2\37\1\0\16\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\6\37\1\0\16\37\1\0"+
    "\3\37\1\u01f3\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\1\37\1\u01f4\4\37"+
    "\1\0\1\37\1\u01f4\14\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\2\37\1\u01f5\3\37\1\0\16\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\3\37\1\u01f6\2\37\1\0\16\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\6\37\1\0\12\37"+
    "\1\u01f7\3\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\6\37"+
    "\1\0\1\u01f8\10\37\1\u01f8\4\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\61\0\2\u01f9\46\0\1\u0159\3\0"+
    "\1\u0159\66\0\15\166\1\167\3\166\1\167\14\166\1\167"+
    "\4\166\1\167\1\166\1\u01fa\6\166\1\u01fa\33\166\62\0"+
    "\2\u01fb\25\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\4\37\1\u01fc\1\37\1\0\16\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\1\37\1\u01fd\4\37\1\0\1\37\1\u01fd"+
    "\14\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\5\37\1\u01fe"+
    "\1\0\4\37\1\u01fe\11\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\6\37\1\0\5\37\2\u01ff\7\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\6\37\1\0\5\37\2\u0200\7\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\2\37\1\u0201\5\37\27\0\6\37"+
    "\1\0\16\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\5\37"+
    "\1\u0202\1\0\4\37\1\u0202\11\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\6\37\1\0\12\37\1\u0203\3\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\6\37\1\0\5\37\2\u0204"+
    "\7\37\1\0\4\37\1\0\1\37\1\0\3\37\21\0"+
    "\1\u01c3\73\0\1\u01c5\1\0\1\u01c5\1\0\10\u01c5\6\0"+
    "\1\u0205\20\0\6\u01c5\1\0\16\u01c5\1\0\4\u01c5\1\0"+
    "\1\u01c5\1\0\3\u01c5\5\0\1\u01c6\1\0\1\u01c6\1\0"+
    "\10\u01c6\27\0\6\u01c6\1\0\16\u01c6\1\u0206\4\u01c6\1\0"+
    "\1\u01c6\1\0\3\u01c6\64\0\2\u0207\27\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\3\37\1\u0208\2\37\1\0"+
    "\16\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\1\37\1\u0209"+
    "\4\37\1\0\1\37\1\u0209\14\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\2\37\1\u020a\3\37\1\0\16\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\6\37\1\0\7\37\2\u020b"+
    "\5\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\6\37\1\0"+
    "\12\37\1\u020c\3\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\1\37\1\u020d\4\37\1\0\1\37\1\u020d\14\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\3\37\1\u020e\2\37\1\0"+
    "\16\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\5\37\1\u020f"+
    "\1\0\4\37\1\u020f\11\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\6\37\1\0\15\37\1\u0210\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\4\37\1\u0211\1\37\1\0\16\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\2\37\1\u0212\5\37\27\0\6\37\1\0"+
    "\16\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\2\37\1\u0213"+
    "\3\37\1\0\16\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\3\37\1\u0214\2\37\1\0\16\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\6\37\1\0\16\37\1\0\3\37\1\u0215"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\5\37\1\u0216\1\0\4\37\1\u0216"+
    "\11\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\6\37\1\0"+
    "\1\u0217\10\37\1\u0217\4\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\6\37\1\0\1\u0218\10\37\1\u0218\4\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\5\37\1\u0219\1\0\4\37"+
    "\1\u0219\11\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\6\37"+
    "\1\0\12\37\1\u021a\3\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\57\0\1\u01eb\10\0\1\u01eb\26\0\1\u021b"+
    "\12\0\1\u01eb\33\0\1\u01f0\102\0\1\u01ec\6\0\1\u01ec"+
    "\104\0\1\u01e7\5\0\1\u01e7\46\0\1\u01eb\33\0\1\u01f0"+
    "\127\0\1\u01eb\102\0\1\u021c\71\0\1\u021d\126\0\1\u021e"+
    "\22\0\1\37\1\0\1\u021f\1\0\10\37\27\0\6\37"+
    "\1\0\16\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\5\37"+
    "\1\u0220\1\0\4\37\1\u0220\11\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\u0221\1\0"+
    "\10\37\27\0\6\37\1\0\16\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\6\37\1\0\16\37\1\0\4\37\1\0"+
    "\1\37\1\0\1\37\1\u0222\1\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\6\37\1\0\2\37\2\u0223"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\u0224\1\0\10\37\27\0\6\37\1\0"+
    "\16\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\6\37\1\0"+
    "\1\u0225\10\37\1\u0225\4\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\6\37\1\0\15\37\1\u0226\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\7\0\1\u0227\2\0\3\u0227\1\0"+
    "\2\u0227\30\0\6\u0227\1\0\16\u0227\1\0\4\u0227\1\0"+
    "\1\u0227\1\0\3\u0227\4\0\15\166\1\167\3\166\1\167"+
    "\14\166\1\167\4\166\1\167\14\166\2\u0228\26\166\53\0"+
    "\1\u0229\10\0\1\u0229\24\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\6\37\1\0\2\37\2\u022a\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\u022b\1\0\10\37\27\0\6\37\1\0\16\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\6\37\1\0\12\37\1\u022c"+
    "\3\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\6\37\1\0"+
    "\1\u022d\10\37\1\u022d\4\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\6\37\1\0\12\37\1\u022e\3\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\6\37\1\0\15\37\1\u022f\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\6\37\1\0\16\37\1\0"+
    "\1\u0230\3\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\1\u0231\5\37\1\0"+
    "\16\37\1\0\4\37\1\0\1\37\1\0\3\37\21\0"+
    "\1\u01c3\3\0\1\u01c4\103\0\1\u0232\3\0\1\u0233\150\0"+
    "\2\u0234\25\0\1\37\1\0\1\u0235\1\0\10\37\27\0"+
    "\6\37\1\0\16\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\5\37\1\u0236\1\0\4\37\1\u0236\11\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\2\37\1\u0237\3\37\1\0\16\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\6\37\1\0\1\u0238"+
    "\10\37\1\u0238\4\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u0239\1\0\10\37\27\0"+
    "\6\37\1\0\16\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\6\37\1\0\14\37\1\u023a\1\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\u023b\1\0"+
    "\10\37\27\0\6\37\1\0\16\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\2\37\1\u023c\3\37\1\0\16\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\4\37\1\u023d\1\37\1\0"+
    "\16\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\5\37\1\u023e"+
    "\1\0\4\37\1\u023e\11\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\u023f\1\0\10\37"+
    "\27\0\6\37\1\0\16\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\6\37\1\0\1\u0240\10\37\1\u0240\4\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\u0241\1\0\10\37\27\0\6\37\1\0\16\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\52\0\1\u0242\44\0"+
    "\1\u01eb\172\0\1\u01eb\24\0\1\u0243\105\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\6\37\1\0\16\37\1\0"+
    "\4\37\1\0\1\37\1\0\1\37\1\u0244\1\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\6\37\1\0"+
    "\1\u0245\10\37\1\u0245\4\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\6\37\1\0\2\37\2\u0246\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\6\37\1\0\16\37\1\0\4\37"+
    "\1\0\1\37\1\0\1\37\1\u0247\1\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\6\37\1\0\2\37"+
    "\2\u0248\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\6\37"+
    "\1\0\16\37\1\0\4\37\1\0\1\37\1\0\1\37"+
    "\1\u0249\1\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\6\37\1\0\16\37\1\0\4\37\1\0\1\37"+
    "\1\0\1\37\1\u024a\1\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\1\u024b\5\37\1\0\16\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\u0227\1\0"+
    "\1\u0227\1\0\10\u0227\27\0\6\u0227\1\0\16\u0227\1\0"+
    "\4\u0227\1\0\1\u0227\1\0\3\u0227\4\0\15\166\1\167"+
    "\3\166\1\167\14\166\1\167\4\166\1\167\16\166\2\u024c"+
    "\24\166\15\0\2\u024d\2\0\1\u024d\67\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\2\37\1\u024e\3\37\1\0"+
    "\16\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\2\37\1\u024f"+
    "\3\37\1\0\16\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\5\37\1\u0250\1\0\4\37\1\u0250\11\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u0251"+
    "\1\0\10\37\27\0\6\37\1\0\16\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\3\37\1\u0252\2\37\1\0\16\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\21\0\1\u0232"+
    "\145\0\1\u0253\10\0\1\u0253\24\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\6\37\1\0\16\37\1\0\4\37"+
    "\1\0\1\37\1\0\1\37\1\u0254\1\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\6\37\1\0\1\u0255"+
    "\10\37\1\u0255\4\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\5\37\1\u0256\1\0\4\37\1\u0256\11\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u0257"+
    "\1\0\10\37\27\0\6\37\1\0\16\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\6\37\1\0\16\37\1\0\4\37"+
    "\1\0\1\37\1\0\1\37\1\u0258\1\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\5\37\1\u0259\1\0"+
    "\4\37\1\u0259\11\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\1\u025a\5\37\1\0\16\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\u025b\1\0\10\37"+
    "\27\0\6\37\1\0\16\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\3\37\1\u025c\2\37\1\0\16\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u025d"+
    "\1\0\10\37\27\0\6\37\1\0\16\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\53\0\1\u01eb\105\0\1\u01eb"+
    "\6\0\1\u01eb\34\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\6\37\1\0\16\37\1\0\4\37\1\0\1\37"+
    "\1\0\1\37\1\u025e\1\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\6\37\1\0\5\37\2\u025f\7\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\6\37\1\0\7\37"+
    "\2\u0260\5\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\6\37"+
    "\1\0\16\37\1\0\4\37\1\0\1\37\1\0\1\37"+
    "\1\u0261\1\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\6\37\1\0\16\37\1\0\4\37\1\0\1\37"+
    "\1\0\1\37\1\u0262\1\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\5\37\1\u0263\1\0\4\37\1\u0263"+
    "\11\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\4\37\1\u0264"+
    "\1\37\1\0\16\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\4\0\15\166\1\167\3\166\1\167\14\166\1\167"+
    "\4\166\1\167\7\166\1\u0265\10\166\1\u0265\23\166\15\0"+
    "\2\u024d\2\0\1\u024d\43\0\1\u0266\23\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\5\37\1\u0267\1\0\4\37"+
    "\1\u0267\11\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\1\37"+
    "\1\u0268\4\37\1\0\1\37\1\u0268\14\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\6\37\1\0\15\37\1\u0269\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\34\0\1\u026a\60\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\1\u026b\5\37"+
    "\1\0\16\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\u026c\1\0\10\37\27\0\6\37"+
    "\1\0\16\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\1\u026d"+
    "\5\37\1\0\16\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u026e\1\0\10\37\27\0"+
    "\6\37\1\0\16\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\2\37\1\u026f"+
    "\5\37\27\0\6\37\1\0\16\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\1\u0270\5\37\1\0\16\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\6\37\1\0\1\u0271\10\37\1\u0271"+
    "\4\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\4\37\1\u0272"+
    "\1\37\1\0\16\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\1\u0273\5\37\1\0\16\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\2\37\1\u0274\3\37\1\0\16\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\6\37\1\0\16\37\1\0\4\37"+
    "\1\0\1\37\1\0\1\37\1\u0275\1\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\1\u0276\5\37\1\0"+
    "\16\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\6\37\1\0"+
    "\16\37\1\0\4\37\1\0\1\37\1\0\1\37\1\u0277"+
    "\1\37\4\0\15\166\1\167\3\166\1\167\6\166\1\u0278"+
    "\5\166\1\167\4\166\1\167\44\166\46\0\1\u0279\42\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\6\37\1\0"+
    "\15\37\1\u027a\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\u027b\1\0\10\37\27\0\6\37"+
    "\1\0\16\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\21\0\2\u026a\2\0\1\u026a\67\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\3\37\1\u027c\2\37\1\0\16\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\3\37\1\u027d\2\37"+
    "\1\0\16\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\2\37\1\u027e\5\37"+
    "\27\0\6\37\1\0\16\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\6\37\1\0\2\37\2\u027f\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\3\37\1\u0280\2\37\1\0\16\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\5\37\1\u0281\1\0"+
    "\4\37\1\u0281\11\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\6\37\1\0\16\37\1\0\3\37\1\u0282\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\6\37\1\0\16\37\1\0\4\37\1\0\1\37"+
    "\1\0\1\37\1\u0283\1\37\4\0\15\166\1\u0284\1\u0278"+
    "\2\166\1\u0284\14\166\1\167\4\166\1\167\44\166\47\0"+
    "\1\u0285\41\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\5\37\1\u0286\1\0\4\37\1\u0286\11\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\5\37\1\u0287\1\0\4\37\1\u0287"+
    "\11\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\6\37\1\0"+
    "\16\37\1\0\4\37\1\0\1\37\1\0\1\37\1\u0288"+
    "\1\37\5\0\1\37\1\0\1\u0289\1\0\10\37\27\0"+
    "\6\37\1\0\16\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\6\37\1\0\7\37\2\u028a\5\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\72\0\1\u028b\22\0\1\37\1\0"+
    "\1\u028c\1\0\10\37\27\0\6\37\1\0\16\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\u028d\1\0\10\37\27\0\6\37\1\0\16\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\6\37\1\0\16\37\1\0"+
    "\4\37\1\0\1\37\1\0\1\37\1\u028e\1\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\6\37\1\0"+
    "\16\37\1\0\4\37\1\0\1\37\1\0\1\37\1\u028f"+
    "\1\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\6\37\1\0\5\37\2\u0290\7\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\73\0\1\u0291\21\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\6\37\1\0\16\37\1\0"+
    "\4\37\1\0\1\37\1\0\1\37\1\u0292\1\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\6\37\1\0"+
    "\12\37\1\u0293\3\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\52\0\1\u0294\42\0\1\37\1\0\1\u0295\1\0"+
    "\10\37\27\0\6\37\1\0\16\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\72\0\1\u0296\22\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\1\37\1\u0297\4\37\1\0"+
    "\1\37\1\u0297\14\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\7\0\1\u0298\121\0\2\u0298\2\0\1\u0298\5\0"+
    "\1\u0299\75\0\2\u0299\2\0\1\u0299\1\0\1\u029a\36\0"+
    "\2\u029b\5\0\1\u029c\100\0\2\u029d\114\0\1\u029e\101\0"+
    "\2\u029f\114\0\1\u02a0\101\0\2\u02a1\114\0\1\u02a2\101\0"+
    "\2\u02a3\41\0\2\u02a1\2\0\1\u02a1\6\0\1\u02a4\141\0"+
    "\2\u02a5\47\0\1\u02a1\155\0\1\u02a1\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[38448];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\23\0\2\1\1\11\12\1\2\11\2\1\3\11\13\1"+
    "\1\11\25\1\2\11\2\1\1\11\6\1\1\11\2\1"+
    "\1\11\7\1\1\11\4\1\1\0\1\1\1\11\2\1"+
    "\1\11\3\1\1\11\1\1\1\11\1\1\1\11\4\0"+
    "\1\1\1\11\4\1\1\11\2\1\1\0\2\1\1\0"+
    "\1\1\2\0\6\1\1\11\2\0\4\1\1\0\1\1"+
    "\1\0\1\1\2\0\1\11\2\0\2\1\1\0\43\1"+
    "\1\0\2\1\1\11\1\1\12\0\1\1\3\0\3\1"+
    "\3\11\1\1\3\0\3\1\1\11\4\0\1\1\2\0"+
    "\1\11\2\0\1\11\7\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\1\1\0\1\11\1\0\2\11\2\1\1\11"+
    "\3\0\15\1\1\0\1\1\3\0\47\1\12\0\7\1"+
    "\1\11\2\1\1\0\1\1\1\0\1\11\1\0\1\11"+
    "\1\1\1\0\1\11\1\0\1\1\1\0\2\11\1\1"+
    "\2\0\20\1\4\0\45\1\12\0\10\1\1\0\1\11"+
    "\1\0\1\1\1\11\1\0\15\1\1\11\1\1\3\0"+
    "\37\1\11\0\1\11\12\1\1\0\11\1\3\0\23\1"+
    "\4\0\23\1\1\11\1\1\1\0\15\1\2\0\11\1"+
    "\1\0\5\1\1\0\22\1\1\0\22\1\1\0\13\1"+
    "\1\0\5\1\1\0\5\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\14\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[677];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    private final StateStack stack = new StateStack();
    private String heredoc = null;
    private int hereocLength = 0;
    private boolean aspTagsAllowed;
    private boolean shortTagsAllowed;
    private LexerInput input;

    public PHP5ColoringLexer(LexerRestartInfo info, boolean shortTagsAllowed, boolean aspTagsAllowed, boolean inPHP) {
        this.input = info.input();
        this.aspTagsAllowed = aspTagsAllowed;
        this.shortTagsAllowed = shortTagsAllowed;

        if (info.state() != null) {
            //reset state
            setState((LexerState) info.state());
        } else {
            //initial state
            stack.pushStack(YYINITIAL);
            if (inPHP) {
                stack.pushStack(ST_PHP_IN_SCRIPTING);
                zzState = ST_PHP_IN_SCRIPTING;
                zzLexicalState = ST_PHP_IN_SCRIPTING;
            } else {
                zzState = YYINITIAL;
                zzLexicalState = YYINITIAL;
            }
        }

    }

    public static final class LexerState  {
        final StateStack stack;
        /* the current state of the DFA */
        final int zzState;
        /* the current lexical state */
        final int zzLexicalState;
        /* remember the heredoc */
        final String heredoc;
        /* and the lenght of */
        final int hereocLength;

        LexerState(StateStack stack, int zzState, int zzLexicalState, String heredoc, int hereocLength) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.heredoc = heredoc;
            this.hereocLength = hereocLength;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null || obj.getClass() != this.getClass()) {
                return false;
            }

            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                && (this.zzLexicalState == state.zzLexicalState)
                && (this.hereocLength == state.hereocLength)
                && ((this.heredoc == null && state.heredoc == null) || (this.heredoc != null && state.heredoc != null && this.heredoc.equals(state.heredoc))));
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            hash = 31 * hash + this.hereocLength;
            if (heredoc != null) {
                hash = 31 * hash + this.heredoc.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.createClone(), zzState, zzLexicalState, heredoc, hereocLength);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
        this.heredoc = state.heredoc;
        this.hereocLength = state.hereocLength;
    }

    protected boolean isHeredocState(int state) {
        return state == ST_PHP_HEREDOC || state == ST_PHP_START_HEREDOC || state == ST_PHP_END_HEREDOC || state == ST_PHP_NOWDOC;
    }

    public int[] getParamenters() {
        return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }

    protected int getZZStartRead() {
        return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
        return this.zzPushbackPos;
    }

    protected void pushBack(int i) {
        yypushback(i);
    }

    protected void popState() {
        yybegin(stack.popStack());
    }

    protected void pushState(final int state) {
        stack.pushStack(getZZLexicalState());
        yybegin(state);
    }


 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PHP5ColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PHP5ColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1772) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PHPTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24:
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens
    return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 145: break;
        case 86:
          { return PHPTokenId.PHP_FALSE;
          }
        case 146: break;
        case 21:
          { yypushback(1);
    yybegin(ST_PHP_NOWDOC);
          }
        case 147: break;
        case 27:
          { String yytext = yytext();
    switch (yytext.charAt(yytext.length() - 1)) {
        case '?':
        case '%':
            yypushback(1);
            break;
        default:
            popState();
    }
     return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 148: break;
        case 67:
          { yypushback(2);
        return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 149: break;
        case 55:
          { popState();
    return PHPTokenId.PHPDOC_COMMENT_END;
          }
        case 150: break;
        case 119:
          { return PHPTokenId.PHP_INCLUDE;
          }
        case 151: break;
        case 29:
          { return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 152: break;
        case 135:
          { return PHPTokenId.PHP_ENDDECLARE;
          }
        case 153: break;
        case 111:
          { return PHPTokenId.PHP_GLOBAL;
          }
        case 154: break;
        case 141:
          { return PHPTokenId.PHP__FUNCTION__;
          }
        case 155: break;
        case 17:
          { popState();
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 156: break;
        case 33:
          { if (shortTagsAllowed ) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 157: break;
        case 47:
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 158: break;
        case 81:
          { return PHPTokenId.PHP_LIST;
          }
        case 159: break;
        case 85:
          { return PHPTokenId.PHP_EMPTY;
          }
        case 160: break;
        case 14:
          { pushState(ST_PHP_LINE_COMMENT);
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 161: break;
        case 78:
          { return PHPTokenId.PHP_CASE;
          }
        case 162: break;
        case 35:
          { return PHPTokenId.PHP_VARIABLE;
          }
        case 163: break;
        case 38:
          { //popState();
        yybegin(YYINITIAL);
        if (yylength() > 2) {
            yypushback(yylength()-2);
        }
        stack.clear();
    return PHPTokenId.PHP_CLOSETAG;
          }
        case 164: break;
        case 37:
          { if (aspTagsAllowed) {
            yybegin(YYINITIAL);
            stack.clear();
        return PHPTokenId.PHP_CLOSETAG;
    }
    return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 165: break;
        case 28:
          { return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 166: break;
        case 76:
          { pushState(ST_PHP_DOC_COMMENT);
    yypushback(yylength()-3);
    return PHPTokenId.PHPDOC_COMMENT_START;
          }
        case 167: break;
        case 97:
          { return PHPTokenId.PHP_ISSET;
          }
        case 168: break;
        case 126:
          { return PHPTokenId.PHP__FILE__;
          }
        case 169: break;
        case 42:
          { return PHPTokenId.PHP_IF;
          }
        case 170: break;
        case 48:
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 171: break;
        case 57:
          { if (aspTagsAllowed) {
            yybegin(YYINITIAL);
            stack.clear();
        return PHPTokenId.PHP_CLOSETAG;
    }
    String text = yytext();
    if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
        popState();
    }
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 172: break;
        case 40:
          { return PHPTokenId.PHP_AS;
          }
        case 173: break;
        case 43:
          { pushState(ST_PHP_LOOKING_FOR_CLASS_CONST);
    return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 174: break;
        case 143:
          { pushState(ST_HALTED_COMPILER);
    return PHPTokenId.PHP_HALT_COMPILER;
          }
        case 175: break;
        case 63:
          { return PHPTokenId.PHP_USE;
          }
        case 176: break;
        case 142:
          { return PHPTokenId.PHP__NAMESPACE__;
          }
        case 177: break;
        case 56:
          { popState();
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 178: break;
        case 140:
          { return PHPTokenId.PHP_INCLUDE_ONCE;
          }
        case 179: break;
        case 129:
          { return PHPTokenId.PHP_NAMESPACE;
          }
        case 180: break;
        case 54:
          { popState();
    return PHPTokenId.PHP_COMMENT_END;
          }
        case 181: break;
        case 89:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    hereocLength = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        hereocLength--;
    }
    // HEREDOC PHP 5.3
    if (yytext().charAt(startString) == '"') {
        hereocLength -= 2;
        startString ++;
    }
    heredoc = yytext().substring(startString,hereocLength+startString);
    yybegin(ST_PHP_START_HEREDOC);
    return PHPTokenId.PHP_HEREDOC_TAG_START;
          }
        case 182: break;
        case 31:
          { popState();
    return PHPTokenId.T_INLINE_HTML;
          }
        case 183: break;
        case 6:
          { return PHPTokenId.PHP_OPERATOR;
          }
        case 184: break;
        case 11:
          { pushState(ST_PHP_BACKQUOTE);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 185: break;
        case 44:
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 186: break;
        case 3:
          { return PHPTokenId.PHP_NUMBER;
          }
        case 187: break;
        case 65:
          { yypushback(1);
    pushState(ST_PHP_VAR_OFFSET);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 188: break;
        case 116:
          { return PHPTokenId.PHP_REQUIRE;
          }
        case 189: break;
        case 118:
          { return PHPTokenId.PHP_DECLARE;
          }
        case 190: break;
        case 93:
          { return PHPTokenId.PHP_CLONE;
          }
        case 191: break;
        case 95:
          { return PHPTokenId.PHP_TRAIT;
          }
        case 192: break;
        case 46:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_TOKEN;
          }
        case 193: break;
        case 60:
          { return PHPTokenId.PHP_NEW;
          }
        case 194: break;
        case 70:
          { yypushback(2);
    return PHPTokenId.PHP_COMMENT;
          }
        case 195: break;
        case 53:
          { return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 196: break;
        case 18:
          { yypushback(1);
        popState();
          }
        case 197: break;
        case 112:
          { return PHPTokenId.PHP_EXTENDS;
          }
        case 198: break;
        case 77:
          { return PHPTokenId.PHP_NULL;
          }
        case 199: break;
        case 83:
          { pushState(ST_PHP_IN_SCRIPTING);
    //yybegin(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_OPENTAG;
    //return createSymbol(ASTSymbol.T_OPEN_TAG);
          }
        case 200: break;
        case 101:
          { return PHPTokenId.PHP_WHILE;
          }
        case 201: break;
        case 128:
          { return PHPTokenId.PHP_ENDSWITCH;
          }
        case 202: break;
        case 120:
          { return PHPTokenId.PHP_PRIVATE;
          }
        case 203: break;
        case 1:
          { return PHPTokenId.T_INLINE_HTML;
          }
        case 204: break;
        case 84:
          { return PHPTokenId.PHP_ENDIF;
          }
        case 205: break;
        case 25:
          { yypushback(1);
    popState();
        if (yylength() > 0)
            return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 206: break;
        case 107:
          { return PHPTokenId.PHP_STATIC;
          }
        case 207: break;
        case 123:
          { return PHPTokenId.PHP_FUNCTION;
          }
        case 208: break;
        case 117:
          { return PHPTokenId.PHP_DEFAULT;
          }
        case 209: break;
        case 16:
          { return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 210: break;
        case 26:
          { popState();
    return PHPTokenId.PHP_TOKEN;
          }
        case 211: break;
        case 34:
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 212: break;
        case 127:
          { return PHPTokenId.PHP__LINE__;
          }
        case 213: break;
        case 72:
          { return PHPTokenId.PHP_EXIT;
          }
        case 214: break;
        case 32:
          { if (aspTagsAllowed) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 215: break;
        case 36:
          { pushState(ST_PHP_COMMENT);
    return PHPTokenId.PHP_COMMENT_START;
          }
        case 216: break;
        case 88:
          { return PHPTokenId.PHP_BREAK;
          }
        case 217: break;
        case 20:
          { yypushback(1);
        yybegin(ST_PHP_HEREDOC);
          }
        case 218: break;
        case 131:
          { return PHPTokenId.PHP_INSTEADOF;
          }
        case 219: break;
        case 19:
          { yypushback(yylength());
        popState();
          }
        case 220: break;
        case 132:
          { return PHPTokenId.PHP_PROTECTED;
          }
        case 221: break;
        case 58:
          { String text = yytext();
    if ((text.charAt(1)=='%' && aspTagsAllowed)
        || (text.charAt(1)=='?')) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.T_OPEN_TAG_WITH_ECHO;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 222: break;
        case 98:
          { return PHPTokenId.PHP_PRINT;
          }
        case 223: break;
        case 91:
          { return PHPTokenId.PHP_CONST;
          }
        case 224: break;
        case 64:
          { return PHPTokenId.PHP_VAR;
          }
        case 225: break;
        case 144:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.T_INLINE_HTML;
          }
        case 226: break;
        case 96:
          { return PHPTokenId.PHP_THROW;
          }
        case 227: break;
        case 109:
          { return PHPTokenId.PHP_PARENT;
          }
        case 228: break;
        case 108:
          { return PHPTokenId.PHP_SWITCH;
          }
        case 229: break;
        case 68:
          { int trailingNewLineLength = 1;
        int label_len = yylength() - trailingNewLineLength;
        int back = trailingNewLineLength;

        if (yytext().charAt(label_len-1)==';') {
           label_len--;
           back++;
        }
        if (label_len > hereocLength && yytext().substring(label_len - hereocLength,label_len).equals(heredoc)) {
            back = back + hereocLength;
            yypushback(back);
            yybegin(ST_PHP_END_HEREDOC);
        } else {
            yypushback(trailingNewLineLength);
            return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
        }
          }
        case 230: break;
        case 71:
          { yypushback(2); // go back to mark end of comment in the next token
        return PHPTokenId.PHPDOC_COMMENT;
          }
        case 231: break;
        case 102:
          { return PHPTokenId.PHP_CASTING;
          }
        case 232: break;
        case 39:
          { return PHPTokenId.PHP_TEXTUAL_OPERATOR;
          }
        case 233: break;
        case 30:
          { popState();return PHPTokenId.WHITESPACE;
          }
        case 234: break;
        case 61:
          { return PHPTokenId.PHP_DIE;
          }
        case 235: break;
        case 8:
          { return PHPTokenId.PHP_SEMICOLON;
          }
        case 236: break;
        case 133:
          { return PHPTokenId.PHP__CLASS__;
          }
        case 237: break;
        case 69:
          { int label_len = yylength() - 1;
    int back = 1;

    if (yytext().charAt(label_len-1)==';') {
       label_len--;
           back++;
    }
    if (label_len > hereocLength && yytext().substring(label_len - hereocLength,label_len).equals(heredoc)) {
        back = back + hereocLength;
        yypushback(back);
        yybegin(ST_PHP_END_NOWDOC);
    }
    else {
        yypushback(1);
    }
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 238: break;
        case 2:
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 239: break;
        case 13:
          { int lastState = stack.get(stack.size() - 1);
    if (lastState != ST_PHP_IN_SCRIPTING && lastState != YYINITIAL) {
        // probably in some sub state -> "{$" or "${"
        popState();
    }
    return PHPTokenId.PHP_CURLY_CLOSE;
          }
        case 240: break;
        case 94:
          { return PHPTokenId.PHP_CLASS;
          }
        case 241: break;
        case 114:
          { return PHPTokenId.PHP_FINALLY;
          }
        case 242: break;
        case 130:
          { return PHPTokenId.PHP_INTERFACE;
          }
        case 243: break;
        case 99:
          { return PHPTokenId.PHP_UNSET;
          }
        case 244: break;
        case 12:
          { return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 245: break;
        case 22:
          { yypushback(1);
    popState();
          }
        case 246: break;
        case 110:
          { return PHPTokenId.PHP_PUBLIC;
          }
        case 247: break;
        case 139:
          { return PHPTokenId.PHP_REQUIRE_ONCE;
          }
        case 248: break;
        case 134:
          { return PHPTokenId.PHP_ENDFOREACH;
          }
        case 249: break;
        case 75:
          { return PHPTokenId.PHP_EVAL;
          }
        case 250: break;
        case 82:
          { return PHPTokenId.PHP_GOTO;
          }
        case 251: break;
        case 103:
          { popState();
        return PHPTokenId.PHP_STRING;
          }
        case 252: break;
        case 124:
          { return PHPTokenId.PHP_ABSTRACT;
          }
        case 253: break;
        case 9:
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 254: break;
        case 73:
          { return PHPTokenId.PHP_ECHO;
          }
        case 255: break;
        case 87:
          { return PHPTokenId.PHP_FINAL;
          }
        case 256: break;
        case 138:
          { return PHPTokenId.PHP__METHOD__;
          }
        case 257: break;
        case 10:
          { return PHPTokenId.PHP_NS_SEPARATOR;
          }
        case 258: break;
        case 100:
          { return PHPTokenId.PHP_YIELD;
          }
        case 259: break;
        case 121:
          { return PHPTokenId.PHP__DIR__;
          }
        case 260: break;
        case 5:
          { return  PHPTokenId.PHP_STRING;
          }
        case 261: break;
        case 125:
          { return PHPTokenId.PHP_CONTINUE;
          }
        case 262: break;
        case 137:
          { return PHPTokenId.PHP_IMPLEMENTS;
          }
        case 263: break;
        case 62:
          { return PHPTokenId.PHP_TRY;
          }
        case 264: break;
        case 90:
          { return PHPTokenId.PHP_ARRAY;
          }
        case 265: break;
        case 7:
          { return PHPTokenId.WHITESPACE;
          }
        case 266: break;
        case 106:
          { return PHPTokenId.PHP_RETURN;
          }
        case 267: break;
        case 4:
          { return PHPTokenId.PHP_TOKEN;
          }
        case 268: break;
        case 15:
          { return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 269: break;
        case 92:
          { return PHPTokenId.PHP_CATCH;
          }
        case 270: break;
        case 66:
          { String text = yytext();
        int lastIndexOfDollar = text.lastIndexOf('$');
        yypushback(text.length() - lastIndexOfDollar);
        return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 271: break;
        case 136:
          { return PHPTokenId.PHP_INSTANCEOF;
          }
        case 272: break;
        case 50:
          { heredoc=null;
    hereocLength=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 1;
    // mark just the label
    if (yytext().charAt(yylength() - 2)==';') {
        back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_HEREDOC_TAG_END;
          }
        case 273: break;
        case 115:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
        int startString=3+bprefix;
        /* 3 is <<<, 2 is quotes, 1 is newline */
        hereocLength = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
        while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
            startString++;
            hereocLength--;
        }
        // first quate
        startString++;
        heredoc = yytext().substring(startString, hereocLength+startString);
        yybegin(ST_PHP_START_NOWDOC);
        return PHPTokenId.PHP_NOWDOC_TAG_START;
          }
        case 274: break;
        case 104:
          { return PHPTokenId.PHP_ENDFOR;
          }
        case 275: break;
        case 59:
          { return PHPTokenId.PHP_FOR;
          }
        case 276: break;
        case 51:
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
        label_len--;
    }

    if (label_len==hereocLength && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        hereocLength=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_NOWDOC_TAG_END;
    } else {
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 277: break;
        case 113:
          { return PHPTokenId.PHP_FOREACH;
          }
        case 278: break;
        case 23:
          { popState();
    return PHPTokenId.PHP_STRING;
          }
        case 279: break;
        case 74:
          { return PHPTokenId.PHP_ELSE;
          }
        case 280: break;
        case 80:
          { return PHPTokenId.PHP_SELF;
          }
        case 281: break;
        case 52:
          { heredoc=null; hereocLength=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 1;
    // mark just the label
    if (yytext().charAt(yylength() - 2)==';') {
        back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_NOWDOC_TAG_END;
          }
        case 282: break;
        case 45:
          { yypushback(1);
    return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 283: break;
        case 41:
          { return PHPTokenId.PHP_DO;
          }
        case 284: break;
        case 49:
          { int trailingNewLineLength = 1;
        int label_len = yylength() - trailingNewLineLength;
        int back = trailingNewLineLength;

        if (yytext().charAt(label_len-1)==';') {
           label_len--;
           back++;
        }
        if (label_len == hereocLength && yytext().substring(label_len - hereocLength,label_len).equals(heredoc)) {
            back = back + hereocLength;
            yypushback(back);
            yybegin(ST_PHP_END_HEREDOC);
        } else {
            yypushback(yylength() - trailingNewLineLength);
            yybegin(ST_PHP_HEREDOC);
        }
          }
        case 285: break;
        case 122:
          { return PHPTokenId.PHP_ENDWHILE;
          }
        case 286: break;
        case 105:
          { return PHPTokenId.PHP_ELSEIF;
          }
        case 287: break;
        case 79:
          { return PHPTokenId.PHP_TRUE;
          }
        case 288: break;
        default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
            switch (zzLexicalState) {
            case ST_PHP_COMMENT: {
              if (input.readLength() > 0) {
                input.backup(1);  // backup eof
                return PHPTokenId.PHP_COMMENT;
              }
              else {
                  return null;
              }
            }
            case 678: break;
            case ST_PHP_DOC_COMMENT: {
              if (input.readLength() > 0) {
                    input.backup(1);  // backup eof
                    return PHPTokenId.PHPDOC_COMMENT;
                }
                else {
                    return null;
                }
            }
            case 679: break;
            default:
              {        if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return PHPTokenId.UNKNOWN_TOKEN;
        } else {
            return null;
        }
 }
            }

          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
