/* The following code was generated by JFlex 1.4.3 on 10.12.13 17:01 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10.12.13 17:01 from the specification file
 * <tt>/home/warden/NetBeansProjects/web-main-new/php.editor/tools/Php5ColoringScanner.flex</tt>
 */
public class PHP5ColoringLexer {
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP_END_NOWDOC = 22;
  public static final int ST_PHP_NOWDOC = 18;
  public static final int ST_PHP_END_HEREDOC = 16;
  public static final int ST_PHP_COMMENT = 28;
  public static final int ST_PHP_START_HEREDOC = 14;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 8;
  public static final int ST_PHP_IN_SCRIPTING = 2;
  public static final int ST_PHP_LOOKING_FOR_CLASS_CONST = 10;
  public static final int ST_PHP_DOC_COMMENT = 30;
  public static final int ST_PHP_LINE_COMMENT = 32;
  public static final int ST_PHP_BACKQUOTE = 6;
  public static final int ST_PHP_START_NOWDOC = 20;
  public static final int ST_PHP_HEREDOC = 12;
  public static final int ST_HALTED_COMPILER = 36;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 34;
  public static final int ST_PHP_VAR_OFFSET = 26;
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_DOUBLE_QUOTES = 4;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
    16, 16, 17, 17, 18, 18
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\16\1\21\2\0\1\15\22\0\1\16\1\32\1\23\1\106"+
    "\1\22\1\36\1\37\1\67\1\77\1\50\1\34\1\31\1\17\1\4"+
    "\1\2\1\35\1\5\1\11\10\1\1\75\1\20\1\33\1\27\1\30"+
    "\1\70\1\17\1\44\1\10\1\55\1\46\1\3\1\7\1\64\1\66"+
    "\1\56\1\100\1\73\1\63\1\74\1\45\1\42\1\60\1\102\1\43"+
    "\1\53\1\62\1\65\1\76\1\72\1\6\1\71\1\13\1\104\1\24"+
    "\1\105\1\41\1\101\1\25\1\44\1\10\1\47\1\46\1\3\1\7"+
    "\1\64\1\66\1\57\1\100\1\73\1\63\1\74\1\45\1\42\1\61"+
    "\1\102\1\52\1\54\1\51\1\65\1\76\1\72\1\6\1\71\1\13"+
    "\1\26\1\40\1\103\1\17\53\13\1\13\12\13\1\13\4\13\1\13"+
    "\5\13\27\13\1\13\37\13\1\13\10\13\u01c2\12\4\0\14\12\16\0"+
    "\5\12\7\0\1\12\1\0\1\12\201\0\5\12\1\0\2\12\2\0"+
    "\4\12\10\0\1\12\1\0\3\12\1\0\1\12\1\0\24\12\1\0"+
    "\123\12\1\0\213\12\10\0\236\12\11\0\46\12\2\0\1\12\7\0"+
    "\47\12\110\0\33\12\5\0\3\12\55\0\53\12\25\0\12\14\4\0"+
    "\2\12\1\0\143\12\1\0\1\12\17\0\2\12\7\0\2\12\12\14"+
    "\3\12\2\0\1\12\20\0\1\12\1\0\36\12\35\0\131\12\13\0"+
    "\1\12\16\0\12\14\41\12\11\0\2\12\4\0\1\12\5\0\26\12"+
    "\4\0\1\12\11\0\1\12\3\0\1\12\27\0\31\12\253\0\66\12"+
    "\3\0\1\12\22\0\1\12\7\0\12\12\4\0\12\14\1\0\7\12"+
    "\1\0\7\12\5\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12"+
    "\1\0\1\12\3\0\4\12\3\0\1\12\20\0\1\12\15\0\2\12"+
    "\1\0\3\12\4\0\12\14\2\12\23\0\6\12\4\0\2\12\2\0"+
    "\26\12\1\0\7\12\1\0\2\12\1\0\2\12\1\0\2\12\37\0"+
    "\4\12\1\0\1\12\7\0\12\14\2\0\3\12\20\0\11\12\1\0"+
    "\3\12\1\0\26\12\1\0\7\12\1\0\2\12\1\0\5\12\3\0"+
    "\1\12\22\0\1\12\17\0\2\12\4\0\12\14\25\0\10\12\2\0"+
    "\2\12\2\0\26\12\1\0\7\12\1\0\2\12\1\0\5\12\3\0"+
    "\1\12\36\0\2\12\1\0\3\12\4\0\12\14\1\0\1\12\21\0"+
    "\1\12\1\0\6\12\3\0\3\12\1\0\4\12\3\0\2\12\1\0"+
    "\1\12\1\0\2\12\3\0\2\12\3\0\3\12\3\0\14\12\26\0"+
    "\1\12\25\0\12\14\25\0\10\12\1\0\3\12\1\0\27\12\1\0"+
    "\12\12\1\0\5\12\3\0\1\12\32\0\2\12\6\0\2\12\4\0"+
    "\12\14\25\0\10\12\1\0\3\12\1\0\27\12\1\0\12\12\1\0"+
    "\5\12\3\0\1\12\40\0\1\12\1\0\2\12\4\0\12\14\1\0"+
    "\2\12\22\0\10\12\1\0\3\12\1\0\51\12\2\0\1\12\20\0"+
    "\1\12\21\0\2\12\4\0\12\14\12\0\6\12\5\0\22\12\3\0"+
    "\30\12\1\0\11\12\1\0\1\12\2\0\7\12\72\0\60\12\1\0"+
    "\2\12\14\0\7\12\11\0\12\14\47\0\2\12\1\0\1\12\2\0"+
    "\2\12\1\0\1\12\2\0\1\12\6\0\4\12\1\0\7\12\1\0"+
    "\3\12\1\0\1\12\1\0\1\12\2\0\2\12\1\0\4\12\1\0"+
    "\2\12\11\0\1\12\2\0\5\12\1\0\1\12\11\0\12\14\2\0"+
    "\2\12\42\0\1\12\37\0\12\14\26\0\10\12\1\0\44\12\33\0"+
    "\5\12\163\0\53\12\24\0\1\12\12\14\6\0\6\12\4\0\4\12"+
    "\3\0\1\12\3\0\2\12\7\0\3\12\4\0\15\12\14\0\1\12"+
    "\1\0\12\14\6\0\46\12\12\0\53\12\1\0\1\12\3\0\u0149\12"+
    "\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\51\12"+
    "\1\0\4\12\2\0\41\12\1\0\4\12\2\0\7\12\1\0\1\12"+
    "\1\0\4\12\2\0\17\12\1\0\71\12\1\0\4\12\2\0\103\12"+
    "\45\0\20\12\20\0\125\12\14\0\u026c\12\2\0\21\12\1\0\32\12"+
    "\5\0\113\12\25\0\15\12\1\0\4\12\16\0\22\12\16\0\22\12"+
    "\16\0\15\12\1\0\3\12\17\0\64\12\43\0\1\12\4\0\1\12"+
    "\3\0\12\14\46\0\12\14\6\0\130\12\10\0\51\12\1\0\1\12"+
    "\5\0\106\12\12\0\35\12\51\0\12\14\36\12\2\0\5\12\13\0"+
    "\54\12\25\0\7\12\10\0\12\14\46\0\27\12\11\0\65\12\53\0"+
    "\12\14\6\0\12\14\15\0\1\12\135\0\57\12\21\0\7\12\4\0"+
    "\12\14\51\0\36\12\15\0\2\12\12\14\6\0\46\12\32\0\44\12"+
    "\34\0\12\14\3\0\3\12\12\14\44\12\153\0\4\12\1\0\4\12"+
    "\16\0\300\12\100\0\u0116\12\2\0\6\12\2\0\46\12\2\0\6\12"+
    "\2\0\10\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\37\12"+
    "\2\0\65\12\1\0\7\12\1\0\1\12\3\0\3\12\1\0\7\12"+
    "\3\0\4\12\2\0\6\12\4\0\15\12\5\0\3\12\1\0\7\12"+
    "\164\0\1\12\15\0\1\12\20\0\15\12\145\0\1\12\4\0\1\12"+
    "\2\0\12\12\1\0\1\12\3\0\5\12\6\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\4\12\1\0\13\12\2\0\4\12\5\0\5\12"+
    "\4\0\1\12\64\0\2\12\u0a7b\0\57\12\1\0\57\12\1\0\205\12"+
    "\6\0\4\12\21\0\46\12\12\0\66\12\11\0\1\12\20\0\27\12"+
    "\11\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12"+
    "\1\0\7\12\1\0\7\12\1\0\7\12\120\0\1\12\u01d5\0\2\12"+
    "\52\0\5\12\5\0\2\12\4\0\126\12\6\0\3\12\1\0\132\12"+
    "\1\0\4\12\5\0\51\12\3\0\136\12\21\0\33\12\65\0\20\12"+
    "\u0200\0\u19b6\12\112\0\u51cc\12\64\0\u048d\12\103\0\56\12\2\0\u010d\12"+
    "\3\0\20\12\12\14\2\12\24\0\57\12\20\0\31\12\10\0\106\12"+
    "\61\0\11\12\2\0\147\12\2\0\4\12\1\0\2\12\16\0\12\12"+
    "\120\0\10\12\1\0\3\12\1\0\4\12\1\0\27\12\35\0\64\12"+
    "\16\0\62\12\34\0\12\14\30\0\6\12\3\0\1\12\4\0\12\14"+
    "\34\12\12\0\27\12\31\0\35\12\7\0\57\12\34\0\1\12\12\14"+
    "\46\0\51\12\27\0\3\12\1\0\10\12\4\0\12\14\6\0\27\12"+
    "\3\0\1\12\5\0\60\12\1\0\1\12\3\0\2\12\2\0\5\12"+
    "\2\0\1\12\1\0\1\12\30\0\3\12\43\0\6\12\2\0\6\12"+
    "\2\0\6\12\11\0\7\12\1\0\7\12\221\0\43\12\15\0\12\14"+
    "\6\0\u2ba4\12\14\0\27\12\4\0\61\12\u2104\0\u012e\12\2\0\76\12"+
    "\2\0\152\12\46\0\7\12\14\0\5\12\5\0\1\12\1\0\12\12"+
    "\1\0\15\12\1\0\5\12\1\0\1\12\1\0\2\12\1\0\2\12"+
    "\1\0\154\12\41\0\u016b\12\22\0\100\12\2\0\66\12\50\0\14\12"+
    "\164\0\5\12\1\0\207\12\23\0\12\14\7\0\32\12\6\0\32\12"+
    "\13\0\131\12\3\0\6\12\2\0\6\12\2\0\6\12\2\0\3\12"+
    "\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\23\0\2\1\1\2\1\3\1\4\1\5\1\4\1\3"+
    "\4\5\1\6\1\4\1\7\1\4\1\10\1\11\1\12"+
    "\1\13\12\4\15\5\1\2\1\4\2\5\1\4\1\5"+
    "\1\4\1\5\1\14\1\15\1\16\1\17\1\20\2\17"+
    "\1\16\3\17\3\21\2\22\4\17\1\2\1\17\2\23"+
    "\4\2\1\0\2\24\1\2\1\25\1\26\1\25\1\3"+
    "\1\27\1\3\1\30\1\27\1\31\4\0\4\32\2\33"+
    "\1\34\1\35\1\36\1\0\1\37\1\0\1\40\1\3"+
    "\1\0\1\41\6\5\1\42\2\0\4\5\1\0\1\5"+
    "\1\0\1\43\2\0\1\17\2\0\2\41\1\0\1\44"+
    "\1\45\1\41\4\5\1\46\4\5\1\47\11\5\1\50"+
    "\13\5\1\0\1\51\2\5\1\52\1\5\12\0\1\5"+
    "\3\0\2\53\2\54\1\55\1\56\1\54\3\0\1\53"+
    "\3\57\1\60\4\0\1\17\2\0\1\61\2\0\1\62"+
    "\7\0\1\63\2\0\1\64\1\0\1\65\1\53\1\0"+
    "\1\66\1\0\1\67\1\70\1\32\1\71\1\72\3\0"+
    "\7\5\2\3\1\73\3\5\1\0\1\5\3\0\4\5"+
    "\1\74\4\5\1\75\7\5\1\76\21\5\1\77\2\5"+
    "\1\100\12\0\7\5\3\101\1\0\1\102\1\0\1\103"+
    "\1\0\1\104\1\17\1\0\1\105\1\0\1\105\1\0"+
    "\1\106\1\107\1\32\2\0\1\5\1\110\5\5\1\111"+
    "\1\112\1\5\1\113\5\5\4\0\1\114\5\5\1\115"+
    "\5\5\1\116\3\5\1\117\1\5\1\120\14\5\1\121"+
    "\1\122\4\5\12\0\10\5\1\0\1\102\1\0\1\32"+
    "\1\0\1\123\4\5\1\124\2\5\1\125\1\5\1\126"+
    "\1\127\1\5\1\130\2\131\3\0\3\5\1\132\4\5"+
    "\1\133\1\134\1\135\1\136\1\137\1\140\6\5\1\141"+
    "\2\5\1\142\4\5\1\143\1\144\1\145\11\0\1\146"+
    "\10\5\1\147\1\32\1\0\1\5\1\150\3\5\1\151"+
    "\3\5\3\0\1\152\6\5\1\153\1\154\7\5\1\155"+
    "\1\156\1\157\4\0\10\5\1\22\1\32\1\1\1\160"+
    "\4\5\1\161\1\162\1\5\2\163\1\0\1\164\2\5"+
    "\1\165\1\166\1\5\1\167\5\5\1\170\2\0\3\5"+
    "\1\171\4\5\1\32\1\0\3\5\1\172\1\173\1\0"+
    "\1\5\1\174\1\5\1\175\6\5\1\176\3\5\1\177"+
    "\2\5\1\32\1\0\2\5\1\200\1\201\1\5\1\202"+
    "\1\5\1\203\1\204\2\5\1\205\2\5\1\206\2\5"+
    "\1\32\1\0\1\207\1\210\2\5\1\211\1\212\3\5"+
    "\1\213\1\32\1\0\5\5\1\0\1\214\1\215\1\216"+
    "\2\5\1\0\1\217\1\5\1\0\1\5\1\0\1\220"+
    "\14\0\1\221\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[676];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899"+
    "\0\u05d3\0\u05d3\0\u08e0\0\u0927\0\u05d3\0\u05d3\0\u05d3\0\u096e"+
    "\0\u09b5\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6"+
    "\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0dde"+
    "\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0fcf\0\u1016"+
    "\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179\0\u11c0\0\u05d3\0\u05d3"+
    "\0\u1207\0\u124e\0\u05d3\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1"+
    "\0\u13f8\0\u05d3\0\u143f\0\u1486\0\u05d3\0\u14cd\0\u1514\0\u155b"+
    "\0\u15a2\0\u15e9\0\u1630\0\u1486\0\u05d3\0\u1677\0\u16be\0\u1705"+
    "\0\u174c\0\u1793\0\u1793\0\u05d3\0\u17da\0\u1821\0\u05d3\0\u1868"+
    "\0\u18af\0\u18f6\0\u05d3\0\u193d\0\u05d3\0\u1984\0\u05d3\0\u19cb"+
    "\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u05d3\0\u1b75\0\u1bbc"+
    "\0\u1016\0\u05d3\0\u1c03\0\u04fe\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f"+
    "\0\u1d66\0\u1dad\0\u05d3\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10"+
    "\0\u1f57\0\u05d3\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u2101"+
    "\0\u2148\0\u218f\0\u0fcf\0\u21d6\0\u0927\0\u221d\0\u05d3\0\u2264"+
    "\0\u22ab\0\u0ad1\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u0852\0\u240e"+
    "\0\u2455\0\u249c\0\u24e3\0\u0852\0\u252a\0\u2571\0\u25b8\0\u25ff"+
    "\0\u0852\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0"+
    "\0\u2837\0\u287e\0\u0852\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1"+
    "\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19"+
    "\0\u2c60\0\u2ca7\0\u05d3\0\u2cee\0\u2d35\0\u2d7c\0\u1179\0\u2dc3"+
    "\0\u2e0a\0\u2e51\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb"+
    "\0\u1295\0\u3042\0\u3089\0\u30d0\0\u2ffb\0\u05d3\0\u05d3\0\u05d3"+
    "\0\u3042\0\u3117\0\u13b1\0\u315e\0\u31a5\0\u3117\0\u05d3\0\u315e"+
    "\0\u05d3\0\u31ec\0\u3233\0\u327a\0\u32c1\0\u3308\0\u334f\0\u1677"+
    "\0\u05d3\0\u3396\0\u16be\0\u05d3\0\u33dd\0\u1705\0\u174c\0\u3424"+
    "\0\u346b\0\u34b2\0\u17da\0\u05d3\0\u34f9\0\u1821\0\u05d3\0\u3540"+
    "\0\u05d3\0\u3587\0\u35ce\0\u05d3\0\u3615\0\u05d3\0\u05d3\0\u365c"+
    "\0\u36a3\0\u05d3\0\u36ea\0\u3731\0\u18f6\0\u3778\0\u37bf\0\u3806"+
    "\0\u384d\0\u3894\0\u38db\0\u3922\0\u1f9e\0\u1fe5\0\u3969\0\u39b0"+
    "\0\u39f7\0\u3a3e\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8"+
    "\0\u3c2f\0\u3c76\0\u3cbd\0\u0852\0\u3d04\0\u3d4b\0\u3d92\0\u3dd9"+
    "\0\u0852\0\u3e20\0\u3e67\0\u3eae\0\u3ef5\0\u3f3c\0\u3f83\0\u3fca"+
    "\0\u0852\0\u4011\0\u4058\0\u409f\0\u40e6\0\u412d\0\u4174\0\u41bb"+
    "\0\u4202\0\u4249\0\u4290\0\u42d7\0\u431e\0\u4365\0\u43ac\0\u43f3"+
    "\0\u443a\0\u4481\0\u0852\0\u44c8\0\u450f\0\u0852\0\u4556\0\u459d"+
    "\0\u45e4\0\u462b\0\u4672\0\u46b9\0\u4700\0\u4747\0\u478e\0\u47d5"+
    "\0\u481c\0\u4863\0\u48aa\0\u48f1\0\u4938\0\u497f\0\u49c6\0\u05d3"+
    "\0\u1207\0\u1323\0\u4a0d\0\u4a54\0\u4a9b\0\u05d3\0\u4ae2\0\u05d3"+
    "\0\u4b29\0\u4b70\0\u05d3\0\u4bb7\0\u1793\0\u4bfe\0\u05d3\0\u05d3"+
    "\0\u4c45\0\u4c8c\0\u4cd3\0\u4d1a\0\u0852\0\u4d61\0\u4da8\0\u4def"+
    "\0\u4e36\0\u4e7d\0\u0852\0\u4ec4\0\u4f0b\0\u0852\0\u4f52\0\u4f99"+
    "\0\u4fe0\0\u5027\0\u506e\0\u50b5\0\u50fc\0\u5143\0\u518a\0\u3ba1"+
    "\0\u51d1\0\u5218\0\u525f\0\u52a6\0\u52ed\0\u0852\0\u5334\0\u537b"+
    "\0\u53c2\0\u5409\0\u5450\0\u0852\0\u5497\0\u54de\0\u5525\0\u0852"+
    "\0\u556c\0\u0852\0\u55b3\0\u55fa\0\u5641\0\u5688\0\u56cf\0\u5716"+
    "\0\u575d\0\u57a4\0\u57eb\0\u5832\0\u5879\0\u58c0\0\u0852\0\u0852"+
    "\0\u5907\0\u594e\0\u5995\0\u59dc\0\u5a23\0\u5a6a\0\u5ab1\0\u5af8"+
    "\0\u5b3f\0\u5b86\0\u5bcd\0\u5c14\0\u5c5b\0\u5ca2\0\u5ce9\0\u5d30"+
    "\0\u5d77\0\u5dbe\0\u5e05\0\u5e4c\0\u5e93\0\u5eda\0\u5f21\0\u05d3"+
    "\0\u5f68\0\u5faf\0\u5ff6\0\u05d3\0\u603d\0\u6084\0\u60cb\0\u6112"+
    "\0\u0852\0\u6159\0\u61a0\0\u0852\0\u61e7\0\u0852\0\u622e\0\u6275"+
    "\0\u0852\0\u62bc\0\u05d3\0\u6303\0\u634a\0\u6391\0\u63d8\0\u641f"+
    "\0\u6466\0\u0852\0\u64ad\0\u64f4\0\u653b\0\u6582\0\u0852\0\u0852"+
    "\0\u0852\0\u0852\0\u0852\0\u0852\0\u65c9\0\u6610\0\u6657\0\u669e"+
    "\0\u66e5\0\u672c\0\u0852\0\u6773\0\u67ba\0\u0852\0\u6801\0\u6848"+
    "\0\u688f\0\u68d6\0\u0852\0\u0852\0\u0852\0\u691d\0\u6964\0\u69ab"+
    "\0\u69f2\0\u6a39\0\u6a80\0\u6ac7\0\u6b0e\0\u6b55\0\u05d3\0\u6b9c"+
    "\0\u6be3\0\u6c2a\0\u6c71\0\u6cb8\0\u6cff\0\u6d46\0\u6d8d\0\u6dd4"+
    "\0\u6e1b\0\u6e62\0\u6ea9\0\u6ef0\0\u6f37\0\u6f7e\0\u6fc5\0\u0852"+
    "\0\u700c\0\u7053\0\u709a\0\u70e1\0\u7128\0\u716f\0\u0852\0\u71b6"+
    "\0\u71fd\0\u7244\0\u728b\0\u72d2\0\u7319\0\u0852\0\u0852\0\u7360"+
    "\0\u73a7\0\u73ee\0\u7435\0\u747c\0\u74c3\0\u750a\0\u0852\0\u0852"+
    "\0\u0852\0\u7551\0\u7598\0\u75df\0\u7626\0\u766d\0\u76b4\0\u76fb"+
    "\0\u7742\0\u7789\0\u77d0\0\u7817\0\u785e\0\u78a5\0\u78ec\0\u7933"+
    "\0\u0852\0\u797a\0\u79c1\0\u7a08\0\u7a4f\0\u0852\0\u0852\0\u7a96"+
    "\0\u7add\0\u05d3\0\u7b24\0\u7b6b\0\u7bb2\0\u7bf9\0\u0852\0\u0852"+
    "\0\u7c40\0\u7c87\0\u7cce\0\u7d15\0\u7d5c\0\u7da3\0\u7dea\0\u0852"+
    "\0\u7e31\0\u7e78\0\u7ebf\0\u7f06\0\u7f4d\0\u0852\0\u7f94\0\u7fdb"+
    "\0\u8022\0\u8069\0\u80b0\0\u80f7\0\u813e\0\u8185\0\u81cc\0\u0852"+
    "\0\u0852\0\u8213\0\u825a\0\u0852\0\u82a1\0\u0852\0\u82e8\0\u832f"+
    "\0\u8376\0\u83bd\0\u8404\0\u844b\0\u0852\0\u8492\0\u84d9\0\u8520"+
    "\0\u0852\0\u8567\0\u85ae\0\u85f5\0\u863c\0\u8683\0\u86ca\0\u0852"+
    "\0\u8711\0\u8758\0\u0852\0\u879f\0\u0852\0\u0852\0\u87e6\0\u882d"+
    "\0\u0852\0\u8874\0\u88bb\0\u0852\0\u8902\0\u8949\0\u8990\0\u89d7"+
    "\0\u0852\0\u0852\0\u8a1e\0\u8a65\0\u0852\0\u0852\0\u8aac\0\u8af3"+
    "\0\u8b3a\0\u0852\0\u8711\0\u8b81\0\u8bc8\0\u8c0f\0\u8c56\0\u8c9d"+
    "\0\u8ce4\0\u8d2b\0\u0852\0\u0852\0\u0852\0\u8d72\0\u8db9\0\u8e00"+
    "\0\u0852\0\u8e47\0\u8e8e\0\u8ed5\0\u8f1c\0\u0852\0\u8f63\0\u8faa"+
    "\0\u8ff1\0\u9038\0\u907f\0\u90c6\0\u910d\0\u9154\0\u919b\0\u91e2"+
    "\0\u9229\0\u9270\0\u05d3\0\u92b7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[676];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\33\24\1\25\53\24\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\27\2\37\1\26\2\40"+
    "\1\41\1\42\1\40\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\55\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\41\1\70\1\63\2\71\1\67\2\72\2\73"+
    "\1\70\1\74\1\75\1\76\1\37\1\77\1\100\1\101"+
    "\1\102\2\37\1\103\1\104\1\105\1\37\1\106\1\37"+
    "\1\107\2\41\1\110\22\111\1\112\1\113\1\114\1\111"+
    "\1\115\60\111\22\116\1\117\1\116\1\120\1\113\1\121"+
    "\60\116\4\122\1\123\21\122\1\124\60\122\47\125\1\126"+
    "\5\125\1\126\31\125\15\127\1\130\3\127\1\131\1\132"+
    "\1\127\1\133\1\127\1\134\60\127\3\135\1\136\2\135"+
    "\3\136\1\135\2\136\26\135\6\136\1\135\16\136\2\135"+
    "\4\136\1\135\1\136\1\135\3\136\4\135\3\26\1\137"+
    "\2\26\3\137\1\26\2\137\5\26\1\0\20\26\6\137"+
    "\1\26\16\137\2\26\4\137\1\26\1\137\1\26\3\137"+
    "\4\26\3\140\1\141\2\140\3\141\2\140\1\141\1\140"+
    "\1\142\3\140\1\143\20\140\6\141\1\140\16\141\2\140"+
    "\4\141\1\140\1\141\1\140\3\141\4\140\3\144\1\145"+
    "\2\144\3\145\1\144\2\145\26\144\6\145\1\144\16\145"+
    "\2\144\4\145\1\144\1\145\1\144\3\145\4\144\3\26"+
    "\1\146\2\26\3\146\1\26\2\146\5\26\1\0\20\26"+
    "\6\146\1\26\16\146\2\26\4\146\1\26\1\146\1\26"+
    "\3\146\4\26\3\147\1\150\1\151\1\147\3\150\1\147"+
    "\2\150\1\147\2\40\2\147\1\40\20\147\6\150\1\147"+
    "\16\150\2\147\4\150\1\147\1\150\1\147\3\150\4\147"+
    "\1\26\1\152\1\153\1\37\1\153\1\154\3\37\1\152"+
    "\2\37\1\26\2\155\2\153\1\155\1\156\1\153\1\155"+
    "\15\153\6\37\1\153\16\37\1\155\1\153\4\37\1\153"+
    "\1\37\1\153\3\37\1\153\1\41\1\157\1\155\34\160"+
    "\1\161\52\160\34\162\1\163\52\162\15\164\1\165\3\164"+
    "\1\166\11\164\1\167\2\164\1\170\31\164\1\171\16\164"+
    "\15\172\2\173\2\172\1\173\65\172\107\174\33\24\1\175"+
    "\106\24\1\0\2\24\1\176\10\24\4\0\1\24\1\177"+
    "\2\24\1\0\1\24\1\0\6\24\1\200\6\24\1\0"+
    "\7\24\110\0\1\27\1\201\1\202\1\0\1\27\3\0"+
    "\1\27\76\0\1\201\3\0\1\201\3\0\1\201\15\0"+
    "\1\203\60\0\1\37\1\0\1\37\1\0\1\37\1\204"+
    "\6\37\25\0\3\37\1\205\1\37\1\206\1\0\4\37"+
    "\1\206\5\37\1\207\3\37\2\0\3\37\1\210\1\0"+
    "\1\211\1\0\3\37\10\0\1\203\22\0\1\203\1\212"+
    "\57\0\1\27\1\201\1\202\1\0\1\27\1\213\1\0"+
    "\1\214\1\27\76\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\1\62\5\37\1\0\16\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\1\215\1\37\1\216\3\37\1\0\5\37"+
    "\2\217\5\37\1\220\1\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\6\0\1\44\7\0\1\221\6\0\1\37\1\222\4\37"+
    "\1\0\1\37\1\222\14\37\1\223\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\16\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\21\0\2\40\2\0\1\40\70\0"+
    "\1\224\2\0\3\224\1\0\2\224\26\0\6\224\1\0"+
    "\16\224\2\0\4\224\1\0\1\224\1\0\3\224\4\0"+
    "\22\225\1\226\1\227\1\230\1\225\1\231\60\225\27\0"+
    "\1\232\1\203\105\0\1\203\1\232\105\0\1\203\1\0"+
    "\1\203\104\0\1\232\106\0\2\203\2\0\1\233\1\0"+
    "\1\234\100\0\1\203\106\0\1\203\4\0\1\235\1\110"+
    "\100\0\1\203\1\236\105\0\1\203\7\0\1\203\76\0"+
    "\1\203\10\0\1\203\47\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\1\37\1\237\4\37\1\0\1\37\1\237"+
    "\14\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\240\1\0\10\37\25\0\6\37\1\0"+
    "\16\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\3\37\1\241\4\37\25\0"+
    "\1\37\1\242\1\37\1\243\2\37\1\0\1\37\1\242"+
    "\2\244\12\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\245\1\0\10\37\25\0\2\37"+
    "\1\246\3\37\1\0\14\37\1\247\1\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\250"+
    "\1\0\10\37\25\0\1\251\5\37\1\0\5\37\2\252"+
    "\7\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\1\253\1\37"+
    "\1\254\3\37\1\0\12\37\1\255\3\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\25\0\1\37\1\256\4\37\1\0\1\37"+
    "\1\256\13\37\1\257\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\260\1\0\10\37\25\0"+
    "\6\37\1\0\1\261\10\37\1\261\4\37\2\0\1\37"+
    "\1\262\2\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\2\37\1\263\5\37\25\0\3\37"+
    "\1\264\2\37\1\0\2\37\2\265\12\37\2\0\3\37"+
    "\1\266\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\1\37\1\267\1\270\3\37"+
    "\1\0\1\37\1\267\12\37\1\271\1\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\25\0\6\37\1\0\5\37\2\272\7\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\1\273\5\37\1\0"+
    "\12\37\1\274\3\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\25\0"+
    "\3\37\1\275\2\37\1\0\2\37\2\276\12\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\4\0\24\223\1\277"+
    "\42\223\1\227\17\223\30\0\1\300\57\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\6\37\1\0\5\37\2\301"+
    "\7\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\6\37\1\0"+
    "\15\37\1\302\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\101\0\1\303\12\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\2\37\1\304\3\37\1\0\16\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\13\0\1\305\1\306\5\0"+
    "\1\307\23\0\1\310\1\311\1\312\1\0\1\313\3\0"+
    "\1\311\2\314\1\0\2\315\5\0\1\316\22\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\6\37\1\0\16\37"+
    "\2\0\4\37\1\0\1\37\1\0\1\37\1\317\1\37"+
    "\4\0\22\111\1\320\1\0\1\321\1\111\1\322\63\111"+
    "\1\323\2\111\3\323\1\111\1\324\1\323\6\111\1\325"+
    "\1\326\1\321\1\111\1\327\13\111\6\323\1\111\16\323"+
    "\2\111\4\323\1\111\1\323\1\111\3\323\135\111\1\330"+
    "\1\326\1\321\1\111\1\331\60\111\22\116\1\332\1\116"+
    "\1\333\1\0\1\334\63\116\1\323\2\116\3\323\1\116"+
    "\1\335\1\323\6\116\1\336\1\116\1\333\1\337\1\327"+
    "\13\116\6\323\1\116\16\323\2\116\4\323\1\116\1\323"+
    "\1\116\3\323\135\116\1\330\1\116\1\333\1\337\1\340"+
    "\60\116\30\0\1\341\100\0\1\330\147\0\1\342\23\0"+
    "\15\127\1\0\3\127\1\0\1\343\1\127\1\344\1\127"+
    "\1\345\63\127\1\346\2\127\3\346\1\127\2\346\1\127"+
    "\1\0\3\127\1\347\1\343\1\127\1\344\1\127\1\345"+
    "\13\127\6\346\1\127\16\346\2\127\4\346\1\127\1\346"+
    "\1\127\3\346\7\127\1\346\2\127\3\346\1\127\2\346"+
    "\1\127\1\0\3\127\1\0\1\343\1\127\1\344\1\127"+
    "\1\345\13\127\6\346\1\127\16\346\2\127\4\346\1\127"+
    "\1\346\1\127\3\346\4\127\3\0\1\323\2\0\3\323"+
    "\1\0\2\323\12\0\1\327\13\0\6\323\1\0\16\323"+
    "\2\0\4\323\1\0\1\323\1\0\3\323\4\0\107\127"+
    "\1\0\1\350\1\0\1\350\1\0\10\350\1\351\2\0"+
    "\1\352\1\351\20\0\6\350\1\0\16\350\2\0\4\350"+
    "\1\0\1\350\1\0\3\350\5\0\1\353\1\0\1\353"+
    "\1\0\10\353\1\354\2\0\1\355\1\354\20\0\6\353"+
    "\1\0\16\353\2\0\4\353\1\0\1\353\1\0\3\353"+
    "\4\0\15\356\1\143\3\356\1\143\66\356\1\357\1\356"+
    "\1\357\1\356\5\357\1\356\1\357\1\356\1\0\2\356"+
    "\1\360\1\0\20\356\6\357\1\356\16\357\2\356\4\357"+
    "\1\356\1\357\1\356\3\357\7\356\1\361\2\356\3\361"+
    "\1\356\1\362\1\361\1\356\1\143\3\356\1\143\20\356"+
    "\6\361\1\356\16\361\2\356\4\361\1\356\1\361\1\356"+
    "\3\361\4\356\1\0\1\363\1\0\1\363\1\0\10\363"+
    "\1\364\2\0\1\365\1\364\20\0\6\363\1\0\16\363"+
    "\2\0\4\363\1\0\1\363\1\0\3\363\5\0\1\366"+
    "\1\0\1\366\1\0\10\366\1\367\2\0\1\370\1\367"+
    "\20\0\6\366\1\0\16\366\2\0\4\366\1\0\1\366"+
    "\1\0\3\366\5\0\1\150\1\0\1\150\1\0\10\150"+
    "\25\0\6\150\1\0\16\150\2\0\4\150\1\0\1\150"+
    "\1\0\3\150\34\0\1\371\57\0\1\152\3\0\1\152"+
    "\3\0\1\152\76\0\1\152\3\0\1\152\1\213\2\0"+
    "\1\152\100\0\1\372\2\0\3\372\1\0\2\372\26\0"+
    "\6\372\1\0\16\372\2\0\4\372\1\0\1\372\1\0"+
    "\3\372\4\0\34\160\1\373\106\160\1\373\1\374\51\160"+
    "\34\162\1\375\106\162\1\375\1\376\51\162\15\164\1\166"+
    "\3\164\1\166\14\164\1\166\31\164\1\166\16\164\21\0"+
    "\1\377\65\0\15\164\1\166\3\164\1\166\13\164\1\u0100"+
    "\1\166\31\164\1\166\16\164\30\0\1\u0101\73\0\2\173"+
    "\2\0\1\173\65\0\33\24\1\0\2\24\1\0\10\24"+
    "\4\0\1\24\1\0\2\24\1\0\1\24\1\0\6\24"+
    "\1\0\6\24\1\0\7\24\27\0\1\u0102\126\0\1\u0103"+
    "\5\0\1\u0103\60\0\1\u0102\30\0\2\u0104\26\0\1\201"+
    "\1\0\1\202\1\0\1\201\3\0\1\201\76\0\1\152"+
    "\2\0\1\u0105\1\152\3\0\1\152\17\0\1\u0105\56\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\6\37\1\0"+
    "\1\u0106\4\37\2\u0107\2\37\1\u0106\4\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\25\0\4\37\1\u0108\1\37\1\0\16\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\6\37\1\0\15\37"+
    "\1\u0109\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\6\37\1\0"+
    "\2\37\2\u010a\12\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\25\0"+
    "\6\37\1\0\7\37\2\u010b\5\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\2\37\1\u010c\3\37\1\0\16\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\u010d\1\0"+
    "\1\u010d\1\0\1\u010d\1\0\3\u010d\32\0\1\u010d\1\0"+
    "\2\u010d\5\0\1\u010d\36\0\1\u010e\3\0\1\u010e\76\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\1\37\1\u010f"+
    "\4\37\1\0\1\37\1\u010f\14\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\12\37\1\u0110\3\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\3\37\1\u0111\2\37\1\0"+
    "\16\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\3\37\1\u0112"+
    "\2\37\1\0\16\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\37\0\1\u0113\54\0\1\37\1\0\1\u0114\1\0"+
    "\10\37\25\0\6\37\1\0\16\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\224\1\0\1\224\1\0"+
    "\10\224\25\0\6\224\1\0\16\224\2\0\4\224\1\0"+
    "\1\224\1\0\3\224\4\0\3\225\1\0\2\225\3\0"+
    "\2\225\1\0\6\225\1\226\1\227\1\230\1\225\1\0"+
    "\13\225\6\0\1\225\16\0\2\225\4\0\1\225\1\0"+
    "\1\225\3\0\135\225\1\0\1\227\1\230\1\225\1\231"+
    "\60\225\27\0\1\203\3\0\1\u0115\126\0\2\u0116\66\0"+
    "\1\u0117\67\0\2\236\2\0\1\236\66\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\6\37\1\0\1\u0118\10\37"+
    "\1\u0118\4\37\2\0\4\37\1\0\1\37\1\0\2\37"+
    "\1\u0119\5\0\1\37\1\0\1\37\1\0\10\37\25\0"+
    "\6\37\1\0\2\37\2\u011a\12\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\1\37\1\u011b\4\37\1\0\1\37\1\u011b"+
    "\14\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\4\37\1\237"+
    "\1\37\1\0\16\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\25\0"+
    "\6\37\1\0\16\37\2\0\1\37\1\u011c\2\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\16\37\2\0\3\37\1\u011d"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\25\0\6\37\1\0\12\37\1\u011e\3\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\2\37\1\u011f\5\37\25\0\5\37"+
    "\1\u0120\1\0\4\37\1\u0120\11\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\u0121\1\0"+
    "\10\37\25\0\6\37\1\0\16\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\3\37\1\u0122\2\37\1\0\16\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\6\37\1\0\1\u0123\1\37"+
    "\2\u0124\5\37\1\u0123\4\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\1\u0125\1\37\1\u0126\3\37\1\0\16\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\2\37\1\u0127\3\37\1\0"+
    "\14\37\1\u0128\1\37\2\0\1\u0129\3\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\1\37\1\u012a\4\37\1\0\1\37\1\u012a\14\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\6\37\1\0\12\37"+
    "\1\u012b\3\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\2\37"+
    "\1\u012c\3\37\1\0\16\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\6\37\1\0\5\37\2\u012d\7\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\25\0\5\37\1\u012e\1\0\1\u012f\1\37"+
    "\2\u0130\1\u012e\4\37\1\u012f\4\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\2\37\2\u0131\12\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\6\37\1\0\7\37\2\u0132"+
    "\5\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\1\u0133\5\37"+
    "\1\0\5\37\2\u0134\7\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\1\37\1\u0135\4\37\1\0\1\37\1\u0135\14\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\3\37\1\u0136\4\37\25\0\6\37"+
    "\1\0\16\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\6\37"+
    "\1\0\2\37\2\u0137\12\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\6\37\1\0\1\u0138\10\37\1\u0138\4\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\1\u0139\5\37\1\0\16\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\6\37\1\0\2\37"+
    "\2\u013a\12\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\u013b\1\0\10\37\25\0\6\37"+
    "\1\0\16\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\4\0\107\223\15\0\2\300\2\0\1\300\66\0\1\37"+
    "\1\0\1\u013c\1\0\10\37\25\0\6\37\1\0\16\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\6\37\1\0\5\37"+
    "\2\u013d\7\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\1\37"+
    "\1\u013e\4\37\1\0\1\37\1\u013e\14\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\67\0\1\u013f\65\0\1\u0140"+
    "\13\0\2\u0141\37\0\1\u0142\101\0\1\u0143\146\0\1\u0144"+
    "\6\0\1\u0144\76\0\1\u0145\115\0\1\u0146\10\0\1\u0146"+
    "\71\0\1\u0147\106\0\1\u0148\42\0\1\37\1\0\1\37"+
    "\1\0\2\37\1\u0149\5\37\25\0\3\37\1\u014a\1\u014b"+
    "\1\u014c\1\0\4\37\1\u014c\5\37\1\u014d\2\37\1\u014e"+
    "\2\0\3\37\1\u014f\1\0\1\37\1\0\3\37\4\0"+
    "\3\111\1\0\2\111\3\0\2\111\1\0\6\111\1\325"+
    "\1\326\1\321\1\111\1\0\13\111\6\0\1\111\16\0"+
    "\2\111\4\0\1\111\1\0\1\111\3\0\26\111\1\0"+
    "\1\326\1\321\1\111\1\331\60\111\1\0\1\323\1\0"+
    "\1\323\1\0\10\323\25\0\6\323\1\0\16\323\2\0"+
    "\4\323\1\0\1\323\1\0\3\323\1\0\1\u0150\2\0"+
    "\1\111\1\324\1\111\1\324\1\111\10\324\5\111\1\320"+
    "\1\0\1\321\1\111\1\322\13\111\6\324\1\111\16\324"+
    "\2\111\4\324\1\111\1\324\1\111\3\324\1\111\1\u0151"+
    "\2\111\3\116\1\0\2\116\3\0\2\116\1\0\6\116"+
    "\1\336\1\116\1\333\1\337\1\0\13\116\6\0\1\116"+
    "\16\0\2\116\4\0\1\116\1\0\1\116\3\0\26\116"+
    "\1\0\1\116\1\333\1\337\1\340\61\116\1\335\1\116"+
    "\1\335\1\116\10\335\5\116\1\332\1\116\1\333\1\0"+
    "\1\334\13\116\6\335\1\116\16\335\2\116\4\335\1\116"+
    "\1\335\1\116\3\335\1\116\1\u0152\2\116\44\0\1\u0153"+
    "\42\0\3\127\1\u0154\2\127\3\u0154\2\127\1\u0154\1\127"+
    "\1\0\3\127\1\0\1\u0155\1\127\1\344\1\127\1\u0156"+
    "\13\127\6\u0154\1\127\16\u0154\2\127\4\u0154\1\127\1\u0154"+
    "\1\127\3\u0154\21\127\1\0\3\127\1\0\102\127\1\0"+
    "\3\127\1\0\1\u0156\1\127\1\344\1\127\1\u0157\61\127"+
    "\1\346\1\127\1\346\1\127\10\346\1\u0158\2\127\1\u0159"+
    "\1\u0158\1\343\1\127\1\344\1\127\1\345\13\127\6\346"+
    "\1\127\16\346\2\127\4\346\1\127\1\346\1\127\3\346"+
    "\4\127\3\0\1\u015a\2\0\3\u015a\1\0\2\u015a\26\0"+
    "\6\u015a\1\0\16\u015a\2\0\4\u015a\1\0\1\u015a\1\0"+
    "\3\u015a\21\0\1\351\3\0\1\351\102\0\1\354\3\0"+
    "\1\354\65\0\15\356\1\0\3\356\1\0\66\356\1\361"+
    "\1\356\1\361\1\356\5\361\1\362\1\361\1\362\1\u015b"+
    "\2\356\1\u015c\1\u015b\20\356\6\361\1\356\16\361\2\356"+
    "\4\361\1\356\1\361\1\356\3\361\5\356\1\362\1\356"+
    "\1\362\1\356\10\362\1\u015d\2\356\1\u015e\1\u015d\20\356"+
    "\6\362\1\356\16\362\2\356\4\362\1\356\1\362\1\356"+
    "\3\362\4\356\15\0\1\364\3\0\1\364\102\0\1\367"+
    "\3\0\1\367\66\0\1\372\1\0\1\372\1\0\10\372"+
    "\25\0\6\372\1\0\16\372\2\0\4\372\1\0\1\372"+
    "\1\0\3\372\4\0\34\160\1\373\1\u015f\51\160\34\162"+
    "\1\375\1\u0160\51\162\15\164\1\166\3\164\1\166\14\164"+
    "\1\166\14\164\2\u0161\13\164\1\166\16\164\15\0\2\u0101"+
    "\2\0\1\u0101\130\0\1\u0162\6\0\1\u0162\122\0\1\u0163"+
    "\21\0\1\37\1\0\1\u0164\1\0\10\37\25\0\6\37"+
    "\1\0\16\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\6\37"+
    "\1\0\1\u0165\10\37\1\u0165\4\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\2\37\1\u0166\5\37\25\0\4\37\1\u0167\1\37\1\0"+
    "\2\37\2\u0168\1\37\2\u0169\7\37\2\0\1\37\1\u016a"+
    "\2\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\1\u016b\5\37\1\0\16\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\u016c\1\0\10\37\25\0\6\37\1\0\16\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\6\37\1\0\1\u016d"+
    "\10\37\1\u016d\4\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\25\0"+
    "\6\37\1\0\12\37\1\u016e\3\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\u016f\1\0"+
    "\10\37\25\0\6\37\1\0\16\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\2\37\2\u0170\12\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\2\37\1\u0171\3\37\1\0"+
    "\16\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\5\37\1\u0172"+
    "\1\0\4\37\1\u0172\11\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\37\0\1\u0115\54\0\1\37\1\0\1\37"+
    "\1\0\10\37\25\0\2\37\1\u0173\3\37\1\0\16\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\7\0\1\u0174"+
    "\2\0\3\u0174\1\0\2\u0174\2\0\1\u0115\4\0\1\u0175"+
    "\16\0\6\u0174\1\0\16\u0174\1\u0176\1\0\4\u0174\1\0"+
    "\1\u0174\1\0\3\u0174\53\0\1\u0177\5\0\1\u0177\46\0"+
    "\2\u0178\2\0\1\u0178\66\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\14\37\1\u0179\1\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\6\37\1\0\14\37\1\u017a"+
    "\1\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\6\37\1\0"+
    "\1\u017b\10\37\1\u017b\4\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\2\37\1\u017c\3\37\1\0\16\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u017d"+
    "\1\0\10\37\25\0\6\37\1\0\16\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\25\0\6\37\1\0\12\37\1\u017e\3\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\2\37\1\u017f\3\37"+
    "\1\0\16\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\6\37"+
    "\1\0\12\37\1\u0180\3\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\6\37\1\0\1\u0181\1\37\2\u0182\5\37\1\u0181"+
    "\4\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\5\37\1\u0183"+
    "\1\0\4\37\1\u0183\11\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\u0184\1\0\10\37"+
    "\25\0\6\37\1\0\16\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\3\37\1\u0185\2\37\1\0\16\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\25\0\6\37\1\0\2\37\2\u0186\12\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\6\37\1\0\5\37"+
    "\2\u0187\7\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\u0188\1\0\10\37\25\0\6\37"+
    "\1\0\16\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\1\u0189"+
    "\5\37\1\0\16\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\2\37\1\u018a"+
    "\5\37\25\0\6\37\1\0\16\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\1\u018b\10\37\1\u018b\4\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\6\37\1\0\1\u018c"+
    "\10\37\1\u018c\4\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\25\0"+
    "\6\37\1\0\12\37\1\u018d\3\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\u018e\1\0"+
    "\10\37\25\0\6\37\1\0\16\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\1\u018f\10\37\1\u018f\4\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\u0190\1\0\10\37\25\0\6\37\1\0\16\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\6\37\1\0\12\37"+
    "\1\u0191\3\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\6\37"+
    "\1\0\1\u0192\10\37\1\u0192\4\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\3\37\1\u0193\2\37\1\0\16\37\2\0"+
    "\4\37\1\0\1\u0194\1\0\3\37\5\0\1\37\1\0"+
    "\1\u0195\1\0\10\37\25\0\6\37\1\0\16\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\6\37\1\0\12\37\1\u0196"+
    "\3\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\6\37\1\0"+
    "\1\u0197\10\37\1\u0197\4\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\1\u0198\5\37\1\0\16\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\3\37\1\u0199\4\37\25\0\6\37\1\0\16\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\u019a\1\0\10\37\25\0\6\37\1\0\16\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\6\37\1\0\12\37\1\u019b"+
    "\3\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\6\37\1\0"+
    "\12\37\1\u019c\3\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\46\0\1\u019d\106\0\1\u019e\111\0\1\u019f\141\0"+
    "\1\u01a0\52\0\1\u01a1\105\0\1\u01a2\6\0\1\u01a2\121\0"+
    "\1\u01a3\64\0\1\u01a4\6\0\1\u01a4\105\0\1\u01a5\10\0"+
    "\1\u01a5\77\0\2\u01a6\33\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\5\37\2\u01a7\5\37\1\u01a8"+
    "\1\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\2\37\1\u01a9"+
    "\3\37\1\0\16\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\25\0"+
    "\6\37\1\0\5\37\2\u01aa\7\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\12\37\1\u01ab\3\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\6\37\1\0\5\37\2\u01ac"+
    "\7\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\2\37\1\u01ad"+
    "\3\37\1\0\16\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u01ae\1\0\10\37\25\0"+
    "\6\37\1\0\16\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\57\0\2\u01af\33\0\1\u0154\1\0\1\u0154\1\0"+
    "\10\u0154\25\0\6\u0154\1\0\16\u0154\2\0\4\u0154\1\0"+
    "\1\u0154\1\0\3\u0154\1\0\1\u01b0\2\0\3\127\1\0"+
    "\2\127\3\0\2\127\1\0\1\127\1\0\3\127\1\0"+
    "\1\u0155\1\127\1\344\1\127\1\0\13\127\6\0\1\127"+
    "\16\0\2\127\4\0\1\127\1\0\1\127\3\0\21\127"+
    "\1\0\3\127\2\0\1\127\1\344\1\127\1\u0157\75\127"+
    "\1\u0158\3\127\1\u0158\1\343\1\127\1\344\1\127\1\345"+
    "\60\127\1\0\1\u015a\1\0\1\u015a\1\0\10\u015a\1\u0158"+
    "\2\0\1\u01b1\1\u0158\20\0\6\u015a\1\0\16\u015a\2\0"+
    "\4\u015a\1\0\1\u015a\1\0\3\u015a\4\0\15\356\1\u015b"+
    "\3\356\1\u015b\102\356\1\u015d\3\356\1\u015d\65\356\15\164"+
    "\1\166\3\164\1\166\14\164\1\166\10\164\1\u01b2\5\164"+
    "\1\u01b2\12\164\1\166\16\164\56\0\2\u01b3\107\0\2\u01b4"+
    "\26\0\1\37\1\0\1\37\1\0\10\37\25\0\3\37"+
    "\1\u01b5\2\37\1\0\16\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\1\u01b6\5\37\1\0\16\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\u01b7\1\0"+
    "\10\37\25\0\6\37\1\0\16\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\16\37\2\0\1\37\1\u01b8"+
    "\2\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\2\37\1\u01b9\5\37\25\0\6\37\1\0"+
    "\16\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\6\37\1\0"+
    "\15\37\1\u01ba\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\6\37"+
    "\1\0\5\37\2\u01bb\7\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\6\37\1\0\16\37\2\0\1\u01bc\3\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\2\37\1\u01bd\3\37\1\0\16\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\u01be\1\0\10\37\25\0\6\37\1\0\16\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\6\37\1\0\12\37\1\u01bf"+
    "\3\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\6\37\1\0"+
    "\1\u01c0\10\37\1\u01c0\4\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\6\37\1\0\16\37\2\0\2\37\1\u01c1\1\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\u0174\1\0\1\u0174"+
    "\1\0\10\u0174\1\u01c2\3\0\1\u01c3\20\0\6\u0174\1\0"+
    "\16\u0174\2\0\4\u0174\1\0\1\u0174\1\0\3\u0174\7\0"+
    "\1\u01c4\2\0\3\u01c4\1\0\2\u01c4\26\0\6\u01c4\1\0"+
    "\16\u01c4\2\0\4\u01c4\1\0\1\u01c4\1\0\3\u01c4\7\0"+
    "\1\u01c5\2\0\3\u01c5\1\0\2\u01c5\26\0\6\u01c5\1\0"+
    "\16\u01c5\2\0\4\u01c5\1\0\1\u01c5\1\0\3\u01c5\47\0"+
    "\1\u01c6\6\0\1\u01c6\35\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\1\37\1\u01c7\4\37\1\0\1\37\1\u01c7"+
    "\14\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\6\37\1\0"+
    "\5\37\2\u01c8\7\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\25\0"+
    "\1\37\1\u01c9\4\37\1\0\1\37\1\u01c9\14\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\6\37\1\0\16\37\2\0"+
    "\1\u01ca\3\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\6\37\1\0\2\37"+
    "\2\u01cb\12\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\6\37"+
    "\1\0\14\37\1\u01cc\1\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\2\37\1\u01cd\3\37\1\0\16\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\25\0\6\37\1\0\5\37\2\u01ce\7\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\6\37\1\0\1\u01cf"+
    "\10\37\1\u01cf\4\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\25\0"+
    "\6\37\1\0\15\37\1\u01d0\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\u01d1\1\0\10\37"+
    "\25\0\6\37\1\0\16\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\6\37\1\0\2\37\2\u01d2\12\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\25\0\6\37\1\0\1\u01d3\10\37\1\u01d3"+
    "\4\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\6\37\1\0"+
    "\16\37\2\0\1\37\1\u01d4\2\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\25\0"+
    "\6\37\1\0\5\37\2\u01d5\7\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\5\37\1\u01d6\1\0\4\37\1\u01d6\11\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\6\37\1\0\14\37"+
    "\1\u01d7\1\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\1\37"+
    "\1\u01d8\4\37\1\0\1\37\1\u01d8\14\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u01d9"+
    "\1\0\10\37\25\0\2\37\1\u01da\3\37\1\0\16\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\6\37\1\0\1\u01db"+
    "\10\37\1\u01db\4\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u01dc\1\0\10\37\25\0"+
    "\6\37\1\0\16\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u01dd\1\0\10\37\25\0"+
    "\6\37\1\0\16\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\25\0"+
    "\6\37\1\0\1\u01de\10\37\1\u01de\4\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\25\0\2\37\1\u01df\3\37\1\0\16\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\3\37\1\u01e0\2\37"+
    "\1\0\16\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\6\37"+
    "\1\0\5\37\2\u01e1\7\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\2\37\1\u01e2\3\37\1\0\16\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\25\0\6\37\1\0\1\u01e3\10\37\1\u01e3"+
    "\4\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\4\37\1\u01e4"+
    "\1\37\1\0\16\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u01e5\1\0\10\37\25\0"+
    "\6\37\1\0\16\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\50\0\1\u01e6\125\0\1\u01e7\67\0\1\u01e8\45\0"+
    "\1\u01e9\166\0\1\u01ea\67\0\1\u01eb\52\0\1\u01ec\154\0"+
    "\2\u01ed\32\0\1\u01ee\12\0\1\u01ea\31\0\1\u01ef\41\0"+
    "\1\u01e6\104\0\1\37\1\0\1\37\1\0\10\37\25\0"+
    "\6\37\1\0\12\37\1\u01f0\3\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\3\37\1\u01f1\2\37\1\0\16\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\6\37\1\0\16\37\2\0"+
    "\3\37\1\u01f2\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\1\37\1\u01f3\4\37"+
    "\1\0\1\37\1\u01f3\14\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\2\37\1\u01f4\3\37\1\0\16\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\25\0\3\37\1\u01f5\2\37\1\0\16\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\6\37\1\0\12\37"+
    "\1\u01f6\3\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\6\37"+
    "\1\0\1\u01f7\10\37\1\u01f7\4\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\57\0\2\u01f8\47\0\1\u0158\3\0"+
    "\1\u0158\65\0\15\164\1\166\3\164\1\166\14\164\1\166"+
    "\4\164\1\u01f9\6\164\1\u01f9\15\164\1\166\16\164\60\0"+
    "\2\u01fa\26\0\1\37\1\0\1\37\1\0\10\37\25\0"+
    "\4\37\1\u01fb\1\37\1\0\16\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\1\37\1\u01fc\4\37\1\0\1\37\1\u01fc"+
    "\14\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\5\37\1\u01fd"+
    "\1\0\4\37\1\u01fd\11\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\6\37\1\0\5\37\2\u01fe\7\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\25\0\6\37\1\0\5\37\2\u01ff\7\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\2\37\1\u0200\5\37\25\0\6\37"+
    "\1\0\16\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\5\37"+
    "\1\u0201\1\0\4\37\1\u0201\11\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\12\37\1\u0202\3\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\6\37\1\0\5\37\2\u0203"+
    "\7\37\2\0\4\37\1\0\1\37\1\0\3\37\25\0"+
    "\1\u01c3\66\0\1\u01c4\1\0\1\u01c4\1\0\10\u01c4\6\0"+
    "\1\u0204\16\0\6\u01c4\1\0\16\u01c4\2\0\4\u01c4\1\0"+
    "\1\u01c4\1\0\3\u01c4\5\0\1\u01c5\1\0\1\u01c5\1\0"+
    "\10\u01c5\25\0\6\u01c5\1\0\16\u01c5\1\u0205\1\0\4\u01c5"+
    "\1\0\1\u01c5\1\0\3\u01c5\62\0\2\u0206\30\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\3\37\1\u0207\2\37"+
    "\1\0\16\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\1\37"+
    "\1\u0208\4\37\1\0\1\37\1\u0208\14\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\25\0\2\37\1\u0209\3\37\1\0\16\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\6\37\1\0\7\37"+
    "\2\u020a\5\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\6\37"+
    "\1\0\12\37\1\u020b\3\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\1\37\1\u020c\4\37\1\0\1\37\1\u020c\14\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\3\37\1\u020d\2\37"+
    "\1\0\16\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\5\37"+
    "\1\u020e\1\0\4\37\1\u020e\11\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\15\37\1\u020f\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\25\0\4\37\1\u0210\1\37\1\0\16\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\2\37\1\u0211\5\37\25\0\6\37"+
    "\1\0\16\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\2\37"+
    "\1\u0212\3\37\1\0\16\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\3\37\1\u0213\2\37\1\0\16\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\25\0\6\37\1\0\16\37\2\0\3\37"+
    "\1\u0214\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\5\37\1\u0215\1\0\4\37"+
    "\1\u0215\11\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\6\37"+
    "\1\0\1\u0216\10\37\1\u0216\4\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\1\u0217\10\37\1\u0217\4\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\5\37\1\u0218\1\0"+
    "\4\37\1\u0218\11\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\25\0"+
    "\6\37\1\0\12\37\1\u0219\3\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\55\0\1\u01ea\10\0\1\u01ea\27\0"+
    "\1\u021a\12\0\1\u01ea\31\0\1\u01ef\101\0\1\u01eb\6\0"+
    "\1\u01eb\103\0\1\u01e6\5\0\1\u01e6\47\0\1\u01ea\31\0"+
    "\1\u01ef\127\0\1\u01ea\100\0\1\u021b\70\0\1\u021c\125\0"+
    "\1\u021d\23\0\1\37\1\0\1\u021e\1\0\10\37\25\0"+
    "\6\37\1\0\16\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\25\0"+
    "\5\37\1\u021f\1\0\4\37\1\u021f\11\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u0220"+
    "\1\0\10\37\25\0\6\37\1\0\16\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\25\0\6\37\1\0\16\37\2\0\4\37"+
    "\1\0\1\37\1\0\1\37\1\u0221\1\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\6\37\1\0\2\37"+
    "\2\u0222\12\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\u0223\1\0\10\37\25\0\6\37"+
    "\1\0\16\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\6\37"+
    "\1\0\1\u0224\10\37\1\u0224\4\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\15\37\1\u0225\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\7\0\1\u0226\2\0\3\u0226"+
    "\1\0\2\u0226\26\0\6\u0226\1\0\16\u0226\2\0\4\u0226"+
    "\1\0\1\u0226\1\0\3\u0226\4\0\15\164\1\166\3\164"+
    "\1\166\14\164\1\166\17\164\2\u0227\10\164\1\166\16\164"+
    "\51\0\1\u0228\10\0\1\u0228\25\0\1\37\1\0\1\37"+
    "\1\0\10\37\25\0\6\37\1\0\2\37\2\u0229\12\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\u022a\1\0\10\37\25\0\6\37\1\0\16\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\6\37\1\0\12\37"+
    "\1\u022b\3\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\6\37"+
    "\1\0\1\u022c\10\37\1\u022c\4\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\12\37\1\u022d\3\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\6\37\1\0\15\37\1\u022e"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\6\37\1\0\16\37"+
    "\2\0\1\u022f\3\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\1\u0230\5\37"+
    "\1\0\16\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\21\0\1\u01c2\3\0\1\u01c3\102\0\1\u0231\3\0\1\u0232"+
    "\145\0\2\u0233\26\0\1\37\1\0\1\u0234\1\0\10\37"+
    "\25\0\6\37\1\0\16\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\5\37\1\u0235\1\0\4\37\1\u0235\11\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\2\37\1\u0236\3\37\1\0"+
    "\16\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\6\37\1\0"+
    "\1\u0237\10\37\1\u0237\4\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\u0238\1\0\10\37"+
    "\25\0\6\37\1\0\16\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\6\37\1\0\14\37\1\u0239\1\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u023a"+
    "\1\0\10\37\25\0\6\37\1\0\16\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\25\0\2\37\1\u023b\3\37\1\0\16\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\4\37\1\u023c\1\37"+
    "\1\0\16\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\5\37"+
    "\1\u023d\1\0\4\37\1\u023d\11\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\u023e\1\0"+
    "\10\37\25\0\6\37\1\0\16\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\1\u023f\10\37\1\u023f\4\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\u0240\1\0\10\37\25\0\6\37\1\0\16\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\50\0\1\u0241"+
    "\45\0\1\u01ea\167\0\1\u01ea\25\0\1\u0242\104\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\6\37\1\0\16\37"+
    "\2\0\4\37\1\0\1\37\1\0\1\37\1\u0243\1\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\6\37"+
    "\1\0\1\u0244\10\37\1\u0244\4\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\2\37\2\u0245\12\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\6\37\1\0\16\37\2\0"+
    "\4\37\1\0\1\37\1\0\1\37\1\u0246\1\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\6\37\1\0"+
    "\2\37\2\u0247\12\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\25\0"+
    "\6\37\1\0\16\37\2\0\4\37\1\0\1\37\1\0"+
    "\1\37\1\u0248\1\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\16\37\2\0\4\37\1\0"+
    "\1\37\1\0\1\37\1\u0249\1\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\1\u024a\5\37\1\0\16\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\u0226"+
    "\1\0\1\u0226\1\0\10\u0226\25\0\6\u0226\1\0\16\u0226"+
    "\2\0\4\u0226\1\0\1\u0226\1\0\3\u0226\4\0\15\164"+
    "\1\166\3\164\1\166\14\164\1\166\21\164\2\u024b\6\164"+
    "\1\166\16\164\15\0\2\u024c\2\0\1\u024c\66\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\2\37\1\u024d\3\37"+
    "\1\0\16\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\2\37"+
    "\1\u024e\3\37\1\0\16\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\5\37\1\u024f\1\0\4\37\1\u024f\11\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\u0250\1\0\10\37\25\0\6\37\1\0\16\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\3\37\1\u0251\2\37\1\0"+
    "\16\37\2\0\4\37\1\0\1\37\1\0\3\37\25\0"+
    "\1\u0232\136\0\1\u0252\10\0\1\u0252\25\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\6\37\1\0\16\37\2\0"+
    "\4\37\1\0\1\37\1\0\1\37\1\u0253\1\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\6\37\1\0"+
    "\1\u0254\10\37\1\u0254\4\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\5\37\1\u0255\1\0\4\37\1\u0255\11\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\u0256\1\0\10\37\25\0\6\37\1\0\16\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\6\37\1\0\16\37\2\0"+
    "\4\37\1\0\1\37\1\0\1\37\1\u0257\1\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\5\37\1\u0258"+
    "\1\0\4\37\1\u0258\11\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\1\u0259\5\37\1\0\16\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\u025a\1\0"+
    "\10\37\25\0\6\37\1\0\16\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\3\37\1\u025b\2\37\1\0\16\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\u025c\1\0\10\37\25\0\6\37\1\0\16\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\51\0\1\u01ea\104\0"+
    "\1\u01ea\6\0\1\u01ea\35\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\16\37\2\0\4\37\1\0"+
    "\1\37\1\0\1\37\1\u025d\1\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\6\37\1\0\5\37\2\u025e"+
    "\7\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\6\37\1\0"+
    "\7\37\2\u025f\5\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\25\0"+
    "\6\37\1\0\16\37\2\0\4\37\1\0\1\37\1\0"+
    "\1\37\1\u0260\1\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\16\37\2\0\4\37\1\0"+
    "\1\37\1\0\1\37\1\u0261\1\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\5\37\1\u0262\1\0\4\37"+
    "\1\u0262\11\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\4\37"+
    "\1\u0263\1\37\1\0\16\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\4\0\15\164\1\166\3\164\1\166\14\164"+
    "\1\166\12\164\1\u0264\10\164\1\u0264\5\164\1\166\16\164"+
    "\15\0\2\u024c\2\0\1\u024c\41\0\1\u0265\24\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\5\37\1\u0266\1\0"+
    "\4\37\1\u0266\11\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\25\0"+
    "\1\37\1\u0267\4\37\1\0\1\37\1\u0267\14\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\6\37\1\0\15\37\1\u0268"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\34\0\1\u0269"+
    "\57\0\1\37\1\0\1\37\1\0\10\37\25\0\1\u026a"+
    "\5\37\1\0\16\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u026b\1\0\10\37\25\0"+
    "\6\37\1\0\16\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\25\0"+
    "\1\u026c\5\37\1\0\16\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\u026d\1\0\10\37"+
    "\25\0\6\37\1\0\16\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\2\37"+
    "\1\u026e\5\37\25\0\6\37\1\0\16\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\25\0\1\u026f\5\37\1\0\16\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\6\37\1\0\1\u0270\10\37"+
    "\1\u0270\4\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\4\37"+
    "\1\u0271\1\37\1\0\16\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\1\u0272\5\37\1\0\16\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\2\37\1\u0273\3\37\1\0\16\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\6\37\1\0\16\37\2\0"+
    "\4\37\1\0\1\37\1\0\1\37\1\u0274\1\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\1\u0275\5\37"+
    "\1\0\16\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\6\37"+
    "\1\0\16\37\2\0\4\37\1\0\1\37\1\0\1\37"+
    "\1\u0276\1\37\4\0\15\164\1\166\3\164\1\166\6\164"+
    "\1\u0277\5\164\1\166\31\164\1\166\16\164\44\0\1\u0278"+
    "\43\0\1\37\1\0\1\37\1\0\10\37\25\0\6\37"+
    "\1\0\15\37\1\u0279\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u027a\1\0\10\37\25\0"+
    "\6\37\1\0\16\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\21\0\2\u0269\2\0\1\u0269\66\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\3\37\1\u027b\2\37\1\0"+
    "\16\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\3\37\1\u027c"+
    "\2\37\1\0\16\37\2\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\2\37\1\u027d"+
    "\5\37\25\0\6\37\1\0\16\37\2\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\2\37\2\u027e\12\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\3\37\1\u027f\2\37\1\0"+
    "\16\37\2\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\25\0\5\37\1\u0280"+
    "\1\0\4\37\1\u0280\11\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\6\37\1\0\16\37\2\0\3\37\1\u0281\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\25\0\6\37\1\0\16\37\2\0\4\37\1\0"+
    "\1\37\1\0\1\37\1\u0282\1\37\4\0\15\164\1\u0283"+
    "\1\u0277\2\164\1\u0283\14\164\1\166\31\164\1\166\16\164"+
    "\45\0\1\u0284\42\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\5\37\1\u0285\1\0\4\37\1\u0285\11\37\2\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\25\0\5\37\1\u0286\1\0\4\37"+
    "\1\u0286\11\37\2\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\6\37"+
    "\1\0\16\37\2\0\4\37\1\0\1\37\1\0\1\37"+
    "\1\u0287\1\37\5\0\1\37\1\0\1\u0288\1\0\10\37"+
    "\25\0\6\37\1\0\16\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\6\37\1\0\7\37\2\u0289\5\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\70\0\1\u028a\23\0\1\37"+
    "\1\0\1\u028b\1\0\10\37\25\0\6\37\1\0\16\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\u028c\1\0\10\37\25\0\6\37\1\0\16\37"+
    "\2\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\6\37\1\0\16\37"+
    "\2\0\4\37\1\0\1\37\1\0\1\37\1\u028d\1\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\6\37"+
    "\1\0\16\37\2\0\4\37\1\0\1\37\1\0\1\37"+
    "\1\u028e\1\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\25\0\6\37\1\0\5\37\2\u028f\7\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\71\0\1\u0290\22\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\6\37\1\0\16\37"+
    "\2\0\4\37\1\0\1\37\1\0\1\37\1\u0291\1\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\25\0\6\37"+
    "\1\0\12\37\1\u0292\3\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\50\0\1\u0293\43\0\1\37\1\0\1\u0294"+
    "\1\0\10\37\25\0\6\37\1\0\16\37\2\0\4\37"+
    "\1\0\1\37\1\0\3\37\70\0\1\u0295\23\0\1\37"+
    "\1\0\1\37\1\0\10\37\25\0\1\37\1\u0296\4\37"+
    "\1\0\1\37\1\u0296\14\37\2\0\4\37\1\0\1\37"+
    "\1\0\3\37\7\0\1\u0297\120\0\2\u0297\2\0\1\u0297"+
    "\5\0\1\u0298\74\0\2\u0298\2\0\1\u0298\1\0\1\u0299"+
    "\34\0\2\u029a\5\0\1\u029b\77\0\2\u029c\113\0\1\u029d"+
    "\100\0\2\u029e\113\0\1\u029f\100\0\2\u02a0\113\0\1\u02a1"+
    "\100\0\2\u02a2\42\0\2\u02a0\2\0\1\u02a0\6\0\1\u02a3"+
    "\136\0\2\u02a4\50\0\1\u02a0\152\0\1\u02a0\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[37630];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\23\0\2\1\1\11\12\1\2\11\2\1\3\11\37\1"+
    "\2\11\2\1\1\11\6\1\1\11\2\1\1\11\7\1"+
    "\1\11\5\1\1\0\1\11\2\1\1\11\3\1\1\11"+
    "\1\1\1\11\1\1\1\11\4\0\2\1\1\11\3\1"+
    "\1\11\2\1\1\0\1\1\1\0\2\1\1\0\1\11"+
    "\6\1\1\11\2\0\4\1\1\0\1\1\1\0\1\1"+
    "\2\0\1\11\2\0\2\1\1\0\42\1\1\0\3\1"+
    "\1\11\1\1\12\0\1\1\3\0\3\1\3\11\1\1"+
    "\3\0\2\1\1\11\1\1\1\11\4\0\1\1\2\0"+
    "\1\11\2\0\1\11\7\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\1\1\0\1\11\1\0\2\11\2\1\1\11"+
    "\3\0\15\1\1\0\1\1\3\0\47\1\12\0\7\1"+
    "\1\11\2\1\1\0\1\1\1\0\1\11\1\0\1\11"+
    "\1\1\1\0\1\11\1\0\1\1\1\0\2\11\1\1"+
    "\2\0\20\1\4\0\45\1\12\0\10\1\1\0\1\11"+
    "\1\0\1\1\1\0\1\11\16\1\1\11\3\0\37\1"+
    "\11\0\1\11\12\1\1\0\11\1\3\0\23\1\4\0"+
    "\24\1\1\11\1\0\15\1\2\0\11\1\1\0\5\1"+
    "\1\0\22\1\1\0\22\1\1\0\13\1\1\0\5\1"+
    "\1\0\5\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\14\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[676];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    protected String heredoc = null;
    protected int heredoc_len = 0;
    private boolean asp_tags = false;
    private StateStack stack = new StateStack();

    private boolean short_tags_allowed;

    private LexerInput input;
    private boolean haltedCompiler = false;

    /*public PhpLexer5(int state){
        initialize(state);
    }*/
    /*public void reset(char array[], int offset, int length) {
        this.zzBuffer = array;
        this.zzCurrentPos = offset;
        this.zzMarkedPos = offset;
        this.zzPushbackPos = offset;
        this.yychar = offset;
        this.zzEndRead = offset + length;
        this.zzStartRead = offset;
        this.zzAtEOF = zzCurrentPos >= zzEndRead;
        this.firstPos = offset;
    }



    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
    	this.zzReader = reader;
    	this.zzBuffer = buffer;
    	this.zzMarkedPos = parameters[0];
    	this.zzPushbackPos = parameters[1];
    	this.zzCurrentPos = parameters[2];
    	this.zzStartRead = parameters[3];
    	this.zzEndRead = parameters[4];
    	this.yyline = parameters[5];
    	initialize(parameters[6]);
    }
    */
        public PHP5ColoringLexer(LexerRestartInfo info, boolean short_tags_allowed, boolean asp_tags_allowed, boolean inPHP) {
            this.input = info.input();
            this.asp_tags = asp_tags_allowed;
            this.short_tags_allowed = short_tags_allowed;

            if(info.state() != null) {
                //reset state
                setState((LexerState)info.state());
            } else {
                //initial state
                stack.pushStack(YYINITIAL);
                if (inPHP) {
                    stack.pushStack(ST_PHP_IN_SCRIPTING);
                    zzState = zzLexicalState = ST_PHP_IN_SCRIPTING;
                }
                else {
                    zzState = zzLexicalState = YYINITIAL;
                }
            }

        }

        public static final class LexerState  {
            final StateStack stack;
            /** the current state of the DFA */
            final int zzState;
            /** the current lexical state */
            final int zzLexicalState;
            /** remember the heredoc */
            final String heredoc;
            /** and the lenght of */
            final int heredoc_len;

            LexerState (StateStack stack, int zzState, int zzLexicalState, String heredoc, int heredoc_len) {
                this.stack = stack;
                this.zzState = zzState;
                this.zzLexicalState = zzLexicalState;
                this.heredoc = heredoc;
                this.heredoc_len = heredoc_len;
            }

            @Override
            public boolean equals(Object obj) {
                if (this == obj) {
			return true;
		}

		if (obj == null || obj.getClass() != this.getClass()) {
			return false;
		}

                LexerState state = (LexerState) obj;
                return (this.stack.equals(state.stack)
                    && (this.zzState == state.zzState)
                    && (this.zzLexicalState == state.zzLexicalState)
                    && (this.heredoc_len == state.heredoc_len)
                    && ((this.heredoc == null && state.heredoc == null) || (this.heredoc != null && state.heredoc != null && this.heredoc.equals(state.heredoc))));
            }

            @Override
            public int hashCode() {
                int hash = 11;
                hash = 31 * hash + this.zzState;
                hash = 31 * hash + this.zzLexicalState;
                if (stack != null) {
                    hash = 31 * hash + this.stack.hashCode();
                }
                hash = 31 * hash + this.heredoc_len;
                if (heredoc != null) {
                    hash = 31 * hash + this.heredoc.hashCode();
                }
                return hash;
            }
        }

        public LexerState getState() {
            return new LexerState(stack.createClone(), zzState, zzLexicalState, heredoc, heredoc_len);
        }

        public void setState(LexerState state) {
            this.stack.copyFrom(state.stack);
            this.zzState = state.zzState;
            this.zzLexicalState = state.zzLexicalState;
            this.heredoc = state.heredoc;
            this.heredoc_len = state.heredoc_len;
        }

     protected boolean isHeredocState(int state){
    	    	return state == ST_PHP_HEREDOC || state == ST_PHP_START_HEREDOC || state == ST_PHP_END_HEREDOC || state == ST_PHP_NOWDOC;
    }

    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }

    protected int getZZStartRead() {
    	return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
    	return this.zzPushbackPos;
    }

        protected void pushBack(int i) {
		yypushback(i);
	}

        protected void popState() {
		yybegin(stack.popStack());
	}

	protected void pushState(final int state) {
		stack.pushStack(getZZLexicalState());
		yybegin(state);
	}


 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PHP5ColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PHP5ColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1742) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PHPTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 86:
          { return PHPTokenId.PHP_FALSE;
          }
        case 146: break;
        case 37:
          { if (asp_tags) {
            yybegin(YYINITIAL);
            stack.clear();
	    return PHPTokenId.PHP_CLOSETAG;
	}
	return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 147: break;
        case 49:
          { int trailingNewLineLength = 1;
        int label_len = yylength() - trailingNewLineLength;
        int back = trailingNewLineLength;

        if (yytext().charAt(label_len-1)==';') {
           label_len--;
           back++;
        }
        if (label_len == heredoc_len && yytext().substring(label_len - heredoc_len,label_len).equals(heredoc)) {
            back = back + heredoc_len;
            yypushback(back);
            yybegin(ST_PHP_END_HEREDOC);
        } else {
            yypushback(yylength() - trailingNewLineLength);
            yybegin(ST_PHP_HEREDOC);
        }
          }
        case 148: break;
        case 67:
          { yypushback(2);
        return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 149: break;
        case 55:
          { popState();
    return PHPTokenId.PHPDOC_COMMENT_END;
          }
        case 150: break;
        case 119:
          { return PHPTokenId.PHP_INCLUDE;
          }
        case 151: break;
        case 89:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    heredoc_len = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        heredoc_len--;
    }
    // HEREDOC PHP 5.3
    if (yytext().charAt(startString) == '"') {
        heredoc_len -= 2;
        startString ++;
    }
    heredoc = yytext().substring(startString,heredoc_len+startString);
    yybegin(ST_PHP_START_HEREDOC);
    return PHPTokenId.PHP_HEREDOC_TAG;
          }
        case 152: break;
        case 28:
          { return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 153: break;
        case 136:
          { return PHPTokenId.PHP_ENDDECLARE;
          }
        case 154: break;
        case 111:
          { return PHPTokenId.PHP_GLOBAL;
          }
        case 155: break;
        case 50:
          { heredoc=null;
    heredoc_len=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 1;
    // mark just the label
    if (yytext().charAt(yylength() - 2)==';') {
	    back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_HEREDOC_TAG;
          }
        case 156: break;
        case 142:
          { return PHPTokenId.PHP__FUNCTION__;
          }
        case 157: break;
        case 16:
          { popState();
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 158: break;
        case 46:
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 159: break;
        case 81:
          { return PHPTokenId.PHP_LIST;
          }
        case 160: break;
        case 85:
          { return PHPTokenId.PHP_EMPTY;
          }
        case 161: break;
        case 26:
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
			yypushback(1);
			break;
		default:
			popState();
	}
	 return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 162: break;
        case 13:
          { pushState(ST_PHP_LINE_COMMENT);
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 163: break;
        case 78:
          { return PHPTokenId.PHP_CASE;
          }
        case 164: break;
        case 65:
          { yypushback(1);
	pushState(ST_PHP_VAR_OFFSET);
	return PHPTokenId.PHP_VARIABLE;
          }
        case 165: break;
        case 35:
          { return PHPTokenId.PHP_VARIABLE;
          }
        case 166: break;
        case 27:
          { return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 167: break;
        case 76:
          { pushState(ST_PHP_DOC_COMMENT);
    yypushback(yylength()-3);
    return PHPTokenId.PHPDOC_COMMENT_START;
          }
        case 168: break;
        case 97:
          { return PHPTokenId.PHP_ISSET;
          }
        case 169: break;
        case 126:
          { return PHPTokenId.PHP__FILE__;
          }
        case 170: break;
        case 40:
          { return PHPTokenId.PHP_IF;
          }
        case 171: break;
        case 48:
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 172: break;
        case 38:
          { return PHPTokenId.PHP_AS;
          }
        case 173: break;
        case 42:
          { pushState(ST_PHP_LOOKING_FOR_CLASS_CONST);
    return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 174: break;
        case 63:
          { return PHPTokenId.PHP_USE;
          }
        case 175: break;
        case 143:
          { return PHPTokenId.PHP__NAMESPACE__;
          }
        case 176: break;
        case 56:
          { popState();
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 177: break;
        case 141:
          { return PHPTokenId.PHP_INCLUDE_ONCE;
          }
        case 178: break;
        case 130:
          { return PHPTokenId.PHP_NAMESPACE;
          }
        case 179: break;
        case 54:
          { popState();
    return PHPTokenId.PHP_COMMENT_END;
          }
        case 180: break;
        case 30:
          { popState();
    return PHPTokenId.T_INLINE_HTML;
          }
        case 181: break;
        case 33:
          { return PHPTokenId.PHP_OPERATOR;
          }
        case 182: break;
        case 10:
          { pushState(ST_PHP_BACKQUOTE);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 183: break;
        case 43:
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 184: break;
        case 3:
          { return PHPTokenId.PHP_NUMBER;
          }
        case 185: break;
        case 116:
          { return PHPTokenId.PHP_REQUIRE;
          }
        case 186: break;
        case 144:
          { pushState(ST_HALTED_COMPILER);
	return PHPTokenId.PHP_HALT_COMPILER;
          }
        case 187: break;
        case 118:
          { return PHPTokenId.PHP_DECLARE;
          }
        case 188: break;
        case 41:
          { //popState();
        yybegin(YYINITIAL);
        if (yylength() > 2) {
            yypushback(yylength()-2);
        }
        stack.clear();
	return PHPTokenId.PHP_CLOSETAG;
          }
        case 189: break;
        case 129:
          { popState();
	return PHPTokenId.T_INLINE_HTML;
          }
        case 190: break;
        case 93:
          { return PHPTokenId.PHP_CLONE;
          }
        case 191: break;
        case 95:
          { return PHPTokenId.PHP_TRAIT;
          }
        case 192: break;
        case 45:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_TOKEN;
          }
        case 193: break;
        case 60:
          { return PHPTokenId.PHP_NEW;
          }
        case 194: break;
        case 70:
          { yypushback(2);
    return PHPTokenId.PHP_COMMENT;
          }
        case 195: break;
        case 53:
          { return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 196: break;
        case 17:
          { yypushback(1);
        popState();
          }
        case 197: break;
        case 112:
          { return PHPTokenId.PHP_EXTENDS;
          }
        case 198: break;
        case 77:
          { return PHPTokenId.PHP_NULL;
          }
        case 199: break;
        case 83:
          { pushState(ST_PHP_IN_SCRIPTING);
    //yybegin(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_OPENTAG;
    //return createSymbol(ASTSymbol.T_OPEN_TAG);
          }
        case 200: break;
        case 101:
          { return PHPTokenId.PHP_WHILE;
          }
        case 201: break;
        case 128:
          { return PHPTokenId.PHP_ENDSWITCH;
          }
        case 202: break;
        case 120:
          { return PHPTokenId.PHP_PRIVATE;
          }
        case 203: break;
        case 1:
          { return PHPTokenId.T_INLINE_HTML;
          }
        case 204: break;
        case 84:
          { return PHPTokenId.PHP_ENDIF;
          }
        case 205: break;
        case 107:
          { return PHPTokenId.PHP_STATIC;
          }
        case 206: break;
        case 123:
          { return PHPTokenId.PHP_FUNCTION;
          }
        case 207: break;
        case 117:
          { return PHPTokenId.PHP_DEFAULT;
          }
        case 208: break;
        case 15:
          { return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 209: break;
        case 34:
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 210: break;
        case 127:
          { return PHPTokenId.PHP__LINE__;
          }
        case 211: break;
        case 72:
          { return PHPTokenId.PHP_EXIT;
          }
        case 212: break;
        case 36:
          { pushState(ST_PHP_COMMENT);
    return PHPTokenId.PHP_COMMENT_START;
          }
        case 213: break;
        case 88:
          { return PHPTokenId.PHP_BREAK;
          }
        case 214: break;
        case 19:
          { yypushback(1);
        yybegin(ST_PHP_HEREDOC);
          }
        case 215: break;
        case 132:
          { return PHPTokenId.PHP_INSTEADOF;
          }
        case 216: break;
        case 18:
          { yypushback(yylength());
        popState();
          }
        case 217: break;
        case 133:
          { return PHPTokenId.PHP_PROTECTED;
          }
        case 218: break;
        case 98:
          { return PHPTokenId.PHP_PRINT;
          }
        case 219: break;
        case 69:
          { int label_len = yylength() - 1;
    int back = 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
           back++;
    }
    if (label_len > heredoc_len && yytext().substring(label_len - heredoc_len,label_len).equals(heredoc)) {
        back = back + heredoc_len;
        yypushback(back);
        yybegin(ST_PHP_END_NOWDOC);
    }
    else {
        yypushback(1);
    }
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 220: break;
        case 58:
          { String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?')) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.T_OPEN_TAG_WITH_ECHO;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 221: break;
        case 25:
          { popState();
	return PHPTokenId.PHP_TOKEN;
          }
        case 222: break;
        case 91:
          { return PHPTokenId.PHP_CONST;
          }
        case 223: break;
        case 64:
          { return PHPTokenId.PHP_VAR;
          }
        case 224: break;
        case 145:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.T_INLINE_HTML;
          }
        case 225: break;
        case 96:
          { return PHPTokenId.PHP_THROW;
          }
        case 226: break;
        case 109:
          { return PHPTokenId.PHP_PARENT;
          }
        case 227: break;
        case 108:
          { return PHPTokenId.PHP_SWITCH;
          }
        case 228: break;
        case 71:
          { yypushback(2); // go back to mark end of comment in the next token
        return PHPTokenId.PHPDOC_COMMENT;
          }
        case 229: break;
        case 102:
          { return PHPTokenId.PHP_CASTING;
          }
        case 230: break;
        case 29:
          { popState();return PHPTokenId.WHITESPACE;
          }
        case 231: break;
        case 61:
          { return PHPTokenId.PHP_DIE;
          }
        case 232: break;
        case 7:
          { return PHPTokenId.PHP_SEMICOLON;
          }
        case 233: break;
        case 134:
          { return PHPTokenId.PHP__CLASS__;
          }
        case 234: break;
        case 32:
          { if (short_tags_allowed ) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 235: break;
        case 2:
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 236: break;
        case 12:
          { int lastState = stack.get(stack.size() - 1);
    if (lastState != ST_PHP_IN_SCRIPTING && lastState != YYINITIAL) {
        // probably in some sub state -> "{$" or "${"
        popState();
    }
    return PHPTokenId.PHP_CURLY_CLOSE;
          }
        case 237: break;
        case 94:
          { return PHPTokenId.PHP_CLASS;
          }
        case 238: break;
        case 57:
          { if (asp_tags) {
            yybegin(YYINITIAL);
            stack.clear();
	    return PHPTokenId.PHP_CLOSETAG;
	}
	String text = yytext();
	if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
		popState();
	}
	return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 239: break;
        case 114:
          { return PHPTokenId.PHP_FINALLY;
          }
        case 240: break;
        case 131:
          { return PHPTokenId.PHP_INTERFACE;
          }
        case 241: break;
        case 99:
          { return PHPTokenId.PHP_UNSET;
          }
        case 242: break;
        case 11:
          { return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 243: break;
        case 21:
          { yypushback(1);
    popState();
          }
        case 244: break;
        case 115:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
        int startString=3+bprefix;
        /* 3 is <<<, 2 is quotes, 1 is newline */
        heredoc_len = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
        while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
            startString++;
            heredoc_len--;
        }
        // first quate
        startString++;
        heredoc = yytext().substring(startString, heredoc_len+startString);
        yybegin(ST_PHP_START_NOWDOC);
        return PHPTokenId.PHP_NOWDOC_TAG;
          }
        case 245: break;
        case 110:
          { return PHPTokenId.PHP_PUBLIC;
          }
        case 246: break;
        case 140:
          { return PHPTokenId.PHP_REQUIRE_ONCE;
          }
        case 247: break;
        case 135:
          { return PHPTokenId.PHP_ENDFOREACH;
          }
        case 248: break;
        case 68:
          { int trailingNewLineLength = 1;
        int label_len = yylength() - trailingNewLineLength;
        int back = trailingNewLineLength;

        if (yytext().charAt(label_len-1)==';') {
           label_len--;
           back++;
        }
        if (label_len > heredoc_len && yytext().substring(label_len - heredoc_len,label_len).equals(heredoc)) {
            back = back + heredoc_len;
            yypushback(back);
            yybegin(ST_PHP_END_HEREDOC);
        } else {
            yypushback(trailingNewLineLength);
            return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
        }
          }
        case 249: break;
        case 75:
          { return PHPTokenId.PHP_EVAL;
          }
        case 250: break;
        case 82:
          { return PHPTokenId.PHP_GOTO;
          }
        case 251: break;
        case 51:
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
        label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_NOWDOC_TAG;
    } else {
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 252: break;
        case 103:
          { popState();
        return PHPTokenId.PHP_STRING;
          }
        case 253: break;
        case 124:
          { return PHPTokenId.PHP_ABSTRACT;
          }
        case 254: break;
        case 8:
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 255: break;
        case 73:
          { return PHPTokenId.PHP_ECHO;
          }
        case 256: break;
        case 87:
          { return PHPTokenId.PHP_FINAL;
          }
        case 257: break;
        case 139:
          { return PHPTokenId.PHP__METHOD__;
          }
        case 258: break;
        case 9:
          { return PHPTokenId.PHP_NS_SEPARATOR;
          }
        case 259: break;
        case 100:
          { return PHPTokenId.PHP_YIELD;
          }
        case 260: break;
        case 31:
          { if (asp_tags) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 261: break;
        case 121:
          { return PHPTokenId.PHP__DIR__;
          }
        case 262: break;
        case 5:
          { return  PHPTokenId.PHP_STRING;
          }
        case 263: break;
        case 125:
          { return PHPTokenId.PHP_CONTINUE;
          }
        case 264: break;
        case 138:
          { return PHPTokenId.PHP_IMPLEMENTS;
          }
        case 265: break;
        case 52:
          { heredoc=null; heredoc_len=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 1;
    // mark just the label
    if (yytext().charAt(yylength() - 2)==';') {
	    back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_NOWDOC_TAG;
          }
        case 266: break;
        case 62:
          { return PHPTokenId.PHP_TRY;
          }
        case 267: break;
        case 90:
          { return PHPTokenId.PHP_ARRAY;
          }
        case 268: break;
        case 6:
          { return PHPTokenId.WHITESPACE;
          }
        case 269: break;
        case 106:
          { return PHPTokenId.PHP_RETURN;
          }
        case 270: break;
        case 4:
          { return PHPTokenId.PHP_TOKEN;
          }
        case 271: break;
        case 14:
          { return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 272: break;
        case 92:
          { return PHPTokenId.PHP_CATCH;
          }
        case 273: break;
        case 66:
          { String text = yytext();
        int lastIndexOfDollar = text.lastIndexOf('$');
        yypushback(text.length() - lastIndexOfDollar);
        return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 274: break;
        case 137:
          { return PHPTokenId.PHP_INSTANCEOF;
          }
        case 275: break;
        case 47:
          { yypushback(1);
	return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 276: break;
        case 104:
          { return PHPTokenId.PHP_ENDFOR;
          }
        case 277: break;
        case 59:
          { return PHPTokenId.PHP_FOR;
          }
        case 278: break;
        case 113:
          { return PHPTokenId.PHP_FOREACH;
          }
        case 279: break;
        case 22:
          { popState();
    return PHPTokenId.PHP_STRING;
          }
        case 280: break;
        case 74:
          { return PHPTokenId.PHP_ELSE;
          }
        case 281: break;
        case 80:
          { return PHPTokenId.PHP_SELF;
          }
        case 282: break;
        case 24:
          { yypushback(1);
	popState();
        if (yylength() > 0)
            return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 283: break;
        case 23:
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens
	return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 284: break;
        case 44:
          { yypushback(1);
    return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 285: break;
        case 39:
          { return PHPTokenId.PHP_DO;
          }
        case 286: break;
        case 122:
          { return PHPTokenId.PHP_ENDWHILE;
          }
        case 287: break;
        case 105:
          { return PHPTokenId.PHP_ELSEIF;
          }
        case 288: break;
        case 79:
          { return PHPTokenId.PHP_TRUE;
          }
        case 289: break;
        case 20:
          { yypushback(1);
	yybegin(ST_PHP_NOWDOC);
          }
        case 290: break;
        default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
            switch (zzLexicalState) {
            case ST_PHP_COMMENT: {
              if (input.readLength() > 0) {
                input.backup(1);  // backup eof
                return PHPTokenId.PHP_COMMENT;
              }
              else {
                  return null;
              }
            }
            case 677: break;
            case ST_PHP_DOC_COMMENT: {
              if (input.readLength() > 0) {
                    input.backup(1);  // backup eof
                    return PHPTokenId.PHPDOC_COMMENT;
                }
                else {
                    return null;
                }
            }
            case 678: break;
            default:
              {        if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return PHPTokenId.UNKNOWN_TOKEN;
        } else {
            return null;
        }
 }
            }

          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
