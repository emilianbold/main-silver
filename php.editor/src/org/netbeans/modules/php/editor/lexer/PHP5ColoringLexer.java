/* The following code was generated by JFlex 1.5.1 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2015 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2015 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>/home/gapon/worx/sun/nb-main/php.editor/tools/Php5ColoringScanner.flex</tt>
 */
public class PHP5ColoringLexer {
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_IN_SCRIPTING = 2;
  public static final int ST_PHP_DOUBLE_QUOTES = 4;
  public static final int ST_PHP_BACKQUOTE = 6;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 8;
  public static final int ST_PHP_LOOKING_FOR_CLASS_CONST = 10;
  public static final int ST_PHP_HEREDOC = 12;
  public static final int ST_PHP_START_HEREDOC = 14;
  public static final int ST_PHP_END_HEREDOC = 16;
  public static final int ST_PHP_NOWDOC = 18;
  public static final int ST_PHP_START_NOWDOC = 20;
  public static final int ST_PHP_END_NOWDOC = 22;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 24;
  public static final int ST_PHP_VAR_OFFSET = 26;
  public static final int ST_PHP_COMMENT = 28;
  public static final int ST_PHP_DOC_COMMENT = 30;
  public static final int ST_PHP_LINE_COMMENT = 32;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 34;
  public static final int ST_HALTED_COMPILER = 36;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
    16, 16, 17, 17, 18, 18
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\16\1\15\1\113\1\113\1\21\22\0\1\16\1\32\1\23"+
    "\1\112\1\22\1\36\1\37\1\72\1\103\1\51\1\34\1\31\1\17"+
    "\1\4\1\2\1\35\1\5\1\11\10\1\1\101\1\20\1\33\1\27"+
    "\1\30\1\73\1\42\1\45\1\10\1\57\1\47\1\3\1\7\1\67"+
    "\1\71\1\61\1\104\1\77\1\66\1\100\1\46\1\43\1\63\1\106"+
    "\1\44\1\55\1\65\1\70\1\102\1\75\1\6\1\74\1\13\1\110"+
    "\1\24\1\111\1\41\1\105\1\25\1\45\1\10\1\50\1\47\1\3"+
    "\1\7\1\67\1\71\1\62\1\104\1\77\1\66\1\100\1\46\1\43"+
    "\1\64\1\106\1\53\1\56\1\52\1\70\1\102\1\75\1\6\1\74"+
    "\1\13\1\26\1\40\1\107\1\42\6\13\1\114\44\13\1\13\12\13"+
    "\1\13\4\13\1\13\5\13\27\13\1\13\37\13\1\13\10\13\60\12"+
    "\2\60\115\12\1\54\u0142\12\4\0\14\12\16\0\5\12\7\0\1\12"+
    "\1\0\1\12\201\0\5\12\1\0\2\12\2\0\4\12\10\0\1\12"+
    "\1\0\3\12\1\0\1\12\1\0\24\12\1\0\123\12\1\0\213\12"+
    "\10\0\236\12\11\0\46\12\2\0\1\12\7\0\47\12\110\0\33\12"+
    "\5\0\3\12\55\0\53\12\25\0\12\14\4\0\2\12\1\0\143\12"+
    "\1\0\1\12\17\0\2\12\7\0\2\12\12\14\3\12\2\0\1\12"+
    "\20\0\1\12\1\0\36\12\35\0\131\12\13\0\1\12\16\0\12\14"+
    "\41\12\11\0\2\12\4\0\1\12\5\0\26\12\4\0\1\12\11\0"+
    "\1\12\3\0\1\12\27\0\31\12\107\0\1\12\1\0\13\12\127\0"+
    "\66\12\3\0\1\12\22\0\1\12\7\0\12\12\4\0\12\14\1\0"+
    "\7\12\1\0\7\12\5\0\10\12\2\0\2\12\2\0\26\12\1\0"+
    "\7\12\1\0\1\12\3\0\4\12\3\0\1\12\20\0\1\12\15\0"+
    "\2\12\1\0\3\12\4\0\12\14\2\12\23\0\6\12\4\0\2\12"+
    "\2\0\26\12\1\0\7\12\1\0\2\12\1\0\2\12\1\0\2\12"+
    "\37\0\4\12\1\0\1\12\7\0\12\14\2\0\3\12\20\0\11\12"+
    "\1\0\3\12\1\0\26\12\1\0\7\12\1\0\2\12\1\0\5\12"+
    "\3\0\1\12\22\0\1\12\17\0\2\12\4\0\12\14\25\0\10\12"+
    "\2\0\2\12\2\0\26\12\1\0\7\12\1\0\2\12\1\0\5\12"+
    "\3\0\1\12\36\0\2\12\1\0\3\12\4\0\12\14\1\0\1\12"+
    "\21\0\1\12\1\0\6\12\3\0\3\12\1\0\4\12\3\0\2\12"+
    "\1\0\1\12\1\0\2\12\3\0\2\12\3\0\3\12\3\0\14\12"+
    "\26\0\1\12\25\0\12\14\25\0\10\12\1\0\3\12\1\0\27\12"+
    "\1\0\12\12\1\0\5\12\3\0\1\12\32\0\2\12\6\0\2\12"+
    "\4\0\12\14\25\0\10\12\1\0\3\12\1\0\27\12\1\0\12\12"+
    "\1\0\5\12\3\0\1\12\40\0\1\12\1\0\2\12\4\0\12\14"+
    "\1\0\2\12\22\0\10\12\1\0\3\12\1\0\51\12\2\0\1\12"+
    "\20\0\1\12\21\0\2\12\4\0\12\14\12\0\6\12\5\0\22\12"+
    "\3\0\30\12\1\0\11\12\1\0\1\12\2\0\7\12\72\0\60\12"+
    "\1\0\2\12\14\0\7\12\11\0\12\14\47\0\2\12\1\0\1\12"+
    "\2\0\2\12\1\0\1\12\2\0\1\12\6\0\4\12\1\0\7\12"+
    "\1\0\3\12\1\0\1\12\1\0\1\12\2\0\2\12\1\0\4\12"+
    "\1\0\2\12\11\0\1\12\2\0\5\12\1\0\1\12\11\0\12\14"+
    "\2\0\4\12\40\0\1\12\37\0\12\14\26\0\10\12\1\0\44\12"+
    "\33\0\5\12\163\0\53\12\24\0\1\12\12\14\6\0\6\12\4\0"+
    "\4\12\3\0\1\12\3\0\2\12\7\0\3\12\4\0\15\12\14\0"+
    "\1\12\1\0\12\14\6\0\46\12\1\0\1\12\5\0\1\12\2\0"+
    "\53\12\1\0\u014d\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0"+
    "\4\12\2\0\51\12\1\0\4\12\2\0\41\12\1\0\4\12\2\0"+
    "\7\12\1\0\1\12\1\0\4\12\2\0\17\12\1\0\71\12\1\0"+
    "\4\12\2\0\103\12\45\0\20\12\20\0\125\12\14\0\u026c\12\2\0"+
    "\21\12\1\0\32\12\5\0\113\12\25\0\15\12\1\0\4\12\16\0"+
    "\22\12\16\0\22\12\16\0\15\12\1\0\3\12\17\0\64\12\43\0"+
    "\1\12\4\0\1\12\3\0\12\14\46\0\12\14\6\0\130\12\10\0"+
    "\51\12\1\0\1\12\5\0\106\12\12\0\35\12\51\0\12\14\36\12"+
    "\2\0\5\12\13\0\54\12\25\0\7\12\10\0\12\14\46\0\27\12"+
    "\11\0\65\12\53\0\12\14\6\0\12\14\15\0\1\12\135\0\57\12"+
    "\21\0\7\12\4\0\12\14\51\0\36\12\15\0\2\12\12\14\54\12"+
    "\32\0\44\12\34\0\12\14\3\0\3\12\12\14\44\12\153\0\4\12"+
    "\1\0\4\12\3\0\2\12\11\0\300\12\100\0\u0116\12\2\0\6\12"+
    "\2\0\46\12\2\0\6\12\2\0\10\12\1\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\37\12\2\0\65\12\1\0\7\12\1\0\1\12"+
    "\3\0\3\12\1\0\7\12\3\0\4\12\2\0\6\12\4\0\15\12"+
    "\5\0\3\12\1\0\7\12\53\0\1\113\1\113\107\0\1\12\15\0"+
    "\1\12\20\0\15\12\145\0\1\12\4\0\1\12\2\0\12\12\1\0"+
    "\1\12\3\0\5\12\6\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\1\76\3\12\1\0\13\12\2\0\4\12\5\0\5\12\4\0\1\12"+
    "\64\0\2\12\u0a7b\0\57\12\1\0\57\12\1\0\205\12\6\0\4\12"+
    "\3\0\2\12\14\0\46\12\1\0\1\12\5\0\1\12\2\0\70\12"+
    "\7\0\1\12\20\0\27\12\11\0\7\12\1\0\7\12\1\0\7\12"+
    "\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12"+
    "\120\0\1\12\u01d5\0\2\12\52\0\5\12\5\0\2\12\4\0\126\12"+
    "\6\0\3\12\1\0\132\12\1\0\4\12\5\0\51\12\3\0\136\12"+
    "\21\0\33\12\65\0\20\12\u0200\0\u19b6\12\112\0\u51cd\12\63\0\u048d\12"+
    "\103\0\56\12\2\0\u010d\12\3\0\20\12\12\14\2\12\24\0\57\12"+
    "\20\0\31\12\10\0\106\12\61\0\11\12\2\0\147\12\2\0\4\12"+
    "\1\0\4\12\14\0\13\12\115\0\12\12\1\0\3\12\1\0\4\12"+
    "\1\0\27\12\35\0\64\12\16\0\62\12\34\0\12\14\30\0\6\12"+
    "\3\0\1\12\4\0\12\14\34\12\12\0\27\12\31\0\35\12\7\0"+
    "\57\12\34\0\1\12\12\14\46\0\51\12\27\0\3\12\1\0\10\12"+
    "\4\0\12\14\6\0\27\12\3\0\1\12\5\0\60\12\1\0\1\12"+
    "\3\0\2\12\2\0\5\12\2\0\1\12\1\0\1\12\30\0\3\12"+
    "\2\0\13\12\7\0\3\12\14\0\6\12\2\0\6\12\2\0\6\12"+
    "\11\0\7\12\1\0\7\12\221\0\43\12\15\0\12\14\6\0\u2ba4\12"+
    "\14\0\27\12\4\0\61\12\u2104\0\u016e\12\2\0\152\12\46\0\7\12"+
    "\14\0\5\12\5\0\1\12\1\0\12\12\1\0\15\12\1\0\5\12"+
    "\1\0\1\12\1\0\2\12\1\0\2\12\1\0\154\12\41\0\u016b\12"+
    "\22\0\100\12\2\0\66\12\50\0\14\12\164\0\5\12\1\0\207\12"+
    "\23\0\12\14\7\0\32\12\6\0\32\12\13\0\131\12\3\0\6\12"+
    "\2\0\6\12\2\0\6\12\2\0\3\12\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\23\0\2\1\1\2\1\3\1\4\1\5\1\6\1\3"+
    "\4\5\1\7\1\4\1\10\1\4\1\11\1\12\1\13"+
    "\1\14\14\6\15\5\1\2\1\4\2\5\1\4\1\5"+
    "\1\4\1\5\1\15\1\16\1\17\1\20\1\21\2\20"+
    "\1\17\3\20\3\22\2\23\4\20\1\2\1\20\2\24"+
    "\1\2\1\0\2\2\3\0\2\25\1\2\1\0\1\26"+
    "\1\27\1\26\1\3\1\30\1\3\1\31\1\30\1\32"+
    "\4\0\4\33\2\34\1\35\1\36\1\37\1\0\1\40"+
    "\1\0\1\41\1\3\2\0\6\5\1\42\2\0\4\5"+
    "\1\0\1\5\1\0\1\43\2\0\1\20\2\0\2\6"+
    "\1\0\1\44\1\45\1\46\4\5\1\47\4\5\1\50"+
    "\11\5\1\51\13\5\1\0\1\52\2\5\1\53\1\5"+
    "\12\0\1\5\3\0\2\54\2\55\1\56\1\57\1\55"+
    "\3\0\1\54\2\55\1\60\4\0\1\20\2\0\1\61"+
    "\1\0\1\62\5\0\1\63\1\0\1\64\1\0\1\65"+
    "\1\54\1\0\1\66\1\0\1\67\1\70\1\33\1\71"+
    "\1\72\3\0\7\5\2\3\1\73\3\5\1\0\1\5"+
    "\3\0\4\5\1\74\4\5\1\75\7\5\1\76\21\5"+
    "\1\77\2\5\1\100\12\0\7\5\3\101\1\0\1\102"+
    "\1\0\1\103\1\0\1\104\1\20\1\0\1\105\1\0"+
    "\1\105\1\0\1\106\1\107\1\33\2\0\1\5\1\110"+
    "\5\5\1\111\1\112\1\5\1\113\5\5\4\0\1\114"+
    "\5\5\1\115\5\5\1\116\3\5\1\117\1\5\1\120"+
    "\14\5\1\121\1\122\4\5\12\0\10\5\1\0\1\102"+
    "\1\0\1\33\1\0\1\123\4\5\1\124\2\5\1\125"+
    "\1\5\1\126\1\127\1\5\1\130\2\131\3\0\3\5"+
    "\1\132\4\5\1\133\1\134\1\135\1\136\1\137\1\140"+
    "\6\5\1\141\2\5\1\142\4\5\1\143\1\144\1\145"+
    "\11\0\1\146\10\5\1\147\1\33\1\0\1\5\1\150"+
    "\3\5\1\151\3\5\3\0\1\152\6\5\1\153\1\154"+
    "\7\5\1\155\1\156\1\157\4\0\10\5\1\23\1\33"+
    "\1\1\1\160\4\5\1\161\1\162\1\5\2\163\1\0"+
    "\1\164\2\5\1\165\1\166\1\5\1\167\5\5\1\170"+
    "\2\0\3\5\1\171\4\5\1\33\1\0\3\5\1\172"+
    "\1\173\1\0\1\5\1\174\1\5\1\175\6\5\1\176"+
    "\3\5\1\177\2\5\1\33\1\0\2\5\1\200\1\37"+
    "\1\5\1\201\1\5\1\202\1\203\2\5\1\204\2\5"+
    "\1\205\2\5\1\33\1\0\1\206\1\207\2\5\1\210"+
    "\1\211\3\5\1\212\1\33\1\0\5\5\1\0\1\213"+
    "\1\214\1\215\2\5\1\0\1\216\1\5\1\0\1\5"+
    "\1\0\1\217\14\0\1\220\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[676];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce\0\u021b"+
    "\0\u0268\0\u02b5\0\u0302\0\u034f\0\u039c\0\u03e9\0\u0436\0\u0483"+
    "\0\u04d0\0\u051d\0\u056a\0\u05b7\0\u0604\0\u0651\0\u069e\0\u06eb"+
    "\0\u0738\0\u0785\0\u07d2\0\u081f\0\u086c\0\u08b9\0\u0906\0\u0953"+
    "\0\u0651\0\u0651\0\u09a0\0\u09ed\0\u0651\0\u0651\0\u0651\0\u0a3a"+
    "\0\u0a87\0\u0ad4\0\u0b21\0\u0b6e\0\u0bbb\0\u0c08\0\u0c55\0\u0ca2"+
    "\0\u0cef\0\u0d3c\0\u0651\0\u0d89\0\u0dd6\0\u0e23\0\u0e70\0\u0ebd"+
    "\0\u0f0a\0\u0f57\0\u0fa4\0\u0ff1\0\u103e\0\u108b\0\u10d8\0\u1125"+
    "\0\u1172\0\u11bf\0\u120c\0\u1259\0\u12a6\0\u12f3\0\u1340\0\u138d"+
    "\0\u0651\0\u0651\0\u13da\0\u1427\0\u0651\0\u1474\0\u14c1\0\u150e"+
    "\0\u155b\0\u15a8\0\u15f5\0\u0651\0\u1642\0\u168f\0\u0651\0\u16dc"+
    "\0\u1729\0\u1776\0\u17c3\0\u1810\0\u185d\0\u168f\0\u0651\0\u18aa"+
    "\0\u18f7\0\u18f7\0\u1944\0\u1991\0\u19de\0\u1944\0\u1991\0\u0651"+
    "\0\u1a2b\0\u1a78\0\u1a78\0\u0651\0\u1ac5\0\u1b12\0\u1b5f\0\u0651"+
    "\0\u1bac\0\u0651\0\u1bf9\0\u0651\0\u1c46\0\u1c93\0\u1ce0\0\u1d2d"+
    "\0\u1d7a\0\u0651\0\u1dc7\0\u1e14\0\u1e61\0\u11bf\0\u0651\0\u1eae"+
    "\0\u056a\0\u1efb\0\u1f48\0\u1f95\0\u1fe2\0\u202f\0\u207c\0\u20c9"+
    "\0\u2116\0\u2163\0\u21b0\0\u21fd\0\u224a\0\u2297\0\u0651\0\u22e4"+
    "\0\u2331\0\u237e\0\u23cb\0\u2418\0\u2465\0\u24b2\0\u24ff\0\u1172"+
    "\0\u254c\0\u09ed\0\u2599\0\u0651\0\u25e6\0\u2633\0\u2680\0\u26cd"+
    "\0\u271a\0\u2767\0\u27b4\0\u0906\0\u2801\0\u284e\0\u289b\0\u28e8"+
    "\0\u0906\0\u2935\0\u2982\0\u29cf\0\u2a1c\0\u0906\0\u2a69\0\u2ab6"+
    "\0\u2b03\0\u2b50\0\u2b9d\0\u2bea\0\u2c37\0\u2c84\0\u2cd1\0\u0906"+
    "\0\u2d1e\0\u2d6b\0\u2db8\0\u2e05\0\u2e52\0\u2e9f\0\u2eec\0\u2f39"+
    "\0\u2f86\0\u2fd3\0\u3020\0\u306d\0\u30ba\0\u3107\0\u3154\0\u0651"+
    "\0\u31a1\0\u31ee\0\u323b\0\u1340\0\u3288\0\u32d5\0\u3322\0\u336f"+
    "\0\u33bc\0\u3409\0\u3456\0\u34a3\0\u34f0\0\u1474\0\u353d\0\u358a"+
    "\0\u35d7\0\u34f0\0\u0651\0\u0651\0\u0651\0\u353d\0\u3624\0\u15a8"+
    "\0\u3671\0\u36be\0\u3624\0\u3671\0\u0651\0\u370b\0\u3758\0\u37a5"+
    "\0\u37f2\0\u383f\0\u388c\0\u18aa\0\u0651\0\u38d9\0\u0651\0\u3926"+
    "\0\u3973\0\u39c0\0\u3a0d\0\u1a2b\0\u0651\0\u3a5a\0\u0651\0\u3aa7"+
    "\0\u0651\0\u3af4\0\u3b41\0\u0651\0\u3b8e\0\u0651\0\u0651\0\u3bdb"+
    "\0\u3c28\0\u0651\0\u3c75\0\u3cc2\0\u1b5f\0\u3d0f\0\u3d5c\0\u3da9"+
    "\0\u3df6\0\u3e43\0\u3e90\0\u3edd\0\u22e4\0\u2331\0\u3f2a\0\u3f77"+
    "\0\u3fc4\0\u4011\0\u405e\0\u40ab\0\u40f8\0\u4145\0\u4192\0\u41df"+
    "\0\u422c\0\u4279\0\u42c6\0\u0906\0\u4313\0\u4360\0\u43ad\0\u43fa"+
    "\0\u0906\0\u4447\0\u4494\0\u44e1\0\u452e\0\u457b\0\u45c8\0\u4615"+
    "\0\u0906\0\u4662\0\u46af\0\u46fc\0\u4749\0\u4796\0\u47e3\0\u4830"+
    "\0\u487d\0\u48ca\0\u4917\0\u4964\0\u49b1\0\u49fe\0\u4a4b\0\u4a98"+
    "\0\u4ae5\0\u4b32\0\u0906\0\u4b7f\0\u4bcc\0\u0906\0\u4c19\0\u4c66"+
    "\0\u4cb3\0\u4d00\0\u4d4d\0\u4d9a\0\u4de7\0\u4e34\0\u4e81\0\u4ece"+
    "\0\u4f1b\0\u4f68\0\u4fb5\0\u5002\0\u504f\0\u509c\0\u50e9\0\u0651"+
    "\0\u13da\0\u150e\0\u5136\0\u5183\0\u51d0\0\u0651\0\u521d\0\u0651"+
    "\0\u526a\0\u52b7\0\u0651\0\u5304\0\u19de\0\u5351\0\u0651\0\u0651"+
    "\0\u539e\0\u53eb\0\u5438\0\u5485\0\u0906\0\u54d2\0\u551f\0\u556c"+
    "\0\u55b9\0\u5606\0\u0906\0\u5653\0\u56a0\0\u0906\0\u56ed\0\u573a"+
    "\0\u5787\0\u57d4\0\u5821\0\u586e\0\u58bb\0\u5908\0\u5955\0\u4192"+
    "\0\u59a2\0\u59ef\0\u5a3c\0\u5a89\0\u5ad6\0\u0906\0\u5b23\0\u5b70"+
    "\0\u5bbd\0\u5c0a\0\u5c57\0\u0906\0\u5ca4\0\u5cf1\0\u5d3e\0\u0906"+
    "\0\u5d8b\0\u0906\0\u5dd8\0\u5e25\0\u5e72\0\u5ebf\0\u5f0c\0\u5f59"+
    "\0\u5fa6\0\u5ff3\0\u6040\0\u608d\0\u60da\0\u6127\0\u0906\0\u0906"+
    "\0\u6174\0\u61c1\0\u620e\0\u625b\0\u62a8\0\u62f5\0\u6342\0\u638f"+
    "\0\u63dc\0\u6429\0\u6476\0\u64c3\0\u6510\0\u655d\0\u65aa\0\u65f7"+
    "\0\u6644\0\u6691\0\u66de\0\u672b\0\u6778\0\u67c5\0\u6812\0\u0651"+
    "\0\u685f\0\u68ac\0\u68f9\0\u0651\0\u6946\0\u6993\0\u69e0\0\u6a2d"+
    "\0\u0906\0\u6a7a\0\u6ac7\0\u0906\0\u6b14\0\u0906\0\u6b61\0\u6bae"+
    "\0\u0906\0\u0651\0\u6bfb\0\u6c48\0\u6c95\0\u6ce2\0\u6d2f\0\u6d7c"+
    "\0\u6dc9\0\u0906\0\u6e16\0\u6e63\0\u6eb0\0\u6efd\0\u0906\0\u0906"+
    "\0\u0906\0\u0906\0\u0906\0\u0906\0\u6f4a\0\u6f97\0\u6fe4\0\u7031"+
    "\0\u707e\0\u70cb\0\u0906\0\u7118\0\u7165\0\u0906\0\u71b2\0\u71ff"+
    "\0\u724c\0\u7299\0\u0906\0\u0906\0\u0906\0\u72e6\0\u7333\0\u7380"+
    "\0\u73cd\0\u741a\0\u7467\0\u74b4\0\u7501\0\u754e\0\u0651\0\u759b"+
    "\0\u75e8\0\u7635\0\u7682\0\u76cf\0\u771c\0\u7769\0\u77b6\0\u7803"+
    "\0\u7850\0\u789d\0\u78ea\0\u7937\0\u7984\0\u79d1\0\u7a1e\0\u0906"+
    "\0\u7a6b\0\u7ab8\0\u7b05\0\u7b52\0\u7b9f\0\u7bec\0\u0906\0\u7c39"+
    "\0\u7c86\0\u7cd3\0\u7d20\0\u7d6d\0\u7dba\0\u0906\0\u0906\0\u7e07"+
    "\0\u7e54\0\u7ea1\0\u7eee\0\u7f3b\0\u7f88\0\u7fd5\0\u0906\0\u0906"+
    "\0\u0906\0\u8022\0\u806f\0\u80bc\0\u8109\0\u8156\0\u81a3\0\u81f0"+
    "\0\u823d\0\u828a\0\u82d7\0\u8324\0\u8371\0\u83be\0\u840b\0\u8458"+
    "\0\u0906\0\u84a5\0\u84f2\0\u853f\0\u858c\0\u0906\0\u0906\0\u85d9"+
    "\0\u0651\0\u8626\0\u8673\0\u86c0\0\u870d\0\u875a\0\u0906\0\u0906"+
    "\0\u87a7\0\u87f4\0\u8841\0\u888e\0\u88db\0\u8928\0\u8975\0\u0906"+
    "\0\u89c2\0\u8a0f\0\u8a5c\0\u8aa9\0\u8af6\0\u0906\0\u8b43\0\u8b90"+
    "\0\u8bdd\0\u8c2a\0\u8c77\0\u8cc4\0\u8d11\0\u8d5e\0\u8dab\0\u0906"+
    "\0\u0906\0\u8df8\0\u8e45\0\u0906\0\u8e92\0\u0906\0\u8edf\0\u8f2c"+
    "\0\u8f79\0\u8fc6\0\u9013\0\u9060\0\u0906\0\u90ad\0\u90fa\0\u9147"+
    "\0\u0906\0\u9194\0\u91e1\0\u922e\0\u927b\0\u92c8\0\u9315\0\u0906"+
    "\0\u9362\0\u93af\0\u0906\0\u93fc\0\u0906\0\u0906\0\u9449\0\u9496"+
    "\0\u0906\0\u94e3\0\u9530\0\u0906\0\u957d\0\u95ca\0\u9617\0\u9664"+
    "\0\u0906\0\u0906\0\u96b1\0\u96fe\0\u0906\0\u0906\0\u974b\0\u9798"+
    "\0\u97e5\0\u0906\0\u9362\0\u9832\0\u987f\0\u98cc\0\u9919\0\u9966"+
    "\0\u99b3\0\u9a00\0\u0906\0\u0906\0\u0906\0\u9a4d\0\u9a9a\0\u9ae7"+
    "\0\u0906\0\u9b34\0\u9b81\0\u9bce\0\u9c1b\0\u0906\0\u9c68\0\u9cb5"+
    "\0\u9d02\0\u9d4f\0\u9d9c\0\u9de9\0\u9e36\0\u9e83\0\u9ed0\0\u9f1d"+
    "\0\u9f6a\0\u9fb7\0\u0651\0\ua004";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[676];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\33\24\1\25\61\24\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\27\2\37\1\26\2\40"+
    "\1\41\1\42\1\40\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\41\1\72\1\65\3\73\1\71\3\74"+
    "\2\75\1\72\1\76\1\77\1\100\1\37\1\101\1\102"+
    "\1\103\1\104\3\37\1\105\1\106\1\107\1\37\1\110"+
    "\1\37\1\111\2\41\1\112\1\0\1\37\22\113\1\114"+
    "\1\115\1\116\1\113\1\117\66\113\22\120\1\121\1\120"+
    "\1\122\1\115\1\123\66\120\4\124\1\125\21\124\1\126"+
    "\66\124\50\127\1\130\6\127\1\130\35\127\15\131\1\132"+
    "\3\131\1\133\1\134\1\131\1\135\1\131\1\136\66\131"+
    "\3\137\1\140\2\137\3\140\1\137\2\140\27\137\6\140"+
    "\1\137\20\140\2\137\5\140\1\137\1\140\1\137\3\140"+
    "\5\137\1\140\3\26\1\141\2\26\3\141\1\26\2\141"+
    "\1\26\1\0\3\26\1\0\21\26\6\141\1\26\20\141"+
    "\2\26\5\141\1\26\1\141\1\26\3\141\4\26\1\0"+
    "\1\142\3\143\1\144\2\143\3\144\2\143\1\144\1\143"+
    "\1\145\3\143\1\145\21\143\6\144\1\143\2\144\1\143"+
    "\3\144\1\143\11\144\2\143\2\144\1\143\2\144\1\143"+
    "\1\144\1\143\3\144\4\143\1\146\1\147\3\150\1\151"+
    "\2\150\3\151\1\150\2\151\27\150\6\151\1\150\20\151"+
    "\2\150\5\151\1\150\1\151\1\150\3\151\5\150\1\151"+
    "\3\26\1\152\2\26\3\152\1\26\2\152\1\26\1\0"+
    "\3\26\1\0\21\26\6\152\1\26\20\152\2\26\5\152"+
    "\1\26\1\152\1\26\3\152\4\26\1\0\1\153\3\154"+
    "\1\155\1\156\1\154\3\155\1\154\2\155\1\154\2\40"+
    "\2\154\1\40\21\154\6\155\1\154\20\155\2\154\5\155"+
    "\1\154\1\155\1\154\3\155\5\154\1\155\1\26\1\157"+
    "\1\160\1\37\1\26\1\161\3\37\1\157\2\37\1\26"+
    "\2\162\2\160\1\162\1\163\1\160\1\162\2\160\6\26"+
    "\1\160\5\26\6\37\1\160\20\37\1\162\1\160\5\37"+
    "\1\160\1\37\1\160\3\37\1\160\1\41\1\164\1\162"+
    "\1\0\1\37\34\165\1\166\60\165\34\167\1\170\60\167"+
    "\15\171\1\172\3\171\1\173\11\171\1\174\2\171\1\175"+
    "\34\171\1\176\21\171\15\177\2\200\2\177\1\200\71\177"+
    "\2\0\115\201\33\24\1\202\114\24\1\0\2\24\1\203"+
    "\11\24\4\0\2\24\1\204\3\24\1\0\1\24\1\0"+
    "\6\24\1\205\7\24\1\0\11\24\116\0\1\27\1\206"+
    "\1\207\1\0\1\27\3\0\1\27\104\0\1\206\1\210"+
    "\2\0\1\206\3\0\1\206\15\0\1\63\66\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\211\6\37\26\0\3\37"+
    "\1\212\1\37\1\213\1\0\5\37\1\213\6\37\1\214"+
    "\3\37\2\0\4\37\1\215\1\0\1\216\1\0\3\37"+
    "\5\0\1\37\4\0\1\63\22\0\1\63\1\217\65\0"+
    "\1\27\1\206\1\207\1\0\1\27\1\220\1\0\1\221"+
    "\1\27\104\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\1\64\5\37\1\0\20\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\1\222\1\37\1\223\3\37\1\0"+
    "\6\37\3\224\5\37\1\225\1\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\6\0\1\44\7\0\1\226\7\0"+
    "\1\37\1\227\4\37\1\0\1\37\1\227\16\37\1\230"+
    "\1\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\26\0\6\37"+
    "\1\0\20\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\15\0\2\40\2\0\1\40\76\0\1\231"+
    "\2\0\3\231\1\0\2\231\27\0\6\231\1\0\20\231"+
    "\2\0\5\231\1\0\1\231\1\0\3\231\5\0\1\231"+
    "\22\232\1\233\1\234\1\235\1\232\1\236\66\232\27\0"+
    "\1\62\1\63\113\0\1\63\1\62\113\0\1\63\1\0"+
    "\1\63\112\0\1\62\114\0\1\237\1\63\2\0\1\240"+
    "\1\0\1\241\106\0\1\63\4\0\1\62\107\0\1\63"+
    "\4\0\1\242\1\112\106\0\1\63\1\243\113\0\1\63"+
    "\7\0\1\63\104\0\1\63\10\0\1\63\103\0\1\63"+
    "\66\0\1\37\1\0\1\37\1\0\10\37\26\0\1\37"+
    "\1\244\4\37\1\0\1\37\1\244\16\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\245\1\0\10\37\26\0\6\37\1\0\20\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\3\37\1\246\4\37"+
    "\26\0\1\37\1\247\1\37\1\250\2\37\1\0\1\37"+
    "\1\247\3\251\13\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\252\1\0"+
    "\10\37\26\0\2\37\1\253\3\37\1\0\16\37\1\254"+
    "\1\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\255\1\0\10\37\26\0"+
    "\1\256\5\37\1\0\6\37\3\257\7\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\1\260\1\37\1\261"+
    "\3\37\1\0\14\37\1\262\3\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\1\37\1\263\4\37\1\0"+
    "\1\37\1\263\15\37\1\264\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\265"+
    "\1\0\10\37\26\0\6\37\1\0\1\266\12\37\1\266"+
    "\4\37\2\0\1\37\1\267\3\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\2\37\1\270\5\37\26\0\3\37\1\271\2\37\1\0"+
    "\2\37\3\272\13\37\2\0\4\37\1\273\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\1\37\1\274\1\275\3\37\1\0"+
    "\1\37\1\274\14\37\1\276\1\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\6\37\1\0\6\37\3\277"+
    "\7\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\1\300\5\37\1\0\14\37\1\301\3\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\3\37\1\302\2\37"+
    "\1\0\2\37\3\303\13\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\24\230\1\304\45\230\1\234"+
    "\22\230\30\0\1\305\65\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\6\37\1\0\6\37\3\306\7\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\6\37\1\0"+
    "\17\37\1\307\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\101\0\1\310\14\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\2\37\1\311\3\37\1\0\20\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\7\0\1\312\1\313\5\0\1\314\24\0\1\315\1\316"+
    "\1\317\1\0\1\320\3\0\1\316\3\321\1\0\3\322"+
    "\5\0\1\323\25\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\6\37\1\0\20\37\2\0\5\37\1\0\1\37"+
    "\1\0\1\37\1\324\1\37\5\0\1\37\22\113\1\325"+
    "\1\0\1\326\1\113\1\327\71\113\1\330\2\113\3\330"+
    "\1\113\1\331\1\330\6\113\1\332\1\333\1\326\1\113"+
    "\1\334\14\113\6\330\1\113\2\330\1\331\3\330\1\331"+
    "\11\330\2\113\2\330\1\331\2\330\1\113\1\330\1\113"+
    "\3\330\5\113\1\330\137\113\1\335\1\333\1\326\1\113"+
    "\1\336\66\113\22\120\1\337\1\120\1\340\1\0\1\341"+
    "\71\120\1\330\2\120\3\330\1\120\1\342\1\330\6\120"+
    "\1\343\1\120\1\340\1\333\1\334\14\120\6\330\1\120"+
    "\2\330\1\342\3\330\1\342\11\330\2\120\2\330\1\342"+
    "\2\330\1\120\1\330\1\120\3\330\5\120\1\330\137\120"+
    "\1\335\1\120\1\340\1\333\1\344\66\120\30\0\1\345"+
    "\106\0\1\335\160\0\1\346\26\0\15\131\1\0\3\131"+
    "\1\0\1\347\1\131\1\350\1\131\1\351\71\131\1\352"+
    "\2\131\3\352\1\131\2\352\1\131\1\0\3\131\1\0"+
    "\1\347\1\131\1\350\1\131\1\351\14\131\6\352\1\131"+
    "\20\352\2\131\5\352\1\131\1\352\1\131\3\352\5\131"+
    "\1\352\3\131\1\352\2\131\3\352\1\131\2\352\1\131"+
    "\1\353\3\131\1\0\1\347\1\131\1\350\1\131\1\351"+
    "\14\131\6\352\1\131\20\352\2\131\5\352\1\131\1\352"+
    "\1\131\3\352\5\131\1\352\3\0\1\330\2\0\3\330"+
    "\1\0\2\330\12\0\1\334\14\0\6\330\1\0\20\330"+
    "\2\0\5\330\1\0\1\330\1\0\3\330\5\0\1\330"+
    "\115\131\1\0\1\354\1\0\1\354\1\0\10\354\1\355"+
    "\2\0\1\356\1\355\21\0\6\354\1\0\20\354\2\0"+
    "\5\354\1\0\1\354\1\0\3\354\5\0\1\354\1\0"+
    "\1\142\1\0\1\142\1\0\10\142\1\357\2\0\1\360"+
    "\1\357\21\0\6\142\1\0\20\142\2\0\5\142\1\0"+
    "\1\142\1\0\3\142\5\0\1\142\15\146\1\145\3\146"+
    "\1\145\74\146\1\147\1\146\1\147\1\146\5\147\1\146"+
    "\1\147\1\146\1\0\2\146\1\361\1\0\21\146\6\147"+
    "\1\146\2\147\1\146\3\147\1\146\11\147\2\146\2\147"+
    "\1\146\2\147\1\146\1\147\1\146\3\147\5\146\1\147"+
    "\3\146\1\362\2\146\3\362\1\146\1\363\1\362\1\146"+
    "\1\145\3\146\1\145\21\146\6\362\1\146\2\362\1\363"+
    "\3\362\1\363\11\362\2\146\2\362\1\363\2\362\1\146"+
    "\1\362\1\146\3\362\5\146\1\362\1\0\1\364\1\0"+
    "\1\364\1\0\10\364\1\365\2\0\1\366\1\365\21\0"+
    "\6\364\1\0\20\364\2\0\5\364\1\0\1\364\1\0"+
    "\3\364\5\0\1\364\1\0\1\153\1\0\1\153\1\0"+
    "\10\153\1\367\2\0\1\370\1\367\21\0\6\153\1\0"+
    "\20\153\2\0\5\153\1\0\1\153\1\0\3\153\5\0"+
    "\1\153\1\0\1\155\1\0\1\155\1\0\10\155\26\0"+
    "\6\155\1\0\20\155\2\0\5\155\1\0\1\155\1\0"+
    "\3\155\5\0\1\155\30\0\1\371\65\0\1\157\3\0"+
    "\1\157\3\0\1\157\104\0\1\157\3\0\1\157\1\220"+
    "\2\0\1\157\106\0\1\372\2\0\3\372\1\0\2\372"+
    "\27\0\6\372\1\0\20\372\2\0\5\372\1\0\1\372"+
    "\1\0\3\372\5\0\1\372\34\165\1\373\114\165\1\373"+
    "\1\374\57\165\34\167\1\375\114\167\1\375\1\376\57\167"+
    "\15\171\1\172\3\171\1\172\14\171\1\172\34\171\1\172"+
    "\21\171\15\0\1\377\77\0\15\171\1\172\3\171\1\172"+
    "\13\171\1\u0100\1\172\34\171\1\172\21\171\30\0\1\u0101"+
    "\101\0\2\200\2\0\1\200\73\0\33\24\1\0\2\24"+
    "\1\0\11\24\4\0\2\24\1\0\3\24\1\0\1\24"+
    "\1\0\6\24\1\0\7\24\1\0\11\24\27\0\1\u0102"+
    "\135\0\1\u0103\6\0\1\u0103\64\0\1\u0102\33\0\2\u0104"+
    "\31\0\1\206\1\0\1\207\1\0\1\206\3\0\1\206"+
    "\104\0\1\157\2\0\1\u0105\1\157\3\0\1\157\17\0"+
    "\1\u0105\65\0\1\63\113\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\6\37\1\0\1\u0106\5\37\3\u0107\2\37"+
    "\1\u0106\4\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\4\37\1\u0108\1\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\17\37"+
    "\1\u0109\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\6\37\1\0\2\37\3\u010a\13\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\6\37\1\0\11\37\2\u010b"+
    "\5\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\2\37\1\u010c\3\37\1\0\20\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\u010d\1\0"+
    "\1\u010d\1\0\1\u010d\1\0\3\u010d\33\0\1\u010d\1\0"+
    "\2\u010d\6\0\1\u010d\42\0\1\u010e\3\0\1\u010e\104\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\1\37\1\u010f"+
    "\4\37\1\0\1\37\1\u010f\16\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\6\37\1\0\14\37\1\u0110"+
    "\3\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\3\37\1\u0111\2\37\1\0\20\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\3\37\1\u0112\2\37\1\0"+
    "\20\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\33\0\1\u0113\62\0\1\37\1\0\1\u0114\1\0"+
    "\10\37\26\0\6\37\1\0\20\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\231\1\0"+
    "\1\231\1\0\10\231\26\0\6\231\1\0\20\231\2\0"+
    "\5\231\1\0\1\231\1\0\3\231\5\0\1\231\3\232"+
    "\1\0\2\232\3\0\2\232\1\0\6\232\1\233\1\234"+
    "\1\235\1\232\1\0\14\232\6\0\1\232\2\0\1\232"+
    "\3\0\1\232\11\0\2\232\2\0\1\232\2\0\1\232"+
    "\1\0\1\232\3\0\5\232\1\0\137\232\1\0\1\234"+
    "\1\235\1\232\1\236\66\232\30\0\1\63\113\0\1\63"+
    "\3\0\1\u0115\135\0\3\u0116\72\0\1\u0117\75\0\2\243"+
    "\2\0\1\243\74\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\6\37\1\0\1\u0118\12\37\1\u0118\4\37\2\0"+
    "\5\37\1\0\1\37\1\0\2\37\1\u0119\5\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\26\0\6\37"+
    "\1\0\2\37\3\u011a\13\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\1\37\1\u011b\4\37\1\0\1\37"+
    "\1\u011b\16\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\4\37\1\244\1\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\20\37"+
    "\2\0\1\37\1\u011c\3\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\6\37\1\0\20\37\2\0\4\37\1\u011d\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\6\37\1\0\14\37\1\u011e"+
    "\3\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\2\37\1\u011f"+
    "\5\37\26\0\5\37\1\u0120\1\0\5\37\1\u0120\12\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\u0121\1\0\10\37\26\0\6\37"+
    "\1\0\20\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\3\37\1\u0122\2\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\1\u0123"+
    "\1\37\3\u0124\6\37\1\u0123\4\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\1\u0125\1\37\1\u0126\3\37"+
    "\1\0\20\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\2\37\1\u0127\3\37\1\0\16\37\1\u0128\1\37"+
    "\2\0\1\u0129\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\1\37\1\u012a\4\37\1\0\1\37\1\u012a\16\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\6\37\1\0"+
    "\14\37\1\u012b\3\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\2\37\1\u012c\3\37\1\0\20\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\6\37\1\0"+
    "\6\37\3\u012d\7\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\5\37\1\u012e\1\0\1\u012f\1\37\3\u0130"+
    "\1\u012e\5\37\1\u012f\4\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\6\37\1\0\2\37\3\u0131\13\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\26\0\6\37"+
    "\1\0\11\37\2\u0132\5\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\1\u0133\5\37\1\0\6\37\3\u0134"+
    "\7\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\1\37\1\u0135\4\37\1\0\1\37\1\u0135\16\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\3\37\1\u0136\4\37\26\0"+
    "\6\37\1\0\20\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\6\37\1\0\2\37\3\u0137\13\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\6\37\1\0"+
    "\1\u0138\12\37\1\u0138\4\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\1\u0139\5\37\1\0\20\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\6\37\1\0"+
    "\2\37\3\u013a\13\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\u013b\1\0"+
    "\10\37\26\0\6\37\1\0\20\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\115\230\15\0\2\305"+
    "\2\0\1\305\74\0\1\37\1\0\1\u013c\1\0\10\37"+
    "\26\0\6\37\1\0\20\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\6\37\1\0\6\37\3\u013d\7\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\26\0\1\37"+
    "\1\u013e\4\37\1\0\1\37\1\u013e\16\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\66\0\1\u013f"+
    "\71\0\1\u0140\14\0\3\u0141\42\0\1\u0142\107\0\1\u0143"+
    "\155\0\1\u0144\6\0\1\u0144\104\0\1\u0145\123\0\1\u0146"+
    "\12\0\1\u0146\75\0\1\u0147\114\0\1\u0148\47\0\1\37"+
    "\1\0\1\37\1\0\2\37\1\u0149\5\37\26\0\3\37"+
    "\1\u014a\1\u014b\1\u014c\1\0\5\37\1\u014c\6\37\1\u014d"+
    "\2\37\1\u014e\2\0\4\37\1\u014f\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\3\113\1\0\2\113\3\0\2\113"+
    "\1\0\6\113\1\332\1\333\1\326\1\113\1\0\14\113"+
    "\6\0\1\113\2\0\1\113\3\0\1\113\11\0\2\113"+
    "\2\0\1\113\2\0\1\113\1\0\1\113\3\0\5\113"+
    "\1\0\22\113\1\0\1\333\1\326\1\113\1\336\66\113"+
    "\1\0\1\330\1\0\1\330\1\0\10\330\26\0\6\330"+
    "\1\0\20\330\2\0\5\330\1\0\1\330\1\0\3\330"+
    "\1\0\1\u0150\3\0\1\330\1\113\1\331\1\113\1\331"+
    "\1\113\10\331\5\113\1\325\1\0\1\326\1\113\1\327"+
    "\14\113\6\331\1\113\20\331\2\113\5\331\1\113\1\331"+
    "\1\113\3\331\1\113\1\u0151\3\113\1\331\3\120\1\0"+
    "\2\120\3\0\2\120\1\0\6\120\1\343\1\120\1\340"+
    "\1\333\1\0\14\120\6\0\1\120\2\0\1\120\3\0"+
    "\1\120\11\0\2\120\2\0\1\120\2\0\1\120\1\0"+
    "\1\120\3\0\5\120\1\0\22\120\1\0\1\120\1\340"+
    "\1\333\1\344\67\120\1\342\1\120\1\342\1\120\10\342"+
    "\5\120\1\337\1\120\1\340\1\0\1\341\14\120\6\342"+
    "\1\120\20\342\2\120\5\342\1\120\1\342\1\120\3\342"+
    "\1\120\1\u0152\3\120\1\342\45\0\1\u0153\47\0\3\131"+
    "\1\u0154\2\131\3\u0154\2\131\1\u0154\1\131\1\0\3\131"+
    "\1\0\1\u0155\1\131\1\350\1\131\1\u0156\14\131\6\u0154"+
    "\1\131\2\u0154\1\131\3\u0154\1\131\11\u0154\2\131\2\u0154"+
    "\1\131\2\u0154\1\131\1\u0154\1\131\3\u0154\5\131\1\u0154"+
    "\15\131\1\0\3\131\1\0\110\131\1\0\3\131\1\0"+
    "\1\u0156\1\131\1\350\1\131\1\u0157\67\131\1\352\1\131"+
    "\1\352\1\131\10\352\1\u0158\2\131\1\u0159\1\u0158\1\347"+
    "\1\131\1\350\1\131\1\351\14\131\6\352\1\131\20\352"+
    "\2\131\5\352\1\131\1\352\1\131\3\352\5\131\1\352"+
    "\3\0\1\u015a\2\0\3\u015a\1\0\2\u015a\27\0\6\u015a"+
    "\1\0\20\u015a\2\0\5\u015a\1\0\1\u015a\1\0\3\u015a"+
    "\5\0\1\u015a\15\0\1\355\3\0\1\355\110\0\1\357"+
    "\3\0\1\357\73\0\15\146\1\0\3\146\1\0\74\146"+
    "\1\362\1\146\1\362\1\146\5\362\1\363\1\362\1\363"+
    "\1\u015b\2\146\1\u015c\1\u015b\21\146\6\362\1\146\2\362"+
    "\1\363\3\362\1\363\11\362\2\146\2\362\1\363\2\362"+
    "\1\146\1\362\1\146\3\362\5\146\1\362\1\146\1\363"+
    "\1\146\1\363\1\146\10\363\1\u015d\2\146\1\u015e\1\u015d"+
    "\21\146\6\363\1\146\20\363\2\146\5\363\1\146\1\363"+
    "\1\146\3\363\5\146\1\363\15\0\1\365\3\0\1\365"+
    "\110\0\1\367\3\0\1\367\74\0\1\372\1\0\1\372"+
    "\1\0\10\372\26\0\6\372\1\0\20\372\2\0\5\372"+
    "\1\0\1\372\1\0\3\372\5\0\1\372\34\165\1\373"+
    "\1\u015f\57\165\34\167\1\375\1\u0160\57\167\15\171\1\172"+
    "\3\171\1\172\14\171\1\172\15\171\3\u0161\14\171\1\172"+
    "\21\171\15\0\2\u0101\2\0\1\u0101\137\0\1\u0162\6\0"+
    "\1\u0162\132\0\1\u0163\24\0\1\37\1\0\1\u0164\1\0"+
    "\10\37\26\0\6\37\1\0\20\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\6\37\1\0\1\u0165\12\37"+
    "\1\u0165\4\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\2\37"+
    "\1\u0166\5\37\26\0\4\37\1\u0167\1\37\1\0\2\37"+
    "\3\u0168\1\37\3\u0169\7\37\2\0\1\37\1\u016a\3\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\1\u016b\5\37\1\0"+
    "\20\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\u016c\1\0\10\37\26\0"+
    "\6\37\1\0\20\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\6\37\1\0\1\u016d\12\37\1\u016d\4\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\26\0\6\37"+
    "\1\0\14\37\1\u016e\3\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\u016f"+
    "\1\0\10\37\26\0\6\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\2\37"+
    "\3\u0170\13\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\2\37\1\u0171\3\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\5\37\1\u0172\1\0"+
    "\5\37\1\u0172\12\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\33\0\1\u0115\62\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\2\37\1\u0173\3\37\1\0"+
    "\20\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\3\0\1\u0174\2\0\3\u0174\1\0\2\u0174\2\0"+
    "\1\u0115\4\0\1\u0175\17\0\6\u0174\1\0\20\u0174\1\u0176"+
    "\1\0\5\u0174\1\0\1\u0174\1\0\3\u0174\5\0\1\u0174"+
    "\50\0\1\u0177\6\0\1\u0177\52\0\2\u0178\2\0\1\u0178"+
    "\74\0\1\37\1\0\1\37\1\0\10\37\26\0\6\37"+
    "\1\0\16\37\1\u0179\1\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\6\37\1\0\16\37\1\u017a\1\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\26\0\6\37"+
    "\1\0\1\u017b\12\37\1\u017b\4\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\2\37\1\u017c\3\37\1\0"+
    "\20\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\u017d\1\0\10\37\26\0"+
    "\6\37\1\0\20\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\6\37\1\0\14\37\1\u017e\3\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\2\37\1\u017f"+
    "\3\37\1\0\20\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\6\37\1\0\14\37\1\u0180\3\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\6\37\1\0"+
    "\1\u0181\1\37\3\u0182\6\37\1\u0181\4\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\5\37\1\u0183\1\0"+
    "\5\37\1\u0183\12\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\u0184\1\0"+
    "\10\37\26\0\6\37\1\0\20\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\3\37\1\u0185\2\37\1\0"+
    "\20\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\6\37\1\0\2\37\3\u0186\13\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\6\37\1\0\6\37\3\u0187"+
    "\7\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\u0188\1\0\10\37\26\0"+
    "\6\37\1\0\20\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\1\u0189\5\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\2\37\1\u018a\5\37\26\0\6\37"+
    "\1\0\20\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\6\37\1\0\1\u018b\12\37\1\u018b\4\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\6\37\1\0"+
    "\1\u018c\12\37\1\u018c\4\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\6\37\1\0\14\37\1\u018d\3\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\u018e\1\0\10\37\26\0\6\37"+
    "\1\0\20\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\6\37\1\0\1\u018f\12\37\1\u018f\4\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\u0190\1\0\10\37\26\0\6\37\1\0"+
    "\20\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\6\37\1\0\14\37\1\u0191\3\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\6\37\1\0\1\u0192\12\37"+
    "\1\u0192\4\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\3\37\1\u0193\2\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\u0194\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\u0195\1\0\10\37\26\0\6\37\1\0\20\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\26\0\6\37"+
    "\1\0\14\37\1\u0196\3\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\6\37\1\0\1\u0197\12\37\1\u0197"+
    "\4\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\1\u0198\5\37\1\0\20\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\3\37\1\u0199\4\37\26\0\6\37\1\0\20\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\u019a\1\0\10\37\26\0\6\37"+
    "\1\0\20\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\6\37\1\0\14\37\1\u019b\3\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\14\37"+
    "\1\u019c\3\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\43\0\1\u019d\114\0\1\u019e\117\0\1\u019f"+
    "\152\0\1\u01a0\55\0\1\u01a1\113\0\1\u01a2\6\0\1\u01a2"+
    "\131\0\1\u01a3\70\0\1\u01a4\6\0\1\u01a4\113\0\1\u01a5"+
    "\12\0\1\u01a5\103\0\3\u01a6\37\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\6\37\1\0\6\37\3\u01a7\5\37"+
    "\1\u01a8\1\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\2\37\1\u01a9\3\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\6\37"+
    "\3\u01aa\7\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\6\37\1\0\14\37\1\u01ab\3\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\6\37"+
    "\3\u01ac\7\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\2\37\1\u01ad\3\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\u01ae\1\0\10\37\26\0\6\37\1\0\20\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\54\0\3\u01af\37\0\1\u0154\1\0\1\u0154\1\0\10\u0154"+
    "\26\0\6\u0154\1\0\20\u0154\2\0\5\u0154\1\0\1\u0154"+
    "\1\0\3\u0154\1\0\1\u01b0\3\0\1\u0154\3\131\1\0"+
    "\2\131\3\0\2\131\1\0\1\131\1\0\3\131\1\0"+
    "\1\u0155\1\131\1\350\1\131\1\0\14\131\6\0\1\131"+
    "\2\0\1\131\3\0\1\131\11\0\2\131\2\0\1\131"+
    "\2\0\1\131\1\0\1\131\3\0\5\131\1\0\15\131"+
    "\1\0\3\131\2\0\1\131\1\350\1\131\1\u0157\103\131"+
    "\1\u0158\3\131\1\u0158\1\347\1\131\1\350\1\131\1\351"+
    "\66\131\1\0\1\u015a\1\0\1\u015a\1\0\10\u015a\1\u0158"+
    "\2\0\1\u01b1\1\u0158\21\0\6\u015a\1\0\20\u015a\2\0"+
    "\5\u015a\1\0\1\u015a\1\0\3\u015a\5\0\1\u015a\15\146"+
    "\1\u015b\3\146\1\u015b\110\146\1\u015d\3\146\1\u015d\73\146"+
    "\15\171\1\172\3\171\1\172\14\171\1\172\11\171\1\u01b2"+
    "\6\171\1\u01b2\13\171\1\172\21\171\60\0\3\u01b3\115\0"+
    "\2\u01b4\31\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\3\37\1\u01b5\2\37\1\0\20\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\1\u01b6\5\37\1\0\20\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\u01b7\1\0\10\37\26\0\6\37"+
    "\1\0\20\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\6\37\1\0\20\37\2\0\1\37\1\u01b8\3\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\2\37\1\u01b9\5\37\26\0\6\37"+
    "\1\0\20\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\6\37\1\0\17\37\1\u01ba\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\6\37\1\0\6\37\3\u01bb"+
    "\7\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\6\37\1\0\20\37\2\0\1\u01bc\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\2\37\1\u01bd\3\37\1\0\20\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\u01be\1\0\10\37\26\0\6\37"+
    "\1\0\20\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\6\37\1\0\14\37\1\u01bf\3\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\1\u01c0"+
    "\12\37\1\u01c0\4\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\6\37\1\0\20\37\2\0\2\37\2\u01c1"+
    "\1\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\u0174\1\0\1\u0174\1\0\10\u0174\1\u01c2\3\0\1\u01c3"+
    "\21\0\6\u0174\1\0\20\u0174\2\0\5\u0174\1\0\1\u0174"+
    "\1\0\3\u0174\5\0\1\u0174\3\0\1\u01c4\2\0\3\u01c4"+
    "\1\0\2\u01c4\27\0\6\u01c4\1\0\20\u01c4\2\0\5\u01c4"+
    "\1\0\1\u01c4\1\0\3\u01c4\5\0\1\u01c4\3\0\1\u01c5"+
    "\2\0\3\u01c5\1\0\2\u01c5\27\0\6\u01c5\1\0\20\u01c5"+
    "\2\0\5\u01c5\1\0\1\u01c5\1\0\3\u01c5\5\0\1\u01c5"+
    "\44\0\1\u01c6\6\0\1\u01c6\42\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\1\37\1\u01c7\4\37\1\0\1\37"+
    "\1\u01c7\16\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\6\37\1\0\6\37\3\u01c8\7\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\1\37\1\u01c9\4\37"+
    "\1\0\1\37\1\u01c9\16\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\6\37\1\0\20\37\2\0\1\u01ca"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\6\37\1\0"+
    "\2\37\3\u01cb\13\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\6\37\1\0\16\37\1\u01cc\1\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\2\37\1\u01cd"+
    "\3\37\1\0\20\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\6\37\1\0\6\37\3\u01ce\7\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\6\37\1\0"+
    "\1\u01cf\12\37\1\u01cf\4\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\6\37\1\0\17\37\1\u01d0\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\u01d1\1\0\10\37\26\0\6\37\1\0"+
    "\20\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\6\37\1\0\2\37\3\u01d2\13\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\6\37\1\0\1\u01d3\12\37"+
    "\1\u01d3\4\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\6\37\1\0\20\37\2\0\1\37\1\u01d4\3\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\6\37"+
    "\3\u01d5\7\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\5\37\1\u01d6\1\0\5\37\1\u01d6\12\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\6\37\1\0"+
    "\16\37\1\u01d7\1\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\1\37\1\u01d8\4\37\1\0\1\37\1\u01d8"+
    "\16\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\u01d9\1\0\10\37\26\0"+
    "\2\37\1\u01da\3\37\1\0\20\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\6\37\1\0\1\u01db\12\37"+
    "\1\u01db\4\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\u01dc\1\0\10\37"+
    "\26\0\6\37\1\0\20\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\u01dd"+
    "\1\0\10\37\26\0\6\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\1\u01de"+
    "\12\37\1\u01de\4\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\2\37\1\u01df\3\37\1\0\20\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\3\37\1\u01e0"+
    "\2\37\1\0\20\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\6\37\1\0\6\37\3\u01e1\7\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\2\37\1\u01e2"+
    "\3\37\1\0\20\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\6\37\1\0\1\u01e3\12\37\1\u01e3\4\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\26\0\4\37"+
    "\1\u01e4\1\37\1\0\20\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\u01e5"+
    "\1\0\10\37\26\0\6\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\45\0\1\u01e6"+
    "\135\0\1\u01e7\73\0\1\u01e8\52\0\1\u01e9\177\0\1\u01ea"+
    "\73\0\1\u01eb\57\0\1\u01ec\164\0\3\u01ed\35\0\1\u01ee"+
    "\12\0\1\u01ea\32\0\1\u01ef\46\0\1\u01e6\112\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\14\37"+
    "\1\u01f0\3\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\3\37\1\u01f1\2\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\20\37"+
    "\2\0\4\37\1\u01f2\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\1\37\1\u01f3\4\37\1\0\1\37\1\u01f3\16\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\2\37\1\u01f4"+
    "\3\37\1\0\20\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\3\37\1\u01f5\2\37\1\0\20\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\6\37\1\0"+
    "\14\37\1\u01f6\3\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\6\37\1\0\1\u01f7\12\37\1\u01f7\4\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\54\0\3\u01f8\53\0\1\u0158\3\0\1\u0158\73\0\15\171"+
    "\1\172\3\171\1\172\14\171\1\172\5\171\1\u01f9\6\171"+
    "\1\u01f9\17\171\1\172\21\171\63\0\2\u01fa\31\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\4\37\1\u01fb\1\37"+
    "\1\0\20\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\1\37\1\u01fc\4\37\1\0\1\37\1\u01fc\16\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\26\0\5\37"+
    "\1\u01fd\1\0\5\37\1\u01fd\12\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\6\37\1\0\6\37\3\u01fe"+
    "\7\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\6\37\1\0\6\37\3\u01ff\7\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\2\37\1\u0200\5\37\26\0\6\37\1\0"+
    "\20\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\5\37\1\u0201\1\0\5\37\1\u0201\12\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\14\37"+
    "\1\u0202\3\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\6\37\1\0\6\37\3\u0203\7\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\15\0\1\u01c2"+
    "\100\0\1\u01c4\1\0\1\u01c4\1\0\10\u01c4\6\0\1\u0204"+
    "\17\0\6\u01c4\1\0\20\u01c4\2\0\5\u01c4\1\0\1\u01c4"+
    "\1\0\3\u01c4\5\0\1\u01c4\1\0\1\u01c5\1\0\1\u01c5"+
    "\1\0\10\u01c5\26\0\6\u01c5\1\0\20\u01c5\1\u0205\1\0"+
    "\5\u01c5\1\0\1\u01c5\1\0\3\u01c5\5\0\1\u01c5\60\0"+
    "\3\u0206\33\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\3\37\1\u0207\2\37\1\0\20\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\1\37\1\u0208\4\37\1\0"+
    "\1\37\1\u0208\16\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\2\37\1\u0209\3\37\1\0\20\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\6\37\1\0"+
    "\11\37\2\u020a\5\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\6\37\1\0\14\37\1\u020b\3\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\1\37\1\u020c"+
    "\4\37\1\0\1\37\1\u020c\16\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\3\37\1\u020d\2\37\1\0"+
    "\20\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\5\37\1\u020e\1\0\5\37\1\u020e\12\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\17\37"+
    "\1\u020f\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\4\37\1\u0210\1\37\1\0\20\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\2\37\1\u0211\5\37\26\0\6\37\1\0"+
    "\20\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\2\37\1\u0212\3\37\1\0\20\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\3\37\1\u0213\2\37\1\0"+
    "\20\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\6\37\1\0\20\37\2\0\4\37\1\u0214\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\5\37\1\u0215\1\0\5\37\1\u0215"+
    "\12\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\6\37\1\0\1\u0216\12\37\1\u0216\4\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\1\u0217"+
    "\12\37\1\u0217\4\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\5\37\1\u0218\1\0\5\37\1\u0218\12\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\26\0\6\37"+
    "\1\0\14\37\1\u0219\3\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\52\0\1\u01ea\12\0\1\u01ea"+
    "\32\0\1\u021a\12\0\1\u01ea\32\0\1\u01ef\107\0\1\u01eb"+
    "\6\0\1\u01eb\111\0\1\u01e6\6\0\1\u01e6\53\0\1\u01ea"+
    "\32\0\1\u01ef\137\0\1\u01ea\106\0\1\u021b\74\0\1\u021c"+
    "\135\0\1\u021d\26\0\1\37\1\0\1\u021e\1\0\10\37"+
    "\26\0\6\37\1\0\20\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\5\37\1\u021f\1\0\5\37\1\u021f"+
    "\12\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\u0220\1\0\10\37\26\0"+
    "\6\37\1\0\20\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\6\37\1\0\20\37\2\0\5\37\1\0"+
    "\1\37\1\0\1\37\1\u0221\1\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\6\37\1\0"+
    "\2\37\3\u0222\13\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\u0223\1\0"+
    "\10\37\26\0\6\37\1\0\20\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\6\37\1\0\1\u0224\12\37"+
    "\1\u0224\4\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\6\37\1\0\17\37\1\u0225\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\3\0\1\u0226\2\0"+
    "\3\u0226\1\0\2\u0226\27\0\6\u0226\1\0\20\u0226\2\0"+
    "\5\u0226\1\0\1\u0226\1\0\3\u0226\5\0\1\u0226\15\171"+
    "\1\172\3\171\1\172\14\171\1\172\21\171\3\u0227\10\171"+
    "\1\172\21\171\52\0\1\u0228\12\0\1\u0228\30\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\2\37"+
    "\3\u0229\13\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\u022a\1\0\10\37"+
    "\26\0\6\37\1\0\20\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\6\37\1\0\14\37\1\u022b\3\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\26\0\6\37"+
    "\1\0\1\u022c\12\37\1\u022c\4\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\6\37\1\0\14\37\1\u022d"+
    "\3\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\6\37\1\0\17\37\1\u022e\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\6\37\1\0\20\37\2\0\1\u022f"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\1\u0230\5\37"+
    "\1\0\20\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\15\0\1\u01c2\3\0\1\u01c3\110\0\1\u0231"+
    "\3\0\1\u0232\156\0\2\u0233\31\0\1\37\1\0\1\u0234"+
    "\1\0\10\37\26\0\6\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\5\37\1\u0235\1\0"+
    "\5\37\1\u0235\12\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\2\37\1\u0236\3\37\1\0\20\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\6\37\1\0"+
    "\1\u0237\12\37\1\u0237\4\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\u0238"+
    "\1\0\10\37\26\0\6\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\16\37"+
    "\1\u0239\1\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\u023a\1\0\10\37"+
    "\26\0\6\37\1\0\20\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\2\37\1\u023b\3\37\1\0\20\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\26\0\4\37"+
    "\1\u023c\1\37\1\0\20\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\5\37\1\u023d\1\0\5\37\1\u023d"+
    "\12\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\u023e\1\0\10\37\26\0"+
    "\6\37\1\0\20\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\6\37\1\0\1\u023f\12\37\1\u023f\4\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\u0240\1\0\10\37\26\0\6\37"+
    "\1\0\20\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\45\0\1\u0241\52\0\1\u01ea\200\0\1\u01ea"+
    "\30\0\1\u0242\112\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\6\37\1\0\20\37\2\0\5\37\1\0\1\37"+
    "\1\0\1\37\1\u0243\1\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\1\u0244"+
    "\12\37\1\u0244\4\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\6\37\1\0\2\37\3\u0245\13\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\6\37\1\0"+
    "\20\37\2\0\5\37\1\0\1\37\1\0\1\37\1\u0246"+
    "\1\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\6\37\1\0\2\37\3\u0247\13\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\6\37\1\0"+
    "\20\37\2\0\5\37\1\0\1\37\1\0\1\37\1\u0248"+
    "\1\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\6\37\1\0\20\37\2\0\5\37\1\0"+
    "\1\37\1\0\1\37\1\u0249\1\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\1\u024a\5\37"+
    "\1\0\20\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\u0226\1\0\1\u0226\1\0\10\u0226"+
    "\26\0\6\u0226\1\0\20\u0226\2\0\5\u0226\1\0\1\u0226"+
    "\1\0\3\u0226\5\0\1\u0226\15\171\1\172\3\171\1\172"+
    "\14\171\1\172\24\171\2\u024b\6\171\1\172\21\171\15\0"+
    "\2\u024c\2\0\1\u024c\74\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\2\37\1\u024d\3\37\1\0\20\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\2\37\1\u024e"+
    "\3\37\1\0\20\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\5\37\1\u024f\1\0\5\37\1\u024f\12\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\u0250\1\0\10\37\26\0\6\37"+
    "\1\0\20\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\3\37\1\u0251\2\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\15\0\1\u0231"+
    "\151\0\1\u0252\12\0\1\u0252\30\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\6\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\37\1\0\1\37\1\u0253\1\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\26\0\6\37"+
    "\1\0\1\u0254\12\37\1\u0254\4\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\5\37\1\u0255\1\0\5\37"+
    "\1\u0255\12\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\u0256\1\0\10\37"+
    "\26\0\6\37\1\0\20\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\6\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\37\1\0\1\37\1\u0257\1\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\26\0\5\37"+
    "\1\u0258\1\0\5\37\1\u0258\12\37\2\0\5\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\26\0\1\u0259\5\37\1\0\20\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\u025a\1\0\10\37\26\0\6\37"+
    "\1\0\20\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\3\37\1\u025b\2\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\u025c\1\0\10\37\26\0\6\37\1\0\20\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\46\0\1\u01ea\112\0\1\u01ea\6\0\1\u01ea\42\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\20\37"+
    "\2\0\5\37\1\0\1\37\1\0\1\37\1\u025d\1\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\6\37\1\0\6\37\3\u025e\7\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\11\37"+
    "\2\u025f\5\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\6\37\1\0\20\37\2\0\5\37\1\0\1\37"+
    "\1\0\1\37\1\u0260\1\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\20\37"+
    "\2\0\5\37\1\0\1\37\1\0\1\37\1\u0261\1\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\5\37\1\u0262\1\0\5\37\1\u0262\12\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\4\37\1\u0263"+
    "\1\37\1\0\20\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\15\171\1\172\3\171\1\172\14\171"+
    "\1\172\13\171\1\u0264\12\171\1\u0264\5\171\1\172\21\171"+
    "\15\0\2\u024c\2\0\1\u024c\44\0\1\u0265\27\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\5\37\1\u0266\1\0"+
    "\5\37\1\u0266\12\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\1\37\1\u0267\4\37\1\0\1\37\1\u0267"+
    "\16\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\6\37\1\0\17\37\1\u0268\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\30\0\1\u0269\65\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\1\u026a\5\37\1\0"+
    "\20\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\u026b\1\0\10\37\26\0"+
    "\6\37\1\0\20\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\1\u026c\5\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\u026d\1\0\10\37\26\0\6\37\1\0\20\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\2\37\1\u026e\5\37"+
    "\26\0\6\37\1\0\20\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\1\u026f\5\37\1\0\20\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\6\37\1\0"+
    "\1\u0270\12\37\1\u0270\4\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\4\37\1\u0271\1\37\1\0\20\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\26\0\1\u0272"+
    "\5\37\1\0\20\37\2\0\5\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\2\37\1\u0273\3\37\1\0\20\37\2\0"+
    "\5\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\6\37\1\0"+
    "\20\37\2\0\5\37\1\0\1\37\1\0\1\37\1\u0274"+
    "\1\37\5\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\26\0\1\u0275\5\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\20\37"+
    "\2\0\5\37\1\0\1\37\1\0\1\37\1\u0276\1\37"+
    "\5\0\1\37\15\171\1\172\3\171\1\172\6\171\1\u0277"+
    "\5\171\1\172\34\171\1\172\21\171\45\0\1\u0278\50\0"+
    "\1\37\1\0\1\37\1\0\10\37\26\0\6\37\1\0"+
    "\17\37\1\u0279\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\u027a\1\0\10\37"+
    "\26\0\6\37\1\0\20\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\15\0\2\u0269\2\0\1\u0269"+
    "\74\0\1\37\1\0\1\37\1\0\10\37\26\0\3\37"+
    "\1\u027b\2\37\1\0\20\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\3\37\1\u027c\2\37\1\0\20\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\2\37\1\u027d\5\37"+
    "\26\0\6\37\1\0\20\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\6\37\1\0\2\37\3\u027e\13\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\26\0\3\37"+
    "\1\u027f\2\37\1\0\20\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\5\37\1\u0280\1\0\5\37\1\u0280"+
    "\12\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\6\37\1\0\20\37\2\0\4\37\1\u0281\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\6\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\37\1\0\1\37\1\u0282\1\37\5\0\1\37"+
    "\15\171\1\u0283\1\u0277\2\171\1\u0283\14\171\1\172\34\171"+
    "\1\172\21\171\46\0\1\u0284\47\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\5\37\1\u0285\1\0\5\37\1\u0285"+
    "\12\37\2\0\5\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\26\0"+
    "\5\37\1\u0286\1\0\5\37\1\u0286\12\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\20\37"+
    "\2\0\5\37\1\0\1\37\1\0\1\37\1\u0287\1\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\u0288\1\0\10\37"+
    "\26\0\6\37\1\0\20\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\6\37\1\0\11\37\2\u0289\5\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\67\0\1\u028a\26\0\1\37\1\0\1\u028b\1\0\10\37"+
    "\26\0\6\37\1\0\20\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\1\u028c"+
    "\1\0\10\37\26\0\6\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\20\37"+
    "\2\0\5\37\1\0\1\37\1\0\1\37\1\u028d\1\37"+
    "\5\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\6\37\1\0\20\37\2\0\5\37\1\0\1\37"+
    "\1\0\1\37\1\u028e\1\37\5\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\26\0\6\37\1\0\6\37"+
    "\3\u028f\7\37\2\0\5\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\70\0\1\u0290\25\0\1\37\1\0\1\37"+
    "\1\0\10\37\26\0\6\37\1\0\20\37\2\0\5\37"+
    "\1\0\1\37\1\0\1\37\1\u0291\1\37\5\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\26\0\6\37"+
    "\1\0\14\37\1\u0292\3\37\2\0\5\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\45\0\1\u0293\50\0\1\37"+
    "\1\0\1\u0294\1\0\10\37\26\0\6\37\1\0\20\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\67\0\1\u0295\26\0\1\37\1\0\1\37\1\0\10\37"+
    "\26\0\1\37\1\u0296\4\37\1\0\1\37\1\u0296\16\37"+
    "\2\0\5\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\3\0\1\u0297\126\0\2\u0297\2\0\1\u0297\5\0\1\u0298"+
    "\102\0\2\u0298\2\0\1\u0298\1\0\1\u0299\37\0\2\u029a"+
    "\5\0\1\u029b\105\0\2\u029c\121\0\1\u029d\106\0\2\u029e"+
    "\121\0\1\u029f\106\0\2\u02a0\121\0\1\u02a1\106\0\2\u02a2"+
    "\45\0\2\u02a0\2\0\1\u02a0\6\0\1\u02a3\147\0\2\u02a4"+
    "\53\0\1\u02a0\163\0\1\u02a0\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[41041];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\23\0\2\1\1\11\12\1\2\11\2\1\3\11\13\1"+
    "\1\11\25\1\2\11\2\1\1\11\6\1\1\11\2\1"+
    "\1\11\7\1\1\11\2\1\1\0\2\1\3\0\1\11"+
    "\2\1\1\0\1\11\3\1\1\11\1\1\1\11\1\1"+
    "\1\11\4\0\1\1\1\11\4\1\1\11\2\1\1\0"+
    "\1\1\1\0\2\1\2\0\6\1\1\11\2\0\4\1"+
    "\1\0\1\1\1\0\1\1\2\0\1\11\2\0\2\1"+
    "\1\0\42\1\1\0\3\1\1\11\1\1\12\0\1\1"+
    "\3\0\3\1\3\11\1\1\3\0\3\1\1\11\4\0"+
    "\1\1\2\0\1\11\1\0\1\11\5\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\1\1\0\1\11\1\0\2\11"+
    "\2\1\1\11\3\0\15\1\1\0\1\1\3\0\47\1"+
    "\12\0\7\1\1\11\2\1\1\0\1\1\1\0\1\11"+
    "\1\0\1\11\1\1\1\0\1\11\1\0\1\1\1\0"+
    "\2\11\1\1\2\0\20\1\4\0\45\1\12\0\10\1"+
    "\1\0\1\11\1\0\1\1\1\0\1\11\15\1\1\11"+
    "\1\1\3\0\37\1\11\0\1\11\12\1\1\0\11\1"+
    "\3\0\23\1\4\0\23\1\1\11\1\1\1\0\15\1"+
    "\2\0\11\1\1\0\5\1\1\0\22\1\1\0\22\1"+
    "\1\0\13\1\1\0\5\1\1\0\5\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\14\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[676];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    private final StateStack stack = new StateStack();
    private String heredoc = null;
    private int hereocLength = 0;
    private boolean aspTagsAllowed;
    private boolean shortTagsAllowed;
    private LexerInput input;

    public PHP5ColoringLexer(LexerRestartInfo info, boolean shortTagsAllowed, boolean aspTagsAllowed, boolean inPHP) {
        this.input = info.input();
        this.aspTagsAllowed = aspTagsAllowed;
        this.shortTagsAllowed = shortTagsAllowed;

        if (info.state() != null) {
            //reset state
            setState((LexerState) info.state());
        } else {
            //initial state
            stack.pushStack(YYINITIAL);
            if (inPHP) {
                stack.pushStack(ST_PHP_IN_SCRIPTING);
                zzState = ST_PHP_IN_SCRIPTING;
                zzLexicalState = ST_PHP_IN_SCRIPTING;
            } else {
                zzState = YYINITIAL;
                zzLexicalState = YYINITIAL;
            }
        }

    }

    public static final class LexerState  {
        final StateStack stack;
        /* the current state of the DFA */
        final int zzState;
        /* the current lexical state */
        final int zzLexicalState;
        /* remember the heredoc */
        final String heredoc;
        /* and the lenght of */
        final int hereocLength;

        LexerState(StateStack stack, int zzState, int zzLexicalState, String heredoc, int hereocLength) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.heredoc = heredoc;
            this.hereocLength = hereocLength;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null || obj.getClass() != this.getClass()) {
                return false;
            }

            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                && (this.zzLexicalState == state.zzLexicalState)
                && (this.hereocLength == state.hereocLength)
                && ((this.heredoc == null && state.heredoc == null) || (this.heredoc != null && state.heredoc != null && this.heredoc.equals(state.heredoc))));
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            hash = 31 * hash + this.hereocLength;
            if (heredoc != null) {
                hash = 31 * hash + this.heredoc.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.createClone(), zzState, zzLexicalState, heredoc, hereocLength);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
        this.heredoc = state.heredoc;
        this.hereocLength = state.hereocLength;
    }

    protected boolean isHeredocState(int state) {
        return state == ST_PHP_HEREDOC || state == ST_PHP_START_HEREDOC || state == ST_PHP_END_HEREDOC || state == ST_PHP_NOWDOC;
    }

    public int[] getParamenters() {
        return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }

    protected int getZZStartRead() {
        return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
        return this.zzPushbackPos;
    }

    protected void pushBack(int i) {
        yypushback(i);
    }

    protected void popState() {
        yybegin(stack.popStack());
    }

    protected void pushState(final int state) {
        stack.pushStack(getZZLexicalState());
        yybegin(state);
    }


 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PHP5ColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PHP5ColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1794) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PHPTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1:
          { return PHPTokenId.T_INLINE_HTML;
          }
        case 145: break;
        case 2:
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 146: break;
        case 3:
          { return PHPTokenId.PHP_NUMBER;
          }
        case 147: break;
        case 4:
          { return PHPTokenId.PHP_TOKEN;
          }
        case 148: break;
        case 5:
          { return  PHPTokenId.PHP_STRING;
          }
        case 149: break;
        case 6:
          { return PHPTokenId.PHP_OPERATOR;
          }
        case 150: break;
        case 7:
          { return PHPTokenId.WHITESPACE;
          }
        case 151: break;
        case 8:
          { return PHPTokenId.PHP_SEMICOLON;
          }
        case 152: break;
        case 9:
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 153: break;
        case 10:
          { return PHPTokenId.PHP_NS_SEPARATOR;
          }
        case 154: break;
        case 11:
          { pushState(ST_PHP_BACKQUOTE);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 155: break;
        case 12:
          { return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 156: break;
        case 13:
          { int lastState = stack.get(stack.size() - 1);
    if (lastState != ST_PHP_IN_SCRIPTING && lastState != YYINITIAL) {
        // probably in some sub state -> "{$" or "${"
        popState();
    }
    return PHPTokenId.PHP_CURLY_CLOSE;
          }
        case 157: break;
        case 14:
          { pushState(ST_PHP_LINE_COMMENT);
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 158: break;
        case 15:
          { return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 159: break;
        case 16:
          { return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 160: break;
        case 17:
          { popState();
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 161: break;
        case 18:
          { yypushback(1);
        popState();
          }
        case 162: break;
        case 19:
          { yypushback(yylength());
        popState();
          }
        case 163: break;
        case 20:
          { yypushback(1);
        yybegin(ST_PHP_HEREDOC);
          }
        case 164: break;
        case 21:
          { yypushback(1);
    yybegin(ST_PHP_NOWDOC);
          }
        case 165: break;
        case 22:
          { yypushback(1);
    popState();
          }
        case 166: break;
        case 23:
          { popState();
    return PHPTokenId.PHP_STRING;
          }
        case 167: break;
        case 24:
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens
    return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 168: break;
        case 25:
          { yypushback(1);
    popState();
        if (yylength() > 0)
            return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 169: break;
        case 26:
          { popState();
    return PHPTokenId.PHP_TOKEN;
          }
        case 170: break;
        case 27:
          { String yytext = yytext();
    switch (yytext.charAt(yytext.length() - 1)) {
        case '?':
        case '%':
            yypushback(1);
            break;
        default:
            popState();
    }
     return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 171: break;
        case 28:
          { return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 172: break;
        case 29:
          { return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 173: break;
        case 30:
          { popState();return PHPTokenId.WHITESPACE;
          }
        case 174: break;
        case 31:
          { popState();
    return PHPTokenId.T_INLINE_HTML;
          }
        case 175: break;
        case 32:
          { if (aspTagsAllowed) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 176: break;
        case 33:
          { if (shortTagsAllowed ) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 177: break;
        case 34:
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 178: break;
        case 35:
          { return PHPTokenId.PHP_VARIABLE;
          }
        case 179: break;
        case 36:
          { pushState(ST_PHP_COMMENT);
    return PHPTokenId.PHP_COMMENT_START;
          }
        case 180: break;
        case 37:
          { if (aspTagsAllowed) {
            yybegin(YYINITIAL);
            stack.clear();
        return PHPTokenId.PHP_CLOSETAG;
    }
    return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 181: break;
        case 38:
          { return PHPTokenId.PHP_TEXTUAL_OPERATOR;
          }
        case 182: break;
        case 39:
          { return PHPTokenId.PHP_AS;
          }
        case 183: break;
        case 40:
          { return PHPTokenId.PHP_DO;
          }
        case 184: break;
        case 41:
          { return PHPTokenId.PHP_IF;
          }
        case 185: break;
        case 42:
          { //popState();
        yybegin(YYINITIAL);
        if (yylength() > 2) {
            yypushback(yylength()-2);
        }
        stack.clear();
    return PHPTokenId.PHP_CLOSETAG;
          }
        case 186: break;
        case 43:
          { pushState(ST_PHP_LOOKING_FOR_CLASS_CONST);
    return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 187: break;
        case 44:
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 188: break;
        case 45:
          { yypushback(1);
    return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 189: break;
        case 46:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_TOKEN;
          }
        case 190: break;
        case 47:
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 191: break;
        case 48:
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 192: break;
        case 49:
          { int trailingNewLineLength = 1;
        int label_len = yylength() - trailingNewLineLength;
        int back = trailingNewLineLength;

        if (yytext().charAt(label_len-1)==';') {
           label_len--;
           back++;
        }
        if (label_len == hereocLength && yytext().substring(label_len - hereocLength,label_len).equals(heredoc)) {
            back = back + hereocLength;
            yypushback(back);
            yybegin(ST_PHP_END_HEREDOC);
        } else {
            yypushback(yylength() - trailingNewLineLength);
            yybegin(ST_PHP_HEREDOC);
        }
          }
        case 193: break;
        case 50:
          { heredoc=null;
    hereocLength=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 1;
    // mark just the label
    if (yytext().charAt(yylength() - 2)==';') {
        back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_HEREDOC_TAG_END;
          }
        case 194: break;
        case 51:
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
        label_len--;
    }

    if (label_len==hereocLength && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        hereocLength=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_NOWDOC_TAG_END;
    } else {
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 195: break;
        case 52:
          { heredoc=null; hereocLength=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 1;
    // mark just the label
    if (yytext().charAt(yylength() - 2)==';') {
        back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_NOWDOC_TAG_END;
          }
        case 196: break;
        case 53:
          { return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 197: break;
        case 54:
          { popState();
    return PHPTokenId.PHP_COMMENT_END;
          }
        case 198: break;
        case 55:
          { popState();
    return PHPTokenId.PHPDOC_COMMENT_END;
          }
        case 199: break;
        case 56:
          { popState();
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 200: break;
        case 57:
          { if (aspTagsAllowed) {
            yybegin(YYINITIAL);
            stack.clear();
        return PHPTokenId.PHP_CLOSETAG;
    }
    String text = yytext();
    if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
        popState();
    }
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 201: break;
        case 58:
          { String text = yytext();
    if ((text.charAt(1)=='%' && aspTagsAllowed)
        || (text.charAt(1)=='?')) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.T_OPEN_TAG_WITH_ECHO;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 202: break;
        case 59:
          { return PHPTokenId.PHP_FOR;
          }
        case 203: break;
        case 60:
          { return PHPTokenId.PHP_NEW;
          }
        case 204: break;
        case 61:
          { return PHPTokenId.PHP_DIE;
          }
        case 205: break;
        case 62:
          { return PHPTokenId.PHP_TRY;
          }
        case 206: break;
        case 63:
          { return PHPTokenId.PHP_USE;
          }
        case 207: break;
        case 64:
          { return PHPTokenId.PHP_VAR;
          }
        case 208: break;
        case 65:
          { yypushback(1);
    pushState(ST_PHP_VAR_OFFSET);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 209: break;
        case 66:
          { String text = yytext();
        int lastIndexOfDollar = text.lastIndexOf('$');
        yypushback(text.length() - lastIndexOfDollar);
        return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 210: break;
        case 67:
          { yypushback(2);
        return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 211: break;
        case 68:
          { int trailingNewLineLength = 1;
        int label_len = yylength() - trailingNewLineLength;
        int back = trailingNewLineLength;

        if (yytext().charAt(label_len-1)==';') {
           label_len--;
           back++;
        }
        if (label_len > hereocLength && yytext().substring(label_len - hereocLength,label_len).equals(heredoc)) {
            back = back + hereocLength;
            yypushback(back);
            yybegin(ST_PHP_END_HEREDOC);
        } else {
            yypushback(trailingNewLineLength);
            return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
        }
          }
        case 212: break;
        case 69:
          { int label_len = yylength() - 1;
    int back = 1;

    if (yytext().charAt(label_len-1)==';') {
       label_len--;
           back++;
    }
    if (label_len > hereocLength && yytext().substring(label_len - hereocLength,label_len).equals(heredoc)) {
        back = back + hereocLength;
        yypushback(back);
        yybegin(ST_PHP_END_NOWDOC);
    }
    else {
        yypushback(1);
    }
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 213: break;
        case 70:
          { yypushback(2);
    return PHPTokenId.PHP_COMMENT;
          }
        case 214: break;
        case 71:
          { yypushback(2); // go back to mark end of comment in the next token
        return PHPTokenId.PHPDOC_COMMENT;
          }
        case 215: break;
        case 72:
          { return PHPTokenId.PHP_EXIT;
          }
        case 216: break;
        case 73:
          { return PHPTokenId.PHP_ECHO;
          }
        case 217: break;
        case 74:
          { return PHPTokenId.PHP_ELSE;
          }
        case 218: break;
        case 75:
          { return PHPTokenId.PHP_EVAL;
          }
        case 219: break;
        case 76:
          { pushState(ST_PHP_DOC_COMMENT);
    yypushback(yylength()-3);
    return PHPTokenId.PHPDOC_COMMENT_START;
          }
        case 220: break;
        case 77:
          { return PHPTokenId.PHP_NULL;
          }
        case 221: break;
        case 78:
          { return PHPTokenId.PHP_CASE;
          }
        case 222: break;
        case 79:
          { return PHPTokenId.PHP_TRUE;
          }
        case 223: break;
        case 80:
          { return PHPTokenId.PHP_SELF;
          }
        case 224: break;
        case 81:
          { return PHPTokenId.PHP_LIST;
          }
        case 225: break;
        case 82:
          { return PHPTokenId.PHP_GOTO;
          }
        case 226: break;
        case 83:
          { pushState(ST_PHP_IN_SCRIPTING);
    //yybegin(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_OPENTAG;
    //return createSymbol(ASTSymbol.T_OPEN_TAG);
          }
        case 227: break;
        case 84:
          { return PHPTokenId.PHP_ENDIF;
          }
        case 228: break;
        case 85:
          { return PHPTokenId.PHP_EMPTY;
          }
        case 229: break;
        case 86:
          { return PHPTokenId.PHP_FALSE;
          }
        case 230: break;
        case 87:
          { return PHPTokenId.PHP_FINAL;
          }
        case 231: break;
        case 88:
          { return PHPTokenId.PHP_BREAK;
          }
        case 232: break;
        case 89:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    hereocLength = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        hereocLength--;
    }
    // HEREDOC PHP 5.3
    if (yytext().charAt(startString) == '"') {
        hereocLength -= 2;
        startString ++;
    }
    heredoc = yytext().substring(startString,hereocLength+startString);
    yybegin(ST_PHP_START_HEREDOC);
    return PHPTokenId.PHP_HEREDOC_TAG_START;
          }
        case 233: break;
        case 90:
          { return PHPTokenId.PHP_ARRAY;
          }
        case 234: break;
        case 91:
          { return PHPTokenId.PHP_CONST;
          }
        case 235: break;
        case 92:
          { return PHPTokenId.PHP_CATCH;
          }
        case 236: break;
        case 93:
          { return PHPTokenId.PHP_CLONE;
          }
        case 237: break;
        case 94:
          { return PHPTokenId.PHP_CLASS;
          }
        case 238: break;
        case 95:
          { return PHPTokenId.PHP_TRAIT;
          }
        case 239: break;
        case 96:
          { return PHPTokenId.PHP_THROW;
          }
        case 240: break;
        case 97:
          { return PHPTokenId.PHP_ISSET;
          }
        case 241: break;
        case 98:
          { return PHPTokenId.PHP_PRINT;
          }
        case 242: break;
        case 99:
          { return PHPTokenId.PHP_UNSET;
          }
        case 243: break;
        case 100:
          { return PHPTokenId.PHP_YIELD;
          }
        case 244: break;
        case 101:
          { return PHPTokenId.PHP_WHILE;
          }
        case 245: break;
        case 102:
          { return PHPTokenId.PHP_CASTING;
          }
        case 246: break;
        case 103:
          { popState();
        return PHPTokenId.PHP_STRING;
          }
        case 247: break;
        case 104:
          { return PHPTokenId.PHP_ENDFOR;
          }
        case 248: break;
        case 105:
          { return PHPTokenId.PHP_ELSEIF;
          }
        case 249: break;
        case 106:
          { return PHPTokenId.PHP_RETURN;
          }
        case 250: break;
        case 107:
          { return PHPTokenId.PHP_STATIC;
          }
        case 251: break;
        case 108:
          { return PHPTokenId.PHP_SWITCH;
          }
        case 252: break;
        case 109:
          { return PHPTokenId.PHP_PARENT;
          }
        case 253: break;
        case 110:
          { return PHPTokenId.PHP_PUBLIC;
          }
        case 254: break;
        case 111:
          { return PHPTokenId.PHP_GLOBAL;
          }
        case 255: break;
        case 112:
          { return PHPTokenId.PHP_EXTENDS;
          }
        case 256: break;
        case 113:
          { return PHPTokenId.PHP_FOREACH;
          }
        case 257: break;
        case 114:
          { return PHPTokenId.PHP_FINALLY;
          }
        case 258: break;
        case 115:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
        int startString=3+bprefix;
        /* 3 is <<<, 2 is quotes, 1 is newline */
        hereocLength = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
        while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
            startString++;
            hereocLength--;
        }
        // first quate
        startString++;
        heredoc = yytext().substring(startString, hereocLength+startString);
        yybegin(ST_PHP_START_NOWDOC);
        return PHPTokenId.PHP_NOWDOC_TAG_START;
          }
        case 259: break;
        case 116:
          { return PHPTokenId.PHP_REQUIRE;
          }
        case 260: break;
        case 117:
          { return PHPTokenId.PHP_DEFAULT;
          }
        case 261: break;
        case 118:
          { return PHPTokenId.PHP_DECLARE;
          }
        case 262: break;
        case 119:
          { return PHPTokenId.PHP_INCLUDE;
          }
        case 263: break;
        case 120:
          { return PHPTokenId.PHP_PRIVATE;
          }
        case 264: break;
        case 121:
          { return PHPTokenId.PHP__DIR__;
          }
        case 265: break;
        case 122:
          { return PHPTokenId.PHP_ENDWHILE;
          }
        case 266: break;
        case 123:
          { return PHPTokenId.PHP_FUNCTION;
          }
        case 267: break;
        case 124:
          { return PHPTokenId.PHP_ABSTRACT;
          }
        case 268: break;
        case 125:
          { return PHPTokenId.PHP_CONTINUE;
          }
        case 269: break;
        case 126:
          { return PHPTokenId.PHP__FILE__;
          }
        case 270: break;
        case 127:
          { return PHPTokenId.PHP__LINE__;
          }
        case 271: break;
        case 128:
          { return PHPTokenId.PHP_ENDSWITCH;
          }
        case 272: break;
        case 129:
          { return PHPTokenId.PHP_NAMESPACE;
          }
        case 273: break;
        case 130:
          { return PHPTokenId.PHP_INTERFACE;
          }
        case 274: break;
        case 131:
          { return PHPTokenId.PHP_INSTEADOF;
          }
        case 275: break;
        case 132:
          { return PHPTokenId.PHP_PROTECTED;
          }
        case 276: break;
        case 133:
          { return PHPTokenId.PHP__CLASS__;
          }
        case 277: break;
        case 134:
          { return PHPTokenId.PHP_ENDFOREACH;
          }
        case 278: break;
        case 135:
          { return PHPTokenId.PHP_ENDDECLARE;
          }
        case 279: break;
        case 136:
          { return PHPTokenId.PHP_INSTANCEOF;
          }
        case 280: break;
        case 137:
          { return PHPTokenId.PHP_IMPLEMENTS;
          }
        case 281: break;
        case 138:
          { return PHPTokenId.PHP__METHOD__;
          }
        case 282: break;
        case 139:
          { return PHPTokenId.PHP_REQUIRE_ONCE;
          }
        case 283: break;
        case 140:
          { return PHPTokenId.PHP_INCLUDE_ONCE;
          }
        case 284: break;
        case 141:
          { return PHPTokenId.PHP__FUNCTION__;
          }
        case 285: break;
        case 142:
          { return PHPTokenId.PHP__NAMESPACE__;
          }
        case 286: break;
        case 143:
          { pushState(ST_HALTED_COMPILER);
    return PHPTokenId.PHP_HALT_COMPILER;
          }
        case 287: break;
        case 144:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.T_INLINE_HTML;
          }
        case 288: break;
        default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
            switch (zzLexicalState) {
            case ST_PHP_COMMENT: {
              if (input.readLength() > 0) {
                input.backup(1);  // backup eof
                return PHPTokenId.PHP_COMMENT;
              }
              else {
                  return null;
              }
            }
            case 677: break;
            case ST_PHP_DOC_COMMENT: {
              if (input.readLength() > 0) {
                    input.backup(1);  // backup eof
                    return PHPTokenId.PHPDOC_COMMENT;
                }
                else {
                    return null;
                }
            }
            case 678: break;
            default:
              {        if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return PHPTokenId.UNKNOWN_TOKEN;
        } else {
            return null;
        }
 }
            }

          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
