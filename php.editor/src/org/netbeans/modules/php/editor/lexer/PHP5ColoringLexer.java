/* The following code was generated by JFlex 1.4.3 on 16/10/15 22:02 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2016 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2016 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;
import org.netbeans.modules.web.common.api.ByteStack;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16/10/15 22:02 from the specification file
 * <tt>/home/junichi11/hg/web-main/php.editor/tools/Php5ColoringScanner.flex</tt>
 */
public class PHP5ColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP_END_NOWDOC = 22;
  public static final int ST_PHP_NOWDOC = 18;
  public static final int ST_PHP_END_HEREDOC = 16;
  public static final int ST_PHP_COMMENT = 28;
  public static final int ST_PHP_START_HEREDOC = 14;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 8;
  public static final int ST_PHP_IN_SCRIPTING = 2;
  public static final int ST_PHP_LOOKING_FOR_CLASS_CONST = 10;
  public static final int ST_PHP_DOC_COMMENT = 30;
  public static final int ST_PHP_LINE_COMMENT = 32;
  public static final int ST_PHP_BACKQUOTE = 6;
  public static final int ST_PHP_START_NOWDOC = 20;
  public static final int ST_PHP_HEREDOC = 12;
  public static final int ST_HALTED_COMPILER = 36;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 34;
  public static final int ST_PHP_VAR_OFFSET = 26;
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_DOUBLE_QUOTES = 4;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
    16, 16, 17, 17, 18, 18
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\16\1\15\2\0\1\21\22\0\1\16\1\32\1\23\1\116"+
    "\1\22\1\36\1\37\1\100\1\107\1\65\1\34\1\31\1\17\1\4"+
    "\1\2\1\35\1\5\1\11\10\1\1\105\1\20\1\33\1\27\1\30"+
    "\1\43\1\42\1\46\1\10\1\70\1\50\1\3\1\7\1\75\1\77"+
    "\1\71\1\110\1\104\1\74\1\102\1\47\1\44\1\72\1\112\1\45"+
    "\1\67\1\73\1\76\1\106\1\103\1\6\1\101\1\13\1\114\1\24"+
    "\1\115\1\41\1\111\1\25\1\57\1\63\1\64\1\50\1\3\1\54"+
    "\1\62\1\77\1\51\1\110\1\104\1\55\1\102\1\52\1\56\1\66"+
    "\1\112\1\61\1\60\1\53\1\76\1\106\1\103\1\6\1\101\1\13"+
    "\1\26\1\40\1\113\1\42\53\13\1\13\12\13\1\13\4\13\1\13"+
    "\5\13\27\13\1\13\37\13\1\13\10\13\u01c2\12\4\0\14\12\16\0"+
    "\5\12\7\0\1\12\1\0\1\12\201\0\5\12\1\0\2\12\2\0"+
    "\4\12\10\0\1\12\1\0\3\12\1\0\1\12\1\0\24\12\1\0"+
    "\123\12\1\0\213\12\10\0\236\12\11\0\46\12\2\0\1\12\7\0"+
    "\47\12\110\0\33\12\5\0\3\12\55\0\53\12\25\0\12\14\4\0"+
    "\2\12\1\0\143\12\1\0\1\12\17\0\2\12\7\0\2\12\12\14"+
    "\3\12\2\0\1\12\20\0\1\12\1\0\36\12\35\0\131\12\13\0"+
    "\1\12\16\0\12\14\41\12\11\0\2\12\4\0\1\12\5\0\26\12"+
    "\4\0\1\12\11\0\1\12\3\0\1\12\27\0\31\12\107\0\1\12"+
    "\1\0\13\12\127\0\66\12\3\0\1\12\22\0\1\12\7\0\12\12"+
    "\4\0\12\14\1\0\7\12\1\0\7\12\5\0\10\12\2\0\2\12"+
    "\2\0\26\12\1\0\7\12\1\0\1\12\3\0\4\12\3\0\1\12"+
    "\20\0\1\12\15\0\2\12\1\0\3\12\4\0\12\14\2\12\23\0"+
    "\6\12\4\0\2\12\2\0\26\12\1\0\7\12\1\0\2\12\1\0"+
    "\2\12\1\0\2\12\37\0\4\12\1\0\1\12\7\0\12\14\2\0"+
    "\3\12\20\0\11\12\1\0\3\12\1\0\26\12\1\0\7\12\1\0"+
    "\2\12\1\0\5\12\3\0\1\12\22\0\1\12\17\0\2\12\4\0"+
    "\12\14\25\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0"+
    "\2\12\1\0\5\12\3\0\1\12\36\0\2\12\1\0\3\12\4\0"+
    "\12\14\1\0\1\12\21\0\1\12\1\0\6\12\3\0\3\12\1\0"+
    "\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0\2\12\3\0"+
    "\3\12\3\0\14\12\26\0\1\12\25\0\12\14\25\0\10\12\1\0"+
    "\3\12\1\0\27\12\1\0\12\12\1\0\5\12\3\0\1\12\32\0"+
    "\2\12\6\0\2\12\4\0\12\14\25\0\10\12\1\0\3\12\1\0"+
    "\27\12\1\0\12\12\1\0\5\12\3\0\1\12\40\0\1\12\1\0"+
    "\2\12\4\0\12\14\1\0\2\12\22\0\10\12\1\0\3\12\1\0"+
    "\51\12\2\0\1\12\20\0\1\12\21\0\2\12\4\0\12\14\12\0"+
    "\6\12\5\0\22\12\3\0\30\12\1\0\11\12\1\0\1\12\2\0"+
    "\7\12\72\0\60\12\1\0\2\12\14\0\7\12\11\0\12\14\47\0"+
    "\2\12\1\0\1\12\2\0\2\12\1\0\1\12\2\0\1\12\6\0"+
    "\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0\1\12\2\0"+
    "\2\12\1\0\4\12\1\0\2\12\11\0\1\12\2\0\5\12\1\0"+
    "\1\12\11\0\12\14\2\0\4\12\40\0\1\12\37\0\12\14\26\0"+
    "\10\12\1\0\44\12\33\0\5\12\163\0\53\12\24\0\1\12\12\14"+
    "\6\0\6\12\4\0\4\12\3\0\1\12\3\0\2\12\7\0\3\12"+
    "\4\0\15\12\14\0\1\12\1\0\12\14\6\0\46\12\1\0\1\12"+
    "\5\0\1\12\2\0\53\12\1\0\u014d\12\1\0\4\12\2\0\7\12"+
    "\1\0\1\12\1\0\4\12\2\0\51\12\1\0\4\12\2\0\41\12"+
    "\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\17\12"+
    "\1\0\71\12\1\0\4\12\2\0\103\12\45\0\20\12\20\0\125\12"+
    "\14\0\u026c\12\2\0\21\12\1\0\32\12\5\0\113\12\25\0\15\12"+
    "\1\0\4\12\16\0\22\12\16\0\22\12\16\0\15\12\1\0\3\12"+
    "\17\0\64\12\43\0\1\12\4\0\1\12\3\0\12\14\46\0\12\14"+
    "\6\0\130\12\10\0\51\12\1\0\1\12\5\0\106\12\12\0\35\12"+
    "\51\0\12\14\36\12\2\0\5\12\13\0\54\12\25\0\7\12\10\0"+
    "\12\14\46\0\27\12\11\0\65\12\53\0\12\14\6\0\12\14\15\0"+
    "\1\12\135\0\57\12\21\0\7\12\4\0\12\14\51\0\36\12\15\0"+
    "\2\12\12\14\54\12\32\0\44\12\34\0\12\14\3\0\3\12\12\14"+
    "\44\12\153\0\4\12\1\0\4\12\3\0\2\12\11\0\300\12\100\0"+
    "\u0116\12\2\0\6\12\2\0\46\12\2\0\6\12\2\0\10\12\1\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\37\12\2\0\65\12\1\0"+
    "\7\12\1\0\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0"+
    "\6\12\4\0\15\12\5\0\3\12\1\0\7\12\164\0\1\12\15\0"+
    "\1\12\20\0\15\12\145\0\1\12\4\0\1\12\2\0\12\12\1\0"+
    "\1\12\3\0\5\12\6\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\4\12\1\0\13\12\2\0\4\12\5\0\5\12\4\0\1\12\64\0"+
    "\2\12\u0a7b\0\57\12\1\0\57\12\1\0\205\12\6\0\4\12\3\0"+
    "\2\12\14\0\46\12\1\0\1\12\5\0\1\12\2\0\70\12\7\0"+
    "\1\12\20\0\27\12\11\0\7\12\1\0\7\12\1\0\7\12\1\0"+
    "\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\120\0"+
    "\1\12\u01d5\0\2\12\52\0\5\12\5\0\2\12\4\0\126\12\6\0"+
    "\3\12\1\0\132\12\1\0\4\12\5\0\51\12\3\0\136\12\21\0"+
    "\33\12\65\0\20\12\u0200\0\u19b6\12\112\0\u51cd\12\63\0\u048d\12\103\0"+
    "\56\12\2\0\u010d\12\3\0\20\12\12\14\2\12\24\0\57\12\20\0"+
    "\31\12\10\0\106\12\61\0\11\12\2\0\147\12\2\0\4\12\1\0"+
    "\4\12\14\0\13\12\115\0\12\12\1\0\3\12\1\0\4\12\1\0"+
    "\27\12\35\0\64\12\16\0\62\12\34\0\12\14\30\0\6\12\3\0"+
    "\1\12\4\0\12\14\34\12\12\0\27\12\31\0\35\12\7\0\57\12"+
    "\34\0\1\12\12\14\46\0\51\12\27\0\3\12\1\0\10\12\4\0"+
    "\12\14\6\0\27\12\3\0\1\12\5\0\60\12\1\0\1\12\3\0"+
    "\2\12\2\0\5\12\2\0\1\12\1\0\1\12\30\0\3\12\2\0"+
    "\13\12\7\0\3\12\14\0\6\12\2\0\6\12\2\0\6\12\11\0"+
    "\7\12\1\0\7\12\221\0\43\12\15\0\12\14\6\0\u2ba4\12\14\0"+
    "\27\12\4\0\61\12\u2104\0\u016e\12\2\0\152\12\46\0\7\12\14\0"+
    "\5\12\5\0\1\12\1\0\12\12\1\0\15\12\1\0\5\12\1\0"+
    "\1\12\1\0\2\12\1\0\2\12\1\0\154\12\41\0\u016b\12\22\0"+
    "\100\12\2\0\66\12\50\0\14\12\164\0\5\12\1\0\207\12\23\0"+
    "\12\14\7\0\32\12\6\0\32\12\13\0\131\12\3\0\6\12\2\0"+
    "\6\12\2\0\6\12\2\0\3\12\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\23\0\2\1\1\2\1\3\1\4\1\5\1\6\1\3"+
    "\4\5\1\7\1\4\1\10\1\4\1\11\1\12\1\13"+
    "\1\14\14\6\1\4\21\5\1\2\2\5\1\4\1\5"+
    "\1\4\1\5\1\15\1\16\1\17\1\20\1\21\2\20"+
    "\1\17\3\20\3\22\2\23\4\20\1\2\1\20\2\24"+
    "\3\2\1\0\1\2\2\25\1\2\1\26\1\27\1\26"+
    "\1\3\1\30\1\3\1\31\1\30\1\32\4\0\4\33"+
    "\2\34\1\35\1\36\1\37\1\0\1\40\1\41\1\0"+
    "\1\3\2\0\6\5\1\42\2\0\4\5\1\0\1\5"+
    "\1\0\1\43\2\0\1\20\2\0\2\6\1\0\1\44"+
    "\1\45\1\46\1\47\4\5\1\50\4\5\1\51\1\5"+
    "\1\52\27\5\1\0\2\5\1\53\1\5\12\0\1\5"+
    "\3\0\2\54\2\55\1\56\1\57\1\55\3\0\1\54"+
    "\2\55\1\60\4\0\1\20\2\0\1\61\2\0\1\62"+
    "\7\0\1\63\2\0\1\64\1\0\1\65\1\54\1\0"+
    "\1\66\1\0\1\67\1\70\1\33\1\71\1\72\3\0"+
    "\7\5\2\3\1\73\3\5\1\0\1\5\3\0\4\5"+
    "\1\74\4\5\1\75\3\5\1\76\4\5\1\77\25\5"+
    "\1\100\2\5\1\101\12\0\10\5\3\102\1\0\1\103"+
    "\1\0\1\104\1\0\1\105\1\20\1\0\1\106\1\0"+
    "\1\106\1\0\1\107\1\110\1\33\2\0\1\111\6\5"+
    "\1\112\1\113\1\5\1\114\5\5\4\0\1\115\5\5"+
    "\1\116\10\5\1\117\2\5\1\120\1\121\3\5\1\122"+
    "\1\5\1\123\4\5\1\124\12\5\12\0\11\5\1\0"+
    "\1\103\1\0\1\33\1\125\1\0\3\5\1\126\3\5"+
    "\1\127\1\5\1\130\1\131\1\5\1\132\2\133\3\0"+
    "\3\5\1\134\7\5\1\135\1\5\1\136\1\137\1\140"+
    "\5\5\1\141\1\142\1\5\1\143\1\144\1\5\1\145"+
    "\3\5\1\146\1\147\1\150\10\0\1\151\1\0\11\5"+
    "\1\152\1\33\1\0\1\5\1\153\3\5\1\154\3\5"+
    "\3\0\1\155\12\5\1\156\1\157\1\160\1\161\4\5"+
    "\1\162\1\163\5\0\11\5\1\23\1\33\1\1\1\164"+
    "\4\5\1\165\1\166\1\5\2\167\1\0\1\170\2\5"+
    "\1\171\1\172\3\5\1\173\4\5\1\174\3\0\3\5"+
    "\1\175\5\5\1\33\1\0\3\5\1\176\1\177\1\0"+
    "\1\5\1\200\6\5\1\201\1\202\1\5\1\0\1\203"+
    "\3\5\1\204\3\5\1\33\1\0\2\5\1\205\1\37"+
    "\1\5\1\206\1\207\1\210\3\5\1\211\1\0\2\5"+
    "\1\212\1\213\2\5\1\33\1\0\1\214\1\215\1\5"+
    "\1\216\1\5\1\217\1\220\3\5\1\221\1\33\1\0"+
    "\5\5\1\0\1\222\1\223\1\224\2\5\1\0\1\225"+
    "\1\5\1\0\1\5\1\0\1\226\14\0\1\227\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[713];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u0229"+
    "\0\u0278\0\u02c7\0\u0316\0\u0365\0\u03b4\0\u0403\0\u0452\0\u04a1"+
    "\0\u04f0\0\u053f\0\u058e\0\u05dd\0\u062c\0\u067b\0\u06ca\0\u0719"+
    "\0\u0768\0\u07b7\0\u0806\0\u0855\0\u08a4\0\u08f3\0\u0942\0\u0991"+
    "\0\u067b\0\u067b\0\u09e0\0\u0a2f\0\u067b\0\u067b\0\u067b\0\u0a7e"+
    "\0\u0acd\0\u0b1c\0\u0b6b\0\u0bba\0\u0c09\0\u0c58\0\u0ca7\0\u0cf6"+
    "\0\u0d45\0\u0d94\0\u067b\0\u0de3\0\u0e32\0\u0e81\0\u0ed0\0\u0f1f"+
    "\0\u0f6e\0\u0fbd\0\u100c\0\u105b\0\u10aa\0\u10f9\0\u1148\0\u1197"+
    "\0\u11e6\0\u1235\0\u1284\0\u12d3\0\u1322\0\u1371\0\u13c0\0\u140f"+
    "\0\u145e\0\u14ad\0\u14fc\0\u154b\0\u067b\0\u067b\0\u159a\0\u15e9"+
    "\0\u067b\0\u1638\0\u1687\0\u16d6\0\u1725\0\u1774\0\u17c3\0\u067b"+
    "\0\u1812\0\u1861\0\u067b\0\u18b0\0\u18ff\0\u194e\0\u199d\0\u19ec"+
    "\0\u1a3b\0\u1861\0\u067b\0\u1a8a\0\u1ad9\0\u1b28\0\u1b77\0\u1bc6"+
    "\0\u1bc6\0\u067b\0\u1c15\0\u1c64\0\u067b\0\u1cb3\0\u1d02\0\u1d51"+
    "\0\u067b\0\u1da0\0\u067b\0\u1def\0\u067b\0\u1e3e\0\u1e8d\0\u1edc"+
    "\0\u1f2b\0\u1f7a\0\u067b\0\u1fc9\0\u2018\0\u2067\0\u20b6\0\u067b"+
    "\0\u2105\0\u058e\0\u2154\0\u21a3\0\u21f2\0\u2241\0\u2290\0\u22df"+
    "\0\u232e\0\u237d\0\u23cc\0\u241b\0\u246a\0\u24b9\0\u2508\0\u067b"+
    "\0\u2557\0\u25a6\0\u25f5\0\u2644\0\u2693\0\u26e2\0\u2731\0\u2780"+
    "\0\u1371\0\u27cf\0\u0a2f\0\u281e\0\u067b\0\u286d\0\u28bc\0\u290b"+
    "\0\u295a\0\u29a9\0\u29f8\0\u2a47\0\u2a96\0\u0942\0\u2ae5\0\u2b34"+
    "\0\u2b83\0\u2bd2\0\u0942\0\u2c21\0\u2c70\0\u2cbf\0\u2d0e\0\u0942"+
    "\0\u2d5d\0\u0942\0\u2dac\0\u2dfb\0\u2e4a\0\u2e99\0\u2ee8\0\u2f37"+
    "\0\u2f86\0\u2fd5\0\u3024\0\u3073\0\u30c2\0\u3111\0\u3160\0\u31af"+
    "\0\u31fe\0\u324d\0\u329c\0\u32eb\0\u333a\0\u3389\0\u33d8\0\u3427"+
    "\0\u3476\0\u34c5\0\u3514\0\u3563\0\u067b\0\u35b2\0\u3601\0\u3650"+
    "\0\u14fc\0\u369f\0\u36ee\0\u373d\0\u378c\0\u37db\0\u382a\0\u3879"+
    "\0\u38c8\0\u3917\0\u1638\0\u3966\0\u39b5\0\u3a04\0\u3917\0\u067b"+
    "\0\u067b\0\u067b\0\u3966\0\u3a53\0\u1774\0\u3aa2\0\u3af1\0\u3a53"+
    "\0\u3aa2\0\u067b\0\u3b40\0\u3b8f\0\u3bde\0\u3c2d\0\u3c7c\0\u3ccb"+
    "\0\u1a8a\0\u067b\0\u3d1a\0\u1ad9\0\u067b\0\u3d69\0\u1b28\0\u1b77"+
    "\0\u3db8\0\u3e07\0\u3e56\0\u1c15\0\u067b\0\u3ea5\0\u1c64\0\u067b"+
    "\0\u3ef4\0\u067b\0\u3f43\0\u3f92\0\u067b\0\u3fe1\0\u067b\0\u067b"+
    "\0\u4030\0\u407f\0\u067b\0\u40ce\0\u411d\0\u1d51\0\u416c\0\u41bb"+
    "\0\u420a\0\u4259\0\u42a8\0\u42f7\0\u4346\0\u2557\0\u25a6\0\u4395"+
    "\0\u43e4\0\u4433\0\u4482\0\u44d1\0\u4520\0\u456f\0\u45be\0\u460d"+
    "\0\u465c\0\u46ab\0\u46fa\0\u4749\0\u0942\0\u4798\0\u47e7\0\u4836"+
    "\0\u4885\0\u0942\0\u48d4\0\u4923\0\u4972\0\u48d4\0\u49c1\0\u4a10"+
    "\0\u4a5f\0\u4aae\0\u0942\0\u4afd\0\u4b4c\0\u4b9b\0\u4bea\0\u4c39"+
    "\0\u4c88\0\u4cd7\0\u4d26\0\u4d75\0\u4dc4\0\u4e13\0\u4e62\0\u4eb1"+
    "\0\u4f00\0\u4f4f\0\u4f9e\0\u4fed\0\u503c\0\u508b\0\u50da\0\u5129"+
    "\0\u0942\0\u5178\0\u51c7\0\u0942\0\u5216\0\u5265\0\u52b4\0\u5303"+
    "\0\u5352\0\u53a1\0\u53f0\0\u543f\0\u548e\0\u54dd\0\u552c\0\u557b"+
    "\0\u55ca\0\u5619\0\u5668\0\u56b7\0\u5706\0\u5755\0\u067b\0\u159a"+
    "\0\u16d6\0\u57a4\0\u57f3\0\u5842\0\u067b\0\u5891\0\u067b\0\u58e0"+
    "\0\u592f\0\u067b\0\u597e\0\u1bc6\0\u59cd\0\u067b\0\u067b\0\u5a1c"+
    "\0\u5a6b\0\u5aba\0\u0942\0\u5b09\0\u5b58\0\u5ba7\0\u5bf6\0\u5c45"+
    "\0\u5c94\0\u5ce3\0\u0942\0\u5d32\0\u0942\0\u5d81\0\u5dd0\0\u5e1f"+
    "\0\u5e6e\0\u5ebd\0\u5f0c\0\u5f5b\0\u5faa\0\u5ff9\0\u460d\0\u6048"+
    "\0\u6097\0\u60e6\0\u6135\0\u6184\0\u0942\0\u61d3\0\u6222\0\u6271"+
    "\0\u62c0\0\u630f\0\u635e\0\u63ad\0\u63fc\0\u0942\0\u644b\0\u649a"+
    "\0\u0942\0\u0942\0\u64e9\0\u6538\0\u6587\0\u0942\0\u65d6\0\u0942"+
    "\0\u6625\0\u6674\0\u66c3\0\u6712\0\u0942\0\u6761\0\u67b0\0\u67ff"+
    "\0\u684e\0\u689d\0\u68ec\0\u693b\0\u698a\0\u69d9\0\u6a28\0\u6a77"+
    "\0\u6ac6\0\u6b15\0\u6b64\0\u6bb3\0\u6c02\0\u6c51\0\u6ca0\0\u6cef"+
    "\0\u6d3e\0\u6d8d\0\u6ddc\0\u6e2b\0\u6e7a\0\u6ec9\0\u6f18\0\u6f67"+
    "\0\u6fb6\0\u7005\0\u7054\0\u067b\0\u70a3\0\u70f2\0\u067b\0\u7141"+
    "\0\u7190\0\u71df\0\u722e\0\u0942\0\u727d\0\u72cc\0\u731b\0\u0942"+
    "\0\u736a\0\u0942\0\u73b9\0\u7408\0\u0942\0\u067b\0\u7457\0\u74a6"+
    "\0\u74f5\0\u7544\0\u7593\0\u75e2\0\u7631\0\u0942\0\u7680\0\u76cf"+
    "\0\u771e\0\u776d\0\u77bc\0\u780b\0\u785a\0\u0942\0\u78a9\0\u0942"+
    "\0\u0942\0\u0942\0\u78f8\0\u7947\0\u7996\0\u79e5\0\u7a34\0\u0942"+
    "\0\u0942\0\u7a83\0\u0942\0\u0942\0\u7ad2\0\u0942\0\u7b21\0\u7b70"+
    "\0\u7bbf\0\u0942\0\u7c0e\0\u0942\0\u7c5d\0\u7cac\0\u7cfb\0\u7d4a"+
    "\0\u7d99\0\u7de8\0\u7e37\0\u7e86\0\u067b\0\u7ed5\0\u7f24\0\u7f73"+
    "\0\u7fc2\0\u8011\0\u8060\0\u80af\0\u80fe\0\u814d\0\u819c\0\u81eb"+
    "\0\u823a\0\u8289\0\u82d8\0\u8327\0\u8376\0\u83c5\0\u8414\0\u0942"+
    "\0\u8463\0\u84b2\0\u8501\0\u8550\0\u859f\0\u85ee\0\u0942\0\u863d"+
    "\0\u868c\0\u86db\0\u872a\0\u8779\0\u87c8\0\u8817\0\u8866\0\u88b5"+
    "\0\u8904\0\u0942\0\u0942\0\u0942\0\u0942\0\u8953\0\u89a2\0\u89f1"+
    "\0\u8a40\0\u0942\0\u0942\0\u8a8f\0\u8ade\0\u8b2d\0\u8b7c\0\u8bcb"+
    "\0\u8c1a\0\u8c69\0\u8cb8\0\u8d07\0\u8d56\0\u8da5\0\u8df4\0\u8e43"+
    "\0\u8e92\0\u8ee1\0\u8f30\0\u8f7f\0\u0942\0\u8fce\0\u901d\0\u906c"+
    "\0\u90bb\0\u0942\0\u0942\0\u910a\0\u067b\0\u9159\0\u91a8\0\u91f7"+
    "\0\u9246\0\u9295\0\u0942\0\u0942\0\u92e4\0\u9333\0\u9382\0\u93d1"+
    "\0\u9420\0\u946f\0\u94be\0\u950d\0\u0942\0\u955c\0\u95ab\0\u95fa"+
    "\0\u9649\0\u9698\0\u96e7\0\u0942\0\u9736\0\u9785\0\u97d4\0\u9823"+
    "\0\u9872\0\u98c1\0\u9910\0\u995f\0\u99ae\0\u99fd\0\u0942\0\u0942"+
    "\0\u9a4c\0\u9a9b\0\u0942\0\u9aea\0\u9b39\0\u9b88\0\u9bd7\0\u9c26"+
    "\0\u9c75\0\u0942\0\u0942\0\u9cc4\0\u9d13\0\u0942\0\u9d62\0\u9db1"+
    "\0\u9e00\0\u0942\0\u9e4f\0\u9e9e\0\u9eed\0\u9f3c\0\u9f8b\0\u9fda"+
    "\0\ua029\0\u0942\0\ua078\0\ua0c7\0\u0942\0\u0942\0\u0942\0\ua116"+
    "\0\ua165\0\ua1b4\0\u0942\0\ua203\0\ua252\0\ua2a1\0\u0942\0\u0942"+
    "\0\ua2f0\0\ua33f\0\ua38e\0\ua3dd\0\u0942\0\u0942\0\ua42c\0\u0942"+
    "\0\ua47b\0\u0942\0\u067b\0\ua4ca\0\ua519\0\ua568\0\u0942\0\ua078"+
    "\0\ua5b7\0\ua606\0\ua655\0\ua6a4\0\ua6f3\0\ua742\0\ua791\0\u0942"+
    "\0\u0942\0\u0942\0\ua7e0\0\ua82f\0\ua87e\0\u0942\0\ua8cd\0\ua91c"+
    "\0\ua96b\0\ua9ba\0\u0942\0\uaa09\0\uaa58\0\uaaa7\0\uaaf6\0\uab45"+
    "\0\uab94\0\uabe3\0\uac32\0\uac81\0\uacd0\0\uad1f\0\uad6e\0\u067b"+
    "\0\uadbd";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[713];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\33\24\1\25\63\24\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\27\2\37\1\26\2\40"+
    "\1\41\1\42\1\40\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\70\1\73\1\74\1\75\1\65"+
    "\1\67\1\76\1\66\1\77\1\100\1\101\1\41\1\102"+
    "\1\103\1\101\1\104\1\102\1\73\1\75\1\77\1\105"+
    "\1\37\1\106\1\107\1\37\1\110\1\37\1\111\1\112"+
    "\1\113\1\37\1\114\1\37\1\115\2\41\1\116\22\117"+
    "\1\120\1\121\1\122\1\117\1\123\70\117\22\124\1\125"+
    "\1\124\1\126\1\121\1\127\70\124\4\130\1\131\21\130"+
    "\1\132\70\130\64\133\1\134\3\133\1\134\26\133\15\135"+
    "\1\136\3\135\1\137\1\140\1\135\1\141\1\135\1\142"+
    "\70\135\3\143\1\144\2\143\3\144\1\143\2\144\30\143"+
    "\21\144\1\143\12\144\1\143\4\144\1\143\1\144\1\143"+
    "\3\144\4\143\3\26\1\145\2\26\3\145\1\26\2\145"+
    "\1\26\1\0\26\26\21\145\1\26\12\145\1\26\4\145"+
    "\1\26\1\145\1\26\3\145\4\26\3\146\1\147\2\146"+
    "\3\147\2\146\1\147\1\146\1\150\3\146\1\151\22\146"+
    "\21\147\1\146\12\147\1\146\4\147\1\146\1\147\1\146"+
    "\3\147\4\146\3\152\1\153\2\152\3\153\1\152\2\153"+
    "\30\152\21\153\1\152\12\153\1\152\4\153\1\152\1\153"+
    "\1\152\3\153\4\152\3\26\1\154\2\26\3\154\1\26"+
    "\2\154\1\26\1\0\26\26\21\154\1\26\12\154\1\26"+
    "\4\154\1\26\1\154\1\26\3\154\4\26\3\155\1\156"+
    "\1\157\1\155\3\156\1\155\2\156\1\155\2\40\2\155"+
    "\1\40\22\155\21\156\1\155\12\156\1\155\4\156\1\155"+
    "\1\156\1\155\3\156\4\155\1\26\1\160\1\161\1\37"+
    "\1\26\1\162\3\37\1\160\2\37\1\26\2\163\2\161"+
    "\1\163\1\164\1\161\1\163\2\161\6\26\1\161\5\26"+
    "\1\161\21\37\1\161\12\37\1\163\4\37\1\161\1\37"+
    "\1\161\3\37\1\161\1\41\1\165\1\163\34\166\1\167"+
    "\62\166\34\170\1\171\62\170\15\172\1\173\3\172\1\174"+
    "\11\172\1\175\2\172\1\176\4\172\1\177\53\172\15\200"+
    "\2\201\2\200\1\201\75\200\117\202\33\24\1\203\116\24"+
    "\1\0\2\24\1\204\4\24\1\205\5\24\1\0\1\24"+
    "\1\0\4\24\1\206\1\0\2\24\3\0\20\24\1\0"+
    "\7\24\120\0\1\27\1\207\1\210\1\0\1\27\3\0"+
    "\1\27\106\0\1\207\1\211\2\0\1\207\3\0\1\207"+
    "\15\0\1\63\70\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\212\6\37\27\0\3\37\1\213\2\37\1\213\2\37"+
    "\1\214\6\37\1\215\1\0\2\37\1\215\3\37\1\214"+
    "\3\37\1\0\1\37\1\216\2\37\1\0\1\217\1\0"+
    "\3\37\10\0\1\63\22\0\1\63\1\220\67\0\1\27"+
    "\1\207\1\210\1\0\1\27\1\221\1\0\1\222\1\27"+
    "\51\0\1\222\34\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\1\65\11\37\1\65\6\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\1\223\1\37\1\224\2\37"+
    "\1\225\4\37\1\223\1\224\5\37\1\0\3\37\1\225"+
    "\4\37\1\226\1\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\6\0"+
    "\1\44\7\0\1\227\10\0\1\37\1\230\13\37\1\230"+
    "\3\37\1\0\12\37\1\231\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\21\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\21\0\2\40\2\0\1\40\100\0\1\232\2\0"+
    "\3\232\1\0\2\232\30\0\21\232\1\0\12\232\1\0"+
    "\4\232\1\0\1\232\1\0\3\232\4\0\22\233\1\234"+
    "\1\235\1\236\1\233\1\237\70\233\27\0\1\62\1\63"+
    "\115\0\1\63\1\62\115\0\1\63\1\0\1\63\114\0"+
    "\1\62\116\0\1\240\1\63\2\0\1\241\1\0\1\242"+
    "\110\0\1\63\4\0\1\62\111\0\1\63\4\0\1\243"+
    "\1\116\110\0\1\63\1\244\115\0\1\63\7\0\1\63"+
    "\106\0\1\63\10\0\1\63\105\0\1\63\117\0\1\245"+
    "\12\0\1\63\54\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\1\37\1\246\13\37\1\246\3\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\247\1\0\10\37\27\0\21\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\3\37\1\250\4\37\27\0\1\37"+
    "\1\251\1\37\1\252\2\37\1\252\5\37\1\253\1\251"+
    "\1\37\1\250\1\37\1\0\1\37\1\253\10\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\254\1\0\10\37\27\0\2\37\1\255\10\37\1\255"+
    "\5\37\1\0\10\37\1\256\1\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\257\1\0"+
    "\10\37\27\0\1\260\4\37\1\261\4\37\1\260\6\37"+
    "\1\0\3\37\1\261\6\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\2\37"+
    "\1\262\5\37\27\0\3\37\1\263\2\37\1\264\1\37"+
    "\1\262\3\37\1\265\4\37\1\0\1\37\1\265\10\37"+
    "\1\0\1\37\1\266\2\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\1\37"+
    "\1\267\13\37\1\267\3\37\1\0\11\37\1\270\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\1\223\1\37\1\224\2\37"+
    "\1\225\3\37\1\271\1\223\1\224\5\37\1\0\3\37"+
    "\1\225\4\37\1\226\1\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\5\37\1\272\13\37\1\0\3\37\1\272\6\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\273\1\0\10\37\27\0\7\37\1\274\11\37"+
    "\1\0\5\37\1\275\4\37\1\0\2\37\1\276\1\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\1\277\10\37\1\300\1\277\6\37"+
    "\1\0\6\37\1\300\3\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\6\0\1\44\7\0\1\227\10\0\1\37\1\230\10\37"+
    "\1\301\2\37\1\230\3\37\1\0\12\37\1\231\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\1\302\1\37\1\303\6\37\1\304"+
    "\1\302\1\303\5\37\1\0\6\37\1\304\3\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\1\37\1\305\1\306\10\37"+
    "\1\306\1\37\1\305\3\37\1\0\10\37\1\307\1\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\273\1\0\10\37\27\0\7\37\1\275\11\37"+
    "\1\0\5\37\1\275\4\37\1\0\2\37\1\276\1\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\2\37\1\262\5\37\27\0\3\37\1\263\2\37"+
    "\1\263\1\37\1\262\3\37\1\265\4\37\1\0\1\37"+
    "\1\265\10\37\1\0\1\37\1\266\2\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\3\37\1\310\2\37\1\310\5\37\1\311\4\37"+
    "\1\0\1\37\1\311\10\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\4\0\24\231\1\312\53\231\1\235\16\231"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\27\0\5\37"+
    "\1\313\13\37\1\0\3\37\1\313\6\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\21\37\1\0\11\37\1\314\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\111\0\1\315\12\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\2\37\1\316"+
    "\10\37\1\316\5\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\13\0\1\317\1\320\5\0\1\321"+
    "\25\0\1\322\1\323\1\324\1\0\1\325\1\326\2\0"+
    "\1\317\1\0\1\322\1\324\1\327\1\323\1\0\1\320"+
    "\3\0\1\327\1\0\1\326\4\0\1\330\21\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\21\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\1\37\1\331\1\37"+
    "\4\0\22\117\1\332\1\0\1\333\1\117\1\334\73\117"+
    "\1\335\2\117\3\335\1\117\1\336\1\335\6\117\1\337"+
    "\1\340\1\333\1\117\1\341\15\117\21\335\1\117\12\335"+
    "\1\117\4\335\1\117\1\335\1\117\3\335\145\117\1\342"+
    "\1\340\1\333\1\117\1\343\70\117\22\124\1\344\1\124"+
    "\1\345\1\0\1\346\73\124\1\335\2\124\3\335\1\124"+
    "\1\347\1\335\6\124\1\350\1\124\1\345\1\340\1\341"+
    "\15\124\21\335\1\124\12\335\1\124\4\335\1\124\1\335"+
    "\1\124\3\335\145\124\1\342\1\124\1\345\1\340\1\351"+
    "\70\124\30\0\1\352\110\0\1\342\151\0\1\353\16\0"+
    "\1\353\22\0\15\135\1\0\3\135\1\0\1\354\1\135"+
    "\1\355\1\135\1\356\73\135\1\357\2\135\3\357\1\135"+
    "\2\357\1\135\1\0\3\135\1\0\1\354\1\135\1\355"+
    "\1\135\1\356\15\135\21\357\1\135\12\357\1\135\4\357"+
    "\1\135\1\357\1\135\3\357\7\135\1\357\2\135\3\357"+
    "\1\135\2\357\1\135\1\360\3\135\1\0\1\354\1\135"+
    "\1\355\1\135\1\356\15\135\21\357\1\135\12\357\1\135"+
    "\4\357\1\135\1\357\1\135\3\357\4\135\3\0\1\335"+
    "\2\0\3\335\1\0\2\335\12\0\1\341\15\0\21\335"+
    "\1\0\12\335\1\0\4\335\1\0\1\335\1\0\3\335"+
    "\4\0\117\135\1\0\1\361\1\0\1\361\1\0\10\361"+
    "\1\362\2\0\1\363\1\362\22\0\21\361\1\0\12\361"+
    "\1\0\4\361\1\0\1\361\1\0\3\361\5\0\1\364"+
    "\1\0\1\364\1\0\10\364\1\365\2\0\1\366\1\365"+
    "\22\0\21\364\1\0\12\364\1\0\4\364\1\0\1\364"+
    "\1\0\3\364\4\0\15\367\1\150\3\367\1\150\76\367"+
    "\1\370\1\367\1\370\1\367\5\370\1\367\1\370\1\367"+
    "\1\0\2\367\1\371\1\0\22\367\21\370\1\367\12\370"+
    "\1\367\4\370\1\367\1\370\1\367\3\370\7\367\1\372"+
    "\2\367\3\372\1\367\1\373\1\372\1\367\1\150\3\367"+
    "\1\150\22\367\21\372\1\367\12\372\1\367\4\372\1\367"+
    "\1\372\1\367\3\372\4\367\1\0\1\374\1\0\1\374"+
    "\1\0\10\374\1\375\2\0\1\376\1\375\22\0\21\374"+
    "\1\0\12\374\1\0\4\374\1\0\1\374\1\0\3\374"+
    "\5\0\1\377\1\0\1\377\1\0\10\377\1\u0100\2\0"+
    "\1\u0101\1\u0100\22\0\21\377\1\0\12\377\1\0\4\377"+
    "\1\0\1\377\1\0\3\377\5\0\1\156\1\0\1\156"+
    "\1\0\10\156\27\0\21\156\1\0\12\156\1\0\4\156"+
    "\1\0\1\156\1\0\3\156\34\0\1\u0102\67\0\1\160"+
    "\3\0\1\160\3\0\1\160\106\0\1\160\3\0\1\160"+
    "\1\221\2\0\1\160\110\0\1\u0103\2\0\3\u0103\1\0"+
    "\2\u0103\30\0\21\u0103\1\0\12\u0103\1\0\4\u0103\1\0"+
    "\1\u0103\1\0\3\u0103\4\0\34\166\1\u0104\116\166\1\u0104"+
    "\1\u0105\61\166\34\170\1\u0106\116\170\1\u0106\1\u0107\61\170"+
    "\15\172\1\173\3\172\1\173\14\172\1\173\4\172\1\173"+
    "\53\172\15\0\1\u0108\101\0\15\172\1\173\3\172\1\173"+
    "\13\172\1\u0109\1\173\4\172\1\173\53\172\30\0\1\u010a"+
    "\116\0\1\245\103\0\2\201\2\0\1\201\75\0\33\24"+
    "\1\0\2\24\1\0\4\24\1\0\5\24\1\0\1\24"+
    "\1\0\4\24\2\0\2\24\3\0\20\24\1\0\7\24"+
    "\27\0\1\u010b\116\0\1\u010b\36\0\1\u010c\3\0\1\u010c"+
    "\110\0\1\u010d\3\0\1\u010d\27\0\1\207\1\0\1\210"+
    "\1\0\1\207\3\0\1\207\106\0\1\160\2\0\1\u010e"+
    "\1\160\3\0\1\160\17\0\1\u010e\67\0\1\63\115\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\5\37\1\u010f"+
    "\1\37\1\u0110\11\37\1\0\3\37\1\u010f\1\37\1\u0110"+
    "\4\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\4\37\1\u0111"+
    "\14\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\14\37\1\u0112\4\37\1\0\1\37\1\u0112\10\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\21\37\1\0\11\37\1\u0113"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\21\37\1\0\1\u0114"+
    "\3\37\1\u0114\5\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\2\37\1\u0115\10\37\1\u0115\5\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\u0116\1\0"+
    "\1\u0116\1\0\1\u0116\1\0\3\u0116\34\0\1\u0116\1\0"+
    "\1\u0116\3\0\1\u0116\2\0\1\u0116\3\0\2\u0116\3\0"+
    "\1\u0116\33\0\1\u0117\3\0\1\u0117\106\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\1\37\1\u0118\13\37\1\u0118"+
    "\3\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\11\37\1\u0119\7\37\1\0\6\37\1\u0119\3\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\3\37\1\u011a\2\37\1\u011a"+
    "\12\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\3\37\1\u011b\2\37\1\u011b\12\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\37\0\1\u011c\64\0"+
    "\1\37\1\0\1\u011d\1\0\10\37\27\0\21\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\232\1\0\1\232\1\0\10\232\27\0\21\232\1\0"+
    "\12\232\1\0\4\232\1\0\1\232\1\0\3\232\4\0"+
    "\3\233\1\0\2\233\3\0\2\233\1\0\6\233\1\234"+
    "\1\235\1\236\1\233\1\0\15\233\21\0\1\233\12\0"+
    "\1\233\4\0\1\233\1\0\1\233\3\0\145\233\1\0"+
    "\1\235\1\236\1\233\1\237\70\233\30\0\1\63\115\0"+
    "\1\63\3\0\1\u011e\143\0\1\u011f\6\0\1\u011f\63\0"+
    "\1\u0120\77\0\2\244\2\0\1\244\112\0\2\245\2\0"+
    "\1\245\76\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\7\37\1\u0121\11\37\1\0\5\37\1\u0121\4\37\1\0"+
    "\4\37\1\0\1\37\1\0\2\37\1\u0122\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\14\37\1\u0123\4\37"+
    "\1\0\1\37\1\u0123\10\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\1\37\1\u0124\13\37\1\u0124\3\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\4\37\1\246\14\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\21\37"+
    "\1\0\12\37\1\0\2\37\1\u0125\1\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\21\37\1\0\12\37\1\0\1\37\1\u0126\2\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\11\37\1\u0127\7\37\1\0\6\37"+
    "\1\u0127\3\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\2\37\1\u0128\5\37"+
    "\27\0\10\37\1\u0128\7\37\1\u0129\1\0\2\37\1\u0129"+
    "\7\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\u012a\1\0\10\37\27\0\21\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\7\37\1\u012b"+
    "\4\37\1\u012c\3\37\1\u012d\1\0\1\37\1\u012c\1\u012d"+
    "\2\37\1\u012b\4\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\7\37\1\u012e\4\37\1\u012c\3\37\1\u012d\1\0\1\37"+
    "\1\u012c\1\u012d\2\37\1\u012b\4\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\14\37\1\u012f\4\37\1\0\1\37\1\u012f"+
    "\10\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\21\37\1\0"+
    "\1\u0130\3\37\1\u0130\5\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\2\37\1\u0131\10\37\1\u0131\5\37\1\0\10\37"+
    "\1\u0132\1\37\1\0\1\u0133\3\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\1\37\1\u0134\13\37\1\u0134\3\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\12\37\1\u0135\6\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\14\37\1\u0136"+
    "\4\37\1\0\1\37\1\u0136\10\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\11\37\1\u0137\7\37\1\0\6\37\1\u0137"+
    "\3\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\2\37\1\u0138"+
    "\10\37\1\u0138\1\37\1\u0139\3\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\2\37\1\u0138\10\37\1\u0138"+
    "\5\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\5\37\1\u013a\13\37\1\0\3\37\1\u013a\6\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\7\37\1\u013b\11\37\1\0"+
    "\5\37\1\u013b\4\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\1\u013c\11\37\1\u013c\6\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\12\37\1\u013d\6\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\3\37\1\u013e\2\37"+
    "\1\u013e\12\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\7\37\1\u013f\1\37\1\u0140\2\37\1\u0141\4\37"+
    "\1\0\1\37\1\u0141\3\37\1\u013f\1\u0140\3\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\1\u0142\1\37\1\u0143\7\37"+
    "\1\u0142\1\u0143\5\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\1\u0144\4\37\1\u0145\4\37\1\u0144\6\37"+
    "\1\0\3\37\1\u0145\6\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\1\37\1\u0146\13\37\1\u0146\3\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\3\37\1\u0147\4\37\27\0\17\37"+
    "\1\u0147\1\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\14\37\1\u0148\4\37\1\0\1\37\1\u0148\10\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\u0149\1\0\10\37\27\0\21\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\4\0\117\231"+
    "\1\0\1\37\1\0\1\u014a\1\0\10\37\27\0\21\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\5\37"+
    "\1\u014b\13\37\1\0\3\37\1\u014b\6\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\1\37\1\u014c\13\37\1\u014c\3\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\61\0\1\u014d\16\0\1\u014d\66\0\1\u014e\4\0\1\u014f"+
    "\4\0\1\u014e\12\0\1\u014f\35\0\1\u0150\52\0\1\u0150"+
    "\36\0\1\u0151\160\0\1\u0152\13\0\1\u0152\101\0\1\u0153"+
    "\11\0\1\u0153\107\0\1\u0154\2\0\1\u0154\117\0\1\u0155"+
    "\17\0\1\u0155\72\0\1\u0156\2\0\1\u0156\45\0\1\37"+
    "\1\0\1\37\1\0\2\37\1\u0157\5\37\27\0\3\37"+
    "\1\u0158\1\u0159\1\37\1\u0158\1\u015a\1\u0157\1\u015b\6\37"+
    "\1\u015c\1\0\2\37\1\u015c\2\37\1\u015a\1\u015b\2\37"+
    "\1\u015d\1\0\1\37\1\u015e\2\37\1\0\1\37\1\0"+
    "\3\37\4\0\3\117\1\0\2\117\3\0\2\117\1\0"+
    "\6\117\1\337\1\340\1\333\1\117\1\0\15\117\21\0"+
    "\1\117\12\0\1\117\4\0\1\117\1\0\1\117\3\0"+
    "\26\117\1\0\1\340\1\333\1\117\1\343\70\117\1\0"+
    "\1\335\1\0\1\335\1\0\10\335\27\0\21\335\1\0"+
    "\12\335\1\0\4\335\1\0\1\335\1\0\3\335\1\0"+
    "\1\u015f\2\0\1\117\1\336\1\117\1\336\1\117\10\336"+
    "\5\117\1\332\1\0\1\333\1\117\1\334\15\117\21\336"+
    "\1\117\12\336\1\117\4\336\1\117\1\336\1\117\3\336"+
    "\1\117\1\u0160\2\117\3\124\1\0\2\124\3\0\2\124"+
    "\1\0\6\124\1\350\1\124\1\345\1\340\1\0\15\124"+
    "\21\0\1\124\12\0\1\124\4\0\1\124\1\0\1\124"+
    "\3\0\26\124\1\0\1\124\1\345\1\340\1\351\71\124"+
    "\1\347\1\124\1\347\1\124\10\347\5\124\1\344\1\124"+
    "\1\345\1\0\1\346\15\124\21\347\1\124\12\347\1\124"+
    "\4\347\1\124\1\347\1\124\3\347\1\124\1\u0161\2\124"+
    "\46\0\1\u0162\10\0\1\u0162\37\0\3\135\1\u0163\2\135"+
    "\3\u0163\2\135\1\u0163\1\135\1\0\3\135\1\0\1\u0164"+
    "\1\135\1\355\1\135\1\u0165\15\135\21\u0163\1\135\12\u0163"+
    "\1\135\4\u0163\1\135\1\u0163\1\135\3\u0163\21\135\1\0"+
    "\3\135\1\0\112\135\1\0\3\135\1\0\1\u0165\1\135"+
    "\1\355\1\135\1\u0166\71\135\1\357\1\135\1\357\1\135"+
    "\10\357\1\u0167\2\135\1\u0168\1\u0167\1\354\1\135\1\355"+
    "\1\135\1\356\15\135\21\357\1\135\12\357\1\135\4\357"+
    "\1\135\1\357\1\135\3\357\4\135\3\0\1\u0169\2\0"+
    "\3\u0169\1\0\2\u0169\30\0\21\u0169\1\0\12\u0169\1\0"+
    "\4\u0169\1\0\1\u0169\1\0\3\u0169\21\0\1\362\3\0"+
    "\1\362\112\0\1\365\3\0\1\365\75\0\15\367\1\0"+
    "\3\367\1\0\76\367\1\372\1\367\1\372\1\367\5\372"+
    "\1\373\1\372\1\373\1\u016a\2\367\1\u016b\1\u016a\22\367"+
    "\21\372\1\367\12\372\1\367\4\372\1\367\1\372\1\367"+
    "\3\372\5\367\1\373\1\367\1\373\1\367\10\373\1\u016c"+
    "\2\367\1\u016d\1\u016c\22\367\21\373\1\367\12\373\1\367"+
    "\4\373\1\367\1\373\1\367\3\373\4\367\15\0\1\375"+
    "\3\0\1\375\112\0\1\u0100\3\0\1\u0100\76\0\1\u0103"+
    "\1\0\1\u0103\1\0\10\u0103\27\0\21\u0103\1\0\12\u0103"+
    "\1\0\4\u0103\1\0\1\u0103\1\0\3\u0103\4\0\34\166"+
    "\1\u0104\1\u016e\61\166\34\170\1\u0106\1\u016f\61\170\15\172"+
    "\1\173\3\172\1\173\14\172\1\173\4\172\1\173\14\172"+
    "\1\u0170\6\172\1\u0170\27\172\15\0\2\u010a\2\0\1\u010a"+
    "\174\0\1\u0171\64\0\1\u0172\13\0\1\u0172\36\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\7\37\1\u0173\11\37"+
    "\1\0\5\37\1\u0173\4\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\u0174\1\0\10\37"+
    "\27\0\21\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\2\37"+
    "\1\u0175\5\37\27\0\4\37\1\u0176\1\u0177\2\37\1\u0175"+
    "\3\37\1\u0178\4\37\1\0\1\37\1\u0178\1\37\1\u0177"+
    "\6\37\1\0\2\37\1\u0179\1\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u017a\1\0\10\37\27\0"+
    "\21\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\1\u017b\11\37\1\u017b\6\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\7\37\1\u017c\11\37\1\0\5\37"+
    "\1\u017c\4\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\11\37"+
    "\1\u017d\7\37\1\0\6\37\1\u017d\3\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u017e"+
    "\1\0\10\37\27\0\21\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\14\37\1\u017f\4\37\1\0\1\37"+
    "\1\u017f\10\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\2\37"+
    "\1\u0180\10\37\1\u0180\5\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\20\37\1\u0181\1\0\2\37\1\u0181"+
    "\7\37\1\0\4\37\1\0\1\37\1\0\3\37\37\0"+
    "\1\u011e\64\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\2\37\1\u0182\10\37\1\u0182\5\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\7\0\1\u0183\2\0"+
    "\3\u0183\1\0\2\u0183\2\0\1\u011e\4\0\1\u0184\20\0"+
    "\21\u0183\1\0\12\u0183\1\u0185\4\u0183\1\0\1\u0183\1\0"+
    "\3\u0183\70\0\1\u0186\3\0\1\u0186\43\0\2\u0187\2\0"+
    "\1\u0187\76\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\21\37\1\0\10\37\1\u0188\1\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\21\37\1\0\10\37\1\u0189\1\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\7\37\1\u018a\11\37\1\0"+
    "\5\37\1\u018a\4\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\2\37\1\u018b\10\37\1\u018b\5\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\u018c\1\0\10\37\27\0\21\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\11\37\1\u018d\7\37\1\0"+
    "\6\37\1\u018d\3\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\2\37\1\u018e\10\37\1\u018e\5\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\11\37\1\u018f\7\37\1\0"+
    "\6\37\1\u018f\3\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u0190\1\0\10\37\27\0"+
    "\21\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\7\37\1\u0191\11\37\1\0\5\37\1\u0191\4\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\11\37\1\u0192\7\37\1\0"+
    "\6\37\1\u0192\3\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u0193\1\0\10\37\27\0"+
    "\21\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\11\37\1\u0194\7\37\1\0\6\37\1\u0194\3\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\5\37\1\u0195\13\37\1\0"+
    "\3\37\1\u0195\6\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u0196\1\0\10\37\27\0"+
    "\21\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\1\u0197\11\37\1\u0197\6\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\13\37\1\u0198\5\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\7\37\1\u0199\11\37"+
    "\1\0\5\37\1\u0199\4\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\2\37"+
    "\1\u019a\5\37\27\0\10\37\1\u019a\10\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\7\37\1\u019b\11\37"+
    "\1\0\5\37\1\u019b\4\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\5\37\1\u019c\13\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\7\37\1\u019d\11\37\1\0\5\37"+
    "\1\u019d\4\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\1\u019e"+
    "\11\37\1\u019e\6\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\3\37\1\u019f\4\37\27\0\17\37\1\u019f\1\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\11\37\1\u01a0"+
    "\7\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\7\37\1\u01a1\4\37\1\u01a2\4\37\1\0\1\37\1\u01a2"+
    "\3\37\1\u01a1\4\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\20\37\1\u01a3\1\0\2\37\1\u01a3\7\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\11\37\1\u01a4\7\37\1\0\6\37"+
    "\1\u01a4\3\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\u01a5\1\0\10\37\27\0\21\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\3\37"+
    "\1\u01a6\2\37\1\u01a6\12\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\14\37\1\u01a7\4\37\1\0\1\37"+
    "\1\u01a7\10\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\7\37"+
    "\1\u01a8\11\37\1\0\5\37\1\u01a8\4\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\3\37\1\u01a9\2\37\1\u01a9\12\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\u01aa\1\0\3\37"+
    "\5\0\1\37\1\0\1\u01ab\1\0\10\37\27\0\21\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\11\37"+
    "\1\u01ac\7\37\1\0\6\37\1\u01ac\3\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u01ad"+
    "\1\0\10\37\27\0\21\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\11\37\1\u01ae\7\37\1\0\6\37"+
    "\1\u01ae\3\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\11\37"+
    "\1\u01af\7\37\1\0\6\37\1\u01af\3\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\50\0\1\u01b0\11\0\1\u01b0"+
    "\104\0\1\u01b1\11\0\1\u01b1\107\0\1\u01b2\2\0\1\u01b2"+
    "\154\0\1\u01b3\54\0\1\u01b4\10\0\1\u01b4\104\0\1\u01b5"+
    "\13\0\1\u01b5\133\0\1\u01b6\73\0\1\u01b7\17\0\1\u01b7"+
    "\70\0\1\u01b8\13\0\1\u01b8\115\0\1\u01b9\6\0\1\u01b9"+
    "\30\0\1\37\1\0\1\37\1\0\10\37\27\0\5\37"+
    "\1\u01ba\13\37\1\0\3\37\1\u01ba\4\37\1\u01bb\1\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\2\37\1\u01bc\10\37"+
    "\1\u01bc\5\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\5\37\1\u01bd\13\37\1\0\3\37\1\u01bd\6\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\1\37\1\u01be\13\37"+
    "\1\u01be\3\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\5\37\1\u01bf\13\37\1\0\3\37\1\u01bf\6\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\11\37\1\u01c0\7\37"+
    "\1\0\6\37\1\u01c0\3\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\2\37\1\u01c1\10\37\1\u01c1\5\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\u01c2\1\0\10\37\27\0\21\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\64\0\1\u01c3"+
    "\6\0\1\u01c3\30\0\1\u0163\1\0\1\u0163\1\0\10\u0163"+
    "\27\0\21\u0163\1\0\12\u0163\1\0\4\u0163\1\0\1\u0163"+
    "\1\0\3\u0163\1\0\1\u01c4\2\0\3\135\1\0\2\135"+
    "\3\0\2\135\1\0\1\135\1\0\3\135\1\0\1\u0164"+
    "\1\135\1\355\1\135\1\0\15\135\21\0\1\135\12\0"+
    "\1\135\4\0\1\135\1\0\1\135\3\0\21\135\1\0"+
    "\3\135\2\0\1\135\1\355\1\135\1\u0166\105\135\1\u0167"+
    "\3\135\1\u0167\1\354\1\135\1\355\1\135\1\356\70\135"+
    "\1\0\1\u0169\1\0\1\u0169\1\0\10\u0169\1\u0167\2\0"+
    "\1\u01c5\1\u0167\22\0\21\u0169\1\0\12\u0169\1\0\4\u0169"+
    "\1\0\1\u0169\1\0\3\u0169\4\0\15\367\1\u016a\3\367"+
    "\1\u016a\112\367\1\u016c\3\367\1\u016c\75\367\15\172\1\173"+
    "\3\172\1\173\14\172\1\173\4\172\1\173\20\172\1\u01c6"+
    "\3\172\1\u01c6\26\172\66\0\1\u01c7\3\0\1\u01c7\75\0"+
    "\1\u01c8\17\0\1\u01c8\26\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\3\37\1\u01c9\2\37\1\u01c9\12\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\1\u01ca\11\37"+
    "\1\u01ca\6\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\u01cb\1\0\10\37"+
    "\27\0\21\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\2\37"+
    "\1\u01cc\5\37\27\0\10\37\1\u01cc\10\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\21\37\1\0\12\37"+
    "\1\0\2\37\1\u01cd\1\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\21\37"+
    "\1\0\11\37\1\u01ce\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\5\37\1\u01cf\13\37\1\0\3\37\1\u01cf\6\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\21\37\1\0\12\37\1\0"+
    "\1\u01d0\3\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\2\37\1\u01d1\10\37"+
    "\1\u01d1\5\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\u01d2\1\0\10\37"+
    "\27\0\21\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\11\37\1\u01d3\7\37\1\0\6\37\1\u01d3\3\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\7\37\1\u01d4\11\37"+
    "\1\0\5\37\1\u01d4\4\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\21\37\1\0\12\37\1\0\3\37\1\u01d5\1\0"+
    "\1\37\1\0\3\37\5\0\1\u0183\1\0\1\u0183\1\0"+
    "\10\u0183\1\u01d6\3\0\1\u01d7\22\0\21\u0183\1\0\12\u0183"+
    "\1\0\4\u0183\1\0\1\u0183\1\0\3\u0183\7\0\1\u01d8"+
    "\2\0\3\u01d8\1\0\2\u01d8\30\0\21\u01d8\1\0\12\u01d8"+
    "\1\0\4\u01d8\1\0\1\u01d8\1\0\3\u01d8\7\0\1\u01d9"+
    "\2\0\3\u01d9\1\0\2\u01d9\30\0\21\u01d9\1\0\12\u01d9"+
    "\1\0\4\u01d9\1\0\1\u01d9\1\0\3\u01d9\51\0\1\u01da"+
    "\13\0\1\u01da\36\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\1\37\1\u01db\13\37\1\u01db\3\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\5\37\1\u01dc\13\37"+
    "\1\0\3\37\1\u01dc\6\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\1\37\1\u01dd\13\37\1\u01dd\3\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\21\37\1\0\12\37"+
    "\1\0\1\u01de\3\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\14\37\1\u01df"+
    "\4\37\1\0\1\37\1\u01df\10\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\21\37\1\0\10\37\1\u01e0\1\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\2\37\1\u01e1\10\37\1\u01e1"+
    "\5\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\1\37\1\u01e2\13\37\1\u01e2\3\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\u01e3\1\0\10\37\27\0\2\37\1\u01e4\10\37\1\u01e4"+
    "\5\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\21\37\1\0\10\37\1\u01e5\1\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\7\37\1\u01e6\11\37\1\0\5\37\1\u01e6"+
    "\4\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\u01e7\1\0\10\37\27\0\21\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\7\37\1\u01e8"+
    "\11\37\1\0\5\37\1\u01e8\4\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\21\37\1\0\12\37\1\0\2\37\1\u01e9"+
    "\1\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\7\37\1\u01ea\11\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\5\37\1\u01eb"+
    "\13\37\1\0\3\37\1\u01eb\6\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\6\37\1\u01ec\12\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\20\37\1\u01ed\1\0\2\37"+
    "\1\u01ed\7\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\2\37"+
    "\1\u01ee\10\37\1\u01ee\5\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\5\37\1\u01ef\13\37\1\0\3\37"+
    "\1\u01ef\6\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\7\37"+
    "\1\u01f0\11\37\1\0\5\37\1\u01f0\4\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\21\37\1\0\11\37\1\u01f1\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\2\37\1\u01f2\10\37\1\u01f2"+
    "\5\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u01f3\1\0\10\37\27\0"+
    "\21\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\14\37\1\u01f4\4\37\1\0\1\37\1\u01f4\10\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\u01f5\1\0\10\37\27\0\21\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\7\37\1\u01f6\11\37\1\0"+
    "\5\37\1\u01f6\4\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\2\37\1\u01f7\10\37\1\u01f7\5\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\3\37\1\u01f8\2\37\1\u01f8"+
    "\12\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\5\37\1\u01f9\13\37\1\0\3\37\1\u01f9\6\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\7\37\1\u01fa\11\37\1\0"+
    "\5\37\1\u01fa\4\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\4\37\1\u01fb\14\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\u01fc\1\0"+
    "\10\37\27\0\21\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\52\0\1\u01fd\10\0\1\u01fd\114\0"+
    "\1\u01fe\16\0\1\u01fe\70\0\1\u01ff\10\0\1\u01ff\42\0"+
    "\1\u0200\170\0\1\u0201\16\0\1\u0201\70\0\1\u0202\10\0"+
    "\1\u0202\47\0\1\u0203\52\0\1\u0203\36\0\1\u0204\12\0"+
    "\1\u0201\46\0\1\u0205\102\0\1\u0206\17\0\1\u0206\30\0"+
    "\1\u01fd\114\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\11\37\1\u0207\7\37\1\0\6\37\1\u0207\3\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\3\37\1\u0208\2\37\1\u0208"+
    "\12\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\21\37\1\0\12\37\1\0\1\37\1\u0209\2\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\1\37\1\u020a\13\37\1\u020a\3\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\2\37\1\u020b"+
    "\10\37\1\u020b\5\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\3\37\1\u020c\2\37\1\u020c\12\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\2\37\1\u020d"+
    "\10\37\1\u020d\5\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\11\37\1\u020e\7\37\1\0\6\37\1\u020e"+
    "\3\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\7\37\1\u020f"+
    "\11\37\1\0\5\37\1\u020f\4\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\64\0\1\u0210\6\0\1\u0210\44\0"+
    "\1\u0167\3\0\1\u0167\75\0\15\172\1\173\3\172\1\173"+
    "\14\172\1\173\4\172\1\173\1\172\1\u0211\13\172\1\u0211"+
    "\35\172\66\0\1\u0212\3\0\1\u0212\25\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\4\37\1\u0213\14\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\1\37\1\u0214"+
    "\13\37\1\u0214\3\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\20\37\1\u0215\1\0\2\37\1\u0215\7\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\5\37\1\u0216\13\37"+
    "\1\0\3\37\1\u0216\6\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\5\37\1\u0217\13\37\1\0\3\37\1\u0217\6\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\2\37\1\u0218\5\37\27\0\10\37"+
    "\1\u0218\10\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\20\37\1\u0219\1\0\2\37\1\u0219\7\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\11\37\1\u021a\7\37\1\0"+
    "\6\37\1\u021a\3\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\5\37\1\u021b\13\37\1\0\3\37\1\u021b\6\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\21\0\1\u01d6\102\0"+
    "\1\u01d8\1\0\1\u01d8\1\0\10\u01d8\6\0\1\u021c\20\0"+
    "\21\u01d8\1\0\12\u01d8\1\0\4\u01d8\1\0\1\u01d8\1\0"+
    "\3\u01d8\5\0\1\u01d9\1\0\1\u01d9\1\0\10\u01d9\27\0"+
    "\21\u01d9\1\0\12\u01d9\1\u021d\4\u01d9\1\0\1\u01d9\1\0"+
    "\3\u01d9\55\0\1\u021e\17\0\1\u021e\26\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\3\37\1\u021f\2\37\1\u021f"+
    "\12\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\1\37\1\u0220\13\37\1\u0220\3\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\2\37\1\u0221\10\37\1\u0221"+
    "\5\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\21\37\1\0\1\u0222\3\37\1\u0222\5\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\11\37\1\u0223\7\37\1\0\6\37"+
    "\1\u0223\3\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\1\37"+
    "\1\u0224\13\37\1\u0224\3\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\2\37\1\u0225\5\37\27\0\10\37\1\u0225\10\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\2\37"+
    "\1\u0226\10\37\1\u0226\5\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\3\37\1\u0227\2\37\1\u0227\12\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\4\37"+
    "\1\u0228\14\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\21\37\1\0\12\37\1\0\1\37\1\u0229\2\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\20\37\1\u022a\1\0\2\37\1\u022a"+
    "\7\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\16\37\1\u022b"+
    "\2\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\21\37\1\0\11\37\1\u022c\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\11\37\1\u022d\7\37\1\0\6\37\1\u022d\3\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\3\37\1\u022e\2\37"+
    "\1\u022e\12\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\3\37"+
    "\1\u022f\4\37\27\0\17\37\1\u022f\1\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\20\37\1\u0230\1\0"+
    "\2\37\1\u0230\7\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\7\37\1\u0231\11\37\1\0\5\37\1\u0231\4\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\7\37\1\u0232\11\37\1\0"+
    "\5\37\1\u0232\4\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\20\37\1\u0233\1\0\2\37\1\u0233\7\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\2\u0234\2\0\1\u0234\22\0\21\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\57\0"+
    "\1\u0201\17\0\1\u0201\26\0\1\u0235\12\0\1\u0201\46\0"+
    "\1\u0205\76\0\1\u0202\13\0\1\u0202\121\0\1\u01fd\3\0"+
    "\1\u01fd\44\0\1\u0201\46\0\1\u0205\132\0\1\u0201\72\0"+
    "\1\u0236\16\0\1\u0236\104\0\1\u0237\12\0\1\u0237\70\0"+
    "\1\u0238\2\0\1\u0238\45\0\1\37\1\0\1\u0239\1\0"+
    "\10\37\27\0\21\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\20\37\1\u023a\1\0\2\37\1\u023a\7\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\u023b\1\0\10\37\27\0\21\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\21\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\1\37\1\u023c\1\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\5\37"+
    "\1\u023d\13\37\1\0\3\37\1\u023d\6\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u023e"+
    "\1\0\10\37\27\0\21\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\14\37\1\u023f\4\37\1\0\1\37"+
    "\1\u023f\10\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\7\37"+
    "\1\u0240\11\37\1\0\5\37\1\u0240\4\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\21\37\1\0\11\37\1\u0241\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\7\0\1\u0242\2\0"+
    "\3\u0242\1\0\2\u0242\30\0\21\u0242\1\0\12\u0242\1\0"+
    "\4\u0242\1\0\1\u0242\1\0\3\u0242\4\0\15\172\1\173"+
    "\3\172\1\173\14\172\1\173\4\172\1\173\5\172\1\u0243"+
    "\17\172\1\u0243\25\172\53\0\1\u0244\17\0\1\u0244\24\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\14\37\1\u0245"+
    "\4\37\1\0\1\37\1\u0245\10\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\u0246\1\0"+
    "\10\37\27\0\21\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\11\37\1\u0247\7\37\1\0\6\37\1\u0247"+
    "\3\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\7\37\1\u0248"+
    "\11\37\1\0\5\37\1\u0248\4\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\11\37\1\u0249\7\37\1\0\6\37\1\u0249"+
    "\3\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\21\37\1\0"+
    "\11\37\1\u024a\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\21\37"+
    "\1\0\12\37\1\0\1\u024b\3\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\1\u024c\11\37\1\u024c\6\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\21\0\1\u01d6\3\0\1\u01d7"+
    "\112\0\1\u024d\3\0\1\u024e\163\0\1\u024f\3\0\1\u024f"+
    "\25\0\1\37\1\0\1\u0250\1\0\10\37\27\0\21\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\20\37"+
    "\1\u0251\1\0\2\37\1\u0251\7\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\2\37\1\u0252\10\37\1\u0252\5\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\7\37\1\u0253"+
    "\11\37\1\0\5\37\1\u0253\4\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\u0254\1\0"+
    "\10\37\27\0\21\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\2\37\1\u0255\10\37\1\u0255\5\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\4\37\1\u0256"+
    "\14\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\20\37\1\u0257\1\0\2\37\1\u0257\7\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u0258"+
    "\1\0\10\37\27\0\21\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u0259"+
    "\1\0\10\37\27\0\21\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\21\37\1\0\10\37\1\u025a\1\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\11\37\1\u025b\7\37"+
    "\1\0\6\37\1\u025b\3\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\7\37\1\u025c\11\37\1\0\5\37\1\u025c\4\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\u025d\1\0\10\37\27\0\21\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\13\0\1\u025e"+
    "\5\0\2\u0234\2\0\1\u0234\32\0\1\u025e\110\0\1\u025f"+
    "\10\0\1\u025f\42\0\1\u0201\116\0\1\u0260\175\0\1\u0201"+
    "\12\0\1\u0201\22\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\21\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\1\37\1\u0261\1\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\7\37\1\u0262\11\37\1\0\5\37"+
    "\1\u0262\4\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\14\37"+
    "\1\u0263\4\37\1\0\1\37\1\u0263\10\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\21\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\1\37\1\u0264\1\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\7\37\1\u0265\11\37"+
    "\1\0\5\37\1\u0265\4\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\21\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\1\37\1\u0266\1\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\14\37\1\u0267\4\37\1\0\1\37"+
    "\1\u0267\10\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\21\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\1\37"+
    "\1\u0268\1\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\1\u0269\11\37\1\u0269\6\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\u0242\1\0"+
    "\1\u0242\1\0\10\u0242\27\0\21\u0242\1\0\12\u0242\1\0"+
    "\4\u0242\1\0\1\u0242\1\0\3\u0242\4\0\15\172\1\173"+
    "\3\172\1\173\14\172\1\173\4\172\1\173\22\172\1\u026a"+
    "\3\172\1\u026a\24\172\15\0\2\u026b\2\0\1\u026b\76\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\2\37\1\u026c"+
    "\10\37\1\u026c\5\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\2\37\1\u026d\10\37\1\u026d\5\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\20\37\1\u026e"+
    "\1\0\2\37\1\u026e\7\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\u026f\1\0\10\37"+
    "\27\0\21\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\3\37\1\u0270\2\37\1\u0270\12\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\21\0\1\u024d"+
    "\154\0\1\u0271\17\0\1\u0271\24\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\21\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\1\37\1\u0272\1\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\7\37\1\u0273\11\37"+
    "\1\0\5\37\1\u0273\4\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\20\37\1\u0274\1\0\2\37\1\u0274\7\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\20\37\1\u0275\1\0\2\37"+
    "\1\u0275\7\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\1\u0276"+
    "\11\37\1\u0276\6\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\u0277\1\0"+
    "\10\37\27\0\21\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\21\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\1\37\1\u0278\1\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\3\37\1\u0279\2\37\1\u0279"+
    "\12\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u027a\1\0\10\37\27\0"+
    "\21\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u027b\1\0\10\37\27\0"+
    "\21\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u027c\1\0\10\37\27\0"+
    "\21\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\51\0\1\u027d\13\0\1\u027d\104\0\1\u0201\2\0"+
    "\1\u0201\111\0\1\u0201\13\0\1\u0201\36\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\21\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\1\37\1\u027e\1\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\5\37\1\u027f"+
    "\13\37\1\0\3\37\1\u027f\6\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\21\37\1\0\1\u0280\3\37\1\u0280\5\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\21\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\1\37\1\u0281\1\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\21\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\1\37"+
    "\1\u0282\1\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\21\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\1\37\1\u0283\1\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\20\37\1\u0284\1\0\2\37\1\u0284"+
    "\7\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\4\37\1\u0285"+
    "\14\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\4\0\15\172\1\173\3\172\1\173\14\172\1\173"+
    "\4\172\1\173\7\172\1\u0286\17\172\1\u0286\23\172\15\0"+
    "\2\u026b\2\0\1\u026b\33\0\1\u0287\16\0\1\u0287\23\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\20\37\1\u0288"+
    "\1\0\2\37\1\u0288\7\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\1\37\1\u0289\13\37\1\u0289\3\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\21\37\1\0\11\37"+
    "\1\u028a\1\0\4\37\1\0\1\37\1\0\3\37\34\0"+
    "\1\u028b\67\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\1\u028c\11\37\1\u028c\6\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u028d"+
    "\1\0\10\37\27\0\21\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u028e"+
    "\1\0\10\37\27\0\21\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\2\37\1\u028f\5\37\27\0\10\37\1\u028f\10\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\1\u0290"+
    "\11\37\1\u0290\6\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\1\u0291\11\37\1\u0291\6\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\7\37\1\u0292\11\37"+
    "\1\0\5\37\1\u0292\4\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\4\37\1\u0293\14\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\50\0\1\u0294\11\0\1\u0294"+
    "\41\0\1\37\1\0\1\37\1\0\10\37\27\0\1\u0295"+
    "\11\37\1\u0295\6\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\2\37\1\u0296\10\37\1\u0296\5\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\21\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\1\37\1\u0297"+
    "\1\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\21\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\1\37\1\u0298\1\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\1\u0299\11\37\1\u0299\6\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\21\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\1\37\1\u029a\1\37"+
    "\4\0\15\172\1\173\3\172\1\173\6\172\1\u029b\5\172"+
    "\1\173\4\172\1\173\53\172\46\0\1\u029c\10\0\1\u029c"+
    "\40\0\1\37\1\0\1\37\1\0\10\37\27\0\21\37"+
    "\1\0\11\37\1\u029d\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u029e\1\0\10\37\27\0"+
    "\21\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\21\0\2\u028b\2\0\1\u028b\76\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\3\37\1\u029f\2\37\1\u029f"+
    "\12\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\2\37\1\u02a0"+
    "\5\37\27\0\10\37\1\u02a0\10\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\3\37\1\u02a1\2\37\1\u02a1"+
    "\12\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\14\37\1\u02a2\4\37\1\0\1\37\1\u02a2\10\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\106\0\1\u02a3\15\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\3\37\1\u02a4"+
    "\2\37\1\u02a4\12\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\20\37\1\u02a5\1\0\2\37\1\u02a5\7\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\21\37\1\0\12\37"+
    "\1\0\1\37\1\u02a6\2\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\21\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\1\37"+
    "\1\u02a7\1\37\4\0\15\172\1\u02a8\1\u029b\2\172\1\u02a8"+
    "\14\172\1\173\4\172\1\173\53\172\47\0\1\u02a9\2\0"+
    "\1\u02a9\45\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\20\37\1\u02aa\1\0\2\37\1\u02aa\7\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\20\37\1\u02ab\1\0\2\37\1\u02ab"+
    "\7\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\21\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\1\37\1\u02ac"+
    "\1\37\5\0\1\37\1\0\1\u02ad\1\0\10\37\27\0"+
    "\21\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\21\37\1\0\1\u02ae\3\37\1\u02ae\5\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\66\0\1\u02af\12\0\1\u02af"+
    "\22\0\1\37\1\0\1\u02b0\1\0\10\37\27\0\21\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\u02b1\1\0\10\37\27\0\21\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\21\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\1\37"+
    "\1\u02b2\1\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\21\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\1\37\1\u02b3\1\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\5\37\1\u02b4\13\37\1\0\3\37"+
    "\1\u02b4\6\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\102\0\1\u02b5\21\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\21\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\1\37\1\u02b6\1\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\11\37\1\u02b7\7\37\1\0\6\37"+
    "\1\u02b7\3\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\52\0\1\u02b8\10\0\1\u02b8\40\0\1\37\1\0\1\u02b9"+
    "\1\0\10\37\27\0\21\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\66\0\1\u02ba\12\0\1\u02ba"+
    "\22\0\1\37\1\0\1\37\1\0\10\37\27\0\1\37"+
    "\1\u02bb\13\37\1\u02bb\3\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\7\0\1\u02bc\130\0\2\u02bc"+
    "\2\0\1\u02bc\5\0\1\u02bd\104\0\2\u02bd\2\0\1\u02bd"+
    "\1\0\1\u02be\42\0\1\u02bf\3\0\1\u02bf\5\0\1\u02c0"+
    "\104\0\1\u02c1\3\0\1\u02c1\123\0\1\u02c2\105\0\1\u02c3"+
    "\3\0\1\u02c3\123\0\1\u02c4\105\0\1\u02c5\3\0\1\u02c5"+
    "\123\0\1\u02c6\105\0\1\u02c7\3\0\1\u02c7\41\0\2\u02c5"+
    "\2\0\1\u02c5\6\0\1\u02c8\154\0\1\u02c9\3\0\1\u02c9"+
    "\47\0\1\u02c5\173\0\1\u02c5\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[44556];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\23\0\2\1\1\11\12\1\2\11\2\1\3\11\13\1"+
    "\1\11\31\1\2\11\2\1\1\11\6\1\1\11\2\1"+
    "\1\11\7\1\1\11\4\1\1\0\1\1\1\11\2\1"+
    "\1\11\3\1\1\11\1\1\1\11\1\1\1\11\4\0"+
    "\1\1\1\11\4\1\1\11\2\1\1\0\2\1\1\0"+
    "\1\1\2\0\6\1\1\11\2\0\4\1\1\0\1\1"+
    "\1\0\1\1\2\0\1\11\2\0\2\1\1\0\47\1"+
    "\1\0\2\1\1\11\1\1\12\0\1\1\3\0\3\1"+
    "\3\11\1\1\3\0\3\1\1\11\4\0\1\1\2\0"+
    "\1\11\2\0\1\11\7\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\1\1\0\1\11\1\0\2\11\2\1\1\11"+
    "\3\0\15\1\1\0\1\1\3\0\54\1\12\0\10\1"+
    "\1\11\2\1\1\0\1\1\1\0\1\11\1\0\1\11"+
    "\1\1\1\0\1\11\1\0\1\1\1\0\2\11\1\1"+
    "\2\0\20\1\4\0\51\1\12\0\11\1\1\0\1\11"+
    "\1\0\1\1\1\11\1\0\15\1\1\11\1\1\3\0"+
    "\42\1\10\0\1\11\1\0\13\1\1\0\11\1\3\0"+
    "\25\1\5\0\24\1\1\11\1\1\1\0\16\1\3\0"+
    "\12\1\1\0\5\1\1\0\13\1\1\0\11\1\1\0"+
    "\14\1\1\0\7\1\1\0\6\1\1\11\5\1\1\0"+
    "\5\1\1\0\5\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\14\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[713];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    private final ByteStack stack = new ByteStack();
    private String heredoc = null;
    private int hereocLength = 0;
    private boolean aspTagsAllowed;
    private boolean shortTagsAllowed;
    private LexerInput input;

    public PHP5ColoringLexer(LexerRestartInfo info, boolean shortTagsAllowed, boolean aspTagsAllowed, boolean inPHP) {
        this.input = info.input();
        this.aspTagsAllowed = aspTagsAllowed;
        this.shortTagsAllowed = shortTagsAllowed;

        if (info.state() != null) {
            //reset state
            setState((LexerState) info.state());
        } else {
            //initial state
            stack.push(YYINITIAL);
            if (inPHP) {
                stack.push(ST_PHP_IN_SCRIPTING);
                zzState = ST_PHP_IN_SCRIPTING;
                zzLexicalState = ST_PHP_IN_SCRIPTING;
            } else {
                zzState = YYINITIAL;
                zzLexicalState = YYINITIAL;
            }
        }

    }

    public static final class LexerState  {
        final ByteStack stack;
        /* the current state of the DFA */
        final int zzState;
        /* the current lexical state */
        final int zzLexicalState;
        /* remember the heredoc */
        final String heredoc;
        /* and the lenght of */
        final int hereocLength;

        LexerState(ByteStack stack, int zzState, int zzLexicalState, String heredoc, int hereocLength) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.heredoc = heredoc;
            this.hereocLength = hereocLength;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null || obj.getClass() != this.getClass()) {
                return false;
            }

            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                && (this.zzLexicalState == state.zzLexicalState)
                && (this.hereocLength == state.hereocLength)
                && ((this.heredoc == null && state.heredoc == null) || (this.heredoc != null && state.heredoc != null && this.heredoc.equals(state.heredoc))));
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            hash = 31 * hash + this.hereocLength;
            if (heredoc != null) {
                hash = 31 * hash + this.heredoc.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.copyOf(), zzState, zzLexicalState, heredoc, hereocLength);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
        this.heredoc = state.heredoc;
        this.hereocLength = state.hereocLength;
    }

    protected boolean isHeredocState(int state) {
        return state == ST_PHP_HEREDOC || state == ST_PHP_START_HEREDOC || state == ST_PHP_END_HEREDOC || state == ST_PHP_NOWDOC;
    }

    public int[] getParamenters() {
        return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }

    protected int getZZStartRead() {
        return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
        return this.zzPushbackPos;
    }

    protected void pushBack(int i) {
        yypushback(i);
    }

    protected void popState() {
        yybegin(stack.pop());
    }

    protected void pushState(final int state) {
        stack.push(getZZLexicalState());
        yybegin(state);
    }


 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PHP5ColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PHP5ColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1772) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PHPTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24:
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens
    return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 152: break;
        case 88:
          { return PHPTokenId.PHP_FALSE;
          }
        case 153: break;
        case 21:
          { yypushback(1);
    yybegin(ST_PHP_NOWDOC);
          }
        case 154: break;
        case 27:
          { String yytext = yytext();
    switch (yytext.charAt(yytext.length() - 1)) {
        case '?':
        case '%':
            yypushback(1);
            break;
        default:
            popState();
    }
     return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 155: break;
        case 68:
          { yypushback(2);
        return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 156: break;
        case 55:
          { popState();
    return PHPTokenId.PHPDOC_COMMENT_END;
          }
        case 157: break;
        case 123:
          { return PHPTokenId.PHP_INCLUDE;
          }
        case 158: break;
        case 29:
          { return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 159: break;
        case 141:
          { return PHPTokenId.PHP_ENDDECLARE;
          }
        case 160: break;
        case 113:
          { return PHPTokenId.PHP_GLOBAL;
          }
        case 161: break;
        case 148:
          { return PHPTokenId.PHP__FUNCTION__;
          }
        case 162: break;
        case 17:
          { popState();
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 163: break;
        case 33:
          { if (shortTagsAllowed ) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 164: break;
        case 47:
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 165: break;
        case 80:
          { return PHPTokenId.PHP_LIST;
          }
        case 166: break;
        case 87:
          { return PHPTokenId.PHP_EMPTY;
          }
        case 167: break;
        case 14:
          { pushState(ST_PHP_LINE_COMMENT);
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 168: break;
        case 84:
          { return PHPTokenId.PHP_CASE;
          }
        case 169: break;
        case 35:
          { return PHPTokenId.PHP_VARIABLE;
          }
        case 170: break;
        case 38:
          { //popState();
        yybegin(YYINITIAL);
        if (yylength() > 2) {
            yypushback(yylength()-2);
        }
        stack.clear();
    return PHPTokenId.PHP_CLOSETAG;
          }
        case 171: break;
        case 37:
          { if (aspTagsAllowed) {
            yybegin(YYINITIAL);
            stack.clear();
        return PHPTokenId.PHP_CLOSETAG;
    }
    return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 172: break;
        case 28:
          { return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 173: break;
        case 77:
          { pushState(ST_PHP_DOC_COMMENT);
    yypushback(yylength()-3);
    return PHPTokenId.PHPDOC_COMMENT_START;
          }
        case 174: break;
        case 93:
          { return PHPTokenId.PHP_ISSET;
          }
        case 175: break;
        case 131:
          { return PHPTokenId.PHP__FILE__;
          }
        case 176: break;
        case 42:
          { return PHPTokenId.PHP_IF;
          }
        case 177: break;
        case 48:
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 178: break;
        case 57:
          { if (aspTagsAllowed) {
            yybegin(YYINITIAL);
            stack.clear();
        return PHPTokenId.PHP_CLOSETAG;
    }
    String text = yytext();
    if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
        popState();
    }
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 179: break;
        case 40:
          { return PHPTokenId.PHP_AS;
          }
        case 180: break;
        case 43:
          { pushState(ST_PHP_LOOKING_FOR_CLASS_CONST);
    return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 181: break;
        case 150:
          { pushState(ST_HALTED_COMPILER);
    return PHPTokenId.PHP_HALT_COMPILER;
          }
        case 182: break;
        case 64:
          { return PHPTokenId.PHP_USE;
          }
        case 183: break;
        case 96:
          { return PHPTokenId.PHP_TYPE_FLOAT;
          }
        case 184: break;
        case 149:
          { return PHPTokenId.PHP__NAMESPACE__;
          }
        case 185: break;
        case 56:
          { popState();
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 186: break;
        case 147:
          { return PHPTokenId.PHP_INCLUDE_ONCE;
          }
        case 187: break;
        case 134:
          { return PHPTokenId.PHP_NAMESPACE;
          }
        case 188: break;
        case 54:
          { popState();
    return PHPTokenId.PHP_COMMENT_END;
          }
        case 189: break;
        case 91:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    hereocLength = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        hereocLength--;
    }
    // HEREDOC PHP 5.3
    if (yytext().charAt(startString) == '"') {
        hereocLength -= 2;
        startString ++;
    }
    heredoc = yytext().substring(startString,hereocLength+startString);
    yybegin(ST_PHP_START_HEREDOC);
    return PHPTokenId.PHP_HEREDOC_TAG_START;
          }
        case 190: break;
        case 31:
          { popState();
    return PHPTokenId.T_INLINE_HTML;
          }
        case 191: break;
        case 6:
          { return PHPTokenId.PHP_OPERATOR;
          }
        case 192: break;
        case 11:
          { pushState(ST_PHP_BACKQUOTE);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 193: break;
        case 44:
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 194: break;
        case 3:
          { return PHPTokenId.PHP_NUMBER;
          }
        case 195: break;
        case 66:
          { yypushback(1);
    pushState(ST_PHP_VAR_OFFSET);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 196: break;
        case 120:
          { return PHPTokenId.PHP_REQUIRE;
          }
        case 197: break;
        case 122:
          { return PHPTokenId.PHP_DECLARE;
          }
        case 198: break;
        case 99:
          { return PHPTokenId.PHP_CLONE;
          }
        case 199: break;
        case 94:
          { return PHPTokenId.PHP_TRAIT;
          }
        case 200: break;
        case 46:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_TOKEN;
          }
        case 201: break;
        case 60:
          { return PHPTokenId.PHP_NEW;
          }
        case 202: break;
        case 71:
          { yypushback(2);
    return PHPTokenId.PHP_COMMENT;
          }
        case 203: break;
        case 53:
          { return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 204: break;
        case 18:
          { yypushback(1);
        popState();
          }
        case 205: break;
        case 116:
          { return PHPTokenId.PHP_EXTENDS;
          }
        case 206: break;
        case 78:
          { return PHPTokenId.PHP_NULL;
          }
        case 207: break;
        case 85:
          { pushState(ST_PHP_IN_SCRIPTING);
    //yybegin(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_OPENTAG;
    //return createSymbol(ASTSymbol.T_OPEN_TAG);
          }
        case 208: break;
        case 104:
          { return PHPTokenId.PHP_WHILE;
          }
        case 209: break;
        case 133:
          { return PHPTokenId.PHP_ENDSWITCH;
          }
        case 210: break;
        case 124:
          { return PHPTokenId.PHP_PRIVATE;
          }
        case 211: break;
        case 1:
          { return PHPTokenId.T_INLINE_HTML;
          }
        case 212: break;
        case 144:
          { return PHPTokenId.PHP_YIELD_FROM;
          }
        case 213: break;
        case 86:
          { return PHPTokenId.PHP_ENDIF;
          }
        case 214: break;
        case 25:
          { yypushback(1);
    popState();
        if (yylength() > 0)
            return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 215: break;
        case 110:
          { return PHPTokenId.PHP_STATIC;
          }
        case 216: break;
        case 127:
          { return PHPTokenId.PHP_FUNCTION;
          }
        case 217: break;
        case 121:
          { return PHPTokenId.PHP_DEFAULT;
          }
        case 218: break;
        case 16:
          { return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 219: break;
        case 26:
          { popState();
    return PHPTokenId.PHP_TOKEN;
          }
        case 220: break;
        case 34:
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 221: break;
        case 132:
          { return PHPTokenId.PHP__LINE__;
          }
        case 222: break;
        case 73:
          { return PHPTokenId.PHP_EXIT;
          }
        case 223: break;
        case 32:
          { if (aspTagsAllowed) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 224: break;
        case 36:
          { pushState(ST_PHP_COMMENT);
    return PHPTokenId.PHP_COMMENT_START;
          }
        case 225: break;
        case 90:
          { return PHPTokenId.PHP_BREAK;
          }
        case 226: break;
        case 20:
          { yypushback(1);
        yybegin(ST_PHP_HEREDOC);
          }
        case 227: break;
        case 136:
          { return PHPTokenId.PHP_INSTEADOF;
          }
        case 228: break;
        case 19:
          { yypushback(yylength());
        popState();
          }
        case 229: break;
        case 137:
          { return PHPTokenId.PHP_PROTECTED;
          }
        case 230: break;
        case 58:
          { String text = yytext();
    if ((text.charAt(1)=='%' && aspTagsAllowed)
        || (text.charAt(1)=='?')) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.T_OPEN_TAG_WITH_ECHO;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 231: break;
        case 101:
          { return PHPTokenId.PHP_PRINT;
          }
        case 232: break;
        case 97:
          { return PHPTokenId.PHP_CONST;
          }
        case 233: break;
        case 65:
          { return PHPTokenId.PHP_VAR;
          }
        case 234: break;
        case 151:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.T_INLINE_HTML;
          }
        case 235: break;
        case 95:
          { return PHPTokenId.PHP_THROW;
          }
        case 236: break;
        case 114:
          { return PHPTokenId.PHP_PARENT;
          }
        case 237: break;
        case 112:
          { return PHPTokenId.PHP_SWITCH;
          }
        case 238: break;
        case 69:
          { int trailingNewLineLength = 1;
        int label_len = yylength() - trailingNewLineLength;
        int back = trailingNewLineLength;

        if (yytext().charAt(label_len-1)==';') {
           label_len--;
           back++;
        }
        if (label_len > hereocLength && yytext().substring(label_len - hereocLength,label_len).equals(heredoc)) {
            back = back + hereocLength;
            yypushback(back);
            yybegin(ST_PHP_END_HEREDOC);
        } else {
            yypushback(trailingNewLineLength);
            return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
        }
          }
        case 239: break;
        case 72:
          { yypushback(2); // go back to mark end of comment in the next token
        return PHPTokenId.PHPDOC_COMMENT;
          }
        case 240: break;
        case 62:
          { return PHPTokenId.PHP_TYPE_INT;
          }
        case 241: break;
        case 105:
          { return PHPTokenId.PHP_CASTING;
          }
        case 242: break;
        case 39:
          { return PHPTokenId.PHP_TEXTUAL_OPERATOR;
          }
        case 243: break;
        case 30:
          { popState();return PHPTokenId.WHITESPACE;
          }
        case 244: break;
        case 61:
          { return PHPTokenId.PHP_DIE;
          }
        case 245: break;
        case 8:
          { return PHPTokenId.PHP_SEMICOLON;
          }
        case 246: break;
        case 139:
          { return PHPTokenId.PHP__CLASS__;
          }
        case 247: break;
        case 70:
          { int label_len = yylength() - 1;
    int back = 1;

    if (yytext().charAt(label_len-1)==';') {
       label_len--;
           back++;
    }
    if (label_len > hereocLength && yytext().substring(label_len - hereocLength,label_len).equals(heredoc)) {
        back = back + hereocLength;
        yypushback(back);
        yybegin(ST_PHP_END_NOWDOC);
    }
    else {
        yypushback(1);
    }
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 248: break;
        case 2:
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 249: break;
        case 100:
          { return PHPTokenId.PHP_CLASS;
          }
        case 250: break;
        case 118:
          { return PHPTokenId.PHP_FINALLY;
          }
        case 251: break;
        case 135:
          { return PHPTokenId.PHP_INTERFACE;
          }
        case 252: break;
        case 138:
          { return PHPTokenId.PHP__TRAIT__;
          }
        case 253: break;
        case 102:
          { return PHPTokenId.PHP_UNSET;
          }
        case 254: break;
        case 12:
          { return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 255: break;
        case 22:
          { yypushback(1);
    popState();
          }
        case 256: break;
        case 115:
          { return PHPTokenId.PHP_PUBLIC;
          }
        case 257: break;
        case 146:
          { return PHPTokenId.PHP_REQUIRE_ONCE;
          }
        case 258: break;
        case 140:
          { return PHPTokenId.PHP_ENDFOREACH;
          }
        case 259: break;
        case 111:
          { return PHPTokenId.PHP_TYPE_STRING;
          }
        case 260: break;
        case 76:
          { return PHPTokenId.PHP_EVAL;
          }
        case 261: break;
        case 82:
          { return PHPTokenId.PHP_GOTO;
          }
        case 262: break;
        case 106:
          { popState();
        return PHPTokenId.PHP_STRING;
          }
        case 263: break;
        case 128:
          { return PHPTokenId.PHP_ABSTRACT;
          }
        case 264: break;
        case 9:
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 265: break;
        case 75:
          { return PHPTokenId.PHP_ECHO;
          }
        case 266: break;
        case 89:
          { return PHPTokenId.PHP_FINAL;
          }
        case 267: break;
        case 145:
          { return PHPTokenId.PHP__METHOD__;
          }
        case 268: break;
        case 10:
          { return PHPTokenId.PHP_NS_SEPARATOR;
          }
        case 269: break;
        case 103:
          { return PHPTokenId.PHP_YIELD;
          }
        case 270: break;
        case 125:
          { return PHPTokenId.PHP__DIR__;
          }
        case 271: break;
        case 5:
          { return  PHPTokenId.PHP_STRING;
          }
        case 272: break;
        case 129:
          { return PHPTokenId.PHP_CONTINUE;
          }
        case 273: break;
        case 143:
          { return PHPTokenId.PHP_IMPLEMENTS;
          }
        case 274: break;
        case 63:
          { return PHPTokenId.PHP_TRY;
          }
        case 275: break;
        case 92:
          { return PHPTokenId.PHP_ARRAY;
          }
        case 276: break;
        case 7:
          { return PHPTokenId.WHITESPACE;
          }
        case 277: break;
        case 109:
          { return PHPTokenId.PHP_RETURN;
          }
        case 278: break;
        case 4:
          { return PHPTokenId.PHP_TOKEN;
          }
        case 279: break;
        case 15:
          { return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 280: break;
        case 98:
          { return PHPTokenId.PHP_CATCH;
          }
        case 281: break;
        case 67:
          { String text = yytext();
        int lastIndexOfDollar = text.lastIndexOf('$');
        yypushback(text.length() - lastIndexOfDollar);
        return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 282: break;
        case 130:
          { return PHPTokenId.PHP_CALLABLE;
          }
        case 283: break;
        case 142:
          { return PHPTokenId.PHP_INSTANCEOF;
          }
        case 284: break;
        case 50:
          { heredoc=null;
    hereocLength=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 1;
    // mark just the label
    if (yytext().charAt(yylength() - 2)==';') {
        back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_HEREDOC_TAG_END;
          }
        case 285: break;
        case 119:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
        int startString=3+bprefix;
        /* 3 is <<<, 2 is quotes, 1 is newline */
        hereocLength = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
        while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
            startString++;
            hereocLength--;
        }
        // first quate
        startString++;
        heredoc = yytext().substring(startString, hereocLength+startString);
        yybegin(ST_PHP_START_NOWDOC);
        return PHPTokenId.PHP_NOWDOC_TAG_START;
          }
        case 286: break;
        case 83:
          { return PHPTokenId.PHP_TYPE_BOOL;
          }
        case 287: break;
        case 107:
          { return PHPTokenId.PHP_ENDFOR;
          }
        case 288: break;
        case 59:
          { return PHPTokenId.PHP_FOR;
          }
        case 289: break;
        case 51:
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
        label_len--;
    }

    if (label_len==hereocLength && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        hereocLength=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_NOWDOC_TAG_END;
    } else {
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 290: break;
        case 117:
          { return PHPTokenId.PHP_FOREACH;
          }
        case 291: break;
        case 23:
          { popState();
    return PHPTokenId.PHP_STRING;
          }
        case 292: break;
        case 74:
          { return PHPTokenId.PHP_ELSE;
          }
        case 293: break;
        case 81:
          { return PHPTokenId.PHP_SELF;
          }
        case 294: break;
        case 52:
          { heredoc=null; hereocLength=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 1;
    // mark just the label
    if (yytext().charAt(yylength() - 2)==';') {
        back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_NOWDOC_TAG_END;
          }
        case 295: break;
        case 45:
          { yypushback(1);
    return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 296: break;
        case 13:
          { int lastState = stack.peek();
    if (lastState != ST_PHP_IN_SCRIPTING && lastState != YYINITIAL) {
        // probably in some sub state -> "{$" or "${"
        popState();
    }
    return PHPTokenId.PHP_CURLY_CLOSE;
          }
        case 297: break;
        case 41:
          { return PHPTokenId.PHP_DO;
          }
        case 298: break;
        case 49:
          { int trailingNewLineLength = 1;
        int label_len = yylength() - trailingNewLineLength;
        int back = trailingNewLineLength;

        if (yytext().charAt(label_len-1)==';') {
           label_len--;
           back++;
        }
        if (label_len == hereocLength && yytext().substring(label_len - hereocLength,label_len).equals(heredoc)) {
            back = back + hereocLength;
            yypushback(back);
            yybegin(ST_PHP_END_HEREDOC);
        } else {
            yypushback(yylength() - trailingNewLineLength);
            yybegin(ST_PHP_HEREDOC);
        }
          }
        case 299: break;
        case 126:
          { return PHPTokenId.PHP_ENDWHILE;
          }
        case 300: break;
        case 108:
          { return PHPTokenId.PHP_ELSEIF;
          }
        case 301: break;
        case 79:
          { return PHPTokenId.PHP_TRUE;
          }
        case 302: break;
        default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
            switch (zzLexicalState) {
            case ST_PHP_COMMENT: {
              if (input.readLength() > 0) {
                input.backup(1);  // backup eof
                return PHPTokenId.PHP_COMMENT;
              }
              else {
                  return null;
              }
            }
            case 714: break;
            case ST_PHP_DOC_COMMENT: {
              if (input.readLength() > 0) {
                    input.backup(1);  // backup eof
                    return PHPTokenId.PHPDOC_COMMENT;
                }
                else {
                    return null;
                }
            }
            case 715: break;
            default:
              {        if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return PHPTokenId.UNKNOWN_TOKEN;
        } else {
            return null;
        }
 }
            }

          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
