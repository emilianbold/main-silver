/* The following code was generated by JFlex 1.4.3 on 5.11.12 16:24 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5.11.12 16:24 from the specification file
 * <tt>/home/warden/NetBeansProjects/web-main-new/php.editor/tools/Php5ColoringScanner.flex</tt>
 */
public class PHP5ColoringLexer {
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP_END_NOWDOC = 20;
  public static final int ST_PHP_NOWDOC = 16;
  public static final int ST_PHP_END_HEREDOC = 14;
  public static final int ST_PHP_COMMENT = 26;
  public static final int ST_PHP_START_HEREDOC = 12;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 8;
  public static final int ST_PHP_IN_SCRIPTING = 2;
  public static final int ST_PHP_DOC_COMMENT = 28;
  public static final int ST_PHP_LINE_COMMENT = 30;
  public static final int ST_PHP_BACKQUOTE = 6;
  public static final int ST_PHP_START_NOWDOC = 18;
  public static final int ST_PHP_HEREDOC = 10;
  public static final int ST_HALTED_COMPILER = 34;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 32;
  public static final int ST_PHP_VAR_OFFSET = 24;
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_DOUBLE_QUOTES = 4;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
    16, 16, 17, 17
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\16\1\21\2\0\1\15\22\0\1\16\1\32\1\23\1\106"+
    "\1\22\1\36\1\37\1\67\1\77\1\50\1\34\1\31\1\17\1\4"+
    "\1\2\1\35\1\5\1\11\10\1\1\75\1\20\1\33\1\27\1\30"+
    "\1\70\1\17\1\44\1\10\1\55\1\46\1\3\1\7\1\64\1\66"+
    "\1\56\1\100\1\73\1\63\1\74\1\45\1\42\1\60\1\102\1\43"+
    "\1\53\1\62\1\65\1\76\1\72\1\6\1\71\1\13\1\104\1\24"+
    "\1\105\1\41\1\101\1\25\1\44\1\10\1\47\1\46\1\3\1\7"+
    "\1\64\1\66\1\57\1\100\1\73\1\63\1\74\1\45\1\42\1\61"+
    "\1\102\1\52\1\54\1\51\1\65\1\76\1\72\1\6\1\71\1\13"+
    "\1\26\1\40\1\103\1\17\53\13\1\13\12\13\1\13\4\13\1\13"+
    "\5\13\27\13\1\13\37\13\1\13\10\13\u0137\12\31\0\162\12\4\0"+
    "\14\12\16\0\5\12\11\0\1\12\213\0\1\12\13\0\1\12\1\0"+
    "\3\12\1\0\1\12\1\0\24\12\1\0\54\12\1\0\46\12\1\0"+
    "\5\12\4\0\202\12\10\0\105\12\1\0\46\12\2\0\2\12\6\0"+
    "\20\12\41\0\46\12\2\0\1\12\7\0\47\12\110\0\33\12\5\0"+
    "\3\12\56\0\32\12\5\0\13\12\25\0\12\14\4\0\2\12\1\0"+
    "\143\12\1\0\1\12\17\0\2\12\7\0\2\12\12\14\3\12\2\0"+
    "\1\12\20\0\1\12\1\0\36\12\35\0\3\12\60\0\46\12\13\0"+
    "\1\12\u0152\0\66\12\3\0\1\12\22\0\1\12\7\0\12\12\4\0"+
    "\12\14\25\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0"+
    "\1\12\3\0\4\12\3\0\1\12\36\0\2\12\1\0\3\12\4\0"+
    "\12\14\2\12\23\0\6\12\4\0\2\12\2\0\26\12\1\0\7\12"+
    "\1\0\2\12\1\0\2\12\1\0\2\12\37\0\4\12\1\0\1\12"+
    "\7\0\12\14\2\0\3\12\20\0\11\12\1\0\3\12\1\0\26\12"+
    "\1\0\7\12\1\0\2\12\1\0\5\12\3\0\1\12\22\0\1\12"+
    "\17\0\2\12\4\0\12\14\25\0\10\12\2\0\2\12\2\0\26\12"+
    "\1\0\7\12\1\0\2\12\1\0\5\12\3\0\1\12\36\0\2\12"+
    "\1\0\3\12\4\0\12\14\1\0\1\12\21\0\1\12\1\0\6\12"+
    "\3\0\3\12\1\0\4\12\3\0\2\12\1\0\1\12\1\0\2\12"+
    "\3\0\2\12\3\0\3\12\3\0\10\12\1\0\3\12\55\0\11\14"+
    "\25\0\10\12\1\0\3\12\1\0\27\12\1\0\12\12\1\0\5\12"+
    "\46\0\2\12\4\0\12\14\25\0\10\12\1\0\3\12\1\0\27\12"+
    "\1\0\12\12\1\0\5\12\3\0\1\12\40\0\1\12\1\0\2\12"+
    "\4\0\12\14\25\0\10\12\1\0\3\12\1\0\27\12\1\0\20\12"+
    "\46\0\2\12\4\0\12\14\25\0\22\12\3\0\30\12\1\0\11\12"+
    "\1\0\1\12\2\0\7\12\72\0\60\12\1\0\2\12\14\0\7\12"+
    "\11\0\12\14\47\0\2\12\1\0\1\12\2\0\2\12\1\0\1\12"+
    "\2\0\1\12\6\0\4\12\1\0\7\12\1\0\3\12\1\0\1\12"+
    "\1\0\1\12\2\0\2\12\1\0\4\12\1\0\2\12\11\0\1\12"+
    "\2\0\5\12\1\0\1\12\11\0\12\14\2\0\2\12\42\0\1\12"+
    "\37\0\12\14\26\0\10\12\1\0\42\12\35\0\4\12\164\0\42\12"+
    "\1\0\5\12\1\0\2\12\25\0\12\14\6\0\6\12\112\0\46\12"+
    "\12\0\51\12\7\0\132\12\5\0\104\12\5\0\122\12\6\0\7\12"+
    "\1\0\77\12\1\0\1\12\1\0\4\12\2\0\7\12\1\0\1\12"+
    "\1\0\4\12\2\0\47\12\1\0\1\12\1\0\4\12\2\0\37\12"+
    "\1\0\1\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12"+
    "\2\0\7\12\1\0\7\12\1\0\27\12\1\0\37\12\1\0\1\12"+
    "\1\0\4\12\2\0\7\12\1\0\47\12\1\0\23\12\16\0\11\14"+
    "\56\0\125\12\14\0\u026c\12\2\0\10\12\12\0\32\12\5\0\113\12"+
    "\25\0\15\12\1\0\4\12\16\0\22\12\16\0\22\12\16\0\15\12"+
    "\1\0\3\12\17\0\64\12\43\0\1\12\4\0\1\12\3\0\12\14"+
    "\46\0\12\14\6\0\130\12\10\0\51\12\127\0\35\12\51\0\12\14"+
    "\36\12\2\0\5\12\u038b\0\154\12\224\0\234\12\4\0\132\12\6\0"+
    "\26\12\2\0\6\12\2\0\46\12\2\0\6\12\2\0\10\12\1\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\37\12\2\0\65\12\1\0"+
    "\7\12\1\0\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0"+
    "\6\12\4\0\15\12\5\0\3\12\1\0\7\12\164\0\1\12\15\0"+
    "\1\12\202\0\1\12\4\0\1\12\2\0\12\12\1\0\1\12\3\0"+
    "\5\12\6\0\1\12\1\0\1\12\1\0\1\12\1\0\4\12\1\0"+
    "\3\12\1\0\7\12\3\0\3\12\5\0\5\12\u0ebb\0\2\12\52\0"+
    "\5\12\5\0\2\12\4\0\126\12\6\0\3\12\1\0\132\12\1\0"+
    "\4\12\5\0\50\12\4\0\136\12\21\0\30\12\70\0\20\12\u0200\0"+
    "\u19b6\12\112\0\u51a6\12\132\0\u048d\12\u0773\0\u2ba4\12\u215c\0\u012e\12\2\0"+
    "\73\12\225\0\7\12\14\0\5\12\5\0\1\12\1\0\12\12\1\0"+
    "\15\12\1\0\5\12\1\0\1\12\1\0\2\12\1\0\2\12\1\0"+
    "\154\12\41\0\u016b\12\22\0\100\12\2\0\66\12\50\0\14\12\164\0"+
    "\5\12\1\0\207\12\23\0\12\14\7\0\32\12\6\0\32\12\13\0"+
    "\131\12\3\0\6\12\2\0\6\12\2\0\6\12\2\0\3\12\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\14\0\2\2\1\3\1\4\1\5\1\6"+
    "\1\5\1\4\4\6\1\7\1\5\1\10\1\5\1\11"+
    "\1\12\1\13\1\14\12\5\15\6\1\3\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\15\1\16\1\1\1\17"+
    "\1\20\2\17\1\1\3\17\3\21\2\1\3\3\2\22"+
    "\4\3\1\0\2\23\1\3\1\24\1\25\1\24\1\4"+
    "\1\26\1\4\1\27\1\26\1\30\4\0\4\31\2\32"+
    "\1\33\1\34\1\35\1\0\1\36\1\0\1\37\1\4"+
    "\1\0\1\40\6\6\1\41\2\0\4\6\1\0\1\6"+
    "\1\0\1\42\2\0\1\17\2\0\2\40\1\0\1\43"+
    "\1\44\1\40\4\6\1\45\4\6\1\46\11\6\1\47"+
    "\13\6\1\0\1\50\1\6\1\51\1\6\12\0\1\6"+
    "\3\0\2\52\2\53\1\54\1\55\1\53\3\0\1\52"+
    "\3\56\1\57\3\0\2\60\1\52\2\53\1\0\1\61"+
    "\2\0\1\62\7\0\1\63\2\0\1\64\1\0\1\65"+
    "\1\52\1\0\1\66\1\0\1\67\1\70\1\31\1\71"+
    "\1\72\3\0\7\6\2\4\1\73\3\6\1\0\1\6"+
    "\3\0\4\6\1\74\4\6\1\75\7\6\1\76\21\6"+
    "\1\77\1\6\1\100\12\0\7\6\3\101\2\60\1\101"+
    "\1\102\1\0\1\102\1\0\1\103\1\104\1\31\2\0"+
    "\1\6\1\105\5\6\1\106\1\107\1\6\1\110\5\6"+
    "\4\0\1\111\5\6\1\112\5\6\1\113\3\6\1\114"+
    "\1\6\1\115\14\6\1\116\1\117\3\6\12\0\10\6"+
    "\1\31\1\0\1\120\4\6\1\121\2\6\1\122\1\6"+
    "\1\123\1\124\1\6\1\125\2\126\3\0\3\6\1\127"+
    "\4\6\1\130\1\131\1\132\1\133\1\134\1\135\6\6"+
    "\1\136\2\6\1\137\4\6\1\140\1\141\11\0\1\142"+
    "\10\6\1\31\1\0\1\6\1\143\3\6\1\144\2\6"+
    "\3\0\1\145\6\6\1\146\1\147\7\6\1\150\1\151"+
    "\1\152\4\0\10\6\1\31\1\2\1\153\4\6\1\154"+
    "\1\6\2\155\1\0\1\156\2\6\1\157\1\160\1\6"+
    "\1\161\5\6\1\162\2\0\3\6\1\163\4\6\1\31"+
    "\1\0\3\6\1\164\1\165\1\0\1\6\1\166\1\6"+
    "\1\167\6\6\1\170\3\6\1\171\2\6\1\31\1\0"+
    "\2\6\1\172\1\173\1\6\1\174\1\6\1\175\1\176"+
    "\2\6\1\177\2\6\1\200\2\6\1\31\1\0\1\201"+
    "\1\202\2\6\1\203\1\204\3\6\1\205\1\31\1\0"+
    "\5\6\1\0\1\206\1\207\1\210\2\6\1\0\1\211"+
    "\1\6\1\0\1\6\1\0\1\212\14\0\1\213\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[657];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852\0\u058c"+
    "\0\u058c\0\u0899\0\u08e0\0\u058c\0\u058c\0\u058c\0\u0927\0\u096e"+
    "\0\u09b5\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6"+
    "\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0dde"+
    "\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0fcf\0\u1016"+
    "\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u058c\0\u058c\0\u1179\0\u11c0"+
    "\0\u058c\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u058c"+
    "\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u058c"+
    "\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be\0\u16be\0\u058c\0\u1705"+
    "\0\u174c\0\u058c\0\u1793\0\u17da\0\u1821\0\u058c\0\u1868\0\u058c"+
    "\0\u18af\0\u058c\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59"+
    "\0\u058c\0\u1aa0\0\u1ae7\0\u0fcf\0\u058c\0\u1b2e\0\u04b7\0\u1b75"+
    "\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u058c\0\u1d1f\0\u1d66"+
    "\0\u1dad\0\u1df4\0\u1e3b\0\u1e82\0\u058c\0\u1ec9\0\u1f10\0\u1f57"+
    "\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u0f88\0\u2101\0\u08e0"+
    "\0\u2148\0\u058c\0\u218f\0\u21d6\0\u0a8a\0\u221d\0\u2264\0\u22ab"+
    "\0\u22f2\0\u080b\0\u2339\0\u2380\0\u23c7\0\u240e\0\u080b\0\u2455"+
    "\0\u249c\0\u24e3\0\u252a\0\u080b\0\u2571\0\u25b8\0\u25ff\0\u2646"+
    "\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u080b\0\u27f0\0\u2837"+
    "\0\u287e\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28\0\u2a6f"+
    "\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u058c\0\u2bd2\0\u2c19\0\u2c60"+
    "\0\u10eb\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51"+
    "\0\u2e98\0\u2edf\0\u1207\0\u2f26\0\u2f6d\0\u2fb4\0\u2edf\0\u058c"+
    "\0\u058c\0\u058c\0\u2f26\0\u2ffb\0\u1323\0\u3042\0\u3089\0\u2ffb"+
    "\0\u058c\0\u3042\0\u058c\0\u30d0\0\u1514\0\u3117\0\u315e\0\u31a5"+
    "\0\u31ec\0\u30d0\0\u3117\0\u15a2\0\u058c\0\u3233\0\u15e9\0\u058c"+
    "\0\u327a\0\u1630\0\u1677\0\u32c1\0\u3308\0\u334f\0\u1705\0\u058c"+
    "\0\u3396\0\u174c\0\u058c\0\u33dd\0\u058c\0\u3424\0\u346b\0\u058c"+
    "\0\u34b2\0\u058c\0\u058c\0\u34f9\0\u3540\0\u058c\0\u3587\0\u35ce"+
    "\0\u1821\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u3778\0\u37bf"+
    "\0\u1ec9\0\u1f10\0\u3806\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969"+
    "\0\u39b0\0\u39f7\0\u3a3e\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u080b"+
    "\0\u3ba1\0\u3be8\0\u3c2f\0\u3c76\0\u080b\0\u3cbd\0\u3d04\0\u3d4b"+
    "\0\u3d92\0\u3dd9\0\u3e20\0\u3e67\0\u080b\0\u3eae\0\u3ef5\0\u3f3c"+
    "\0\u3f83\0\u3fca\0\u4011\0\u4058\0\u409f\0\u40e6\0\u412d\0\u4174"+
    "\0\u41bb\0\u4202\0\u4249\0\u4290\0\u42d7\0\u431e\0\u080b\0\u4365"+
    "\0\u080b\0\u43ac\0\u43f3\0\u443a\0\u4481\0\u44c8\0\u450f\0\u4556"+
    "\0\u459d\0\u45e4\0\u462b\0\u4672\0\u46b9\0\u4700\0\u4747\0\u478e"+
    "\0\u47d5\0\u481c\0\u058c\0\u1179\0\u1295\0\u4863\0\u143f\0\u143f"+
    "\0\u058c\0\u48aa\0\u16be\0\u48f1\0\u058c\0\u058c\0\u4938\0\u497f"+
    "\0\u49c6\0\u4a0d\0\u080b\0\u4a54\0\u4a9b\0\u4ae2\0\u4b29\0\u4b70"+
    "\0\u080b\0\u4bb7\0\u4bfe\0\u080b\0\u4c45\0\u4c8c\0\u4cd3\0\u4d1a"+
    "\0\u4d61\0\u4da8\0\u4def\0\u4e36\0\u4e7d\0\u3a3e\0\u4ec4\0\u4f0b"+
    "\0\u4f52\0\u4f99\0\u4fe0\0\u080b\0\u5027\0\u506e\0\u50b5\0\u50fc"+
    "\0\u5143\0\u080b\0\u518a\0\u51d1\0\u5218\0\u080b\0\u525f\0\u080b"+
    "\0\u52a6\0\u52ed\0\u5334\0\u537b\0\u53c2\0\u5409\0\u5450\0\u5497"+
    "\0\u54de\0\u5525\0\u556c\0\u55b3\0\u080b\0\u080b\0\u55fa\0\u5641"+
    "\0\u5688\0\u56cf\0\u5716\0\u575d\0\u57a4\0\u57eb\0\u5832\0\u5879"+
    "\0\u58c0\0\u5907\0\u594e\0\u5995\0\u59dc\0\u5a23\0\u5a6a\0\u5ab1"+
    "\0\u5af8\0\u5b3f\0\u5b86\0\u5bcd\0\u5c14\0\u058c\0\u5c5b\0\u5ca2"+
    "\0\u5ce9\0\u5d30\0\u080b\0\u5d77\0\u5dbe\0\u080b\0\u5e05\0\u080b"+
    "\0\u080b\0\u5e4c\0\u080b\0\u5e93\0\u058c\0\u5eda\0\u5f21\0\u5f68"+
    "\0\u5faf\0\u5ff6\0\u603d\0\u080b\0\u6084\0\u60cb\0\u6112\0\u6159"+
    "\0\u080b\0\u080b\0\u080b\0\u080b\0\u080b\0\u080b\0\u61a0\0\u61e7"+
    "\0\u622e\0\u6275\0\u62bc\0\u6303\0\u080b\0\u634a\0\u6391\0\u080b"+
    "\0\u63d8\0\u641f\0\u6466\0\u64ad\0\u080b\0\u080b\0\u64f4\0\u653b"+
    "\0\u6582\0\u65c9\0\u6610\0\u6657\0\u669e\0\u66e5\0\u672c\0\u058c"+
    "\0\u6773\0\u67ba\0\u6801\0\u6848\0\u688f\0\u68d6\0\u691d\0\u6964"+
    "\0\u69ab\0\u69f2\0\u6a39\0\u6a80\0\u6ac7\0\u6b0e\0\u6b55\0\u080b"+
    "\0\u6b9c\0\u6be3\0\u6c2a\0\u6c71\0\u6cb8\0\u080b\0\u6cff\0\u6d46"+
    "\0\u6d8d\0\u6dd4\0\u6e1b\0\u6e62\0\u080b\0\u080b\0\u6ea9\0\u6ef0"+
    "\0\u6f37\0\u6f7e\0\u6fc5\0\u700c\0\u7053\0\u080b\0\u080b\0\u080b"+
    "\0\u709a\0\u70e1\0\u7128\0\u716f\0\u71b6\0\u71fd\0\u7244\0\u728b"+
    "\0\u72d2\0\u7319\0\u7360\0\u73a7\0\u73ee\0\u7435\0\u080b\0\u747c"+
    "\0\u74c3\0\u750a\0\u7551\0\u080b\0\u7598\0\u75df\0\u058c\0\u7626"+
    "\0\u766d\0\u76b4\0\u76fb\0\u080b\0\u080b\0\u7742\0\u7789\0\u77d0"+
    "\0\u7817\0\u785e\0\u78a5\0\u78ec\0\u080b\0\u7933\0\u797a\0\u79c1"+
    "\0\u7a08\0\u7a4f\0\u080b\0\u7a96\0\u7add\0\u7b24\0\u7b6b\0\u7bb2"+
    "\0\u7bf9\0\u7c40\0\u7c87\0\u7cce\0\u080b\0\u080b\0\u7d15\0\u7d5c"+
    "\0\u080b\0\u7da3\0\u080b\0\u7dea\0\u7e31\0\u7e78\0\u7ebf\0\u7f06"+
    "\0\u7f4d\0\u080b\0\u7f94\0\u7fdb\0\u8022\0\u080b\0\u8069\0\u80b0"+
    "\0\u80f7\0\u813e\0\u8185\0\u81cc\0\u080b\0\u8213\0\u825a\0\u080b"+
    "\0\u82a1\0\u080b\0\u080b\0\u82e8\0\u832f\0\u080b\0\u8376\0\u83bd"+
    "\0\u080b\0\u8404\0\u844b\0\u8492\0\u84d9\0\u080b\0\u080b\0\u8520"+
    "\0\u8567\0\u080b\0\u080b\0\u85ae\0\u85f5\0\u863c\0\u080b\0\u8213"+
    "\0\u8683\0\u86ca\0\u8711\0\u8758\0\u879f\0\u87e6\0\u882d\0\u080b"+
    "\0\u080b\0\u080b\0\u8874\0\u88bb\0\u8902\0\u080b\0\u8949\0\u8990"+
    "\0\u89d7\0\u8a1e\0\u080b\0\u8a65\0\u8aac\0\u8af3\0\u8b3a\0\u8b81"+
    "\0\u8bc8\0\u8c0f\0\u8c56\0\u8c9d\0\u8ce4\0\u8d2b\0\u8d72\0\u058c"+
    "\0\u8db9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[657];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\33\23\1\24\53\23\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\26\2\36\1\25\2\37"+
    "\1\40\1\41\1\37\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\54\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\40\1\67\1\62\2\70\1\66\2\71\2\72"+
    "\1\67\1\73\1\74\1\75\1\36\1\76\1\77\1\36"+
    "\1\100\2\36\1\101\1\102\1\103\1\36\1\104\1\36"+
    "\1\105\2\40\1\106\22\107\1\110\1\111\1\112\1\107"+
    "\1\113\60\107\22\114\1\115\1\114\1\116\1\111\1\117"+
    "\60\114\4\120\1\121\21\120\1\122\60\120\15\123\1\124"+
    "\3\123\1\124\1\125\1\123\1\126\1\123\1\127\60\123"+
    "\3\130\1\131\2\130\3\131\1\130\2\131\26\130\6\131"+
    "\1\130\16\131\2\130\4\131\1\130\1\131\1\130\3\131"+
    "\4\130\3\25\1\132\2\25\3\132\1\25\2\132\5\25"+
    "\1\0\20\25\6\132\1\25\16\132\2\25\4\132\1\25"+
    "\1\132\1\25\3\132\4\25\3\133\1\134\2\133\3\134"+
    "\2\133\1\134\1\133\1\135\3\133\1\136\20\133\6\134"+
    "\1\133\16\134\2\133\4\134\1\133\1\134\1\133\3\134"+
    "\4\133\3\137\1\140\2\137\3\140\1\137\2\140\26\137"+
    "\6\140\1\137\16\140\2\137\4\140\1\137\1\140\1\137"+
    "\3\140\4\137\3\25\1\141\2\25\3\141\1\25\2\141"+
    "\5\25\1\0\20\25\6\141\1\25\16\141\2\25\4\141"+
    "\1\25\1\141\1\25\3\141\4\25\3\142\1\143\1\144"+
    "\1\142\3\143\1\142\2\143\1\142\2\37\2\142\1\37"+
    "\20\142\6\143\1\142\16\143\2\142\4\143\1\142\1\143"+
    "\1\142\3\143\4\142\1\25\1\145\1\146\1\36\1\146"+
    "\1\147\3\36\1\145\2\36\1\25\2\150\2\146\1\150"+
    "\1\151\1\146\1\150\15\146\6\36\1\146\16\36\1\150"+
    "\1\146\4\36\1\146\1\36\1\146\3\36\1\146\1\40"+
    "\1\152\1\150\34\153\1\154\52\153\34\155\1\156\52\155"+
    "\15\157\1\160\3\157\1\161\11\157\1\162\2\157\1\163"+
    "\31\157\1\164\16\157\15\165\2\166\2\165\1\166\65\165"+
    "\107\167\33\23\1\170\106\23\1\0\2\23\1\171\10\23"+
    "\4\0\1\23\1\172\2\23\1\0\1\23\1\0\6\23"+
    "\1\173\6\23\1\0\7\23\110\0\1\26\1\174\1\175"+
    "\1\0\1\26\3\0\1\26\76\0\1\174\3\0\1\174"+
    "\3\0\1\174\15\0\1\176\60\0\1\36\1\0\1\36"+
    "\1\0\1\36\1\177\6\36\25\0\3\36\1\200\1\36"+
    "\1\201\1\0\4\36\1\201\5\36\1\202\3\36\2\0"+
    "\3\36\1\203\1\0\1\204\1\0\3\36\10\0\1\176"+
    "\22\0\1\176\1\205\57\0\1\26\1\174\1\175\1\0"+
    "\1\26\1\206\1\0\1\207\1\26\76\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\1\61\5\36\1\0\16\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\1\210\1\36\1\211"+
    "\3\36\1\0\5\36\2\212\5\36\1\213\1\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\6\0\1\43\7\0\1\214\6\0"+
    "\1\36\1\215\4\36\1\0\1\36\1\215\14\36\1\216"+
    "\1\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\6\36\1\0\16\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\21\0\2\37"+
    "\2\0\1\37\70\0\1\217\2\0\3\217\1\0\2\217"+
    "\26\0\6\217\1\0\16\217\2\0\4\217\1\0\1\217"+
    "\1\0\3\217\4\0\22\220\1\221\1\222\1\223\1\220"+
    "\1\224\60\220\27\0\1\225\1\176\105\0\1\176\1\225"+
    "\105\0\1\176\1\0\1\176\104\0\1\225\106\0\2\176"+
    "\2\0\1\226\1\0\1\227\100\0\1\176\106\0\1\176"+
    "\4\0\1\230\1\106\100\0\1\176\1\231\105\0\1\176"+
    "\7\0\1\176\76\0\1\176\10\0\1\176\47\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\1\36\1\232\4\36"+
    "\1\0\1\36\1\232\14\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\5\0\1\36\1\0\1\233\1\0\10\36"+
    "\25\0\6\36\1\0\16\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\5\0\1\36\1\0\1\36\1\0\3\36"+
    "\1\234\4\36\25\0\1\36\1\235\1\36\1\236\2\36"+
    "\1\0\1\36\1\235\2\237\12\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\240\1\0"+
    "\10\36\25\0\2\36\1\241\3\36\1\0\14\36\1\242"+
    "\1\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\243\1\0\10\36\25\0\1\244\5\36"+
    "\1\0\5\36\2\245\7\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\5\0\1\36\1\0\1\36\1\0\10\36"+
    "\25\0\1\246\1\36\1\247\3\36\1\0\12\36\1\250"+
    "\3\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\1\36\1\251"+
    "\4\36\1\0\1\36\1\251\13\36\1\252\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\253"+
    "\1\0\10\36\25\0\6\36\1\0\1\254\10\36\1\254"+
    "\4\36\2\0\1\36\1\255\2\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\2\36\1\256"+
    "\5\36\25\0\3\36\1\257\2\36\1\0\2\36\2\260"+
    "\12\36\2\0\3\36\1\261\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\36\1\0\10\36\25\0\1\36"+
    "\1\262\1\263\3\36\1\0\1\36\1\262\12\36\1\264"+
    "\1\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\5\36\2\265\7\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\1\266\5\36\1\0\12\36\1\267\3\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\3\36\1\270\2\36\1\0\2\36"+
    "\2\271\12\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\4\0\24\216\1\272\42\216\1\222\17\216\30\0\1\273"+
    "\57\0\1\36\1\0\1\36\1\0\10\36\25\0\6\36"+
    "\1\0\15\36\1\274\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\101\0\1\275\12\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\2\36\1\276\3\36\1\0\16\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\13\0\1\277\1\300"+
    "\5\0\1\301\23\0\1\302\1\303\1\304\1\0\1\305"+
    "\3\0\1\303\2\306\1\0\2\307\5\0\1\310\22\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\1\36\1\311"+
    "\1\36\4\0\22\107\1\312\1\0\1\313\1\107\1\314"+
    "\63\107\1\315\2\107\3\315\1\107\1\316\1\315\6\107"+
    "\1\317\1\320\1\313\1\107\1\321\13\107\6\315\1\107"+
    "\16\315\2\107\4\315\1\107\1\315\1\107\3\315\135\107"+
    "\1\322\1\320\1\313\1\107\1\323\60\107\22\114\1\324"+
    "\1\114\1\325\1\0\1\326\63\114\1\315\2\114\3\315"+
    "\1\114\1\327\1\315\6\114\1\330\1\114\1\325\1\331"+
    "\1\321\13\114\6\315\1\114\16\315\2\114\4\315\1\114"+
    "\1\315\1\114\3\315\135\114\1\322\1\114\1\325\1\331"+
    "\1\332\60\114\30\0\1\333\100\0\1\322\64\0\15\123"+
    "\1\124\3\123\1\124\1\334\1\123\1\335\1\123\1\336"+
    "\63\123\1\337\2\123\3\337\1\123\1\340\1\337\1\123"+
    "\1\124\3\123\1\124\1\334\1\123\1\335\1\123\1\336"+
    "\13\123\6\337\1\123\16\337\2\123\4\337\1\123\1\337"+
    "\1\123\3\337\7\123\1\315\2\123\3\315\1\123\1\341"+
    "\1\315\1\123\1\124\3\123\1\124\1\342\1\123\1\335"+
    "\1\123\1\321\13\123\6\315\1\123\16\315\2\123\4\315"+
    "\1\123\1\315\1\123\3\315\21\123\1\124\3\123\1\124"+
    "\102\123\1\124\3\123\1\124\1\322\1\123\1\335\1\123"+
    "\1\343\60\123\1\0\1\344\1\0\1\344\1\0\10\344"+
    "\1\345\2\0\1\346\1\345\20\0\6\344\1\0\16\344"+
    "\2\0\4\344\1\0\1\344\1\0\3\344\5\0\1\347"+
    "\1\0\1\347\1\0\10\347\1\350\2\0\1\351\1\350"+
    "\20\0\6\347\1\0\16\347\2\0\4\347\1\0\1\347"+
    "\1\0\3\347\4\0\15\352\1\136\3\352\1\136\66\352"+
    "\1\353\1\352\1\353\1\352\5\353\1\352\1\353\1\352"+
    "\1\0\2\352\1\354\1\0\20\352\6\353\1\352\16\353"+
    "\2\352\4\353\1\352\1\353\1\352\3\353\7\352\1\355"+
    "\2\352\3\355\1\352\1\356\1\355\1\352\1\136\3\352"+
    "\1\136\20\352\6\355\1\352\16\355\2\352\4\355\1\352"+
    "\1\355\1\352\3\355\4\352\1\0\1\357\1\0\1\357"+
    "\1\0\10\357\1\360\2\0\1\361\1\360\20\0\6\357"+
    "\1\0\16\357\2\0\4\357\1\0\1\357\1\0\3\357"+
    "\5\0\1\362\1\0\1\362\1\0\10\362\1\363\2\0"+
    "\1\364\1\363\20\0\6\362\1\0\16\362\2\0\4\362"+
    "\1\0\1\362\1\0\3\362\5\0\1\143\1\0\1\143"+
    "\1\0\10\143\25\0\6\143\1\0\16\143\2\0\4\143"+
    "\1\0\1\143\1\0\3\143\34\0\1\365\57\0\1\145"+
    "\3\0\1\145\3\0\1\145\76\0\1\145\3\0\1\145"+
    "\1\206\2\0\1\145\100\0\1\366\2\0\3\366\1\0"+
    "\2\366\26\0\6\366\1\0\16\366\2\0\4\366\1\0"+
    "\1\366\1\0\3\366\4\0\34\153\1\367\106\153\1\367"+
    "\1\370\51\153\34\155\1\371\106\155\1\371\1\372\51\155"+
    "\15\157\1\161\3\157\1\161\14\157\1\161\31\157\1\161"+
    "\16\157\21\0\1\373\65\0\15\157\1\161\3\157\1\161"+
    "\13\157\1\374\1\161\31\157\1\161\16\157\30\0\1\375"+
    "\73\0\2\166\2\0\1\166\65\0\33\23\1\0\2\23"+
    "\1\0\10\23\4\0\1\23\1\0\2\23\1\0\1\23"+
    "\1\0\6\23\1\0\6\23\1\0\7\23\27\0\1\376"+
    "\126\0\1\377\5\0\1\377\60\0\1\376\30\0\2\u0100"+
    "\26\0\1\174\1\0\1\175\1\0\1\174\3\0\1\174"+
    "\76\0\1\145\2\0\1\u0101\1\145\3\0\1\145\17\0"+
    "\1\u0101\56\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\6\36\1\0\1\u0102\4\36\2\u0103\2\36\1\u0102\4\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\4\36\1\u0104\1\36"+
    "\1\0\16\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\36\1\0\10\36\25\0\6\36"+
    "\1\0\15\36\1\u0105\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\6\36\1\0\2\36\2\u0106\12\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\6\36\1\0\7\36\2\u0107\5\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\2\36\1\u0108\3\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\u0109\1\0\1\u0109\1\0\1\u0109\1\0\3\u0109\32\0"+
    "\1\u0109\1\0\2\u0109\5\0\1\u0109\36\0\1\u010a\3\0"+
    "\1\u010a\76\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\1\36\1\u010b\4\36\1\0\1\36\1\u010b\14\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\6\36\1\0\12\36\1\u010c"+
    "\3\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\3\36\1\u010d"+
    "\2\36\1\0\16\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\3\36\1\u010e\2\36\1\0\16\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\37\0\1\u010f\54\0\1\36\1\0"+
    "\1\u0110\1\0\10\36\25\0\6\36\1\0\16\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\217\1\0"+
    "\1\217\1\0\10\217\25\0\6\217\1\0\16\217\2\0"+
    "\4\217\1\0\1\217\1\0\3\217\4\0\3\220\1\0"+
    "\2\220\3\0\2\220\1\0\6\220\1\221\1\222\1\223"+
    "\1\220\1\0\13\220\6\0\1\220\16\0\2\220\4\0"+
    "\1\220\1\0\1\220\3\0\135\220\1\0\1\222\1\223"+
    "\1\220\1\224\60\220\27\0\1\176\3\0\1\u0111\126\0"+
    "\2\u0112\66\0\1\u0113\67\0\2\231\2\0\1\231\66\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\1\u0114\10\36\1\u0114\4\36\2\0\4\36\1\0\1\36"+
    "\1\0\2\36\1\u0115\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\6\36\1\0\2\36\2\u0116\12\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\1\36\1\u0117\4\36\1\0"+
    "\1\36\1\u0117\14\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\4\36\1\232\1\36\1\0\16\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\6\36\1\0\16\36\2\0\1\36\1\u0118"+
    "\2\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\6\36\1\0\16\36\2\0"+
    "\3\36\1\u0119\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\6\36\1\0\12\36"+
    "\1\u011a\3\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\36\1\0\2\36\1\u011b\5\36"+
    "\25\0\5\36\1\u011c\1\0\4\36\1\u011c\11\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\u011d\1\0\10\36\25\0\6\36\1\0\16\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\3\36\1\u011e\2\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\1\u011f\1\36\2\u0120\5\36\1\u011f\4\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\1\u0121\1\36\1\u0122\3\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\2\36\1\u0123"+
    "\3\36\1\0\14\36\1\u0124\1\36\2\0\1\u0125\3\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\1\36\1\u0126\4\36\1\0\1\36"+
    "\1\u0126\14\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\36\1\0\10\36\25\0\6\36"+
    "\1\0\12\36\1\u0127\3\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\5\0\1\36\1\0\1\36\1\0\10\36"+
    "\25\0\2\36\1\u0128\3\36\1\0\16\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\6\36\1\0\5\36\2\u0129\7\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\5\36\1\u012a\1\0"+
    "\1\u012b\1\36\2\u012c\1\u012a\4\36\1\u012b\4\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\6\36\1\0\2\36\2\u012d"+
    "\12\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\7\36\2\u012e\5\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\1\u012f\5\36\1\0\5\36\2\u0130\7\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\1\36\1\u0131\4\36\1\0\1\36"+
    "\1\u0131\14\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\36\1\0\3\36\1\u0132\4\36"+
    "\25\0\6\36\1\0\16\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\5\0\1\36\1\0\1\36\1\0\10\36"+
    "\25\0\6\36\1\0\2\36\2\u0133\12\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\6\36\1\0\1\u0134\10\36\1\u0134"+
    "\4\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\1\u0135\5\36"+
    "\1\0\16\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\36\1\0\10\36\25\0\6\36"+
    "\1\0\2\36\2\u0136\12\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\5\0\1\36\1\0\1\u0137\1\0\10\36"+
    "\25\0\6\36\1\0\16\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\4\0\107\216\15\0\2\273\2\0\1\273"+
    "\66\0\1\36\1\0\1\36\1\0\10\36\25\0\6\36"+
    "\1\0\5\36\2\u0138\7\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\5\0\1\36\1\0\1\36\1\0\10\36"+
    "\25\0\1\36\1\u0139\4\36\1\0\1\36\1\u0139\14\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\67\0\1\u013a"+
    "\65\0\1\u013b\13\0\2\u013c\37\0\1\u013d\101\0\1\u013e"+
    "\146\0\1\u013f\6\0\1\u013f\76\0\1\u0140\115\0\1\u0141"+
    "\10\0\1\u0141\71\0\1\u0142\106\0\1\u0143\42\0\1\36"+
    "\1\0\1\36\1\0\2\36\1\u0144\5\36\25\0\3\36"+
    "\1\u0145\1\u0146\1\u0147\1\0\4\36\1\u0147\5\36\1\u0148"+
    "\2\36\1\u0149\2\0\3\36\1\u014a\1\0\1\36\1\0"+
    "\3\36\4\0\3\107\1\0\2\107\3\0\2\107\1\0"+
    "\6\107\1\317\1\320\1\313\1\107\1\0\13\107\6\0"+
    "\1\107\16\0\2\107\4\0\1\107\1\0\1\107\3\0"+
    "\26\107\1\0\1\320\1\313\1\107\1\323\60\107\1\0"+
    "\1\315\1\0\1\315\1\0\10\315\25\0\6\315\1\0"+
    "\16\315\2\0\4\315\1\0\1\315\1\0\3\315\1\0"+
    "\1\u014b\2\0\1\107\1\316\1\107\1\316\1\107\10\316"+
    "\5\107\1\312\1\0\1\313\1\107\1\314\13\107\6\316"+
    "\1\107\16\316\2\107\4\316\1\107\1\316\1\107\3\316"+
    "\1\107\1\u014c\2\107\3\114\1\0\2\114\3\0\2\114"+
    "\1\0\6\114\1\330\1\114\1\325\1\331\1\0\13\114"+
    "\6\0\1\114\16\0\2\114\4\0\1\114\1\0\1\114"+
    "\3\0\26\114\1\0\1\114\1\325\1\331\1\332\61\114"+
    "\1\327\1\114\1\327\1\114\10\327\5\114\1\324\1\114"+
    "\1\325\1\0\1\326\13\114\6\327\1\114\16\327\2\114"+
    "\4\327\1\114\1\327\1\114\3\327\1\114\1\u014d\2\114"+
    "\3\123\1\0\2\123\3\0\2\123\1\0\1\123\1\124"+
    "\3\123\1\124\1\342\1\123\1\335\1\123\1\0\13\123"+
    "\6\0\1\123\16\0\2\123\4\0\1\123\1\0\1\123"+
    "\3\0\21\123\1\124\3\123\1\124\1\0\1\123\1\335"+
    "\1\123\1\343\61\123\1\337\1\123\1\337\1\123\5\337"+
    "\1\340\1\337\1\340\1\0\2\123\1\u014e\1\0\1\334"+
    "\1\123\1\335\1\123\1\336\13\123\6\337\1\123\16\337"+
    "\2\123\4\337\1\123\1\337\1\123\3\337\5\123\1\340"+
    "\1\123\1\340\1\123\10\340\1\124\2\123\1\u014f\1\124"+
    "\1\334\1\123\1\335\1\123\1\336\13\123\6\340\1\123"+
    "\16\340\2\123\4\340\1\123\1\340\1\123\3\340\5\123"+
    "\1\341\1\123\1\341\1\123\10\341\1\124\3\123\1\124"+
    "\1\334\1\123\1\335\1\123\1\336\13\123\6\341\1\123"+
    "\16\341\2\123\4\341\1\123\1\341\1\123\3\341\1\123"+
    "\1\u0150\2\123\15\0\1\345\3\0\1\345\102\0\1\350"+
    "\3\0\1\350\65\0\15\352\1\0\3\352\1\0\66\352"+
    "\1\355\1\352\1\355\1\352\5\355\1\356\1\355\1\356"+
    "\1\u0151\2\352\1\u0152\1\u0151\20\352\6\355\1\352\16\355"+
    "\2\352\4\355\1\352\1\355\1\352\3\355\5\352\1\356"+
    "\1\352\1\356\1\352\10\356\1\u0153\2\352\1\u0154\1\u0153"+
    "\20\352\6\356\1\352\16\356\2\352\4\356\1\352\1\356"+
    "\1\352\3\356\4\352\15\0\1\360\3\0\1\360\102\0"+
    "\1\363\3\0\1\363\66\0\1\366\1\0\1\366\1\0"+
    "\10\366\25\0\6\366\1\0\16\366\2\0\4\366\1\0"+
    "\1\366\1\0\3\366\4\0\34\153\1\367\1\u0155\51\153"+
    "\34\155\1\371\1\u0156\51\155\15\157\1\161\3\157\1\161"+
    "\14\157\1\161\14\157\2\u0157\13\157\1\161\16\157\15\0"+
    "\2\375\2\0\1\375\130\0\1\u0158\6\0\1\u0158\122\0"+
    "\1\u0159\21\0\1\36\1\0\1\u015a\1\0\10\36\25\0"+
    "\6\36\1\0\16\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\6\36\1\0\1\u015b\10\36\1\u015b\4\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\2\36\1\u015c\5\36\25\0\4\36\1\u015d\1\36"+
    "\1\0\2\36\2\u015e\1\36\2\u015f\7\36\2\0\1\36"+
    "\1\u0160\2\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\1\u0161\5\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\u0162\1\0\10\36\25\0\6\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\1\u0163\10\36\1\u0163\4\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\5\0\1\36\1\0\1\36\1\0\10\36"+
    "\25\0\6\36\1\0\12\36\1\u0164\3\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\u0165"+
    "\1\0\10\36\25\0\6\36\1\0\16\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\6\36\1\0\2\36\2\u0166\12\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\2\36\1\u0167\3\36"+
    "\1\0\16\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\36\1\0\10\36\25\0\5\36"+
    "\1\u0168\1\0\4\36\1\u0168\11\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\37\0\1\u0111\54\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\2\36\1\u0169\3\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\3\36\7\0"+
    "\1\u016a\2\0\3\u016a\1\0\2\u016a\2\0\1\u0111\4\0"+
    "\1\u016b\16\0\6\u016a\1\0\16\u016a\1\u016c\1\0\4\u016a"+
    "\1\0\1\u016a\1\0\3\u016a\53\0\1\u016d\5\0\1\u016d"+
    "\46\0\2\u016e\2\0\1\u016e\66\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\6\36\1\0\14\36\1\u016f\1\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\6\36\1\0\14\36"+
    "\1\u0170\1\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\36\1\0\10\36\25\0\6\36"+
    "\1\0\1\u0171\10\36\1\u0171\4\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\2\36\1\u0172\3\36\1\0\16\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\u0173\1\0\10\36\25\0\6\36\1\0\16\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\6\36\1\0\12\36\1\u0174"+
    "\3\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\2\36\1\u0175"+
    "\3\36\1\0\16\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\6\36\1\0\12\36\1\u0176\3\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\6\36\1\0\1\u0177\1\36\2\u0178\5\36"+
    "\1\u0177\4\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\36\1\0\10\36\25\0\5\36"+
    "\1\u0179\1\0\4\36\1\u0179\11\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\u017a\1\0"+
    "\10\36\25\0\6\36\1\0\16\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\3\36\1\u017b\2\36\1\0\16\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\6\36\1\0\2\36\2\u017c"+
    "\12\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\5\36\2\u017d\7\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\u017e\1\0\10\36\25\0"+
    "\6\36\1\0\16\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\1\u017f\5\36\1\0\16\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\5\0\1\36\1\0\1\36\1\0\2\36"+
    "\1\u0180\5\36\25\0\6\36\1\0\16\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\6\36\1\0\1\u0181\10\36\1\u0181"+
    "\4\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\1\u0182\10\36\1\u0182\4\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\5\0\1\36\1\0\1\36\1\0\10\36"+
    "\25\0\6\36\1\0\12\36\1\u0183\3\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\u0184"+
    "\1\0\10\36\25\0\6\36\1\0\16\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\6\36\1\0\1\u0185\10\36\1\u0185"+
    "\4\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\u0186\1\0\10\36\25\0\6\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\12\36\1\u0187\3\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\6\36\1\0\1\u0188\10\36\1\u0188\4\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\3\36\1\u0189\2\36\1\0\16\36"+
    "\2\0\4\36\1\0\1\u018a\1\0\3\36\5\0\1\36"+
    "\1\0\1\u018b\1\0\10\36\25\0\6\36\1\0\16\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\6\36\1\0\12\36"+
    "\1\u018c\3\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\36\1\0\10\36\25\0\6\36"+
    "\1\0\1\u018d\10\36\1\u018d\4\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\1\u018e\5\36\1\0\16\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\3\36\1\u018f\4\36\25\0\6\36\1\0\16\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\u0190\1\0\10\36\25\0\6\36\1\0\16\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\6\36\1\0\12\36"+
    "\1\u0191\3\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\46\0\1\u0192\106\0\1\u0193\111\0\1\u0194\141\0\1\u0195"+
    "\52\0\1\u0196\105\0\1\u0197\6\0\1\u0197\121\0\1\u0198"+
    "\64\0\1\u0199\6\0\1\u0199\105\0\1\u019a\10\0\1\u019a"+
    "\77\0\2\u019b\33\0\1\36\1\0\1\36\1\0\10\36"+
    "\25\0\6\36\1\0\5\36\2\u019c\5\36\1\u019d\1\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\2\36\1\u019e\3\36"+
    "\1\0\16\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\36\1\0\10\36\25\0\6\36"+
    "\1\0\5\36\2\u019f\7\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\5\0\1\36\1\0\1\36\1\0\10\36"+
    "\25\0\6\36\1\0\12\36\1\u01a0\3\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\6\36\1\0\5\36\2\u01a1\7\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\2\36\1\u01a2\3\36"+
    "\1\0\16\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\u01a3\1\0\10\36\25\0\6\36"+
    "\1\0\16\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\4\0\15\123\1\0\3\123\1\0\1\334\1\123\1\335"+
    "\1\123\1\336\60\123\15\352\1\u0151\3\352\1\u0151\102\352"+
    "\1\u0153\3\352\1\u0153\65\352\15\157\1\161\3\157\1\161"+
    "\14\157\1\161\10\157\1\u01a4\5\157\1\u01a4\12\157\1\161"+
    "\16\157\56\0\2\u01a5\107\0\2\u01a6\26\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\3\36\1\u01a7\2\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\1\u01a8\5\36"+
    "\1\0\16\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\u01a9\1\0\10\36\25\0\6\36"+
    "\1\0\16\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\36\1\0\10\36\25\0\6\36"+
    "\1\0\16\36\2\0\1\36\1\u01aa\2\36\1\0\1\36"+
    "\1\0\3\36\5\0\1\36\1\0\1\36\1\0\2\36"+
    "\1\u01ab\5\36\25\0\6\36\1\0\16\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\6\36\1\0\15\36\1\u01ac\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\6\36\1\0\5\36\2\u01ad"+
    "\7\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\16\36\2\0\1\u01ae\3\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\36\1\0\10\36\25\0\2\36"+
    "\1\u01af\3\36\1\0\16\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\5\0\1\36\1\0\1\u01b0\1\0\10\36"+
    "\25\0\6\36\1\0\16\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\5\0\1\36\1\0\1\36\1\0\10\36"+
    "\25\0\6\36\1\0\12\36\1\u01b1\3\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\6\36\1\0\1\u01b2\10\36\1\u01b2"+
    "\4\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\16\36\2\0\2\36\1\u01b3\1\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\u016a\1\0\1\u016a\1\0\10\u016a\1\u01b4"+
    "\3\0\1\u01b5\20\0\6\u016a\1\0\16\u016a\2\0\4\u016a"+
    "\1\0\1\u016a\1\0\3\u016a\7\0\1\u01b6\2\0\3\u01b6"+
    "\1\0\2\u01b6\26\0\6\u01b6\1\0\16\u01b6\2\0\4\u01b6"+
    "\1\0\1\u01b6\1\0\3\u01b6\7\0\1\u01b7\2\0\3\u01b7"+
    "\1\0\2\u01b7\26\0\6\u01b7\1\0\16\u01b7\2\0\4\u01b7"+
    "\1\0\1\u01b7\1\0\3\u01b7\47\0\1\u01b8\6\0\1\u01b8"+
    "\35\0\1\36\1\0\1\36\1\0\10\36\25\0\1\36"+
    "\1\u01b9\4\36\1\0\1\36\1\u01b9\14\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\6\36\1\0\5\36\2\u01ba\7\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\1\36\1\u01bb\4\36"+
    "\1\0\1\36\1\u01bb\14\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\5\0\1\36\1\0\1\36\1\0\10\36"+
    "\25\0\6\36\1\0\16\36\2\0\1\u01bc\3\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\6\36\1\0\2\36\2\u01bd\12\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\6\36\1\0\14\36\1\u01be"+
    "\1\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\2\36\1\u01bf"+
    "\3\36\1\0\16\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\6\36\1\0\5\36\2\u01c0\7\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\6\36\1\0\1\u01c1\10\36\1\u01c1\4\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\6\36\1\0\15\36"+
    "\1\u01c2\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\u01c3\1\0\10\36\25\0\6\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\2\36\2\u01c4\12\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\6\36\1\0\1\u01c5\10\36\1\u01c5\4\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\6\36\1\0\16\36\2\0\1\36"+
    "\1\u01c6\2\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\6\36\1\0\5\36"+
    "\2\u01c7\7\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\36\1\0\10\36\25\0\5\36"+
    "\1\u01c8\1\0\4\36\1\u01c8\11\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\6\36\1\0\14\36\1\u01c9\1\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\1\36\1\u01ca\4\36\1\0"+
    "\1\36\1\u01ca\14\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\u01cb\1\0\10\36\25\0"+
    "\2\36\1\u01cc\3\36\1\0\16\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\6\36\1\0\1\u01cd\10\36\1\u01cd\4\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\u01ce\1\0\10\36\25\0\6\36\1\0\16\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\u01cf\1\0\10\36\25\0\6\36\1\0\16\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\6\36\1\0\1\u01d0"+
    "\10\36\1\u01d0\4\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\2\36\1\u01d1\3\36\1\0\16\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\3\36\1\u01d2\2\36\1\0\16\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\6\36\1\0\5\36\2\u01d3"+
    "\7\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\2\36\1\u01d4"+
    "\3\36\1\0\16\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\6\36\1\0\1\u01d5\10\36\1\u01d5\4\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\u01d6"+
    "\1\0\10\36\25\0\6\36\1\0\16\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\50\0\1\u01d7\125\0\1\u01d8"+
    "\67\0\1\u01d9\45\0\1\u01da\166\0\1\u01db\67\0\1\u01dc"+
    "\52\0\1\u01dd\154\0\2\u01de\32\0\1\u01df\12\0\1\u01db"+
    "\31\0\1\u01e0\41\0\1\u01d7\104\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\6\36\1\0\12\36\1\u01e1\3\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\3\36\1\u01e2\2\36"+
    "\1\0\16\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\36\1\0\10\36\25\0\6\36"+
    "\1\0\16\36\2\0\3\36\1\u01e3\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\1\36\1\u01e4\4\36\1\0\1\36\1\u01e4\14\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\2\36\1\u01e5\3\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\3\36\1\u01e6"+
    "\2\36\1\0\16\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\6\36\1\0\12\36\1\u01e7\3\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\6\36\1\0\1\u01e8\10\36\1\u01e8\4\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\4\0\15\157"+
    "\1\161\3\157\1\161\14\157\1\161\4\157\1\u01e9\6\157"+
    "\1\u01e9\15\157\1\161\16\157\60\0\2\u01ea\26\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\4\36\1\u01eb\1\36"+
    "\1\0\16\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\36\1\0\10\36\25\0\1\36"+
    "\1\u01ec\4\36\1\0\1\36\1\u01ec\14\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\5\36\1\u01ed\1\0\4\36\1\u01ed"+
    "\11\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\5\36\2\u01ee\7\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\6\36\1\0\5\36\2\u01ef\7\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\2\36\1\u01f0\5\36\25\0\6\36\1\0\16\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\5\36\1\u01f1\1\0\4\36"+
    "\1\u01f1\11\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\36\1\0\10\36\25\0\6\36"+
    "\1\0\5\36\2\u01f2\7\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\25\0\1\u01b5\66\0\1\u01b6\1\0\1\u01b6"+
    "\1\0\10\u01b6\6\0\1\u01f3\16\0\6\u01b6\1\0\16\u01b6"+
    "\2\0\4\u01b6\1\0\1\u01b6\1\0\3\u01b6\5\0\1\u01b7"+
    "\1\0\1\u01b7\1\0\10\u01b7\25\0\6\u01b7\1\0\16\u01b7"+
    "\1\u01f4\1\0\4\u01b7\1\0\1\u01b7\1\0\3\u01b7\62\0"+
    "\2\u01f5\30\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\3\36\1\u01f6\2\36\1\0\16\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\1\36\1\u01f7\4\36\1\0\1\36\1\u01f7"+
    "\14\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\2\36\1\u01f8"+
    "\3\36\1\0\16\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\6\36\1\0\7\36\2\u01f9\5\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\6\36\1\0\12\36\1\u01fa\3\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\1\36\1\u01fb\4\36\1\0"+
    "\1\36\1\u01fb\14\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\3\36\1\u01fc\2\36\1\0\16\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\5\36\1\u01fd\1\0\4\36\1\u01fd\11\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\6\36\1\0\15\36"+
    "\1\u01fe\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\4\36\1\u01ff"+
    "\1\36\1\0\16\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\2\36\1\u0200"+
    "\5\36\25\0\6\36\1\0\16\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\2\36\1\u0201\3\36\1\0\16\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\3\36\1\u0202\2\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\16\36\2\0\3\36\1\u0203\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\36\1\0\10\36\25\0\5\36"+
    "\1\u0204\1\0\4\36\1\u0204\11\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\6\36\1\0\1\u0205\10\36\1\u0205\4\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\6\36\1\0\1\u0206"+
    "\10\36\1\u0206\4\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\5\36\1\u0207\1\0\4\36\1\u0207\11\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\6\36\1\0\12\36\1\u0208\3\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\55\0\1\u01db"+
    "\10\0\1\u01db\27\0\1\u0209\12\0\1\u01db\31\0\1\u01e0"+
    "\101\0\1\u01dc\6\0\1\u01dc\103\0\1\u01d7\5\0\1\u01d7"+
    "\47\0\1\u01db\31\0\1\u01e0\127\0\1\u01db\100\0\1\u020a"+
    "\70\0\1\u020b\125\0\1\u020c\23\0\1\36\1\0\1\u020d"+
    "\1\0\10\36\25\0\6\36\1\0\16\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\5\36\1\u020e\1\0\4\36\1\u020e"+
    "\11\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\u020f\1\0\10\36\25\0\6\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\1\36\1\u0210"+
    "\1\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\6\36\1\0\2\36\2\u0211\12\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\u0212\1\0"+
    "\10\36\25\0\6\36\1\0\16\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\6\36\1\0\1\u0213\10\36\1\u0213\4\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\6\36\1\0\15\36"+
    "\1\u0214\2\0\4\36\1\0\1\36\1\0\3\36\4\0"+
    "\15\157\1\161\3\157\1\161\14\157\1\161\17\157\2\u0215"+
    "\10\157\1\161\16\157\51\0\1\u0216\10\0\1\u0216\25\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\2\36\2\u0217\12\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\u0218\1\0\10\36\25\0"+
    "\6\36\1\0\16\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\6\36\1\0\12\36\1\u0219\3\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\6\36\1\0\1\u021a\10\36\1\u021a\4\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\6\36\1\0\12\36"+
    "\1\u021b\3\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\36\1\0\10\36\25\0\6\36"+
    "\1\0\15\36\1\u021c\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\1\u021d\5\36\1\0\16\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\21\0\1\u01b4\3\0\1\u01b5\102\0\1\u021e"+
    "\3\0\1\u021f\145\0\2\u0220\26\0\1\36\1\0\1\u0221"+
    "\1\0\10\36\25\0\6\36\1\0\16\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\5\36\1\u0222\1\0\4\36\1\u0222"+
    "\11\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\2\36\1\u0223"+
    "\3\36\1\0\16\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\6\36\1\0\1\u0224\10\36\1\u0224\4\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\u0225"+
    "\1\0\10\36\25\0\6\36\1\0\16\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\6\36\1\0\14\36\1\u0226\1\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\u0227\1\0\10\36\25\0\6\36\1\0\16\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\2\36\1\u0228\3\36"+
    "\1\0\16\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\36\1\0\10\36\25\0\4\36"+
    "\1\u0229\1\36\1\0\16\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\5\0\1\36\1\0\1\36\1\0\10\36"+
    "\25\0\5\36\1\u022a\1\0\4\36\1\u022a\11\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\u022b\1\0\10\36\25\0\6\36\1\0\16\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\6\36\1\0\1\u022c\10\36"+
    "\1\u022c\4\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\u022d\1\0\10\36\25\0\6\36"+
    "\1\0\16\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\50\0\1\u022e\45\0\1\u01db\167\0\1\u01db\25\0\1\u022f"+
    "\104\0\1\36\1\0\1\36\1\0\10\36\25\0\6\36"+
    "\1\0\16\36\2\0\4\36\1\0\1\36\1\0\1\36"+
    "\1\u0230\1\36\5\0\1\36\1\0\1\36\1\0\10\36"+
    "\25\0\6\36\1\0\1\u0231\10\36\1\u0231\4\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\6\36\1\0\2\36\2\u0232"+
    "\12\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\1\36\1\u0233"+
    "\1\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\6\36\1\0\2\36\2\u0234\12\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\6\36\1\0\16\36\2\0\4\36\1\0"+
    "\1\36\1\0\1\36\1\u0235\1\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\6\36\1\0\16\36\2\0"+
    "\4\36\1\0\1\36\1\0\1\36\1\u0236\1\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\1\u0237\5\36"+
    "\1\0\16\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\4\0\15\157\1\161\3\157\1\161\14\157\1\161\21\157"+
    "\2\u0238\6\157\1\161\16\157\15\0\2\u0239\2\0\1\u0239"+
    "\66\0\1\36\1\0\1\36\1\0\10\36\25\0\2\36"+
    "\1\u023a\3\36\1\0\16\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\5\0\1\36\1\0\1\36\1\0\10\36"+
    "\25\0\2\36\1\u023b\3\36\1\0\16\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\5\36\1\u023c\1\0\4\36\1\u023c"+
    "\11\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\u023d\1\0\10\36\25\0\6\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\3\36\1\u023e"+
    "\2\36\1\0\16\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\25\0\1\u021f\136\0\1\u023f\10\0\1\u023f\25\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\1\36\1\u0240"+
    "\1\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\6\36\1\0\1\u0241\10\36\1\u0241\4\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\5\36\1\u0242\1\0\4\36\1\u0242"+
    "\11\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\u0243\1\0\10\36\25\0\6\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\1\36\1\u0244"+
    "\1\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\5\36\1\u0245\1\0\4\36\1\u0245\11\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\1\u0246\5\36\1\0\16\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\u0247\1\0\10\36\25\0\6\36\1\0\16\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\3\36\1\u0248\2\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\u0249\1\0\10\36\25\0\6\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\3\36\51\0"+
    "\1\u01db\104\0\1\u01db\6\0\1\u01db\35\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\6\36\1\0\16\36\2\0"+
    "\4\36\1\0\1\36\1\0\1\36\1\u024a\1\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\5\36\2\u024b\7\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\6\36\1\0\7\36\2\u024c\5\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\6\36\1\0\16\36\2\0\4\36\1\0"+
    "\1\36\1\0\1\36\1\u024d\1\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\6\36\1\0\16\36\2\0"+
    "\4\36\1\0\1\36\1\0\1\36\1\u024e\1\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\5\36\1\u024f"+
    "\1\0\4\36\1\u024f\11\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\5\0\1\36\1\0\1\36\1\0\10\36"+
    "\25\0\4\36\1\u0250\1\36\1\0\16\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\4\0\15\157\1\161\3\157"+
    "\1\161\14\157\1\161\12\157\1\u0251\10\157\1\u0251\5\157"+
    "\1\161\16\157\15\0\2\u0239\2\0\1\u0239\41\0\1\u0252"+
    "\24\0\1\36\1\0\1\36\1\0\10\36\25\0\5\36"+
    "\1\u0253\1\0\4\36\1\u0253\11\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\1\36\1\u0254\4\36\1\0\1\36\1\u0254"+
    "\14\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\15\36\1\u0255\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\34\0\1\u0256\57\0\1\36\1\0\1\36\1\0\10\36"+
    "\25\0\1\u0257\5\36\1\0\16\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\u0258\1\0"+
    "\10\36\25\0\6\36\1\0\16\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\10\36\25\0\1\u0259\5\36\1\0\16\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\u025a"+
    "\1\0\10\36\25\0\6\36\1\0\16\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\2\36\1\u025b\5\36\25\0\6\36\1\0\16\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\5\0\1\36"+
    "\1\0\1\36\1\0\10\36\25\0\1\u025c\5\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\1\u025d\10\36\1\u025d\4\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\5\0\1\36\1\0\1\36\1\0\10\36"+
    "\25\0\4\36\1\u025e\1\36\1\0\16\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\1\u025f\5\36\1\0\16\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\2\36\1\u0260\3\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\6\36\1\0"+
    "\16\36\2\0\4\36\1\0\1\36\1\0\1\36\1\u0261"+
    "\1\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\1\u0262\5\36\1\0\16\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\5\0\1\36\1\0\1\36\1\0\10\36"+
    "\25\0\6\36\1\0\16\36\2\0\4\36\1\0\1\36"+
    "\1\0\1\36\1\u0263\1\36\4\0\15\157\1\161\3\157"+
    "\1\161\6\157\1\u0264\5\157\1\161\31\157\1\161\16\157"+
    "\44\0\1\u0265\43\0\1\36\1\0\1\36\1\0\10\36"+
    "\25\0\6\36\1\0\15\36\1\u0266\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\u0267\1\0"+
    "\10\36\25\0\6\36\1\0\16\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\21\0\2\u0256\2\0\1\u0256\66\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\3\36\1\u0268"+
    "\2\36\1\0\16\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\3\36\1\u0269\2\36\1\0\16\36\2\0\4\36\1\0"+
    "\1\36\1\0\3\36\5\0\1\36\1\0\1\36\1\0"+
    "\2\36\1\u026a\5\36\25\0\6\36\1\0\16\36\2\0"+
    "\4\36\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\6\36\1\0\2\36\2\u026b"+
    "\12\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\3\36\1\u026c"+
    "\2\36\1\0\16\36\2\0\4\36\1\0\1\36\1\0"+
    "\3\36\5\0\1\36\1\0\1\36\1\0\10\36\25\0"+
    "\5\36\1\u026d\1\0\4\36\1\u026d\11\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\6\36\1\0\16\36\2\0\3\36"+
    "\1\u026e\1\0\1\36\1\0\3\36\5\0\1\36\1\0"+
    "\1\36\1\0\10\36\25\0\6\36\1\0\16\36\2\0"+
    "\4\36\1\0\1\36\1\0\1\36\1\u026f\1\36\4\0"+
    "\15\157\1\u0270\1\u0264\2\157\1\u0270\14\157\1\161\31\157"+
    "\1\161\16\157\45\0\1\u0271\42\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\5\36\1\u0272\1\0\4\36\1\u0272"+
    "\11\36\2\0\4\36\1\0\1\36\1\0\3\36\5\0"+
    "\1\36\1\0\1\36\1\0\10\36\25\0\5\36\1\u0273"+
    "\1\0\4\36\1\u0273\11\36\2\0\4\36\1\0\1\36"+
    "\1\0\3\36\5\0\1\36\1\0\1\36\1\0\10\36"+
    "\25\0\6\36\1\0\16\36\2\0\4\36\1\0\1\36"+
    "\1\0\1\36\1\u0274\1\36\5\0\1\36\1\0\1\u0275"+
    "\1\0\10\36\25\0\6\36\1\0\16\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\6\36\1\0\7\36\2\u0276\5\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\70\0\1\u0277"+
    "\23\0\1\36\1\0\1\u0278\1\0\10\36\25\0\6\36"+
    "\1\0\16\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\u0279\1\0\10\36\25\0\6\36"+
    "\1\0\16\36\2\0\4\36\1\0\1\36\1\0\3\36"+
    "\5\0\1\36\1\0\1\36\1\0\10\36\25\0\6\36"+
    "\1\0\16\36\2\0\4\36\1\0\1\36\1\0\1\36"+
    "\1\u027a\1\36\5\0\1\36\1\0\1\36\1\0\10\36"+
    "\25\0\6\36\1\0\16\36\2\0\4\36\1\0\1\36"+
    "\1\0\1\36\1\u027b\1\36\5\0\1\36\1\0\1\36"+
    "\1\0\10\36\25\0\6\36\1\0\5\36\2\u027c\7\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\71\0\1\u027d"+
    "\22\0\1\36\1\0\1\36\1\0\10\36\25\0\6\36"+
    "\1\0\16\36\2\0\4\36\1\0\1\36\1\0\1\36"+
    "\1\u027e\1\36\5\0\1\36\1\0\1\36\1\0\10\36"+
    "\25\0\6\36\1\0\12\36\1\u027f\3\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\50\0\1\u0280\43\0\1\36"+
    "\1\0\1\u0281\1\0\10\36\25\0\6\36\1\0\16\36"+
    "\2\0\4\36\1\0\1\36\1\0\3\36\70\0\1\u0282"+
    "\23\0\1\36\1\0\1\36\1\0\10\36\25\0\1\36"+
    "\1\u0283\4\36\1\0\1\36\1\u0283\14\36\2\0\4\36"+
    "\1\0\1\36\1\0\3\36\7\0\1\u0284\120\0\2\u0284"+
    "\2\0\1\u0284\5\0\1\u0285\74\0\2\u0285\2\0\1\u0285"+
    "\1\0\1\u0286\34\0\2\u0287\5\0\1\u0288\77\0\2\u0289"+
    "\113\0\1\u028a\100\0\2\u028b\113\0\1\u028c\100\0\2\u028d"+
    "\113\0\1\u028e\100\0\2\u028f\42\0\2\u028d\2\0\1\u028d"+
    "\6\0\1\u0290\136\0\2\u0291\50\0\1\u028d\152\0\1\u028d"+
    "\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[36352];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\14\0\2\1\1\11\12\1\2\11\2\1"+
    "\3\11\36\1\2\11\2\1\1\11\6\1\1\11\7\1"+
    "\1\11\5\1\1\0\1\11\2\1\1\11\3\1\1\11"+
    "\1\1\1\11\1\1\1\11\4\0\2\1\1\11\3\1"+
    "\1\11\2\1\1\0\1\1\1\0\2\1\1\0\1\11"+
    "\6\1\1\11\2\0\4\1\1\0\1\1\1\0\1\1"+
    "\2\0\1\11\2\0\2\1\1\0\42\1\1\0\2\1"+
    "\1\11\1\1\12\0\1\1\3\0\3\1\3\11\1\1"+
    "\3\0\2\1\1\11\1\1\1\11\3\0\5\1\1\0"+
    "\1\11\2\0\1\11\7\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\1\1\0\1\11\1\0\2\11\2\1\1\11"+
    "\3\0\15\1\1\0\1\1\3\0\46\1\12\0\7\1"+
    "\1\11\5\1\1\11\1\0\1\1\1\0\2\11\1\1"+
    "\2\0\20\1\4\0\44\1\12\0\11\1\1\0\1\11"+
    "\16\1\1\11\3\0\36\1\11\0\1\11\11\1\1\0"+
    "\10\1\3\0\23\1\4\0\22\1\1\11\1\0\15\1"+
    "\2\0\11\1\1\0\5\1\1\0\22\1\1\0\22\1"+
    "\1\0\13\1\1\0\5\1\1\0\5\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\14\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[657];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    protected String heredoc = null;
    protected int heredoc_len = 0;
    private boolean asp_tags = false;
    private StateStack stack = new StateStack();

    private boolean short_tags_allowed;

    private LexerInput input;
    private boolean haltedCompiler = false;

    /*public PhpLexer5(int state){
        initialize(state);
    }*/
    /*public void reset(char array[], int offset, int length) {
        this.zzBuffer = array;
        this.zzCurrentPos = offset;
        this.zzMarkedPos = offset;
        this.zzPushbackPos = offset;
        this.yychar = offset;
        this.zzEndRead = offset + length;
        this.zzStartRead = offset;
        this.zzAtEOF = zzCurrentPos >= zzEndRead;
        this.firstPos = offset;
    }



    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
    	this.zzReader = reader;
    	this.zzBuffer = buffer;
    	this.zzMarkedPos = parameters[0];
    	this.zzPushbackPos = parameters[1];
    	this.zzCurrentPos = parameters[2];
    	this.zzStartRead = parameters[3];
    	this.zzEndRead = parameters[4];
    	this.yyline = parameters[5];
    	initialize(parameters[6]);
    }
    */
        public PHP5ColoringLexer(LexerRestartInfo info, boolean short_tags_allowed, boolean asp_tags_allowed, boolean inPHP) {
            this.input = info.input();
            this.asp_tags = asp_tags_allowed;
            this.short_tags_allowed = short_tags_allowed;

            if(info.state() != null) {
                //reset state
                setState((LexerState)info.state());
            } else {
                //initial state
                stack.pushStack(YYINITIAL);
                if (inPHP) {
                    stack.pushStack(ST_PHP_IN_SCRIPTING);
                    zzState = zzLexicalState = ST_PHP_IN_SCRIPTING;
                }
                else {
                    zzState = zzLexicalState = YYINITIAL;
                }
            }

        }

        public static final class LexerState  {
            final StateStack stack;
            /** the current state of the DFA */
            final int zzState;
            /** the current lexical state */
            final int zzLexicalState;
            /** remember the heredoc */
            final String heredoc;
            /** and the lenght of */
            final int heredoc_len;

            final boolean shortTag;
            final boolean aspTag;

            LexerState (StateStack stack, int zzState, int zzLexicalState, String heredoc, int heredoc_len, boolean shortTag, boolean aspTag) {
                this.stack = stack;
                this.zzState = zzState;
                this.zzLexicalState = zzLexicalState;
                this.heredoc = heredoc;
                this.heredoc_len = heredoc_len;
                this.shortTag = shortTag;
                this.aspTag = aspTag;
            }

            @Override
            public boolean equals(Object obj) {
                if (this == obj) {
			return true;
		}

		if (obj == null || obj.getClass() != this.getClass()) {
			return false;
		}

                LexerState state = (LexerState) obj;
                return (this.stack.equals(state.stack)
                    && (this.zzState == state.zzState)
                    && (this.zzLexicalState == state.zzLexicalState)
                    && (this.heredoc_len == state.heredoc_len)
                    && (this.shortTag == state.shortTag)
                    && (this.aspTag == state.aspTag)
                    && ((this.heredoc == null && state.heredoc == null) || (this.heredoc != null && state.heredoc != null && this.heredoc.equals(state.heredoc))));
            }

            @Override
            public int hashCode() {
                int hash = 11;
                hash = 31 * hash + this.zzState;
                hash = 31 * hash + this.zzLexicalState;
                if (stack != null) {
                    hash = 31 * hash + this.stack.hashCode();
                }
                hash = 31 * hash + this.heredoc_len;
                if (heredoc != null) {
                    hash = 31 * hash + this.heredoc.hashCode();
                }
                return hash;
            }
        }

        public LexerState getState() {
            return new LexerState(stack.createClone(), zzState, zzLexicalState, heredoc, heredoc_len, short_tags_allowed, asp_tags);
        }

        public void setState(LexerState state) {
            this.stack.copyFrom(state.stack);
            this.zzState = state.zzState;
            this.zzLexicalState = state.zzLexicalState;
            this.heredoc = state.heredoc;
            this.heredoc_len = state.heredoc_len;
        }

     protected boolean isHeredocState(int state){
    	    	return state == ST_PHP_HEREDOC || state == ST_PHP_START_HEREDOC || state == ST_PHP_END_HEREDOC || state == ST_PHP_NOWDOC;
    }

    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }

    protected int getZZStartRead() {
    	return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
    	return this.zzPushbackPos;
    }

        protected void pushBack(int i) {
		yypushback(i);
	}

        protected void popState() {
		yybegin(stack.popStack());
	}

	protected void pushState(final int state) {
		stack.pushStack(getZZLexicalState());
		yybegin(state);
	}


 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PHP5ColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PHP5ColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1360) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PHPTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2:
          { return PHPTokenId.T_INLINE_HTML;
          }
        case 140: break;
        case 55:
          { popState();
    return PHPTokenId.PHPDOC_COMMENT_END;
          }
        case 141: break;
        case 58:
          { String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?' && short_tags_allowed)) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.T_OPEN_TAG_WITH_ECHO;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 142: break;
        case 137:
          { return PHPTokenId.PHP__NAMESPACE__;
          }
        case 143: break;
        case 9:
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 144: break;
        case 50:
          { heredoc=null;
    heredoc_len=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 1;
    // mark just the label
    if (yytext().charAt(yylength() - 2)==';') {
	    back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_HEREDOC_TAG;
          }
        case 145: break;
        case 97:
          { return PHPTokenId.PHP_WHILE;
          }
        case 146: break;
        case 49:
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_HEREDOC_TAG;
    } else {
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 147: break;
        case 26:
          { return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 148: break;
        case 88:
          { return PHPTokenId.PHP_CONST;
          }
        case 149: break;
        case 110:
          { return PHPTokenId.PHP_REQUIRE;
          }
        case 150: break;
        case 5:
          { return PHPTokenId.PHP_TOKEN;
          }
        case 151: break;
        case 67:
          { yypushback(2);
    return PHPTokenId.PHP_COMMENT;
          }
        case 152: break;
        case 74:
          { return PHPTokenId.PHP_NULL;
          }
        case 153: break;
        case 30:
          { if (asp_tags) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 154: break;
        case 101:
          { return PHPTokenId.PHP_RETURN;
          }
        case 155: break;
        case 7:
          { return PHPTokenId.WHITESPACE;
          }
        case 156: break;
        case 98:
          { return PHPTokenId.PHP_CASTING;
          }
        case 157: break;
        case 130:
          { return PHPTokenId.PHP_ENDDECLARE;
          }
        case 158: break;
        case 127:
          { return PHPTokenId.PHP_PROTECTED;
          }
        case 159: break;
        case 92:
          { return PHPTokenId.PHP_TRAIT;
          }
        case 160: break;
        case 72:
          { return PHPTokenId.PHP_EVAL;
          }
        case 161: break;
        case 87:
          { return PHPTokenId.PHP_ARRAY;
          }
        case 162: break;
        case 38:
          { return PHPTokenId.PHP_DO;
          }
        case 163: break;
        case 114:
          { return PHPTokenId.PHP_PRIVATE;
          }
        case 164: break;
        case 24:
          { popState();
	return PHPTokenId.PHP_TOKEN;
          }
        case 165: break;
        case 36:
          { if (asp_tags) {
            yybegin(YYINITIAL);
            stack.clear();
	    return PHPTokenId.PHP_CLOSETAG;
	}
	return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 166: break;
        case 119:
          { return PHPTokenId.PHP_CONTINUE;
          }
        case 167: break;
        case 19:
          { yypushback(1);
	yybegin(ST_PHP_NOWDOC);
          }
        case 168: break;
        case 105:
          { return PHPTokenId.PHP_PUBLIC;
          }
        case 169: break;
        case 6:
          { return  PHPTokenId.PHP_STRING;
          }
        case 170: break;
        case 134:
          { return PHPTokenId.PHP_REQUIRE_ONCE;
          }
        case 171: break;
        case 3:
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 172: break;
        case 51:
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
        label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_NOWDOC_TAG;
    } else {
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 173: break;
        case 90:
          { return PHPTokenId.PHP_CLONE;
          }
        case 174: break;
        case 85:
          { return PHPTokenId.PHP_BREAK;
          }
        case 175: break;
        case 60:
          { return PHPTokenId.PHP_NEW;
          }
        case 176: break;
        case 121:
          { return PHPTokenId.PHP__LINE__;
          }
        case 177: break;
        case 109:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
        int startString=3+bprefix;
        /* 3 is <<<, 2 is quotes, 1 is newline */
        heredoc_len = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
        while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
            startString++;
            heredoc_len--;
        }
        // first quate
        startString++;
        heredoc = yytext().substring(startString, heredoc_len+startString);
        yybegin(ST_PHP_START_NOWDOC);
        return PHPTokenId.PHP_NOWDOC_TAG;
          }
        case 178: break;
        case 52:
          { heredoc=null; heredoc_len=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 1;
    // mark just the label
    if (yytext().charAt(yylength() - 2)==';') {
	    back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_NOWDOC_TAG;
          }
        case 179: break;
        case 103:
          { return PHPTokenId.PHP_SWITCH;
          }
        case 180: break;
        case 43:
          { yypushback(1);
    return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 181: break;
        case 35:
          { pushState(ST_PHP_COMMENT);
    return PHPTokenId.PHP_COMMENT_START;
          }
        case 182: break;
        case 117:
          { return PHPTokenId.PHP_FUNCTION;
          }
        case 183: break;
        case 23:
          { yypushback(1);
	popState();
        if (yylength() > 0)
            return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 184: break;
        case 136:
          { return PHPTokenId.PHP__FUNCTION__;
          }
        case 185: break;
        case 116:
          { return PHPTokenId.PHP_ENDWHILE;
          }
        case 186: break;
        case 89:
          { return PHPTokenId.PHP_CATCH;
          }
        case 187: break;
        case 32:
          { return PHPTokenId.PHP_OPERATOR;
          }
        case 188: break;
        case 16:
          { popState();
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 189: break;
        case 27:
          { return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 190: break;
        case 80:
          { pushState(ST_PHP_IN_SCRIPTING);
    //yybegin(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_OPENTAG;
    //return createSymbol(ASTSymbol.T_OPEN_TAG);
          }
        case 191: break;
        case 33:
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 192: break;
        case 64:
          { return PHPTokenId.PHP_VAR;
          }
        case 193: break;
        case 14:
          { pushState(ST_PHP_LINE_COMMENT);
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 194: break;
        case 131:
          { return PHPTokenId.PHP_INSTANCEOF;
          }
        case 195: break;
        case 118:
          { return PHPTokenId.PHP_ABSTRACT;
          }
        case 196: break;
        case 73:
          { pushState(ST_PHP_DOC_COMMENT);
    yypushback(yylength()-3);
    return PHPTokenId.PHPDOC_COMMENT_START;
          }
        case 197: break;
        case 125:
          { return PHPTokenId.PHP_INTERFACE;
          }
        case 198: break;
        case 107:
          { return PHPTokenId.PHP_EXTENDS;
          }
        case 199: break;
        case 135:
          { return PHPTokenId.PHP_INCLUDE_ONCE;
          }
        case 200: break;
        case 138:
          { pushState(ST_HALTED_COMPILER);
	return PHPTokenId.PHP_HALT_COMPILER;
          }
        case 201: break;
        case 132:
          { return PHPTokenId.PHP_IMPLEMENTS;
          }
        case 202: break;
        case 91:
          { return PHPTokenId.PHP_CLASS;
          }
        case 203: break;
        case 68:
          { yypushback(2); // go back to mark end of comment in the next token
        return PHPTokenId.PHPDOC_COMMENT;
          }
        case 204: break;
        case 71:
          { return PHPTokenId.PHP_ELSE;
          }
        case 205: break;
        case 29:
          { popState();
    return PHPTokenId.T_INLINE_HTML;
          }
        case 206: break;
        case 39:
          { return PHPTokenId.PHP_IF;
          }
        case 207: break;
        case 122:
          { return PHPTokenId.PHP_ENDSWITCH;
          }
        case 208: break;
        case 86:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    heredoc_len = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        heredoc_len--;
    }
    // HEREDOC PHP 5.3
    if (yytext().charAt(startString) == '"') {
        heredoc_len -= 2;
        startString ++;
    }
    heredoc = yytext().substring(startString,heredoc_len+startString);
    yybegin(ST_PHP_START_HEREDOC);
    return PHPTokenId.PHP_HEREDOC_TAG;
          }
        case 209: break;
        case 115:
          { return PHPTokenId.PHP__DIR__;
          }
        case 210: break;
        case 79:
          { return PHPTokenId.PHP_GOTO;
          }
        case 211: break;
        case 22:
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens
	return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 212: break;
        case 106:
          { return PHPTokenId.PHP_GLOBAL;
          }
        case 213: break;
        case 17:
          { yypushback(1);
        popState();
          }
        case 214: break;
        case 84:
          { return PHPTokenId.PHP_FINAL;
          }
        case 215: break;
        case 66:
          { int label_len = yylength() - 1;
    int back = 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
           back++;
    }
    if (label_len > heredoc_len && yytext().substring(label_len - heredoc_len,label_len).equals(heredoc)) {
        back = back + heredoc_len;
        yypushback(back);
        yybegin(ST_PHP_END_NOWDOC);
    }
    else {
        yypushback(1);
    }
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 216: break;
        case 59:
          { return PHPTokenId.PHP_FOR;
          }
        case 217: break;
        case 75:
          { return PHPTokenId.PHP_CASE;
          }
        case 218: break;
        case 83:
          { return PHPTokenId.PHP_FALSE;
          }
        case 219: break;
        case 10:
          { return PHPTokenId.PHP_NS_SEPARATOR;
          }
        case 220: break;
        case 21:
          { popState();
    return PHPTokenId.PHP_STRING;
          }
        case 221: break;
        case 113:
          { return PHPTokenId.PHP_INCLUDE;
          }
        case 222: break;
        case 95:
          { return PHPTokenId.PHP_PRINT;
          }
        case 223: break;
        case 53:
          { return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 224: break;
        case 45:
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 225: break;
        case 133:
          { return PHPTokenId.PHP__METHOD__;
          }
        case 226: break;
        case 12:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 227: break;
        case 48:
          { int label_len = yylength() - 1;
    int back = 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
           back++;
    }
    if (label_len > heredoc_len && yytext().substring(label_len - heredoc_len,label_len).equals(heredoc)) {
           back = back + heredoc_len;
    	   yypushback(back);
        yybegin(ST_PHP_END_HEREDOC);
    }
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 228: break;
        case 37:
          { return PHPTokenId.PHP_AS;
          }
        case 229: break;
        case 42:
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 230: break;
        case 78:
          { return PHPTokenId.PHP_LIST;
          }
        case 231: break;
        case 34:
          { return PHPTokenId.PHP_VARIABLE;
          }
        case 232: break;
        case 40:
          { //popState();
        yybegin(YYINITIAL);
        if (yylength() > 2) {
            yypushback(yylength()-2);
        }
        stack.clear();
	return PHPTokenId.PHP_CLOSETAG;
          }
        case 233: break;
        case 96:
          { return PHPTokenId.PHP_UNSET;
          }
        case 234: break;
        case 1:
          { return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 235: break;
        case 126:
          { return PHPTokenId.PHP_INSTEADOF;
          }
        case 236: break;
        case 69:
          { return PHPTokenId.PHP_EXIT;
          }
        case 237: break;
        case 108:
          { return PHPTokenId.PHP_FOREACH;
          }
        case 238: break;
        case 62:
          { return PHPTokenId.PHP_TRY;
          }
        case 239: break;
        case 15:
          { return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 240: break;
        case 54:
          { popState();
    return PHPTokenId.PHP_COMMENT_END;
          }
        case 241: break;
        case 25:
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
			yypushback(1);
			break;
		default:
			popState();
	}
	 return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 242: break;
        case 77:
          { return PHPTokenId.PHP_SELF;
          }
        case 243: break;
        case 111:
          { return PHPTokenId.PHP_DEFAULT;
          }
        case 244: break;
        case 76:
          { return PHPTokenId.PHP_TRUE;
          }
        case 245: break;
        case 57:
          { if (asp_tags) {
            yybegin(YYINITIAL);
            stack.clear();
	    return PHPTokenId.PHP_CLOSETAG;
	}
	String text = yytext();
	if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
		popState();
	}
	return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 246: break;
        case 56:
          { popState();
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 247: break;
        case 18:
          { yypushback(1);
	yybegin(ST_PHP_HEREDOC);
          }
        case 248: break;
        case 120:
          { return PHPTokenId.PHP__FILE__;
          }
        case 249: break;
        case 61:
          { return PHPTokenId.PHP_DIE;
          }
        case 250: break;
        case 41:
          { return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 251: break;
        case 47:
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 252: break;
        case 93:
          { return PHPTokenId.PHP_THROW;
          }
        case 253: break;
        case 94:
          { return PHPTokenId.PHP_ISSET;
          }
        case 254: break;
        case 44:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_TOKEN;
          }
        case 255: break;
        case 123:
          { popState();
	return PHPTokenId.T_INLINE_HTML;
          }
        case 256: break;
        case 100:
          { return PHPTokenId.PHP_ELSEIF;
          }
        case 257: break;
        case 13:
          { //  if (!stack.isEmpty()) {

            //we are pushing state when we enter the PHP code,
            //so we need to ensure we do not pop the top most state
            if(stack.size() > 1) {
                popState();
    }
    return  PHPTokenId.PHP_CURLY_CLOSE;
          }
        case 258: break;
        case 20:
          { yypushback(1);
    popState();
          }
        case 259: break;
        case 99:
          { return PHPTokenId.PHP_ENDFOR;
          }
        case 260: break;
        case 11:
          { pushState(ST_PHP_BACKQUOTE);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 261: break;
        case 31:
          { if (short_tags_allowed ) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 262: break;
        case 8:
          { return PHPTokenId.PHP_SEMICOLON;
          }
        case 263: break;
        case 81:
          { return PHPTokenId.PHP_ENDIF;
          }
        case 264: break;
        case 112:
          { return PHPTokenId.PHP_DECLARE;
          }
        case 265: break;
        case 129:
          { return PHPTokenId.PHP_ENDFOREACH;
          }
        case 266: break;
        case 128:
          { return PHPTokenId.PHP__CLASS__;
          }
        case 267: break;
        case 28:
          { popState();return PHPTokenId.WHITESPACE;
          }
        case 268: break;
        case 63:
          { return PHPTokenId.PHP_USE;
          }
        case 269: break;
        case 46:
          { yypushback(1);
	return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 270: break;
        case 65:
          { yypushback(1);
	pushState(ST_PHP_VAR_OFFSET);
	return PHPTokenId.PHP_VARIABLE;
          }
        case 271: break;
        case 139:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.T_INLINE_HTML;
          }
        case 272: break;
        case 102:
          { return PHPTokenId.PHP_STATIC;
          }
        case 273: break;
        case 70:
          { return PHPTokenId.PHP_ECHO;
          }
        case 274: break;
        case 4:
          { return PHPTokenId.PHP_NUMBER;
          }
        case 275: break;
        case 104:
          { return PHPTokenId.PHP_PARENT;
          }
        case 276: break;
        case 124:
          { return PHPTokenId.PHP_NAMESPACE;
          }
        case 277: break;
        case 82:
          { return PHPTokenId.PHP_EMPTY;
          }
        case 278: break;
        default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
            switch (zzLexicalState) {
            case ST_PHP_COMMENT: {
              if (input.readLength() > 0) {
                input.backup(1);  // backup eof
                return PHPTokenId.PHP_COMMENT;
              }
              else {
                  return null;
              }
            }
            case 658: break;
            case ST_PHP_DOC_COMMENT: {
              if (input.readLength() > 0) {
                    input.backup(1);  // backup eof
                    return PHPTokenId.PHPDOC_COMMENT;
                }
                else {
                    return null;
                }
            }
            case 659: break;
            default:
              {        if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return PHPTokenId.UNKNOWN_TOKEN;
        } else {
            return null;
        }
 }
            }

          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
