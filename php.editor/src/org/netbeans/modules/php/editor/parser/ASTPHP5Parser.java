/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2016 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2016 Sun Microsystems, Inc.
 */

//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 24 11:23:21 JST 2016
//----------------------------------------------------

package org.netbeans.modules.php.editor.parser;

import java.util.*;
import org.netbeans.modules.php.editor.parser.astnodes.*;
import org.openide.util.Pair;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 24 11:23:21 JST 2016
  */
@org.netbeans.api.annotations.common.SuppressWarnings({"EI_EXPOSE_REP", "MS_PKGPROTECT", "BC_BAD_CAST_TO_CONCRETE_COLLECTION"})
public class ASTPHP5Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ASTPHP5Parser() {super();}

  /** Constructor which sets the default scanner. */
  public ASTPHP5Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ASTPHP5Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] =
    unpackFromStrings(new String[] {
    "\000\u0237\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\005\000\002\010\004" +
    "\000\002\010\002\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\005\000\002" +
    "\011\007\000\002\011\006\000\002\011\005\000\002\011" +
    "\006\000\002\011\006\000\002\011\004\000\002\007\005" +
    "\000\002\007\003\000\002\006\003\000\002\006\005\000" +
    "\002\006\007\000\002\006\004\000\002\006\006\000\002" +
    "\006\010\000\002\004\005\000\002\004\003\000\002\005" +
    "\003\000\002\005\005\000\002\005\004\000\002\005\006" +
    "\000\002\005\004\000\002\005\006\000\002\013\004\000" +
    "\002\013\002\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\012\003\000\002\012\004\000\002\015" +
    "\005\000\002\015\011\000\002\015\014\000\002\015\007" +
    "\000\002\015\011\000\002\015\013\000\002\015\007\000" +
    "\002\015\004\000\002\015\005\000\002\015\004\000\002" +
    "\015\005\000\002\015\004\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\004\000\002\015\004" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\003\000\002\015\004\000\002\015\005\000\002" +
    "\015\007\000\002\015\012\000\002\015\012\000\002\015" +
    "\007\000\002\015\003\000\002\015\012\000\002\015\020" +
    "\000\002\015\005\000\002\015\005\000\002\015\003\000" +
    "\002\015\003\000\002\165\003\000\002\165\002\000\002" +
    "\166\003\000\002\166\004\000\002\167\012\000\002\170" +
    "\002\000\002\170\006\000\002\016\003\000\002\016\005" +
    "\000\002\017\003\000\002\020\003\000\002\020\005\000" +
    "\002\162\003\000\002\163\003\000\002\053\002\000\002" +
    "\053\003\000\002\054\002\000\002\054\003\000\002\171" +
    "\014\000\002\172\011\000\002\172\010\000\002\172\007" +
    "\000\002\137\004\000\002\137\002\000\002\140\004\000" +
    "\002\140\013\000\002\140\003\000\002\135\004\000\002" +
    "\135\002\000\002\136\005\000\002\136\013\000\002\136" +
    "\003\000\002\136\005\000\002\173\003\000\002\173\004" +
    "\000\002\173\004\000\002\174\002\000\002\174\004\000" +
    "\002\124\003\000\002\125\002\000\002\125\004\000\002" +
    "\175\002\000\002\175\004\000\002\176\003\000\002\176" +
    "\005\000\002\021\002\000\002\021\004\000\002\022\003" +
    "\000\002\022\004\000\002\022\006\000\002\023\003\000" +
    "\002\023\006\000\002\024\003\000\002\024\006\000\002" +
    "\025\003\000\002\025\006\000\002\026\005\000\002\026" +
    "\007\000\002\027\005\000\002\027\006\000\002\027\006" +
    "\000\002\027\007\000\002\030\002\000\002\030\007\000" +
    "\002\030\006\000\002\031\003\000\002\031\003\000\002" +
    "\032\003\000\002\032\006\000\002\033\002\000\002\033" +
    "\010\000\002\034\002\000\002\034\011\000\002\035\002" +
    "\000\002\035\004\000\002\036\002\000\002\036\005\000" +
    "\002\037\003\000\002\037\002\000\002\042\003\000\002" +
    "\042\005\000\002\043\005\000\002\043\005\000\002\043" +
    "\006\000\002\043\007\000\002\043\007\000\002\201\002" +
    "\000\002\201\004\000\002\177\002\000\002\177\003\000" +
    "\002\200\003\000\002\200\003\000\002\044\003\000\002" +
    "\044\002\000\002\045\004\000\002\045\004\000\002\045" +
    "\004\000\002\045\006\000\002\045\006\000\002\045\006" +
    "\000\002\046\005\000\002\046\003\000\002\047\003\000" +
    "\002\047\004\000\002\047\006\000\002\050\005\000\002" +
    "\050\007\000\002\050\003\000\002\050\005\000\002\051" +
    "\004\000\002\051\002\000\002\052\005\000\002\052\004" +
    "\000\002\052\013\000\002\052\003\000\002\052\005\000" +
    "\002\126\005\000\002\126\003\000\002\141\003\000\002" +
    "\141\004\000\002\127\003\000\002\127\005\000\002\130" +
    "\004\000\002\130\002\000\002\131\003\000\002\131\003" +
    "\000\002\233\005\000\002\233\003\000\002\132\010\000" +
    "\002\133\011\000\002\133\010\000\002\133\006\000\002" +
    "\133\007\000\002\133\006\000\002\134\003\000\002\134" +
    "\003\000\002\134\003\000\002\157\003\000\002\157\005" +
    "\000\002\203\003\000\002\203\003\000\002\203\004\000" +
    "\002\203\004\000\002\203\003\000\002\156\002\000\002" +
    "\156\003\000\002\156\003\000\002\156\003\000\002\156" +
    "\004\000\002\156\004\000\002\156\004\000\002\156\004" +
    "\000\002\156\004\000\002\156\004\000\002\156\005\000" +
    "\002\156\005\000\002\156\005\000\002\156\005\000\002" +
    "\156\005\000\002\156\005\000\002\213\003\000\002\214" +
    "\003\000\002\214\003\000\002\214\003\000\002\215\003" +
    "\000\002\215\003\000\002\154\005\000\002\154\007\000" +
    "\002\154\003\000\002\154\005\000\002\155\007\000\002" +
    "\155\006\000\002\055\005\000\002\055\003\000\002\056" +
    "\002\000\002\056\003\000\002\057\005\000\002\057\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\005\000" +
    "\002\061\010\000\002\061\005\000\002\061\006\000\002" +
    "\061\010\000\002\061\004\000\002\061\005\000\002\061" +
    "\005\000\002\061\005\000\002\061\005\000\002\061\005" +
    "\000\002\061\005\000\002\061\005\000\002\061\005\000" +
    "\002\061\005\000\002\061\005\000\002\061\005\000\002" +
    "\061\005\000\002\061\004\000\002\061\004\000\002\061" +
    "\004\000\002\061\004\000\002\061\005\000\002\061\005" +
    "\000\002\061\005\000\002\061\005\000\002\061\005\000" +
    "\002\061\005\000\002\061\005\000\002\061\005\000\002" +
    "\061\005\000\002\061\005\000\002\061\005\000\002\061" +
    "\005\000\002\061\005\000\002\061\005\000\002\061\005" +
    "\000\002\061\005\000\002\061\005\000\002\061\004\000" +
    "\002\061\004\000\002\061\004\000\002\061\004\000\002" +
    "\061\005\000\002\061\005\000\002\061\005\000\002\061" +
    "\005\000\002\061\005\000\002\061\005\000\002\061\005" +
    "\000\002\061\005\000\002\061\005\000\002\061\005\000" +
    "\002\061\003\000\002\061\007\000\002\061\006\000\002" +
    "\061\005\000\002\061\003\000\002\061\004\000\002\061" +
    "\004\000\002\061\004\000\002\061\004\000\002\061\004" +
    "\000\002\061\004\000\002\061\004\000\002\061\004\000" +
    "\002\061\004\000\002\061\003\000\002\061\003\000\002" +
    "\061\005\000\002\061\004\000\002\061\003\000\002\061" +
    "\014\000\002\061\015\000\002\061\003\000\002\040\002" +
    "\000\002\040\006\000\002\041\005\000\002\041\006\000" +
    "\002\041\003\000\002\041\004\000\002\062\006\000\002" +
    "\062\010\000\002\062\007\000\002\062\010\000\002\062" +
    "\010\000\002\062\012\000\002\062\010\000\002\062\010" +
    "\000\002\062\012\000\002\062\006\000\002\062\006\000" +
    "\002\062\006\000\002\152\003\000\002\152\003\000\002" +
    "\152\005\000\002\152\004\000\002\153\003\000\002\153" +
    "\005\000\002\153\004\000\002\216\003\000\002\216\003" +
    "\000\002\221\006\000\002\221\003\000\002\223\004\000" +
    "\002\223\002\000\002\224\004\000\002\063\002\000\002" +
    "\063\004\000\002\063\005\000\002\064\002\000\002\064" +
    "\005\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\065\003\000\002\065\005\000\002\065\004\000\002\067" +
    "\003\000\002\067\003\000\002\067\005\000\002\067\004" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\070\003\000\002\070\003\000\002\070\003\000\002" +
    "\070\006\000\002\070\006\000\002\070\005\000\002\070" +
    "\005\000\002\070\005\000\002\070\005\000\002\070\005" +
    "\000\002\070\005\000\002\070\004\000\002\070\004\000" +
    "\002\070\005\000\002\070\005\000\002\070\005\000\002" +
    "\070\005\000\002\070\005\000\002\070\005\000\002\070" +
    "\005\000\002\070\005\000\002\070\005\000\002\070\005" +
    "\000\002\070\005\000\002\070\005\000\002\070\005\000" +
    "\002\070\005\000\002\070\005\000\002\070\005\000\002" +
    "\070\005\000\002\070\005\000\002\070\005\000\002\070" +
    "\005\000\002\070\006\000\002\070\007\000\002\070\005" +
    "\000\002\070\004\000\002\070\004\000\002\070\005\000" +
    "\002\066\003\000\002\225\005\000\002\226\003\000\002" +
    "\226\003\000\002\230\006\000\002\230\006\000\002\227" +
    "\006\000\002\227\006\000\002\231\006\000\002\231\005" +
    "\000\002\071\003\000\002\071\003\000\002\071\003\000" +
    "\002\071\005\000\002\071\004\000\002\071\003\000\002" +
    "\071\005\000\002\071\003\000\002\142\005\000\002\072" +
    "\002\000\002\072\004\000\002\073\002\000\002\073\003" +
    "\000\002\074\007\000\002\074\005\000\002\074\005\000" +
    "\002\074\003\000\002\101\005\000\002\101\005\000\002" +
    "\077\004\000\002\077\004\000\002\077\006\000\002\077" +
    "\006\000\002\100\004\000\002\100\004\000\002\076\003" +
    "\000\002\076\003\000\002\075\003\000\002\075\003\000" +
    "\002\202\003\000\002\151\003\000\002\204\003\000\002" +
    "\143\010\000\002\143\010\000\002\164\003\000\002\164" +
    "\003\000\002\161\004\000\002\161\002\000\002\206\006" +
    "\000\002\206\006\000\002\160\005\000\002\160\002\000" +
    "\002\106\005\000\002\106\006\000\002\106\002\000\002" +
    "\205\003\000\002\205\004\000\002\207\005\000\002\207" +
    "\005\000\002\103\003\000\002\232\003\000\002\232\003" +
    "\000\002\144\003\000\002\144\006\000\002\144\006\000" +
    "\002\144\003\000\002\145\006\000\002\145\006\000\002" +
    "\147\006\000\002\147\006\000\002\146\006\000\002\146" +
    "\005\000\002\222\003\000\002\222\005\000\002\222\007" +
    "\000\002\222\004\000\002\222\003\000\002\102\006\000" +
    "\002\102\006\000\002\102\003\000\002\104\003\000\002" +
    "\104\006\000\002\105\002\000\002\105\003\000\002\107" +
    "\003\000\002\107\003\000\002\110\006\000\002\110\006" +
    "\000\002\110\003\000\002\111\003\000\002\111\005\000" +
    "\002\112\003\000\002\112\004\000\002\113\005\000\002" +
    "\113\003\000\002\114\003\000\002\114\006\000\002\114" +
    "\002\000\002\115\002\000\002\115\004\000\002\116\007" +
    "\000\002\116\005\000\002\116\005\000\002\116\003\000" +
    "\002\116\010\000\002\116\006\000\002\116\006\000\002" +
    "\116\004\000\002\117\004\000\002\117\004\000\002\117" +
    "\002\000\002\120\003\000\002\120\006\000\002\120\005" +
    "\000\002\120\005\000\002\120\010\000\002\120\005\000" +
    "\002\121\003\000\002\121\003\000\002\121\003\000\002" +
    "\122\006\000\002\122\006\000\002\122\006\000\002\122" +
    "\004\000\002\122\004\000\002\122\006\000\002\122\004" +
    "\000\002\122\004\000\002\210\003\000\002\210\005\000" +
    "\002\211\003\000\002\211\003\000\002\211\005\000\002" +
    "\211\005\000\002\217\005\000\002\217\005\000\002\220" +
    "\006\000\002\220\003\000\002\212\003\000\002\123\003" +
    "\000\002\123\003\000\002\150\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table =  getActionTable();

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table =
    unpackFromStrings(new String[] {
    "\000\u04b1\000\006\002\003\010\004\001\001\000\002\001" +
    "\001\000\126\003\166\011\200\012\170\015\126\060\161" +
    "\061\120\062\047\065\125\071\015\075\016\077\157\100" +
    "\171\101\176\102\061\103\162\104\137\112\100\122\073" +
    "\124\131\142\122\143\043\144\022\145\133\146\075\147" +
    "\055\150\104\152\066\155\132\162\115\163\143\164\023" +
    "\171\153\172\025\173\052\202\163\204\112\205\006\207" +
    "\021\212\130\217\105\222\036\232\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\046\u04a3\047\u04a6\001\001\000\076\003\166" +
    "\060\u049f\061\120\062\047\065\125\071\015\075\u049d\101" +
    "\176\102\061\103\162\104\137\112\100\122\073\142\122" +
    "\143\043\144\022\145\133\146\075\147\055\150\104\152" +
    "\066\164\u049e\202\163\204\112\205\006\207\021\212\130" +
    "\217\105\222\036\232\053\001\001\000\002\001\001\000" +
    "\076\003\166\060\161\061\120\062\047\065\125\071\015" +
    "\075\u0499\101\176\102\061\103\162\104\137\112\100\122" +
    "\073\142\122\143\043\144\022\145\133\146\075\147\055" +
    "\150\104\152\066\164\023\202\163\204\112\205\006\207" +
    "\021\212\130\217\105\222\036\232\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\u046f\006" +
    "\u0471\007\u0474\020\u02a6\001\001\000\076\003\166\060\161" +
    "\061\120\062\047\065\125\071\015\075\u046e\101\176\102" +
    "\061\103\162\104\137\112\100\122\073\142\122\143\043" +
    "\144\022\145\133\146\075\147\055\150\104\152\066\164" +
    "\023\202\163\204\112\205\006\207\021\212\130\217\105" +
    "\222\036\232\053\001\001\000\076\003\166\060\161\061" +
    "\120\062\047\065\125\071\015\075\u046d\101\176\102\061" +
    "\103\162\104\137\112\100\122\073\142\122\143\043\144" +
    "\022\145\133\146\075\147\055\150\104\152\066\164\023" +
    "\202\163\204\112\205\006\207\021\212\130\217\105\222" +
    "\036\232\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\117\u0454\001" +
    "\001\000\002\001\001\000\076\003\166\060\161\061\120" +
    "\062\047\065\125\071\015\075\u0453\101\176\102\061\103" +
    "\162\104\137\112\100\122\073\142\122\143\043\144\022" +
    "\145\133\146\075\147\055\150\104\152\066\164\023\202" +
    "\163\204\112\205\006\207\021\212\130\217\105\222\036" +
    "\232\053\001\001\000\076\003\166\060\161\061\120\062" +
    "\047\065\125\071\015\075\u0452\101\176\102\061\103\162" +
    "\104\137\112\100\122\073\142\122\143\043\144\022\145" +
    "\133\146\075\147\055\150\104\152\066\164\023\202\163" +
    "\204\112\205\006\207\021\212\130\217\105\222\036\232" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\076\003\166\060\u0431\061\120\062\047\065" +
    "\125\071\015\075\u0158\101\176\102\061\103\162\104\137" +
    "\112\100\122\073\142\122\143\043\144\022\145\133\146" +
    "\075\147\055\150\104\152\066\164\u0430\202\163\204\112" +
    "\205\006\207\021\212\130\217\105\222\036\232\053\001" +
    "\001\000\004\050\u0428\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\102\003\166\060\161\061\120\062\047\065\125\071" +
    "\015\075\u03de\101\176\102\061\103\162\104\137\112\100" +
    "\115\u03e0\116\u03df\122\073\142\122\143\043\144\022\145" +
    "\133\146\075\147\055\150\104\152\066\164\023\202\163" +
    "\204\112\205\006\207\021\212\130\217\105\222\036\232" +
    "\053\001\001\000\040\003\u0273\062\047\102\061\103\u026d" +
    "\104\137\112\100\143\043\152\u0270\164\u02cb\204\u03dc\205" +
    "\006\207\021\212\130\222\036\232\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\076\003" +
    "\166\060\161\061\120\062\047\065\125\071\015\075\u03da" +
    "\101\176\102\061\103\162\104\137\112\100\122\073\142" +
    "\122\143\043\144\022\145\133\146\075\147\055\150\104" +
    "\152\066\164\023\202\163\204\112\205\006\207\021\212" +
    "\130\217\105\222\036\232\053\001\001\000\002\001\001" +
    "\000\004\117\u03d7\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\076\003\166\060\161\061\120" +
    "\062\047\065\125\071\015\075\u03d3\101\176\102\061\103" +
    "\162\104\137\112\100\122\073\142\122\143\043\144\022" +
    "\145\133\146\075\147\055\150\104\152\066\164\023\202" +
    "\163\204\112\205\006\207\021\212\130\217\105\222\036" +
    "\232\053\001\001\000\004\013\u03d1\001\001\000\002\001" +
    "\001\000\004\003\u03d0\001\001\000\002\001\001\000\076" +
    "\003\166\060\161\061\120\062\047\065\125\071\015\075" +
    "\u03cf\101\176\102\061\103\162\104\137\112\100\122\073" +
    "\142\122\143\043\144\022\145\133\146\075\147\055\150" +
    "\104\152\066\164\023\202\163\204\112\205\006\207\021" +
    "\212\130\217\105\222\036\232\053\001\001\000\076\003" +
    "\166\060\161\061\120\062\047\065\125\071\015\075\u03ce" +
    "\101\176\102\061\103\162\104\137\112\100\122\073\142" +
    "\122\143\043\144\022\145\133\146\075\147\055\150\104" +
    "\152\066\164\023\202\163\204\112\205\006\207\021\212" +
    "\130\217\105\222\036\232\053\001\001\000\010\102\u03cd" +
    "\104\137\212\130\001\001\000\076\003\166\060\161\061" +
    "\120\062\047\065\125\071\015\075\u03cc\101\176\102\061" +
    "\103\162\104\137\112\100\122\073\142\122\143\043\144" +
    "\022\145\133\146\075\147\055\150\104\152\066\164\023" +
    "\202\163\204\112\205\006\207\021\212\130\217\105\222" +
    "\036\232\053\001\001\000\002\001\001\000\076\003\166" +
    "\060\161\061\120\062\047\065\125\071\015\075\u03c9\101" +
    "\176\102\061\103\162\104\137\112\100\122\073\142\122" +
    "\143\043\144\022\145\133\146\075\147\055\150\104\152" +
    "\066\164\023\202\163\204\112\205\006\207\021\212\130" +
    "\217\105\222\036\232\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\u019a\102\u0193" +
    "\103\u0191\104\137\112\u0197\152\u0194\207\021\212\130\216" +
    "\u03c7\221\u0190\222\u0196\001\001\000\002\001\001\000\004" +
    "\003\u03b8\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\076\003\166\060\161" +
    "\061\120\062\047\065\125\071\015\075\u0399\101\176\102" +
    "\061\103\162\104\137\112\100\122\073\142\122\143\043" +
    "\144\022\145\133\146\075\147\055\150\104\152\066\164" +
    "\023\202\163\204\112\205\006\207\021\212\130\217\105" +
    "\222\036\232\053\001\001\000\076\003\166\060\161\061" +
    "\120\062\047\065\125\071\015\075\u0398\101\176\102\061" +
    "\103\162\104\137\112\100\122\073\142\122\143\043\144" +
    "\022\145\133\146\075\147\055\150\104\152\066\164\023" +
    "\202\163\204\112\205\006\207\021\212\130\217\105\222" +
    "\036\232\053\001\001\000\002\001\001\000\076\003\166" +
    "\060\161\061\120\062\047\065\125\071\015\075\u0397\101" +
    "\176\102\061\103\162\104\137\112\100\122\073\142\122" +
    "\143\043\144\022\145\133\146\075\147\055\150\104\152" +
    "\066\164\023\202\163\204\112\205\006\207\021\212\130" +
    "\217\105\222\036\232\053\001\001\000\002\001\001\000" +
    "\004\053\u038e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\117\u0376\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\106\003\166\012\u033f\015\126\060\161" +
    "\061\120\062\047\065\125\071\015\075\016\077\157\100" +
    "\171\101\176\102\061\103\162\104\137\112\100\122\073" +
    "\142\122\143\043\144\022\145\133\146\075\147\055\150" +
    "\104\152\066\164\023\202\163\204\112\205\006\207\021" +
    "\212\130\217\105\222\036\232\053\001\001\000\076\003" +
    "\166\060\161\061\120\062\047\065\125\071\015\075\u033d" +
    "\101\176\102\061\103\162\104\137\112\100\122\073\142" +
    "\122\143\043\144\022\145\133\146\075\147\055\150\104" +
    "\152\066\164\023\202\163\204\112\205\006\207\021\212" +
    "\130\217\105\222\036\232\053\001\001\000\100\003\166" +
    "\055\u0338\060\161\061\120\062\047\065\125\071\015\075" +
    "\u0337\101\176\102\061\103\162\104\137\112\100\122\073" +
    "\142\122\143\043\144\022\145\133\146\075\147\055\150" +
    "\104\152\066\164\023\202\163\204\112\205\006\207\021" +
    "\212\130\217\105\222\036\232\053\001\001\000\002\001" +
    "\001\000\076\003\166\060\161\061\120\062\047\065\125" +
    "\071\015\075\u0336\101\176\102\061\103\162\104\137\112" +
    "\100\122\073\142\122\143\043\144\022\145\133\146\075" +
    "\147\055\150\104\152\066\164\023\202\163\204\112\205" +
    "\006\207\021\212\130\217\105\222\036\232\053\001\001" +
    "\000\076\003\166\060\161\061\120\062\047\065\125\071" +
    "\015\075\u0335\101\176\102\061\103\162\104\137\112\100" +
    "\122\073\142\122\143\043\144\022\145\133\146\075\147" +
    "\055\150\104\152\066\164\023\202\163\204\112\205\006" +
    "\207\021\212\130\217\105\222\036\232\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\076\003" +
    "\166\060\161\061\120\062\047\065\125\071\015\075\u0316" +
    "\101\176\102\061\103\162\104\137\112\100\122\073\142" +
    "\122\143\043\144\022\145\133\146\075\147\055\150\104" +
    "\152\066\164\023\202\163\204\112\205\006\207\021\212" +
    "\130\217\105\222\036\232\053\001\001\000\076\003\166" +
    "\060\161\061\120\062\047\065\125\071\015\075\u0315\101" +
    "\176\102\061\103\162\104\137\112\100\122\073\142\122" +
    "\143\043\144\022\145\133\146\075\147\055\150\104\152" +
    "\066\164\023\202\163\204\112\205\006\207\021\212\130" +
    "\217\105\222\036\232\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\100\003\166\060\u030c\061\120\062\047" +
    "\065\125\071\015\075\u0158\100\u030d\101\176\102\061\103" +
    "\162\104\137\112\100\122\073\142\122\143\043\144\022" +
    "\145\133\146\075\147\055\150\104\152\066\164\u030b\202" +
    "\163\204\112\205\006\207\021\212\130\217\105\222\036" +
    "\232\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\063\u0300\001\001" +
    "\000\002\001\001\000\076\003\166\060\161\061\120\062" +
    "\047\065\125\071\015\075\u02fe\101\176\102\061\103\162" +
    "\104\137\112\100\122\073\142\122\143\043\144\022\145" +
    "\133\146\075\147\055\150\104\152\066\164\023\202\163" +
    "\204\112\205\006\207\021\212\130\217\105\222\036\232" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\102\003\166\060\161\061\u02dc\062\047\065" +
    "\125\071\015\075\u0158\076\u02d9\077\u02dd\101\176\102\061" +
    "\103\162\104\137\112\100\122\073\142\122\143\043\144" +
    "\022\145\133\146\075\147\055\150\u02da\152\066\164\023" +
    "\202\u02de\204\112\205\006\207\021\212\130\217\105\222" +
    "\036\232\053\001\001\000\002\001\001\000\040\003\u0273" +
    "\062\047\102\061\103\u026d\104\137\112\100\143\043\152" +
    "\u0270\164\u02cb\204\u02ca\205\006\207\021\212\130\222\036" +
    "\232\053\001\001\000\002\001\001\000\076\003\166\060" +
    "\161\061\120\062\047\065\125\071\015\075\u02c8\101\176" +
    "\102\061\103\162\104\137\112\100\122\073\142\122\143" +
    "\043\144\022\145\133\146\075\147\055\150\104\152\066" +
    "\164\023\202\163\204\112\205\006\207\021\212\130\217" +
    "\105\222\036\232\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\204\123\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\236\065\216\066\240\067" +
    "\214\070\231\142\233\152\212\225\224\227\213\230\220" +
    "\231\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\u0105\001\001" +
    "\000\002\001\001\000\026\003\236\065\216\067\u0104\070" +
    "\231\142\233\152\212\225\224\227\213\230\220\231\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\236\065\216\067\375\070\231\142\233\152\212\225\224" +
    "\227\213\230\220\231\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\236\065\216\067\371\070\231" +
    "\142\233\152\212\225\224\227\213\230\220\231\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\236" +
    "\065\216\066\352\067\214\070\231\072\351\074\350\142" +
    "\233\152\212\225\224\227\213\230\220\231\235\001\001" +
    "\000\002\001\001\000\026\003\236\065\216\067\347\070" +
    "\231\142\233\152\212\225\224\227\213\230\220\231\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\236\065\216\067\241" +
    "\070\231\142\233\152\212\225\224\227\213\230\220\231" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\236\065\216\067\336\070\231\142\233\152\212\225" +
    "\224\227\213\230\220\231\235\001\001\000\026\003\236" +
    "\065\216\067\335\070\231\142\233\152\212\225\224\227" +
    "\213\230\220\231\235\001\001\000\026\003\236\065\216" +
    "\067\334\070\231\142\233\152\212\225\224\227\213\230" +
    "\220\231\235\001\001\000\026\003\236\065\216\067\333" +
    "\070\231\142\233\152\212\225\224\227\213\230\220\231" +
    "\235\001\001\000\026\003\236\065\216\067\332\070\231" +
    "\142\233\152\212\225\224\227\213\230\220\231\235\001" +
    "\001\000\026\003\236\065\216\067\331\070\231\142\233" +
    "\152\212\225\224\227\213\230\220\231\235\001\001\000" +
    "\026\003\236\065\216\067\330\070\231\142\233\152\212" +
    "\225\224\227\213\230\220\231\235\001\001\000\026\003" +
    "\236\065\216\067\323\070\231\142\233\152\212\225\224" +
    "\227\213\230\220\231\235\001\001\000\026\003\236\065" +
    "\216\067\322\070\231\142\233\152\212\225\224\227\213" +
    "\230\220\231\235\001\001\000\026\003\236\065\216\067" +
    "\321\070\231\142\233\152\212\225\224\227\213\230\220" +
    "\231\235\001\001\000\026\003\236\065\216\067\320\070" +
    "\231\142\233\152\212\225\224\227\213\230\220\231\235" +
    "\001\001\000\026\003\236\065\216\067\317\070\231\142" +
    "\233\152\212\225\224\227\213\230\220\231\235\001\001" +
    "\000\026\003\236\065\216\067\316\070\231\142\233\152" +
    "\212\225\224\227\213\230\220\231\235\001\001\000\026" +
    "\003\236\065\216\067\315\070\231\142\233\152\212\225" +
    "\224\227\213\230\220\231\235\001\001\000\026\003\236" +
    "\065\216\067\314\070\231\142\233\152\212\225\224\227" +
    "\213\230\220\231\235\001\001\000\026\003\236\065\216" +
    "\067\313\070\231\142\233\152\212\225\224\227\213\230" +
    "\220\231\235\001\001\000\026\003\236\065\216\067\312" +
    "\070\231\142\233\152\212\225\224\227\213\230\220\231" +
    "\235\001\001\000\026\003\236\065\216\067\311\070\231" +
    "\142\233\152\212\225\224\227\213\230\220\231\235\001" +
    "\001\000\002\001\001\000\026\003\236\065\216\067\310" +
    "\070\231\142\233\152\212\225\224\227\213\230\220\231" +
    "\235\001\001\000\026\003\236\065\216\067\307\070\231" +
    "\142\233\152\212\225\224\227\213\230\220\231\235\001" +
    "\001\000\026\003\236\065\216\067\306\070\231\142\233" +
    "\152\212\225\224\227\213\230\220\231\235\001\001\000" +
    "\026\003\236\065\216\067\305\070\231\142\233\152\212" +
    "\225\224\227\213\230\220\231\235\001\001\000\026\003" +
    "\236\065\216\067\304\070\231\142\233\152\212\225\224" +
    "\227\213\230\220\231\235\001\001\000\026\003\236\065" +
    "\216\067\303\070\231\142\233\152\212\225\224\227\213" +
    "\230\220\231\235\001\001\000\026\003\236\065\216\067" +
    "\302\070\231\142\233\152\212\225\224\227\213\230\220" +
    "\231\235\001\001\000\026\003\236\065\216\067\301\070" +
    "\231\142\233\152\212\225\224\227\213\230\220\231\235" +
    "\001\001\000\026\003\236\065\216\067\300\070\231\142" +
    "\233\152\212\225\224\227\213\230\220\231\235\001\001" +
    "\000\026\003\236\065\216\067\277\070\231\142\233\152" +
    "\212\225\224\227\213\230\220\231\235\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\236\065\216\067\325\070" +
    "\231\142\233\152\212\225\224\227\213\230\220\231\235" +
    "\001\001\000\002\001\001\000\026\003\236\065\216\067" +
    "\327\070\231\142\233\152\212\225\224\227\213\230\220" +
    "\231\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\236\065\216\067\342" +
    "\070\231\142\233\152\212\225\224\227\213\230\220\231" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\236\065\216\067\345\070\231\142\233\152\212\225" +
    "\224\227\213\230\220\231\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\073\357\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\236" +
    "\065\216\066\354\067\214\070\231\142\233\152\212\225" +
    "\224\227\213\230\220\231\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\236\065\216\066\360\067" +
    "\214\070\231\142\233\152\212\225\224\227\213\230\220" +
    "\231\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\236\065\216\066\362\067\214\070\231\142\233" +
    "\152\212\225\224\227\213\230\220\231\235\001\001\000" +
    "\002\001\001\000\026\003\236\065\216\067\364\070\231" +
    "\142\233\152\212\225\224\227\213\230\220\231\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\236" +
    "\065\216\067\367\070\231\142\233\152\212\225\224\227" +
    "\213\230\220\231\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\374\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\236\065\216\066\352\067\214\070\231\072\377\074" +
    "\350\142\233\152\212\225\224\227\213\230\220\231\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\236\065\216\067\u0102\070\231\142\233\152\212\225\224" +
    "\227\213\230\220\231\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\236\065\216\067\u0107\070\231\142\233\152\212\225" +
    "\224\227\213\230\220\231\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\226\u010a\230\u010b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\110" +
    "\003\166\012\u0117\015\126\025\u0113\060\161\061\120\062" +
    "\047\065\125\071\015\075\016\077\157\100\171\101\176" +
    "\102\061\103\162\104\137\112\100\122\073\142\122\143" +
    "\043\144\022\145\133\146\075\147\055\150\104\152\066" +
    "\164\023\202\163\204\112\205\006\207\021\212\130\217" +
    "\105\222\036\232\053\001\001\000\004\123\u010f\001\001" +
    "\000\002\001\001\000\030\003\236\065\216\066\u0111\067" +
    "\214\070\231\142\233\152\212\225\224\227\213\230\220" +
    "\231\235\001\001\000\002\001\001\000\004\020\u02a6\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u014c" +
    "\001\001\000\004\053\u0118\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\u011c\037\u0124" +
    "\042\u011e\043\u0121\153\u0120\177\u011d\200\u0123\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\u0143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\u013c\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\201\u0127\001\001\000\010\003" +
    "\u011c\153\u0120\200\u013b\001\001\000\004\040\u0129\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u012b\001" +
    "\001\000\124\003\166\012\u0130\014\u012c\015\126\060\161" +
    "\061\120\062\047\065\125\071\015\075\016\077\157\100" +
    "\171\101\176\102\061\103\162\104\137\112\100\122\073" +
    "\124\131\142\122\143\043\144\022\145\133\146\075\147" +
    "\055\150\104\152\066\162\u012d\163\u012f\164\023\171\153" +
    "\172\025\173\052\202\163\204\112\205\006\207\021\212" +
    "\130\217\105\222\036\232\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\u0133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\u013e\001\001\000\002\001\001\000\014" +
    "\003\u011c\043\u0140\153\u0120\177\u011d\200\u0123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\236\065\216\066" +
    "\u0146\067\214\070\231\142\233\152\212\225\224\227\213" +
    "\230\220\231\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\236\065\216\066\u014a" +
    "\067\214\070\231\142\233\152\212\225\224\227\213\230" +
    "\220\231\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\124\003\166\012\u0130\014\u012c\015\126\060\161\061" +
    "\120\062\047\065\125\071\015\075\016\077\157\100\171" +
    "\101\176\102\061\103\162\104\137\112\100\122\073\124" +
    "\131\142\122\143\043\144\022\145\133\146\075\147\055" +
    "\150\104\152\066\162\u012d\163\u012f\164\023\171\153\172" +
    "\025\173\052\202\163\204\112\205\006\207\021\212\130" +
    "\217\105\222\036\232\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\u0150\001\001\000\002\001\001" +
    "\000\010\044\u0155\045\u0153\054\u0154\001\001\000\040\003" +
    "\u0273\062\047\102\061\103\u026d\104\137\112\100\143\043" +
    "\151\u02a5\152\u0270\164\u02a4\205\006\207\021\212\130\222" +
    "\036\232\053\001\001\000\002\001\001\000\076\003\166" +
    "\060\u015c\061\120\062\047\065\125\071\015\075\u0158\101" +
    "\176\102\061\103\162\104\137\112\100\122\073\142\122" +
    "\143\043\144\022\145\133\146\075\147\055\150\104\152" +
    "\066\164\u0159\202\163\204\112\205\006\207\021\212\130" +
    "\217\105\222\036\232\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\u015e\001\001\000\002\001\001\000\020" +
    "\003\u011c\037\u0160\042\u011e\043\u0121\153\u0120\177\u011d\200" +
    "\u0123\001\001\000\002\001\001\000\004\201\u0162\001\001" +
    "\000\004\040\u0163\001\001\000\002\001\001\000\004\013" +
    "\u0165\001\001\000\124\003\166\012\u0130\014\u012c\015\126" +
    "\060\161\061\120\062\047\065\125\071\015\075\016\077" +
    "\157\100\171\101\176\102\061\103\162\104\137\112\100" +
    "\122\073\124\131\142\122\143\043\144\022\145\133\146" +
    "\075\147\055\150\104\152\066\162\u012d\163\u012f\164\023" +
    "\171\153\172\025\173\052\202\163\204\112\205\006\207" +
    "\021\212\130\217\105\222\036\232\053\001\001\000\002" +
    "\001\001\000\100\003\166\060\161\061\120\062\047\065" +
    "\125\071\015\075\u0168\101\176\102\061\103\162\104\137" +
    "\105\u0169\112\100\122\073\142\122\143\043\144\022\145" +
    "\133\146\075\147\055\150\104\152\066\164\023\202\163" +
    "\204\112\205\006\207\021\212\130\217\105\222\036\232" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\076\003\166\060\161\061\120\062\047\065" +
    "\125\071\015\075\u0252\101\176\102\061\103\162\104\137" +
    "\112\100\122\073\142\122\143\043\144\022\145\133\146" +
    "\075\147\055\150\104\152\066\164\023\202\163\204\112" +
    "\205\006\207\021\212\130\217\105\222\036\232\053\001" +
    "\001\000\076\003\166\060\161\061\120\062\047\065\125" +
    "\071\015\075\u0251\101\176\102\061\103\162\104\137\112" +
    "\100\122\073\142\122\143\043\144\022\145\133\146\075" +
    "\147\055\150\104\152\066\164\023\202\163\204\112\205" +
    "\006\207\021\212\130\217\105\222\036\232\053\001\001" +
    "\000\076\003\166\060\161\061\120\062\047\065\125\071" +
    "\015\075\u0250\101\176\102\061\103\162\104\137\112\100" +
    "\122\073\142\122\143\043\144\022\145\133\146\075\147" +
    "\055\150\104\152\066\164\023\202\163\204\112\205\006" +
    "\207\021\212\130\217\105\222\036\232\053\001\001\000" +
    "\076\003\166\060\161\061\120\062\047\065\125\071\015" +
    "\075\u024f\101\176\102\061\103\162\104\137\112\100\122" +
    "\073\142\122\143\043\144\022\145\133\146\075\147\055" +
    "\150\104\152\066\164\023\202\163\204\112\205\006\207" +
    "\021\212\130\217\105\222\036\232\053\001\001\000\076" +
    "\003\166\060\161\061\120\062\047\065\125\071\015\075" +
    "\u024e\101\176\102\061\103\162\104\137\112\100\122\073" +
    "\142\122\143\043\144\022\145\133\146\075\147\055\150" +
    "\104\152\066\164\023\202\163\204\112\205\006\207\021" +
    "\212\130\217\105\222\036\232\053\001\001\000\076\003" +
    "\166\060\161\061\120\062\047\065\125\071\015\075\u024d" +
    "\101\176\102\061\103\162\104\137\112\100\122\073\142" +
    "\122\143\043\144\022\145\133\146\075\147\055\150\104" +
    "\152\066\164\023\202\163\204\112\205\006\207\021\212" +
    "\130\217\105\222\036\232\053\001\001\000\076\003\166" +
    "\060\161\061\120\062\047\065\125\071\015\075\u024c\101" +
    "\176\102\061\103\162\104\137\112\100\122\073\142\122" +
    "\143\043\144\022\145\133\146\075\147\055\150\104\152" +
    "\066\164\023\202\163\204\112\205\006\207\021\212\130" +
    "\217\105\222\036\232\053\001\001\000\076\003\166\060" +
    "\161\061\120\062\047\065\125\071\015\075\u0247\101\176" +
    "\102\061\103\162\104\137\112\100\122\073\142\122\143" +
    "\043\144\022\145\133\146\075\147\055\150\104\152\066" +
    "\164\023\202\163\204\112\205\006\207\021\212\130\217" +
    "\105\222\036\232\053\001\001\000\076\003\166\060\161" +
    "\061\120\062\047\065\125\071\015\075\u0246\101\176\102" +
    "\061\103\162\104\137\112\100\122\073\142\122\143\043" +
    "\144\022\145\133\146\075\147\055\150\104\152\066\164" +
    "\023\202\163\204\112\205\006\207\021\212\130\217\105" +
    "\222\036\232\053\001\001\000\076\003\166\060\161\061" +
    "\120\062\047\065\125\071\015\075\u0245\101\176\102\061" +
    "\103\162\104\137\112\100\122\073\142\122\143\043\144" +
    "\022\145\133\146\075\147\055\150\104\152\066\164\023" +
    "\202\163\204\112\205\006\207\021\212\130\217\105\222" +
    "\036\232\053\001\001\000\076\003\166\060\161\061\120" +
    "\062\047\065\125\071\015\075\u0244\101\176\102\061\103" +
    "\162\104\137\112\100\122\073\142\122\143\043\144\022" +
    "\145\133\146\075\147\055\150\104\152\066\164\023\202" +
    "\163\204\112\205\006\207\021\212\130\217\105\222\036" +
    "\232\053\001\001\000\076\003\166\060\161\061\120\062" +
    "\047\065\125\071\015\075\u0243\101\176\102\061\103\162" +
    "\104\137\112\100\122\073\142\122\143\043\144\022\145" +
    "\133\146\075\147\055\150\104\152\066\164\023\202\163" +
    "\204\112\205\006\207\021\212\130\217\105\222\036\232" +
    "\053\001\001\000\076\003\166\060\161\061\120\062\047" +
    "\065\125\071\015\075\u0242\101\176\102\061\103\162\104" +
    "\137\112\100\122\073\142\122\143\043\144\022\145\133" +
    "\146\075\147\055\150\104\152\066\164\023\202\163\204" +
    "\112\205\006\207\021\212\130\217\105\222\036\232\053" +
    "\001\001\000\076\003\166\060\161\061\120\062\047\065" +
    "\125\071\015\075\u0241\101\176\102\061\103\162\104\137" +
    "\112\100\122\073\142\122\143\043\144\022\145\133\146" +
    "\075\147\055\150\104\152\066\164\023\202\163\204\112" +
    "\205\006\207\021\212\130\217\105\222\036\232\053\001" +
    "\001\000\076\003\166\060\161\061\120\062\047\065\125" +
    "\071\015\075\u0240\101\176\102\061\103\162\104\137\112" +
    "\100\122\073\142\122\143\043\144\022\145\133\146\075" +
    "\147\055\150\104\152\066\164\023\202\163\204\112\205" +
    "\006\207\021\212\130\217\105\222\036\232\053\001\001" +
    "\000\076\003\166\060\161\061\120\062\047\065\125\071" +
    "\015\075\u023f\101\176\102\061\103\162\104\137\112\100" +
    "\122\073\142\122\143\043\144\022\145\133\146\075\147" +
    "\055\150\104\152\066\164\023\202\163\204\112\205\006" +
    "\207\021\212\130\217\105\222\036\232\053\001\001\000" +
    "\076\003\166\060\161\061\120\062\047\065\125\071\015" +
    "\075\u023e\101\176\102\061\103\162\104\137\112\100\122" +
    "\073\142\122\143\043\144\022\145\133\146\075\147\055" +
    "\150\104\152\066\164\023\202\163\204\112\205\006\207" +
    "\021\212\130\217\105\222\036\232\053\001\001\000\076" +
    "\003\166\060\161\061\120\062\047\065\125\071\015\075" +
    "\u023d\101\176\102\061\103\162\104\137\112\100\122\073" +
    "\142\122\143\043\144\022\145\133\146\075\147\055\150" +
    "\104\152\066\164\023\202\163\204\112\205\006\207\021" +
    "\212\130\217\105\222\036\232\053\001\001\000\076\003" +
    "\166\060\161\061\120\062\047\065\125\071\015\075\u023c" +
    "\101\176\102\061\103\162\104\137\112\100\122\073\142" +
    "\122\143\043\144\022\145\133\146\075\147\055\150\104" +
    "\152\066\164\023\202\163\204\112\205\006\207\021\212" +
    "\130\217\105\222\036\232\053\001\001\000\076\003\166" +
    "\060\161\061\120\062\047\065\125\071\015\075\u023b\101" +
    "\176\102\061\103\162\104\137\112\100\122\073\142\122" +
    "\143\043\144\022\145\133\146\075\147\055\150\104\152" +
    "\066\164\023\202\163\204\112\205\006\207\021\212\130" +
    "\217\105\222\036\232\053\001\001\000\030\003\u019a\102" +
    "\u0193\103\u0191\104\137\112\u0197\152\u0194\207\021\212\130" +
    "\216\u0195\221\u0190\222\u0196\001\001\000\076\003\166\060" +
    "\161\061\120\062\047\065\125\071\015\075\u018f\101\176" +
    "\102\061\103\162\104\137\112\100\122\073\142\122\143" +
    "\043\144\022\145\133\146\075\147\055\150\104\152\066" +
    "\164\023\202\163\204\112\205\006\207\021\212\130\217" +
    "\105\222\036\232\053\001\001\000\076\003\166\060\161" +
    "\061\120\062\047\065\125\071\015\075\u018e\101\176\102" +
    "\061\103\162\104\137\112\100\122\073\142\122\143\043" +
    "\144\022\145\133\146\075\147\055\150\104\152\066\164" +
    "\023\202\163\204\112\205\006\207\021\212\130\217\105" +
    "\222\036\232\053\001\001\000\076\003\166\060\161\061" +
    "\120\062\047\065\125\071\015\075\u018d\101\176\102\061" +
    "\103\162\104\137\112\100\122\073\142\122\143\043\144" +
    "\022\145\133\146\075\147\055\150\104\152\066\164\023" +
    "\202\163\204\112\205\006\207\021\212\130\217\105\222" +
    "\036\232\053\001\001\000\076\003\166\060\161\061\120" +
    "\062\047\065\125\071\015\075\u018c\101\176\102\061\103" +
    "\162\104\137\112\100\122\073\142\122\143\043\144\022" +
    "\145\133\146\075\147\055\150\104\152\066\164\023\202" +
    "\163\204\112\205\006\207\021\212\130\217\105\222\036" +
    "\232\053\001\001\000\076\003\166\060\161\061\120\062" +
    "\047\065\125\071\015\075\u018b\101\176\102\061\103\162" +
    "\104\137\112\100\122\073\142\122\143\043\144\022\145" +
    "\133\146\075\147\055\150\104\152\066\164\023\202\163" +
    "\204\112\205\006\207\021\212\130\217\105\222\036\232" +
    "\053\001\001\000\076\003\166\060\161\061\120\062\047" +
    "\065\125\071\015\075\u018a\101\176\102\061\103\162\104" +
    "\137\112\100\122\073\142\122\143\043\144\022\145\133" +
    "\146\075\147\055\150\104\152\066\164\023\202\163\204" +
    "\112\205\006\207\021\212\130\217\105\222\036\232\053" +
    "\001\001\000\076\003\166\060\161\061\120\062\047\065" +
    "\125\071\015\075\u0189\101\176\102\061\103\162\104\137" +
    "\112\100\122\073\142\122\143\043\144\022\145\133\146" +
    "\075\147\055\150\104\152\066\164\023\202\163\204\112" +
    "\205\006\207\021\212\130\217\105\222\036\232\053\001" +
    "\001\000\076\003\166\060\161\061\120\062\047\065\125" +
    "\071\015\075\u0188\101\176\102\061\103\162\104\137\112" +
    "\100\122\073\142\122\143\043\144\022\145\133\146\075" +
    "\147\055\150\104\152\066\164\023\202\163\204\112\205" +
    "\006\207\021\212\130\217\105\222\036\232\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\u0238\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\102" +
    "\u0215\104\137\212\130\001\001\000\004\150\u019d\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\u019c\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\u019a" +
    "\102\u0193\103\u0191\104\137\112\u0197\152\u0194\207\021\212" +
    "\130\216\u01a0\221\u0190\222\u0196\001\001\000\004\064\u01a6" +
    "\001\001\000\004\064\u01a1\001\001\000\002\001\001\000" +
    "\010\044\u01a3\045\u0153\054\u0154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\174\u01a8\001" +
    "\001\000\006\003\u011c\153\u0213\001\001\000\004\175\u01a9" +
    "\001\001\000\002\001\001\000\010\003\u011c\153\u01ac\176" +
    "\u01ab\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\u011c\153\u01ae\001\001\000\002\001\001\000\004\051" +
    "\u01b0\001\001\000\020\052\u01b7\155\u01c0\156\u01b1\203\u01bf" +
    "\213\u01b6\214\u01b8\215\u01b3\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\213\u0203\214\u0204\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\214\u0200\215\u01ff\001" +
    "\001\000\002\001\001\000\006\213\u01fb\215\u01fc\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\u01d3\126\u01d0\141\u01d2\001\001" +
    "\000\002\001\001\000\004\154\u01c8\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\236\065\216\067\u01c6\070" +
    "\231\142\233\152\212\225\224\227\213\230\220\231\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\236\065\216\066\u01cd\067\214\070\231\142" +
    "\233\152\212\225\224\227\213\230\220\231\235\001\001" +
    "\000\002\001\001\000\030\003\236\065\216\066\u01cf\067" +
    "\214\070\231\142\233\152\212\225\224\227\213\230\220" +
    "\231\235\001\001\000\002\001\001\000\004\127\u01d7\001" +
    "\001\000\004\003\u01d4\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\u01d3\141\u01fa\001" +
    "\001\000\004\130\u01d9\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\u019a\123\u01db\131\u01dc\132\u01da\133" +
    "\u01df\152\u01dd\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\123\u01e3\001\001\000\002\001\001\000\010\003\u019a\152" +
    "\u01ef\233\u01ee\001\001\000\006\123\u01e9\134\u01e6\001\001" +
    "\000\004\123\u01ec\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\u019a\152\u01f2\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\123\u01f5\134\u01f4\001" +
    "\001\000\004\123\u01f7\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\215\u01fe\001\001\000\004" +
    "\213\u01fd\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\214\u0202\001\001\000\004\215\u0201\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\214\u0206\001\001\000" +
    "\004\213\u0205\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\u0208\001\001\000\004\123\u0209\001\001\000" +
    "\002\001\001\000\020\003\u011c\037\u020b\042\u011e\043\u0121" +
    "\153\u0120\177\u011d\200\u0123\001\001\000\002\001\001\000" +
    "\004\201\u020d\001\001\000\004\157\u020e\001\001\000\002" +
    "\001\001\000\004\013\u0211\001\001\000\002\001\001\000" +
    "\124\003\166\012\u0130\014\u012c\015\126\060\161\061\120" +
    "\062\047\065\125\071\015\075\016\077\157\100\171\101" +
    "\176\102\061\103\162\104\137\112\100\122\073\124\131" +
    "\142\122\143\043\144\022\145\133\146\075\147\055\150" +
    "\104\152\066\162\u012d\163\u012f\164\023\171\153\172\025" +
    "\173\052\202\163\204\112\205\006\207\021\212\130\217" +
    "\105\222\036\232\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\076\003\166\060\161\061\120\062\047\065\125" +
    "\071\015\075\u0218\101\176\102\061\103\162\104\137\112" +
    "\100\122\073\142\122\143\043\144\022\145\133\146\075" +
    "\147\055\150\104\152\066\164\023\202\163\204\112\205" +
    "\006\207\021\212\130\217\105\222\036\232\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\076\003\166\060" +
    "\161\061\120\062\047\065\125\071\015\075\u021e\101\176" +
    "\102\061\103\162\104\137\112\100\122\073\142\122\143" +
    "\043\144\022\145\133\146\075\147\055\150\104\152\066" +
    "\164\023\202\163\204\112\205\006\207\021\212\130\217" +
    "\105\222\036\232\053\001\001\000\100\003\166\060\161" +
    "\061\120\062\047\065\125\071\015\075\u0168\101\176\102" +
    "\061\103\162\104\137\105\u021c\112\100\122\073\142\122" +
    "\143\043\144\022\145\133\146\075\147\055\150\104\152" +
    "\066\164\023\202\163\204\112\205\006\207\021\212\130" +
    "\217\105\222\036\232\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\102\u0227\104\137\107\u0224\110\u0225\111\u0222\112\u0226\123" +
    "\u0221\205\u0223\212\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\223\u0232\001\001\000" +
    "\002\001\001\000\010\102\u022b\104\137\212\130\001\001" +
    "\000\002\001\001\000\076\003\166\060\161\061\120\062" +
    "\047\065\125\071\015\075\u0229\101\176\102\061\103\162" +
    "\104\137\112\100\122\073\142\122\143\043\144\022\145" +
    "\133\146\075\147\055\150\104\152\066\164\023\202\163" +
    "\204\112\205\006\207\021\212\130\217\105\222\036\232" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\076\003\166\060\161\061\120\062\047\065" +
    "\125\071\015\075\u0230\101\176\102\061\103\162\104\137" +
    "\112\100\122\073\142\122\143\043\144\022\145\133\146" +
    "\075\147\055\150\104\152\066\164\023\202\163\204\112" +
    "\205\006\207\021\212\130\217\105\222\036\232\053\001" +
    "\001\000\100\003\166\060\161\061\120\062\047\065\125" +
    "\071\015\075\u0168\101\176\102\061\103\162\104\137\105" +
    "\u022e\112\100\122\073\142\122\143\043\144\022\145\133" +
    "\146\075\147\055\150\104\152\066\164\023\202\163\204" +
    "\112\205\006\207\021\212\130\217\105\222\036\232\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\224\u0233\001\001\000\002" +
    "\001\001\000\024\102\u0227\104\137\107\u0235\110\u0225\111" +
    "\u0222\112\u0226\123\u0221\205\u0223\212\130\001\001\000\002" +
    "\001\001\000\014\102\u0227\104\137\112\u0226\205\u0237\212" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\102\u0227\104\137\112\u0226\205\u023a\212\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\076\003\166\060\161\061\120\062\047" +
    "\065\125\071\015\075\u0249\101\176\102\061\103\162\104" +
    "\137\112\100\122\073\142\122\143\043\144\022\145\133" +
    "\146\075\147\055\150\104\152\066\164\023\202\163\204" +
    "\112\205\006\207\021\212\130\217\105\222\036\232\053" +
    "\001\001\000\002\001\001\000\076\003\166\060\161\061" +
    "\120\062\047\065\125\071\015\075\u024b\101\176\102\061" +
    "\103\162\104\137\112\100\122\073\142\122\143\043\144" +
    "\022\145\133\146\075\147\055\150\104\152\066\164\023" +
    "\202\163\204\112\205\006\207\021\212\130\217\105\222" +
    "\036\232\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\076" +
    "\003\166\060\161\061\120\062\047\065\125\071\015\075" +
    "\u029d\101\176\102\061\103\162\104\137\112\100\122\073" +
    "\142\122\143\043\144\022\145\133\146\075\147\055\150" +
    "\104\152\066\164\023\202\163\204\112\205\006\207\021" +
    "\212\130\217\105\222\036\232\053\001\001\000\076\003" +
    "\166\060\161\061\120\062\047\065\125\071\015\075\u026c" +
    "\101\176\102\061\103\162\104\137\112\100\122\073\142" +
    "\122\143\043\144\022\145\133\146\075\147\055\150\104" +
    "\152\066\164\023\202\163\204\112\205\006\207\021\212" +
    "\130\217\105\222\036\232\053\001\001\000\076\003\166" +
    "\060\161\061\120\062\047\065\125\071\015\075\u026a\101" +
    "\176\102\061\103\162\104\137\112\100\122\073\142\122" +
    "\143\043\144\022\145\133\146\075\147\055\150\104\152" +
    "\066\164\023\202\163\204\112\205\006\207\021\212\130" +
    "\217\105\222\036\232\053\001\001\000\076\003\166\060" +
    "\161\061\120\062\047\065\125\071\015\075\u0269\101\176" +
    "\102\061\103\162\104\137\112\100\122\073\142\122\143" +
    "\043\144\022\145\133\146\075\147\055\150\104\152\066" +
    "\164\023\202\163\204\112\205\006\207\021\212\130\217" +
    "\105\222\036\232\053\001\001\000\076\003\166\060\161" +
    "\061\120\062\047\065\125\071\015\075\u0268\101\176\102" +
    "\061\103\162\104\137\112\100\122\073\142\122\143\043" +
    "\144\022\145\133\146\075\147\055\150\104\152\066\164" +
    "\023\202\163\204\112\205\006\207\021\212\130\217\105" +
    "\222\036\232\053\001\001\000\076\003\166\060\161\061" +
    "\120\062\047\065\125\071\015\075\u0267\101\176\102\061" +
    "\103\162\104\137\112\100\122\073\142\122\143\043\144" +
    "\022\145\133\146\075\147\055\150\104\152\066\164\023" +
    "\202\163\204\112\205\006\207\021\212\130\217\105\222" +
    "\036\232\053\001\001\000\076\003\166\060\161\061\120" +
    "\062\047\065\125\071\015\075\u0266\101\176\102\061\103" +
    "\162\104\137\112\100\122\073\142\122\143\043\144\022" +
    "\145\133\146\075\147\055\150\104\152\066\164\023\202" +
    "\163\204\112\205\006\207\021\212\130\217\105\222\036" +
    "\232\053\001\001\000\076\003\166\060\161\061\120\062" +
    "\047\065\125\071\015\075\u0265\101\176\102\061\103\162" +
    "\104\137\112\100\122\073\142\122\143\043\144\022\145" +
    "\133\146\075\147\055\150\104\152\066\164\023\202\163" +
    "\204\112\205\006\207\021\212\130\217\105\222\036\232" +
    "\053\001\001\000\076\003\166\060\161\061\120\062\047" +
    "\065\125\071\015\075\u0264\101\176\102\061\103\162\104" +
    "\137\112\100\122\073\142\122\143\043\144\022\145\133" +
    "\146\075\147\055\150\104\152\066\164\023\202\163\204" +
    "\112\205\006\207\021\212\130\217\105\222\036\232\053" +
    "\001\001\000\076\003\166\060\161\061\120\062\047\065" +
    "\125\071\015\075\u0263\101\176\102\061\103\162\104\137" +
    "\112\100\122\073\142\122\143\043\144\022\145\133\146" +
    "\075\147\055\150\104\152\066\164\023\202\163\204\112" +
    "\205\006\207\021\212\130\217\105\222\036\232\053\001" +
    "\001\000\076\003\166\060\161\061\120\062\047\065\125" +
    "\071\015\075\u0262\101\176\102\061\103\162\104\137\112" +
    "\100\122\073\142\122\143\043\144\022\145\133\146\075" +
    "\147\055\150\104\152\066\164\023\202\163\204\112\205" +
    "\006\207\021\212\130\217\105\222\036\232\053\001\001" +
    "\000\076\003\166\060\161\061\120\062\047\065\125\071" +
    "\015\075\u0261\101\176\102\061\103\162\104\137\112\100" +
    "\122\073\142\122\143\043\144\022\145\133\146\075\147" +
    "\055\150\104\152\066\164\023\202\163\204\112\205\006" +
    "\207\021\212\130\217\105\222\036\232\053\001\001\000" +
    "\076\003\166\060\161\061\120\062\047\065\125\071\015" +
    "\075\u0260\101\176\102\061\103\162\104\137\112\100\122" +
    "\073\142\122\143\043\144\022\145\133\146\075\147\055" +
    "\150\104\152\066\164\023\202\163\204\112\205\006\207" +
    "\021\212\130\217\105\222\036\232\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\u0273\062\047\102\061\103\u026d" +
    "\104\137\112\100\143\043\152\u0270\164\u026f\205\006\207" +
    "\021\212\130\222\036\232\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\u028a\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\u019a\102\u0193\103\u0191" +
    "\104\137\112\u0197\152\u0194\207\021\212\130\216\u0279\221" +
    "\u0190\222\u0196\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\044\u0275\045\u0153\054\u0154\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\u0278\001\001\000\002" +
    "\001\001\000\004\064\u027a\001\001\000\002\001\001\000" +
    "\016\102\u0227\104\137\112\u0226\123\u027c\205\u027d\212\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\076\003" +
    "\166\060\161\061\120\062\047\065\125\071\015\075\u027f" +
    "\101\176\102\061\103\162\104\137\112\100\122\073\142" +
    "\122\143\043\144\022\145\133\146\075\147\055\150\104" +
    "\152\066\164\023\202\163\204\112\205\006\207\021\212" +
    "\130\217\105\222\036\232\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\044\u0282\045\u0153\054\u0154\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\044\u0285" +
    "\045\u0153\054\u0154\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\044\u0288\045\u0153\054\u0154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\044" +
    "\u028c\045\u0153\054\u0154\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\102\u0227\104\137\112\u0226\123\u028f\205" +
    "\u0290\212\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\076\003\166\060\161\061\120\062\047\065\125\071" +
    "\015\075\u0292\101\176\102\061\103\162\104\137\112\100" +
    "\122\073\142\122\143\043\144\022\145\133\146\075\147" +
    "\055\150\104\152\066\164\023\202\163\204\112\205\006" +
    "\207\021\212\130\217\105\222\036\232\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\044\u0295\045\u0153" +
    "\054\u0154\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\044\u0298\045\u0153\054\u0154\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\044\u029b\045\u0153\054\u0154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\u02a0\001\001\000\040\003\u0273\062\047\102" +
    "\061\103\u026d\104\137\112\100\143\043\151\u02a3\152\u0270" +
    "\164\u02a4\205\006\207\021\212\130\222\036\232\053\001" +
    "\001\000\076\003\166\060\u02a2\061\120\062\047\065\125" +
    "\071\015\075\u0158\101\176\102\061\103\162\104\137\112" +
    "\100\122\073\142\122\143\043\144\022\145\133\146\075" +
    "\147\055\150\104\152\066\164\u02a1\202\163\204\112\205" +
    "\006\207\021\212\130\217\105\222\036\232\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\076\003\166\060\161\061\120" +
    "\062\047\065\125\071\015\075\u02ad\101\176\102\061\103" +
    "\162\104\137\112\100\122\073\142\122\143\043\144\022" +
    "\145\133\146\075\147\055\150\104\152\066\164\023\202" +
    "\163\204\112\205\006\207\021\212\130\217\105\222\036" +
    "\232\053\001\001\000\002\001\001\000\106\003\166\012" +
    "\u02b0\015\126\060\161\061\120\062\047\065\125\071\015" +
    "\075\016\077\157\100\171\101\176\102\061\103\162\104" +
    "\137\112\100\122\073\142\122\143\043\144\022\145\133" +
    "\146\075\147\055\150\104\152\066\164\023\202\163\204" +
    "\112\205\006\207\021\212\130\217\105\222\036\232\053" +
    "\001\001\000\004\013\u02ba\001\001\000\004\033\u02b1\001" +
    "\001\000\004\035\u02b2\001\001\000\002\001\001\000\106" +
    "\003\166\012\u02b9\015\126\060\161\061\120\062\047\065" +
    "\125\071\015\075\016\077\157\100\171\101\176\102\061" +
    "\103\162\104\137\112\100\122\073\142\122\143\043\144" +
    "\022\145\133\146\075\147\055\150\104\152\066\164\023" +
    "\202\163\204\112\205\006\207\021\212\130\217\105\222" +
    "\036\232\053\001\001\000\002\001\001\000\076\003\166" +
    "\060\161\061\120\062\047\065\125\071\015\075\u02b6\101" +
    "\176\102\061\103\162\104\137\112\100\122\073\142\122" +
    "\143\043\144\022\145\133\146\075\147\055\150\104\152" +
    "\066\164\023\202\163\204\112\205\006\207\021\212\130" +
    "\217\105\222\036\232\053\001\001\000\002\001\001\000" +
    "\106\003\166\012\u02b8\015\126\060\161\061\120\062\047" +
    "\065\125\071\015\075\016\077\157\100\171\101\176\102" +
    "\061\103\162\104\137\112\100\122\073\142\122\143\043" +
    "\144\022\145\133\146\075\147\055\150\104\152\066\164" +
    "\023\202\163\204\112\205\006\207\021\212\130\217\105" +
    "\222\036\232\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\126\003\166\012\u0130\014\u012c\015\126\034\u02bb" +
    "\060\161\061\120\062\047\065\125\071\015\075\016\077" +
    "\157\100\171\101\176\102\061\103\162\104\137\112\100" +
    "\122\073\124\131\142\122\143\043\144\022\145\133\146" +
    "\075\147\055\150\104\152\066\162\u012d\163\u012f\164\023" +
    "\171\153\172\025\173\052\202\163\204\112\205\006\207" +
    "\021\212\130\217\105\222\036\232\053\001\001\000\004" +
    "\036\u02bc\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\076\003\166\060\161\061\120\062\047" +
    "\065\125\071\015\075\u02c0\101\176\102\061\103\162\104" +
    "\137\112\100\122\073\142\122\143\043\144\022\145\133" +
    "\146\075\147\055\150\104\152\066\164\023\202\163\204" +
    "\112\205\006\207\021\212\130\217\105\222\036\232\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u02c3\001\001\000\124\003\166\012\u0130\014\u012c\015\126" +
    "\060\161\061\120\062\047\065\125\071\015\075\016\077" +
    "\157\100\171\101\176\102\061\103\162\104\137\112\100" +
    "\122\073\124\131\142\122\143\043\144\022\145\133\146" +
    "\075\147\055\150\104\152\066\162\u012d\163\u012f\164\023" +
    "\171\153\172\025\173\052\202\163\204\112\205\006\207" +
    "\021\212\130\217\105\222\036\232\053\001\001\000\004" +
    "\013\u02c5\001\001\000\124\003\166\012\u0130\014\u012c\015" +
    "\126\060\161\061\120\062\047\065\125\071\015\075\016" +
    "\077\157\100\171\101\176\102\061\103\162\104\137\112" +
    "\100\122\073\124\131\142\122\143\043\144\022\145\133" +
    "\146\075\147\055\150\104\152\066\162\u012d\163\u012f\164" +
    "\023\171\153\172\025\173\052\202\163\204\112\205\006" +
    "\207\021\212\130\217\105\222\036\232\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\u0273\062\047\102\061\103\u026d\104\137\112\100\113\u02cd" +
    "\114\u02ce\143\043\152\u0270\164\u02cf\205\006\207\021\212" +
    "\130\222\036\232\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\u0273\062\047\102\061\103\u026d\104\137\112\100\113\u02d2" +
    "\114\u02ce\143\043\152\u0270\164\u02cf\205\006\207\021\212" +
    "\130\222\036\232\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\u0273\062\047\102\061\103\u026d\104" +
    "\137\112\100\114\u02d5\143\043\152\u0270\164\u02cf\205\006" +
    "\207\021\212\130\222\036\232\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\076\003\166\060\161\061\120" +
    "\062\047\065\125\071\015\075\u02d8\101\176\102\061\103" +
    "\162\104\137\112\100\122\073\142\122\143\043\144\022" +
    "\145\133\146\075\147\055\150\104\152\066\164\023\202" +
    "\163\204\112\205\006\207\021\212\130\217\105\222\036" +
    "\232\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\u019a\102\u0193\103\u0191\104\137" +
    "\112\u0197\152\u0194\207\021\212\130\216\u02e0\221\u0190\222" +
    "\u0196\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\u02e1\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\003\u0273\062\047" +
    "\102\061\103\u02e5\104\137\112\100\143\043\144\u02e7\145" +
    "\133\146\u02e6\147\055\152\u02e9\164\u02e8\205\006\207\021" +
    "\210\u02eb\211\u02e4\212\130\222\036\232\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\003\u0273" +
    "\062\047\102\061\103\u02e5\104\137\112\100\143\043\144" +
    "\u02e7\145\133\146\u02e6\147\055\152\u02e9\164\u02e8\205\006" +
    "\207\021\211\u02ee\212\130\222\036\232\053\001\001\000" +
    "\002\001\001\000\100\003\166\060\161\061\120\062\047" +
    "\065\125\071\015\075\u0168\101\176\102\061\103\162\104" +
    "\137\105\u02f0\112\100\122\073\142\122\143\043\144\022" +
    "\145\133\146\075\147\055\150\104\152\066\164\023\202" +
    "\163\204\112\205\006\207\021\212\130\217\105\222\036" +
    "\232\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\102\u0227\104\137\112\u0226\123\u027c\145\u02f4\205\u027d" +
    "\212\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\003\166\060\161\061\120\062\047\065\125\071\015" +
    "\075\u0168\101\176\102\061\103\162\104\137\105\u02f6\112" +
    "\100\122\073\142\122\143\043\144\022\145\133\146\075" +
    "\147\055\150\104\152\066\164\023\202\163\204\112\205" +
    "\006\207\021\212\130\217\105\222\036\232\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\100\003\166\060" +
    "\161\061\120\062\047\065\125\071\015\075\u0168\101\176" +
    "\102\061\103\162\104\137\105\u02f9\112\100\122\073\142" +
    "\122\143\043\144\022\145\133\146\075\147\055\150\104" +
    "\152\066\164\023\202\163\204\112\205\006\207\021\212" +
    "\130\217\105\222\036\232\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\102\u0227\104\137\112\u0226\123" +
    "\u028f\145\u02fc\205\u0290\212\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\076\003\166\060" +
    "\161\061\120\062\047\065\125\071\015\075\u0301\101\176" +
    "\102\061\103\162\104\137\112\100\122\073\142\122\143" +
    "\043\144\022\145\133\146\075\147\055\150\104\152\066" +
    "\164\023\202\163\204\112\205\006\207\021\212\130\217" +
    "\105\222\036\232\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\102" +
    "\u0227\104\137\112\u0226\123\u028f\205\u0290\212\130\220\u0305" +
    "\001\001\000\002\001\001\000\002\001\001\000\100\003" +
    "\166\060\161\061\120\062\047\065\125\071\015\075\u0168" +
    "\101\176\102\061\103\162\104\137\105\u0308\112\100\122" +
    "\073\142\122\143\043\144\022\145\133\146\075\147\055" +
    "\150\104\152\066\164\023\202\163\204\112\205\006\207" +
    "\021\212\130\217\105\222\036\232\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\236\065\216\067\u0314\070\231" +
    "\142\233\152\212\225\224\227\213\230\220\231\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\076\003\166\060\161\061\120\062\047\065\125\071" +
    "\015\075\u0318\101\176\102\061\103\162\104\137\112\100" +
    "\122\073\142\122\143\043\144\022\145\133\146\075\147" +
    "\055\150\104\152\066\164\023\202\163\204\112\205\006" +
    "\207\021\212\130\217\105\222\036\232\053\001\001\000" +
    "\002\001\001\000\004\027\u031a\001\001\000\002\001\001" +
    "\000\004\030\u032d\001\001\000\004\030\u031d\001\001\000" +
    "\002\001\001\000\004\030\u031f\001\001\000\002\001\001" +
    "\000\002\001\001\000\076\003\166\060\161\061\120\062" +
    "\047\065\125\071\015\075\u0327\101\176\102\061\103\162" +
    "\104\137\112\100\122\073\142\122\143\043\144\022\145" +
    "\133\146\075\147\055\150\104\152\066\164\023\202\163" +
    "\204\112\205\006\207\021\212\130\217\105\222\036\232" +
    "\053\001\001\000\004\031\u0323\001\001\000\004\013\u0326" +
    "\001\001\000\002\001\001\000\002\001\001\000\124\003" +
    "\166\012\u0130\014\u012c\015\126\060\161\061\120\062\047" +
    "\065\125\071\015\075\016\077\157\100\171\101\176\102" +
    "\061\103\162\104\137\112\100\122\073\124\131\142\122" +
    "\143\043\144\022\145\133\146\075\147\055\150\104\152" +
    "\066\162\u012d\163\u012f\164\023\171\153\172\025\173\052" +
    "\202\163\204\112\205\006\207\021\212\130\217\105\222" +
    "\036\232\053\001\001\000\004\031\u0328\001\001\000\004" +
    "\013\u0329\001\001\000\124\003\166\012\u0130\014\u012c\015" +
    "\126\060\161\061\120\062\047\065\125\071\015\075\016" +
    "\077\157\100\171\101\176\102\061\103\162\104\137\112" +
    "\100\122\073\124\131\142\122\143\043\144\022\145\133" +
    "\146\075\147\055\150\104\152\066\162\u012d\163\u012f\164" +
    "\023\171\153\172\025\173\052\202\163\204\112\205\006" +
    "\207\021\212\130\217\105\222\036\232\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\u032f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\100\003\166\060\161" +
    "\061\120\062\047\065\125\071\015\075\u0168\101\176\102" +
    "\061\103\162\104\137\105\u0333\112\100\122\073\142\122" +
    "\143\043\144\022\145\133\146\075\147\055\150\104\152" +
    "\066\164\023\202\163\204\112\205\006\207\021\212\130" +
    "\217\105\222\036\232\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\076\003\166\060\161\061" +
    "\120\062\047\065\125\071\015\075\u033b\101\176\102\061" +
    "\103\162\104\137\112\100\122\073\142\122\143\043\144" +
    "\022\145\133\146\075\147\055\150\104\152\066\164\023" +
    "\202\163\204\112\205\006\207\021\212\130\217\105\222" +
    "\036\232\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\076\003\166\060\161" +
    "\061\120\062\047\065\125\071\015\075\u0342\101\176\102" +
    "\061\103\162\104\137\112\100\122\073\142\122\143\043" +
    "\144\022\145\133\146\075\147\055\150\104\152\066\164" +
    "\023\202\163\204\112\205\006\207\021\212\130\217\105" +
    "\222\036\232\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\135\u0347" +
    "\001\001\000\016\136\u034a\156\u034d\203\u034b\213\u01b6\214" +
    "\u01b8\215\u01b3\001\001\000\010\003\u01d3\126\u0358\141\u01d2" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\154" +
    "\u0356\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\u034f\001\001\000\004\123\u0350\001\001\000\002\001" +
    "\001\000\020\003\u011c\037\u0352\042\u011e\043\u0121\153\u0120" +
    "\177\u011d\200\u0123\001\001\000\002\001\001\000\004\201" +
    "\u0354\001\001\000\004\157\u0355\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\127\u0359\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\125\u035f\001" +
    "\001\000\002\001\001\000\010\003\u011c\153\u01ac\176\u0361" +
    "\001\001\000\002\001\001\000\004\137\u0363\001\001\000" +
    "\016\140\u0366\155\u0365\156\u036a\213\u0368\214\u0364\215\u01b3" +
    "\001\001\000\006\213\u0375\215\u01fc\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\214\u0373" +
    "\215\u01ff\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\u036c\001\001\000\004\123\u036d\001\001\000\002" +
    "\001\001\000\020\003\u011c\037\u036f\042\u011e\043\u0121\153" +
    "\u0120\177\u011d\200\u0123\001\001\000\002\001\001\000\004" +
    "\201\u0371\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\215\u0201\001\001\000\002\001\001\000\004\215\u01fe" +
    "\001\001\000\006\120\u0378\212\u0377\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\u0273\062\047\102\061" +
    "\103\u026d\104\137\112\100\143\043\152\u0270\164\u0384\205" +
    "\006\207\021\212\130\222\036\232\053\001\001\000\002" +
    "\001\001\000\076\003\166\060\161\061\120\062\047\065" +
    "\125\071\015\075\u037d\101\176\102\061\103\162\104\137" +
    "\112\100\122\073\142\122\143\043\144\022\145\133\146" +
    "\075\147\055\150\104\152\066\164\023\202\163\204\112" +
    "\205\006\207\021\212\130\217\105\222\036\232\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\076\003\166\060\161\061\120\062\047\065\125\071" +
    "\015\075\u0380\101\176\102\061\103\162\104\137\112\100" +
    "\122\073\142\122\143\043\144\022\145\133\146\075\147" +
    "\055\150\104\152\066\164\023\202\163\204\112\205\006" +
    "\207\021\212\130\217\105\222\036\232\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\121" +
    "\u038a\123\u038b\212\u0389\001\001\000\004\123\u0388\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\123\u038f\001\001\000\002\001\001\000\020\003\u011c\037" +
    "\u0391\042\u011e\043\u0121\153\u0120\177\u011d\200\u0123\001\001" +
    "\000\002\001\001\000\004\201\u0393\001\001\000\002\001" +
    "\001\000\004\013\u0395\001\001\000\124\003\166\012\u0130" +
    "\014\u012c\015\126\060\161\061\120\062\047\065\125\071" +
    "\015\075\016\077\157\100\171\101\176\102\061\103\162" +
    "\104\137\112\100\122\073\124\131\142\122\143\043\144" +
    "\022\145\133\146\075\147\055\150\104\152\066\162\u012d" +
    "\163\u012f\164\023\171\153\172\025\173\052\202\163\204" +
    "\112\205\006\207\021\212\130\217\105\222\036\232\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\076\003\166\060\u039c\061\120" +
    "\062\047\065\125\071\015\075\u0158\101\176\102\061\103" +
    "\162\104\137\112\100\122\073\142\122\143\043\144\022" +
    "\145\133\146\075\147\055\150\104\152\066\164\u039b\202" +
    "\163\204\112\205\006\207\021\212\130\217\105\222\036" +
    "\232\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\u0273\022\u039e\062\047\102\061\103\u026d\104\137" +
    "\112\100\143\043\152\u0270\164\u039f\205\006\207\021\212" +
    "\130\222\036\232\053\001\001\000\004\021\u03a6\001\001" +
    "\000\002\001\001\000\036\003\u0273\062\047\102\061\103" +
    "\u026d\104\137\112\100\143\043\152\u0270\164\u03a5\205\006" +
    "\207\021\212\130\222\036\232\053\001\001\000\002\001" +
    "\001\000\042\003\u0273\062\047\102\061\103\u026d\104\137" +
    "\112\100\113\u03a3\114\u02ce\143\043\152\u0270\164\u02cf\205" +
    "\006\207\021\212\130\222\036\232\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\u0273\022\u03a8\062\047\102\061\103\u026d" +
    "\104\137\112\100\143\043\152\u0270\164\u039f\205\006\207" +
    "\021\212\130\222\036\232\053\001\001\000\002\001\001" +
    "\000\110\003\166\012\u03ab\015\126\024\u03ac\060\161\061" +
    "\120\062\047\065\125\071\015\075\016\077\157\100\171" +
    "\101\176\102\061\103\162\104\137\112\100\122\073\142" +
    "\122\143\043\144\022\145\133\146\075\147\055\150\104" +
    "\152\066\164\023\202\163\204\112\205\006\207\021\212" +
    "\130\217\105\222\036\232\053\001\001\000\004\013\u03ad" +
    "\001\001\000\002\001\001\000\002\001\001\000\124\003" +
    "\166\012\u0130\014\u012c\015\126\060\161\061\120\062\047" +
    "\065\125\071\015\075\016\077\157\100\171\101\176\102" +
    "\061\103\162\104\137\112\100\122\073\124\131\142\122" +
    "\143\043\144\022\145\133\146\075\147\055\150\104\152" +
    "\066\162\u012d\163\u012f\164\023\171\153\172\025\173\052" +
    "\202\163\204\112\205\006\207\021\212\130\217\105\222" +
    "\036\232\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\u0273\022\u03b1\062\047\102\061\103\u026d\104" +
    "\137\112\100\143\043\152\u0270\164\u039f\205\006\207\021" +
    "\212\130\222\036\232\053\001\001\000\004\021\u03b2\001" +
    "\001\000\002\001\001\000\110\003\166\012\u03ab\015\126" +
    "\024\u03b4\060\161\061\120\062\047\065\125\071\015\075" +
    "\016\077\157\100\171\101\176\102\061\103\162\104\137" +
    "\112\100\122\073\142\122\143\043\144\022\145\133\146" +
    "\075\147\055\150\104\152\066\164\023\202\163\204\112" +
    "\205\006\207\021\212\130\217\105\222\036\232\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\u03bd\001\001\000\002\001\001\000\004\010" +
    "\u03bb\001\001\000\002\001\001\000\126\003\166\011\200" +
    "\012\170\015\126\060\161\061\120\062\047\065\125\071" +
    "\015\075\016\077\157\100\171\101\176\102\061\103\162" +
    "\104\137\112\100\122\073\124\131\142\122\143\043\144" +
    "\022\145\133\146\075\147\055\150\104\152\066\155\132" +
    "\162\115\163\143\164\023\171\153\172\025\173\052\202" +
    "\163\204\112\205\006\207\021\212\130\217\105\222\036" +
    "\232\053\001\001\000\002\001\001\000\126\003\166\011" +
    "\200\012\170\015\126\060\161\061\120\062\047\065\125" +
    "\071\015\075\016\077\157\100\171\101\176\102\061\103" +
    "\162\104\137\112\100\122\073\124\131\142\122\143\043" +
    "\144\022\145\133\146\075\147\055\150\104\152\066\155" +
    "\132\162\115\163\143\164\023\171\153\172\025\173\052" +
    "\202\163\204\112\205\006\207\021\212\130\217\105\222" +
    "\036\232\053\001\001\000\002\001\001\000\042\003\u0273" +
    "\016\u03c2\017\u03c0\062\047\102\061\103\u026d\104\137\112" +
    "\100\143\043\152\u0270\164\u03c1\205\006\207\021\212\130" +
    "\222\036\232\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\u0273" +
    "\017\u03c5\062\047\102\061\103\u026d\104\137\112\100\143" +
    "\043\152\u0270\164\u03c1\205\006\207\021\212\130\222\036" +
    "\232\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\u03c8\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\124\003\166\012\u0130\014\u012c\015\126\060" +
    "\161\061\120\062\047\065\125\071\015\075\016\077\157" +
    "\100\171\101\176\102\061\103\162\104\137\112\100\122" +
    "\073\124\131\142\122\143\043\144\022\145\133\146\075" +
    "\147\055\150\104\152\066\162\u012d\163\u012f\164\023\171" +
    "\153\172\025\173\052\202\163\204\112\205\006\207\021" +
    "\212\130\217\105\222\036\232\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\102\u0227" +
    "\104\137\112\u0226\123\u027c\205\u027d\212\130\220\u03d6\001" +
    "\001\000\002\001\001\000\006\120\u0378\212\u0377\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\u0273\062\047" +
    "\102\061\103\u026d\104\137\112\100\143\043\151\u03ef\152" +
    "\u0270\164\u02a4\205\006\207\021\212\130\222\036\232\053" +
    "\001\001\000\002\001\001\000\004\073\u03e3\001\001\000" +
    "\002\001\001\000\002\001\001\000\076\003\166\060\161" +
    "\061\120\062\047\065\125\071\015\075\u03e5\101\176\102" +
    "\061\103\162\104\137\112\100\122\073\142\122\143\043" +
    "\144\022\145\133\146\075\147\055\150\104\152\066\164" +
    "\023\202\163\204\112\205\006\207\021\212\130\217\105" +
    "\222\036\232\053\001\001\000\002\001\001\000\040\003" +
    "\u0273\062\047\102\061\103\u026d\104\137\112\100\143\043" +
    "\151\u03ea\152\u0270\164\u02a4\205\006\207\021\212\130\222" +
    "\036\232\053\001\001\000\002\001\001\000\076\003\166" +
    "\060\161\061\120\062\047\065\125\071\015\075\u03e8\101" +
    "\176\102\061\103\162\104\137\112\100\122\073\142\122" +
    "\143\043\144\022\145\133\146\075\147\055\150\104\152" +
    "\066\164\023\202\163\204\112\205\006\207\021\212\130" +
    "\217\105\222\036\232\053\001\001\000\040\003\u0273\062" +
    "\047\102\061\103\u026d\104\137\112\100\143\043\151\u03e9" +
    "\152\u0270\164\u02a4\205\006\207\021\212\130\222\036\232" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\076\003\166\060\161\061\120\062\047\065" +
    "\125\071\015\075\u03ed\101\176\102\061\103\162\104\137" +
    "\112\100\122\073\142\122\143\043\144\022\145\133\146" +
    "\075\147\055\150\104\152\066\164\023\202\163\204\112" +
    "\205\006\207\021\212\130\217\105\222\036\232\053\001" +
    "\001\000\040\003\u0273\062\047\102\061\103\u026d\104\137" +
    "\112\100\143\043\151\u03ee\152\u0270\164\u02a4\205\006\207" +
    "\021\212\130\222\036\232\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\100\003\166\060" +
    "\161\061\120\062\047\065\125\071\015\075\u0168\101\176" +
    "\102\061\103\162\104\137\105\u03f1\112\100\122\073\142" +
    "\122\143\043\144\022\145\133\146\075\147\055\150\104" +
    "\152\066\164\023\202\163\204\112\205\006\207\021\212" +
    "\130\217\105\222\036\232\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\076\003\166\060\161\061\120\062" +
    "\047\065\125\071\015\075\u03f4\101\176\102\061\103\162" +
    "\104\137\112\100\122\073\142\122\143\043\144\022\145" +
    "\133\146\075\147\055\150\104\152\066\164\023\202\163" +
    "\204\112\205\006\207\021\212\130\217\105\222\036\232" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\102\u0227\104\137\107\u03f7\110\u0225\111\u0222\112\u0226\123" +
    "\u0221\205\u0223\212\130\001\001\000\004\160\u03f8\001\001" +
    "\000\004\106\u03fd\001\001\000\010\044\u03fa\045\u0153\054" +
    "\u0154\001\001\000\002\001\001\000\002\001\001\000\100" +
    "\003\166\060\161\061\120\062\047\065\125\071\015\075" +
    "\u0168\101\176\102\061\103\162\104\137\105\u040b\112\100" +
    "\122\073\142\122\143\043\144\022\145\133\146\075\147" +
    "\055\150\104\152\066\164\023\202\163\204\112\205\006" +
    "\207\021\212\130\217\105\222\036\232\053\001\001\000" +
    "\004\161\u03ff\001\001\000\100\003\166\060\161\061\120" +
    "\062\047\065\125\071\015\075\u0168\101\176\102\061\103" +
    "\162\104\137\105\u0409\112\100\122\073\142\122\143\043" +
    "\144\022\145\133\146\075\147\055\150\104\152\066\164" +
    "\023\202\163\204\112\205\006\207\021\212\130\217\105" +
    "\222\036\232\053\001\001\000\004\206\u0400\001\001\000" +
    "\002\001\001\000\024\102\u0227\104\137\107\u0406\110\u0225" +
    "\111\u0222\112\u0226\123\u0221\205\u0223\212\130\001\001\000" +
    "\024\102\u0227\104\137\107\u0403\110\u0225\111\u0222\112\u0226" +
    "\123\u0221\205\u0223\212\130\001\001\000\004\160\u0404\001" +
    "\001\000\004\106\u0405\001\001\000\002\001\001\000\004" +
    "\160\u0407\001\001\000\004\106\u0408\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\174\u040e\001\001\000\004\175" +
    "\u040f\001\001\000\002\001\001\000\004\051\u0411\001\001" +
    "\000\020\052\u01b7\155\u01c0\156\u01b1\203\u01bf\213\u01b6\214" +
    "\u01b8\215\u01b3\001\001\000\002\001\001\000\010\044\u041c" +
    "\045\u0153\054\u0154\001\001\000\100\003\166\060\161\061" +
    "\120\062\047\065\125\071\015\075\u0168\101\176\102\061" +
    "\103\162\104\137\105\u041a\112\100\122\073\142\122\143" +
    "\043\144\022\145\133\146\075\147\055\150\104\152\066" +
    "\164\023\202\163\204\112\205\006\207\021\212\130\217" +
    "\105\222\036\232\053\001\001\000\024\102\u0227\104\137" +
    "\107\u0416\110\u0225\111\u0222\112\u0226\123\u0221\205\u0223\212" +
    "\130\001\001\000\004\160\u0417\001\001\000\004\106\u0418" +
    "\001\001\000\004\161\u0419\001\001\000\004\206\u0400\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\076\003\166\060\161\061\120\062" +
    "\047\065\125\071\015\075\u041f\101\176\102\061\103\162" +
    "\104\137\112\100\122\073\142\122\143\043\144\022\145" +
    "\133\146\075\147\055\150\104\152\066\164\023\202\163" +
    "\204\112\205\006\207\021\212\130\217\105\222\036\232" +
    "\053\001\001\000\002\001\001\000\110\003\166\012\u0423" +
    "\015\126\032\u0422\060\161\061\120\062\047\065\125\071" +
    "\015\075\016\077\157\100\171\101\176\102\061\103\162" +
    "\104\137\112\100\122\073\142\122\143\043\144\022\145" +
    "\133\146\075\147\055\150\104\152\066\164\023\202\163" +
    "\204\112\205\006\207\021\212\130\217\105\222\036\232" +
    "\053\001\001\000\004\013\u0424\001\001\000\002\001\001" +
    "\000\002\001\001\000\124\003\166\012\u0130\014\u012c\015" +
    "\126\060\161\061\120\062\047\065\125\071\015\075\016" +
    "\077\157\100\171\101\176\102\061\103\162\104\137\112" +
    "\100\122\073\124\131\142\122\143\043\144\022\145\133" +
    "\146\075\147\055\150\104\152\066\162\u012d\163\u012f\164" +
    "\023\171\153\172\025\173\052\202\163\204\112\205\006" +
    "\207\021\212\130\217\105\222\036\232\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\236\065\216\066\u042d\067\214\070\231" +
    "\142\233\152\212\225\224\227\213\230\220\231\235\001" +
    "\001\000\002\001\001\000\030\003\236\065\216\066\u042f" +
    "\067\214\070\231\142\233\152\212\225\224\227\213\230" +
    "\220\231\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0433\001\001\000\124\003" +
    "\166\012\u0130\014\u012c\015\126\060\161\061\120\062\047" +
    "\065\125\071\015\075\016\077\157\100\171\101\176\102" +
    "\061\103\162\104\137\112\100\122\073\124\131\142\122" +
    "\143\043\144\022\145\133\146\075\147\055\150\104\152" +
    "\066\162\u012d\163\u012f\164\023\171\153\172\025\173\052" +
    "\202\163\204\112\205\006\207\021\212\130\217\105\222" +
    "\036\232\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0438\001\001\000\124\003" +
    "\166\012\u0130\014\u012c\015\126\060\161\061\120\062\047" +
    "\065\125\071\015\075\016\077\157\100\171\101\176\102" +
    "\061\103\162\104\137\112\100\122\073\124\131\142\122" +
    "\143\043\144\022\145\133\146\075\147\055\150\104\152" +
    "\066\162\u012d\163\u012f\164\023\171\153\172\025\173\052" +
    "\202\163\204\112\205\006\207\021\212\130\217\105\222" +
    "\036\232\053\001\001\000\002\001\001\000\006\003\u011c" +
    "\153\u043b\001\001\000\004\212\u043c\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u043f\001\001\000\124" +
    "\003\166\012\u0130\014\u012c\015\126\060\161\061\120\062" +
    "\047\065\125\071\015\075\016\077\157\100\171\101\176" +
    "\102\061\103\162\104\137\112\100\122\073\124\131\142" +
    "\122\143\043\144\022\145\133\146\075\147\055\150\104" +
    "\152\066\162\u012d\163\u012f\164\023\171\153\172\025\173" +
    "\052\202\163\204\112\205\006\207\021\212\130\217\105" +
    "\222\036\232\053\001\001\000\010\165\u0442\166\u0444\167" +
    "\u0443\001\001\000\002\001\001\000\004\170\u0447\001\001" +
    "\000\002\001\001\000\004\167\u0445\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0449" +
    "\001\001\000\124\003\166\012\u0130\014\u012c\015\126\060" +
    "\161\061\120\062\047\065\125\071\015\075\016\077\157" +
    "\100\171\101\176\102\061\103\162\104\137\112\100\122" +
    "\073\124\131\142\122\143\043\144\022\145\133\146\075" +
    "\147\055\150\104\152\066\162\u012d\163\u012f\164\023\171" +
    "\153\172\025\173\052\202\163\204\112\205\006\207\021" +
    "\212\130\217\105\222\036\232\053\001\001\000\002\001" +
    "\001\000\006\003\u011c\153\u044c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u0450\001" +
    "\001\000\124\003\166\012\u0130\014\u012c\015\126\060\161" +
    "\061\120\062\047\065\125\071\015\075\016\077\157\100" +
    "\171\101\176\102\061\103\162\104\137\112\100\122\073" +
    "\124\131\142\122\143\043\144\022\145\133\146\075\147" +
    "\055\150\104\152\066\162\u012d\163\u012f\164\023\171\153" +
    "\172\025\173\052\202\163\204\112\205\006\207\021\212" +
    "\130\217\105\222\036\232\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\120\u0378\212" +
    "\u0377\001\001\000\002\001\001\000\002\001\001\000\102" +
    "\003\166\056\u0459\057\u045a\060\161\061\120\062\047\065" +
    "\125\071\015\075\u0458\101\176\102\061\103\162\104\137" +
    "\112\100\122\073\142\122\143\043\144\022\145\133\146" +
    "\075\147\055\150\104\152\066\164\023\202\163\204\112" +
    "\205\006\207\021\212\130\217\105\222\036\232\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\076\003\166\060\161\061\120\062\047\065\125\071" +
    "\015\075\u045c\101\176\102\061\103\162\104\137\112\100" +
    "\122\073\142\122\143\043\144\022\145\133\146\075\147" +
    "\055\150\104\152\066\164\023\202\163\204\112\205\006" +
    "\207\021\212\130\217\105\222\036\232\053\001\001\000" +
    "\002\001\001\000\102\003\166\056\u045e\057\u045a\060\161" +
    "\061\120\062\047\065\125\071\015\075\u0458\101\176\102" +
    "\061\103\162\104\137\112\100\122\073\142\122\143\043" +
    "\144\022\145\133\146\075\147\055\150\104\152\066\164" +
    "\023\202\163\204\112\205\006\207\021\212\130\217\105" +
    "\222\036\232\053\001\001\000\002\001\001\000\102\003" +
    "\166\056\u0460\057\u045a\060\161\061\120\062\047\065\125" +
    "\071\015\075\u0458\101\176\102\061\103\162\104\137\112" +
    "\100\122\073\142\122\143\043\144\022\145\133\146\075" +
    "\147\055\150\104\152\066\164\023\202\163\204\112\205" +
    "\006\207\021\212\130\217\105\222\036\232\053\001\001" +
    "\000\002\001\001\000\110\003\166\012\u0464\015\126\023" +
    "\u0462\060\161\061\120\062\047\065\125\071\015\075\016" +
    "\077\157\100\171\101\176\102\061\103\162\104\137\112" +
    "\100\122\073\142\122\143\043\144\022\145\133\146\075" +
    "\147\055\150\104\152\066\164\023\202\163\204\112\205" +
    "\006\207\021\212\130\217\105\222\036\232\053\001\001" +
    "\000\002\001\001\000\004\013\u0465\001\001\000\002\001" +
    "\001\000\124\003\166\012\u0130\014\u012c\015\126\060\161" +
    "\061\120\062\047\065\125\071\015\075\016\077\157\100" +
    "\171\101\176\102\061\103\162\104\137\112\100\122\073" +
    "\124\131\142\122\143\043\144\022\145\133\146\075\147" +
    "\055\150\104\152\066\162\u012d\163\u012f\164\023\171\153" +
    "\172\025\173\052\202\163\204\112\205\006\207\021\212" +
    "\130\217\105\222\036\232\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\076\003\166\060\u046a\061\120\062" +
    "\047\065\125\071\015\075\u0158\101\176\102\061\103\162" +
    "\104\137\112\100\122\073\142\122\143\043\144\022\145" +
    "\133\146\075\147\055\150\104\152\066\164\u0469\202\163" +
    "\204\112\205\006\207\021\212\130\217\105\222\036\232" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\u046f\006\u0471\007\u048f" +
    "\001\001\000\002\001\001\000\004\003\u047a\001\001\000" +
    "\010\003\u046f\006\u0471\007\u0478\001\001\000\002\001\001" +
    "\000\006\003\u046f\006\u0477\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\u0483\004\u0482\005\u047f\001\001\000\002" +
    "\001\001\000\004\003\u048c\001\001\000\004\003\u0489\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\u0483\005" +
    "\u0488\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\u0483\004\u0495\005\u047f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\102\003\166\060\161\061\120\062\047" +
    "\065\125\071\015\075\u03de\101\176\102\061\103\162\104" +
    "\137\112\100\115\u049b\116\u03df\122\073\142\122\143\043" +
    "\144\022\145\133\146\075\147\055\150\104\152\066\164" +
    "\023\202\163\204\112\205\006\207\021\212\130\217\105" +
    "\222\036\232\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\076\003\166\060\u04a2\061\120\062\047\065\125\071" +
    "\015\075\u0158\101\176\102\061\103\162\104\137\112\100" +
    "\122\073\142\122\143\043\144\022\145\133\146\075\147" +
    "\055\150\104\152\066\164\u04a1\202\163\204\112\205\006" +
    "\207\021\212\130\217\105\222\036\232\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\u0273\062\047\102\061\103\u026d\104" +
    "\137\112\100\143\043\152\u0270\164\u04a8\202\u04a7\205\006" +
    "\207\021\212\130\222\036\232\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\076\003\166" +
    "\060\161\061\120\062\047\065\125\071\015\075\u04aa\101" +
    "\176\102\061\103\162\104\137\112\100\122\073\142\122" +
    "\143\043\144\022\145\133\146\075\147\055\150\104\152" +
    "\066\164\023\202\163\204\112\205\006\207\021\212\130" +
    "\217\105\222\036\232\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\u04ae\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\044\u04b0\045\u0153\054\u0154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ASTPHP5Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ASTPHP5Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ASTPHP5Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private static short[][] getActionTable() {
return unpackFromStrings(new String[]{
new EncodedActionTable1().getTableData(),
new EncodedActionTable2().getTableData(),
new EncodedActionTable3().getTableData(),
new EncodedActionTable4().getTableData(),
new EncodedActionTable5().getTableData(),
new EncodedActionTable6().getTableData(),
new EncodedActionTable7().getTableData(),
new EncodedActionTable8().getTableData(),
new EncodedActionTable9().getTableData()
});
}


	protected final static Integer PUBLIC = Integer.valueOf(BodyDeclaration.Modifier.PUBLIC);
	protected final static Integer PRIVATE = Integer.valueOf(BodyDeclaration.Modifier.PRIVATE);
	protected final static Integer PROTECTED = Integer.valueOf(BodyDeclaration.Modifier.PROTECTED);
	protected final static Integer ABSTRACT = Integer.valueOf(BodyDeclaration.Modifier.ABSTRACT);
	protected final static Integer FINAL = Integer.valueOf(BodyDeclaration.Modifier.FINAL);
	protected final static Integer STATIC = Integer.valueOf(BodyDeclaration.Modifier.STATIC);

    private ErrorStrategy defaultStrategy = new DefaultErrorStrategy();;
    private ErrorStrategy errorStrategy = defaultStrategy;

    private ParserErrorHandler errorHandler = null;
    private String fileName = null;
    private int anonymousClassCounter = 0;


    public void setErrorHandler (ParserErrorHandler handler) {
        this.errorHandler = handler;
    }

    public ParserErrorHandler getErrorHandler () {
        return this.errorHandler;
    }

    public String getFileName() {
        return fileName;
    }

    public void setFileName(String fileName) {
        assert fileName != null;
        this.fileName = fileName;
    }

    public int incrementAndGetAnonymousClassCounter() {
        anonymousClassCounter++;
        return anonymousClassCounter;
    }

	public VariableBase createDispatch(VariableBase dispatcher, Pair<VariableBase, Boolean> pair, List dimensions) {
		VariableBase dispatch = null;
		VariableBase property = pair.first();
        boolean isStatic = pair.second();
        if (property instanceof DereferencedArrayAccess) {
            DereferencedArrayAccess arrayAccess = (DereferencedArrayAccess) property;
            dimensions = new LinkedList();
            dimensions.add(arrayAccess.getDimension());
            while (arrayAccess.getDispatcher() instanceof DereferencedArrayAccess) {
                arrayAccess = (DereferencedArrayAccess) arrayAccess.getDispatcher();
                ((LinkedList) dimensions).addFirst(arrayAccess.getDimension());
            }
            property = arrayAccess.getDispatcher();
        }
        if (property instanceof Variable) {
            if (isStatic) {
                Variable variable = (Variable) property;
                if (variable.isDollared()) {
                    dispatch = new StaticFieldAccess(dispatcher.getStartOffset(), property.getEndOffset(), dispatcher, (Variable) property);
                } else {
                    Expression varName = variable.getName();
                    // it should always be identifier
                    String name = varName instanceof Identifier ? ((Identifier) varName).getName() : "";
                    dispatch = new StaticConstantAccess(dispatcher.getStartOffset(), property.getEndOffset(), dispatcher,
                            new Identifier(variable.getStartOffset(), variable.getEndOffset(), name));
                }
            } else {
                dispatch = new FieldAccess(dispatcher.getStartOffset(), property.getEndOffset(), dispatcher, (Variable)property);
            }
		} else if (property instanceof FunctionInvocation) {
            if (isStatic) {
                dispatch = new StaticMethodInvocation(dispatcher.getStartOffset(), property.getEndOffset(), dispatcher, (FunctionInvocation)property);
            } else {
                dispatch = new MethodInvocation(dispatcher.getStartOffset(), property.getEndOffset(), dispatcher, (FunctionInvocation)property);
            }
		} else {
			throw new IllegalArgumentException("Unexpected class: " + property.getClass().getName());
		}
        if (dimensions != null) {
            for (Object i : dimensions) {
                ArrayDimension index = (ArrayDimension) i;
                dispatch = new DereferencedArrayAccess(dispatch.getStartOffset(), index.getEndOffset(), dispatch, index);
            }
        }
		return dispatch;
	}

	public VariableBase createDispatch(VariableBase dispatcher, VariableBase property, List dimensions) {
		return createDispatch(dispatcher, Pair.of(property, false), null);
    }

    public VariableBase createDispatch(VariableBase dispatcher, VariableBase property) {
		return createDispatch(dispatcher, property, null);
	}

    public VariableBase createDispatch(boolean isStatic, VariableBase var, VariableBase memberProperty, int memberPropertyleft, int memberPropertyright,
            List<Expression> paramsList, int paramsListright, List propertyList, List aa) {
        VariableBase firstVarProperty = null;
        if (paramsList == null) {
            firstVarProperty = memberProperty;
        } else {
            FunctionName functionName = new FunctionName(memberPropertyleft, memberPropertyright, memberProperty);
            firstVarProperty = new FunctionInvocation(memberPropertyleft, paramsListright, functionName, paramsList);
        }

        // then get the aggregated list of properties ([->|::]...[->|::]...[->|::]...)
        LinkedList list = (LinkedList) propertyList;
        list.addFirst(Pair.of(firstVarProperty, isStatic));

        // now create the dispatch(es) nodes
        VariableBase dispatch = null;
        VariableBase dispatcher = var;
        List arrayDimensiones = aa;
        Iterator listIt = list.iterator();
        while (listIt.hasNext()) {
            Pair<VariableBase, Boolean> property = (Pair<VariableBase, Boolean>) listIt.next();
            dispatch = createDispatch(dispatcher, property, arrayDimensiones);
            dispatcher = dispatch;
            arrayDimensiones = new LinkedList();
        }
        return dispatch;
    }

    public Pair<VariableBase, Boolean> createDispatchProperty(boolean isStatic, VariableBase memberProperty, int memberPropertyleft, int memberPropertyright,
            List<Expression> paramsList, int paramsListright, List aa) {
        VariableBase result = null;
        if (paramsList == null) {
            result = memberProperty;
        } else {
            FunctionName functionName = new FunctionName(memberPropertyleft, memberPropertyright, memberProperty);
            result = new FunctionInvocation(memberPropertyleft, paramsListright, functionName, paramsList);
        }
        for (Object i : aa) {
            ArrayDimension index = (ArrayDimension) i;
            result = new DereferencedArrayAccess(result.getStartOffset(), index.getEndOffset(), result, index);
        }
        return Pair.of(result, isStatic);
    }

    interface ErrorStrategy {
        public boolean errorRecovery(boolean debug) throws Exception;
    }

    class DefaultErrorStrategy implements ErrorStrategy {

        public boolean errorRecovery(boolean debug) throws Exception {
            return ASTPHP5Parser.super.error_recovery(debug);
        }
    }

    /**
     * Attempt to recover from a syntax error.  This returns false if recovery fails,
     * true if it succeeds.
     * @param debug should we produce debugging messages as we parse.
     */
    protected boolean error_recovery(boolean debug) throws java.lang.Exception {
        return errorStrategy.errorRecovery(debug);
    }

    /**
     * Report a non fatal error (or warning).  This method takes a message
     * string and an additional object (to be used by specializations implemented in subclasses).
     * The super class prints the message to System.err.
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info) {
		 System.out.print("report_eror"  + message);
    }

    /**
     * This method is called when a syntax error has been detected and recovery is about to be invoked.
     * The super class just emit a "Syntax error" error message.
     * @param cur_token the current lookahead Symbol.
     */
    public void syntax_error(java_cup.runtime.Symbol cur_token) {
        java_cup.runtime.Symbol symbol = (java_cup.runtime.Symbol)stack.peek();
        int state = symbol.parse_state;
        short[] rowOfProbe = action_tab[state];
        if (errorHandler != null) {
            errorHandler.handleError(ParserErrorHandler.Type.SYNTAX_ERROR, rowOfProbe, cur_token, symbol);
        }
     }

     /**
     * Report a fatal error.  This method takes a message string and an additional object
     * (to be used by specializations implemented in subclasses).
     * The super class reports the error then throws an exception.
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */

    public void report_fatal_error(String message, Object info) throws Exception {
        if (errorHandler != null) {
            errorHandler.handleError(ParserErrorHandler.Type.FATAL_PARSER_ERROR, null, cur_token, null);
        }
    }

    protected int error_sync_size() {
        return 1;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ASTPHP5Parser$actions {
  private final ASTPHP5Parser parser;

  /** Constructor */
  CUP$ASTPHP5Parser$actions(ASTPHP5Parser parser) {
    this.parser = parser;
  }

public final java_cup.runtime.Symbol CUP$ASTPHP5Parser$do_action(
int                        CUP$ASTPHP5Parser$act_num,
java_cup.runtime.lr_parser CUP$ASTPHP5Parser$parser,
java.util.Stack            CUP$ASTPHP5Parser$stack,
int                        CUP$ASTPHP5Parser$top)
throws java.lang.Exception
{
if (CUP$ASTPHP5Parser$act_num < 100) {
    return fakeMethod0to99(CUP$ASTPHP5Parser$act_num, CUP$ASTPHP5Parser$parser, CUP$ASTPHP5Parser$stack, CUP$ASTPHP5Parser$top);
}
else if (CUP$ASTPHP5Parser$act_num < 200) {
    return fakeMethod100to199(CUP$ASTPHP5Parser$act_num, CUP$ASTPHP5Parser$parser, CUP$ASTPHP5Parser$stack, CUP$ASTPHP5Parser$top);
}
else if (CUP$ASTPHP5Parser$act_num < 300) {
    return fakeMethod200to299(CUP$ASTPHP5Parser$act_num, CUP$ASTPHP5Parser$parser, CUP$ASTPHP5Parser$stack, CUP$ASTPHP5Parser$top);
}
else if (CUP$ASTPHP5Parser$act_num < 400) {
    return fakeMethod300to399(CUP$ASTPHP5Parser$act_num, CUP$ASTPHP5Parser$parser, CUP$ASTPHP5Parser$stack, CUP$ASTPHP5Parser$top);
}
else if (CUP$ASTPHP5Parser$act_num < 500) {
    return fakeMethod400to499(CUP$ASTPHP5Parser$act_num, CUP$ASTPHP5Parser$parser, CUP$ASTPHP5Parser$stack, CUP$ASTPHP5Parser$top);
}
else if (CUP$ASTPHP5Parser$act_num < 600) {
    return fakeMethod500to599(CUP$ASTPHP5Parser$act_num, CUP$ASTPHP5Parser$parser, CUP$ASTPHP5Parser$stack, CUP$ASTPHP5Parser$top);
}
throw new Exception("Invalid action number found in internal parse table");
}
public final java_cup.runtime.Symbol fakeMethod0to99(
int                        CUP$ASTPHP5Parser$act_num,
java_cup.runtime.lr_parser CUP$ASTPHP5Parser$parser,
java.util.Stack            CUP$ASTPHP5Parser$stack,
int                        CUP$ASTPHP5Parser$top)
throws java.lang.Exception
{
java_cup.runtime.Symbol CUP$ASTPHP5Parser$result;
switch (CUP$ASTPHP5Parser$act_num) {
          case 0: // thestart ::= top_statement_list
            {
              Program RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ASTPHP5Scanner phpAstLexer5 = (ASTPHP5Scanner) parser.getScanner();
	List commentList = phpAstLexer5.getCommentList();
    int endOfProgram = statementListright > phpAstLexer5.getWhitespaceEndPosition() || phpAstLexer5.isEndedPhp() ? statementListright : phpAstLexer5.getWhitespaceEndPosition();
	Program program = new Program(statementListleft, endOfProgram, statementList, commentList);
	RESULT = program;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("thestart",0, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /* . . . . . .*/
          case 1: // $START ::= thestart EOF
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		RESULT = start_val;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ASTPHP5Parser$parser.done_parsing();
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // namespace_name ::= T_STRING
            {
              List RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	list.add(new Identifier(nleft, nright, n));
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("namespace_name",1, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // namespace_name ::= T_DEFINE
            {
              List RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	list.add(new Identifier(nleft, nright, "define"));
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("namespace_name",1, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // namespace_name ::= namespace_name T_NS_SEPARATOR T_STRING
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	list.add(new Identifier(nleft, nright, n));
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("namespace_name",1, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // top_statement_list ::= top_statement_list top_statement
            {
              List RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	if(statement != null) {
		if (!(statement instanceof NamespaceDeclaration) && sList.size() > 0) {
			Statement lastStatement = (Statement) ((LinkedList) sList).getLast();
			if (lastStatement instanceof NamespaceDeclaration) {
                                NamespaceDeclaration namespaceDeclaration = (NamespaceDeclaration) lastStatement;
                                // there should be NO statement outside bracketed namespaces - it's PHP FATAL ERROR
                                // (that statement doesn't belong to last bracketed namespace)
                                if (!namespaceDeclaration.isBracketed()) {
                                    namespaceDeclaration.addStatement(statement);
                                }
			} else {
				sList.add(statement);
			}
		} else {
			sList.add(statement);
		}
	}
	RESULT = sList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement_list",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // top_statement_list ::=
            {
              List RESULT =null;

	RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement_list",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // top_statement ::= statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // top_statement ::= function_declaration_statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // top_statement ::= class_declaration_statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // top_statement ::= T_HALT_COMPILER
            {
              Statement RESULT =null;
		int haltleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int haltright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object halt = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new HaltCompiler(haltleft, haltright);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // top_statement ::= T_NAMESPACE namespace_name T_SEMICOLON
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new NamespaceDeclaration(sleft, eright,
		new NamespaceName(listleft, listright, list, false, false), null, false);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // top_statement ::= T_NAMESPACE namespace_name T_CURLY_OPEN top_statement_list T_CURLY_CLOSE
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new NamespaceDeclaration(sleft, eright,
		new NamespaceName(listleft, listright, list, false, false),
		new Block(tokenleft, eright, sList), true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // top_statement ::= T_NAMESPACE T_CURLY_OPEN top_statement_list T_CURLY_CLOSE
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new NamespaceDeclaration(sleft, eright, null,
		new Block(tokenleft, eright, sList), true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // top_statement ::= T_USE use_declarations T_SEMICOLON
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new UseStatement(sleft, eright, list);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // top_statement ::= T_USE T_FUNCTION use_declarations T_SEMICOLON
            {
              Statement RESULT =null;
		int useleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int useright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object use = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new UseStatement(useleft, eright, list, UseStatement.Type.FUNCTION);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // top_statement ::= T_USE T_CONST use_declarations T_SEMICOLON
            {
              Statement RESULT =null;
		int useleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int useright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object use = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new UseStatement(useleft, eright, list, UseStatement.Type.CONST);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // top_statement ::= constant_declaration T_SEMICOLON
            {
              Statement RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new ConstantDeclaration(listleft, eright, list);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // use_declarations ::= use_declarations T_COMMA use_declaration
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		UseStatementPart useDecl = (UseStatementPart)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	list.add(useDecl);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_declarations",5, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // use_declarations ::= use_declaration
            {
              List RESULT =null;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		UseStatementPart useDecl = (UseStatementPart)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	list.add(useDecl);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_declarations",5, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // use_declaration ::= namespace_name
            {
              UseStatementPart RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new SingleUseStatementPart(listleft, listright,
		new NamespaceName(listleft, listright, list, false, false), null);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_declaration",4, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // use_declaration ::= namespace_name T_AS T_STRING
            {
              UseStatementPart RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new SingleUseStatementPart(listleft, aliasNameright,
		new NamespaceName(listleft, listright, list, false, false),
		new Identifier(aliasNameleft, aliasNameright, aliasName));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_declaration",4, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // use_declaration ::= namespace_name T_NS_SEPARATOR T_CURLY_OPEN group_namespace_parts T_CURLY_CLOSE
            {
              UseStatementPart RESULT =null;
		int basensleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int basensright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List basens = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int openleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int openright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object open = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int partsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int partsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parts = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new GroupUseStatementPart(basensleft, closeright, new NamespaceName(basensleft, basensright, basens, false, false), parts);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_declaration",4, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // use_declaration ::= T_NS_SEPARATOR namespace_name
            {
              UseStatementPart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new SingleUseStatementPart(sleft, listright,
		new NamespaceName(sleft, listright, list, true, false), null);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_declaration",4, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // use_declaration ::= T_NS_SEPARATOR namespace_name T_AS T_STRING
            {
              UseStatementPart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new SingleUseStatementPart(sleft, aliasNameright,
		new NamespaceName(sleft, listright, list, true, false),
		new Identifier(aliasNameleft, aliasNameright, aliasName));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_declaration",4, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // use_declaration ::= T_NS_SEPARATOR namespace_name T_NS_SEPARATOR T_CURLY_OPEN group_namespace_parts T_CURLY_CLOSE
            {
              UseStatementPart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int basensleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int basensright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List basens = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int openleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int openright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object open = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int partsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int partsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parts = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new GroupUseStatementPart(sleft, closeright, new NamespaceName(basensleft, basensright, basens, true, false), parts);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_declaration",4, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // group_namespace_parts ::= group_namespace_parts T_COMMA group_namespace_part
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int partleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int partright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		SingleUseStatementPart part = (SingleUseStatementPart)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	list.add(part);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("group_namespace_parts",2, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // group_namespace_parts ::= group_namespace_part
            {
              List RESULT =null;
		int partleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int partright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		SingleUseStatementPart part = (SingleUseStatementPart)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	list.add(part);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("group_namespace_parts",2, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // group_namespace_part ::= namespace_name
            {
              SingleUseStatementPart RESULT =null;
		int partleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int partright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List part = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new SingleUseStatementPart(partleft, partright, new NamespaceName(partleft, partright, part, false, false), null);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("group_namespace_part",3, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // group_namespace_part ::= namespace_name T_AS T_STRING
            {
              SingleUseStatementPart RESULT =null;
		int partleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int partright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List part = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new SingleUseStatementPart(partleft, aliasright, new NamespaceName(partleft, partright, part, false, false), new Identifier(aliasleft, aliasright, alias));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("group_namespace_part",3, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // group_namespace_part ::= T_FUNCTION namespace_name
            {
              SingleUseStatementPart RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int partleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int partright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List part = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new SingleUseStatementPart(fleft, partright, UseStatement.Type.FUNCTION, new NamespaceName(partleft, partright, part, false, false), null);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("group_namespace_part",3, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // group_namespace_part ::= T_FUNCTION namespace_name T_AS T_STRING
            {
              SingleUseStatementPart RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int partleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int partright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List part = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new SingleUseStatementPart(fleft, aliasright, UseStatement.Type.FUNCTION, new NamespaceName(partleft, partright, part, false, false), new Identifier(aliasleft, aliasright, alias));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("group_namespace_part",3, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // group_namespace_part ::= T_CONST namespace_name
            {
              SingleUseStatementPart RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int partleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int partright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List part = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new SingleUseStatementPart(cleft, partright, UseStatement.Type.CONST, new NamespaceName(partleft, partright, part, false, false), null);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("group_namespace_part",3, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // group_namespace_part ::= T_CONST namespace_name T_AS T_STRING
            {
              SingleUseStatementPart RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int partleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int partright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List part = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new SingleUseStatementPart(cleft, aliasright, UseStatement.Type.CONST, new NamespaceName(partleft, partright, part, false, false), new Identifier(aliasleft, aliasright, alias));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("group_namespace_part",3, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inner_statement_list ::= inner_statement_list inner_statement
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	// Ignore null statements
	if(statement != null) {
		statementList.add(statement);
	}
	RESULT = statementList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",9, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // inner_statement_list ::=
            {
              List RESULT =null;

	RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",9, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // inner_statement ::= statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("inner_statement",10, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // inner_statement ::= function_declaration_statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("inner_statement",10, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // inner_statement ::= class_declaration_statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("inner_statement",10, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= unticked_statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= T_STRING T_NEKUDOTAIM
            {
              Statement RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new GotoLabel(labelleft, eright, new Identifier(labelleft, labelright, label));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unticked_statement ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Block block = new Block(tokenleft, endright, statementList);
	RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, iftrue, falseStatement);

	RESULT = ifStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, ifTrueStatementList, false);
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, block, falseStatement);

	RESULT = ifStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	WhileStatement whileStatement = new WhileStatement(tokenleft, statementright, expr, statement);
	RESULT = whileStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	DoStatement doStatement = new DoStatement(tokenleft, endright, expr, statement);
	RESULT = doStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List conditions = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ForStatement forStatement = new ForStatement(tokenleft, statementright, initializations, conditions, increasements, statement);
	RESULT = forStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	SwitchStatement switchStatement = new SwitchStatement(tokenleft, caseBlockright, expr, caseBlock);
	RESULT = switchStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unticked_statement ::= T_BREAK T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new BreakStatement(tokenleft, endright);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unticked_statement ::= T_BREAK expr T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new BreakStatement(tokenleft, endright, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unticked_statement ::= T_CONTINUE T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new ContinueStatement(tokenleft, endright);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new ContinueStatement(tokenleft, endright, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unticked_statement ::= T_RETURN T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new ReturnStatement(tokenleft, endright);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new ReturnStatement(tokenleft, endright, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unticked_statement ::= T_RETURN variable T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new ReturnStatement(tokenleft, endright, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unticked_statement ::= T_RETURN yield_from_expr T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new ReturnStatement(tokenleft, endright, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unticked_statement ::= yield_expr T_SEMICOLON
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ExpressionStatement expressionStatement = new ExpressionStatement(exprleft, endright, expr);
	RESULT = expressionStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unticked_statement ::= yield_from_expr T_SEMICOLON
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ExpressionStatement expressionStatement = new ExpressionStatement(exprleft, endright, expr);
	RESULT = expressionStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	GlobalStatement  global = new GlobalStatement(startleft, endright, list);
	RESULT = global;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	StaticStatement s = new StaticStatement(startleft, endright, list);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new EchoStatement(startleft, endright, exprList);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unticked_statement ::= T_INLINE_HTML
            {
              Statement RESULT =null;
		int htmlleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int htmlright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object html = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	InLineHtml inLineHtml = new InLineHtml(htmlleft, htmlright);
	RESULT = inLineHtml;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unticked_statement ::= expr T_SEMICOLON
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ExpressionStatement expressionStatement = new ExpressionStatement(exprleft, endright, expr);
	RESULT = expressionStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unticked_statement ::= T_USE use_filename T_SEMICOLON
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	list.add(expr);
	Identifier id = new Identifier(startleft, startright, "use");
	FunctionName functionName = new FunctionName(startleft, startright, id);
	FunctionInvocation functionInvocation = new FunctionInvocation(startleft, exprright, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Identifier id = new Identifier(startleft, startright, "unset");
	FunctionName functionName = new FunctionName(startleft, startright, id);
	FunctionInvocation functionInvocation = new FunctionInvocation(startleft, closeParright, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE variable T_AS foreach_variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE expr_without_variable T_AS foreach_variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	DeclareStatement declare = new DeclareStatement(startleft, statementright, lists[0], lists[1], statement);
	RESULT = declare;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unticked_statement ::= T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new EmptyStatement(tokenleft, tokenright);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE T_FINALLY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int finally_wordleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int finally_wordright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object finally_word = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int finallyBlockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int finallyBlockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object finallyBlockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int finallyListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int finallyListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List finallyList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int finallyBlockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int finallyBlockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object finallyBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Block tryBlock = new Block(tryBlockStartleft, tryBlockEndright, tryList);
    Block finallyBlock = new Block(finallyBlockStartleft, finallyBlockEndright, finallyList);
	FinallyClause finallyClause = new FinallyClause(finally_wordleft, finallyBlockEndright, finallyBlock);
	TryStatement tryStatement = new TryStatement(startleft, finallyBlockEndright, tryBlock, null, finallyClause);
	RESULT = tryStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name tracked_variable T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE additional_catches additional_finally
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-13)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-13)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-13)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-12)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-12)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-12)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-11)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-11)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-11)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-10)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-10)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-10)).value;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int finallyBlockleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int finallyBlockright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		FinallyClause finallyBlock = (FinallyClause)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Block tryBlock = new Block(tryBlockStartleft, tryBlockEndright, tryList);
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, var, catchBlock);
	((LinkedList) catchesList).addFirst(catchClause);
    int end = finallyBlock == null ? catchesListright : finallyBlockright;
	TryStatement tryStatement = new TryStatement(startleft, end, tryBlock, catchesList, finallyBlock);
	RESULT = tryStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-13)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // unticked_statement ::= T_THROW expr T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new ThrowStatement(tokenleft, endright, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unticked_statement ::= T_GOTO T_STRING T_SEMICOLON
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new GotoStatement(sleft, eright, new Identifier(labelleft, labelright, label));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unticked_statement ::= error
            {
              Statement RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ASTError error = new ASTError(theErrorleft, theErrorright);
	RESULT = error;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unticked_statement ::= T_VAR_COMMENT
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	// TODO: var comment should be added as parser.ast node

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // additional_catches ::= non_empty_additional_catches
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("additional_catches",115, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // additional_catches ::=
            {
              List RESULT =null;

	List list = new LinkedList();
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("additional_catches",115, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // non_empty_additional_catches ::= additional_catch
            {
              List RESULT =null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",116, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // non_empty_additional_catches ::= non_empty_additional_catches additional_catch
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	list.add(catch_statement);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",116, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // additional_catch ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
            {
              CatchClause RESULT =null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	Variable variable = new Variable(varleft, varright, var);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, variable, catchBlock);
	RESULT = catchClause;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("additional_catch",117, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // additional_finally ::=
            {
              FinallyClause RESULT =null;

    RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("additional_finally",118, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // additional_finally ::= T_FINALLY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
            {
              FinallyClause RESULT =null;
		int finally_wordleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int finally_wordright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object finally_word = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int finallyBlockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int finallyBlockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object finallyBlockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int finallyListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int finallyListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List finallyList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int finallyBlockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int finallyBlockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object finallyBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Block finallyBlock = new Block(finallyBlockStartleft, finallyBlockEndright, finallyList);
	FinallyClause finallyClause = new FinallyClause(finally_wordleft, finallyBlockEndright, finallyBlock);
	RESULT = finallyClause;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("additional_finally",118, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // unset_variables ::= unset_variable
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unset_variables",12, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // unset_variables ::= unset_variables T_COMMA unset_variable
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	list.add(var);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unset_variables",12, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // unset_variable ::= variable
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unset_variable",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // use_filename ::= T_CONSTANT_ENCAPSED_STRING
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.Type.STRING);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_filename",14, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Scalar s = new Scalar(startleft, endright, scalar, Scalar.Type.STRING);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_filename",14, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // function_declaration_statement ::= unticked_function_declaration_statement
            {
              FunctionDeclaration RESULT =null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		FunctionDeclaration functionDeclaration = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = functionDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_statement",112, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // class_declaration_statement ::= unticked_class_declaration_statement
            {
              Statement RESULT =null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement classDeclaration = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = classDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_declaration_statement",113, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // is_reference ::=
            {
              Boolean RESULT =null;

	RESULT = Boolean.FALSE;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("is_reference",41, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // is_reference ::= T_REFERENCE
            {
              Boolean RESULT =null;

	RESULT = Boolean.TRUE;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("is_reference",41, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // is_variadic ::=
            {
              Boolean RESULT =null;

	RESULT = Boolean.FALSE;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("is_variadic",42, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // is_variadic ::= T_ELLIPSIS
            {
              Boolean RESULT =null;

	RESULT = Boolean.TRUE;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("is_variadic",42, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE optional_return_type T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
            {
              FunctionDeclaration RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression returnType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Identifier functionId = new Identifier(functionNameleft, functionNameright, functionName);
	Block block = new Block(blockStartleft, blockEndright, statementList);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, blockEndright, functionId, paramList, returnType, block, isReference.booleanValue());
	RESULT = functionDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_function_declaration_statement",119, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // unticked_class_declaration_statement ::= class_entry_type T_STRING extends_from implements_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		ClassDeclaration.Modifier modifier = (ClassDeclaration.Modifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Expression superClass = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Identifier classId = new Identifier(classNameleft, classNameright, className);
	Block block = new Block(blockStartleft, blockEndright, statementList);
	ClassDeclaration classDeclaration = new ClassDeclaration(modifierleft ,blockEndright, modifier, classId, superClass, interfaces, block);
	RESULT = classDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",120, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list T_CURLY_OPEN interface_statement_list T_CURLY_CLOSE
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Integer start = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Identifier classId = new Identifier(classNameleft, classNameright, className);
	Block block = new Block(blockStartleft, blockEndright, statementList);
	InterfaceDeclaration interfaceDeclaration = new InterfaceDeclaration(startleft ,blockEndright, classId, interfaces, block);
	RESULT = interfaceDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",120, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // unticked_class_declaration_statement ::= T_TRAIT T_STRING T_CURLY_OPEN trait_statement_list T_CURLY_CLOSE
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int traitNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int traitNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String traitName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Identifier traitId = new Identifier(traitNameleft, traitNameright, traitName);
	Block block = new Block(blockStartleft, blockEndright, statementList);
	TraitDeclaration traitDeclaration = new TraitDeclaration(startleft, blockEndright, traitId, block);
	RESULT = traitDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",120, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // interface_statement_list ::= interface_statement_list interface_statement
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int interfaceStatementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int interfaceStatementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement interfaceStatement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	list.add(interfaceStatement);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_statement_list",93, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // interface_statement_list ::=
            {
              List RESULT =null;

	List list = new LinkedList();
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_statement_list",93, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // interface_statement ::= constant_declaration T_SEMICOLON
            {
              Statement RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ConstantDeclaration classConstantDeclaration = new ConstantDeclaration(listleft, endright, list);
	RESULT = classConstantDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_statement",94, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
default:
throw new Exception("Invalid action number found in internal parse table");
}
}
public final java_cup.runtime.Symbol fakeMethod100to199(
int                        CUP$ASTPHP5Parser$act_num,
java_cup.runtime.lr_parser CUP$ASTPHP5Parser$parser,
java.util.Stack            CUP$ASTPHP5Parser$stack,
int                        CUP$ASTPHP5Parser$top)
throws java.lang.Exception
{
java_cup.runtime.Symbol CUP$ASTPHP5Parser$result;
switch (CUP$ASTPHP5Parser$act_num) {
          case 100: // interface_statement ::= method_modifiers T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE optional_return_type T_SEMICOLON
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression returnType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	int methodStart = modifier == null ? startleft : modifierleft;
	modifier = modifier == null ? ASTPHP5Parser.PUBLIC : modifier;
	Identifier functionId = new Identifier(functionNameleft, functionNameright, functionName);
        Block block = new Block(endleft, endright, Collections.EMPTY_LIST, false);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, endright, functionId, paramList, returnType, block, isReference.booleanValue());
	MethodDeclaration methodDeclaration = new MethodDeclaration(methodStart, endright, modifier.intValue(), functionDeclaration, true);
	RESULT = methodDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_statement",94, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // interface_statement ::= T_VAR_COMMENT
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;



              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_statement",94, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // trait_statement_list ::= trait_statement_list trait_statement
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int traitStatementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int traitStatementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement traitStatement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	list.add(traitStatement);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_statement_list",91, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // trait_statement_list ::=
            {
              List RESULT =null;

	List list = new LinkedList();
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_statement_list",91, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // trait_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	FieldsDeclaration fieldsDeclaration = new FieldsDeclaration(modifierleft, endright, modifier.intValue(), decList);
	RESULT = fieldsDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_statement",92, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // trait_statement ::= method_modifiers T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE optional_return_type method_body
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression returnType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	int methodStart = modifier == null ? startleft : modifierleft;
	modifier = modifier == null ? ASTPHP5Parser.PUBLIC : modifier;
	Identifier functionId = new Identifier(functionNameleft, functionNameright, functionName);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, bodyright, functionId, paramList, returnType, body, isReference.booleanValue());
	MethodDeclaration methodDeclaration = new MethodDeclaration(methodStart, bodyright, modifier.intValue(), functionDeclaration, true);
	RESULT = methodDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_statement",92, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // trait_statement ::= T_VAR_COMMENT
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;



              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_statement",92, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // trait_statement ::= T_USE use_traits use_traits_body
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new UseTraitStatement(sleft, bodyright, list, body);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_statement",92, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // class_entry_type ::= T_CLASS
            {
              ClassDeclaration.Modifier RESULT =null;

	RESULT = ClassDeclaration.Modifier.NONE;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_entry_type",121, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // class_entry_type ::= T_ABSTRACT T_CLASS
            {
              ClassDeclaration.Modifier RESULT =null;

	RESULT = ClassDeclaration.Modifier.ABSTRACT;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_entry_type",121, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // class_entry_type ::= T_FINAL T_CLASS
            {
              ClassDeclaration.Modifier RESULT =null;

	RESULT = ClassDeclaration.Modifier.FINAL;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_entry_type",121, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // extends_from ::=
            {
              Expression RESULT =null;

	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("extends_from",122, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // extends_from ::= T_EXTENDS fully_qualified_class_name
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = className;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("extends_from",122, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // interface_entry ::= T_INTERFACE
            {
              Integer RESULT =null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_entry",82, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // interface_extends_list ::=
            {
              List RESULT =null;

	List list = new LinkedList();
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",83, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // interface_extends_list ::= T_EXTENDS interface_list
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",83, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // implements_list ::=
            {
              List RESULT =null;

	List list = new LinkedList();
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("implements_list",123, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // implements_list ::= T_IMPLEMENTS interface_list
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("implements_list",123, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // interface_list ::= fully_qualified_class_name
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	list.add(className);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_list",124, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // interface_list ::= interface_list T_COMMA fully_qualified_class_name
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	list.add(className);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_list",124, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // foreach_optional_arg ::=
            {
              Expression RESULT =null;

	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",15, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",15, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // foreach_variable ::= variable
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("foreach_variable",16, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // foreach_variable ::= T_REFERENCE variable
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Reference reference = new Reference (startleft, varright, var);
	RESULT = reference;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("foreach_variable",16, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // foreach_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ListVariable vars = new ListVariable(startleft, endright, varList);
	RESULT = vars;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("foreach_variable",16, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // for_statement ::= statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR T_SEMICOLON
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;

	Block block = new Block(startleft, statementListright, statementList, false);
	RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // foreach_statement ::= statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("foreach_statement",18, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH T_SEMICOLON
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;

	Block block = new Block(startleft, statementListright, statementList, false);
	RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("foreach_statement",18, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // declare_statement ::= statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("declare_statement",19, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE T_SEMICOLON
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;

	Block block = new Block(startleft, statementListright, statementList, false);
	RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("declare_statement",19, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // declare_list ::= string_st T_EQUAL static_scalar
            {
              List[] RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List listKeys = new LinkedList();
	List listValues = new LinkedList();

	Identifier id = new Identifier(keyleft, keyright, key);
	listKeys.add(id);
	listValues.add(value);

	List[] returnList = new List[] { listKeys, listValues };
	RESULT = returnList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("declare_list",20, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_scalar
            {
              List[] RESULT =null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Identifier id = new Identifier(keyleft, keyright, key);
	lists[0].add(id);
	lists[1].add(value);
	RESULT = lists;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("declare_list",20, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Block block = new Block(startleft, endright, caseList);
	RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("switch_case_list",21, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Block block = new Block(startleft, endright, caseList);
	RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("switch_case_list",21, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH T_SEMICOLON
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Block block = new Block(startleft, endright, caseList, false);
	RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("switch_case_list",21, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH T_SEMICOLON
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Block block = new Block(startleft, endright, caseList, false);
	RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("switch_case_list",21, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // case_list ::=
            {
              List RESULT =null;

	RESULT = new LinkedList(); // of SwitchCase

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("case_list",22, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // case_list ::= case_list T_CASE expr case_separator inner_statement_list
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("case_list",22, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("case_list",22, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // case_separator ::= T_NEKUDOTAIM
            {
              Object RESULT =null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("case_separator",23, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // case_separator ::= T_SEMICOLON
            {
              Object RESULT =null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("case_separator",23, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // while_statement ::= statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("while_statement",24, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE T_SEMICOLON
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;

	Block block = new Block(colonleft, statementListright, statementList, false);
	RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("while_statement",24, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // elseif_list ::=
            {
              List[] RESULT =null;

	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();

	List[] returnList = new List[] { listConditions, listStatements, listTokens };

	RESULT = returnList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("elseif_list",25, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(iftrue);
	((LinkedList)elseifList[2]).addFirst(Integer.valueOf(tokenleft));

	RESULT = elseifList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("elseif_list",25, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // new_elseif_list ::=
            {
              List[] RESULT =null;

	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();

	List[] returnList = new List[] { listConditions, listStatements, listTokens };

	RESULT = returnList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",26, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Block block = new Block(colonleft, statementListright, statementList, false);
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(block);
	((LinkedList)elseifList[2]).addFirst(Integer.valueOf(tokenleft));

	RESULT = elseifList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",26, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // else_single ::=
            {
              Statement RESULT =null;

	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("else_single",27, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // else_single ::= T_ELSE statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("else_single",27, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // new_else_single ::=
            {
              Statement RESULT =null;

	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("new_else_single",28, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Block block = new Block(colonleft, statementListright, statementList, false);
	RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("new_else_single",28, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // parameter_list ::= non_empty_parameter_list
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",29, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // parameter_list ::=
            {
              List RESULT =null;

	List list = new LinkedList();
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",29, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // non_empty_parameter_list ::= parameter
            {
              List RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	list.add(parameter);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",32, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	list.add(parameter);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",32, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // parameter ::= optional_class_type is_variadic T_VARIABLE
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int isVariadicleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int isVariadicright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Boolean isVariadic = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	int start = classType == null ? (isVariadic ? isVariadicleft : varleft) : classTypeleft;
	Variable v = new Variable(varleft, varright, var);
        Expression argument = v;
        if (isVariadic) {
            argument = new Variadic(isVariadicleft, varright, v);
        }
	FormalParameter parameter = new FormalParameter(start, varright, classType, argument);
	RESULT = parameter;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	int start = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, var);
	Reference ref_var = new Reference (refleft, varright, v);
	FormalParameter parameter = new FormalParameter(start, varright, classType, ref_var);
	RESULT = parameter;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // parameter ::= optional_class_type T_REFERENCE T_ELLIPSIS T_VARIABLE
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int ellleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int ellright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object ell = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	int start = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, var);
	Variadic variadic = new Variadic(ellleft, varright, v);
	Reference ref_var = new Reference (refleft, varright, variadic);
	FormalParameter parameter = new FormalParameter(start, varright, classType, ref_var);
	RESULT = parameter;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // parameter ::= optional_class_type is_variadic T_VARIABLE T_EQUAL static_scalar
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int isVariadicleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int isVariadicright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Boolean isVariadic = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	int start = classType == null ? (isVariadic ? isVariadicleft : varleft) : classTypeleft;
	Variable v = new Variable(varleft, varright, var);
        Expression argument = v;
        if (isVariadic) {
            argument = new Variadic(isVariadicleft, varright, v);
        }
	FormalParameter parameter = new FormalParameter(start, scalarright, classType, argument, scalar);
	RESULT = parameter;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL static_scalar
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	int start = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, var);
	Reference ref_var = new Reference (refleft, varright, v);
	FormalParameter parameter = new FormalParameter(start, scalarright, classType, ref_var, scalar);
	RESULT = parameter;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // optional_return_type ::=
            {
              Expression RESULT =null;

	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("optional_return_type",127, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // optional_return_type ::= T_NEKUDOTAIM class_type
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = className;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("optional_return_type",127, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // optional_class_type ::=
            {
              Expression RESULT =null;

	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("optional_class_type",125, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // optional_class_type ::= class_type
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = className;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("optional_class_type",125, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // class_type ::= fully_qualified_class_name
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = className;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_type",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // class_type ::= T_ARRAY
            {
              Expression RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Identifier classId = new Identifier(arrayleft, arrayright, "array");
	RESULT = classId;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_type",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // function_call_parameter_list ::= non_empty_function_call_parameter_list
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = paramsList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",34, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // function_call_parameter_list ::=
            {
              List RESULT =null;

	RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",34, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // non_empty_function_call_parameter_list ::= is_variadic expr_without_variable
            {
              List RESULT =null;
		int isVariadicleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int isVariadicright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Boolean isVariadic = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List paramsList = new LinkedList();
	Expression param = var;
        if (isVariadic) {
            param = new Variadic(isVariadicleft, varright, var);
        }
	paramsList.add(param);
	RESULT = paramsList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // non_empty_function_call_parameter_list ::= is_variadic variable
            {
              List RESULT =null;
		int isVariadicleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int isVariadicright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Boolean isVariadic = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List paramsList = new LinkedList();
	Expression param = var;
        if (isVariadic) {
            param = new Variadic(isVariadicleft, varright, var);
        }
	paramsList.add(param);
	RESULT = paramsList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable
            {
              List RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List paramsList = new LinkedList();
	Expression var_ref = new Reference(startleft, varright, var);
	paramsList.add(var_ref);
	RESULT = paramsList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA is_variadic expr_without_variable
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int isVariadicleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int isVariadicright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Boolean isVariadic = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        Expression param = var;
        if (isVariadic) {
            param = new Variadic(isVariadicleft, varright, var);
        }
	paramsList.add(param);
	RESULT = paramsList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA is_variadic variable
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int isVariadicleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int isVariadicright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Boolean isVariadic = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Expression param = var;
        if (isVariadic) {
            param = new Variadic(isVariadicleft, varright, var);
        }
	paramsList.add(param);
	RESULT = paramsList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Expression var_ref = new Reference(startleft, varright, var);
	paramsList.add(var_ref);
	RESULT = paramsList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // global_var_list ::= global_var_list T_COMMA global_var
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	list.add(var);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("global_var_list",36, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // global_var_list ::= global_var
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("global_var_list",36, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // global_var ::= T_VARIABLE
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Variable variable = new Variable(varleft, varright, var);
	RESULT = variable;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("global_var",37, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // global_var ::= T_DOLLAR r_variable
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ReflectionVariable ref = new ReflectionVariable(startleft, varright, var);
	RESULT = ref;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("global_var",37, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ReflectionVariable var = new ReflectionVariable(startleft, endright, varName);
	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("global_var",37, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // static_var_list ::= static_var_list T_COMMA T_VARIABLE
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Variable v = new Variable(varleft, varright, var);
	list.add(v);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_var_list",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_scalar
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Variable v = new Variable(varleft, varright, var);
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.Type.EQUAL, expr);
	list.add(assignment);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_var_list",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // static_var_list ::= T_VARIABLE
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Variable v = new Variable(varleft, varright, var);
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_var_list",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Variable v = new Variable(varleft, varright, var);
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.Type.EQUAL, expr);
	List list = new LinkedList();
	list.add(assignment);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_var_list",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // class_statement_list ::= class_statement_list class_statement
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement classStatement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	list.add(classStatement);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_statement_list",39, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // class_statement_list ::=
            {
              List RESULT =null;

	List list = new LinkedList();
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_statement_list",39, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	FieldsDeclaration fieldsDeclaration = new FieldsDeclaration(modifierleft, endright, modifier.intValue(), decList);
	RESULT = fieldsDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_statement",40, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // class_statement ::= constant_declaration T_SEMICOLON
            {
              Statement RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ConstantDeclaration classConstantDeclaration = new ConstantDeclaration(listleft, endright, list);
	RESULT = classConstantDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_statement",40, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // class_statement ::= method_modifiers T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE optional_return_type method_body
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression returnType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	int methodStart = modifier == null ? startleft : modifierleft;
	modifier = modifier == null ? ASTPHP5Parser.PUBLIC : modifier;
	Identifier functionId = new Identifier(functionNameleft, functionNameright, functionName);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, bodyright, functionId, paramList, returnType, body, isReference.booleanValue());
	MethodDeclaration methodDeclaration = new MethodDeclaration(methodStart, bodyright, modifier.intValue(), functionDeclaration, true);
	RESULT = methodDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_statement",40, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // class_statement ::= T_VAR_COMMENT
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;



              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_statement",40, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // class_statement ::= T_USE use_traits use_traits_body
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new UseTraitStatement(sleft, bodyright, list, body);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_statement",40, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // use_traits ::= use_traits T_COMMA use_trait
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		UseTraitStatementPart useDecl = (UseTraitStatementPart)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	list.add(useDecl);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_traits",84, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // use_traits ::= use_trait
            {
              List RESULT =null;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		UseTraitStatementPart useDecl = (UseTraitStatementPart)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	list.add(useDecl);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_traits",84, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // use_trait ::= namespace_name
            {
              UseTraitStatementPart RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new UseTraitStatementPart(listleft, listright, new NamespaceName(listleft, listright, list, false, false));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_trait",95, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // use_trait ::= T_NS_SEPARATOR namespace_name
            {
              UseTraitStatementPart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new UseTraitStatementPart(sleft, listright, new NamespaceName(sleft, listright, list, true, false));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_trait",95, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // use_traits_body ::= T_SEMICOLON
            {
              Block RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_traits_body",85, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // use_traits_body ::= T_CURLY_OPEN use_traits_body_statement_list T_CURLY_CLOSE
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Block block = new Block(startleft, endright, statementList);
	RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_traits_body",85, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // use_traits_body_statement_list ::= use_traits_body_statement_list use_traits_body_statement
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	// Ignore null statements
	if(statement != null) {
		statementList.add(statement);
	}
	RESULT = statementList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_traits_body_statement_list",86, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // use_traits_body_statement_list ::=
            {
              List RESULT =null;

	RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_traits_body_statement_list",86, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // use_traits_body_statement ::= trait_conflict_resolution_declaration
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_traits_body_statement",87, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
default:
throw new Exception("Invalid action number found in internal parse table");
}
}
public final java_cup.runtime.Symbol fakeMethod200to299(
int                        CUP$ASTPHP5Parser$act_num,
java_cup.runtime.lr_parser CUP$ASTPHP5Parser$parser,
java.util.Stack            CUP$ASTPHP5Parser$stack,
int                        CUP$ASTPHP5Parser$top)
throws java.lang.Exception
{
java_cup.runtime.Symbol CUP$ASTPHP5Parser$result;
switch (CUP$ASTPHP5Parser$act_num) {
          case 200: // use_traits_body_statement ::= trait_method_alias_declaration
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_traits_body_statement",87, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // class_name_list ::= class_name_list T_COMMA class_name
            {
              List RESULT =null;
		int classNameListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classNameListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List classNameList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	classNameList.add(className);
	RESULT = classNameList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_name_list",153, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // class_name_list ::= class_name
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List classNameList = new LinkedList();
	classNameList.add(className);
	RESULT = classNameList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_name_list",153, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // trait_conflict_resolution_declaration ::= class_name T_PAAMAYIM_NEKUDOTAYIM string_st T_INSTEADOF class_name_list T_SEMICOLON
            {
              Statement RESULT =null;
		int preferredTraitNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int preferredTraitNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Expression preferredTraitName = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int suppressedTraitNamesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int suppressedTraitNamesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List suppressedTraitNames = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier methodId = new Identifier(methodNameleft, methodNameright, methodName);
    RESULT = new TraitConflictResolutionDeclaration(preferredTraitNameleft, endright, preferredTraitName, methodId, suppressedTraitNames);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_conflict_resolution_declaration",88, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // trait_method_alias_declaration ::= class_name T_PAAMAYIM_NEKUDOTAYIM string_st T_AS traits_alias_modifier string_st T_SEMICOLON
            {
              Statement RESULT =null;
		int traitNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int traitNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		Expression traitName = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int oldMethodNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int oldMethodNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String oldMethodName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		TraitMethodAliasDeclaration.Modifier modifier = (TraitMethodAliasDeclaration.Modifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int newMethodNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int newMethodNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String newMethodName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier oldMethodId = new Identifier(oldMethodNameleft, oldMethodNameright, oldMethodName);
    Identifier newMethodId = new Identifier(newMethodNameleft, newMethodNameright, newMethodName);
    RESULT = new TraitMethodAliasDeclaration(traitNameleft, endright, oldMethodId, newMethodId, traitName, modifier);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_method_alias_declaration",89, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // trait_method_alias_declaration ::= class_name T_PAAMAYIM_NEKUDOTAYIM string_st T_AS string_st T_SEMICOLON
            {
              Statement RESULT =null;
		int traitNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int traitNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Expression traitName = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int oldMethodNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int oldMethodNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String oldMethodName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int newMethodNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int newMethodNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String newMethodName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier oldMethodId = new Identifier(oldMethodNameleft, oldMethodNameright, oldMethodName);
    Identifier newMethodId = new Identifier(newMethodNameleft, newMethodNameright, newMethodName);
    RESULT = new TraitMethodAliasDeclaration(traitNameleft, endright, oldMethodId, newMethodId, traitName, null);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_method_alias_declaration",89, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // trait_method_alias_declaration ::= string_st T_AS traits_alias_modifier T_SEMICOLON
            {
              Statement RESULT =null;
		int oldMethodNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int oldMethodNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String oldMethodName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		TraitMethodAliasDeclaration.Modifier modifier = (TraitMethodAliasDeclaration.Modifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier oldMethodId = new Identifier(oldMethodNameleft, oldMethodNameright, oldMethodName);
    Identifier newMethodId = new Identifier(oldMethodNameleft, oldMethodNameright, oldMethodName);
    RESULT = new TraitMethodAliasDeclaration(oldMethodNameleft, endright, oldMethodId, newMethodId, null, modifier);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_method_alias_declaration",89, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // trait_method_alias_declaration ::= string_st T_AS traits_alias_modifier string_st T_SEMICOLON
            {
              Statement RESULT =null;
		int oldMethodNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int oldMethodNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String oldMethodName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		TraitMethodAliasDeclaration.Modifier modifier = (TraitMethodAliasDeclaration.Modifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int newMethodNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int newMethodNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String newMethodName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier oldMethodId = new Identifier(oldMethodNameleft, oldMethodNameright, oldMethodName);
    Identifier newMethodId = new Identifier(newMethodNameleft, newMethodNameright, newMethodName);
    RESULT = new TraitMethodAliasDeclaration(oldMethodNameleft, endright, oldMethodId, newMethodId, null, modifier);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_method_alias_declaration",89, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // trait_method_alias_declaration ::= string_st T_AS string_st T_SEMICOLON
            {
              Statement RESULT =null;
		int oldMethodNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int oldMethodNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String oldMethodName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int newMethodNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int newMethodNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String newMethodName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier oldMethodId = new Identifier(oldMethodNameleft, oldMethodNameright, oldMethodName);
    Identifier newMethodId = new Identifier(newMethodNameleft, newMethodNameright, newMethodName);
    RESULT = new TraitMethodAliasDeclaration(oldMethodNameleft, endright, oldMethodId, newMethodId, null, null);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_method_alias_declaration",89, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // traits_alias_modifier ::= T_PUBLIC
            {
              TraitMethodAliasDeclaration.Modifier RESULT =null;

	RESULT = TraitMethodAliasDeclaration.Modifier.PUBLIC;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("traits_alias_modifier",90, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // traits_alias_modifier ::= T_PROTECTED
            {
              TraitMethodAliasDeclaration.Modifier RESULT =null;

	RESULT = TraitMethodAliasDeclaration.Modifier.PROTECTED;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("traits_alias_modifier",90, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // traits_alias_modifier ::= T_PRIVATE
            {
              TraitMethodAliasDeclaration.Modifier RESULT =null;

	RESULT = TraitMethodAliasDeclaration.Modifier.PRIVATE;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("traits_alias_modifier",90, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // method_body ::= T_SEMICOLON
            {
              Block RESULT =null;

	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_body",109, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Block block = new Block(startleft, endright, statementList);
	RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_body",109, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // variable_modifiers ::= ppp_modifiers
            {
              Integer RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = modifier;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",129, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // variable_modifiers ::= static_modifier
            {
              Integer RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = modifier;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",129, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // variable_modifiers ::= static_modifier ppp_modifiers
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
    result |= sModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",129, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // variable_modifiers ::= ppp_modifiers static_modifier
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
    result |= sModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",129, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // variable_modifiers ::= T_VAR
            {
              Integer RESULT =null;

	RESULT = ASTPHP5Parser.PUBLIC;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",129, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // method_modifiers ::=
            {
              Integer RESULT =null;

	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",108, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // method_modifiers ::= af_modifiers
            {
              Integer RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = modifier;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",108, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // method_modifiers ::= static_modifier
            {
              Integer RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = modifier;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",108, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // method_modifiers ::= ppp_modifiers
            {
              Integer RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = modifier;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",108, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // method_modifiers ::= static_modifier ppp_modifiers
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
	result |= sModifier.intValue();
	RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",108, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // method_modifiers ::= static_modifier af_modifiers
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
	result |= sModifier.intValue();
	RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",108, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // method_modifiers ::= ppp_modifiers static_modifier
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
	result |= sModifier.intValue();
	RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",108, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // method_modifiers ::= ppp_modifiers af_modifiers
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
	result |= sModifier.intValue();
	RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",108, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // method_modifiers ::= af_modifiers static_modifier
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
	result |= sModifier.intValue();
	RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",108, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // method_modifiers ::= af_modifiers ppp_modifiers
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
	result |= sModifier.intValue();
	RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",108, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // method_modifiers ::= static_modifier ppp_modifiers af_modifiers
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int tModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int tModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer tModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
	result |= sModifier.intValue();
    result |= tModifier.intValue();
	RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",108, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // method_modifiers ::= static_modifier af_modifiers ppp_modifiers
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int tModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int tModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer tModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
	result |= sModifier.intValue();
    result |= tModifier.intValue();
	RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",108, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // method_modifiers ::= ppp_modifiers static_modifier af_modifiers
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int tModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int tModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer tModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
	result |= sModifier.intValue();
    result |= tModifier.intValue();
	RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",108, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // method_modifiers ::= ppp_modifiers af_modifiers static_modifier
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int tModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int tModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer tModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
	result |= sModifier.intValue();
    result |= tModifier.intValue();
	RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",108, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // method_modifiers ::= af_modifiers static_modifier ppp_modifiers
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int tModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int tModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer tModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
	result |= sModifier.intValue();
    result |= tModifier.intValue();
	RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",108, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // method_modifiers ::= af_modifiers ppp_modifiers static_modifier
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int tModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int tModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer tModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
	result |= sModifier.intValue();
    result |= tModifier.intValue();
	RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",108, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // static_modifier ::= T_STATIC
            {
              Integer RESULT =null;

    RESULT = ASTPHP5Parser.STATIC;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_modifier",137, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // ppp_modifiers ::= T_PUBLIC
            {
              Integer RESULT =null;

	RESULT = ASTPHP5Parser.PUBLIC;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("ppp_modifiers",138, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // ppp_modifiers ::= T_PROTECTED
            {
              Integer RESULT =null;

	RESULT = ASTPHP5Parser.PROTECTED;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("ppp_modifiers",138, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // ppp_modifiers ::= T_PRIVATE
            {
              Integer RESULT =null;

	RESULT = ASTPHP5Parser.PRIVATE;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("ppp_modifiers",138, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // af_modifiers ::= T_ABSTRACT
            {
              Integer RESULT =null;

	RESULT = ASTPHP5Parser.ABSTRACT;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("af_modifiers",139, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // af_modifiers ::= T_FINAL
            {
              Integer RESULT =null;

	RESULT = ASTPHP5Parser.FINAL;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("af_modifiers",139, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Variable varId = new Variable(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",106, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Variable varId = new Variable(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",106, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // class_variable_declaration ::= T_VARIABLE
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",106, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",106, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // constant_declaration ::= constant_declaration T_COMMA T_STRING T_EQUAL static_scalar_value
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Identifier constId = new Identifier(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("constant_declaration",107, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // constant_declaration ::= T_CONST T_STRING T_EQUAL static_scalar_value
            {
              List RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	Identifier constId = new Identifier(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("constant_declaration",107, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // echo_expr_list ::= echo_expr_list T_COMMA expr
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	exprList.add(expr);
	RESULT = exprList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",43, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // echo_expr_list ::= expr
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",43, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // for_expr ::=
            {
              List RESULT =null;

	RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("for_expr",44, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // for_expr ::= non_empty_for_expr
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = exprList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("for_expr",44, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	exprList.add(expr);
	RESULT = exprList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",45, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // non_empty_for_expr ::= expr
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",45, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // expr_without_variable ::= expr_without_variable_and_class_instance
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = ex;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",46, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // expr_without_variable ::= anonymous_class
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ClassInstanceCreation ex = (ClassInstanceCreation)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = ex;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",46, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // expr_without_variable ::= T_NEW class_name_reference ctor_arguments
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	RESULT = classInstanceCreation;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",46, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // expr_without_variable_and_class_instance ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ListVariable vars = new ListVariable(startleft, closeright, varList);
	Assignment list = new Assignment(startleft, exprright, vars, Assignment.Type.EQUAL, expr);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // expr_without_variable_and_class_instance ::= variable T_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new Assignment(varleft, exprright, var, Assignment.Type.EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // expr_without_variable_and_class_instance ::= variable T_EQUAL T_REFERENCE variable
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase refvar = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new Assignment(varleft, refvarright, var, Assignment.Type.EQUAL, new Reference(reftokenleft, refvarright, refvar));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // expr_without_variable_and_class_instance ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	Reference reference = new Reference(reftokenleft, ctorright, classInstanceCreation);
	Assignment assignment = new Assignment(varleft, ctorright, var, Assignment.Type.EQUAL, reference);
	RESULT = assignment;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // expr_without_variable_and_class_instance ::= T_CLONE expr
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	CloneExpression clone = new CloneExpression(startleft, exprright, expr);
	RESULT = clone;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // expr_without_variable_and_class_instance ::= variable T_POW_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new Assignment(varleft, exprright, var , Assignment.Type.POW_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // expr_without_variable_and_class_instance ::= variable T_PLUS_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new Assignment(varleft, exprright, var , Assignment.Type.PLUS_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // expr_without_variable_and_class_instance ::= variable T_MINUS_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new Assignment(varleft, exprright, var , Assignment.Type.MINUS_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // expr_without_variable_and_class_instance ::= variable T_MUL_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new Assignment(varleft, exprright, var , Assignment.Type.MUL_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // expr_without_variable_and_class_instance ::= variable T_DIV_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new Assignment(varleft, exprright, var , Assignment.Type.DIV_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // expr_without_variable_and_class_instance ::= variable T_CONCAT_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new Assignment(varleft, exprright, var , Assignment.Type.CONCAT_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // expr_without_variable_and_class_instance ::= variable T_MOD_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new Assignment(varleft, exprright, var , Assignment.Type.MOD_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // expr_without_variable_and_class_instance ::= variable T_AND_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new Assignment(varleft, exprright, var , Assignment.Type.AND_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // expr_without_variable_and_class_instance ::= variable T_OR_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new Assignment(varleft, exprright, var , Assignment.Type.OR_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // expr_without_variable_and_class_instance ::= variable T_XOR_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new Assignment(varleft, exprright, var , Assignment.Type.XOR_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // expr_without_variable_and_class_instance ::= variable T_SL_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new Assignment(varleft, exprright, var , Assignment.Type.SL_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // expr_without_variable_and_class_instance ::= variable T_SR_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new Assignment(varleft, exprright, var , Assignment.Type.SR_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // expr_without_variable_and_class_instance ::= rw_variable T_INC
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.Operator.INC);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // expr_without_variable_and_class_instance ::= T_INC rw_variable
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.Operator.INC);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // expr_without_variable_and_class_instance ::= rw_variable T_DEC
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.Operator.DEC);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // expr_without_variable_and_class_instance ::= T_DEC rw_variable
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.Operator.DEC);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // expr_without_variable_and_class_instance ::= expr T_BOOLEAN_OR expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.BOOL_OR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // expr_without_variable_and_class_instance ::= expr T_BOOLEAN_AND expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.BOOL_AND, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // expr_without_variable_and_class_instance ::= expr T_LOGICAL_OR expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.STRING_OR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // expr_without_variable_and_class_instance ::= expr T_LOGICAL_AND expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.STRING_AND, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // expr_without_variable_and_class_instance ::= expr T_LOGICAL_XOR expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.STRING_XOR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // expr_without_variable_and_class_instance ::= expr T_OR expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.OR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // expr_without_variable_and_class_instance ::= expr T_REFERENCE expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.AND, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // expr_without_variable_and_class_instance ::= expr T_KOVA expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.XOR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // expr_without_variable_and_class_instance ::= expr T_NEKUDA expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.CONCAT, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // expr_without_variable_and_class_instance ::= expr T_POW expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.POW, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // expr_without_variable_and_class_instance ::= expr T_PLUS expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.PLUS, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // expr_without_variable_and_class_instance ::= expr T_MINUS expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.MINUS, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // expr_without_variable_and_class_instance ::= expr T_TIMES expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.MUL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // expr_without_variable_and_class_instance ::= expr T_DIV expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.DIV, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // expr_without_variable_and_class_instance ::= expr T_PRECENT expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.MOD, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // expr_without_variable_and_class_instance ::= expr T_SL expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.SL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // expr_without_variable_and_class_instance ::= expr T_SR expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.SR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // expr_without_variable_and_class_instance ::= T_PLUS expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.Operator.PLUS);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // expr_without_variable_and_class_instance ::= T_MINUS expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.Operator.MINUS);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // expr_without_variable_and_class_instance ::= T_NOT expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.Operator.NOT);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // expr_without_variable_and_class_instance ::= T_TILDA expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.Operator.TILDA);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // expr_without_variable_and_class_instance ::= expr T_IS_IDENTICAL expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_IDENTICAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // expr_without_variable_and_class_instance ::= expr T_IS_NOT_IDENTICAL expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_NOT_IDENTICAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
default:
throw new Exception("Invalid action number found in internal parse table");
}
}
public final java_cup.runtime.Symbol fakeMethod300to399(
int                        CUP$ASTPHP5Parser$act_num,
java_cup.runtime.lr_parser CUP$ASTPHP5Parser$parser,
java.util.Stack            CUP$ASTPHP5Parser$stack,
int                        CUP$ASTPHP5Parser$top)
throws java.lang.Exception
{
java_cup.runtime.Symbol CUP$ASTPHP5Parser$result;
switch (CUP$ASTPHP5Parser$act_num) {
          case 300: // expr_without_variable_and_class_instance ::= expr T_IS_EQUAL expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_EQUAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // expr_without_variable_and_class_instance ::= expr T_IS_NOT_EQUAL expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_NOT_EQUAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // expr_without_variable_and_class_instance ::= expr T_RGREATER expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.RGREATER, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // expr_without_variable_and_class_instance ::= expr T_IS_SMALLER_OR_EQUAL expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_SMALLER_OR_EQUAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // expr_without_variable_and_class_instance ::= expr T_LGREATER expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.LGREATER, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // expr_without_variable_and_class_instance ::= expr T_IS_GREATER_OR_EQUAL expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_GREATER_OR_EQUAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // expr_without_variable_and_class_instance ::= expr T_SPACESHIP expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.SPACESHIP, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // expr_without_variable_and_class_instance ::= expr T_INSTANCEOF class_name_reference
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new InstanceOfExpression(exprleft, classNameright, expr , className);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // expr_without_variable_and_class_instance ::= parenthesis_expr
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // expr_without_variable_and_class_instance ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr
            {
              Expression RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition, ConditionalExpression.OperatorType.QUESTION_MARK, ifTrue, ifFalse);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // expr_without_variable_and_class_instance ::= expr T_QUESTION_MARK T_NEKUDOTAIM expr
            {
              Expression RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new ConditionalExpression(condleft, ifFalseright, cond, ConditionalExpression.OperatorType.ELVIS, null, ifFalse);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // expr_without_variable_and_class_instance ::= expr T_COALESCE expr
            {
              Expression RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new ConditionalExpression(condleft, ifFalseright, cond, ConditionalExpression.OperatorType.COALESCE, null, ifFalse);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // expr_without_variable_and_class_instance ::= internal_functions_in_yacc
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // expr_without_variable_and_class_instance ::= T_INT_CAST expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.Type.INT);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // expr_without_variable_and_class_instance ::= T_DOUBLE_CAST expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.Type.REAL);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // expr_without_variable_and_class_instance ::= T_STRING_CAST expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.Type.STRING);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // expr_without_variable_and_class_instance ::= T_ARRAY_CAST expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.Type.ARRAY);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // expr_without_variable_and_class_instance ::= T_OBJECT_CAST expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.Type.OBJECT);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // expr_without_variable_and_class_instance ::= T_BOOL_CAST expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.Type.BOOL);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // expr_without_variable_and_class_instance ::= T_UNSET_CAST expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.Type.UNSET);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // expr_without_variable_and_class_instance ::= T_EXIT exit_expr
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	Identifier id = new Identifier(startleft, startright, start);
	FunctionName name = new FunctionName(startleft, startright, id);
	FunctionInvocation result = new FunctionInvocation(startleft, exprright, name, expList);
	RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // expr_without_variable_and_class_instance ::= T_AT expr
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	IgnoreError ignoreError = new IgnoreError(startleft, exprright, expr);
	RESULT = ignoreError;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // expr_without_variable_and_class_instance ::= scalar
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = scalar;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // expr_without_variable_and_class_instance ::= array_creation
            {
              Expression RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression array = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = array;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // expr_without_variable_and_class_instance ::= T_BACKQUATE encaps_list T_BACKQUATE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	BackTickExpression backTickExpression = new BackTickExpression(startleft, endright, list);
	RESULT = backTickExpression;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // expr_without_variable_and_class_instance ::= T_PRINT expr
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	Identifier id = new Identifier(startleft, startright, "print");
	FunctionName name = new FunctionName(startleft, startright, id);
	FunctionInvocation result = new FunctionInvocation(startleft, exprright, name, expList);
	RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // expr_without_variable_and_class_instance ::= T_YIELD
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new YieldExpression(sleft, sright, null);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // expr_without_variable_and_class_instance ::= T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE optional_return_type lexical_vars T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Expression returnType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new LambdaFunctionDeclaration(sleft, blockEndright, paramList, returnType, varsList,
		new Block(blockStartleft, blockEndright, list), isReference.booleanValue(), false);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // expr_without_variable_and_class_instance ::= T_STATIC T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE optional_return_type lexical_vars T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
            {
              Expression RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-10)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-10)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-10)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Expression returnType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new LambdaFunctionDeclaration(sleft, blockEndright, paramList, returnType, varsList,
		new Block(blockStartleft, blockEndright, list), isReference.booleanValue(), true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-10)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // expr_without_variable_and_class_instance ::= expression_array_access
            {
              Expression RESULT =null;
		int eaaleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eaaright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression eaa = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = eaa;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // lexical_vars ::=
            {
              List RESULT =null;

	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("lexical_vars",30, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // lexical_vars ::= T_USE T_OPEN_PARENTHESE lexical_var_list T_CLOSE_PARENTHESE
            {
              List RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("lexical_vars",30, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // lexical_var_list ::= lexical_var_list T_COMMA T_VARIABLE
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Variable v = new Variable(varleft, varright, var);
	list.add(v);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",31, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // lexical_var_list ::= lexical_var_list T_COMMA T_REFERENCE T_VARIABLE
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	list.add(new Reference (refleft, varright, new Variable(varleft, varright, var)));
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",31, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // lexical_var_list ::= T_VARIABLE
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	list.add(new Variable(varleft, varright, var));
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",31, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // lexical_var_list ::= T_REFERENCE T_VARIABLE
            {
              List RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	list.add(new Reference (refleft, varright, new Variable(varleft, varright, var)));
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",31, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // function_call ::= namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new FunctionInvocation(listleft, eright,
		new FunctionName(listleft, listright,
			new NamespaceName(listleft, listright, list, false, false)), parameters);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",48, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // function_call ::= T_NAMESPACE T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new FunctionInvocation(sleft, eright,
		new FunctionName(sleft, listright,
			new NamespaceName(sleft, listright, list, false, true)), parameters);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",48, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // function_call ::= T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new FunctionInvocation(sleft, eright,
		new FunctionName(sleft, listright,
			new NamespaceName(sleft, listright, list, true, false)), parameters);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",48, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM string_st T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new StaticMethodInvocation(classNameleft, eright, className,
		new FunctionInvocation(fnleft, eright,
			new FunctionName(fnleft, fnright,
				new Identifier(fnleft, fnright, fn)), parameters));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",48, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new StaticMethodInvocation(classNameleft, eright, className,
		new FunctionInvocation(reflectionNameleft, eright,
			new FunctionName(reflectionNameleft, reflectionNameright, reflectionName), parameters));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",48, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_CURLY_OPEN expr T_CURLY_CLOSE T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ReflectionVariable reflectionVariable = new ReflectionVariable(oleft, cright, expr);
	RESULT = new StaticMethodInvocation(classNameleft, eright, className,
		new FunctionInvocation(oleft, eright,
			new FunctionName(oleft, cright, reflectionVariable), parameters));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",48, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM string_st T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new StaticMethodInvocation(classNameleft, eright, className,
		new FunctionInvocation(fnleft, eright,
			new FunctionName(fnleft, fnright,
				new Identifier(fnleft, fnright, fn)), parameters));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",48, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new StaticMethodInvocation(classNameleft, eright, className,
		new FunctionInvocation(reflectionNameleft, eright,
			new FunctionName(reflectionNameleft, reflectionNameright, reflectionName), parameters));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",48, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM T_CURLY_OPEN expr T_CURLY_CLOSE T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ReflectionVariable reflectionVariable = new ReflectionVariable(oleft, cright, expr);
    RESULT = new StaticMethodInvocation(classNameleft, eright, className,
		new FunctionInvocation(oleft, eright,
			new FunctionName(oleft, cright, reflectionVariable), parameters));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",48, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new FunctionInvocation(reflectionNameleft, eright,
		new FunctionName(reflectionNameleft, reflectionNameright, reflectionName), parameters);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",48, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // function_call ::= function_call T_OPEN_RECT dim_offset T_CLOSE_RECT
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new DereferencedArrayAccess(varleft, endright, var, new ArrayDimension(oleft, endright, index));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",48, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // function_call ::= function_call T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		VariableBase call = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new FunctionInvocation(callleft, eright,
		new FunctionName(callleft, callright, call), parameters);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",48, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // class_name ::= T_STATIC
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new Identifier(sleft, sright, "static");

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_name",104, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // class_name ::= namespace_name
            {
              Expression RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new NamespaceName(listleft, listright, list, false, false);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_name",104, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new NamespaceName(sleft, listright, list, false, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_name",104, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // class_name ::= T_NS_SEPARATOR namespace_name
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new NamespaceName(sleft, listright, list, true, false);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_name",104, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // fully_qualified_class_name ::= namespace_name
            {
              NamespaceName RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new NamespaceName(listleft, listright, list, false, false);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",105, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // fully_qualified_class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name
            {
              NamespaceName RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new NamespaceName(sleft, listright, list, false, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",105, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // fully_qualified_class_name ::= T_NS_SEPARATOR namespace_name
            {
              NamespaceName RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new NamespaceName(sleft, listright, list, true, false);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",105, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // class_name_reference ::= class_name
            {
              ClassName RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new ClassName(classNameleft, classNameright, className);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_name_reference",140, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // class_name_reference ::= dynamic_class_name_reference
            {
              ClassName RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = className;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_name_reference",140, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // dynamic_class_name_reference ::= base_variable T_OBJECT_OPERATOR object_property dynamic_class_name_variable_properties
            {
              ClassName RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int firstVarPropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int firstVarPropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase firstVarProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);

	// now create the dispatch(es) nodes
	VariableBase dispatch = null;
	VariableBase dispatcher = var;
	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		VariableBase property = (VariableBase)listIt.next();
		dispatch = parser.createDispatch(dispatcher, property);
		dispatcher = dispatch;
	}

	// create class name from the dispatch
	ClassName name = new ClassName(varleft, propertyListright, dispatch);
	RESULT = name;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",143, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // dynamic_class_name_reference ::= base_variable
            {
              ClassName RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	 ClassName name = new ClassName(varleft, varright, var);
	 RESULT = name;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",143, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // dynamic_class_name_variable_properties ::= dynamic_class_name_variable_properties dynamic_class_name_variable_property
            {
              List RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	variables.add(var);
	RESULT = variables;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_properties",145, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // dynamic_class_name_variable_properties ::=
            {
              List RESULT =null;

	RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_properties",145, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // dynamic_class_name_variable_property ::= T_OBJECT_OPERATOR object_property
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",146, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // exit_expr ::=
            {
              Expression RESULT =null;

	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("exit_expr",49, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;

	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("exit_expr",49, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;

	RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("exit_expr",49, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // ctor_arguments ::=
            {
              List RESULT =null;

	RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",50, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;

	RESULT = paramsList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",50, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // common_scalar ::= T_LNUMBER
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.Type.INT);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // common_scalar ::= T_DNUMBER
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.Type.REAL);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.Type.STRING);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // common_scalar ::= T_LINE
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Scalar s = new Scalar(scalarleft, scalarright, "__LINE__", Scalar.Type.SYSTEM);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // common_scalar ::= T_FILE
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Scalar s = new Scalar(scalarleft, scalarright, "__FILE__", Scalar.Type.SYSTEM);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // common_scalar ::= T_DIR
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new Scalar(scalarleft, scalarright, "__DIR__", Scalar.Type.SYSTEM);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // common_scalar ::= T_CLASS_C
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Scalar s = new Scalar(scalarleft, scalarright, "__CLASS__", Scalar.Type.SYSTEM);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // common_scalar ::= T_METHOD_C
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Scalar s = new Scalar(scalarleft, scalarright, "__METHOD__", Scalar.Type.SYSTEM);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // common_scalar ::= T_FUNC_C
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Scalar s = new Scalar(scalarleft, scalarright, "__FUNCTION__", Scalar.Type.SYSTEM);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // common_scalar ::= T_NS_C
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new Scalar(scalarleft, scalarright, "__NAMESPACE__", Scalar.Type.SYSTEM);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // common_scalar ::= T_START_NOWDOC T_ENCAPSED_AND_WHITESPACE T_END_NOWDOC
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        Scalar s = new Scalar(startleft, endright, scalar, Scalar.Type.STRING);
        RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // common_scalar ::= T_START_NOWDOC T_END_NOWDOC
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        Scalar s = new Scalar(startleft, endright, "", Scalar.Type.STRING); //NOI18N
        RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // static_scalar_value ::= common_scalar
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = scalar;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar_value",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // static_scalar_value ::= namespace_name
            {
              Expression RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	if (list.size() == 1) {
            String itemName = ((Identifier)list.get(0)).getName();
            String itemNameLower = itemName.toLowerCase();
            if ("true".equals(itemNameLower) || "false".equals(itemNameLower)) { //NOI18N
                RESULT = new Scalar(listleft, listright, itemName, Scalar.Type.STRING);
            } else {
                RESULT = new NamespaceName(listleft, listright, list, false, false);
            }
	} else {
            RESULT = new NamespaceName(listleft, listright, list, false, false);
	}

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar_value",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // static_scalar_value ::= T_NAMESPACE T_NS_SEPARATOR namespace_name
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new NamespaceName(sleft, listright, list, false, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar_value",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // static_scalar_value ::= T_NS_SEPARATOR namespace_name
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new NamespaceName(sleft, listright, list, true, false);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar_value",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // static_scalar_value ::= static_class_constant
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = classConstant;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar_value",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // static_scalar_value ::= heredoc
            {
              Expression RESULT =null;
		int docleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Quote doc = (Quote)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = doc;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar_value",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // static_scalar_value ::= static_operation
            {
              Expression RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression operation = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = operation;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar_value",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // static_operation ::= static_array_creation
            {
              Expression RESULT =null;
		int arrayCreationleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayCreationright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression arrayCreation = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = arrayCreation;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // static_operation ::= static_array_creation_with_access
            {
              Expression RESULT =null;
		int arrayAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression arrayAccess = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = arrayAccess;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // static_operation ::= static_constant_array_access
            {
              Expression RESULT =null;
		int arrayAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression arrayAccess = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = arrayAccess;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // static_operation ::= T_ENCAPSED_AND_WHITESPACE T_OPEN_RECT static_scalar_value T_CLOSE_RECT
            {
              Expression RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(strleft, endright, new Identifier(strleft, strright, str), new ArrayDimension(oleft, endright, index));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // static_operation ::= T_CONSTANT_ENCAPSED_STRING T_OPEN_RECT static_scalar_value T_CLOSE_RECT
            {
              Expression RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(strleft, endright, new Identifier(strleft, strright, str), new ArrayDimension(oleft, endright, index));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // static_operation ::= static_scalar_value T_PLUS static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OperatorType.PLUS, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // static_operation ::= static_scalar_value T_MINUS static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OperatorType.MINUS, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // static_operation ::= static_scalar_value T_TIMES static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OperatorType.MUL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // static_operation ::= static_scalar_value T_POW static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OperatorType.POW, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // static_operation ::= static_scalar_value T_DIV static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OperatorType.DIV, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // static_operation ::= static_scalar_value T_PRECENT static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OperatorType.MOD, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // static_operation ::= T_NOT static_scalar_value
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.Operator.NOT);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // static_operation ::= T_TILDA static_scalar_value
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.Operator.TILDA);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // static_operation ::= static_scalar_value T_OR static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.OR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
default:
throw new Exception("Invalid action number found in internal parse table");
}
}
public final java_cup.runtime.Symbol fakeMethod400to499(
int                        CUP$ASTPHP5Parser$act_num,
java_cup.runtime.lr_parser CUP$ASTPHP5Parser$parser,
java.util.Stack            CUP$ASTPHP5Parser$stack,
int                        CUP$ASTPHP5Parser$top)
throws java.lang.Exception
{
java_cup.runtime.Symbol CUP$ASTPHP5Parser$result;
switch (CUP$ASTPHP5Parser$act_num) {
          case 400: // static_operation ::= static_scalar_value T_REFERENCE static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.AND, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // static_operation ::= static_scalar_value T_KOVA static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.XOR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // static_operation ::= static_scalar_value T_SL static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.SL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // static_operation ::= static_scalar_value T_SR static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.SR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // static_operation ::= static_scalar_value T_NEKUDA static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.CONCAT, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // static_operation ::= static_scalar_value T_LOGICAL_XOR static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.STRING_XOR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // static_operation ::= static_scalar_value T_LOGICAL_AND static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.STRING_AND, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // static_operation ::= static_scalar_value T_LOGICAL_OR static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.STRING_OR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // static_operation ::= static_scalar_value T_BOOLEAN_AND static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.BOOL_AND, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // static_operation ::= static_scalar_value T_BOOLEAN_OR static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.BOOL_OR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // static_operation ::= static_scalar_value T_IS_IDENTICAL static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_IDENTICAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // static_operation ::= static_scalar_value T_IS_NOT_IDENTICAL static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_NOT_IDENTICAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // static_operation ::= static_scalar_value T_IS_EQUAL static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_EQUAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // static_operation ::= static_scalar_value T_IS_NOT_EQUAL static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_NOT_EQUAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // static_operation ::= static_scalar_value T_RGREATER static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.RGREATER, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // static_operation ::= static_scalar_value T_LGREATER static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.LGREATER, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // static_operation ::= static_scalar_value T_IS_SMALLER_OR_EQUAL static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_SMALLER_OR_EQUAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // static_operation ::= static_scalar_value T_IS_GREATER_OR_EQUAL static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_GREATER_OR_EQUAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // static_operation ::= static_scalar_value T_SPACESHIP static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.SPACESHIP, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // static_operation ::= static_scalar_value T_QUESTION_MARK T_NEKUDOTAIM static_scalar_value
            {
              Expression RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new ConditionalExpression(condleft, ifFalseright, cond, ConditionalExpression.OperatorType.ELVIS, null, ifFalse);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // static_operation ::= static_scalar_value T_QUESTION_MARK static_scalar_value T_NEKUDOTAIM static_scalar_value
            {
              Expression RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition, ConditionalExpression.OperatorType.QUESTION_MARK, ifTrue, ifFalse);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // static_operation ::= static_scalar_value T_COALESCE static_scalar_value
            {
              Expression RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

        RESULT = new ConditionalExpression(condleft, ifFalseright, cond, ConditionalExpression.OperatorType.COALESCE, null, ifFalse);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // static_operation ::= T_PLUS static_scalar_value
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.Operator.PLUS);
	RESULT = op;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // static_operation ::= T_MINUS static_scalar_value
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.Operator.MINUS);
	RESULT = op;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // static_operation ::= T_OPEN_PARENTHESE static_scalar_value T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;

        RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // static_scalar ::= static_scalar_value
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = scalar;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar",52, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // static_class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM static_reference_constant
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int constantleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression constant = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new StaticConstantAccess(classNameleft, constantright, className, constant);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_class_constant",147, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // static_reference_constant ::= static_constant_array_access
            {
              Expression RESULT =null;
		int arrayAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression arrayAccess = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = arrayAccess;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_reference_constant",148, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // static_reference_constant ::= T_STRING
            {
              Expression RESULT =null;
		int constantNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int constantNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String constantName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new Identifier(constantNameleft, constantNameright, constantName);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_reference_constant",148, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // static_constant_array_access ::= static_constant_array_access T_OPEN_RECT static_scalar_value T_CLOSE_RECT
            {
              Expression RESULT =null;
		int arrayAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int arrayAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression arrayAccess = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new ExpressionArrayAccess(arrayAccessleft, endright, arrayAccess, new ArrayDimension(oleft, endright, index));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_constant_array_access",150, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // static_constant_array_access ::= T_STRING T_OPEN_RECT static_scalar_value T_CLOSE_RECT
            {
              Expression RESULT =null;
		int constantNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int constantNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String constantName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new ExpressionArrayAccess(constantNameleft, endright, new Identifier(constantNameleft, constantNameright, constantName), new ArrayDimension(oleft, endright, index));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_constant_array_access",150, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // static_array_creation_with_access ::= static_array_creation T_OPEN_RECT static_scalar_value T_CLOSE_RECT
            {
              Expression RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression arr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(arrleft, endright, arr, new ArrayDimension(oleft, endright, index));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_array_creation_with_access",149, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // static_array_creation_with_access ::= static_array_creation_with_access T_OPEN_RECT static_scalar_value T_CLOSE_RECT
            {
              Expression RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression acc = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(accleft, endright, acc, new ArrayDimension(oleft, endright, index));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_array_creation_with_access",149, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // static_array_creation ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Expression expr = new ArrayCreation(startleft, endright, list, ArrayCreation.Type.OLD);
	RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_array_creation",151, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // static_array_creation ::= T_OPEN_RECT static_array_pair_list T_CLOSE_RECT
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Expression expr = new ArrayCreation(startleft, endright, list, ArrayCreation.Type.NEW);
	RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_array_creation",151, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // scalar ::= T_STRING_VARNAME
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new Scalar(scalarleft, scalarright, scalar, Scalar.Type.STRING);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("scalar",55, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // scalar ::= class_constant
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = classConstant;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("scalar",55, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // scalar ::= namespace_name
            {
              Expression RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	if (list.size() == 1) {
            String itemName = ((Identifier)list.get(0)).getName();
            String itemNameLower = itemName.toLowerCase();
            if ("true".equals(itemNameLower) || "false".equals(itemNameLower)) { //NOI18N
                RESULT = new Scalar(listleft, listright, itemName, Scalar.Type.STRING);
            } else {
                RESULT = new NamespaceName(listleft, listright, list, false, false);
            }
	} else {
            RESULT = new NamespaceName(listleft, listright, list, false, false);
	}

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("scalar",55, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new NamespaceName(sleft, listright, list, false, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("scalar",55, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // scalar ::= T_NS_SEPARATOR namespace_name
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new NamespaceName(sleft, listright, list, true, false);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("scalar",55, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // scalar ::= common_scalar
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = scalar;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("scalar",55, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // scalar ::= T_QUATE encaps_list T_QUATE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Quote quote = new Quote(startleft, endright, list, Quote.Type.QUOTE);
	RESULT = quote;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("scalar",55, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // scalar ::= heredoc
            {
              Expression RESULT =null;
		int docleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Quote doc = (Quote)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = doc;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("scalar",55, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // heredoc ::= T_START_HEREDOC encaps_list T_END_HEREDOC
            {
              Quote RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Quote hereDoc = new Quote(startleft, endright, list, Quote.Type.HEREDOC);
    RESULT = hereDoc;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("heredoc",96, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // static_array_pair_list ::=
            {
              List RESULT =null;

	List list = new LinkedList();
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",56, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;

	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",56, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // possible_comma ::=
            {
              Object RESULT =null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("possible_comma",57, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // possible_comma ::= T_COMMA
            {
              Object RESULT =null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("possible_comma",57, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",58, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",58, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",58, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // non_empty_static_array_pair_list ::= static_scalar
            {
              List RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",58, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // parenthesis_expr ::= T_OPEN_PARENTHESE expr_without_class_instance T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ParenthesisExpression parenthesisExpression = new ParenthesisExpression(startleft, endright, expr);
    RESULT = parenthesisExpression;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("parenthesis_expr",63, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // parenthesis_expr ::= T_OPEN_PARENTHESE yield_expr T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ParenthesisExpression parenthesisExpression = new ParenthesisExpression(startleft, endright, expr);
    RESULT = parenthesisExpression;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("parenthesis_expr",63, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // yield_expr ::= T_YIELD expr_without_variable
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new YieldExpression(sleft, ewvright, ewv);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("yield_expr",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // yield_expr ::= T_YIELD variable
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new YieldExpression(sleft, varright, var);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("yield_expr",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // yield_expr ::= T_YIELD expr T_DOUBLE_ARROW expr_without_variable
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new YieldExpression(sleft, ewvright, e, ewv);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("yield_expr",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // yield_expr ::= T_YIELD expr T_DOUBLE_ARROW variable
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new YieldExpression(sleft, varright, e, var);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("yield_expr",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // yield_from_expr ::= T_YIELD_FROM variable
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new YieldFromExpression(sleft, varright, var);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("yield_from_expr",62, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // yield_from_expr ::= T_YIELD_FROM expr_without_variable
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new YieldFromExpression(sleft, ewvright, ewv);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("yield_from_expr",62, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // expr_without_class_instance ::= r_variable
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_class_instance",60, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // expr_without_class_instance ::= expr_without_variable_and_class_instance
            {
              Expression RESULT =null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = ewv;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_class_instance",60, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // expr ::= r_variable
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr",59, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // expr ::= expr_without_variable
            {
              Expression RESULT =null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = ewv;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr",59, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // r_variable ::= variable
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("r_variable",128, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // w_variable ::= variable
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("w_variable",103, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // rw_variable ::= variable
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("rw_variable",130, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // field_or_method_access ::= base_variable_with_function_calls T_OBJECT_OPERATOR object_property method_or_not array_access_or_not variable_properties
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List aa = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = parser.createDispatch(false, var, memberProperty, memberPropertyleft, memberPropertyright, paramsList, paramsListright, propertyList, aa);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("field_or_method_access",97, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // field_or_method_access ::= function_call T_PAAMAYIM_NEKUDOTAYIM object_property method_or_not array_access_or_not variable_properties
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List aa = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = parser.createDispatch(true, var, memberProperty, memberPropertyleft, memberPropertyright, paramsList, paramsListright, propertyList, aa);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("field_or_method_access",97, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // variable ::= field_or_method_access
            {
              VariableBase RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int accright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase acc = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = acc;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable",114, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // variable ::= base_variable_with_function_calls
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable",114, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // variable_properties ::= variable_properties variable_property
            {
              List RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int variablePropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int variablePropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Pair<VariableBase,Boolean> variableProperty = (Pair<VariableBase,Boolean>)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	variables.add(variableProperty);
	RESULT = variables;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_properties",111, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // variable_properties ::=
            {
              List RESULT =null;

	RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_properties",111, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // variable_property ::= T_OBJECT_OPERATOR object_property method_or_not array_access_or_not
            {
              Pair<VariableBase,Boolean> RESULT =null;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List aa = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = parser.createDispatchProperty(false, memberProperty, memberPropertyleft, memberPropertyright, paramsList, paramsListright, aa);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_property",132, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // variable_property ::= T_PAAMAYIM_NEKUDOTAYIM object_property method_or_not array_access_or_not
            {
              Pair<VariableBase,Boolean> RESULT =null;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List aa = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = parser.createDispatchProperty(true, memberProperty, memberPropertyleft, memberPropertyright, paramsList, paramsListright, aa);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_property",132, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // method_or_not ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;

	RESULT = paramsList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_or_not",110, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // method_or_not ::=
            {
              List RESULT =null;

	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_or_not",110, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // array_access_or_not ::= T_OPEN_RECT dim_offset T_CLOSE_RECT
            {
              List RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    list.add(new ArrayDimension(oleft, endright, index));
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_access_or_not",68, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // array_access_or_not ::= array_access_or_not T_OPEN_RECT dim_offset T_CLOSE_RECT
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(new ArrayDimension(oleft, endright, index));
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_access_or_not",68, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // array_access_or_not ::=
            {
              List RESULT =null;

    RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_access_or_not",68, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // variable_without_objects ::= reference_variable
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",131, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // variable_without_objects ::= simple_indirect_reference reference_variable
            {
              Variable RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	// the ref_count counts the number of reflection (DOLLAR sign) so now we should
	// accomulate the dolars into reflection variables
	Variable finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, finalVar);
	}
	RESULT = finalVar;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",131, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // static_member ::= class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new StaticFieldAccess(classNameleft, varright, className, var);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_member",133, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // static_member ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new StaticFieldAccess(classNameleft, varright, className, var);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_member",133, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // variable_class_name ::= reference_variable
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_class_name",65, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // base_variable_with_function_calls ::= base_variable
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",152, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // base_variable_with_function_calls ::= function_call
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",152, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // expression_array_access ::= constant_array_access
            {
              Expression RESULT =null;
		int arrayAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression arrayAccess = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = arrayAccess;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expression_array_access",98, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // expression_array_access ::= T_ENCAPSED_AND_WHITESPACE T_OPEN_RECT dim_offset T_CLOSE_RECT
            {
              Expression RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(strleft, endright, new Identifier(strleft, strright, str), new ArrayDimension(oleft, endright, index));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expression_array_access",98, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // expression_array_access ::= T_CONSTANT_ENCAPSED_STRING T_OPEN_RECT dim_offset T_CLOSE_RECT
            {
              Expression RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(strleft, endright, new Identifier(strleft, strright, str), new ArrayDimension(oleft, endright, index));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expression_array_access",98, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // expression_array_access ::= array_creation_with_access
            {
              Expression RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression arr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = arr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expression_array_access",98, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // constant_array_access ::= constant_array_access T_OPEN_RECT dim_offset T_CLOSE_RECT
            {
              Expression RESULT =null;
		int arrayAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int arrayAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression arrayAccess = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(arrayAccessleft, endright, arrayAccess, new ArrayDimension(oleft, endright, index));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("constant_array_access",99, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // constant_array_access ::= T_STRING T_OPEN_RECT dim_offset T_CLOSE_RECT
            {
              Expression RESULT =null;
		int constantNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int constantNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String constantName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(constantNameleft, endright, new Identifier(constantNameleft, constantNameright, constantName), new ArrayDimension(oleft, endright, index));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("constant_array_access",99, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // array_creation_with_access ::= array_creation T_OPEN_RECT dim_offset T_CLOSE_RECT
            {
              Expression RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression arr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(arrleft, endright, arr, new ArrayDimension(oleft, endright, index));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_creation_with_access",101, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // array_creation_with_access ::= array_creation_with_access T_OPEN_RECT dim_offset T_CLOSE_RECT
            {
              Expression RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression acc = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(accleft, endright, acc, new ArrayDimension(oleft, endright, index));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_creation_with_access",101, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // array_creation ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Expression expr = new ArrayCreation(startleft, endright, list, ArrayCreation.Type.OLD);
	RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_creation",100, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // array_creation ::= T_OPEN_RECT array_pair_list T_CLOSE_RECT
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Expression expr = new ArrayCreation(startleft, endright, list, ArrayCreation.Type.NEW);
	RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_creation",100, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // base_variable ::= reference_variable
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable",144, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // base_variable ::= T_OPEN_PARENTHESE anonymous_class T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int clsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int clsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		ClassInstanceCreation cls = (ClassInstanceCreation)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new AnonymousObjectVariable(startleft, endright, cls);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable",144, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // base_variable ::= T_OPEN_PARENTHESE T_NEW class_name_reference ctor_arguments T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(nleft, ctorright, className, ctor);
    RESULT = new AnonymousObjectVariable(startleft, endright, classInstanceCreation);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable",144, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
default:
throw new Exception("Invalid action number found in internal parse table");
}
}
public final java_cup.runtime.Symbol fakeMethod500to599(
int                        CUP$ASTPHP5Parser$act_num,
java_cup.runtime.lr_parser CUP$ASTPHP5Parser$parser,
java.util.Stack            CUP$ASTPHP5Parser$stack,
int                        CUP$ASTPHP5Parser$top)
throws java.lang.Exception
{
java_cup.runtime.Symbol CUP$ASTPHP5Parser$result;
switch (CUP$ASTPHP5Parser$act_num) {
          case 500: // base_variable ::= simple_indirect_reference reference_variable
            {
              VariableBase RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	// the ref_count counts the number of reflection (DOLLAR sign) so now we should
	// accomulate the dolars into reflection variables
	VariableBase finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, finalVar);
	}
	RESULT = finalVar;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable",144, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // base_variable ::= static_member
            {
              VariableBase RESULT =null;
		int staticFieldAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int staticFieldAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase staticFieldAccess = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = staticFieldAccess;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable",144, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Variable var = new ArrayAccess(varNameleft, endright, varName, new ArrayDimension(oleft, endright, index), ArrayAccess.Type.VARIABLE_ARRAY);
	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reference_variable",64, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Variable var = new ArrayAccess(varNameleft, endright, varName, new ArrayDimension(oleft, endright, index), ArrayAccess.Type.VARIABLE_HASHTABLE);
	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reference_variable",64, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // reference_variable ::= compound_variable
            {
              Variable RESULT =null;
		int comp_varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int comp_varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable comp_var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = comp_var;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reference_variable",64, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // compound_variable ::= tracked_variable
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("compound_variable",66, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE
            {
              Variable RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ReflectionVariable var = new ReflectionVariable(startleft, endright, expr);
	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("compound_variable",66, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // dim_offset ::=
            {
              Expression RESULT =null;

	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dim_offset",67, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // dim_offset ::= expr
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dim_offset",67, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // object_property ::= object_dim_list
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("object_property",69, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // object_property ::= variable_without_objects
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("object_property",69, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Variable varArray = new ArrayAccess(varleft, endright, var, new ArrayDimension(oleft, endright, index), ArrayAccess.Type.VARIABLE_ARRAY);
	RESULT = varArray;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("object_dim_list",70, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Variable varArray = new ArrayAccess(varleft, endright, var, new ArrayDimension(oleft, endright, index), ArrayAccess.Type.VARIABLE_HASHTABLE);
	RESULT = varArray;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("object_dim_list",70, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // object_dim_list ::= variable_name
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("object_dim_list",70, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // variable_name ::= string_st
            {
              VariableBase RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new Variable(varNameleft, varNameright, varName);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_name",71, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new ReflectionVariable(startleft, endright, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_name",71, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // simple_indirect_reference ::= T_DOLLAR
            {
              Integer RESULT =null;

	RESULT = Integer.valueOf(1);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",72, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR
            {
              Integer RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer ref = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;

	RESULT = Integer.valueOf(1 + ref.intValue());

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",72, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // assignment_list ::= assignment_list T_COMMA assignment_list_element
            {
              List RESULT =null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase element = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	if (element != null) {
		listElements.add(element);
	}
	RESULT = listElements;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("assignment_list",73, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // assignment_list ::= assignment_list_element
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);
	}
	RESULT = listElements;
	;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("assignment_list",73, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // assignment_list_element ::= variable
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",74, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // assignment_list_element ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ListVariable vars = new ListVariable(startleft, endright, varList);
	RESULT = vars;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",74, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // assignment_list_element ::=
            {
              VariableBase RESULT =null;

	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",74, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // array_pair_list ::=
            {
              List RESULT =null;

	List list = new LinkedList();
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_pair_list",75, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // array_pair_list ::= non_empty_array_pair_list possible_comma
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;

	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_pair_list",75, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",76, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",76, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",76, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // non_empty_array_pair_list ::= expr
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",76, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Reference value = new Reference(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",76, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_variable
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Reference ref = new Reference(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",76, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_variable
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	Reference value = new Reference(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",76, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // non_empty_array_pair_list ::= T_REFERENCE w_variable
            {
              List RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	Reference ref = new Reference(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",76, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // encaps_list ::= encaps_list encaps_var
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	list.add(var);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_list",77, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.Type.UNKNOWN : Scalar.Type.STRING);
	list.add(scalar);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_list",77, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // encaps_list ::=
            {
              List RESULT =null;

	RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_list",77, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // encaps_var ::= tracked_variable
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var",78, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT
            {
              VariableBase RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Variable var = new ArrayAccess(varNameleft, endright, varName, new ArrayDimension(oleft, endright, index), ArrayAccess.Type.VARIABLE_ARRAY);
	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var",78, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Variable property = new Variable(stringleft, stringright, string);
	VariableBase dispatch = parser.createDispatch(var, property);
	RESULT = dispatch;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var",78, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ReflectionVariable var = new ReflectionVariable(startleft, endright, expr);
	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var",78, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Variable var = new Variable(varNameleft, varNameright, varName);
	Variable indexedVar = new ArrayAccess(startleft, endright, var, new ArrayDimension(oleft, cright, index), ArrayAccess.Type.VARIABLE_ARRAY);
	RESULT = indexedVar;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var",78, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	ReflectionVariable ref = new ReflectionVariable(startleft, endright, var);
	RESULT = ref;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var",78, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // encaps_var_offset ::= string_st
            {
              Expression RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Identifier id = new Identifier(stringleft, stringright, string);
	RESULT = id;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",79, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // encaps_var_offset ::= T_NUM_STRING
            {
              Expression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Scalar scalar = new Scalar(numleft,numright, num, Scalar.Type.REAL);
	RESULT = scalar;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",79, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 544: // encaps_var_offset ::= tracked_variable
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",79, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 545: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Identifier id = new Identifier(startleft, startright, "isset");
	FunctionName name = new FunctionName(startleft, startright, id);
	FunctionInvocation result = new FunctionInvocation(startleft, endright, name, varList);
	RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",80, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 546: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Identifier id = new Identifier(startleft, startright, "empty");
	FunctionName name = new FunctionName(startleft, startright, id);
	LinkedList varList = new LinkedList();
	varList.add(var);
	FunctionInvocation result = new FunctionInvocation(startleft, endright, name, varList);
	RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",80, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 547: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE expr_without_variable T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Identifier id = new Identifier(startleft, startright, "empty");
	FunctionName name = new FunctionName(startleft, startright, id);
	LinkedList exprList = new LinkedList();
	exprList.add(expr);
	FunctionInvocation result = new FunctionInvocation(startleft, endright, name, exprList);
	RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",80, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 548: // internal_functions_in_yacc ::= T_INCLUDE expr
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Include result = new Include(includeleft, exprright, expr, Include.Type.INCLUDE);
	RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",80, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 549: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Include result = new Include(includeleft, exprright, expr, Include.Type.INCLUDE_ONCE);
	RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",80, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 550: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Identifier id = new Identifier(startleft, startright, "eval");
	FunctionName name = new FunctionName(startleft, startright, id);
	LinkedList exprList = new LinkedList();
	exprList.add(expr);
	FunctionInvocation result = new FunctionInvocation(startleft, endright, name, exprList);
	RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",80, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 551: // internal_functions_in_yacc ::= T_REQUIRE expr
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Include result = new Include(includeleft, exprright, expr, Include.Type.REQUIRE);
	RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",80, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 552: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	Include result = new Include(includeleft, exprright, expr, Include.Type.REQUIRE_ONCE);
	RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",80, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 553: // isset_variables ::= isset_variable
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("isset_variables",134, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 554: // isset_variables ::= isset_variables T_COMMA isset_variable
            {
              List RESULT =null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	varList.add(var);
	RESULT = varList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("isset_variables",134, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 555: // isset_variable ::= variable
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("isset_variable",135, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 556: // isset_variable ::= expression_array_access
            {
              Expression RESULT =null;
		int arrayAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression arrayAccess = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = arrayAccess;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("isset_variable",135, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 557: // isset_variable ::= class_name T_PAAMAYIM_NEKUDOTAYIM constant_array_access
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int arrayAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression arrayAccess = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new StaticConstantAccess(classNameleft, arrayAccessright, className, arrayAccess);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("isset_variable",135, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 558: // isset_variable ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM constant_array_access
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int arrayAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression arrayAccess = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new StaticConstantAccess(classNameleft, arrayAccessright, className, arrayAccess);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("isset_variable",135, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 559: // class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM reference_constant
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int constantleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression constant = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new StaticConstantAccess(classNameleft, constantright, className, constant);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_constant",141, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 560: // class_constant ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM reference_constant
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int constantleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression constant = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new StaticConstantAccess(classNameleft, constantright, className, constant);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_constant",141, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 561: // reference_constant ::= reference_constant T_OPEN_RECT dim_offset T_CLOSE_RECT
            {
              Expression RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression constant = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new ExpressionArrayAccess(constantleft, endright, constant, new ArrayDimension(oleft, endright, index));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reference_constant",142, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 562: // reference_constant ::= T_STRING
            {
              Expression RESULT =null;
		int constantNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int constantNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String constantName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new Identifier(constantNameleft, constantNameright, constantName);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reference_constant",142, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 563: // tracked_variable ::= T_VARIABLE
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

	RESULT = new Variable(varNameleft, varNameright, varName);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("tracked_variable",136, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 564: // string_st ::= T_STRING
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = value;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("string_st",81, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 565: // string_st ::= T_DEFINE
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = value;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("string_st",81, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 566: // anonymous_class ::= T_NEW T_CLASS ctor_arguments extends_from implements_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE
            {
              ClassInstanceCreation RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Expression superClass = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    final int counter = parser.incrementAndGetAnonymousClassCounter();
	Block block = new Block(blockStartleft, blockEndright, statementList);
	ClassInstanceCreation classInstance = ClassInstanceCreation.anonymous(parser.getFileName(), counter, startleft, blockEndright, cleft, ctor, superClass, interfaces, block);
	RESULT = classInstance;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("anonymous_class",102, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
default:
throw new Exception("Invalid action number found in internal parse table");
}
}

}