/* The following code was generated by JFlex 1.5.1 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2015 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2015 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.editor.parser;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import org.netbeans.modules.php.editor.*;
import org.netbeans.modules.php.editor.parser.astnodes.*;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP2", "UUF_UNUSED_FIELD"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>/home/gapon/worx/sun/nb-main/php.editor/tools/ASTPHP5Scanner.flex</tt>
 */
public class ASTPHP5Scanner implements Scanner {
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ST_IN_SCRIPTING = 2;
  public static final int ST_LOOKING_FOR_CLASS_CONST = 4;
  public static final int ST_DOUBLE_QUOTES = 6;
  public static final int ST_BACKQUOTE = 8;
  public static final int ST_HEREDOC = 10;
  public static final int ST_START_HEREDOC = 12;
  public static final int ST_END_HEREDOC = 14;
  public static final int ST_NOWDOC = 16;
  public static final int ST_START_NOWDOC = 18;
  public static final int ST_END_NOWDOC = 20;
  public static final int ST_LOOKING_FOR_PROPERTY = 22;
  public static final int ST_LOOKING_FOR_VARNAME = 24;
  public static final int ST_VAR_OFFSET = 26;
  public static final int ST_COMMENT = 28;
  public static final int ST_DOCBLOCK = 30;
  public static final int ST_ONE_LINE_COMMENT = 32;
  public static final int ST_IN_SHORT_ECHO = 34;
  public static final int ST_HALTED_COMPILER = 36;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
    16, 16, 17, 17, 18, 18
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\17\1\16\1\107\1\107\1\20\22\0\1\17\1\65\1\22"+
    "\1\106\1\21\1\71\1\72\1\105\1\60\1\61\1\67\1\4\1\75"+
    "\1\54\1\2\1\70\1\5\1\11\10\1\1\56\1\25\1\66\1\26"+
    "\1\55\1\101\1\102\1\7\1\10\1\36\1\32\1\3\1\33\1\51"+
    "\1\45\1\30\1\62\1\50\1\44\1\53\1\35\1\37\1\52\1\64"+
    "\1\42\1\41\1\31\1\34\1\57\1\46\1\6\1\43\1\13\1\76"+
    "\1\15\1\77\1\74\1\63\1\23\1\7\1\10\1\36\1\32\1\3"+
    "\1\33\1\51\1\45\1\30\1\62\1\50\1\44\1\53\1\35\1\37"+
    "\1\52\1\64\1\42\1\104\1\31\1\34\1\57\1\46\1\6\1\43"+
    "\1\13\1\24\1\73\1\103\1\100\6\13\1\110\44\13\1\13\12\13"+
    "\1\13\4\13\1\13\5\13\27\13\1\13\37\13\1\13\10\13\60\12"+
    "\2\27\115\12\1\40\u0142\12\4\0\14\12\16\0\5\12\7\0\1\12"+
    "\1\0\1\12\201\0\5\12\1\0\2\12\2\0\4\12\10\0\1\12"+
    "\1\0\3\12\1\0\1\12\1\0\24\12\1\0\123\12\1\0\213\12"+
    "\10\0\236\12\11\0\46\12\2\0\1\12\7\0\47\12\110\0\33\12"+
    "\5\0\3\12\55\0\53\12\25\0\12\14\4\0\2\12\1\0\143\12"+
    "\1\0\1\12\17\0\2\12\7\0\2\12\12\14\3\12\2\0\1\12"+
    "\20\0\1\12\1\0\36\12\35\0\131\12\13\0\1\12\16\0\12\14"+
    "\41\12\11\0\2\12\4\0\1\12\5\0\26\12\4\0\1\12\11\0"+
    "\1\12\3\0\1\12\27\0\31\12\107\0\1\12\1\0\13\12\127\0"+
    "\66\12\3\0\1\12\22\0\1\12\7\0\12\12\4\0\12\14\1\0"+
    "\7\12\1\0\7\12\5\0\10\12\2\0\2\12\2\0\26\12\1\0"+
    "\7\12\1\0\1\12\3\0\4\12\3\0\1\12\20\0\1\12\15\0"+
    "\2\12\1\0\3\12\4\0\12\14\2\12\23\0\6\12\4\0\2\12"+
    "\2\0\26\12\1\0\7\12\1\0\2\12\1\0\2\12\1\0\2\12"+
    "\37\0\4\12\1\0\1\12\7\0\12\14\2\0\3\12\20\0\11\12"+
    "\1\0\3\12\1\0\26\12\1\0\7\12\1\0\2\12\1\0\5\12"+
    "\3\0\1\12\22\0\1\12\17\0\2\12\4\0\12\14\25\0\10\12"+
    "\2\0\2\12\2\0\26\12\1\0\7\12\1\0\2\12\1\0\5\12"+
    "\3\0\1\12\36\0\2\12\1\0\3\12\4\0\12\14\1\0\1\12"+
    "\21\0\1\12\1\0\6\12\3\0\3\12\1\0\4\12\3\0\2\12"+
    "\1\0\1\12\1\0\2\12\3\0\2\12\3\0\3\12\3\0\14\12"+
    "\26\0\1\12\25\0\12\14\25\0\10\12\1\0\3\12\1\0\27\12"+
    "\1\0\12\12\1\0\5\12\3\0\1\12\32\0\2\12\6\0\2\12"+
    "\4\0\12\14\25\0\10\12\1\0\3\12\1\0\27\12\1\0\12\12"+
    "\1\0\5\12\3\0\1\12\40\0\1\12\1\0\2\12\4\0\12\14"+
    "\1\0\2\12\22\0\10\12\1\0\3\12\1\0\51\12\2\0\1\12"+
    "\20\0\1\12\21\0\2\12\4\0\12\14\12\0\6\12\5\0\22\12"+
    "\3\0\30\12\1\0\11\12\1\0\1\12\2\0\7\12\72\0\60\12"+
    "\1\0\2\12\14\0\7\12\11\0\12\14\47\0\2\12\1\0\1\12"+
    "\2\0\2\12\1\0\1\12\2\0\1\12\6\0\4\12\1\0\7\12"+
    "\1\0\3\12\1\0\1\12\1\0\1\12\2\0\2\12\1\0\4\12"+
    "\1\0\2\12\11\0\1\12\2\0\5\12\1\0\1\12\11\0\12\14"+
    "\2\0\4\12\40\0\1\12\37\0\12\14\26\0\10\12\1\0\44\12"+
    "\33\0\5\12\163\0\53\12\24\0\1\12\12\14\6\0\6\12\4\0"+
    "\4\12\3\0\1\12\3\0\2\12\7\0\3\12\4\0\15\12\14\0"+
    "\1\12\1\0\12\14\6\0\46\12\1\0\1\12\5\0\1\12\2\0"+
    "\53\12\1\0\u014d\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0"+
    "\4\12\2\0\51\12\1\0\4\12\2\0\41\12\1\0\4\12\2\0"+
    "\7\12\1\0\1\12\1\0\4\12\2\0\17\12\1\0\71\12\1\0"+
    "\4\12\2\0\103\12\45\0\20\12\20\0\125\12\14\0\u026c\12\2\0"+
    "\21\12\1\0\32\12\5\0\113\12\25\0\15\12\1\0\4\12\16\0"+
    "\22\12\16\0\22\12\16\0\15\12\1\0\3\12\17\0\64\12\43\0"+
    "\1\12\4\0\1\12\3\0\12\14\46\0\12\14\6\0\130\12\10\0"+
    "\51\12\1\0\1\12\5\0\106\12\12\0\35\12\51\0\12\14\36\12"+
    "\2\0\5\12\13\0\54\12\25\0\7\12\10\0\12\14\46\0\27\12"+
    "\11\0\65\12\53\0\12\14\6\0\12\14\15\0\1\12\135\0\57\12"+
    "\21\0\7\12\4\0\12\14\51\0\36\12\15\0\2\12\12\14\54\12"+
    "\32\0\44\12\34\0\12\14\3\0\3\12\12\14\44\12\153\0\4\12"+
    "\1\0\4\12\3\0\2\12\11\0\300\12\100\0\u0116\12\2\0\6\12"+
    "\2\0\46\12\2\0\6\12\2\0\10\12\1\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\37\12\2\0\65\12\1\0\7\12\1\0\1\12"+
    "\3\0\3\12\1\0\7\12\3\0\4\12\2\0\6\12\4\0\15\12"+
    "\5\0\3\12\1\0\7\12\53\0\1\107\1\107\107\0\1\12\15\0"+
    "\1\12\20\0\15\12\145\0\1\12\4\0\1\12\2\0\12\12\1\0"+
    "\1\12\3\0\5\12\6\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\1\47\3\12\1\0\13\12\2\0\4\12\5\0\5\12\4\0\1\12"+
    "\64\0\2\12\u0a7b\0\57\12\1\0\57\12\1\0\205\12\6\0\4\12"+
    "\3\0\2\12\14\0\46\12\1\0\1\12\5\0\1\12\2\0\70\12"+
    "\7\0\1\12\20\0\27\12\11\0\7\12\1\0\7\12\1\0\7\12"+
    "\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12"+
    "\120\0\1\12\u01d5\0\2\12\52\0\5\12\5\0\2\12\4\0\126\12"+
    "\6\0\3\12\1\0\132\12\1\0\4\12\5\0\51\12\3\0\136\12"+
    "\21\0\33\12\65\0\20\12\u0200\0\u19b6\12\112\0\u51cd\12\63\0\u048d\12"+
    "\103\0\56\12\2\0\u010d\12\3\0\20\12\12\14\2\12\24\0\57\12"+
    "\20\0\31\12\10\0\106\12\61\0\11\12\2\0\147\12\2\0\4\12"+
    "\1\0\4\12\14\0\13\12\115\0\12\12\1\0\3\12\1\0\4\12"+
    "\1\0\27\12\35\0\64\12\16\0\62\12\34\0\12\14\30\0\6\12"+
    "\3\0\1\12\4\0\12\14\34\12\12\0\27\12\31\0\35\12\7\0"+
    "\57\12\34\0\1\12\12\14\46\0\51\12\27\0\3\12\1\0\10\12"+
    "\4\0\12\14\6\0\27\12\3\0\1\12\5\0\60\12\1\0\1\12"+
    "\3\0\2\12\2\0\5\12\2\0\1\12\1\0\1\12\30\0\3\12"+
    "\2\0\13\12\7\0\3\12\14\0\6\12\2\0\6\12\2\0\6\12"+
    "\11\0\7\12\1\0\7\12\221\0\43\12\15\0\12\14\6\0\u2ba4\12"+
    "\14\0\27\12\4\0\61\12\u2104\0\u016e\12\2\0\152\12\46\0\7\12"+
    "\14\0\5\12\5\0\1\12\1\0\12\12\1\0\15\12\1\0\5\12"+
    "\1\0\1\12\1\0\2\12\1\0\2\12\1\0\154\12\41\0\u016b\12"+
    "\22\0\100\12\2\0\66\12\50\0\14\12\164\0\5\12\1\0\207\12"+
    "\23\0\12\14\7\0\32\12\6\0\32\12\13\0\131\12\3\0\6\12"+
    "\2\0\6\12\2\0\6\12\2\0\3\12\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\15\0\2\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\4\4\6\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\17\6\1\20\1\21\1\22\1\6"+
    "\1\23\1\24\1\6\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\3\1\44\2\45\1\46\2\3\1\47"+
    "\1\3\1\50\2\3\1\51\1\3\1\1\1\3\1\1"+
    "\2\3\2\52\1\53\3\3\2\54\1\55\1\56\1\57"+
    "\1\56\1\60\1\61\1\62\1\5\1\7\1\62\1\63"+
    "\1\64\1\65\1\66\1\17\1\20\1\21\1\22\1\23"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\67\1\41\1\70\1\71\1\72\2\3\3\73\2\72"+
    "\1\0\1\74\1\2\1\0\1\75\1\76\1\2\1\77"+
    "\2\0\1\100\6\6\1\101\1\102\2\0\3\6\1\103"+
    "\2\6\2\0\1\104\3\0\1\105\1\0\1\106\1\107"+
    "\1\110\7\6\1\111\12\6\1\112\12\6\1\113\1\114"+
    "\1\115\1\116\1\117\1\120\1\6\12\0\1\6\1\121"+
    "\1\122\1\121\1\123\1\0\1\124\1\125\1\126\1\127"+
    "\1\130\1\131\1\132\1\133\1\134\1\135\1\136\1\137"+
    "\5\0\2\104\2\140\1\141\1\142\1\140\3\0\1\104"+
    "\3\143\3\0\2\1\1\104\2\144\1\0\1\145\10\0"+
    "\1\146\1\0\1\147\1\150\2\0\1\151\2\0\1\152"+
    "\1\153\1\154\2\0\1\77\1\0\1\155\7\6\2\77"+
    "\1\156\1\6\1\157\2\6\1\0\1\160\6\6\1\161"+
    "\3\6\1\162\2\6\1\163\1\6\1\164\1\165\22\6"+
    "\1\166\1\167\12\0\7\6\1\170\1\171\1\172\2\0"+
    "\1\173\1\0\1\174\1\0\2\131\2\137\2\0\1\175"+
    "\1\46\1\175\1\50\1\175\1\176\1\1\1\176\2\1"+
    "\1\175\1\177\1\0\1\177\1\0\2\150\1\200\2\0"+
    "\6\6\1\201\1\202\1\6\1\203\23\6\1\204\11\6"+
    "\1\205\1\6\1\206\5\6\12\0\10\6\4\0\1\207"+
    "\3\0\1\46\1\50\1\1\2\0\1\6\1\210\5\6"+
    "\1\211\1\6\1\212\1\213\4\6\1\214\1\6\1\215"+
    "\1\216\3\6\1\217\2\6\1\220\1\6\1\221\1\6"+
    "\1\222\1\223\1\224\4\6\1\225\1\226\2\6\1\227"+
    "\2\6\5\0\1\230\6\0\10\6\2\231\4\0\1\232"+
    "\4\233\2\234\1\0\2\6\1\235\2\6\1\236\7\6"+
    "\1\237\6\6\1\240\1\241\1\242\1\6\1\243\1\244"+
    "\2\6\4\0\1\245\5\0\1\246\10\6\4\0\1\45"+
    "\1\0\1\247\6\6\1\250\3\6\1\251\1\252\1\253"+
    "\1\6\1\254\2\6\1\255\1\256\1\6\1\257\3\0"+
    "\1\260\1\0\1\261\7\6\2\262\3\0\3\6\1\263"+
    "\1\264\5\6\1\265\1\6\1\266\2\6\1\267\1\270"+
    "\1\271\3\6\1\272\2\6\4\0\2\6\1\273\1\274"+
    "\1\6\1\275\2\6\1\276\1\6\1\277\2\6\1\300"+
    "\2\6\3\0\1\301\1\302\1\6\1\303\1\304\4\6"+
    "\1\305\5\0\5\6\5\0\1\306\1\307\1\310\2\6"+
    "\1\311\2\0\1\312\1\6\1\0\1\6\1\0\1\6"+
    "\7\0\1\313\7\0\1\76\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[754];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447"+
    "\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f"+
    "\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u088e\0\u05fd"+
    "\0\u08d7\0\u0920\0\u0969\0\u05fd\0\u05fd\0\u05fd\0\u09b2\0\u09fb"+
    "\0\u0a44\0\u0a8d\0\u0ad6\0\u0b1f\0\u0b68\0\u0bb1\0\u0bfa\0\u0c43"+
    "\0\u0c8c\0\u0cd5\0\u0d1e\0\u0d67\0\u0db0\0\u0df9\0\u0e42\0\u0e8b"+
    "\0\u0ed4\0\u0f1d\0\u0f66\0\u05fd\0\u0faf\0\u0ff8\0\u1041\0\u108a"+
    "\0\u10d3\0\u111c\0\u1165\0\u11ae\0\u11f7\0\u05fd\0\u05fd\0\u05fd"+
    "\0\u05fd\0\u1240\0\u05fd\0\u05fd\0\u1289\0\u05fd\0\u05fd\0\u12d2"+
    "\0\u131b\0\u1364\0\u13ad\0\u05fd\0\u13f6\0\u143f\0\u1488\0\u14d1"+
    "\0\u05fd\0\u151a\0\u1563\0\u15ac\0\u15f5\0\u163e\0\u1687\0\u05fd"+
    "\0\u16d0\0\u05fd\0\u1719\0\u1762\0\u17ab\0\u05fd\0\u17f4\0\u05fd"+
    "\0\u05fd\0\u183d\0\u1886\0\u05fd\0\u18cf\0\u1918\0\u05fd\0\u05fd"+
    "\0\u1961\0\u05fd\0\u05fd\0\u05fd\0\u05fd\0\u05fd\0\u05fd\0\u05fd"+
    "\0\u05fd\0\u05fd\0\u05fd\0\u05fd\0\u05fd\0\u05fd\0\u05fd\0\u05fd"+
    "\0\u05fd\0\u05fd\0\u05fd\0\u05fd\0\u05fd\0\u19aa\0\u19f3\0\u1a3c"+
    "\0\u1a85\0\u1ace\0\u05fd\0\u1b17\0\u05fd\0\u1b60\0\u1ace\0\u05fd"+
    "\0\u0522\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd\0\u1d16\0\u1d5f"+
    "\0\u05fd\0\u1da8\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc\0\u1f15\0\u05fd"+
    "\0\u05fd\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039\0\u2082\0\u088e\0\u20cb"+
    "\0\u2114\0\u215d\0\u1289\0\u21a6\0\u0969\0\u21ef\0\u2238\0\u05fd"+
    "\0\u2281\0\u22ca\0\u05fd\0\u088e\0\u2313\0\u235c\0\u23a5\0\u23ee"+
    "\0\u2437\0\u2480\0\u24c9\0\u088e\0\u2512\0\u255b\0\u25a4\0\u25ed"+
    "\0\u2636\0\u267f\0\u26c8\0\u2711\0\u275a\0\u27a3\0\u088e\0\u27ec"+
    "\0\u2835\0\u287e\0\u28c7\0\u2910\0\u2959\0\u29a2\0\u29eb\0\u2a34"+
    "\0\u2a7d\0\u05fd\0\u05fd\0\u05fd\0\u05fd\0\u2ac6\0\u05fd\0\u2b0f"+
    "\0\u2b58\0\u2ba1\0\u0f66\0\u2bea\0\u2c33\0\u2c7c\0\u2cc5\0\u2d0e"+
    "\0\u2d57\0\u2da0\0\u2de9\0\u2e32\0\u2e7b\0\u05fd\0\u2ec4\0\u2f0d"+
    "\0\u05fd\0\u2f56\0\u05fd\0\u2f9f\0\u05fd\0\u2fe8\0\u05fd\0\u05fd"+
    "\0\u05fd\0\u05fd\0\u05fd\0\u3031\0\u307a\0\u30c3\0\u1364\0\u310c"+
    "\0\u3155\0\u319e\0\u31e7\0\u310c\0\u05fd\0\u05fd\0\u05fd\0\u3155"+
    "\0\u1488\0\u3230\0\u3279\0\u32c2\0\u3230\0\u05fd\0\u3279\0\u15ac"+
    "\0\u330b\0\u3354\0\u339d\0\u33e6\0\u342f\0\u330b\0\u3354\0\u16d0"+
    "\0\u05fd\0\u3478\0\u1719\0\u17ab\0\u1762\0\u34c1\0\u350a\0\u3553"+
    "\0\u17f4\0\u05fd\0\u359c\0\u05fd\0\u35e5\0\u362e\0\u3677\0\u05fd"+
    "\0\u1a3c\0\u36c0\0\u05fd\0\u05fd\0\u05fd\0\u3709\0\u3752\0\u379b"+
    "\0\u379b\0\u05fd\0\u37e4\0\u382d\0\u3876\0\u38bf\0\u3908\0\u3951"+
    "\0\u399a\0\u1f5e\0\u1fa7\0\u088e\0\u39e3\0\u088e\0\u3a2c\0\u3a75"+
    "\0\u3abe\0\u05fd\0\u3b07\0\u3b50\0\u3b99\0\u3be2\0\u3c2b\0\u3c74"+
    "\0\u088e\0\u3cbd\0\u3d06\0\u3d4f\0\u088e\0\u3d98\0\u3de1\0\u3e2a"+
    "\0\u3e73\0\u088e\0\u088e\0\u3ebc\0\u3f05\0\u3f4e\0\u3f97\0\u3fe0"+
    "\0\u4029\0\u4072\0\u40bb\0\u4104\0\u414d\0\u4196\0\u41df\0\u4228"+
    "\0\u4271\0\u42ba\0\u4303\0\u434c\0\u4395\0\u05fd\0\u088e\0\u43de"+
    "\0\u4427\0\u4470\0\u44b9\0\u4502\0\u454b\0\u4594\0\u45dd\0\u4626"+
    "\0\u466f\0\u46b8\0\u4701\0\u474a\0\u4793\0\u47dc\0\u4825\0\u486e"+
    "\0\u05fd\0\u05fd\0\u05fd\0\u48b7\0\u4900\0\u05fd\0\u4949\0\u4992"+
    "\0\u49db\0\u05fd\0\u4a24\0\u05fd\0\u4a6d\0\u4ab6\0\u4aff\0\u05fd"+
    "\0\u4b48\0\u131b\0\u4b91\0\u143f\0\u05fd\0\u4bda\0\u15f5\0\u4c23"+
    "\0\u4c6c\0\u1563\0\u05fd\0\u4cb5\0\u17ab\0\u4cfe\0\u362e\0\u3677"+
    "\0\u05fd\0\u4d47\0\u4d90\0\u4dd9\0\u4e22\0\u4e6b\0\u4eb4\0\u4efd"+
    "\0\u4f46\0\u088e\0\u4f8f\0\u4fd8\0\u088e\0\u5021\0\u506a\0\u50b3"+
    "\0\u50fc\0\u5145\0\u518e\0\u51d7\0\u5220\0\u5269\0\u52b2\0\u52fb"+
    "\0\u5344\0\u538d\0\u53d6\0\u541f\0\u5468\0\u54b1\0\u54fa\0\u5543"+
    "\0\u088e\0\u558c\0\u55d5\0\u561e\0\u5667\0\u56b0\0\u56f9\0\u5742"+
    "\0\u578b\0\u57d4\0\u088e\0\u581d\0\u088e\0\u5866\0\u58af\0\u58f8"+
    "\0\u5941\0\u598a\0\u59d3\0\u5a1c\0\u5a65\0\u5aae\0\u5af7\0\u5b40"+
    "\0\u5b89\0\u5bd2\0\u5c1b\0\u5c64\0\u5cad\0\u5cf6\0\u5d3f\0\u5d88"+
    "\0\u5dd1\0\u5e1a\0\u5e63\0\u5eac\0\u5ef5\0\u5f3e\0\u5f87\0\u5fd0"+
    "\0\u05fd\0\u6019\0\u6062\0\u60ab\0\u60f4\0\u613d\0\u6186\0\u61cf"+
    "\0\u6218\0\u6261\0\u088e\0\u62aa\0\u62f3\0\u633c\0\u6385\0\u63ce"+
    "\0\u088e\0\u6417\0\u088e\0\u088e\0\u6460\0\u64a9\0\u64f2\0\u653b"+
    "\0\u088e\0\u6584\0\u088e\0\u088e\0\u65cd\0\u6616\0\u665f\0\u66a8"+
    "\0\u66f1\0\u673a\0\u088e\0\u6783\0\u088e\0\u67cc\0\u088e\0\u088e"+
    "\0\u088e\0\u6815\0\u685e\0\u68a7\0\u68f0\0\u088e\0\u088e\0\u6939"+
    "\0\u6982\0\u088e\0\u69cb\0\u6a14\0\u6a5d\0\u6aa6\0\u6aef\0\u6b38"+
    "\0\u6b81\0\u05fd\0\u6bca\0\u6c13\0\u6c5c\0\u6ca5\0\u6cee\0\u6d37"+
    "\0\u6d80\0\u6dc9\0\u6e12\0\u6e5b\0\u6ea4\0\u6eed\0\u6f36\0\u6f7f"+
    "\0\u05fd\0\u6fc8\0\u7011\0\u705a\0\u70a3\0\u70ec\0\u7135\0\u05fd"+
    "\0\u131b\0\u143f\0\u1563\0\u05fd\0\u717e\0\u71c7\0\u7210\0\u7259"+
    "\0\u72a2\0\u72eb\0\u7334\0\u088e\0\u737d\0\u73c6\0\u740f\0\u7458"+
    "\0\u74a1\0\u74ea\0\u7533\0\u088e\0\u757c\0\u75c5\0\u760e\0\u7657"+
    "\0\u76a0\0\u76e9\0\u088e\0\u088e\0\u088e\0\u7732\0\u088e\0\u088e"+
    "\0\u777b\0\u77c4\0\u780d\0\u7856\0\u789f\0\u78e8\0\u05fd\0\u7931"+
    "\0\u797a\0\u79c3\0\u7a0c\0\u7a55\0\u05fd\0\u7a9e\0\u7ae7\0\u7b30"+
    "\0\u7b79\0\u7bc2\0\u7c0b\0\u7c54\0\u7c9d\0\u7ce6\0\u7d2f\0\u7d78"+
    "\0\u7dc1\0\u7e0a\0\u7e53\0\u088e\0\u7e9c\0\u7ee5\0\u7f2e\0\u7f77"+
    "\0\u7fc0\0\u8009\0\u8052\0\u809b\0\u80e4\0\u812d\0\u088e\0\u088e"+
    "\0\u088e\0\u8176\0\u088e\0\u81bf\0\u8208\0\u8251\0\u088e\0\u829a"+
    "\0\u05fd\0\u82e3\0\u832c\0\u8375\0\u05fd\0\u83be\0\u088e\0\u8407"+
    "\0\u8450\0\u8499\0\u84e2\0\u852b\0\u8574\0\u85bd\0\u05fd\0\u8606"+
    "\0\u864f\0\u8698\0\u86e1\0\u872a\0\u8773\0\u87bc\0\u088e\0\u088e"+
    "\0\u8805\0\u884e\0\u8897\0\u88e0\0\u8929\0\u088e\0\u8972\0\u088e"+
    "\0\u89bb\0\u8a04\0\u05fd\0\u05fd\0\u088e\0\u8a4d\0\u8a96\0\u8adf"+
    "\0\u088e\0\u8b28\0\u8b71\0\u8bba\0\u8c03\0\u8c4c\0\u8c95\0\u8cde"+
    "\0\u8d27\0\u088e\0\u088e\0\u8d70\0\u088e\0\u8db9\0\u8e02\0\u088e"+
    "\0\u8e4b\0\u088e\0\u8e94\0\u8edd\0\u088e\0\u8f26\0\u8f6f\0\u8fb8"+
    "\0\u9001\0\u904a\0\u088e\0\u088e\0\u9093\0\u088e\0\u088e\0\u90dc"+
    "\0\u9125\0\u916e\0\u91b7\0\u088e\0\u9200\0\u9249\0\u9292\0\u92db"+
    "\0\u9324\0\u936d\0\u93b6\0\u93ff\0\u9448\0\u9491\0\u94da\0\u9523"+
    "\0\u956c\0\u95b5\0\u95fe\0\u088e\0\u088e\0\u088e\0\u9647\0\u9690"+
    "\0\u05fd\0\u96d9\0\u9722\0\u088e\0\u976b\0\u97b4\0\u97fd\0\u9846"+
    "\0\u988f\0\u98d8\0\u9921\0\u996a\0\u99b3\0\u99fc\0\u9a45\0\u9a8e"+
    "\0\u05fd\0\u9ad7\0\u9b20\0\u9b69\0\u9bb2\0\u9bfb\0\u9c44\0\u9c8d"+
    "\0\u05fd\0\u9cd6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[754];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\66\24\1\25\22\24\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\27\2\37\1\26\1\40"+
    "\3\41\1\42\1\43\1\44\1\45\1\46\1\47\2\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\2\60"+
    "\1\61\1\62\1\63\1\37\1\64\2\37\1\65\1\66"+
    "\1\37\1\67\1\70\1\71\1\72\1\73\1\74\1\37"+
    "\1\75\1\37\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\1\60\1\115\1\116\1\26\1\37\36\117\1\120"+
    "\52\117\15\121\1\122\3\121\1\123\1\124\1\121\1\125"+
    "\64\121\15\126\1\127\3\126\1\130\1\126\1\131\1\132"+
    "\64\126\15\133\1\134\1\135\1\133\1\135\1\136\2\133"+
    "\1\137\64\133\3\140\1\141\2\140\3\141\1\140\2\141"+
    "\13\140\25\141\3\140\1\141\2\140\3\141\17\140\1\141"+
    "\3\140\1\141\111\142\3\143\1\144\2\143\3\144\2\143"+
    "\1\144\2\143\1\145\1\143\1\145\7\143\10\144\1\143"+
    "\6\144\1\143\4\144\3\143\1\144\2\143\3\144\17\143"+
    "\1\144\3\143\1\144\3\146\1\147\2\146\3\147\1\146"+
    "\2\147\13\146\25\147\3\146\1\147\2\146\3\147\17\146"+
    "\1\147\3\146\1\147\111\150\3\151\1\152\2\151\3\152"+
    "\1\151\2\152\2\151\3\41\6\151\25\152\1\153\2\151"+
    "\1\152\2\151\3\152\17\151\1\152\3\151\1\152\3\154"+
    "\1\155\2\154\3\155\1\154\2\155\13\154\25\155\3\154"+
    "\1\155\2\154\3\155\17\154\1\155\3\154\1\155\1\26"+
    "\1\156\1\157\1\37\1\160\1\161\3\37\1\156\2\37"+
    "\1\26\4\162\1\42\1\163\1\164\1\165\1\46\1\166"+
    "\25\37\1\167\1\170\1\171\1\37\1\172\1\74\3\37"+
    "\1\173\1\174\1\175\1\176\1\177\1\200\1\201\1\202"+
    "\1\106\1\107\1\203\1\111\1\204\1\113\1\205\1\37"+
    "\2\162\1\26\1\37\67\206\1\207\21\206\67\210\1\211"+
    "\21\210\16\212\1\213\1\212\1\214\34\212\1\215\13\212"+
    "\1\216\7\212\1\216\5\212\2\217\26\0\1\220\62\0"+
    "\111\221\66\24\1\222\110\24\1\0\2\24\1\223\7\24"+
    "\1\224\2\24\1\225\4\24\112\0\1\27\1\226\1\227"+
    "\1\0\1\27\3\0\1\27\100\0\1\226\1\230\2\0"+
    "\1\226\3\0\1\226\14\0\1\231\63\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\232\6\37\12\0\6\37\1\233"+
    "\1\234\5\37\1\235\6\37\1\236\3\0\1\237\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\4\0\1\240\21\0"+
    "\1\241\63\0\1\27\1\226\1\227\1\0\1\27\1\242"+
    "\1\0\1\243\1\27\100\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\10\37\1\244\14\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\3\37\1\245\4\37\12\0\6\37\1\246"+
    "\2\37\2\247\1\250\11\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\247\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\5\0\1\43\4\0\13\37\1\251\11\37"+
    "\3\0\1\37\2\0\3\37\1\0\1\252\15\0\1\37"+
    "\1\253\2\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\25\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\16\0\3\41\73\0\1\254\2\0"+
    "\3\254\1\0\2\254\13\0\25\254\3\0\1\254\2\0"+
    "\3\254\17\0\1\254\3\0\1\254\15\255\1\256\3\255"+
    "\1\257\1\260\1\255\1\261\64\255\26\0\1\262\26\0"+
    "\1\263\34\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\4\37\1\264\1\37\1\265\2\37\2\266\11\37\1\267"+
    "\3\0\1\37\2\0\3\37\17\0\1\266\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\13\37"+
    "\1\270\2\37\1\271\6\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\272"+
    "\1\0\10\37\12\0\2\273\6\37\1\274\14\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\2\275\3\37"+
    "\1\276\2\37\1\277\14\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\6\37\1\300\2\37\2\301\12\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\301\3\0\1\37"+
    "\1\0\1\37\1\0\1\302\1\0\2\37\1\303\5\37"+
    "\12\0\25\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\2\37"+
    "\1\304\5\37\12\0\10\37\1\305\4\37\1\306\7\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\13\37"+
    "\1\307\11\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\2\37\1\310\14\37\1\311\5\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\312\1\0\10\37\12\0\25\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\2\313\23\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\2\314\23\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\16\37"+
    "\1\315\6\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\10\37\1\316\4\37\1\317\7\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\5\37\1\320\5\37"+
    "\1\321\11\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\26\0\1\322\25\0\1\323\1\324\61\0"+
    "\1\325\26\0\1\326\111\0\1\327\33\0\1\37\1\0"+
    "\1\37\1\0\2\37\1\330\5\37\12\0\25\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\7\0"+
    "\1\331\1\332\6\0\1\333\7\0\2\334\1\0\1\335"+
    "\1\336\1\337\2\0\1\340\2\341\1\342\41\0\1\341"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\12\0\25\37"+
    "\3\0\1\37\2\0\1\37\1\343\1\37\17\0\1\37"+
    "\3\0\1\37\26\0\1\344\110\0\1\345\26\0\1\346"+
    "\10\0\1\347\1\0\1\350\46\0\1\351\40\0\1\352"+
    "\47\0\1\353\40\0\1\354\1\116\46\0\1\355\26\0"+
    "\1\356\61\0\1\357\43\0\1\360\44\0\1\361\44\0"+
    "\1\362\43\0\1\363\137\0\1\364\33\0\15\253\1\365"+
    "\67\253\1\260\3\253\44\0\1\366\44\0\15\121\1\367"+
    "\3\121\1\370\1\0\1\121\1\371\200\121\1\372\2\121"+
    "\3\372\1\121\1\373\1\372\1\121\1\367\3\121\1\374"+
    "\1\375\1\121\1\376\2\121\1\373\10\372\1\373\6\372"+
    "\1\373\4\372\3\121\1\372\2\121\3\372\17\121\1\372"+
    "\3\121\1\372\15\121\1\367\3\121\1\377\1\375\1\121"+
    "\1\u0100\64\121\15\126\1\u0101\3\126\1\u0102\1\126\1\0"+
    "\1\u0103\200\126\1\372\2\126\3\372\1\126\1\u0104\1\372"+
    "\1\126\1\u0101\3\126\1\u0105\1\126\1\u0106\1\376\2\126"+
    "\1\u0104\10\372\1\u0104\6\372\1\u0104\4\372\3\126\1\372"+
    "\2\126\3\372\17\126\1\372\3\126\1\372\15\126\1\u0101"+
    "\3\126\1\377\1\126\1\u0106\1\u0107\64\126\15\133\1\u0108"+
    "\1\135\1\133\1\135\1\u0109\2\133\1\u010a\102\133\1\135"+
    "\1\133\1\135\73\133\1\u010b\2\133\3\u010b\1\133\1\u010c"+
    "\1\u010b\1\133\1\u0108\1\135\1\133\1\135\1\u0109\2\133"+
    "\1\u010a\2\133\1\u010c\10\u010b\1\u010c\6\u010b\1\u010c\4\u010b"+
    "\3\133\1\u010b\2\133\3\u010b\17\133\1\u010b\3\133\1\u010b"+
    "\3\133\1\372\2\133\3\372\1\133\1\u010d\1\372\1\133"+
    "\1\u0108\1\135\1\133\1\135\1\u010e\2\133\1\376\2\133"+
    "\1\u010d\10\372\1\u010d\6\372\1\u010d\4\372\3\133\1\372"+
    "\2\133\3\372\17\133\1\372\3\133\1\372\15\133\1\u0108"+
    "\1\135\1\133\1\135\1\377\2\133\1\u010f\64\133\1\0"+
    "\1\u0110\1\0\1\u0110\1\0\10\u0110\1\0\1\u0111\1\0"+
    "\1\u0111\4\0\1\u0112\1\0\25\u0110\3\0\1\u0110\2\0"+
    "\3\u0110\17\0\1\u0110\3\0\1\u0110\16\u0113\1\u0114\1\u0113"+
    "\1\u0114\71\u0113\1\u0115\1\u0113\1\u0115\1\u0113\5\u0115\1\u0113"+
    "\1\u0115\2\u0113\1\0\1\u0113\1\0\4\u0113\1\u0116\2\u0113"+
    "\10\u0115\1\u0113\6\u0115\1\u0113\4\u0115\3\u0113\1\u0115\2\u0113"+
    "\3\u0115\17\u0113\1\u0115\3\u0113\1\u0115\3\u0113\1\u0117\2\u0113"+
    "\3\u0117\1\u0113\1\u0118\1\u0117\2\u0113\1\u0114\1\u0113\1\u0114"+
    "\6\u0113\1\u0118\10\u0117\1\u0118\6\u0117\1\u0118\4\u0117\3\u0113"+
    "\1\u0117\2\u0113\3\u0117\17\u0113\1\u0117\3\u0113\1\u0117\1\0"+
    "\1\u0119\1\0\1\u0119\1\0\10\u0119\1\0\1\u011a\1\0"+
    "\1\u011a\4\0\1\u011b\1\0\25\u0119\3\0\1\u0119\2\0"+
    "\3\u0119\17\0\1\u0119\3\0\1\u0119\1\0\1\152\1\0"+
    "\1\152\1\0\10\152\12\0\25\152\3\0\1\152\2\0"+
    "\3\152\17\0\1\152\3\0\1\152\55\0\1\u011c\34\0"+
    "\1\155\1\0\1\155\1\0\10\155\12\0\25\155\3\0"+
    "\1\155\2\0\3\155\17\0\1\155\3\0\1\155\1\0"+
    "\1\156\3\0\1\156\3\0\1\156\100\0\1\u011d\3\0"+
    "\1\u011d\1\u011e\1\0\1\u011f\1\u011d\77\0\67\206\1\0"+
    "\21\206\70\0\1\u0120\20\0\67\u0121\1\u0122\110\u0121\1\u0122"+
    "\1\u0123\20\u0121\16\212\1\213\1\212\1\214\34\212\1\213"+
    "\13\212\1\213\7\212\1\213\5\212\2\217\16\0\1\213"+
    "\147\0\1\u0124\33\0\66\24\1\0\2\24\1\0\7\24"+
    "\1\0\2\24\1\0\4\24\26\0\1\u0125\110\0\1\u0125"+
    "\23\0\1\u0126\74\0\1\u0127\53\0\1\226\1\0\1\227"+
    "\1\0\1\226\3\0\1\226\100\0\1\u0128\2\0\1\u0129"+
    "\1\u0128\3\0\1\u0128\42\0\1\u0129\36\0\1\u012a\107\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\2\u012b\1\u012c"+
    "\22\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\3\37\1\u012d\21\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\16\37\1\u012e\6\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\11\37\2\u012f\12\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\u012f\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\23\37\1\u0130"+
    "\1\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\2\37\1\u0131"+
    "\5\37\12\0\25\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\u0132\1\0\1\u0132\1\0"+
    "\1\u0132\1\0\3\u0132\20\0\2\u0132\2\0\1\u0132\57\0"+
    "\1\u0133\3\0\1\u0133\100\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\13\37\1\u0134\11\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\11\37\2\u0135\12\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\u0135\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\3\37\1\u0136"+
    "\21\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\13\37\1\u0137\11\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\u0138\1\0"+
    "\10\37\12\0\25\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\66\0\1\u0139\23\0\1\254\1\0"+
    "\1\254\1\0\10\254\12\0\25\254\3\0\1\254\2\0"+
    "\3\254\17\0\1\254\3\0\1\254\114\255\1\0\2\255"+
    "\3\0\2\255\1\0\1\255\1\256\3\255\1\257\1\260"+
    "\1\255\1\0\3\255\10\0\1\255\6\0\1\255\4\0"+
    "\3\255\1\0\2\255\3\0\17\255\1\0\3\255\1\0"+
    "\15\255\1\256\3\255\1\0\1\260\1\255\1\261\64\255"+
    "\26\0\1\u013a\63\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\2\37\1\u013b\4\37\1\u013c\1\37\2\u013d\12\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\u013d\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\11\37"+
    "\2\u013e\12\37\3\0\1\37\2\0\3\37\17\0\1\u013e"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\23\37\1\u013f\1\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\2\37\1\u0140\5\37\12\0\14\37\1\u0141\10\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\13\37"+
    "\1\u0142\11\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\4\37\1\u0143\2\37\1\u0144\15\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\u0145\1\0\10\37\12\0\25\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\6\37\1\u0146\16\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\6\37"+
    "\1\u0147\16\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\13\37\1\u0148\11\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\11\37\2\u0149\12\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\u0149\3\0\1\37\1\0\1\37"+
    "\1\0\1\u014a\1\0\10\37\12\0\25\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\17\37\1\u014b\5\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\24\37"+
    "\1\u014c\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\2\37\1\u014d\6\37\2\u014e\12\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\u014e\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\6\37\1\u014f\16\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\2\37\1\u0150\5\37\12\0"+
    "\10\37\1\u0151\14\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\2\37\1\u0152\5\37\12\0\25\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\2\u0153\23\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\2\37\1\u0154\22\37"+
    "\3\0\1\37\2\0\2\37\1\u0155\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\u0156\1\0\10\37\12\0"+
    "\25\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\11\37\2\u0157\12\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\u0157\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\2\u0158\23\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\2\37\1\u0159\22\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\10\37\1\u015a\14\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\3\37\1\u015b\4\37"+
    "\12\0\25\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\2\u015c\6\37\1\u015d\14\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\26\0\1\u015e\63\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\13\37\1\u015f"+
    "\11\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\42\0\1\u0160\75\0\2\u0161\6\0\1\u0162\106\0"+
    "\1\u0163\112\0\1\u0164\115\0\1\u0165\101\0\1\u0166\63\0"+
    "\1\u0167\131\0\1\u0168\62\0\1\u0169\106\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\3\37\1\u016a\1\u016b\1\37"+
    "\1\u016c\1\u016d\5\37\1\u016e\1\u016f\5\37\1\u0170\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\26\0"+
    "\1\u0171\137\0\1\u0172\61\0\1\u0173\37\0\1\u0174\62\0"+
    "\2\u0175\42\0\1\u0175\32\0\1\u0176\100\0\3\u0177\46\0"+
    "\1\u0178\12\0\1\u0179\24\0\1\u017a\1\0\1\u017b\106\0"+
    "\1\u017c\1\0\1\u017d\70\0\111\253\7\0\1\u017e\101\0"+
    "\3\121\1\0\2\121\3\0\2\121\1\0\1\121\1\367"+
    "\3\121\1\374\1\375\1\121\1\0\3\121\10\0\1\121"+
    "\6\0\1\121\4\0\3\121\1\0\2\121\3\0\17\121"+
    "\1\0\3\121\1\0\15\121\1\367\3\121\1\0\1\375"+
    "\1\121\1\u0100\64\121\1\0\1\372\1\0\1\372\1\0"+
    "\10\372\12\0\25\372\1\u017f\2\0\1\372\2\0\3\372"+
    "\11\0\1\u0180\5\0\1\372\3\0\1\372\1\121\1\373"+
    "\1\121\1\373\1\121\10\373\1\367\3\121\1\370\1\0"+
    "\1\121\1\371\2\121\25\373\1\u0181\2\121\1\373\2\121"+
    "\3\373\11\121\1\u0182\5\121\1\373\3\121\1\373\3\126"+
    "\1\0\2\126\3\0\2\126\1\0\1\126\1\u0101\3\126"+
    "\1\u0105\1\126\1\u0106\1\0\3\126\10\0\1\126\6\0"+
    "\1\126\4\0\3\126\1\0\2\126\3\0\17\126\1\0"+
    "\3\126\1\0\15\126\1\u0101\3\126\1\0\1\126\1\u0106"+
    "\1\u0107\65\126\1\u0104\1\126\1\u0104\1\126\10\u0104\1\u0101"+
    "\3\126\1\u0102\1\126\1\0\1\u0103\2\126\25\u0104\1\u0183"+
    "\2\126\1\u0104\2\126\3\u0104\11\126\1\u0184\5\126\1\u0104"+
    "\3\126\1\u0104\3\133\1\0\2\133\3\0\2\133\1\0"+
    "\1\133\1\u0108\1\135\1\133\1\135\1\u010e\2\133\1\0"+
    "\3\133\10\0\1\133\6\0\1\133\4\0\3\133\1\0"+
    "\2\133\3\0\17\133\1\0\3\133\1\0\15\133\1\u0108"+
    "\1\135\1\133\1\135\1\0\2\133\1\u010f\65\133\1\u010b"+
    "\1\133\1\u010b\1\133\5\u010b\1\u010c\1\u010b\1\u010c\1\u0108"+
    "\1\u0185\1\133\1\u0185\1\u0109\2\133\1\u010a\1\u0186\1\133"+
    "\1\u010c\10\u010b\1\u010c\6\u010b\1\u010c\4\u010b\3\133\1\u010b"+
    "\2\133\3\u010b\17\133\1\u010b\3\133\1\u010b\1\133\1\u010c"+
    "\1\133\1\u010c\1\133\10\u010c\1\u0108\1\u0187\1\133\1\u0187"+
    "\1\u0109\2\133\1\u010a\1\u0188\1\133\25\u010c\3\133\1\u010c"+
    "\2\133\3\u010c\17\133\1\u010c\3\133\1\u010c\1\133\1\u010d"+
    "\1\133\1\u010d\1\133\10\u010d\1\u0108\1\135\1\133\1\135"+
    "\1\u0109\2\133\1\u010a\2\133\25\u010d\1\u0189\2\133\1\u010d"+
    "\2\133\3\u010d\11\133\1\u018a\5\133\1\u010d\3\133\1\u010d"+
    "\16\0\1\u0111\1\0\1\u0111\70\0\16\u0113\1\0\1\u0113"+
    "\1\0\71\u0113\1\u0117\1\u0113\1\u0117\1\u0113\5\u0117\1\u0118"+
    "\1\u0117\1\u0118\1\u0113\1\u018b\1\u0113\1\u018b\4\u0113\1\u018c"+
    "\1\u0113\1\u0118\10\u0117\1\u0118\6\u0117\1\u0118\4\u0117\3\u0113"+
    "\1\u0117\2\u0113\3\u0117\17\u0113\1\u0117\3\u0113\1\u0117\1\u0113"+
    "\1\u0118\1\u0113\1\u0118\1\u0113\10\u0118\1\u0113\1\u018d\1\u0113"+
    "\1\u018d\4\u0113\1\u018e\1\u0113\25\u0118\3\u0113\1\u0118\2\u0113"+
    "\3\u0118\17\u0113\1\u0118\3\u0113\1\u0118\16\0\1\u011a\1\0"+
    "\1\u011a\71\0\1\u011d\3\0\1\u011d\3\0\1\u011d\100\0"+
    "\1\u018f\1\0\1\u018f\1\0\1\u018f\1\0\3\u018f\20\0"+
    "\2\u018f\2\0\1\u018f\57\0\1\u0190\3\0\1\u0190\77\0"+
    "\67\u0121\1\u0122\1\u0191\20\u0121\45\0\1\u0192\105\0\1\u0193"+
    "\47\0\1\u0128\3\0\1\u0128\3\0\1\u0128\100\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\2\37\1\u0145\22\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\u0194\1\0\10\37\12\0\25\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\2\u0195"+
    "\1\37\1\u0196\1\u0197\4\37\2\u0198\4\37\1\u0199\5\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\u0198\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\10\37"+
    "\1\u019a\14\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\u019b\1\0\10\37"+
    "\12\0\25\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\2\37\1\u019c\22\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\15\37\1\u019d\7\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\2\37\1\u019e\22\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\2\37\1\u019f\5\37"+
    "\12\0\25\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\2\37"+
    "\1\u01a0\5\37\12\0\25\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\66\0\1\u0174\23\0\1\37"+
    "\1\0\1\u01a1\1\0\10\37\12\0\25\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\15\37\1\u01a2\7\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\2\37"+
    "\1\u01a3\22\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\u01a4\1\0\10\37"+
    "\12\0\25\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\15\37\1\u01a5\7\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\2\u01a6\23\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\10\37\1\u01a7\14\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\2\37\1\u01a8\5\37\12\0"+
    "\2\u01a9\23\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\15\37\1\u01aa\7\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\2\37\1\u01ab\5\37\12\0\25\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\7\37\1\u01ac\15\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\u01ad\1\0\10\37\12\0\25\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\u01ae\1\0\10\37\12\0\25\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\u01af\1\0\10\37\12\0\25\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\7\37"+
    "\1\u01b0\15\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\u01b1\1\0\10\37"+
    "\12\0\25\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\2\37\1\u01b2\6\37\2\u01b3\12\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\u01b3\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\11\37\2\u01b4\12\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\u01b4\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\6\37"+
    "\1\u01b5\16\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\2\37\1\u01b6\22\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\2\37\1\u01b7\22\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\5\37\1\u01b8\17\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\5\37"+
    "\1\u01b9\17\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\15\37\1\u01ba\7\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\2\37\1\u01bb\22\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\15\37\1\u01bc\7\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\10\37"+
    "\1\u01bd\14\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\3\37"+
    "\1\u01be\4\37\12\0\25\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\15\37\1\u01bf\7\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\6\37\1\u01c0\16\37"+
    "\3\0\1\u01c1\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\2\37"+
    "\1\u01c2\22\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\42\0\1\u01c3\103\0\1\u01c4\112\0\1\u01c5"+
    "\102\0\1\u01c6\113\0\1\u01c7\113\0\1\u01c8\111\0\2\u01c9"+
    "\42\0\1\u01c9\66\0\1\u01ca\70\0\1\u01cb\55\0\1\u01cc"+
    "\102\0\1\37\1\0\1\37\1\0\10\37\12\0\2\u01cd"+
    "\23\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\2\u01ce\3\37\1\u01cf\17\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\2\37\1\u01d0\5\37\12\0\25\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\15\37\1\u01d1\7\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\2\u01d2"+
    "\23\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\2\37\1\u01d3"+
    "\5\37\12\0\25\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\u01d4\1\0"+
    "\10\37\12\0\25\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\3\0\1\u01d5\2\0\3\u01d5\1\0"+
    "\2\u01d5\3\0\1\u0174\2\0\1\u01d6\4\0\25\u01d5\3\0"+
    "\1\u01d5\2\0\3\u01d5\17\0\1\u01d5\1\u01d7\2\0\1\u01d5"+
    "\36\0\1\u01d8\70\0\3\u0177\61\0\1\u0179\76\0\1\u01d9"+
    "\77\0\1\u01da\47\0\1\u017a\110\0\1\u017c\132\0\2\u01db"+
    "\42\0\1\u01db\61\0\1\u01dc\33\0\15\121\1\367\3\121"+
    "\1\370\1\0\1\121\1\371\30\121\1\u01dd\33\121\15\126"+
    "\1\u0101\3\126\1\u0102\1\126\1\0\1\u0103\30\126\1\u01de"+
    "\33\126\15\133\1\u0108\1\u0185\1\133\1\u0185\1\u0109\2\133"+
    "\1\u010a\101\133\1\u0108\1\u0187\1\133\1\u0187\1\u0109\2\133"+
    "\1\u010a\101\133\1\u0108\1\135\1\133\1\135\1\u0109\2\133"+
    "\1\u010a\30\133\1\u01df\33\133\16\u0113\1\u018b\1\u0113\1\u018b"+
    "\106\u0113\1\u018d\1\u0113\1\u018d\70\u0113\52\0\1\u01e0\65\0"+
    "\2\u01e1\61\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\6\37\1\u01e2\16\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\4\37\1\u01e3\20\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\u01e4\1\0\10\37\12\0\25\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\10\37\1\u01e5\14\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\17\37\1\u01e6"+
    "\5\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\16\37\1\u01e7\6\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\2\u01e8\23\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\14\37\1\u01e9\10\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\13\37\1\u01ea\11\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\14\37"+
    "\1\u01eb\10\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\20\37\2\u01ec\3\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\13\37\1\u01ed\11\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\5\37\1\u01ee\17\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\u01ef\1\0\2\37\1\u01f0\5\37"+
    "\12\0\25\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\2\37\1\u01f1\22\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\u01f2"+
    "\1\0\10\37\12\0\25\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\2\37\1\u01f3\22\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\17\37\1\u01f4\5\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\5\37"+
    "\1\u01f5\17\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\6\37\1\u01f6\16\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\2\37\1\u01f7\5\37\12\0\25\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\15\37\1\u01f8\7\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\2\37"+
    "\1\u01f9\22\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\2\37"+
    "\1\u01fa\5\37\12\0\25\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\2\37\1\u01fb\22\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\11\37\2\u01fc\12\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\u01fc\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\16\37"+
    "\1\u01fd\6\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\2\u01fe\23\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\2\37\1\u01ff\22\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\11\37\2\u0200\12\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\u0200\3\0\1\37\1\0"+
    "\1\37\1\0\1\u0201\1\0\10\37\12\0\25\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\2\u0202\23\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\7\37"+
    "\1\u0203\15\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\13\37\1\u0204\11\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\2\u0205\23\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\3\37\1\u0206\21\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\u0207\1\0\10\37\12\0\25\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\2\37\1\u0208\5\37\12\0"+
    "\25\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\2\u0209\23\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\2\37\1\u020a\22\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\2\37\1\u020b\5\37\12\0\25\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\u020c\1\0\10\37\12\0\25\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\7\0\1\u020d"+
    "\110\0\1\u020e\145\0\1\u020f\47\0\1\u0210\13\0\1\u0211"+
    "\41\0\1\u0212\37\0\1\u0213\107\0\1\u0214\104\0\1\u0215"+
    "\110\0\1\u0216\134\0\2\u0217\124\0\1\u0218\45\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\13\37\1\u0219\11\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\15\37"+
    "\1\u021a\7\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\6\37\1\u021b\16\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\24\37\1\u021c\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\2\37\1\u021d\5\37\12\0\25\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\6\37\1\u021e"+
    "\16\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\15\37\1\u021f\7\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\2\37\1\u0220\22\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\u01d5\1\0"+
    "\1\u01d5\1\0\10\u01d5\1\0\1\u0221\1\0\1\u0222\6\0"+
    "\25\u01d5\3\0\1\u01d5\2\0\3\u01d5\17\0\1\u01d5\3\0"+
    "\1\u01d5\3\0\1\u0223\2\0\3\u0223\1\0\2\u0223\13\0"+
    "\25\u0223\3\0\1\u0223\2\0\3\u0223\17\0\1\u0223\3\0"+
    "\1\u0223\3\0\1\u0224\2\0\3\u0224\1\0\2\u0224\13\0"+
    "\25\u0224\3\0\1\u0224\2\0\3\u0224\17\0\1\u0224\3\0"+
    "\1\u0224\42\0\1\u0225\55\0\1\u0226\141\0\2\u0227\42\0"+
    "\1\u0227\7\0\1\u0228\2\0\3\u0228\2\0\1\u0228\14\0"+
    "\10\u0228\1\0\6\u0228\1\0\4\u0228\3\0\1\u0228\2\0"+
    "\3\u0228\17\0\1\u0228\3\0\1\u0228\3\121\1\u0229\2\121"+
    "\3\u0229\2\121\1\u0229\1\121\1\367\3\121\1\370\1\0"+
    "\1\121\1\371\3\121\10\u0229\1\121\6\u0229\1\121\4\u0229"+
    "\3\121\1\u0229\2\121\3\u0229\17\121\1\u0229\3\121\1\u0229"+
    "\3\126\1\u022a\2\126\3\u022a\2\126\1\u022a\1\126\1\u0101"+
    "\3\126\1\u0102\1\126\1\0\1\u0103\3\126\10\u022a\1\126"+
    "\6\u022a\1\126\4\u022a\3\126\1\u022a\2\126\3\u022a\17\126"+
    "\1\u022a\3\126\1\u022a\3\133\1\u022b\2\133\3\u022b\2\133"+
    "\1\u022b\1\133\1\u0108\1\135\1\133\1\135\1\u0109\2\133"+
    "\1\u010a\3\133\10\u022b\1\133\6\u022b\1\133\4\u022b\3\133"+
    "\1\u022b\2\133\3\u022b\17\133\1\u022b\3\133\1\u022b\16\0"+
    "\2\u022c\1\u022d\142\0\1\u022e\37\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\3\37\1\u022f\21\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\7\37\1\u0230\15\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\13\37"+
    "\1\u0231\11\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\2\u0232\23\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\2\u0233\23\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\4\37\1\u0234\20\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\2\37\1\u0235\5\37\12\0\25\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\4\37"+
    "\1\u0236\20\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\3\37\1\u0237\21\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\2\37\1\u0238\5\37\12\0\25\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\6\37\1\u0239\16\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\24\37"+
    "\1\u023a\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\15\37\1\u023b\7\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\u023c\1\0"+
    "\10\37\12\0\25\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\13\37\1\u023d\11\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\15\37\1\u023e\7\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\2\u023f\23\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\7\37"+
    "\1\u0240\15\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\23\37\1\u0241\1\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\6\37\1\u0242\16\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\7\37\1\u0243\15\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\16\37"+
    "\1\u0244\6\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\6\37\1\u0245\16\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\13\37\1\u0246\11\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\15\37\1\u0247\7\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\7\37"+
    "\1\u0248\15\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\2\37\1\u0249\22\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\7\37\1\u024a\15\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\43\0\1\u024b"+
    "\107\0\1\u024c\51\0\1\u024d\13\0\1\u024e\41\0\1\u024f"+
    "\100\0\1\u0250\56\0\1\u0211\41\0\1\u0212\73\0\1\u0251"+
    "\75\0\1\u0218\110\0\1\u0252\115\0\1\u0253\107\0\1\u0254"+
    "\72\0\1\u0218\41\0\1\u0255\30\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\25\37\3\0\1\37\2\0\1\37"+
    "\1\u0256\1\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\u0257\1\0\10\37\12\0\25\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\7\37\1\u0258\15\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\u0259\1\0\10\37\12\0\25\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\11\37"+
    "\2\u025a\12\37\3\0\1\37\2\0\3\37\17\0\1\u025a"+
    "\3\0\1\37\1\0\1\37\1\0\1\u025b\1\0\10\37"+
    "\12\0\25\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\2\37\1\u025c\22\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\16\37\1\u025d\6\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\16\0\1\u0221"+
    "\73\0\1\u0223\1\0\1\u0223\1\0\10\u0223\5\0\1\u025e"+
    "\4\0\25\u0223\3\0\1\u0223\2\0\3\u0223\17\0\1\u0223"+
    "\3\0\1\u0223\1\0\1\u0224\1\0\1\u0224\1\0\10\u0224"+
    "\12\0\25\u0224\3\0\1\u0224\2\0\3\u0224\17\0\1\u0224"+
    "\1\u025f\2\0\1\u0224\27\0\2\u0260\122\0\1\u0261\51\0"+
    "\1\u0262\2\0\3\u0262\1\0\2\u0262\13\0\25\u0262\3\0"+
    "\1\u0262\2\0\3\u0262\17\0\1\u0262\3\0\1\u0262\16\0"+
    "\1\u022c\123\0\1\u0263\60\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\11\37\2\u0264\12\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\u0264\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\15\37\1\u0265\7\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\u0266\1\0\10\37\12\0\25\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\2\37\1\u0267"+
    "\22\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\15\37\1\u0268\7\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\7\37\1\u0269\15\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\2\37\1\u026a\5\37\12\0\25\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\u026b\1\0\10\37\12\0\25\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\3\37\1\u026c"+
    "\21\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\7\37\1\u026d\15\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\u026e\1\0"+
    "\10\37\12\0\25\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\2\37\1\u026f\22\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\u0270\1\0\10\37\12\0\25\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\14\37\1\u0271\10\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\10\37\1\u0272"+
    "\14\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\16\37\1\u0273\6\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\2\37\1\u0274\5\37\12\0\25\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\5\37\1\u0275\17\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\u0276\1\0\10\37\12\0\25\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\u0277\1\0\10\37\12\0\25\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\2\37\1\u0278"+
    "\22\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\17\0\1\u024b\41\0\1\u0279\72\0\1\u027a\54\0"+
    "\1\u027b\120\0\1\u024e\41\0\1\u024f\32\0\1\u027c\110\0"+
    "\1\u0218\124\0\1\u0252\41\0\1\u027d\60\0\1\u027e\130\0"+
    "\1\u027a\40\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\25\37\3\0\1\37\2\0\1\37\1\u027f\1\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\25\37\3\0\1\37\2\0\1\37\1\u0280"+
    "\1\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\2\37\1\u0281\22\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\11\37\2\u0282"+
    "\12\37\3\0\1\37\2\0\3\37\17\0\1\u0282\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\11\37\2\u0283\12\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\u0283\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\25\37\3\0\1\37\2\0\1\37\1\u0284"+
    "\1\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\25\37\3\0\1\37\2\0"+
    "\1\37\1\u0285\1\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\10\37\1\u0286"+
    "\14\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\16\0\1\u0221\1\0\1\u0222\106\0\1\u0287\1\0"+
    "\1\u0288\142\0\1\u0289\54\0\3\u028a\71\0\1\u0262\1\0"+
    "\1\u0262\1\0\10\u0262\12\0\25\u0262\3\0\1\u0262\2\0"+
    "\3\u0262\17\0\1\u0262\3\0\1\u0262\16\0\3\u028b\71\0"+
    "\1\37\1\0\1\37\1\0\2\37\1\u028c\5\37\12\0"+
    "\25\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\2\37\1\u028d"+
    "\5\37\12\0\25\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\7\37\1\u028e\15\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\u028f\1\0\10\37\12\0\25\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\2\37\1\u0290\22\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\7\37\1\u0291"+
    "\15\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\25\37\3\0\1\37\2\0\1\37\1\u0292\1\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\10\37\1\u0293\14\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\u0294\1\0\10\37\12\0\25\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\6\37\1\u0295\16\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\6\37\1\u0296"+
    "\16\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\7\37\1\u0297\15\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\u0298\1\0"+
    "\10\37\12\0\25\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\25\37\3\0\1\37\2\0\1\37\1\u0299"+
    "\1\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\u029a\1\0\10\37\12\0\25\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\17\0\1\u027a\41\0"+
    "\1\u029b\64\0\1\u024e\115\0\1\u0211\65\0\1\u027e\41\0"+
    "\1\u029c\30\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\25\37\3\0\1\37\2\0\1\37\1\u029d\1\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\2\u029e\23\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\23\37\1\u029f\1\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\25\37\3\0\1\37"+
    "\2\0\1\37\1\u02a0\1\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\25\37"+
    "\3\0\1\37\2\0\1\37\1\u02a1\1\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\7\37\1\u02a2\15\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\3\37\1\u02a3\21\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\16\0\1\u0287"+
    "\123\0\1\u02a4\62\0\1\u02a5\2\0\3\u02a5\1\0\2\u02a5"+
    "\2\0\3\u028a\1\u02a6\5\0\25\u02a5\3\0\1\u02a5\2\0"+
    "\3\u02a5\17\0\1\u02a5\3\0\1\u02a5\16\0\3\u028b\23\0"+
    "\1\u02a7\45\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\13\37\1\u02a8\11\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\7\37\1\u02a9\15\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\16\37\1\u02aa\6\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\u02ab\1\0\10\37\12\0\25\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\10\37\1\u02ac"+
    "\14\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\4\37\1\u02ad\20\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\10\37\1\u02ae\14\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\2\37\1\u02af\22\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\u02b0\1\0\10\37\12\0\25\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\10\37\1\u02b1"+
    "\14\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\3\37\1\u02b2\21\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\10\37\1\u02b3\14\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\2\37\1\u02b4\5\37\12\0\25\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\25\37\3\0"+
    "\1\37\2\0\1\37\1\u02b5\1\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\10\37\1\u02b6\14\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\25\37\3\0\1\37\2\0\1\37\1\u02b7"+
    "\1\37\17\0\1\37\3\0\1\37\16\0\3\u02a4\34\0"+
    "\1\364\34\0\1\u02a5\1\0\1\u02a5\1\0\10\u02a5\1\0"+
    "\3\u02b8\6\0\25\u02a5\3\0\1\u02a5\2\0\3\u02a5\11\0"+
    "\1\u02b9\5\0\1\u02a5\3\0\1\u02a5\3\0\1\u02a5\2\0"+
    "\3\u02a5\1\0\2\u02a5\13\0\25\u02a5\3\0\1\u02a5\2\0"+
    "\3\u02a5\17\0\1\u02a5\3\0\1\u02a5\7\0\1\u02ba\102\0"+
    "\1\37\1\0\1\u02bb\1\0\10\37\12\0\25\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\16\37\1\u02bc"+
    "\6\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\6\37\1\u02bd\16\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\4\37\1\u02be\20\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\11\37\2\u02bf\12\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\u02bf\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\6\37\1\u02c0"+
    "\16\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\6\37\1\u02c1\16\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\7\37\1\u02c2\15\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\24\37\1\u02c3\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\25\37\3\0\1\37"+
    "\2\0\1\37\1\u02c4\1\37\17\0\1\37\3\0\1\37"+
    "\3\0\1\u02c5\2\0\3\u02c5\1\0\2\u02c5\1\0\1\u02c6"+
    "\3\u02b8\6\0\25\u02c5\3\0\1\u02c5\2\0\3\u02c5\17\0"+
    "\1\u02c5\3\0\1\u02c5\3\0\1\u02c7\2\0\3\u02c7\1\0"+
    "\2\u02c7\6\0\1\u02b9\4\0\25\u02c7\3\0\1\u02c7\2\0"+
    "\3\u02c7\12\0\1\u02c8\4\0\1\u02c7\1\u02b9\2\0\1\u02c7"+
    "\35\0\1\u02c9\54\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\7\37\1\u02ca\15\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\7\37\1\u02cb\15\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\25\37\3\0\1\37"+
    "\2\0\1\37\1\u02cc\1\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\u02cd\1\0\10\37\12\0\25\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\23\37"+
    "\1\u02ce\1\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\u02c5\1\0\1\u02c5\1\0\10\u02c5"+
    "\1\u02c6\3\u02cf\6\0\25\u02c5\3\0\1\u02c5\2\0\3\u02c5"+
    "\2\0\1\u02d0\3\0\1\u02d1\2\0\1\u02d2\5\0\1\u02c5"+
    "\3\0\1\u02c5\3\0\1\u02c5\2\0\3\u02c5\1\0\2\u02c5"+
    "\13\0\25\u02c5\3\0\1\u02c5\2\0\3\u02c5\17\0\1\u02c5"+
    "\3\0\1\u02c5\1\0\1\u02c7\1\0\1\u02c7\1\0\10\u02c7"+
    "\5\0\1\u02b9\4\0\25\u02c7\3\0\1\u02c7\2\0\3\u02c7"+
    "\12\0\1\u02c8\4\0\1\u02c7\1\u02b9\2\0\1\u02c7\16\0"+
    "\3\u02b8\55\0\1\u02b9\63\0\1\u02d3\40\0\1\37\1\0"+
    "\1\u02d4\1\0\10\37\12\0\25\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\u02d5\1\0\10\37\12\0\25\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\25\37\3\0\1\37\2\0"+
    "\1\37\1\u02d6\1\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\25\37\3\0"+
    "\1\37\2\0\1\37\1\u02d7\1\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\2\u02d8\23\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\16\0\3\u02cf\46\0\1\u02d0\111\0\1\u02d9"+
    "\23\0\1\u02c5\2\0\3\u02c5\1\0\2\u02c5\1\0\1\u02c6"+
    "\11\0\25\u02c5\3\0\1\u02c5\2\0\3\u02c5\17\0\1\u02c5"+
    "\3\0\1\u02c5\77\0\1\u02da\45\0\1\u02db\55\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\25\37\3\0\1\37"+
    "\2\0\1\37\1\u02dc\1\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\12\0\15\37"+
    "\1\u02dd\7\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\16\0\3\u02cf\46\0\1\u02d0\3\0\1\u02d1"+
    "\2\0\1\u02d2\21\0\1\u02de\102\0\1\37\1\0\1\u02df"+
    "\1\0\10\37\12\0\25\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\51\0\1\u02e0\40\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\13\37\1\u02e1\11\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\3\0\1\u02e2\106\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\25\37\3\0\1\37\1\u02e3\1\0\3\37\17\0"+
    "\1\37\3\0\1\37\16\0\3\u02e2\5\0\1\u02e4\143\0"+
    "\1\u02e5\45\0\3\u02e4\1\0\1\u02e6\27\0\1\u02e7\32\0"+
    "\1\u02e8\30\0\1\u02e9\135\0\1\u02ea\103\0\1\u02eb\115\0"+
    "\1\u02ec\103\0\1\u02ed\115\0\1\u02ee\103\0\1\u02ef\115\0"+
    "\1\u02f0\54\0\3\u02ee\34\0\1\u02f1\105\0\1\u02f2\60\0"+
    "\1\u02ee\173\0\1\u02ee\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[40223];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\15\0\2\1\1\11\11\1\1\11\3\1"+
    "\3\11\25\1\1\11\11\1\4\11\1\1\2\11\1\1"+
    "\2\11\4\1\1\11\4\1\1\11\6\1\1\11\1\1"+
    "\1\11\3\1\1\11\1\1\2\11\2\1\1\11\2\1"+
    "\2\11\1\1\24\11\5\1\1\11\1\1\1\11\1\1"+
    "\1\0\1\11\1\1\1\0\4\1\2\0\1\11\6\1"+
    "\2\11\2\0\6\1\2\0\1\1\3\0\1\11\1\0"+
    "\1\1\1\11\36\1\4\11\1\1\1\11\1\1\12\0"+
    "\3\1\1\11\1\1\1\0\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\5\11\1\1\5\0\3\1\3\11\1\1"+
    "\3\0\2\1\1\11\1\1\3\0\5\1\1\0\1\11"+
    "\10\0\1\11\1\0\1\11\1\1\2\0\1\11\2\0"+
    "\3\11\2\0\1\1\1\0\1\11\16\1\1\0\1\11"+
    "\43\1\1\11\1\1\12\0\7\1\3\11\2\0\1\11"+
    "\1\0\1\1\1\0\1\11\1\1\1\11\1\1\2\0"+
    "\1\11\4\1\1\11\5\1\1\11\1\0\1\1\1\0"+
    "\2\1\1\11\2\0\57\1\12\0\10\1\4\0\1\11"+
    "\3\0\3\1\2\0\53\1\5\0\1\11\6\0\10\1"+
    "\1\11\1\1\4\0\1\1\1\11\3\1\1\11\1\1"+
    "\1\0\34\1\4\0\1\11\5\0\1\11\10\1\4\0"+
    "\1\1\1\0\25\1\1\11\3\0\1\11\1\0\10\1"+
    "\1\11\1\1\3\0\17\1\2\11\7\1\4\0\20\1"+
    "\3\0\12\1\5\0\5\1\5\0\5\1\1\11\2\0"+
    "\2\1\1\0\1\1\1\0\1\1\7\0\1\11\7\0"+
    "\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[754];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private final List commentList = new ArrayList();
    private String heredoc = null;
    private String nowdoc = null;
    private int nowdoc_len  = 0;
    private String comment = null;
    private boolean asp_tags = false;
    private boolean short_tags_allowed = true;
    private StateStack stack = new StateStack();
    private char yy_old_buffer[] = new char[ZZ_BUFFERSIZE];
    private int yy_old_pushbackPos;
    protected int commentStartPosition;
    private int whitespaceEndPosition;
    private boolean isEndedPhp;
    private final PHPDocCommentParser docParser = new PHPDocCommentParser();
    private final PHPVarCommentParser varParser = new PHPVarCommentParser();

    public ASTPHP5Scanner(java.io.Reader in, boolean short_tags_allowed, boolean asp_tags_allowed) {
        this(in);
        this.asp_tags = asp_tags_allowed;
        this.short_tags_allowed = short_tags_allowed;
    }
    //private AST ast;

    private int bracket = 0;

    /**
     * Returns balance beween '{' and '}'. If it's equesl 0,
     * then number of '{' == number of '}', if > 0 then '{' > '}' and
     * if return number < 0 then '{' < '}'
     */
    public int getCurlyBalance() {
        return bracket;
    }

    public int getWhitespaceEndPosition() {
        return whitespaceEndPosition;
    }

    public boolean isEndedPhp() {
        return isEndedPhp;
    }

    public boolean useAspTagsAsPhp() {
        return asp_tags;
    }

    public void reset(java.io.Reader reader) {
        yyreset(reader);
    }

    public void setState(int state) {
        yybegin(state);
    }

    public int getState() {
        return yystate();
    }

    public void setInScriptingState() {
		yybegin(ST_IN_SCRIPTING);
	}

	public void resetCommentList() {
		commentList.clear();
	}

	public List getCommentList() {
		return commentList;
	}

	protected void addComment(Comment.Type type) {
		int leftPosition = getTokenStartPosition();
        //System.out.println("#####AddCommnet start: " + commentStartPosition + " end: " + (leftPosition + getTokenLength()) + ", type: " + type);
        Comment comm;
        if (type == Comment.Type.TYPE_PHPDOC) {
            comm = docParser.parse(commentStartPosition, leftPosition + getTokenLength(),  comment);
            comment = null;
        }
        else if(type == Comment.Type.TYPE_VARTYPE) {
            comm = varParser.parse(commentStartPosition, leftPosition + getTokenLength(),  comment);
            comment = null;
            if (comm == null) {
                comm = new Comment(commentStartPosition, leftPosition + getTokenLength(), /*ast,*/ type);
            }
        }
        else {
            comm = new Comment(commentStartPosition, leftPosition + getTokenLength(), /*ast,*/ type);
        }
		commentList.add(comm);
	}

	public void setUseAspTagsAsPhp(boolean useAspTagsAsPhp) {
		asp_tags = useAspTagsAsPhp;
	}

    private void pushState(int state) {
        stack.pushStack(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.popStack());
    }

    public int getCurrentLine() {
        return yyline;
    }

    protected int getTokenStartPosition() {
        return zzStartRead - zzPushbackPos;
    }

    protected int getTokenLength() {
        return zzMarkedPos - zzStartRead;
    }

    public int getLength() {
        return zzEndRead - zzPushbackPos;
    }

    private void handleCommentStart() {
        commentStartPosition = getTokenStartPosition();
    }

    private void handleLineCommentEnd() {
         addComment(Comment.Type.TYPE_SINGLE_LINE);
    }

    private void handleMultilineCommentEnd() {
    	addComment(Comment.Type.TYPE_MULTILINE);
    }

    private void handlePHPDocEnd() {
        addComment(Comment.Type.TYPE_PHPDOC);
    }

    private void handleVarComment() {
    	commentStartPosition = getTokenStartPosition();
    	addComment(Comment.Type.TYPE_VARTYPE);
    }

    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    private Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        Symbol symbol = new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
        return symbol;
    }

    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline};
    }

	private boolean parsePHPDoc(){
		/*final IDocumentorLexer documentorLexer = getDocumentorLexer(zzReader);
		if(documentorLexer == null){
			return false;
		}
		yypushback(zzMarkedPos - zzStartRead);
		int[] parameters = getParamenters();
		documentorLexer.reset(zzReader, zzBuffer, parameters);
		Object phpDocBlock = documentorLexer.parse();
		commentList.add(phpDocBlock);
		reset(zzReader, documentorLexer.getBuffer(), documentorLexer.getParamenters());*/

                //System.out.println("#######ParsePHPDoc()");
		//return true;
                return false;
	}


	/*protected IDocumentorLexer getDocumentorLexer(java.io.Reader  reader) {
		return null;
	}*/

	public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
		this.zzReader = reader;
		this.zzBuffer = buffer;
		this.zzMarkedPos = parameters[0];
		this.zzPushbackPos = parameters[1];
		this.zzCurrentPos = parameters[2];
		this.zzStartRead = parameters[3];
		this.zzEndRead = parameters[4];
		this.yyline = parameters[5];
		this.yychar = this.zzStartRead - this.zzPushbackPos;
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ASTPHP5Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ASTPHP5Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1794) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    /*if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }*/
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1:
          { /*<ST_HEREDOC>{HEREDOC_CHARS}*({HEREDOC_NEWLINE}+({LABEL}";"?)?)?*/
	return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 204: break;
        case 2:
          { return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
          }
        case 205: break;
        case 3:
          { // do nothing
          }
        case 206: break;
        case 4:
          { return createFullSymbol(ASTPHP5Symbols.T_LNUMBER);
          }
        case 207: break;
        case 5:
          { return createSymbol(ASTPHP5Symbols.T_NEKUDA);
          }
        case 208: break;
        case 6:
          { return createFullSymbol(ASTPHP5Symbols.T_STRING);
          }
        case 209: break;
        case 7:
          { return createSymbol(ASTPHP5Symbols.T_PLUS);
          }
        case 210: break;
        case 8:
          { return createSymbol(ASTPHP5Symbols.T_NS_SEPARATOR);
          }
        case 211: break;
        case 9:
          { whitespaceEndPosition = getTokenStartPosition() + yylength();
          }
        case 212: break;
        case 10:
          { return createSymbol(ASTPHP5Symbols.T_DOLLAR);
          }
        case 213: break;
        case 11:
          { yybegin(ST_DOUBLE_QUOTES);
    return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 214: break;
        case 12:
          { yybegin(ST_BACKQUOTE);
    return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 215: break;
        case 13:
          { pushState(ST_IN_SCRIPTING);
    bracket++;
    return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
          }
        case 216: break;
        case 14:
          { return createSymbol(ASTPHP5Symbols.T_SEMICOLON);
          }
        case 217: break;
        case 15:
          { return createSymbol(ASTPHP5Symbols.T_EQUAL);
          }
        case 218: break;
        case 16:
          { return createSymbol(ASTPHP5Symbols.T_MINUS);
          }
        case 219: break;
        case 17:
          { return createSymbol(ASTPHP5Symbols.T_LGREATER);
          }
        case 220: break;
        case 18:
          { return createSymbol(ASTPHP5Symbols.T_NEKUDOTAIM);
          }
        case 221: break;
        case 19:
          { return createSymbol(ASTPHP5Symbols.T_OPEN_PARENTHESE);
          }
        case 222: break;
        case 20:
          { return createSymbol(ASTPHP5Symbols.T_CLOSE_PARENTHESE);
          }
        case 223: break;
        case 21:
          { return createSymbol(ASTPHP5Symbols.T_NOT);
          }
        case 224: break;
        case 22:
          { return createSymbol(ASTPHP5Symbols.T_RGREATER);
          }
        case 225: break;
        case 23:
          { return createSymbol(ASTPHP5Symbols.T_TIMES);
          }
        case 226: break;
        case 24:
          { return createSymbol(ASTPHP5Symbols.T_DIV);
          }
        case 227: break;
        case 25:
          { return createSymbol(ASTPHP5Symbols.T_PRECENT);
          }
        case 228: break;
        case 26:
          { return createSymbol(ASTPHP5Symbols.T_REFERENCE);
          }
        case 229: break;
        case 27:
          { return createSymbol(ASTPHP5Symbols.T_OR);
          }
        case 230: break;
        case 28:
          { return createSymbol(ASTPHP5Symbols.T_KOVA);
          }
        case 231: break;
        case 29:
          { return createSymbol(ASTPHP5Symbols.T_COMMA);
          }
        case 232: break;
        case 30:
          { return createSymbol(ASTPHP5Symbols.T_OPEN_RECT);
          }
        case 233: break;
        case 31:
          { return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
          }
        case 234: break;
        case 32:
          { return createSymbol(ASTPHP5Symbols.T_TILDA);
          }
        case 235: break;
        case 33:
          { return createSymbol(ASTPHP5Symbols.T_QUESTION_MARK);
          }
        case 236: break;
        case 34:
          { return createSymbol(ASTPHP5Symbols.T_AT);
          }
        case 237: break;
        case 35:
          { /* This is a temporary fix which is dependant on flex and it's implementation */
    if (!stack.isEmpty()) {
        popState();
    }
    bracket--;
    return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
          }
        case 238: break;
        case 36:
          { handleCommentStart();
	yybegin(ST_ONE_LINE_COMMENT);
//	yymore();
          }
        case 239: break;
        case 37:
          { yypushback(yylength());
        popState();
          }
        case 240: break;
        case 38:
          { /*<ST_DOUBLE_QUOTES>{DOUBLE_QUOTES_CHARS}+*/
	return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 241: break;
        case 39:
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 242: break;
        case 40:
          { /*<ST_BACKQUOTE>{BACKQUOTE_CHARS}+*/
	return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 243: break;
        case 41:
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 244: break;
        case 42:
          { yypushback(1);
	yybegin(ST_HEREDOC);
          }
        case 245: break;
        case 43:
          { heredoc = null;
	yybegin(ST_IN_SCRIPTING);
	return createSymbol(ASTPHP5Symbols.T_END_HEREDOC);
          }
        case 246: break;
        case 44:
          { yypushback(1);
	yybegin(ST_NOWDOC);
          }
        case 247: break;
        case 45:
          { nowdoc=null;
    nowdoc_len=0;
    yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
          }
        case 248: break;
        case 46:
          { yypushback(yylength());
    popState();
          }
        case 249: break;
        case 47:
          { popState();
    return createFullSymbol(ASTPHP5Symbols.T_STRING);
          }
        case 250: break;
        case 48:
          { yypushback(yylength());
    popState();
    pushState(ST_IN_SCRIPTING);
          }
        case 251: break;
        case 49:
          { popState();
    pushState(ST_IN_SCRIPTING);
    return createFullSymbol(ASTPHP5Symbols.T_STRING_VARNAME);
          }
        case 252: break;
        case 50:
          { return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
          }
        case 253: break;
        case 51:
          { yypushback(1);
	popState();
        /*<ST_VAR_OFFSET>[ \n\r\t\\'#]*/
	return createSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 254: break;
        case 52:
          { return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 255: break;
        case 53:
          { return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 256: break;
        case 54:
          { bracket++; return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
          }
        case 257: break;
        case 55:
          { popState();
	return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
          }
        case 258: break;
        case 56:
          { bracket--; return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
          }
        case 259: break;
        case 57:
          {
          }
        case 260: break;
        case 58:
          { //	yymore();
          }
        case 261: break;
        case 59:
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			handleLineCommentEnd();
			yybegin(ST_IN_SCRIPTING);
	}
//	yymore();
          }
        case 262: break;
        case 60:
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_ECHO);
          }
        case 263: break;
        case 61:
          { if (asp_tags) {
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
        //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 264: break;
        case 62:
          { if (short_tags_allowed || yylength()>2) { /* yyleng>2 means it's not <? but <script> */
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
        //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 265: break;
        case 63:
          { return createFullSymbol(ASTPHP5Symbols.T_DNUMBER);
          }
        case 266: break;
        case 64:
          { return createSymbol(ASTPHP5Symbols.T_CONCAT_EQUAL);
          }
        case 267: break;
        case 65:
          { return createSymbol(ASTPHP5Symbols.T_INC);
          }
        case 268: break;
        case 66:
          { return createSymbol(ASTPHP5Symbols.T_PLUS_EQUAL);
          }
        case 269: break;
        case 67:
          { return createSymbol(ASTPHP5Symbols.T_AS);
          }
        case 270: break;
        case 68:
          { return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 271: break;
        case 69:
          { return createFullSymbol(ASTPHP5Symbols.T_CONSTANT_ENCAPSED_STRING);
          }
        case 272: break;
        case 70:
          { return createSymbol(ASTPHP5Symbols.T_IS_EQUAL);
          }
        case 273: break;
        case 71:
          { return createSymbol(ASTPHP5Symbols.T_DOUBLE_ARROW);
          }
        case 274: break;
        case 72:
          { return createSymbol(ASTPHP5Symbols.T_IF);
          }
        case 275: break;
        case 73:
          { return createSymbol(ASTPHP5Symbols.T_DO);
          }
        case 276: break;
        case 74:
          { return createSymbol(ASTPHP5Symbols.T_LOGICAL_OR);
          }
        case 277: break;
        case 75:
          { return createSymbol(ASTPHP5Symbols.T_MINUS_EQUAL);
          }
        case 278: break;
        case 76:
          { return createSymbol(ASTPHP5Symbols.T_DEC);
          }
        case 279: break;
        case 77:
          { pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
          }
        case 280: break;
        case 78:
          { return createSymbol(ASTPHP5Symbols.T_IS_GREATER_OR_EQUAL);
          }
        case 281: break;
        case 79:
          { return createSymbol(ASTPHP5Symbols.T_SR);
          }
        case 282: break;
        case 80:
          { pushState(ST_LOOKING_FOR_CLASS_CONST);
	return createSymbol(ASTPHP5Symbols.T_PAAMAYIM_NEKUDOTAYIM);
          }
        case 283: break;
        case 81:
          { return createSymbol(ASTPHP5Symbols.T_IS_NOT_EQUAL);
          }
        case 284: break;
        case 82:
          { return createSymbol(ASTPHP5Symbols.T_IS_SMALLER_OR_EQUAL);
          }
        case 285: break;
        case 83:
          { return createSymbol(ASTPHP5Symbols.T_SL);
          }
        case 286: break;
        case 84:
          { return createSymbol(ASTPHP5Symbols.T_MUL_EQUAL);
          }
        case 287: break;
        case 85:
          { return createSymbol(ASTPHP5Symbols.T_POW);
          }
        case 288: break;
        case 86:
          { return createSymbol(ASTPHP5Symbols.T_DIV_EQUAL);
          }
        case 289: break;
        case 87:
          { handleCommentStart();
    yybegin(ST_COMMENT);
          }
        case 290: break;
        case 88:
          { return createSymbol(ASTPHP5Symbols.T_MOD_EQUAL);
          }
        case 291: break;
        case 89:
          { if (asp_tags) {
        yybegin(YYINITIAL);
        return createSymbol(ASTPHP5Symbols.T_SEMICOLON);  /* implicit ';' at php-end tag */
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 292: break;
        case 90:
          { return createSymbol(ASTPHP5Symbols.T_AND_EQUAL);
          }
        case 293: break;
        case 91:
          { return createSymbol(ASTPHP5Symbols.T_BOOLEAN_AND);
          }
        case 294: break;
        case 92:
          { return createSymbol(ASTPHP5Symbols.T_OR_EQUAL);
          }
        case 295: break;
        case 93:
          { return createSymbol(ASTPHP5Symbols.T_BOOLEAN_OR);
          }
        case 296: break;
        case 94:
          { return createSymbol(ASTPHP5Symbols.T_XOR_EQUAL);
          }
        case 297: break;
        case 95:
          { isEndedPhp = true;
    yybegin(YYINITIAL);
    return createSymbol(ASTPHP5Symbols.T_SEMICOLON);  /* implicit ';' at php-end tag */
          }
        case 298: break;
        case 96:
          { yypushback(1);
    /*<ST_DOUBLE_QUOTES>{DOUBLE_QUOTES_CHARS}*("{""{"+|"$""$"+|(("{"+|"$"+)[\"]))*/
    return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 299: break;
        case 97:
          { pushState(ST_LOOKING_FOR_VARNAME);
    return createSymbol(ASTPHP5Symbols.T_DOLLAR_OPEN_CURLY_BRACES);
          }
        case 300: break;
        case 98:
          { pushState(ST_IN_SCRIPTING);
    yypushback(yylength()-1);
    return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN_WITH_DOLAR);
          }
        case 301: break;
        case 99:
          { yypushback(1);
        /*<ST_BACKQUOTE>{BACKQUOTE_CHARS}*("{""{"+|"$""$"+|(("{"+|"$"+)[`]))*/
	return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 302: break;
        case 100:
          { yypushback(1);
    /*<ST_HEREDOC>{HEREDOC_CHARS}*({HEREDOC_NEWLINE}+({LABEL}";"?)?)?("{""{"+|"$""$"+)*/
    return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 303: break;
        case 101:
          { String text = yytext();
    int length = text.length() - 1;
    text = text.trim();

    yypushback(1);

    if (text.endsWith(";")) {
        text = text.substring(0, text.length() - 1);
        yypushback(1);
    }
    if (text.equals(heredoc)) {
        heredoc = null;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ASTPHP5Symbols.T_END_HEREDOC);
    } else {
    	   yybegin(ST_HEREDOC);
    }
          }
        case 304: break;
        case 102:
          { String text = yytext();
    int length = text.length() - 1;
    text = text.trim();

    yypushback(1);

    if (text.endsWith(";")) {
        text = text.substring(0, text.length() - 1);
        yypushback(1);
    }
    if (text.equals(nowdoc)) {
        nowdoc = null;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
    } else {
        yybegin(ST_NOWDOC);
    }
          }
        case 305: break;
        case 103:
          { return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
          }
        case 306: break;
        case 104:
          { /* treat numbers (almost) as strings inside encapsulated strings */
    return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
          }
        case 307: break;
        case 105:
          { handleMultilineCommentEnd();
    yybegin(ST_IN_SCRIPTING);
          }
        case 308: break;
        case 106:
          { handlePHPDocEnd();
     yybegin(ST_IN_SCRIPTING);
          }
        case 309: break;
        case 107:
          { if (asp_tags || yytext().charAt(0)!='%') { /* asp comment? */
        isEndedPhp = true;
	    handleLineCommentEnd();
        yypushback(yylength());
		yybegin(ST_IN_SCRIPTING);
		//return T_COMMENT;
	}
          }
        case 310: break;
        case 108:
          { String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?')) {
        yypushback(1);
        yybegin(ST_IN_SHORT_ECHO);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 311: break;
        case 109:
          { return createSymbol(ASTPHP5Symbols.T_ELLIPSIS);
          }
        case 312: break;
        case 110:
          { return createSymbol(ASTPHP5Symbols.T_LOGICAL_XOR);
          }
        case 313: break;
        case 111:
          { return createSymbol(ASTPHP5Symbols.T_LOGICAL_AND);
          }
        case 314: break;
        case 112:
          { return createSymbol(ASTPHP5Symbols.T_IS_IDENTICAL);
          }
        case 315: break;
        case 113:
          { return createSymbol(ASTPHP5Symbols.T_TRY);
          }
        case 316: break;
        case 114:
          { return createFullSymbol(ASTPHP5Symbols.T_EXIT);
          }
        case 317: break;
        case 115:
          { return createSymbol(ASTPHP5Symbols.T_FOR);
          }
        case 318: break;
        case 116:
          { return createSymbol(ASTPHP5Symbols.T_USE);
          }
        case 319: break;
        case 117:
          { return createSymbol(ASTPHP5Symbols.T_NEW);
          }
        case 320: break;
        case 118:
          { return createSymbol(ASTPHP5Symbols.T_SR_EQUAL);
          }
        case 321: break;
        case 119:
          { return createSymbol(ASTPHP5Symbols.T_VAR);
          }
        case 322: break;
        case 120:
          { return createSymbol(ASTPHP5Symbols.T_IS_NOT_IDENTICAL);
          }
        case 323: break;
        case 121:
          { return createSymbol(ASTPHP5Symbols.T_SPACESHIP);
          }
        case 324: break;
        case 122:
          { return createSymbol(ASTPHP5Symbols.T_SL_EQUAL);
          }
        case 325: break;
        case 123:
          { return createSymbol(ASTPHP5Symbols.T_POW_EQUAL);
          }
        case 326: break;
        case 124:
          { if (!parsePHPDoc()) {
handleCommentStart();
yybegin(ST_DOCBLOCK);
}
          }
        case 327: break;
        case 125:
          { yypushback(1);
	pushState(ST_VAR_OFFSET);
	return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 328: break;
        case 126:
          { String text = yytext();

    if (text.charAt(text.length() - 2)== ';') {
		text = text.substring(0, text.length() - 2);
        	yypushback(1);
    } else {
		text = text.substring(0, text.length() - 1);
    }

	int textLength = text.length();
	int heredocLength = heredoc.length();
	if (textLength > heredocLength && text.substring(textLength - heredocLength, textLength).equals(heredoc)) {
		yypushback(2);
        	yybegin(ST_END_HEREDOC);
        	// we need to remove the closing label from the symbol value.
                /*<ST_HEREDOC>{HEREDOC_CHARS}*{HEREDOC_NEWLINE}+{LABEL}";"?[\n\r]*/
        	Symbol sym = createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
        	String value = (String)sym.value;
        	sym.value = value.substring(0, value.length() - heredocLength + 1);
	   	return sym;
	}
	yypushback(1);
          }
        case 329: break;
        case 127:
          { String text = yytext();

    if (text.charAt(text.length() - 2)== ';') {
        text = text.substring(0, text.length() - 2);
        yypushback(1);
    } else {
        text = text.substring(0, text.length() - 1);
    }

    int textLength = text.length();
    int nowdocLength = nowdoc.length();
    if (textLength > nowdocLength && text.substring(textLength - nowdocLength, textLength).equals(nowdoc)) {
        yypushback(2);
        yybegin(ST_END_NOWDOC);
        Symbol sym = createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
        String value = (String)sym.value;
        sym.value = value.substring(0, value.length() - nowdocLength + 1);
        return sym;
    }
    yypushback(1);
          }
        case 330: break;
        case 128:
          { int len = yylength();
        yypushback(2); // go back to mark end of comment in the next token
        comment = yytext();
          }
        case 331: break;
        case 129:
          { return createSymbol(ASTPHP5Symbols.T_ECHO);
          }
        case 332: break;
        case 130:
          { return createSymbol(ASTPHP5Symbols.T_ELSE);
          }
        case 333: break;
        case 131:
          { return createSymbol(ASTPHP5Symbols.T_EVAL);
          }
        case 334: break;
        case 132:
          { return createSymbol(ASTPHP5Symbols.T_CASE);
          }
        case 335: break;
        case 133:
          { return createSymbol(ASTPHP5Symbols.T_LIST);
          }
        case 336: break;
        case 134:
          { return createSymbol(ASTPHP5Symbols.T_GOTO);
          }
        case 337: break;
        case 135:
          { handleCommentStart();
          }
        case 338: break;
        case 136:
          { return createSymbol(ASTPHP5Symbols.T_ENDIF);
          }
        case 339: break;
        case 137:
          { return createSymbol(ASTPHP5Symbols.T_EMPTY);
          }
        case 340: break;
        case 138:
          { return createSymbol(ASTPHP5Symbols.T_ARRAY);
          }
        case 341: break;
        case 139:
          { return createSymbol(ASTPHP5Symbols.T_BREAK);
          }
        case 342: break;
        case 140:
          { return createSymbol(ASTPHP5Symbols.T_ISSET);
          }
        case 343: break;
        case 141:
          { return createSymbol(ASTPHP5Symbols.T_TRAIT);
          }
        case 344: break;
        case 142:
          { return createSymbol(ASTPHP5Symbols.T_THROW);
          }
        case 345: break;
        case 143:
          { return createSymbol(ASTPHP5Symbols.T_FINAL);
          }
        case 346: break;
        case 144:
          { return createSymbol(ASTPHP5Symbols.T_UNSET);
          }
        case 347: break;
        case 145:
          { return createSymbol(ASTPHP5Symbols.T_CATCH);
          }
        case 348: break;
        case 146:
          { return createSymbol(ASTPHP5Symbols.T_CONST);
          }
        case 349: break;
        case 147:
          { return createSymbol(ASTPHP5Symbols.T_CLASS);
          }
        case 350: break;
        case 148:
          { return createSymbol(ASTPHP5Symbols.T_CLONE);
          }
        case 351: break;
        case 149:
          { return createSymbol(ASTPHP5Symbols.T_YIELD);
          }
        case 352: break;
        case 150:
          { return createSymbol(ASTPHP5Symbols.T_WHILE);
          }
        case 353: break;
        case 151:
          { return createSymbol(ASTPHP5Symbols.T_PRINT);
          }
        case 354: break;
        case 152:
          { return createSymbol(ASTPHP5Symbols.T_INT_CAST);
          }
        case 355: break;
        case 153:
          { int removeChars = (yytext().charAt(0) == 'b')?4:3;
    heredoc = yytext().substring(removeChars).trim();    // for 'b<<<' or '<<<'
    if (heredoc.charAt(0) == '"') {
        heredoc = heredoc.substring(1, heredoc.length()-1);
    }
    yybegin(ST_START_HEREDOC);
    return createSymbol(ASTPHP5Symbols.T_START_HEREDOC);
          }
        case 356: break;
        case 154:
          { popState();
        return createFullSymbol(ASTPHP5Symbols.T_STRING);
          }
        case 357: break;
        case 155:
          { yypushback(3);
	pushState(ST_LOOKING_FOR_PROPERTY);
	return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 358: break;
        case 156:
          { isEndedPhp = false;
    whitespaceEndPosition = getTokenStartPosition() + yylength();
    yybegin(ST_IN_SCRIPTING);
    //return T_OPEN_TAG;
    //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
          }
        case 359: break;
        case 157:
          { return createSymbol(ASTPHP5Symbols.T_ENDFOR);
          }
        case 360: break;
        case 158:
          { return createSymbol(ASTPHP5Symbols.T_ELSEIF);
          }
        case 361: break;
        case 159:
          { /* not a keyword, hust for recognize constans.*/
    return createFullSymbol(ASTPHP5Symbols.T_DEFINE);
          }
        case 362: break;
        case 160:
          { return createSymbol(ASTPHP5Symbols.T_STATIC);
          }
        case 363: break;
        case 161:
          { return createSymbol(ASTPHP5Symbols.T_SWITCH);
          }
        case 364: break;
        case 162:
          { return createSymbol(ASTPHP5Symbols.T_RETURN);
          }
        case 365: break;
        case 163:
          { return createSymbol(ASTPHP5Symbols.T_GLOBAL);
          }
        case 366: break;
        case 164:
          { return createSymbol(ASTPHP5Symbols.T_PUBLIC);
          }
        case 367: break;
        case 165:
          { return createSymbol(ASTPHP5Symbols.T_BOOL_CAST);
          }
        case 368: break;
        case 166:
          { return createSymbol(ASTPHP5Symbols.T_DOUBLE_CAST);
          }
        case 369: break;
        case 167:
          { return createSymbol(ASTPHP5Symbols.T_EXTENDS);
          }
        case 370: break;
        case 168:
          { return createSymbol(ASTPHP5Symbols.T_INCLUDE);
          }
        case 371: break;
        case 169:
          { return createSymbol(ASTPHP5Symbols.T_DEFAULT);
          }
        case 372: break;
        case 170:
          { return createSymbol(ASTPHP5Symbols.T_DECLARE);
          }
        case 373: break;
        case 171:
          { return createSymbol(ASTPHP5Symbols.T_FINALLY);
          }
        case 374: break;
        case 172:
          { return createSymbol(ASTPHP5Symbols.T_FOREACH);
          }
        case 375: break;
        case 173:
          { return createSymbol(ASTPHP5Symbols.T_REQUIRE);
          }
        case 376: break;
        case 174:
          { return createSymbol(ASTPHP5Symbols.T_PRIVATE);
          }
        case 377: break;
        case 175:
          { return createSymbol(ASTPHP5Symbols.T_ARRAY_CAST);
          }
        case 378: break;
        case 176:
          { return createSymbol(ASTPHP5Symbols.T_UNSET_CAST);
          }
        case 379: break;
        case 177:
          { return createSymbol(ASTPHP5Symbols.T_DIR);
          }
        case 380: break;
        case 178:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
        int startString=3+bprefix;
        /* 3 is <<<, 2 is quotes, 1 is newline */
        nowdoc_len = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
        while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
            startString++;
            nowdoc_len--;
        }
        // first quate
        startString++;
        nowdoc = yytext().substring(startString,nowdoc_len+startString);
        yybegin(ST_START_NOWDOC);
        return createSymbol(ASTPHP5Symbols.T_START_NOWDOC);
          }
        case 381: break;
        case 179:
          { return createSymbol(ASTPHP5Symbols.T_ENDWHILE);
          }
        case 382: break;
        case 180:
          { return createSymbol(ASTPHP5Symbols.T_ABSTRACT);
          }
        case 383: break;
        case 181:
          { return createSymbol(ASTPHP5Symbols.T_FUNCTION);
          }
        case 384: break;
        case 182:
          { return createSymbol(ASTPHP5Symbols.T_CONTINUE);
          }
        case 385: break;
        case 183:
          { return createSymbol(ASTPHP5Symbols.T_STRING_CAST);
          }
        case 386: break;
        case 184:
          { return createSymbol(ASTPHP5Symbols.T_OBJECT_CAST);
          }
        case 387: break;
        case 185:
          { return createSymbol(ASTPHP5Symbols.T_FILE);
          }
        case 388: break;
        case 186:
          { return createSymbol(ASTPHP5Symbols.T_LINE);
          }
        case 389: break;
        case 187:
          { return createSymbol(ASTPHP5Symbols.T_ENDSWITCH);
          }
        case 390: break;
        case 188:
          { return createSymbol(ASTPHP5Symbols.T_INTERFACE);
          }
        case 391: break;
        case 189:
          { return createSymbol(ASTPHP5Symbols.T_INSTEADOF);
          }
        case 392: break;
        case 190:
          { return createSymbol(ASTPHP5Symbols.T_NAMESPACE);
          }
        case 393: break;
        case 191:
          { return createSymbol(ASTPHP5Symbols.T_PROTECTED);
          }
        case 394: break;
        case 192:
          { return createSymbol(ASTPHP5Symbols.T_CLASS_C);
          }
        case 395: break;
        case 193:
          { return createSymbol(ASTPHP5Symbols.T_ENDDECLARE);
          }
        case 396: break;
        case 194:
          { return createSymbol(ASTPHP5Symbols.T_ENDFOREACH);
          }
        case 397: break;
        case 195:
          { return createSymbol(ASTPHP5Symbols.T_INSTANCEOF);
          }
        case 398: break;
        case 196:
          { return createSymbol(ASTPHP5Symbols.T_IMPLEMENTS);
          }
        case 399: break;
        case 197:
          { return createSymbol(ASTPHP5Symbols.T_METHOD_C);
          }
        case 400: break;
        case 198:
          { return createSymbol(ASTPHP5Symbols.T_INCLUDE_ONCE);
          }
        case 401: break;
        case 199:
          { return createSymbol(ASTPHP5Symbols.T_REQUIRE_ONCE);
          }
        case 402: break;
        case 200:
          { return createSymbol(ASTPHP5Symbols.T_FUNC_C);
          }
        case 403: break;
        case 201:
          { comment = yytext();
    handleVarComment();
    // if we want to handle the var comment in  ast, then return the T_VAR_Comment symbol
    // but it needs some changes in parser grammar. see issue #154967
    //return createFullSymbol(ASTPHP5Symbols.T_VAR_COMMENT);
          }
        case 404: break;
        case 202:
          { return createSymbol(ASTPHP5Symbols.T_NS_C);
          }
        case 405: break;
        case 203:
          { yybegin(ST_HALTED_COMPILER);
	return createSymbol(ASTPHP5Symbols.T_HALT_COMPILER);
          }
        case 406: break;
        default:
          if (zzInput == YYEOF && (zzStartRead == zzCurrentPos || zzLexicalState == ST_DOCBLOCK)) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case ST_DOCBLOCK: {
              if (yytext().length() > 0) {
                yypushback(1);  // backup eof
                comment = yytext();
              }
              else {
                return createSymbol(ASTPHP5Symbols.EOF);
              }
            }
            case 755: break;
            default:
              {     return createSymbol(ASTPHP5Symbols.EOF);
 }
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
