/* The following code was generated by JFlex 1.4.3 on 14.2.12 13:35 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */

package org.netbeans.modules.php.editor.parser;

import java.util.LinkedList;
import java.util.List;
import org.netbeans.modules.php.editor.*;
import org.netbeans.modules.php.editor.parser.astnodes.*;
import java.io.IOException;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14.2.12 13:35 from the specification file
 * <tt>/home/warden/NetBeansProjects/web-main/php.editor/tools/ASTPHP5Scanner.flex</tt>
 */
public class ASTPHP5Scanner implements Scanner {
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_DOCBLOCK = 28;
  public static final int ST_START_NOWDOC = 16;
  public static final int ST_IN_SCRIPTING = 2;
  public static final int ST_NOWDOC = 14;
  public static final int ST_LOOKING_FOR_PROPERTY = 20;
  public static final int ST_ONE_LINE_COMMENT = 30;
  public static final int ST_END_NOWDOC = 18;
  public static final int ST_COMMENT = 26;
  public static final int ST_BACKQUOTE = 6;
  public static final int ST_DOUBLE_QUOTES = 4;
  public static final int ST_START_HEREDOC = 10;
  public static final int YYINITIAL = 0;
  public static final int ST_VAR_OFFSET = 24;
  public static final int ST_LOOKING_FOR_VARNAME = 22;
  public static final int ST_HEREDOC = 8;
  public static final int ST_IN_SHORT_ECHO = 32;
  public static final int ST_END_HEREDOC = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
    16, 16
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\16\1\17\2\0\1\15\22\0\1\16\1\63\1\21\1\104"+
    "\1\20\1\67\1\70\1\103\1\56\1\57\1\65\1\4\1\73\1\52"+
    "\1\2\1\66\1\5\1\11\10\1\1\54\1\25\1\64\1\27\1\53"+
    "\1\77\1\100\1\7\1\10\1\36\1\32\1\3\1\33\1\47\1\43"+
    "\1\30\1\60\1\46\1\45\1\51\1\35\1\37\1\50\1\62\1\41"+
    "\1\40\1\31\1\34\1\55\1\44\1\6\1\42\1\22\1\74\1\14"+
    "\1\75\1\72\1\61\1\23\1\7\1\10\1\36\1\32\1\3\1\33"+
    "\1\47\1\43\1\30\1\60\1\46\1\45\1\51\1\35\1\37\1\50"+
    "\1\62\1\41\1\102\1\31\1\34\1\55\1\44\1\6\1\42\1\22"+
    "\1\26\1\71\1\101\1\76\67\22\4\24\1\22\5\24\27\22\1\24"+
    "\37\22\1\24\10\22\u0137\12\31\0\162\12\4\0\14\12\16\0\5\12"+
    "\11\0\1\12\213\0\1\12\13\0\1\12\1\0\3\12\1\0\1\12"+
    "\1\0\24\12\1\0\54\12\1\0\46\12\1\0\5\12\4\0\202\12"+
    "\10\0\105\12\1\0\46\12\2\0\2\12\6\0\20\12\41\0\46\12"+
    "\2\0\1\12\7\0\47\12\110\0\33\12\5\0\3\12\56\0\32\12"+
    "\5\0\13\12\25\0\12\13\4\0\2\12\1\0\143\12\1\0\1\12"+
    "\17\0\2\12\7\0\2\12\12\13\3\12\2\0\1\12\20\0\1\12"+
    "\1\0\36\12\35\0\3\12\60\0\46\12\13\0\1\12\u0152\0\66\12"+
    "\3\0\1\12\22\0\1\12\7\0\12\12\4\0\12\13\25\0\10\12"+
    "\2\0\2\12\2\0\26\12\1\0\7\12\1\0\1\12\3\0\4\12"+
    "\3\0\1\12\36\0\2\12\1\0\3\12\4\0\12\13\2\12\23\0"+
    "\6\12\4\0\2\12\2\0\26\12\1\0\7\12\1\0\2\12\1\0"+
    "\2\12\1\0\2\12\37\0\4\12\1\0\1\12\7\0\12\13\2\0"+
    "\3\12\20\0\11\12\1\0\3\12\1\0\26\12\1\0\7\12\1\0"+
    "\2\12\1\0\5\12\3\0\1\12\22\0\1\12\17\0\2\12\4\0"+
    "\12\13\25\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0"+
    "\2\12\1\0\5\12\3\0\1\12\36\0\2\12\1\0\3\12\4\0"+
    "\12\13\1\0\1\12\21\0\1\12\1\0\6\12\3\0\3\12\1\0"+
    "\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0\2\12\3\0"+
    "\3\12\3\0\10\12\1\0\3\12\55\0\11\13\25\0\10\12\1\0"+
    "\3\12\1\0\27\12\1\0\12\12\1\0\5\12\46\0\2\12\4\0"+
    "\12\13\25\0\10\12\1\0\3\12\1\0\27\12\1\0\12\12\1\0"+
    "\5\12\3\0\1\12\40\0\1\12\1\0\2\12\4\0\12\13\25\0"+
    "\10\12\1\0\3\12\1\0\27\12\1\0\20\12\46\0\2\12\4\0"+
    "\12\13\25\0\22\12\3\0\30\12\1\0\11\12\1\0\1\12\2\0"+
    "\7\12\72\0\60\12\1\0\2\12\14\0\7\12\11\0\12\13\47\0"+
    "\2\12\1\0\1\12\2\0\2\12\1\0\1\12\2\0\1\12\6\0"+
    "\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0\1\12\2\0"+
    "\2\12\1\0\4\12\1\0\2\12\11\0\1\12\2\0\5\12\1\0"+
    "\1\12\11\0\12\13\2\0\2\12\42\0\1\12\37\0\12\13\26\0"+
    "\10\12\1\0\42\12\35\0\4\12\164\0\42\12\1\0\5\12\1\0"+
    "\2\12\25\0\12\13\6\0\6\12\112\0\46\12\12\0\51\12\7\0"+
    "\132\12\5\0\104\12\5\0\122\12\6\0\7\12\1\0\77\12\1\0"+
    "\1\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0"+
    "\47\12\1\0\1\12\1\0\4\12\2\0\37\12\1\0\1\12\1\0"+
    "\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\7\12\1\0"+
    "\7\12\1\0\27\12\1\0\37\12\1\0\1\12\1\0\4\12\2\0"+
    "\7\12\1\0\47\12\1\0\23\12\16\0\11\13\56\0\125\12\14\0"+
    "\u026c\12\2\0\10\12\12\0\32\12\5\0\113\12\25\0\15\12\1\0"+
    "\4\12\16\0\22\12\16\0\22\12\16\0\15\12\1\0\3\12\17\0"+
    "\64\12\43\0\1\12\4\0\1\12\3\0\12\13\46\0\12\13\6\0"+
    "\130\12\10\0\51\12\127\0\35\12\51\0\12\13\36\12\2\0\5\12"+
    "\u038b\0\154\12\224\0\234\12\4\0\132\12\6\0\26\12\2\0\6\12"+
    "\2\0\46\12\2\0\6\12\2\0\10\12\1\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\37\12\2\0\65\12\1\0\7\12\1\0\1\12"+
    "\3\0\3\12\1\0\7\12\3\0\4\12\2\0\6\12\4\0\15\12"+
    "\5\0\3\12\1\0\7\12\164\0\1\12\15\0\1\12\202\0\1\12"+
    "\4\0\1\12\2\0\12\12\1\0\1\12\3\0\5\12\6\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\4\12\1\0\3\12\1\0\7\12"+
    "\3\0\3\12\5\0\5\12\u0ebb\0\2\12\52\0\5\12\5\0\2\12"+
    "\4\0\126\12\6\0\3\12\1\0\132\12\1\0\4\12\5\0\50\12"+
    "\4\0\136\12\21\0\30\12\70\0\20\12\u0200\0\u19b6\12\112\0\u51a6\12"+
    "\132\0\u048d\12\u0773\0\u2ba4\12\u215c\0\u012e\12\2\0\73\12\225\0\7\12"+
    "\14\0\5\12\5\0\1\12\1\0\12\12\1\0\15\12\1\0\5\12"+
    "\1\0\1\12\1\0\2\12\1\0\2\12\1\0\154\12\41\0\u016b\12"+
    "\22\0\100\12\2\0\66\12\50\0\14\12\164\0\5\12\1\0\207\12"+
    "\23\0\12\13\7\0\32\12\6\0\32\12\13\0\131\12\3\0\6\12"+
    "\2\0\6\12\2\0\6\12\2\0\3\12\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\14\0\2\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\4\4\6\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\16\6\1\20\1\21\1\22\1\6"+
    "\1\23\1\24\1\6\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\3\1\44\1\45\2\3\1\46\1\3"+
    "\1\47\2\3\1\50\1\3\1\1\1\3\1\1\2\3"+
    "\2\51\1\52\3\3\2\53\1\54\1\55\1\56\1\55"+
    "\1\57\1\60\1\61\1\5\1\7\1\61\1\62\1\63"+
    "\1\64\1\65\1\17\1\20\1\21\1\22\1\23\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\66"+
    "\1\41\1\67\1\11\1\70\2\3\3\71\2\70\1\72"+
    "\1\0\1\73\1\74\1\2\1\75\1\0\1\76\6\6"+
    "\1\77\1\100\2\0\3\6\1\101\2\6\2\0\1\102"+
    "\3\0\1\103\1\0\1\104\1\105\1\106\7\6\1\107"+
    "\12\6\1\110\11\6\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\6\12\0\1\6\1\117\1\120\1\117\1\121"+
    "\1\0\1\122\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\1\131\1\132\1\133\1\134\4\0\2\102\2\135\1\136"+
    "\1\137\1\135\3\0\1\102\3\140\3\0\2\1\1\102"+
    "\2\141\1\0\1\142\10\0\1\143\1\0\1\144\1\145"+
    "\2\0\1\146\2\0\1\147\1\150\1\151\2\0\1\75"+
    "\1\0\7\6\2\75\1\152\1\6\1\153\2\6\1\0"+
    "\1\154\6\6\1\155\3\6\1\156\2\6\1\157\1\6"+
    "\1\160\1\161\21\6\1\162\1\163\12\0\7\6\1\164"+
    "\1\165\3\0\1\166\1\0\2\126\2\134\1\0\1\167"+
    "\1\45\1\167\1\47\1\167\1\170\1\1\1\170\2\1"+
    "\1\167\1\171\1\0\1\171\1\0\2\145\1\172\2\0"+
    "\6\6\1\173\1\174\1\6\1\175\23\6\1\176\11\6"+
    "\1\177\1\200\5\6\12\0\10\6\4\0\1\201\2\0"+
    "\1\45\1\47\1\1\2\0\1\6\1\202\5\6\1\203"+
    "\1\6\1\204\1\205\4\6\1\206\1\6\1\207\1\210"+
    "\3\6\1\211\2\6\1\212\1\6\1\213\1\6\1\214"+
    "\1\215\1\216\4\6\1\217\2\6\1\220\2\6\5\0"+
    "\1\221\6\0\10\6\2\222\4\0\4\223\2\224\1\0"+
    "\2\6\1\225\2\6\1\226\7\6\1\227\5\6\1\230"+
    "\1\231\1\232\1\6\1\233\1\234\2\6\4\0\1\235"+
    "\5\0\1\236\10\6\5\0\1\237\6\6\1\240\3\6"+
    "\1\241\1\242\1\6\1\243\2\6\1\244\1\245\1\6"+
    "\1\246\3\0\1\247\1\0\1\250\7\6\2\251\3\0"+
    "\3\6\1\252\1\253\5\6\1\254\1\6\1\255\2\6"+
    "\1\256\1\257\1\260\4\6\1\261\1\6\4\0\2\6"+
    "\1\262\1\263\1\6\1\264\2\6\1\265\1\6\1\266"+
    "\2\6\1\267\2\6\2\0\1\270\1\271\1\6\1\272"+
    "\1\273\4\6\1\274\3\0\5\6\4\0\1\275\1\276"+
    "\1\277\2\6\1\300\1\0\1\301\1\6\1\0\1\6"+
    "\1\0\1\302\14\0\1\74\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[723];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633"+
    "\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u051f\0\u07d1\0\u0816"+
    "\0\u085b\0\u051f\0\u051f\0\u051f\0\u08a0\0\u08e5\0\u092a\0\u096f"+
    "\0\u09b4\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97"+
    "\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf"+
    "\0\u051f\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2"+
    "\0\u0fe7\0\u102c\0\u051f\0\u051f\0\u051f\0\u051f\0\u1071\0\u051f"+
    "\0\u051f\0\u10b6\0\u051f\0\u10fb\0\u1140\0\u1185\0\u051f\0\u11ca"+
    "\0\u120f\0\u1254\0\u1299\0\u051f\0\u12de\0\u1323\0\u1368\0\u13ad"+
    "\0\u13f2\0\u1437\0\u051f\0\u147c\0\u051f\0\u14c1\0\u1506\0\u154b"+
    "\0\u051f\0\u1590\0\u051f\0\u051f\0\u15d5\0\u161a\0\u051f\0\u165f"+
    "\0\u16a4\0\u051f\0\u051f\0\u16e9\0\u051f\0\u051f\0\u051f\0\u051f"+
    "\0\u051f\0\u051f\0\u051f\0\u051f\0\u051f\0\u051f\0\u051f\0\u051f"+
    "\0\u051f\0\u051f\0\u051f\0\u051f\0\u051f\0\u051f\0\u051f\0\u051f"+
    "\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u051f\0\u051f"+
    "\0\u18cc\0\u051f\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a"+
    "\0\u051f\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u051f"+
    "\0\u051f\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u078c\0\u1da6"+
    "\0\u1deb\0\u1e30\0\u10b6\0\u1e75\0\u085b\0\u1eba\0\u1eff\0\u051f"+
    "\0\u1f44\0\u1f89\0\u051f\0\u078c\0\u1fce\0\u2013\0\u2058\0\u209d"+
    "\0\u20e2\0\u2127\0\u216c\0\u078c\0\u21b1\0\u21f6\0\u223b\0\u2280"+
    "\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e\0\u078c\0\u2463"+
    "\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u2601\0\u2646\0\u268b"+
    "\0\u051f\0\u051f\0\u051f\0\u051f\0\u26d0\0\u051f\0\u2715\0\u275a"+
    "\0\u279f\0\u0dbf\0\u27e4\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d"+
    "\0\u2982\0\u29c7\0\u2a0c\0\u051f\0\u051f\0\u2a51\0\u2a96\0\u051f"+
    "\0\u051f\0\u2adb\0\u051f\0\u2b20\0\u051f\0\u051f\0\u051f\0\u051f"+
    "\0\u051f\0\u2b65\0\u2baa\0\u1140\0\u2bef\0\u2c34\0\u2c79\0\u2cbe"+
    "\0\u2bef\0\u051f\0\u051f\0\u051f\0\u2c34\0\u1254\0\u2d03\0\u2d48"+
    "\0\u2d8d\0\u2d03\0\u051f\0\u2d48\0\u1368\0\u2dd2\0\u2e17\0\u2e5c"+
    "\0\u2ea1\0\u2ee6\0\u2dd2\0\u2e17\0\u147c\0\u051f\0\u2f2b\0\u14c1"+
    "\0\u154b\0\u1506\0\u2f70\0\u2fb5\0\u2ffa\0\u1590\0\u051f\0\u303f"+
    "\0\u051f\0\u3084\0\u30c9\0\u310e\0\u051f\0\u17b8\0\u3153\0\u051f"+
    "\0\u051f\0\u051f\0\u3198\0\u31dd\0\u3222\0\u3222\0\u3267\0\u32ac"+
    "\0\u32f1\0\u3336\0\u337b\0\u33c0\0\u3405\0\u1c4d\0\u1c92\0\u078c"+
    "\0\u344a\0\u078c\0\u348f\0\u34d4\0\u3519\0\u051f\0\u355e\0\u35a3"+
    "\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u078c\0\u36fc\0\u3741\0\u3786"+
    "\0\u078c\0\u37cb\0\u3810\0\u3855\0\u389a\0\u078c\0\u078c\0\u38df"+
    "\0\u3924\0\u3969\0\u39ae\0\u39f3\0\u3a38\0\u3a7d\0\u3ac2\0\u3b07"+
    "\0\u3b4c\0\u3b91\0\u3bd6\0\u3c1b\0\u3c60\0\u3ca5\0\u3cea\0\u3d2f"+
    "\0\u051f\0\u078c\0\u3d74\0\u3db9\0\u3dfe\0\u3e43\0\u3e88\0\u3ecd"+
    "\0\u3f12\0\u3f57\0\u3f9c\0\u3fe1\0\u4026\0\u406b\0\u40b0\0\u40f5"+
    "\0\u413a\0\u417f\0\u41c4\0\u051f\0\u051f\0\u4209\0\u424e\0\u4293"+
    "\0\u42d8\0\u431d\0\u4362\0\u051f\0\u43a7\0\u051f\0\u43ec\0\u051f"+
    "\0\u4431\0\u10fb\0\u4476\0\u120f\0\u051f\0\u44bb\0\u13ad\0\u4500"+
    "\0\u4545\0\u1323\0\u051f\0\u458a\0\u154b\0\u45cf\0\u30c9\0\u310e"+
    "\0\u051f\0\u4614\0\u4659\0\u469e\0\u46e3\0\u4728\0\u476d\0\u47b2"+
    "\0\u47f7\0\u078c\0\u483c\0\u4881\0\u078c\0\u48c6\0\u490b\0\u4950"+
    "\0\u4995\0\u49da\0\u4a1f\0\u4a64\0\u4aa9\0\u4aee\0\u4b33\0\u4b78"+
    "\0\u4bbd\0\u4c02\0\u4c47\0\u4c8c\0\u4cd1\0\u4d16\0\u4d5b\0\u4da0"+
    "\0\u078c\0\u4de5\0\u4e2a\0\u4e6f\0\u4eb4\0\u4ef9\0\u4f3e\0\u4f83"+
    "\0\u4fc8\0\u500d\0\u078c\0\u078c\0\u5052\0\u5097\0\u50dc\0\u5121"+
    "\0\u5166\0\u51ab\0\u51f0\0\u5235\0\u527a\0\u52bf\0\u5304\0\u5349"+
    "\0\u538e\0\u53d3\0\u5418\0\u545d\0\u54a2\0\u54e7\0\u552c\0\u5571"+
    "\0\u55b6\0\u55fb\0\u5640\0\u5685\0\u56ca\0\u570f\0\u5754\0\u051f"+
    "\0\u5799\0\u57de\0\u5823\0\u5868\0\u58ad\0\u58f2\0\u5937\0\u597c"+
    "\0\u078c\0\u59c1\0\u5a06\0\u5a4b\0\u5a90\0\u5ad5\0\u078c\0\u5b1a"+
    "\0\u078c\0\u078c\0\u5b5f\0\u5ba4\0\u5be9\0\u5c2e\0\u078c\0\u5c73"+
    "\0\u078c\0\u078c\0\u5cb8\0\u5cfd\0\u5d42\0\u078c\0\u5d87\0\u5dcc"+
    "\0\u078c\0\u5e11\0\u078c\0\u5e56\0\u078c\0\u078c\0\u078c\0\u5e9b"+
    "\0\u5ee0\0\u5f25\0\u5f6a\0\u078c\0\u5faf\0\u5ff4\0\u078c\0\u6039"+
    "\0\u607e\0\u60c3\0\u6108\0\u614d\0\u6192\0\u61d7\0\u051f\0\u621c"+
    "\0\u6261\0\u62a6\0\u62eb\0\u6330\0\u6375\0\u63ba\0\u63ff\0\u6444"+
    "\0\u6489\0\u64ce\0\u6513\0\u6558\0\u659d\0\u65e2\0\u051f\0\u6627"+
    "\0\u666c\0\u66b1\0\u66f6\0\u051f\0\u10fb\0\u120f\0\u1323\0\u673b"+
    "\0\u051f\0\u6780\0\u67c5\0\u680a\0\u684f\0\u6894\0\u68d9\0\u078c"+
    "\0\u691e\0\u6963\0\u69a8\0\u69ed\0\u6a32\0\u6a77\0\u6abc\0\u078c"+
    "\0\u6b01\0\u6b46\0\u6b8b\0\u6bd0\0\u6c15\0\u078c\0\u078c\0\u078c"+
    "\0\u6c5a\0\u078c\0\u078c\0\u6c9f\0\u6ce4\0\u6d29\0\u6d6e\0\u6db3"+
    "\0\u6df8\0\u051f\0\u6e3d\0\u6e82\0\u6ec7\0\u6f0c\0\u6f51\0\u051f"+
    "\0\u6f96\0\u6fdb\0\u7020\0\u7065\0\u70aa\0\u70ef\0\u7134\0\u7179"+
    "\0\u71be\0\u7203\0\u7248\0\u728d\0\u72d2\0\u078c\0\u7317\0\u735c"+
    "\0\u73a1\0\u73e6\0\u742b\0\u7470\0\u74b5\0\u74fa\0\u753f\0\u7584"+
    "\0\u078c\0\u078c\0\u75c9\0\u078c\0\u760e\0\u7653\0\u7698\0\u078c"+
    "\0\u76dd\0\u051f\0\u7722\0\u7767\0\u77ac\0\u051f\0\u77f1\0\u078c"+
    "\0\u7836\0\u787b\0\u78c0\0\u7905\0\u794a\0\u798f\0\u79d4\0\u7a19"+
    "\0\u051f\0\u7a5e\0\u7aa3\0\u7ae8\0\u7b2d\0\u7b72\0\u7bb7\0\u078c"+
    "\0\u078c\0\u7bfc\0\u7c41\0\u7c86\0\u7ccb\0\u7d10\0\u078c\0\u7d55"+
    "\0\u078c\0\u7d9a\0\u7ddf\0\u051f\0\u051f\0\u078c\0\u7e24\0\u7e69"+
    "\0\u7eae\0\u7ef3\0\u078c\0\u7f38\0\u7f7d\0\u7fc2\0\u8007\0\u804c"+
    "\0\u8091\0\u80d6\0\u078c\0\u078c\0\u811b\0\u078c\0\u8160\0\u81a5"+
    "\0\u078c\0\u81ea\0\u078c\0\u822f\0\u8274\0\u078c\0\u82b9\0\u82fe"+
    "\0\u8343\0\u8388\0\u078c\0\u078c\0\u83cd\0\u078c\0\u078c\0\u8412"+
    "\0\u8457\0\u849c\0\u84e1\0\u078c\0\u8526\0\u856b\0\u85b0\0\u85f5"+
    "\0\u863a\0\u867f\0\u86c4\0\u8709\0\u874e\0\u8793\0\u87d8\0\u881d"+
    "\0\u078c\0\u078c\0\u078c\0\u8862\0\u88a7\0\u051f\0\u88ec\0\u078c"+
    "\0\u8931\0\u8976\0\u89bb\0\u8a00\0\u078c\0\u8a45\0\u8a8a\0\u8acf"+
    "\0\u8b14\0\u8b59\0\u8b9e\0\u8be3\0\u8c28\0\u8c6d\0\u8cb2\0\u8cf7"+
    "\0\u8d3c\0\u051f\0\u8d81";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[723];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\64\22\1\23\20\22\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\25\1\35\1\24\1\36"+
    "\3\37\1\40\1\41\1\35\1\42\1\24\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\2\35\1\60\1\61\1\35\1\62"+
    "\1\63\1\35\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\35\1\72\1\35\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\56\1\112\1\113\14\114\1\115\3\114"+
    "\1\116\1\117\4\114\1\120\56\114\14\121\1\122\3\121"+
    "\1\123\2\121\1\124\2\121\1\125\56\121\14\126\1\127"+
    "\1\130\1\126\1\130\1\131\5\126\1\132\56\126\3\133"+
    "\1\134\2\133\3\134\1\133\1\134\7\133\1\134\5\133"+
    "\22\134\3\133\1\134\2\133\3\134\17\133\1\134\2\133"+
    "\105\135\3\136\1\137\2\136\3\137\4\136\1\140\1\136"+
    "\1\140\2\136\1\137\1\136\1\24\3\136\22\137\3\136"+
    "\1\137\2\136\3\137\17\136\1\137\2\136\3\141\1\142"+
    "\2\141\3\142\1\141\1\142\7\141\1\142\5\141\22\142"+
    "\3\141\1\142\2\141\3\142\17\141\1\142\2\141\105\143"+
    "\3\144\1\145\2\144\3\145\1\144\1\145\2\144\3\37"+
    "\2\144\1\145\5\144\22\145\1\146\2\144\1\145\2\144"+
    "\3\145\17\144\1\145\2\144\3\147\1\150\2\147\3\150"+
    "\1\147\1\150\7\147\1\150\5\147\22\150\3\147\1\150"+
    "\2\147\3\150\17\147\1\150\2\147\1\24\1\151\1\152"+
    "\1\35\1\153\1\154\3\35\1\151\1\35\1\24\4\155"+
    "\1\40\1\156\1\35\1\157\1\24\1\43\1\160\1\161"+
    "\22\35\1\162\1\163\1\164\1\35\1\165\1\71\3\35"+
    "\1\166\1\167\1\170\1\171\1\172\1\173\1\174\1\175"+
    "\1\103\1\104\1\176\1\106\1\177\1\110\1\200\1\35"+
    "\2\155\65\201\1\202\17\201\65\203\1\204\17\203\15\205"+
    "\1\206\1\205\1\207\33\205\1\210\13\205\1\211\7\205"+
    "\1\211\5\205\27\0\1\212\55\0\64\22\1\213\104\22"+
    "\1\0\2\22\1\214\7\22\1\215\2\22\1\216\2\22"+
    "\106\0\1\25\1\217\1\220\1\0\1\25\3\0\1\25"+
    "\74\0\1\217\3\0\1\217\3\0\1\217\15\0\1\221"+
    "\56\0\1\35\1\0\1\35\1\0\1\35\1\222\5\35"+
    "\6\0\1\35\5\0\5\35\1\223\1\224\6\35\1\225"+
    "\3\35\1\226\3\0\1\227\2\0\3\35\17\0\1\35"+
    "\6\0\1\230\22\0\1\231\56\0\1\25\1\217\1\220"+
    "\1\0\1\25\1\232\1\0\1\233\1\25\74\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\7\35"+
    "\1\234\12\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\3\35\1\235\3\35"+
    "\6\0\1\35\5\0\5\35\1\236\2\35\1\237\1\240"+
    "\10\35\3\0\1\35\2\0\3\35\17\0\1\237\3\0"+
    "\1\35\1\0\1\35\1\0\7\35\5\0\1\41\1\35"+
    "\5\0\11\35\1\241\10\35\3\0\1\35\2\0\3\35"+
    "\1\0\1\242\15\0\1\35\1\243\2\0\1\35\1\0"+
    "\1\35\1\0\7\35\6\0\1\35\5\0\22\35\3\0"+
    "\1\35\2\0\3\35\17\0\1\35\17\0\3\37\70\0"+
    "\1\244\2\0\3\244\1\0\1\244\7\0\1\244\5\0"+
    "\22\244\3\0\1\244\2\0\3\244\17\0\1\244\2\0"+
    "\14\245\1\246\3\245\1\247\1\250\4\245\1\251\56\245"+
    "\27\0\1\252\23\0\1\253\32\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\3\35\1\254\1\35"+
    "\1\255\2\35\1\256\10\35\1\257\3\0\1\35\2\0"+
    "\3\35\17\0\1\256\3\0\1\35\1\0\1\35\1\0"+
    "\7\35\6\0\1\35\5\0\11\35\1\260\1\35\1\261"+
    "\6\35\3\0\1\35\2\0\3\35\17\0\1\35\3\0"+
    "\1\35\1\0\1\262\1\0\7\35\6\0\1\35\5\0"+
    "\1\263\6\35\1\264\12\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\1\265\3\35\1\266\2\35\1\267"+
    "\12\35\3\0\1\35\2\0\3\35\17\0\1\35\3\0"+
    "\1\35\1\0\1\35\1\0\7\35\6\0\1\35\5\0"+
    "\5\35\1\270\2\35\1\271\11\35\3\0\1\35\2\0"+
    "\3\35\17\0\1\271\3\0\1\35\1\0\1\272\1\0"+
    "\2\35\1\273\4\35\6\0\1\35\5\0\22\35\3\0"+
    "\1\35\2\0\3\35\17\0\1\35\3\0\1\35\1\0"+
    "\1\35\1\0\2\35\1\274\4\35\6\0\1\35\5\0"+
    "\7\35\1\275\5\35\1\276\4\35\3\0\1\35\2\0"+
    "\3\35\17\0\1\35\3\0\1\35\1\0\1\35\1\0"+
    "\7\35\6\0\1\35\5\0\11\35\1\277\10\35\3\0"+
    "\1\35\2\0\3\35\17\0\1\35\3\0\1\35\1\0"+
    "\1\35\1\0\7\35\6\0\1\35\5\0\1\35\1\300"+
    "\12\35\1\301\5\35\3\0\1\35\2\0\3\35\17\0"+
    "\1\35\3\0\1\35\1\0\1\302\1\0\7\35\6\0"+
    "\1\35\5\0\22\35\3\0\1\35\2\0\3\35\17\0"+
    "\1\35\3\0\1\35\1\0\1\35\1\0\7\35\6\0"+
    "\1\35\5\0\13\35\1\303\6\35\3\0\1\35\2\0"+
    "\3\35\17\0\1\35\3\0\1\35\1\0\1\35\1\0"+
    "\7\35\6\0\1\35\5\0\1\304\21\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\7\35\1\305\5\35"+
    "\1\306\4\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\4\35\1\307\4\35\1\310\10\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\31\0\1\311\22\0\1\312"+
    "\1\313\60\0\1\314\23\0\1\315\105\0\1\316\31\0"+
    "\1\35\1\0\1\35\1\0\2\35\1\317\4\35\6\0"+
    "\1\35\5\0\22\35\3\0\1\35\2\0\3\35\17\0"+
    "\1\35\11\0\1\320\1\321\5\0\1\322\11\0\1\323"+
    "\1\0\1\324\1\325\1\326\2\0\1\327\1\330\1\331"+
    "\40\0\1\330\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\22\35\3\0\1\35\2\0\1\35"+
    "\1\332\1\35\17\0\1\35\31\0\1\333\104\0\1\334"+
    "\23\0\1\335\10\0\1\336\1\0\1\337\45\0\1\340"+
    "\104\0\1\341\35\0\1\342\1\113\45\0\1\343\23\0"+
    "\1\344\60\0\1\345\40\0\1\346\43\0\1\347\41\0"+
    "\1\350\42\0\1\351\130\0\1\352\31\0\14\243\1\353"+
    "\66\243\1\250\1\243\14\114\1\354\3\114\1\355\1\0"+
    "\4\114\1\356\166\114\1\357\2\114\3\357\1\114\1\360"+
    "\1\114\1\354\3\114\1\361\1\362\1\357\1\114\1\0"+
    "\1\114\1\363\1\114\22\357\3\114\1\357\2\114\3\357"+
    "\17\114\1\357\16\114\1\354\3\114\1\364\1\362\4\114"+
    "\1\365\56\114\14\121\1\366\3\121\1\367\2\121\1\0"+
    "\2\121\1\370\166\121\1\357\2\121\3\357\1\121\1\371"+
    "\1\121\1\366\3\121\1\372\1\121\1\357\1\373\1\0"+
    "\1\121\1\363\1\121\22\357\3\121\1\357\2\121\3\357"+
    "\17\121\1\357\16\121\1\366\3\121\1\364\2\121\1\373"+
    "\2\121\1\374\56\121\14\126\1\375\1\130\1\126\1\130"+
    "\1\376\5\126\1\377\73\126\1\130\1\126\1\130\70\126"+
    "\1\u0100\2\126\3\u0100\1\126\1\u0101\1\126\1\375\1\130"+
    "\1\126\1\130\1\376\1\126\1\u0100\1\126\1\0\1\126"+
    "\1\377\1\126\22\u0100\3\126\1\u0100\2\126\3\u0100\17\126"+
    "\1\u0100\5\126\1\357\2\126\3\357\1\126\1\u0102\1\126"+
    "\1\375\1\130\1\126\1\130\1\u0103\1\126\1\357\1\126"+
    "\1\0\1\126\1\363\1\126\22\357\3\126\1\357\2\126"+
    "\3\357\17\126\1\357\16\126\1\375\1\130\1\126\1\130"+
    "\1\364\5\126\1\u0104\56\126\1\0\1\u0105\1\0\1\u0105"+
    "\1\0\7\u0105\1\0\1\u0106\1\0\1\u0106\2\0\1\u0105"+
    "\2\0\1\u0107\2\0\22\u0105\3\0\1\u0105\2\0\3\u0105"+
    "\17\0\1\u0105\2\0\15\u0108\1\u0109\1\u0108\1\u0109\66\u0108"+
    "\1\u010a\1\u0108\1\u010a\1\u0108\5\u010a\3\u0108\1\0\1\u0108"+
    "\1\0\2\u0108\1\u010a\1\u0108\1\0\1\u010b\2\u0108\22\u010a"+
    "\3\u0108\1\u010a\2\u0108\3\u010a\17\u0108\1\u010a\5\u0108\1\u010c"+
    "\2\u0108\3\u010c\1\u0108\1\u010d\2\u0108\1\u0109\1\u0108\1\u0109"+
    "\2\u0108\1\u010c\1\u0108\1\0\3\u0108\22\u010c\3\u0108\1\u010c"+
    "\2\u0108\3\u010c\17\u0108\1\u010c\2\u0108\1\0\1\u010e\1\0"+
    "\1\u010e\1\0\7\u010e\1\0\1\u010f\1\0\1\u010f\2\0"+
    "\1\u010e\2\0\1\u0110\2\0\22\u010e\3\0\1\u010e\2\0"+
    "\3\u010e\17\0\1\u010e\3\0\1\145\1\0\1\145\1\0"+
    "\7\145\6\0\1\145\5\0\22\145\3\0\1\145\2\0"+
    "\3\145\17\0\1\145\55\0\1\u0111\32\0\1\150\1\0"+
    "\1\150\1\0\7\150\6\0\1\150\5\0\22\150\3\0"+
    "\1\150\2\0\3\150\17\0\1\150\3\0\1\151\3\0"+
    "\1\151\3\0\1\151\74\0\1\u0112\3\0\1\u0112\1\u0113"+
    "\1\0\1\u0114\1\u0112\73\0\65\201\1\0\17\201\66\0"+
    "\1\u0115\16\0\65\u0116\1\u0117\104\u0116\1\u0117\1\u0118\16\u0116"+
    "\15\205\1\206\1\205\1\207\33\205\1\207\13\205\1\207"+
    "\7\205\1\207\5\205\17\0\1\207\140\0\1\u0119\31\0"+
    "\64\22\1\0\2\22\1\0\7\22\1\0\2\22\1\0"+
    "\2\22\27\0\1\u011a\104\0\1\u011a\20\0\1\u011b\72\0"+
    "\1\u011c\47\0\1\217\1\0\1\220\1\0\1\217\3\0"+
    "\1\217\74\0\1\u011d\2\0\1\u011e\1\u011d\3\0\1\u011d"+
    "\40\0\1\u011e\33\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\1\u011f\1\u0120\20\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\2\35\1\u0121\17\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\13\35"+
    "\1\u0122\6\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\10\35\1\u0123\11\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\u0123\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\20\35\1\u0124\1\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\2\35\1\u0125\4\35\6\0\1\35\5\0\22\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\u0126"+
    "\1\0\1\u0126\1\0\1\u0126\1\0\3\u0126\20\0\2\u0126"+
    "\2\0\1\u0126\53\0\1\u0127\3\0\1\u0127\74\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\11\35"+
    "\1\u0128\10\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\10\35\1\u0129\11\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\u0129\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\2\35\1\u012a\17\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\11\35\1\u012b\10\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\u012c\1\0\7\35\6\0\1\35\5\0\22\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\66\0\1\u012d"+
    "\21\0\1\244\1\0\1\244\1\0\7\244\6\0\1\244"+
    "\5\0\22\244\3\0\1\244\2\0\3\244\17\0\1\244"+
    "\2\0\110\245\1\0\2\245\3\0\3\245\1\246\3\245"+
    "\1\247\1\250\1\0\1\245\1\0\1\245\1\0\1\245"+
    "\22\0\3\245\1\0\2\245\3\0\17\245\1\0\16\245"+
    "\1\246\3\245\1\0\1\250\4\245\1\251\56\245\27\0"+
    "\1\u012e\56\0\1\35\1\0\1\35\1\0\7\35\6\0"+
    "\1\35\5\0\1\35\1\u012f\4\35\1\u0130\1\35\1\u0131"+
    "\11\35\3\0\1\35\2\0\3\35\17\0\1\u0131\3\0"+
    "\1\35\1\0\1\35\1\0\7\35\6\0\1\35\5\0"+
    "\10\35\1\u0132\11\35\3\0\1\35\2\0\3\35\17\0"+
    "\1\u0132\3\0\1\35\1\0\1\35\1\0\7\35\6\0"+
    "\1\35\5\0\20\35\1\u0133\1\35\3\0\1\35\2\0"+
    "\3\35\17\0\1\35\3\0\1\35\1\0\1\35\1\0"+
    "\2\35\1\u0134\4\35\6\0\1\35\5\0\12\35\1\u0135"+
    "\7\35\3\0\1\35\2\0\3\35\17\0\1\35\3\0"+
    "\1\35\1\0\1\35\1\0\7\35\6\0\1\35\5\0"+
    "\11\35\1\u0136\10\35\3\0\1\35\2\0\3\35\17\0"+
    "\1\35\3\0\1\35\1\0\1\35\1\0\7\35\6\0"+
    "\1\35\5\0\3\35\1\u0137\2\35\1\u0138\13\35\3\0"+
    "\1\35\2\0\3\35\17\0\1\35\3\0\1\35\1\0"+
    "\1\u0139\1\0\7\35\6\0\1\35\5\0\22\35\3\0"+
    "\1\35\2\0\3\35\17\0\1\35\3\0\1\35\1\0"+
    "\1\35\1\0\7\35\6\0\1\35\5\0\5\35\1\u013a"+
    "\14\35\3\0\1\35\2\0\3\35\17\0\1\35\3\0"+
    "\1\35\1\0\1\35\1\0\7\35\6\0\1\35\5\0"+
    "\5\35\1\u013b\14\35\3\0\1\35\2\0\3\35\17\0"+
    "\1\35\3\0\1\35\1\0\1\35\1\0\7\35\6\0"+
    "\1\35\5\0\11\35\1\u013c\10\35\3\0\1\35\2\0"+
    "\3\35\17\0\1\35\3\0\1\35\1\0\1\35\1\0"+
    "\7\35\6\0\1\35\5\0\10\35\1\u013d\11\35\3\0"+
    "\1\35\2\0\3\35\17\0\1\u013d\3\0\1\35\1\0"+
    "\1\u013e\1\0\7\35\6\0\1\35\5\0\22\35\3\0"+
    "\1\35\2\0\3\35\17\0\1\35\3\0\1\35\1\0"+
    "\1\35\1\0\7\35\6\0\1\35\5\0\14\35\1\u013f"+
    "\5\35\3\0\1\35\2\0\3\35\17\0\1\35\3\0"+
    "\1\35\1\0\1\35\1\0\7\35\6\0\1\35\5\0"+
    "\21\35\1\u0140\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\1\35\1\u0141\6\35\1\u0142\11\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\u0142\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\5\35\1\u0143\14\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\2\35\1\u0144\4\35\6\0\1\35"+
    "\5\0\7\35\1\u0145\12\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\2\35"+
    "\1\u0146\4\35\6\0\1\35\5\0\22\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\1\u0147\21\35\3\0"+
    "\1\35\2\0\3\35\17\0\1\35\3\0\1\35\1\0"+
    "\1\35\1\0\7\35\6\0\1\35\5\0\1\35\1\u0148"+
    "\20\35\3\0\1\35\2\0\2\35\1\u0149\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\1\u014a\21\35\3\0\1\35\2\0\3\35\17\0"+
    "\1\35\3\0\1\35\1\0\1\35\1\0\7\35\6\0"+
    "\1\35\5\0\10\35\1\u014b\11\35\3\0\1\35\2\0"+
    "\3\35\17\0\1\u014b\3\0\1\35\1\0\1\35\1\0"+
    "\7\35\6\0\1\35\5\0\1\35\1\u014c\20\35\3\0"+
    "\1\35\2\0\3\35\17\0\1\35\3\0\1\35\1\0"+
    "\1\35\1\0\7\35\6\0\1\35\5\0\7\35\1\u014d"+
    "\12\35\3\0\1\35\2\0\3\35\17\0\1\35\3\0"+
    "\1\35\1\0\1\35\1\0\3\35\1\u014e\3\35\6\0"+
    "\1\35\5\0\22\35\3\0\1\35\2\0\3\35\17\0"+
    "\1\35\3\0\1\35\1\0\1\35\1\0\7\35\6\0"+
    "\1\35\5\0\1\u014f\6\35\1\u0150\12\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\31\0\1\u0151\56\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\11\35"+
    "\1\u0152\10\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\43\0\1\u0153\73\0\1\u0154\6\0\1\u0155\102\0\1\u0156"+
    "\106\0\1\u0157\112\0\1\u0158\74\0\1\u0159\57\0\1\u015a"+
    "\125\0\1\u015b\56\0\1\u015c\102\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\2\35\1\u015d\1\u015e"+
    "\1\35\1\u015f\1\u0160\4\35\1\u0161\1\35\1\u0162\3\35"+
    "\1\u0163\3\0\1\35\2\0\3\35\17\0\1\35\31\0"+
    "\1\u0164\104\0\1\u0165\34\0\1\u0166\60\0\1\u0167\41\0"+
    "\1\u0167\17\0\3\u0168\45\0\1\u0169\12\0\1\u016a\21\0"+
    "\1\u016b\1\0\1\u016c\102\0\1\u016d\1\0\1\u016e\65\0"+
    "\105\243\3\114\1\0\2\114\3\0\3\114\1\354\3\114"+
    "\1\361\1\362\1\0\1\114\1\0\1\114\1\0\1\114"+
    "\22\0\3\114\1\0\2\114\3\0\17\114\1\0\16\114"+
    "\1\354\3\114\1\0\1\362\4\114\1\365\56\114\1\0"+
    "\1\357\1\0\1\357\1\0\7\357\6\0\1\357\5\0"+
    "\22\357\1\u016f\2\0\1\357\2\0\3\357\11\0\1\u0170"+
    "\5\0\1\357\2\0\1\114\1\360\1\114\1\360\1\114"+
    "\7\360\1\354\3\114\1\355\1\0\1\360\3\114\1\356"+
    "\1\114\22\360\1\u0171\2\114\1\360\2\114\3\360\11\114"+
    "\1\u0172\5\114\1\360\2\114\3\121\1\0\2\121\3\0"+
    "\3\121\1\366\3\121\1\372\1\121\1\0\1\373\1\0"+
    "\1\121\1\0\1\121\22\0\3\121\1\0\2\121\3\0"+
    "\17\121\1\0\16\121\1\366\3\121\1\0\2\121\1\373"+
    "\2\121\1\374\57\121\1\371\1\121\1\371\1\121\7\371"+
    "\1\366\3\121\1\367\1\121\1\371\1\0\2\121\1\370"+
    "\1\121\22\371\1\u0173\2\121\1\371\2\121\3\371\11\121"+
    "\1\u0174\5\121\1\371\2\121\3\126\1\0\2\126\3\0"+
    "\3\126\1\375\1\130\1\126\1\130\1\u0103\1\126\1\0"+
    "\1\126\1\0\1\126\1\0\1\126\22\0\3\126\1\0"+
    "\2\126\3\0\17\126\1\0\16\126\1\375\1\130\1\126"+
    "\1\130\1\0\5\126\1\u0104\57\126\1\u0100\1\126\1\u0100"+
    "\1\126\5\u0100\2\u0101\1\375\1\u0175\1\126\1\u0175\1\376"+
    "\1\126\1\u0100\1\126\1\0\1\u0176\1\377\1\126\22\u0100"+
    "\3\126\1\u0100\2\126\3\u0100\17\126\1\u0100\3\126\1\u0101"+
    "\1\126\1\u0101\1\126\7\u0101\1\375\1\u0177\1\126\1\u0177"+
    "\1\376\1\126\1\u0101\2\126\1\u0178\1\377\1\126\22\u0101"+
    "\3\126\1\u0101\2\126\3\u0101\17\126\1\u0101\3\126\1\u0102"+
    "\1\126\1\u0102\1\126\7\u0102\1\375\1\130\1\126\1\130"+
    "\1\376\1\126\1\u0102\3\126\1\377\1\126\22\u0102\1\u0179"+
    "\2\126\1\u0102\2\126\3\u0102\11\126\1\u017a\5\126\1\u0102"+
    "\2\126\15\0\1\u0106\1\0\1\u0106\65\0\15\u0108\1\0"+
    "\1\u0108\1\0\66\u0108\1\u010c\1\u0108\1\u010c\1\u0108\5\u010c"+
    "\2\u010d\1\u0108\1\u017b\1\u0108\1\u017b\2\u0108\1\u010c\1\u0108"+
    "\1\0\1\u017c\2\u0108\22\u010c\3\u0108\1\u010c\2\u0108\3\u010c"+
    "\17\u0108\1\u010c\3\u0108\1\u010d\1\u0108\1\u010d\1\u0108\7\u010d"+
    "\1\u0108\1\u017d\1\u0108\1\u017d\2\u0108\1\u010d\2\u0108\1\u017e"+
    "\2\u0108\22\u010d\3\u0108\1\u010d\2\u0108\3\u010d\17\u0108\1\u010d"+
    "\2\u0108\15\0\1\u010f\1\0\1\u010f\66\0\1\u0112\3\0"+
    "\1\u0112\3\0\1\u0112\74\0\1\u017f\1\0\1\u017f\1\0"+
    "\1\u017f\1\0\3\u017f\20\0\2\u017f\2\0\1\u017f\53\0"+
    "\1\u0180\3\0\1\u0180\73\0\65\u0116\1\u0117\1\u0181\16\u0116"+
    "\43\0\1\u0182\102\0\1\u0183\44\0\1\u011d\3\0\1\u011d"+
    "\3\0\1\u011d\74\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\1\35\1\u0139\20\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\u0184"+
    "\1\0\7\35\6\0\1\35\5\0\22\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\1\u0185\1\35\1\u0186"+
    "\1\u0187\4\35\1\u0188\3\35\1\u0189\5\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\u0188\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\7\35\1\u018a\12\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\u018b\1\0\7\35\6\0\1\35\5\0\22\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\1\35"+
    "\1\u018c\20\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\15\35\1\u018d\4\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\1\35\1\u018e\20\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\2\35\1\u018f\4\35\6\0\1\35\5\0\22\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\2\35\1\u0190\4\35\6\0\1\35"+
    "\5\0\22\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\66\0\1\u0166\21\0\1\35\1\0\1\u0191\1\0\7\35"+
    "\6\0\1\35\5\0\22\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\15\35\1\u0192\4\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\1\35\1\u0193\20\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\u0194\1\0\7\35\6\0\1\35\5\0\22\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\15\35"+
    "\1\u0195\4\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\1\u0196\21\35\3\0\1\35\2\0\3\35\17\0"+
    "\1\35\3\0\1\35\1\0\1\35\1\0\7\35\6\0"+
    "\1\35\5\0\7\35\1\u0197\12\35\3\0\1\35\2\0"+
    "\3\35\17\0\1\35\3\0\1\35\1\0\1\35\1\0"+
    "\2\35\1\u0198\4\35\6\0\1\35\5\0\1\u0199\21\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\15\35"+
    "\1\u019a\4\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\2\35\1\u019b\4\35"+
    "\6\0\1\35\5\0\22\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\6\35\1\u019c\13\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\u019d"+
    "\1\0\7\35\6\0\1\35\5\0\22\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\u019e"+
    "\1\0\7\35\6\0\1\35\5\0\22\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\u019f"+
    "\1\0\7\35\6\0\1\35\5\0\22\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\6\35\1\u01a0\13\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\u01a1\1\0\7\35\6\0\1\35\5\0\22\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\1\35"+
    "\1\u01a2\6\35\1\u01a3\11\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\u01a3\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\10\35\1\u01a4\11\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\u01a4\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\5\35\1\u01a5\14\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\1\35"+
    "\1\u01a6\20\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\1\35\1\u01a7\20\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\4\35\1\u01a8\15\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\4\35\1\u01a9\15\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\15\35"+
    "\1\u01aa\4\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\1\35\1\u01ab\20\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\7\35\1\u01ac\12\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\3\35\1\u01ad\3\35\6\0\1\35\5\0\22\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\15\35"+
    "\1\u01ae\4\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\5\35\1\u01af\14\35\3\0\1\u01b0\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\1\35\1\u01b1\20\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\43\0\1\u01b2\100\0\1\u01b3"+
    "\106\0\1\u01b4\76\0\1\u01b5\107\0\1\u01b6\107\0\1\u01b7"+
    "\105\0\1\u01b8\41\0\1\u01b8\62\0\1\u01b9\65\0\1\u01ba"+
    "\52\0\1\u01bb\76\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\1\u01bc\21\35\3\0\1\35\2\0"+
    "\3\35\17\0\1\35\3\0\1\35\1\0\1\35\1\0"+
    "\7\35\6\0\1\35\5\0\1\u01bd\3\35\1\u01be\15\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\2\35\1\u01bf\4\35\6\0\1\35"+
    "\5\0\22\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\15\35\1\u01c0\4\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\2\35"+
    "\1\u01c1\4\35\6\0\1\35\5\0\22\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\1\u01c2\21\35\3\0"+
    "\1\35\2\0\3\35\17\0\1\35\3\0\1\35\1\0"+
    "\1\u01c3\1\0\7\35\6\0\1\35\5\0\22\35\3\0"+
    "\1\35\2\0\3\35\17\0\1\35\5\0\1\u01c4\2\0"+
    "\3\u01c4\1\0\1\u01c4\3\0\1\u0166\2\0\1\u01c5\1\u01c4"+
    "\5\0\22\u01c4\3\0\1\u01c4\2\0\3\u01c4\17\0\1\u01c4"+
    "\1\u01c6\37\0\1\u01c7\63\0\3\u0168\60\0\1\u016a\72\0"+
    "\1\u01c8\73\0\1\u01c9\46\0\1\u016c\104\0\1\u016e\140\0"+
    "\1\u01ca\31\0\14\114\1\354\3\114\1\355\1\0\4\114"+
    "\1\356\24\114\1\u01cb\31\114\14\121\1\366\3\121\1\367"+
    "\2\121\1\0\2\121\1\370\24\121\1\u01cc\31\121\14\126"+
    "\1\375\1\u0175\1\126\1\u0175\1\376\5\126\1\377\72\126"+
    "\1\375\1\u0177\1\126\1\u0177\1\376\5\126\1\377\72\126"+
    "\1\375\1\130\1\126\1\130\1\376\5\126\1\377\24\126"+
    "\1\u01cd\31\126\15\u0108\1\u017b\1\u0108\1\u017b\102\u0108\1\u017d"+
    "\1\u0108\1\u017d\65\u0108\50\0\1\u01ce\64\0\1\u01cf\55\0"+
    "\1\35\1\0\1\35\1\0\7\35\6\0\1\35\5\0"+
    "\5\35\1\u01d0\14\35\3\0\1\35\2\0\3\35\17\0"+
    "\1\35\3\0\1\35\1\0\1\35\1\0\7\35\6\0"+
    "\1\35\5\0\3\35\1\u01d1\16\35\3\0\1\35\2\0"+
    "\3\35\17\0\1\35\3\0\1\35\1\0\1\u01d2\1\0"+
    "\7\35\6\0\1\35\5\0\22\35\3\0\1\35\2\0"+
    "\3\35\17\0\1\35\3\0\1\35\1\0\1\35\1\0"+
    "\7\35\6\0\1\35\5\0\7\35\1\u01d3\12\35\3\0"+
    "\1\35\2\0\3\35\17\0\1\35\3\0\1\35\1\0"+
    "\1\35\1\0\7\35\6\0\1\35\5\0\14\35\1\u01d4"+
    "\5\35\3\0\1\35\2\0\3\35\17\0\1\35\3\0"+
    "\1\35\1\0\1\35\1\0\7\35\6\0\1\35\5\0"+
    "\13\35\1\u01d5\6\35\3\0\1\35\2\0\3\35\17\0"+
    "\1\35\3\0\1\35\1\0\1\35\1\0\7\35\6\0"+
    "\1\35\5\0\1\u01d6\21\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\12\35\1\u01d7\7\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\11\35\1\u01d8\10\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\12\35"+
    "\1\u01d9\7\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\16\35\1\u01da\3\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\11\35\1\u01db\10\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\4\35\1\u01dc\15\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\u01dd\1\0\2\35\1\u01de\4\35\6\0\1\35"+
    "\5\0\22\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\1\35\1\u01df\20\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\u01e0\1\0\7\35"+
    "\6\0\1\35\5\0\22\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\1\35\1\u01e1\20\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\14\35\1\u01e2\5\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\4\35"+
    "\1\u01e3\15\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\5\35\1\u01e4\14\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\2\35"+
    "\1\u01e5\4\35\6\0\1\35\5\0\22\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\15\35\1\u01e6\4\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\1\35"+
    "\1\u01e7\20\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\2\35\1\u01e8\4\35"+
    "\6\0\1\35\5\0\22\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\1\35\1\u01e9\20\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\10\35\1\u01ea\11\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\u01ea\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\13\35"+
    "\1\u01eb\6\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\1\u01ec\21\35\3\0\1\35\2\0\3\35\17\0"+
    "\1\35\3\0\1\35\1\0\1\35\1\0\7\35\6\0"+
    "\1\35\5\0\1\35\1\u01ed\20\35\3\0\1\35\2\0"+
    "\3\35\17\0\1\35\3\0\1\35\1\0\1\35\1\0"+
    "\7\35\6\0\1\35\5\0\10\35\1\u01ee\11\35\3\0"+
    "\1\35\2\0\3\35\17\0\1\u01ee\3\0\1\35\1\0"+
    "\1\u01ef\1\0\7\35\6\0\1\35\5\0\22\35\3\0"+
    "\1\35\2\0\3\35\17\0\1\35\3\0\1\35\1\0"+
    "\1\35\1\0\7\35\6\0\1\35\5\0\1\u01f0\21\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\6\35"+
    "\1\u01f1\13\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\11\35\1\u01f2\10\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\1\u01f3\21\35\3\0\1\35\2\0"+
    "\3\35\17\0\1\35\3\0\1\35\1\0\1\u01f4\1\0"+
    "\7\35\6\0\1\35\5\0\22\35\3\0\1\35\2\0"+
    "\3\35\17\0\1\35\3\0\1\35\1\0\1\35\1\0"+
    "\2\35\1\u01f5\4\35\6\0\1\35\5\0\22\35\3\0"+
    "\1\35\2\0\3\35\17\0\1\35\3\0\1\35\1\0"+
    "\1\35\1\0\7\35\6\0\1\35\5\0\1\u01f6\21\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\1\35"+
    "\1\u01f7\20\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\2\35\1\u01f8\4\35"+
    "\6\0\1\35\5\0\22\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\u01f9\1\0\7\35"+
    "\6\0\1\35\5\0\22\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\11\0\1\u01fa\104\0\1\u01fb\142\0\1\u01fc"+
    "\42\0\1\u01fd\12\0\1\u01fe\40\0\1\u01ff\35\0\1\u0200"+
    "\103\0\1\u0201\100\0\1\u0202\104\0\1\u0203\131\0\1\u0204"+
    "\121\0\1\u0205\40\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\11\35\1\u0206\10\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\15\35\1\u0207\4\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\5\35"+
    "\1\u0208\14\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\21\35\1\u0209\3\0\1\35\2\0\3\35\17\0"+
    "\1\35\3\0\1\35\1\0\1\35\1\0\2\35\1\u020a"+
    "\4\35\6\0\1\35\5\0\22\35\3\0\1\35\2\0"+
    "\3\35\17\0\1\35\3\0\1\35\1\0\1\35\1\0"+
    "\7\35\6\0\1\35\5\0\15\35\1\u020b\4\35\3\0"+
    "\1\35\2\0\3\35\17\0\1\35\3\0\1\35\1\0"+
    "\1\35\1\0\7\35\6\0\1\35\5\0\5\35\1\u020c"+
    "\14\35\3\0\1\35\2\0\3\35\17\0\1\35\3\0"+
    "\1\35\1\0\1\35\1\0\7\35\6\0\1\35\5\0"+
    "\1\35\1\u020d\20\35\3\0\1\35\2\0\3\35\17\0"+
    "\1\35\3\0\1\u01c4\1\0\1\u01c4\1\0\7\u01c4\1\0"+
    "\1\u020e\1\0\1\u020f\2\0\1\u01c4\5\0\22\u01c4\3\0"+
    "\1\u01c4\2\0\3\u01c4\17\0\1\u01c4\5\0\1\u0210\2\0"+
    "\3\u0210\1\0\1\u0210\7\0\1\u0210\5\0\22\u0210\3\0"+
    "\1\u0210\2\0\3\u0210\17\0\1\u0210\5\0\1\u0211\2\0"+
    "\3\u0211\1\0\1\u0211\7\0\1\u0211\5\0\22\u0211\3\0"+
    "\1\u0211\2\0\3\u0211\17\0\1\u0211\43\0\1\u0212\52\0"+
    "\1\u0213\100\0\1\u0214\2\0\3\u0214\11\0\1\u0214\1\0"+
    "\1\u0214\3\0\22\u0214\3\0\1\u0214\2\0\3\u0214\17\0"+
    "\1\u0214\2\0\3\114\1\u0215\2\114\3\u0215\3\114\1\354"+
    "\3\114\1\355\1\0\1\u0215\1\114\1\u0215\1\114\1\356"+
    "\1\114\22\u0215\3\114\1\u0215\2\114\3\u0215\17\114\1\u0215"+
    "\2\114\3\121\1\u0216\2\121\3\u0216\3\121\1\366\3\121"+
    "\1\367\1\121\1\u0216\1\0\1\u0216\1\121\1\370\1\121"+
    "\22\u0216\3\121\1\u0216\2\121\3\u0216\17\121\1\u0216\2\121"+
    "\3\126\1\u0217\2\126\3\u0217\3\126\1\375\1\130\1\126"+
    "\1\130\1\376\1\126\1\u0217\1\126\1\u0217\1\126\1\377"+
    "\1\126\22\u0217\3\126\1\u0217\2\126\3\u0217\17\126\1\u0217"+
    "\2\126\15\0\1\u0218\2\u0219\135\0\1\u021a\35\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\2\35"+
    "\1\u021b\17\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\6\35\1\u021c\13\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\11\35\1\u021d\10\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\1\u021e\21\35\3\0"+
    "\1\35\2\0\3\35\17\0\1\35\3\0\1\35\1\0"+
    "\1\35\1\0\7\35\6\0\1\35\5\0\1\u021f\21\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\3\35"+
    "\1\u0220\16\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\2\35\1\u0221\4\35"+
    "\6\0\1\35\5\0\22\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\3\35\1\u0222\16\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\2\35\1\u0223\17\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\2\35\1\u0224\4\35\6\0\1\35"+
    "\5\0\22\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\5\35\1\u0225\14\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\21\35\1\u0226\3\0\1\35\2\0"+
    "\3\35\17\0\1\35\3\0\1\35\1\0\1\35\1\0"+
    "\7\35\6\0\1\35\5\0\15\35\1\u0227\4\35\3\0"+
    "\1\35\2\0\3\35\17\0\1\35\3\0\1\35\1\0"+
    "\1\u0228\1\0\7\35\6\0\1\35\5\0\22\35\3\0"+
    "\1\35\2\0\3\35\17\0\1\35\3\0\1\35\1\0"+
    "\1\35\1\0\7\35\6\0\1\35\5\0\11\35\1\u0229"+
    "\10\35\3\0\1\35\2\0\3\35\17\0\1\35\3\0"+
    "\1\35\1\0\1\35\1\0\7\35\6\0\1\35\5\0"+
    "\1\u022a\21\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\6\35\1\u022b\13\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\20\35\1\u022c\1\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\5\35\1\u022d\14\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\6\35"+
    "\1\u022e\13\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\13\35\1\u022f\6\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\5\35\1\u0230\14\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\11\35\1\u0231\10\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\15\35"+
    "\1\u0232\4\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\6\35\1\u0233\13\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\1\35\1\u0234\20\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\6\35\1\u0235\13\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\44\0\1\u0236"+
    "\103\0\1\u0237\46\0\1\u0238\12\0\1\u0239\40\0\1\u023a"+
    "\74\0\1\u023b\53\0\1\u01fe\40\0\1\u01ff\72\0\1\u023c"+
    "\70\0\1\u0205\104\0\1\u023d\111\0\1\u023e\103\0\1\u023f"+
    "\65\0\1\u0205\40\0\1\u0240\26\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\22\35\3\0\1\35"+
    "\2\0\1\35\1\u0241\1\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\u0242\1\0\7\35\6\0\1\35\5\0\22\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\6\35"+
    "\1\u0243\13\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\u0244\1\0\7\35\6\0\1\35"+
    "\5\0\22\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\10\35\1\u0245\11\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\u0245\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\1\35\1\u0246\20\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\u0247"+
    "\1\0\7\35\6\0\1\35\5\0\22\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\13\35\1\u0248\6\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\21\0\1\u020f"+
    "\66\0\1\u0210\1\0\1\u0210\1\0\7\u0210\5\0\1\u0249"+
    "\1\u0210\5\0\22\u0210\3\0\1\u0210\2\0\3\u0210\17\0"+
    "\1\u0210\3\0\1\u0211\1\0\1\u0211\1\0\7\u0211\6\0"+
    "\1\u0211\5\0\22\u0211\3\0\1\u0211\2\0\3\u0211\17\0"+
    "\1\u0211\1\u024a\31\0\1\u024b\115\0\1\u024c\62\0\1\u0219"+
    "\116\0\1\u024d\54\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\10\35\1\u024e\11\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\u024e\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\15\35\1\u024f\4\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\u0250\1\0\7\35\6\0\1\35\5\0\22\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\1\35"+
    "\1\u0251\20\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\15\35\1\u0252\4\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\6\35\1\u0253\13\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\2\35\1\u0254\4\35\6\0\1\35\5\0\22\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\u0255\1\0\7\35\6\0\1\35\5\0\22\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\2\35"+
    "\1\u0256\17\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\6\35\1\u0257\13\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\u0258\1\0\7\35"+
    "\6\0\1\35\5\0\22\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\1\35\1\u0259\20\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\u025a"+
    "\1\0\7\35\6\0\1\35\5\0\22\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\7\35\1\u025b\12\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\13\35"+
    "\1\u025c\6\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\2\35\1\u025d\4\35"+
    "\6\0\1\35\5\0\22\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\4\35\1\u025e\15\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\u025f"+
    "\1\0\7\35\6\0\1\35\5\0\22\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\u0260"+
    "\1\0\7\35\6\0\1\35\5\0\22\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\1\35\1\u0261\20\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\20\0\1\u0236"+
    "\40\0\1\u0262\67\0\1\u0263\51\0\1\u0264\113\0\1\u0239"+
    "\40\0\1\u023a\30\0\1\u0265\104\0\1\u0205\117\0\1\u023d"+
    "\40\0\1\u0266\56\0\1\u0267\122\0\1\u0263\36\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\22\35"+
    "\3\0\1\35\2\0\1\35\1\u0268\1\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\22\35\3\0\1\35\2\0\1\35\1\u0269\1\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\1\35\1\u026a\20\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\10\35\1\u026b\11\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\u026b\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\10\35"+
    "\1\u026c\11\35\3\0\1\35\2\0\3\35\17\0\1\u026c"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\22\35\3\0\1\35\2\0\1\35\1\u026d\1\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\22\35\3\0\1\35\2\0\1\35"+
    "\1\u026e\1\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\7\35\1\u026f\12\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\17\0\1\u020e"+
    "\1\0\1\u020f\102\0\1\u0270\1\0\1\u0271\135\0\1\u0272"+
    "\51\0\3\u0273\102\0\3\u0274\66\0\1\35\1\0\1\35"+
    "\1\0\2\35\1\u0275\4\35\6\0\1\35\5\0\22\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\2\35\1\u0276\4\35\6\0\1\35"+
    "\5\0\22\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\6\35\1\u0277\13\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\u0278\1\0\7\35"+
    "\6\0\1\35\5\0\22\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\1\35\1\u0279\20\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\6\35\1\u027a\13\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\22\35"+
    "\3\0\1\35\2\0\1\35\1\u027b\1\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\7\35\1\u027c\12\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\u027d\1\0\7\35"+
    "\6\0\1\35\5\0\22\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\5\35\1\u027e\14\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\5\35\1\u027f\14\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\6\35"+
    "\1\u0280\13\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\u0281\1\0\7\35\6\0\1\35"+
    "\5\0\22\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\22\35\3\0\1\35\2\0\1\35\1\u0282\1\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\u0283\1\0\7\35"+
    "\6\0\1\35\5\0\22\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\20\0\1\u0263\40\0\1\u0284\62\0\1\u0239"+
    "\110\0\1\u01fe\61\0\1\u0267\40\0\1\u0285\26\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\22\35"+
    "\3\0\1\35\2\0\1\35\1\u0286\1\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\1\u0287\21\35\3\0\1\35\2\0\3\35\17\0"+
    "\1\35\3\0\1\35\1\0\1\35\1\0\7\35\6\0"+
    "\1\35\5\0\20\35\1\u0288\1\35\3\0\1\35\2\0"+
    "\3\35\17\0\1\35\3\0\1\35\1\0\1\35\1\0"+
    "\7\35\6\0\1\35\5\0\22\35\3\0\1\35\2\0"+
    "\1\35\1\u0289\1\35\17\0\1\35\3\0\1\35\1\0"+
    "\1\35\1\0\7\35\6\0\1\35\5\0\6\35\1\u028a"+
    "\13\35\3\0\1\35\2\0\3\35\17\0\1\35\3\0"+
    "\1\35\1\0\1\35\1\0\7\35\6\0\1\35\5\0"+
    "\22\35\3\0\1\35\2\0\1\35\1\u028b\1\35\17\0"+
    "\1\35\3\0\1\35\1\0\1\35\1\0\7\35\6\0"+
    "\1\35\5\0\2\35\1\u028c\17\35\3\0\1\35\2\0"+
    "\3\35\17\0\1\35\21\0\1\u0271\116\0\1\u028d\56\0"+
    "\1\u028e\2\0\3\u028e\1\0\1\u028e\2\0\3\u0273\1\u028f"+
    "\1\0\1\u028e\5\0\22\u028e\3\0\1\u028e\2\0\3\u028e"+
    "\17\0\1\u028e\17\0\3\u0274\25\0\1\u0290\40\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\11\35"+
    "\1\u0291\10\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\6\35\1\u0292\13\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\13\35\1\u0293\6\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\u0294"+
    "\1\0\7\35\6\0\1\35\5\0\22\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\7\35\1\u0295\12\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\3\35"+
    "\1\u0296\16\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\7\35\1\u0297\12\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\1\35\1\u0298\20\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\u0299"+
    "\1\0\7\35\6\0\1\35\5\0\22\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\7\35\1\u029a\12\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\2\35"+
    "\1\u029b\17\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\7\35\1\u029c\12\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\2\35"+
    "\1\u029d\4\35\6\0\1\35\5\0\22\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\22\35\3\0\1\35"+
    "\2\0\1\35\1\u029e\1\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\7\35"+
    "\1\u029f\12\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\22\35\3\0\1\35\2\0\1\35\1\u02a0\1\35"+
    "\17\0\1\35\17\0\3\u028d\33\0\1\352\32\0\1\u028e"+
    "\1\0\1\u028e\1\0\7\u028e\1\0\3\u02a1\2\0\1\u028e"+
    "\5\0\22\u028e\3\0\1\u028e\2\0\3\u028e\17\0\1\u028e"+
    "\5\0\1\u028e\2\0\3\u028e\1\0\1\u028e\7\0\1\u028e"+
    "\5\0\22\u028e\3\0\1\u028e\2\0\3\u028e\17\0\1\u028e"+
    "\11\0\1\u02a2\76\0\1\35\1\0\1\u02a3\1\0\7\35"+
    "\6\0\1\35\5\0\22\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\13\35\1\u02a4\6\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\5\35\1\u02a5\14\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\3\35"+
    "\1\u02a6\16\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\10\35\1\u02a7\11\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\u02a7\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\5\35\1\u02a8\14\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\5\35\1\u02a9\14\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\6\35"+
    "\1\u02aa\13\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\21\35\1\u02ab\3\0\1\35\2\0\3\35\17\0"+
    "\1\35\3\0\1\35\1\0\1\35\1\0\7\35\6\0"+
    "\1\35\5\0\22\35\3\0\1\35\2\0\1\35\1\u02ac"+
    "\1\35\17\0\1\35\5\0\1\u02ad\2\0\3\u02ad\1\0"+
    "\1\u02ad\1\0\1\u02ae\3\u02a1\2\0\1\u02ad\5\0\22\u02ad"+
    "\3\0\1\u02ad\2\0\3\u02ad\17\0\1\u02ad\37\0\1\u02af"+
    "\50\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\6\35\1\u02b0\13\35\3\0\1\35\2\0\3\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\6\35\1\u02b1\13\35\3\0\1\35"+
    "\2\0\3\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\22\35\3\0\1\35"+
    "\2\0\1\35\1\u02b2\1\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\u02b3\1\0\7\35\6\0\1\35\5\0\22\35"+
    "\3\0\1\35\2\0\3\35\17\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\7\35\6\0\1\35\5\0\20\35"+
    "\1\u02b4\1\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\u02ad\1\0\1\u02ad\1\0\7\u02ad\1\u02ae\3\u02b5"+
    "\2\0\1\u02ad\5\0\22\u02ad\3\0\1\u02ad\2\0\3\u02ad"+
    "\2\0\1\u02b6\3\0\1\u02b7\10\0\1\u02ad\5\0\1\u02ad"+
    "\2\0\3\u02ad\1\0\1\u02ad\7\0\1\u02ad\5\0\22\u02ad"+
    "\3\0\1\u02ad\2\0\3\u02ad\17\0\1\u02ad\51\0\1\u02b8"+
    "\36\0\1\35\1\0\1\u02b9\1\0\7\35\6\0\1\35"+
    "\5\0\22\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\u02ba\1\0\7\35\6\0\1\35"+
    "\5\0\22\35\3\0\1\35\2\0\3\35\17\0\1\35"+
    "\3\0\1\35\1\0\1\35\1\0\7\35\6\0\1\35"+
    "\5\0\22\35\3\0\1\35\2\0\1\35\1\u02bb\1\35"+
    "\17\0\1\35\3\0\1\35\1\0\1\35\1\0\7\35"+
    "\6\0\1\35\5\0\22\35\3\0\1\35\2\0\1\35"+
    "\1\u02bc\1\35\17\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\7\35\6\0\1\35\5\0\1\u02bd\21\35\3\0"+
    "\1\35\2\0\3\35\17\0\1\35\17\0\3\u02b5\45\0"+
    "\1\u02b6\105\0\1\u02be\21\0\1\u02ad\2\0\3\u02ad\1\0"+
    "\1\u02ad\1\0\1\u02ae\5\0\1\u02ad\5\0\22\u02ad\3\0"+
    "\1\u02ad\2\0\3\u02ad\17\0\1\u02ad\36\0\1\u02bf\51\0"+
    "\1\35\1\0\1\35\1\0\7\35\6\0\1\35\5\0"+
    "\22\35\3\0\1\35\2\0\1\35\1\u02c0\1\35\17\0"+
    "\1\35\3\0\1\35\1\0\1\35\1\0\7\35\6\0"+
    "\1\35\5\0\15\35\1\u02c1\4\35\3\0\1\35\2\0"+
    "\3\35\17\0\1\35\11\0\1\u02c2\76\0\1\35\1\0"+
    "\1\u02c3\1\0\7\35\6\0\1\35\5\0\22\35\3\0"+
    "\1\35\2\0\3\35\17\0\1\35\51\0\1\u02c4\36\0"+
    "\1\35\1\0\1\35\1\0\7\35\6\0\1\35\5\0"+
    "\11\35\1\u02c5\10\35\3\0\1\35\2\0\3\35\17\0"+
    "\1\35\5\0\1\u02c6\116\0\3\u02c6\7\0\1\u02c7\72\0"+
    "\3\u02c7\1\0\1\u02c8\26\0\1\u02c9\32\0\1\u02ca\51\0"+
    "\1\u02cb\77\0\1\u02cc\111\0\1\u02cd\77\0\1\u02ce\111\0"+
    "\1\u02cf\77\0\1\u02d0\111\0\1\u02d1\51\0\3\u02cf\33\0"+
    "\1\u02d2\101\0\1\u02d3\55\0\1\u02cf\166\0\1\u02cf\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[36294];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\14\0\2\1\1\11\11\1\1\11\3\1"+
    "\3\11\24\1\1\11\11\1\4\11\1\1\2\11\1\1"+
    "\1\11\3\1\1\11\4\1\1\11\6\1\1\11\1\1"+
    "\1\11\3\1\1\11\1\1\2\11\2\1\1\11\2\1"+
    "\2\11\1\1\24\11\6\1\2\11\1\1\1\11\1\0"+
    "\4\1\1\0\1\11\6\1\2\11\2\0\6\1\2\0"+
    "\1\1\3\0\1\11\1\0\1\1\1\11\35\1\4\11"+
    "\1\1\1\11\1\1\12\0\2\1\2\11\1\1\1\0"+
    "\2\11\1\1\1\11\1\1\5\11\1\1\4\0\3\1"+
    "\3\11\1\1\3\0\2\1\1\11\1\1\3\0\5\1"+
    "\1\0\1\11\10\0\1\11\1\0\1\11\1\1\2\0"+
    "\1\11\2\0\3\11\2\0\1\1\1\0\16\1\1\0"+
    "\1\11\42\1\1\11\1\1\12\0\7\1\2\11\3\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\11\1\0\1\11"+
    "\4\1\1\11\5\1\1\11\1\0\1\1\1\0\2\1"+
    "\1\11\2\0\56\1\12\0\10\1\4\0\1\11\2\0"+
    "\3\1\2\0\52\1\5\0\1\11\6\0\11\1\1\11"+
    "\4\0\1\11\4\1\1\11\1\0\33\1\4\0\1\11"+
    "\5\0\1\11\10\1\5\0\24\1\1\11\3\0\1\11"+
    "\1\0\11\1\1\11\3\0\17\1\2\11\7\1\4\0"+
    "\20\1\2\0\12\1\3\0\5\1\4\0\5\1\1\11"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\14\0\1\11"+
    "\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[723];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private final List commentList = new LinkedList();
    private String heredoc = null;
    private String nowdoc = null;
    private int nowdoc_len  = 0;
    private String comment = null;
    private boolean asp_tags = false;
    private boolean short_tags_allowed = true;
    private StateStack stack = new StateStack();
    private char yy_old_buffer[] = new char[ZZ_BUFFERSIZE];
    private int yy_old_pushbackPos;
    protected int commentStartPosition;
    private final PHPDocCommentParser docParser = new PHPDocCommentParser();
    private final PHPVarCommentParser varParser = new PHPVarCommentParser();

    public ASTPHP5Scanner(java.io.Reader in, boolean short_tags_allowed, boolean asp_tags_allowed) {
        this(in);
        this.asp_tags = asp_tags_allowed;
        this.short_tags_allowed = short_tags_allowed;
    }
    //private AST ast;

    private int bracket = 0;

    /**
     * Returns balance beween '{' and '}'. If it's equesl 0,
     * then number of '{' == number of '}', if > 0 then '{' > '}' and
     * if return number < 0 then '{' < '}'
     */
    public int getCurlyBalance() {
        return bracket;
    }

    /*public void setAST(AST ast) {
    	this.ast = ast;
    }
    */
        public PHPVersion getPHPVersion() {
                return PHPVersion.PHP_5;
        }

        public boolean useAspTagsAsPhp () {
            return asp_tags;
        }

        public void reset(java.io.Reader reader) {
            yyreset(reader);
        }

        public void setState(int state) {
            yybegin(state);
        }

        public int getState() {
            return yystate();
        }

        public void setInScriptingState() {
		yybegin(ST_IN_SCRIPTING);
	}

	public void resetCommentList() {
		commentList.clear();
	}

	public List getCommentList() {
		return commentList;
	}

	protected void addComment(Comment.Type type) {
		int leftPosition = getTokenStartPosition();
        //System.out.println("#####AddCommnet start: " + commentStartPosition + " end: " + (leftPosition + getTokenLength()) + ", type: " + type);
        Comment comm;
        if (type == Comment.Type.TYPE_PHPDOC) {
            comm = docParser.parse(commentStartPosition, leftPosition + getTokenLength(),  comment);
            comment = null;
        }
        else if(type == Comment.Type.TYPE_VARTYPE) {
            comm = varParser.parse(commentStartPosition, leftPosition + getTokenLength(),  comment);
            comment = null;
            if (comm == null) {
                comm = new Comment(commentStartPosition, leftPosition + getTokenLength(), /*ast,*/ type);
            }
        }
        else {
            comm = new Comment(commentStartPosition, leftPosition + getTokenLength(), /*ast,*/ type);
        }
		commentList.add(comm);
	}

	public void setUseAspTagsAsPhp(boolean useAspTagsAsPhp) {
		asp_tags = useAspTagsAsPhp;
	}

    private void pushState(int state) {
        stack.pushStack(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.popStack());
    }

    public int getCurrentLine() {
        return yyline;
    }

    protected int getTokenStartPosition() {
        return zzStartRead - zzPushbackPos;
    }

    protected int getTokenLength() {
        return zzMarkedPos - zzStartRead;
    }

    public int getLength() {
        return zzEndRead - zzPushbackPos;
    }

    private void handleCommentStart() {
        commentStartPosition = getTokenStartPosition();
    }

    private void handleLineCommentEnd() {
         addComment(Comment.Type.TYPE_SINGLE_LINE);
    }

    private void handleMultilineCommentEnd() {
    	addComment(Comment.Type.TYPE_MULTILINE);
    }

    private void handlePHPDocEnd() {
        addComment(Comment.Type.TYPE_PHPDOC);
    }

    private void handleVarComment() {
    	commentStartPosition = zzStartRead;
    	addComment(Comment.Type.TYPE_VARTYPE);
    }

    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    private Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        Symbol symbol = new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
        return symbol;
    }

    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline};
    }

	private boolean parsePHPDoc(){
		/*final IDocumentorLexer documentorLexer = getDocumentorLexer(zzReader);
		if(documentorLexer == null){
			return false;
		}
		yypushback(zzMarkedPos - zzStartRead);
		int[] parameters = getParamenters();
		documentorLexer.reset(zzReader, zzBuffer, parameters);
		Object phpDocBlock = documentorLexer.parse();
		commentList.add(phpDocBlock);
		reset(zzReader, documentorLexer.getBuffer(), documentorLexer.getParamenters());*/

                //System.out.println("#######ParsePHPDoc()");
		//return true;
                return false;
	}


	/*protected IDocumentorLexer getDocumentorLexer(java.io.Reader  reader) {
		return null;
	}*/

	public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
		this.zzReader = reader;
		this.zzBuffer = buffer;
		this.zzMarkedPos = parameters[0];
		this.zzPushbackPos = parameters[1];
		this.zzCurrentPos = parameters[2];
		this.zzStartRead = parameters[3];
		this.zzEndRead = parameters[4];
		this.yyline = parameters[5];
		this.yychar = this.zzStartRead - this.zzPushbackPos;
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ASTPHP5Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ASTPHP5Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1354) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    /*if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }*/
    }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 177:
          { return createSymbol(ASTPHP5Symbols.T_LINE);
          }
        case 195: break;
        case 146:
          { int removeChars = (yytext().charAt(0) == 'b')?4:3;
    heredoc = yytext().substring(removeChars).trim();    // for 'b<<<' or '<<<'
    if (heredoc.charAt(0) == '"') {
        heredoc = heredoc.substring(1, heredoc.length()-1);
    }
    yybegin(ST_START_HEREDOC);
    return createSymbol(ASTPHP5Symbols.T_START_HEREDOC);
          }
        case 196: break;
        case 27:
          { return createSymbol(ASTPHP5Symbols.T_OR);
          }
        case 197: break;
        case 126:
          { return createSymbol(ASTPHP5Symbols.T_CASE);
          }
        case 198: break;
        case 176:
          { return createSymbol(ASTPHP5Symbols.T_FILE);
          }
        case 199: break;
        case 167:
          { return createSymbol(ASTPHP5Symbols.T_UNSET_CAST);
          }
        case 200: break;
        case 159:
          { return createSymbol(ASTPHP5Symbols.T_EXTENDS);
          }
        case 201: break;
        case 135:
          { return createSymbol(ASTPHP5Symbols.T_TRAIT);
          }
        case 202: break;
        case 36:
          { handleCommentStart();
	yybegin(ST_ONE_LINE_COMMENT);
//	yymore();
          }
        case 203: break;
        case 2:
          { return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
          }
        case 204: break;
        case 162:
          { return createSymbol(ASTPHP5Symbols.T_DECLARE);
          }
        case 205: break;
        case 22:
          { return createSymbol(ASTPHP5Symbols.T_RGREATER);
          }
        case 206: break;
        case 119:
          { yypushback(1);
	pushState(ST_VAR_OFFSET);
	return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 207: break;
        case 56:
          { //	yymore();
          }
        case 208: break;
        case 23:
          { return createSymbol(ASTPHP5Symbols.T_TIMES);
          }
        case 209: break;
        case 73:
          { return createSymbol(ASTPHP5Symbols.T_MINUS_EQUAL);
          }
        case 210: break;
        case 90:
          { return createSymbol(ASTPHP5Symbols.T_BOOLEAN_OR);
          }
        case 211: break;
        case 14:
          { pushState(ST_IN_SCRIPTING);
    bracket++;
    return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
          }
        case 212: break;
        case 41:
          { yypushback(1);
	yybegin(ST_HEREDOC);
          }
        case 213: break;
        case 20:
          { return createSymbol(ASTPHP5Symbols.T_CLOSE_PARENTHESE);
          }
        case 214: break;
        case 98:
          { String text = yytext();
    int length = text.length() - 1;
    text = text.trim();

    yypushback(1);

    if (text.endsWith(";")) {
        text = text.substring(0, text.length() - 1);
        yypushback(1);
    }
    if (text.equals(heredoc)) {
        heredoc = null;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ASTPHP5Symbols.T_END_HEREDOC);
    } else {
    	   yybegin(ST_HEREDOC);
    }
          }
        case 215: break;
        case 138:
          { return createSymbol(ASTPHP5Symbols.T_UNSET);
          }
        case 216: break;
        case 45:
          { yypushback(yylength());
    popState();
          }
        case 217: break;
        case 21:
          { return createSymbol(ASTPHP5Symbols.T_NOT);
          }
        case 218: break;
        case 147:
          { yypushback(3);
	pushState(ST_LOOKING_FOR_PROPERTY);
	return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 219: break;
        case 33:
          { return createSymbol(ASTPHP5Symbols.T_QUESTION_MARK);
          }
        case 220: break;
        case 95:
          { pushState(ST_IN_SCRIPTING);
    yypushback(yylength()-1);
    return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN_WITH_DOLAR);
          }
        case 221: break;
        case 83:
          { return createSymbol(ASTPHP5Symbols.T_DIV_EQUAL);
          }
        case 222: break;
        case 190:
          { return createSymbol(ASTPHP5Symbols.T_REQUIRE_ONCE);
          }
        case 223: break;
        case 120:
          { String text = yytext();

    if (text.charAt(text.length() - 2)== ';') {
		text = text.substring(0, text.length() - 2);
        	yypushback(1);
    } else {
		text = text.substring(0, text.length() - 1);
    }

	int textLength = text.length();
	int heredocLength = heredoc.length();
	if (textLength > heredocLength && text.substring(textLength - heredocLength, textLength).equals(heredoc)) {
		yypushback(2);
        	yybegin(ST_END_HEREDOC);
        	// we need to remove the closing label from the symbol value.
                /*<ST_HEREDOC>{HEREDOC_CHARS}*{HEREDOC_NEWLINE}+{LABEL}";"?[\n\r]*/
        	Symbol sym = createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
        	String value = (String)sym.value;
        	sym.value = value.substring(0, value.length() - heredocLength + 1);
	   	return sym;
	}
	yypushback(1);
          }
        case 224: break;
        case 46:
          { popState();
    return createFullSymbol(ASTPHP5Symbols.T_STRING);
          }
        case 225: break;
        case 125:
          { return createSymbol(ASTPHP5Symbols.T_EVAL);
          }
        case 226: break;
        case 71:
          { return createSymbol(ASTPHP5Symbols.T_DO);
          }
        case 227: break;
        case 72:
          { return createSymbol(ASTPHP5Symbols.T_LOGICAL_OR);
          }
        case 228: break;
        case 99:
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
        label_len--;
    }

    if (label_len==nowdoc_len && yytext().substring(0,label_len).equals(nowdoc)) {
        nowdoc=null;
        nowdoc_len=0;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
    } else {
        yybegin(ST_NOWDOC);
        yypushback(label_len);
    }
          }
        case 229: break;
        case 80:
          { return createSymbol(ASTPHP5Symbols.T_IS_SMALLER_OR_EQUAL);
          }
        case 230: break;
        case 92:
          { yybegin(YYINITIAL);
    return createSymbol(ASTPHP5Symbols.T_SEMICOLON);  /* implicit ';' at php-end tag */
          }
        case 231: break;
        case 67:
          { return createFullSymbol(ASTPHP5Symbols.T_CONSTANT_ENCAPSED_STRING);
          }
        case 232: break;
        case 156:
          { return createSymbol(ASTPHP5Symbols.T_PUBLIC);
          }
        case 233: break;
        case 107:
          { return createSymbol(ASTPHP5Symbols.T_LOGICAL_AND);
          }
        case 234: break;
        case 110:
          { return createFullSymbol(ASTPHP5Symbols.T_EXIT);
          }
        case 235: break;
        case 38:
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 236: break;
        case 133:
          { return createSymbol(ASTPHP5Symbols.T_BREAK);
          }
        case 237: break;
        case 116:
          { return createSymbol(ASTPHP5Symbols.T_IS_NOT_IDENTICAL);
          }
        case 238: break;
        case 44:
          { nowdoc=null;
    nowdoc_len=0;
    yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
          }
        case 239: break;
        case 140:
          { return createSymbol(ASTPHP5Symbols.T_CONST);
          }
        case 240: break;
        case 128:
          { return createSymbol(ASTPHP5Symbols.T_GOTO);
          }
        case 241: break;
        case 151:
          { /* not a keyword, hust for recognize constans.*/
    return createFullSymbol(ASTPHP5Symbols.T_DEFINE);
          }
        case 242: break;
        case 57:
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			handleLineCommentEnd();
			yybegin(ST_IN_SCRIPTING);
	}
//	yymore();
          }
        case 243: break;
        case 89:
          { return createSymbol(ASTPHP5Symbols.T_OR_EQUAL);
          }
        case 244: break;
        case 148:
          { yybegin(ST_IN_SCRIPTING);
    //return T_OPEN_TAG;
    //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
          }
        case 245: break;
        case 58:
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_ECHO);
          }
        case 246: break;
        case 164:
          { return createSymbol(ASTPHP5Symbols.T_REQUIRE);
          }
        case 247: break;
        case 54:
          { popState();
	return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
          }
        case 248: break;
        case 32:
          { return createSymbol(ASTPHP5Symbols.T_TILDA);
          }
        case 249: break;
        case 18:
          { return createSymbol(ASTPHP5Symbols.T_NEKUDOTAIM);
          }
        case 250: break;
        case 26:
          { return createSymbol(ASTPHP5Symbols.T_REFERENCE);
          }
        case 251: break;
        case 84:
          { handleCommentStart();
    yybegin(ST_COMMENT);
          }
        case 252: break;
        case 42:
          { heredoc = null;
	yybegin(ST_IN_SCRIPTING);
	return createSymbol(ASTPHP5Symbols.T_END_HEREDOC);
          }
        case 253: break;
        case 189:
          { return createSymbol(ASTPHP5Symbols.T_INCLUDE_ONCE);
          }
        case 254: break;
        case 16:
          { return createSymbol(ASTPHP5Symbols.T_MINUS);
          }
        case 255: break;
        case 111:
          { return createSymbol(ASTPHP5Symbols.T_FOR);
          }
        case 256: break;
        case 103:
          { handlePHPDocEnd();
     yybegin(ST_IN_SCRIPTING);
          }
        case 257: break;
        case 145:
          { return createSymbol(ASTPHP5Symbols.T_INT_CAST);
          }
        case 258: break;
        case 113:
          { return createSymbol(ASTPHP5Symbols.T_NEW);
          }
        case 259: break;
        case 74:
          { return createSymbol(ASTPHP5Symbols.T_DEC);
          }
        case 260: break;
        case 93:
          { yypushback(1);
    /*<ST_DOUBLE_QUOTES>{DOUBLE_QUOTES_CHARS}*("{""{"+|"$""$"+|(("{"+|"$"+)[\"]))*/
    return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 261: break;
        case 181:
          { return createSymbol(ASTPHP5Symbols.T_NAMESPACE);
          }
        case 262: break;
        case 185:
          { return createSymbol(ASTPHP5Symbols.T_ENDFOREACH);
          }
        case 263: break;
        case 75:
          { pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
          }
        case 264: break;
        case 132:
          { return createSymbol(ASTPHP5Symbols.T_ARRAY);
          }
        case 265: break;
        case 13:
          { return createSymbol(ASTPHP5Symbols.T_SEMICOLON);
          }
        case 266: break;
        case 193:
          { return createSymbol(ASTPHP5Symbols.T_NS_C);
          }
        case 267: break;
        case 3:
          { // do nothing
          }
        case 268: break;
        case 48:
          { popState();
    pushState(ST_IN_SCRIPTING);
    return createFullSymbol(ASTPHP5Symbols.T_STRING_VARNAME);
          }
        case 269: break;
        case 172:
          { return createSymbol(ASTPHP5Symbols.T_FUNCTION);
          }
        case 270: break;
        case 17:
          { return createSymbol(ASTPHP5Symbols.T_LGREATER);
          }
        case 271: break;
        case 183:
          { return createSymbol(ASTPHP5Symbols.T_CLASS_C);
          }
        case 272: break;
        case 102:
          { handleMultilineCommentEnd();
    yybegin(ST_IN_SCRIPTING);
          }
        case 273: break;
        case 4:
          { return createFullSymbol(ASTPHP5Symbols.T_LNUMBER);
          }
        case 274: break;
        case 173:
          { return createSymbol(ASTPHP5Symbols.T_CONTINUE);
          }
        case 275: break;
        case 143:
          { return createSymbol(ASTPHP5Symbols.T_WHILE);
          }
        case 276: break;
        case 96:
          { yypushback(1);
        /*<ST_BACKQUOTE>{BACKQUOTE_CHARS}*("{""{"+|"$""$"+|(("{"+|"$"+)[`]))*/
	return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 277: break;
        case 124:
          { return createSymbol(ASTPHP5Symbols.T_ELSE);
          }
        case 278: break;
        case 129:
          { handleCommentStart();
          }
        case 279: break;
        case 127:
          { return createSymbol(ASTPHP5Symbols.T_LIST);
          }
        case 280: break;
        case 49:
          { return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
          }
        case 281: break;
        case 87:
          { return createSymbol(ASTPHP5Symbols.T_AND_EQUAL);
          }
        case 282: break;
        case 65:
          { return createSymbol(ASTPHP5Symbols.T_AS);
          }
        case 283: break;
        case 180:
          { return createSymbol(ASTPHP5Symbols.T_INSTEADOF);
          }
        case 284: break;
        case 178:
          { return createSymbol(ASTPHP5Symbols.T_ENDSWITCH);
          }
        case 285: break;
        case 53:
          { bracket++; return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
          }
        case 286: break;
        case 109:
          { return createSymbol(ASTPHP5Symbols.T_TRY);
          }
        case 287: break;
        case 59:
          { if (asp_tags) {
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
        //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 288: break;
        case 170:
          { return createSymbol(ASTPHP5Symbols.T_ENDWHILE);
          }
        case 289: break;
        case 123:
          { return createSymbol(ASTPHP5Symbols.T_ECHO);
          }
        case 290: break;
        case 166:
          { return createSymbol(ASTPHP5Symbols.T_ARRAY_CAST);
          }
        case 291: break;
        case 136:
          { return createSymbol(ASTPHP5Symbols.T_THROW);
          }
        case 292: break;
        case 158:
          { return createSymbol(ASTPHP5Symbols.T_DOUBLE_CAST);
          }
        case 293: break;
        case 12:
          { yybegin(ST_BACKQUOTE);
    return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 294: break;
        case 30:
          { return createSymbol(ASTPHP5Symbols.T_OPEN_RECT);
          }
        case 295: break;
        case 155:
          { return createSymbol(ASTPHP5Symbols.T_GLOBAL);
          }
        case 296: break;
        case 94:
          { pushState(ST_LOOKING_FOR_VARNAME);
    return createSymbol(ASTPHP5Symbols.T_DOLLAR_OPEN_CURLY_BRACES);
          }
        case 297: break;
        case 139:
          { return createSymbol(ASTPHP5Symbols.T_CATCH);
          }
        case 298: break;
        case 35:
          { /* This is a temporary fix which is dependant on flex and it's implementation */
    if (!stack.isEmpty()) {
        popState();
    }
    bracket--;
    return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
          }
        case 299: break;
        case 85:
          { return createSymbol(ASTPHP5Symbols.T_MOD_EQUAL);
          }
        case 300: break;
        case 24:
          { return createSymbol(ASTPHP5Symbols.T_DIV);
          }
        case 301: break;
        case 191:
          { return createSymbol(ASTPHP5Symbols.T_FUNC_C);
          }
        case 302: break;
        case 161:
          { return createSymbol(ASTPHP5Symbols.T_DEFAULT);
          }
        case 303: break;
        case 31:
          { return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
          }
        case 304: break;
        case 7:
          { return createSymbol(ASTPHP5Symbols.T_PLUS);
          }
        case 305: break;
        case 152:
          { return createSymbol(ASTPHP5Symbols.T_STATIC);
          }
        case 306: break;
        case 112:
          { return createSymbol(ASTPHP5Symbols.T_USE);
          }
        case 307: break;
        case 168:
          { return createSymbol(ASTPHP5Symbols.T_DIR);
          }
        case 308: break;
        case 154:
          { return createSymbol(ASTPHP5Symbols.T_RETURN);
          }
        case 309: break;
        case 76:
          { return createSymbol(ASTPHP5Symbols.T_IS_GREATER_OR_EQUAL);
          }
        case 310: break;
        case 141:
          { return createSymbol(ASTPHP5Symbols.T_CLASS);
          }
        case 311: break;
        case 39:
          { /*<ST_BACKQUOTE>{BACKQUOTE_CHARS}+*/
	return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 312: break;
        case 37:
          { /*<ST_DOUBLE_QUOTES>{DOUBLE_QUOTES_CHARS}+*/
	return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 313: break;
        case 187:
          { return createSymbol(ASTPHP5Symbols.T_IMPLEMENTS);
          }
        case 314: break;
        case 134:
          { return createSymbol(ASTPHP5Symbols.T_ISSET);
          }
        case 315: break;
        case 88:
          { return createSymbol(ASTPHP5Symbols.T_BOOLEAN_AND);
          }
        case 316: break;
        case 121:
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
    }
    if (label_len > nowdoc_len && yytext().substring(label_len - nowdoc_len,label_len).equals(nowdoc)) {
        // we need to parse at least last character of the nowdoc label
        yypushback(3);
        yybegin(ST_END_NOWDOC);
        // we need to remove the closing label from the symbol value.
        /*<ST_NOWDOC>{NOWDOC_CHARS}*{NEWLINE}+{LABEL}";"?[\n\r]*/
        Symbol sym = createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
        String value = (String)sym.value;
        sym.value = value.substring(0, label_len - nowdoc_len);
        return sym;
    }
    yypushback(1);
          }
        case 317: break;
        case 6:
          { return createFullSymbol(ASTPHP5Symbols.T_STRING);
          }
        case 318: break;
        case 5:
          { return createSymbol(ASTPHP5Symbols.T_NEKUDA);
          }
        case 319: break;
        case 55:
          { bracket--; return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
          }
        case 320: break;
        case 169:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
        int startString=3+bprefix;
        /* 3 is <<<, 2 is quotes, 1 is newline */
        nowdoc_len = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
        while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
            startString++;
            nowdoc_len--;
        }
        // first quate
        startString++;
        nowdoc = yytext().substring(startString,nowdoc_len+startString);
        yybegin(ST_START_NOWDOC);
        return createSymbol(ASTPHP5Symbols.T_START_NOWDOC);
          }
        case 321: break;
        case 47:
          { yypushback(yylength());
    popState();
    pushState(ST_IN_SCRIPTING);
          }
        case 322: break;
        case 64:
          { return createSymbol(ASTPHP5Symbols.T_PLUS_EQUAL);
          }
        case 323: break;
        case 104:
          { if (asp_tags || yytext().charAt(0)!='%') { /* asp comment? */
	    handleLineCommentEnd();
        yypushback(yylength());
		yybegin(ST_IN_SCRIPTING);
		//return T_COMMENT;
	}
          }
        case 324: break;
        case 130:
          { return createSymbol(ASTPHP5Symbols.T_ENDIF);
          }
        case 325: break;
        case 19:
          { return createSymbol(ASTPHP5Symbols.T_OPEN_PARENTHESE);
          }
        case 326: break;
        case 184:
          { return createSymbol(ASTPHP5Symbols.T_ENDDECLARE);
          }
        case 327: break;
        case 114:
          { return createSymbol(ASTPHP5Symbols.T_SR_EQUAL);
          }
        case 328: break;
        case 60:
          { if (short_tags_allowed || yylength()>2) { /* yyleng>2 means it's not <? but <script> */
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
        //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 329: break;
        case 137:
          { return createSymbol(ASTPHP5Symbols.T_FINAL);
          }
        case 330: break;
        case 160:
          { return createSymbol(ASTPHP5Symbols.T_INCLUDE);
          }
        case 331: break;
        case 142:
          { return createSymbol(ASTPHP5Symbols.T_CLONE);
          }
        case 332: break;
        case 194:
          { return createSymbol(ASTPHP5Symbols.T_HALT_COMPILER);
          }
        case 333: break;
        case 79:
          { return createSymbol(ASTPHP5Symbols.T_IS_NOT_EQUAL);
          }
        case 334: break;
        case 165:
          { return createSymbol(ASTPHP5Symbols.T_PRIVATE);
          }
        case 335: break;
        case 82:
          { return createSymbol(ASTPHP5Symbols.T_MUL_EQUAL);
          }
        case 336: break;
        case 118:
          { if (!parsePHPDoc()) {
handleCommentStart();
yybegin(ST_DOCBLOCK);
}
          }
        case 337: break;
        case 163:
          { return createSymbol(ASTPHP5Symbols.T_FOREACH);
          }
        case 338: break;
        case 117:
          { return createSymbol(ASTPHP5Symbols.T_SL_EQUAL);
          }
        case 339: break;
        case 131:
          { return createSymbol(ASTPHP5Symbols.T_EMPTY);
          }
        case 340: break;
        case 122:
          { int len = yylength();
        yypushback(2); // go back to mark end of comment in the next token
        comment = yytext();
          }
        case 341: break;
        case 175:
          { return createSymbol(ASTPHP5Symbols.T_OBJECT_CAST);
          }
        case 342: break;
        case 97:
          { yypushback(1);
    /*<ST_HEREDOC>{HEREDOC_CHARS}*({HEREDOC_NEWLINE}+({LABEL}";"?)?)?("{""{"+|"$""$"+)*/
    return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 343: break;
        case 153:
          { return createSymbol(ASTPHP5Symbols.T_SWITCH);
          }
        case 344: break;
        case 157:
          { return createSymbol(ASTPHP5Symbols.T_BOOL_CAST);
          }
        case 345: break;
        case 40:
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 346: break;
        case 8:
          { return createSymbol(ASTPHP5Symbols.T_NS_SEPARATOR);
          }
        case 347: break;
        case 174:
          { return createSymbol(ASTPHP5Symbols.T_STRING_CAST);
          }
        case 348: break;
        case 50:
          { yypushback(1);
	popState();
        /*<ST_VAR_OFFSET>[ \n\r\t\\'#]*/
	return createSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 349: break;
        case 61:
          { return createFullSymbol(ASTPHP5Symbols.T_DNUMBER);
          }
        case 350: break;
        case 115:
          { return createSymbol(ASTPHP5Symbols.T_VAR);
          }
        case 351: break;
        case 106:
          { return createSymbol(ASTPHP5Symbols.T_LOGICAL_XOR);
          }
        case 352: break;
        case 25:
          { return createSymbol(ASTPHP5Symbols.T_PRECENT);
          }
        case 353: break;
        case 192:
          { comment = yytext();
    handleVarComment();
    // if we want to handle the var comment in  ast, then return the T_VAR_Comment symbol
    // but it needs some changes in parser grammar. see issue #154967
    //return createFullSymbol(ASTPHP5Symbols.T_VAR_COMMENT);
          }
        case 354: break;
        case 86:
          { if (asp_tags) {
        yybegin(YYINITIAL);
        return createSymbol(ASTPHP5Symbols.T_SEMICOLON);  /* implicit ';' at php-end tag */
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 355: break;
        case 70:
          { return createSymbol(ASTPHP5Symbols.T_IF);
          }
        case 356: break;
        case 28:
          { return createSymbol(ASTPHP5Symbols.T_KOVA);
          }
        case 357: break;
        case 188:
          { return createSymbol(ASTPHP5Symbols.T_METHOD_C);
          }
        case 358: break;
        case 11:
          { yybegin(ST_DOUBLE_QUOTES);
    return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 359: break;
        case 1:
          { /*<ST_HEREDOC>{HEREDOC_CHARS}*({HEREDOC_NEWLINE}+({LABEL}";"?)?)?*/
	return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 360: break;
        case 108:
          { return createSymbol(ASTPHP5Symbols.T_IS_IDENTICAL);
          }
        case 361: break;
        case 69:
          { return createSymbol(ASTPHP5Symbols.T_DOUBLE_ARROW);
          }
        case 362: break;
        case 78:
          { return createSymbol(ASTPHP5Symbols.T_PAAMAYIM_NEKUDOTAYIM);
          }
        case 363: break;
        case 77:
          { return createSymbol(ASTPHP5Symbols.T_SR);
          }
        case 364: break;
        case 15:
          { return createSymbol(ASTPHP5Symbols.T_EQUAL);
          }
        case 365: break;
        case 29:
          { return createSymbol(ASTPHP5Symbols.T_COMMA);
          }
        case 366: break;
        case 186:
          { return createSymbol(ASTPHP5Symbols.T_INSTANCEOF);
          }
        case 367: break;
        case 62:
          { return createSymbol(ASTPHP5Symbols.T_CONCAT_EQUAL);
          }
        case 368: break;
        case 101:
          { /* treat numbers (almost) as strings inside encapsulated strings */
    return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
          }
        case 369: break;
        case 10:
          { return createSymbol(ASTPHP5Symbols.T_DOLLAR);
          }
        case 370: break;
        case 63:
          { return createSymbol(ASTPHP5Symbols.T_INC);
          }
        case 371: break;
        case 43:
          { yypushback(1);
	yybegin(ST_NOWDOC);
          }
        case 372: break;
        case 149:
          { return createSymbol(ASTPHP5Symbols.T_ENDFOR);
          }
        case 373: break;
        case 81:
          { return createSymbol(ASTPHP5Symbols.T_SL);
          }
        case 374: break;
        case 105:
          { String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?' && short_tags_allowed)) {
        yypushback(1);
        yybegin(ST_IN_SHORT_ECHO);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 375: break;
        case 150:
          { return createSymbol(ASTPHP5Symbols.T_ELSEIF);
          }
        case 376: break;
        case 68:
          { return createSymbol(ASTPHP5Symbols.T_IS_EQUAL);
          }
        case 377: break;
        case 34:
          { return createSymbol(ASTPHP5Symbols.T_AT);
          }
        case 378: break;
        case 51:
          { return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 379: break;
        case 66:
          { return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 380: break;
        case 171:
          { return createSymbol(ASTPHP5Symbols.T_ABSTRACT);
          }
        case 381: break;
        case 182:
          { return createSymbol(ASTPHP5Symbols.T_PROTECTED);
          }
        case 382: break;
        case 91:
          { return createSymbol(ASTPHP5Symbols.T_XOR_EQUAL);
          }
        case 383: break;
        case 144:
          { return createSymbol(ASTPHP5Symbols.T_PRINT);
          }
        case 384: break;
        case 100:
          { return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
          }
        case 385: break;
        case 179:
          { return createSymbol(ASTPHP5Symbols.T_INTERFACE);
          }
        case 386: break;
        case 52:
          { return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 387: break;
        case 9:
          {
          }
        case 388: break;
        default:
          if (zzInput == YYEOF && (zzStartRead == zzCurrentPos || zzLexicalState == ST_DOCBLOCK)) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case ST_DOCBLOCK: {
              if (yytext().length() > 0) {
                yypushback(1);  // backup eof
                comment = yytext();
              }
              else {
                return createSymbol(ASTPHP5Symbols.EOF);
              }
            }
            case 724: break;
            default:
              {     return createSymbol(ASTPHP5Symbols.EOF);
 }
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
