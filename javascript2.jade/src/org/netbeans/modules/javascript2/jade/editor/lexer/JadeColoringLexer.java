/* The following code was generated by JFlex 1.4.3 on 2/16/15 10:08 AM */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development and
 * Distribution License("CDDL") (collectively, the "License"). You may not use
 * this file except in compliance with the License. You can obtain a copy of
 * the License at http://www.netbeans.org/cddl-gplv2.html or
 * nbbuild/licenses/CDDL-GPL-2-CP. See the License for the specific language
 * governing permissions and limitations under the License. When distributing
 * the software, include this License Header Notice in each file and include
 * the License file at nbbuild/licenses/CDDL-GPL-2-CP. Oracle designates this
 * particular file as subject to the "Classpath" exception as provided by
 * Oracle in the GPL Version 2 section of the License file that accompanied
 * this code. If applicable, add the following below the License Header, with
 * the fields enclosed by brackets [] replaced by your own identifying
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license." If you do not indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to its
 * licensees as provided above. However, if you add GPL Version 2 code and
 * therefore, elected the GPL Version 2 license, then the option applies only
 * if the new code is made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */

package org.netbeans.modules.javascript2.jade.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/16/15 10:08 AM from the specification file
 * <tt>/home/petr/mercurial/web-main/javascript2.jade/tools/JadeColoringScanner.flex</tt>
 */
public final class JadeColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_PLAIN_TEXT_LINE = 28;
  public static final int IN_COMMENT_AFTER_EOL = 20;
  public static final int AFTER_COLON_IN_TAG = 62;
  public static final int JAVASCRIPT_EXPRESSION = 46;
  public static final int JAVASCRIPT_VALUE = 40;
  public static final int JAVASCRIPT_AFTER_EACH = 66;
  public static final int IN_PLAIN_TEXT_BLOCK = 30;
  public static final int AFTER_DOCTYPE = 6;
  public static final int AFTER_EACH = 64;
  public static final int FILEPATH = 54;
  public static final int DOCTYPE_STRING_END = 10;
  public static final int AFTER_TAG = 12;
  public static final int IN_FILTER_BLOCK_AFTER_EOL = 58;
  public static final int IN_UNBUFFERED_COMMENT = 22;
  public static final int IN_COMMENT = 18;
  public static final int IN_FILTER_BLOCK = 56;
  public static final int AFTER_CODE_DELIMITER_WITH_BLOCK_EXPANSION = 16;
  public static final int JAVASCRIPT_WITH_BLOCK_EXPANSION = 48;
  public static final int HTML_ATTRIBUTE_VALUE = 38;
  public static final int AFTER_CODE_DELIMITER = 14;
  public static final int JAVASCRIPT = 42;
  public static final int AFTER_INCLUDE = 60;
  public static final int IN_PLAIN_TEXT_BLOCK_AFTER_EOL = 32;
  public static final int TEXT_LINE = 26;
  public static final int AFTER_EOL = 2;
  public static final int JS_SSTRING = 50;
  public static final int IN_UNBUFFERED_COMMENT_AFTER_EOL = 24;
  public static final int HTML_ATTRIBUTE = 36;
  public static final int YYINITIAL = 0;
  public static final int JS_STRING = 52;
  public static final int DOCTYPE_STRING = 8;
  public static final int JAVASCRIPT_LINE = 44;
  public static final int AFTER_PLAIN_TEXT_BLOCK_DELIMITER = 34;
  public static final int DOCTYPE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 
    32, 32, 33, 33
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\1\2\12\1\7\22\0\1\12\1\42\1\10\1\45"+
    "\1\0\2\3\1\52\1\46\1\51\1\3\1\3\1\50\1\14\1\43"+
    "\1\13\12\4\1\5\1\0\1\2\1\41\1\0\1\0\1\6\1\32"+
    "\1\36\1\17\1\15\1\23\1\25\1\4\1\33\1\24\1\4\1\37"+
    "\1\26\1\4\1\31\1\16\1\22\1\4\1\34\1\27\1\20\1\30"+
    "\1\4\1\35\1\40\1\21\1\4\1\53\1\11\1\54\3\0\1\32"+
    "\1\36\1\17\1\15\1\23\1\25\1\4\1\33\1\24\1\4\1\37"+
    "\1\26\1\4\1\31\1\16\1\22\1\4\1\34\1\27\1\20\1\30"+
    "\1\4\1\35\1\40\1\21\1\4\1\47\1\44\1\55\42\0\1\12"+
    "\11\0\1\4\12\0\1\4\4\0\1\4\5\0\27\4\1\0\37\4"+
    "\1\0\u01ca\4\4\0\14\4\16\0\5\4\7\0\1\4\1\0\1\4"+
    "\201\0\5\4\1\0\2\4\2\0\4\4\10\0\1\4\1\0\3\4"+
    "\1\0\1\4\1\0\24\4\1\0\123\4\1\0\213\4\10\0\236\4"+
    "\11\0\46\4\2\0\1\4\7\0\47\4\110\0\33\4\5\0\3\4"+
    "\55\0\53\4\25\0\12\4\4\0\2\4\1\0\143\4\1\0\1\4"+
    "\17\0\2\4\7\0\17\4\2\0\1\4\20\0\1\4\1\0\36\4"+
    "\35\0\131\4\13\0\1\4\16\0\53\4\11\0\2\4\4\0\1\4"+
    "\5\0\26\4\4\0\1\4\11\0\1\4\3\0\1\4\27\0\31\4"+
    "\253\0\66\4\3\0\1\4\22\0\1\4\7\0\12\4\4\0\12\4"+
    "\1\0\7\4\1\0\7\4\5\0\10\4\2\0\2\4\2\0\26\4"+
    "\1\0\7\4\1\0\1\4\3\0\4\4\3\0\1\4\20\0\1\4"+
    "\15\0\2\4\1\0\3\4\4\0\14\4\23\0\6\4\4\0\2\4"+
    "\2\0\26\4\1\0\7\4\1\0\2\4\1\0\2\4\1\0\2\4"+
    "\37\0\4\4\1\0\1\4\7\0\12\4\2\0\3\4\20\0\11\4"+
    "\1\0\3\4\1\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4"+
    "\3\0\1\4\22\0\1\4\17\0\2\4\4\0\12\4\25\0\10\4"+
    "\2\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4"+
    "\3\0\1\4\36\0\2\4\1\0\3\4\4\0\12\4\1\0\1\4"+
    "\21\0\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4"+
    "\1\0\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0\14\4"+
    "\26\0\1\4\25\0\12\4\25\0\10\4\1\0\3\4\1\0\27\4"+
    "\1\0\12\4\1\0\5\4\3\0\1\4\32\0\2\4\6\0\2\4"+
    "\4\0\12\4\25\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4"+
    "\1\0\5\4\3\0\1\4\40\0\1\4\1\0\2\4\4\0\12\4"+
    "\1\0\2\4\22\0\10\4\1\0\3\4\1\0\51\4\2\0\1\4"+
    "\20\0\1\4\21\0\2\4\4\0\12\4\12\0\6\4\5\0\22\4"+
    "\3\0\30\4\1\0\11\4\1\0\1\4\2\0\7\4\72\0\60\4"+
    "\1\0\2\4\14\0\7\4\11\0\12\4\47\0\2\4\1\0\1\4"+
    "\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0\7\4"+
    "\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\4\4"+
    "\1\0\2\4\11\0\1\4\2\0\5\4\1\0\1\4\11\0\12\4"+
    "\2\0\2\4\42\0\1\4\37\0\12\4\26\0\10\4\1\0\44\4"+
    "\33\0\5\4\163\0\53\4\24\0\13\4\6\0\6\4\4\0\4\4"+
    "\3\0\1\4\3\0\2\4\7\0\3\4\4\0\15\4\14\0\1\4"+
    "\1\0\12\4\6\0\46\4\12\0\53\4\1\0\1\4\3\0\u0149\4"+
    "\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\51\4"+
    "\1\0\4\4\2\0\41\4\1\0\4\4\2\0\7\4\1\0\1\4"+
    "\1\0\4\4\2\0\17\4\1\0\71\4\1\0\4\4\2\0\103\4"+
    "\45\0\20\4\20\0\125\4\14\0\u026c\4\2\0\21\4\1\0\32\4"+
    "\5\0\113\4\25\0\15\4\1\0\4\4\16\0\22\4\16\0\22\4"+
    "\16\0\15\4\1\0\3\4\17\0\64\4\43\0\1\4\4\0\1\4"+
    "\3\0\12\4\46\0\12\4\6\0\130\4\10\0\51\4\1\0\1\4"+
    "\5\0\106\4\12\0\35\4\51\0\50\4\2\0\5\4\13\0\54\4"+
    "\25\0\7\4\10\0\12\4\46\0\27\4\11\0\65\4\53\0\12\4"+
    "\6\0\12\4\15\0\1\4\135\0\57\4\21\0\7\4\4\0\12\4"+
    "\51\0\36\4\15\0\14\4\6\0\46\4\32\0\44\4\34\0\12\4"+
    "\3\0\61\4\153\0\4\4\1\0\4\4\16\0\300\4\100\0\u0116\4"+
    "\2\0\6\4\2\0\46\4\2\0\6\4\2\0\10\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\37\4\2\0\65\4\1\0\7\4"+
    "\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0\6\4"+
    "\4\0\15\4\5\0\3\4\1\0\7\4\164\0\1\4\15\0\1\4"+
    "\20\0\15\4\145\0\1\4\4\0\1\4\2\0\12\4\1\0\1\4"+
    "\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4\1\0\4\4"+
    "\1\0\13\4\2\0\4\4\5\0\5\4\4\0\1\4\64\0\2\4"+
    "\u0a7b\0\57\4\1\0\57\4\1\0\205\4\6\0\4\4\21\0\46\4"+
    "\12\0\66\4\11\0\1\4\20\0\27\4\11\0\7\4\1\0\7\4"+
    "\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4"+
    "\1\0\7\4\120\0\1\4\u01d5\0\2\4\52\0\5\4\5\0\2\4"+
    "\4\0\126\4\6\0\3\4\1\0\132\4\1\0\4\4\5\0\51\4"+
    "\3\0\136\4\21\0\33\4\65\0\20\4\u0200\0\u19b6\4\112\0\u51cc\4"+
    "\64\0\u048d\4\103\0\56\4\2\0\u010d\4\3\0\34\4\24\0\57\4"+
    "\20\0\31\4\10\0\106\4\61\0\11\4\2\0\147\4\2\0\4\4"+
    "\1\0\2\4\16\0\12\4\120\0\10\4\1\0\3\4\1\0\4\4"+
    "\1\0\27\4\35\0\64\4\16\0\62\4\34\0\12\4\30\0\6\4"+
    "\3\0\1\4\4\0\46\4\12\0\27\4\31\0\35\4\7\0\57\4"+
    "\34\0\13\4\46\0\51\4\27\0\3\4\1\0\10\4\4\0\12\4"+
    "\6\0\27\4\3\0\1\4\5\0\60\4\1\0\1\4\3\0\2\4"+
    "\2\0\5\4\2\0\1\4\1\0\1\4\30\0\3\4\43\0\6\4"+
    "\2\0\6\4\2\0\6\4\11\0\7\4\1\0\7\4\221\0\43\4"+
    "\15\0\12\4\6\0\u2ba4\4\14\0\27\4\4\0\61\4\u2104\0\u012e\4"+
    "\2\0\76\4\2\0\152\4\46\0\7\4\14\0\5\4\5\0\1\4"+
    "\1\0\12\4\1\0\15\4\1\0\5\4\1\0\1\4\1\0\2\4"+
    "\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0\100\4\2\0\66\4"+
    "\50\0\14\4\164\0\5\4\1\0\207\4\23\0\12\4\7\0\32\4"+
    "\6\0\32\4\13\0\131\4\3\0\6\4\2\0\6\4\2\0\6\4"+
    "\2\0\3\4\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\0\1\1\2\0\2\1\1\0\1\2"+
    "\12\0\1\1\5\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\4\1\5\1\10\1\4\1\11\10\7\1\11\1\4"+
    "\1\12\1\13\1\14\2\15\1\16\1\17\1\20\1\1"+
    "\2\21\1\22\1\23\1\24\1\25\1\26\1\27\1\24"+
    "\1\30\1\24\1\31\1\32\1\33\1\1\1\34\1\1"+
    "\1\35\2\1\1\36\1\37\1\1\1\40\1\41\2\42"+
    "\1\1\1\43\1\1\1\44\1\1\1\45\1\46\1\2"+
    "\1\47\1\2\1\17\1\50\1\51\1\50\1\52\1\4"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\57\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\74\2\76\1\1\1\77"+
    "\1\100\1\74\1\101\1\75\1\102\2\103\1\102\1\104"+
    "\1\105\1\102\2\106\1\107\1\1\1\110\1\111\2\112"+
    "\1\113\1\114\2\115\3\116\1\0\1\117\1\120\6\7"+
    "\1\121\1\122\4\7\1\123\1\124\1\125\1\0\1\126"+
    "\1\57\1\0\1\127\1\130\3\0\1\131\7\7\1\132"+
    "\4\7\3\133\2\7\1\134\1\135\1\136\3\7\1\137"+
    "\7\7\1\140\1\141\4\7\1\142\1\143\1\144\1\145"+
    "\1\146";

  private static int [] zzUnpackAction() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422"+
    "\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592"+
    "\0\u05c0\0\u05ee\0\u061c\0\u061c\0\u061c\0\u061c\0\u064a\0\u0678"+
    "\0\u06a6\0\u06d4\0\u0702\0\u064a\0\u0730\0\u075e\0\u078c\0\u07ba"+
    "\0\u07e8\0\u0816\0\u0844\0\u0872\0\u061c\0\u08a0\0\u061c\0\u061c"+
    "\0\u08ce\0\u061c\0\u08fc\0\u061c\0\u092a\0\u0958\0\u0986\0\u061c"+
    "\0\u09b4\0\u061c\0\u061c\0\u061c\0\u061c\0\u09e2\0\u061c\0\u08a0"+
    "\0\u0a10\0\u0a3e\0\u061c\0\u061c\0\u061c\0\u0a6c\0\u061c\0\u0a9a"+
    "\0\u061c\0\u061c\0\u0ac8\0\u0af6\0\u061c\0\u0b24\0\u061c\0\u0b52"+
    "\0\u061c\0\u0b80\0\u0bae\0\u061c\0\u0bdc\0\u061c\0\u0c0a\0\u061c"+
    "\0\u0c38\0\u0c66\0\u061c\0\u0c94\0\u0cc2\0\u061c\0\u0cf0\0\u0d1e"+
    "\0\u061c\0\u0d4c\0\u061c\0\u061c\0\u061c\0\u061c\0\u0d7a\0\u0da8"+
    "\0\u061c\0\u0dd6\0\u0e04\0\u061c\0\u061c\0\u061c\0\u061c\0\u061c"+
    "\0\u061c\0\u061c\0\u061c\0\u061c\0\u0e32\0\u061c\0\u0e60\0\u061c"+
    "\0\u0e8e\0\u0ebc\0\u061c\0\u061c\0\u0eea\0\u061c\0\u0f18\0\u061c"+
    "\0\u061c\0\u0f46\0\u0f74\0\u061c\0\u061c\0\u0fa2\0\u061c\0\u0fd0"+
    "\0\u061c\0\u0ffe\0\u061c\0\u102c\0\u061c\0\u105a\0\u061c\0\u061c"+
    "\0\u061c\0\u1088\0\u061c\0\u10b6\0\u10e4\0\u1112\0\u0678\0\u1140"+
    "\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u064a\0\u1282"+
    "\0\u12b0\0\u12de\0\u130c\0\u133a\0\u0a10\0\u0a3e\0\u061c\0\u1368"+
    "\0\u061c\0\u061c\0\u1396\0\u061c\0\u105a\0\u10b6\0\u10e4\0\u13c4"+
    "\0\u061c\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506"+
    "\0\u064a\0\u1534\0\u1562\0\u1590\0\u15be\0\u061c\0\u15ec\0\u161a"+
    "\0\u1648\0\u1676\0\u064a\0\u064a\0\u064a\0\u16a4\0\u16d2\0\u1700"+
    "\0\u064a\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814\0\u1842"+
    "\0\u064a\0\u064a\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u064a\0\u064a"+
    "\0\u064a\0\u064a\0\u064a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\56\43\1\44\1\45\1\46\1\44\1\47\1\50\1\44"+
    "\1\51\2\44\1\52\1\53\1\54\1\55\1\47\1\56"+
    "\3\47\1\57\1\60\1\61\2\47\1\62\4\47\1\63"+
    "\1\64\2\47\1\65\1\66\1\67\1\70\1\67\10\44"+
    "\1\71\1\72\5\71\1\73\1\74\1\71\1\75\37\71"+
    "\1\74\3\71\1\76\1\72\5\76\1\73\2\76\1\75"+
    "\43\76\1\77\1\100\5\77\1\101\1\102\41\77\1\102"+
    "\3\77\10\0\1\103\41\0\1\103\3\0\1\104\1\72"+
    "\3\104\1\105\1\104\1\73\2\104\1\106\1\107\25\104"+
    "\1\65\1\110\1\111\1\104\1\112\1\113\7\104\12\114"+
    "\1\75\43\114\12\115\1\75\43\115\1\116\1\117\5\116"+
    "\1\120\46\116\1\121\1\122\5\121\1\123\2\121\1\124"+
    "\43\121\1\116\1\125\5\116\1\126\46\116\1\127\1\122"+
    "\5\127\1\123\2\127\1\130\43\127\1\122\1\131\5\122"+
    "\1\132\32\122\1\133\2\122\1\133\10\122\1\116\1\134"+
    "\5\116\1\135\47\116\1\136\5\116\1\137\46\116\1\140"+
    "\1\122\5\140\1\123\2\140\1\141\43\140\1\142\1\143"+
    "\5\142\1\144\2\142\1\145\43\142\1\44\1\146\2\44"+
    "\1\147\2\44\1\150\2\44\1\75\1\44\25\147\1\151"+
    "\1\152\5\44\1\153\1\154\4\44\1\155\1\146\5\155"+
    "\1\150\2\155\1\75\43\155\3\156\1\157\1\160\3\156"+
    "\1\161\1\156\1\162\1\157\1\163\24\160\2\156\2\157"+
    "\1\156\1\164\1\165\1\166\1\167\1\170\1\171\1\172"+
    "\1\173\1\122\1\174\5\122\2\174\35\122\5\174\2\122"+
    "\1\174\1\175\1\176\5\175\1\177\46\175\1\122\1\200"+
    "\5\122\1\201\32\122\1\202\2\122\1\202\1\122\1\203"+
    "\5\122\1\204\1\205\1\176\3\205\1\206\1\205\1\207"+
    "\46\205\1\210\1\211\5\210\1\212\1\210\1\213\40\210"+
    "\1\214\4\210\1\211\5\210\1\212\1\215\1\216\44\210"+
    "\1\122\1\217\5\122\1\220\46\122\1\116\1\221\5\116"+
    "\1\222\46\116\1\223\1\122\5\223\1\123\2\223\1\224"+
    "\43\223\1\225\1\0\3\225\1\226\50\225\1\227\1\176"+
    "\2\227\1\47\2\227\1\207\2\227\1\75\1\227\25\47"+
    "\15\227\1\230\1\231\5\230\1\232\2\230\1\75\43\230"+
    "\1\233\1\231\5\233\1\232\2\233\1\234\11\233\1\235"+
    "\31\233\62\0\1\47\1\236\6\0\25\47\15\0\1\237"+
    "\1\0\5\237\1\0\2\237\1\0\43\237\1\0\1\45"+
    "\66\0\1\52\56\0\1\240\46\0\1\47\1\236\6\0"+
    "\2\47\1\241\4\47\1\242\15\47\21\0\1\47\1\236"+
    "\6\0\16\47\1\243\6\47\21\0\1\47\1\236\6\0"+
    "\12\47\1\244\3\47\1\245\5\47\1\246\21\0\1\47"+
    "\1\236\6\0\11\47\1\247\3\47\1\250\7\47\21\0"+
    "\1\47\1\236\6\0\2\47\1\251\22\47\21\0\1\47"+
    "\1\236\6\0\15\47\1\252\7\47\21\0\1\47\1\236"+
    "\6\0\17\47\1\253\5\47\21\0\1\47\1\236\6\0"+
    "\12\47\1\254\12\47\56\0\1\65\14\0\1\71\1\0"+
    "\5\71\2\0\1\71\1\0\37\71\1\0\3\71\1\0"+
    "\1\72\66\0\1\75\43\0\1\76\1\0\5\76\1\0"+
    "\2\76\1\0\43\76\1\77\1\0\5\77\2\0\41\77"+
    "\1\0\3\77\1\0\1\100\66\0\1\106\47\0\1\255"+
    "\1\0\1\255\5\0\25\255\21\0\1\256\1\0\1\256"+
    "\5\0\25\256\15\0\1\116\1\0\55\116\1\117\54\116"+
    "\1\0\1\122\66\0\1\124\43\0\1\116\1\125\54\116"+
    "\12\0\1\130\44\0\1\131\123\0\1\257\6\0\1\116"+
    "\1\134\55\116\1\136\54\116\12\0\1\141\43\0\1\142"+
    "\1\0\55\142\1\143\55\142\1\0\10\142\1\145\43\142"+
    "\4\0\1\147\1\260\6\0\25\147\16\0\1\146\115\0"+
    "\1\261\55\0\1\262\20\0\1\160\1\263\6\0\25\160"+
    "\27\0\1\162\47\0\1\160\1\263\6\0\25\160\1\262"+
    "\14\0\1\175\1\0\55\175\1\176\54\175\1\0\1\200"+
    "\123\0\1\264\6\0\1\205\1\0\3\205\1\0\1\205"+
    "\1\0\46\205\1\0\1\176\55\0\1\211\126\0\1\122"+
    "\13\0\1\122\46\0\1\217\54\0\1\116\1\221\54\116"+
    "\12\0\1\224\43\0\1\265\1\0\5\265\1\0\2\265"+
    "\1\0\43\265\1\0\1\231\66\0\1\266\11\0\1\267"+
    "\62\0\1\270\30\0\1\47\7\0\25\47\31\0\1\271"+
    "\45\0\1\47\1\236\6\0\3\47\1\272\21\47\21\0"+
    "\1\47\1\236\6\0\11\47\1\273\13\47\21\0\1\47"+
    "\1\236\6\0\13\47\1\274\11\47\21\0\1\47\1\236"+
    "\6\0\13\47\1\275\11\47\21\0\1\47\1\236\6\0"+
    "\3\47\1\276\21\47\21\0\1\47\1\236\6\0\4\47"+
    "\1\277\20\47\21\0\1\47\1\236\6\0\3\47\1\300"+
    "\21\47\21\0\1\47\1\236\6\0\20\47\1\301\4\47"+
    "\21\0\1\47\1\236\6\0\12\47\1\302\12\47\21\0"+
    "\1\47\1\236\6\0\7\47\1\303\1\304\14\47\21\0"+
    "\1\47\1\236\6\0\2\47\1\305\22\47\21\0\1\147"+
    "\7\0\25\147\21\0\1\160\7\0\25\160\16\0\1\306"+
    "\5\0\1\307\2\0\1\310\47\0\1\47\1\236\6\0"+
    "\4\47\1\311\20\47\21\0\1\47\1\236\6\0\16\47"+
    "\1\312\6\47\21\0\1\47\1\236\6\0\7\47\1\313"+
    "\15\47\21\0\1\47\1\236\6\0\7\47\1\314\15\47"+
    "\21\0\1\47\1\236\6\0\17\47\1\315\5\47\21\0"+
    "\1\47\1\236\6\0\7\47\1\316\15\47\21\0\1\47"+
    "\1\236\6\0\12\47\1\317\12\47\21\0\1\47\1\236"+
    "\6\0\7\47\1\320\15\47\21\0\1\47\1\236\6\0"+
    "\15\47\1\321\7\47\21\0\1\47\1\236\6\0\12\47"+
    "\1\322\12\47\21\0\1\47\1\236\6\0\3\47\1\323"+
    "\21\47\16\0\1\306\66\0\1\310\47\0\1\47\1\236"+
    "\6\0\5\47\1\324\17\47\21\0\1\47\1\236\6\0"+
    "\14\47\1\325\10\47\21\0\1\47\1\236\6\0\15\47"+
    "\1\326\7\47\21\0\1\47\1\236\6\0\14\47\1\327"+
    "\10\47\21\0\1\47\1\236\6\0\13\47\1\330\11\47"+
    "\21\0\1\47\1\236\6\0\7\47\1\331\15\47\21\0"+
    "\1\47\1\236\6\0\23\47\1\332\1\47\21\0\1\47"+
    "\1\236\6\0\6\47\1\333\16\47\21\0\1\47\1\236"+
    "\6\0\12\47\1\334\12\47\21\0\1\47\1\236\6\0"+
    "\1\47\1\335\23\47\21\0\1\47\1\236\6\0\1\47"+
    "\1\336\23\47\21\0\1\47\1\236\6\0\13\47\1\337"+
    "\11\47\21\0\1\47\1\236\6\0\7\47\1\340\15\47"+
    "\21\0\1\47\1\236\6\0\4\47\1\341\20\47\21\0"+
    "\1\47\1\236\6\0\13\47\1\342\11\47\21\0\1\47"+
    "\1\236\6\0\7\47\1\343\15\47\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6440];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\1\1\0\1\1\2\0\2\1\1\0\1\1"+
    "\12\0\1\1\5\0\4\11\16\1\1\11\1\1\2\11"+
    "\1\1\1\11\1\1\1\11\3\1\1\11\1\1\4\11"+
    "\1\1\1\11\3\1\3\11\1\1\1\11\1\1\2\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\11\2\1\1\11"+
    "\2\1\1\11\1\1\4\11\2\1\1\11\2\1\11\11"+
    "\1\1\1\11\1\1\1\11\2\1\2\11\1\1\1\11"+
    "\1\1\2\11\2\1\2\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\3\11\1\1\1\11"+
    "\2\1\1\0\20\1\1\11\1\0\2\11\1\0\1\11"+
    "\1\1\3\0\1\11\14\1\1\11\35\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private LexerInput input;
    private boolean canFollowTag = false;
    int parenBalance = 1;
    int braceBalance = 0;
    int bracketBalance = 0;
    int indent = 0;
    int eolPosition = 0;
    boolean dotAfterTag = false;
    int blockIndent = -1;
    boolean hasCssId = false;
    int lastReaded = 0;
    boolean continueJS = false;
    boolean inString = false;
    

    public JadeColoringLexer(LexerRestartInfo info) {
        this.input = info.input();

        if(info.state() != null) {
            //reset state
            setState((LexerState)info.state());
        } else {
            //initial state
            zzState = zzLexicalState = YYINITIAL;
        }
    }


    public LexerState getState() {
        if (zzState == YYINITIAL && zzLexicalState == YYINITIAL) {
            return null;
        }
        return new LexerState(zzState, zzLexicalState, canFollowTag, indent, hasCssId);
    }

    public void setState(LexerState state) {
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
        this.canFollowTag = state.canFollowTag;
        this.indent = state.indent;
        this.hasCssId = state.hasCssId;
    }

    public JadeTokenId nextToken() throws java.io.IOException {
        JadeTokenId token = yylex();
        return token;
    }

    public static final class LexerState  {
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;
        final boolean canFollowTag;
        /** indent of the new line */
        final int indent;
        final boolean hasCssId;

        LexerState (int zzState, int zzLexicalState, boolean canFollowTag, int indent, boolean hasCssId) {
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.canFollowTag = canFollowTag;
            this.indent = indent;
            this.hasCssId = hasCssId;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final LexerState other = (LexerState) obj;
            if (this.zzState != other.zzState) {
                return false;
            }
            if (this.zzLexicalState != other.zzLexicalState) {
                return false;
            }
            if (this.canFollowTag != other.canFollowTag) {
                return false;
            }
            if (this.hasCssId != other.hasCssId) {
                return false;
            }
            if (this.indent != other.indent) {
                return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            int hash = 7;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            hash = 31 * hash + (this.canFollowTag ? 0 : 1);
            hash = 31 * hash + (this.hasCssId ? 0 : 1);
            hash = 31 * hash + this.indent;
            return hash;
        }

        @Override
        public String toString() {
            return "LexerState{" + "zzState=" + zzState + ", zzLexicalState=" + zzLexicalState + '}';
        }
    }

 // End user code
    boolean checkEndJS(int tokenLength, char ch) {
        if (!continueJS 
                && ((ch == ')' && parenBalance == 0) 
                || (ch != ')' && parenBalance == 1))
                && braceBalance == 0 && bracketBalance == 0) {
            if (lastReaded > 0 && ((tokenLength - lastReaded) > 0)) {
                yypushback(tokenLength - lastReaded);
                yybegin(HTML_ATTRIBUTE);
                return true;
            }
        } 
        lastReaded = tokenLength;
        continueJS = false;
        
        return false;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JadeColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JadeColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1706) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JadeTokenId yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzMarkedPosL;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      int tokenLength = 0;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          zzInput = input.read();
         if(zzInput == LexerInput.EOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
          input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 56: 
          { braceBalance++; lastReaded = tokenLength;
          }
        case 103: break;
        case 84: 
          { if (!hasCssId) {
                                            hasCssId = true;
                                            return JadeTokenId.CSS_ID;
                                        } else {
                                            // only one css id is allowed in tag
                                            return JadeTokenId.UNKNOWN;
                                        }
          }
        case 104: break;
        case 75: 
          { System.out.println("Chyba v after colon in tag");
                                        return JadeTokenId.UNKNOWN;
          }
        case 105: break;
        case 97: 
          { yybegin(AFTER_TAG);
                                        return JadeTokenId.KEYWORD_BLOCK;
          }
        case 106: break;
        case 30: 
          { int indentInComment = tokenLength - eolPosition;
                                        if (indent >= indentInComment) {
                                            yypushback(indentInComment + 1);  // return back also the EOL
                                            yybegin(AFTER_EOL);
                                            return JadeTokenId.COMMENT;
                                        }
                                        yybegin(IN_COMMENT);
          }
        case 107: break;
        case 76: 
          { yypushback(1);
                                        yybegin(JAVASCRIPT_AFTER_EACH);
          }
        case 108: break;
        case 17: 
          { yypushback(1);
                                        yybegin(DOCTYPE);
                                        if (tokenLength > 0) {
                                            return JadeTokenId.UNKNOWN;
                                        }
          }
        case 109: break;
        case 48: 
          { System.out.println("consumuju idetifikator");
                                        if (zzInput == ')') parenBalance--;
                                        if (checkEndJS(tokenLength, (char)zzInput)) {
                                            return JadeTokenId.JAVASCRIPT; 
                                        }
                                        if (zzInput == ')') parenBalance++;  // ned to return back
          }
        case 110: break;
        case 88: 
          { return JadeTokenId.FILTER;
          }
        case 111: break;
        case 4: 
          { return JadeTokenId.UNKNOWN;
          }
        case 112: break;
        case 33: 
          { int indentInComment = tokenLength - eolPosition;
                                        if (indent >= indentInComment) {
                                            yypushback(indentInComment);
                                            yybegin(AFTER_EOL);
                                            return JadeTokenId.UNBUFFERED_COMMENT;
                                        }
                                        yybegin(IN_UNBUFFERED_COMMENT);
          }
        case 113: break;
        case 25: 
          { yybegin(HTML_ATTRIBUTE);
                                        return JadeTokenId.BRACKET_RIGHT_PAREN;
          }
        case 114: break;
        case 7: 
          { yybegin(AFTER_TAG);
                                        dotAfterTag = true;
                                        hasCssId = false;
                                        return JadeTokenId.TAG ;
          }
        case 115: break;
        case 90: 
          { yybegin(AFTER_EACH);
                                        return JadeTokenId.KEYWORD_FOR;
          }
        case 116: break;
        case 45: 
          { System.out.println("Switch into javascript value " + tokenLength);
                                        parenBalance = 1;
                                        lastReaded = bracketBalance = braceBalance = 0;
                                        yypushback(1);
                                        yybegin(JAVASCRIPT_VALUE);
          }
        case 117: break;
        case 42: 
          { yybegin(HTML_ATTRIBUTE_VALUE);
                                        return JadeTokenId.OPERATOR_ASSIGNMENT;
          }
        case 118: break;
        case 98: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.KEYWORD_UNLESS;
          }
        case 119: break;
        case 23: 
          { return JadeTokenId.OPERATOR_DIVISION;
          }
        case 120: break;
        case 8: 
          { indent = tokenLength;
                                        return JadeTokenId.WHITESPACE;
          }
        case 121: break;
        case 12: 
          { return JadeTokenId.DOCTYPE_ATTRIBUTE;
          }
        case 122: break;
        case 2: 
          { // the  text will not be renedered
                                        return JadeTokenId.UNKNOWN;
          }
        case 123: break;
        case 40: 
          { return JadeTokenId.EOL;
          }
        case 124: break;
        case 58: 
          { bracketBalance--; lastReaded = tokenLength;
          }
        case 125: break;
        case 79: 
          { yybegin (IN_FILTER_BLOCK);
                                        blockIndent = -1;
                                        return JadeTokenId.FILTER;
          }
        case 126: break;
        case 47: 
          { continueJS = true; lastReaded = tokenLength; System.out.println("consumuju +-*/% '" + (char)zzInput + "' : " +zzInput );
          }
        case 127: break;
        case 91: 
          { int delta = tokenLength - lastReaded;
                                        if (delta > 0) {
                                            yypushback(delta);
                                            yybegin(AFTER_EOL);
                                            return JadeTokenId.JAVASCRIPT;
                                        }
                                        yypushback(tokenLength);
                                        yybegin(AFTER_EOL);
          }
        case 128: break;
        case 69: 
          { System.out.println("consumed string \"");  
                                        continueJS = false;
                                        lastReaded = tokenLength;
                                        yybegin(JAVASCRIPT_VALUE);
          }
        case 129: break;
        case 52: 
          { bracketBalance++; lastReaded = tokenLength;
          }
        case 130: break;
        case 22: 
          { yybegin(TEXT_LINE);
                                        return JadeTokenId.WHITESPACE;
          }
        case 131: break;
        case 77: 
          { yybegin(AFTER_EOL);
                                        return JadeTokenId.EOL;
          }
        case 132: break;
        case 21: 
          { yybegin(AFTER_COLON_IN_TAG);
                                        return JadeTokenId.OPERATOR_COLON;
          }
        case 133: break;
        case 24: 
          { yybegin(AFTER_PLAIN_TEXT_BLOCK_DELIMITER);
                                        return JadeTokenId.PLAIN_TEXT_DELIMITER;
          }
        case 134: break;
        case 87: 
          { braceBalance = 1; return JadeTokenId.EXPRESSION_DELIMITER_OPEN;
          }
        case 135: break;
        case 78: 
          { lastReaded = tokenLength; System.out.println("ctu char: " + (char)zzInput);
          }
        case 136: break;
        case 5: 
          { indent = 0; System.out.println("Indent reset");
                                        return JadeTokenId.EOL;
          }
        case 137: break;
        case 36: 
          { yybegin(IN_PLAIN_TEXT_BLOCK_AFTER_EOL);
                                        eolPosition = tokenLength;
          }
        case 138: break;
        case 35: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        return JadeTokenId.PLAIN_TEXT;
          }
        case 139: break;
        case 53: 
          { System.out.println("consumuju ,");                
                                        if (checkEndJS(tokenLength, (char)zzInput)) {
                                            System.out.println("vracim js po ws s carkou");
                                            return JadeTokenId.JAVASCRIPT; 
                                        }
          }
        case 140: break;
        case 27: 
          { yypushback(1);
                                        yybegin(JAVASCRIPT_WITH_BLOCK_EXPANSION);
          }
        case 141: break;
        case 6: 
          { yybegin(IN_PLAIN_TEXT_LINE);
          }
        case 142: break;
        case 49: 
          { yybegin(JS_STRING);
          }
        case 143: break;
        case 32: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        return JadeTokenId.UNBUFFERED_COMMENT;
          }
        case 144: break;
        case 86: 
          { yybegin(HTML_ATTRIBUTE_VALUE);
                                        return JadeTokenId.OPERATOR_NOT_EQUALS;
          }
        case 145: break;
        case 38: 
          { int currentIndent = tokenLength - eolPosition;
                                        if (currentIndent <= indent) {
                                            // the block has to have one more space than the tag
                                            yybegin(AFTER_EOL);
                                            indent = currentIndent;
                                            return JadeTokenId.WHITESPACE;
                                        }
                                        if (blockIndent < 0) {
                                            blockIndent = currentIndent;
                                        }
                                        if (blockIndent > currentIndent) {
                                            yypushback(currentIndent);
                                            yybegin(AFTER_EOL);
                                            return JadeTokenId.PLAIN_TEXT;
                                        }
                                        yybegin(IN_PLAIN_TEXT_BLOCK);
          }
        case 146: break;
        case 9: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.CODE_DELIMITER;
          }
        case 147: break;
        case 102: 
          { yybegin(AFTER_INCLUDE);
                                        return JadeTokenId.KEYWORD_INCLUDE;
          }
        case 148: break;
        case 72: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        if (tokenLength - 1 > 0) { 
                                            return JadeTokenId.FILTER_TEXT;
                                        }
          }
        case 149: break;
        case 10: 
          { hasCssId = false;
                                        yypushback(1);
                                        yybegin(AFTER_TAG);
          }
        case 150: break;
        case 63: 
          { braceBalance++;
          }
        case 151: break;
        case 14: 
          { yybegin(DOCTYPE_STRING);
                                        return JadeTokenId.DOCTYPE_STRING_START;
          }
        case 152: break;
        case 54: 
          { parenBalance--; 
                                        System.out.println("zaviraci zavorka");
                                        if (checkEndJS(tokenLength, (char)zzInput)) {
                                            return JadeTokenId.JAVASCRIPT; 
                                        }
          }
        case 153: break;
        case 67: 
          { yypushback(1);
                                     yybegin(AFTER_EOL);
                                     if (tokenLength -1 > 0) {
                                         return JadeTokenId.UNKNOWN;
                                     }
          }
        case 154: break;
        case 55: 
          { yybegin(JS_SSTRING);
          }
        case 155: break;
        case 59: 
          { switch (zzInput) {
            case '(': parenBalance++; break;
            case '{': braceBalance++; break;
            case '}': braceBalance--; break; 
            case ')':
                parenBalance--;
                break;    
            case ',':
            case '\r':
            case '\n':
                if (parenBalance == 1 && braceBalance == 0) {
                    parenBalance = 0;
                }
                break;
        }
        if (parenBalance == 0 && braceBalance == 0) {
            yypushback(1);
            yybegin(HTML_ATTRIBUTE);
            parenBalance = 1;
            return JadeTokenId.JAVASCRIPT;
        }
          }
        case 156: break;
        case 65: 
          { yypushback(1);
                                        yybegin(AFTER_TAG);
          }
        case 157: break;
        case 93: 
          { return JadeTokenId.KEYWORD_ELSE;
          }
        case 158: break;
        case 28: 
          { yybegin(IN_COMMENT_AFTER_EOL);
                                        eolPosition = tokenLength;
          }
        case 159: break;
        case 100: 
          { yybegin(AFTER_TAG); // handling : after the keyword
                                        return JadeTokenId.KEYWORD_DEFAULT;
          }
        case 160: break;
        case 74: 
          { yypushback(1); yybegin(FILEPATH);
          }
        case 161: break;
        case 73: 
          { int indentInBlock = tokenLength - eolPosition;
                                        if (blockIndent < 0) {
                                            blockIndent = indentInBlock;
                                        }
                                        if (blockIndent > indentInBlock) {
                                            yypushback(indentInBlock);
                                            yybegin(AFTER_EOL);
                                            return JadeTokenId.FILTER_TEXT;
                                        }
                                        yybegin(IN_FILTER_BLOCK);
          }
        case 162: break;
        case 70: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        if (tokenLength - 1 > 0) {
                                            return JadeTokenId.FILE_PATH;
                                        }
          }
        case 163: break;
        case 19: 
          { yybegin(DOCTYPE);
                                        return JadeTokenId.DOCTYPE_STRING_END;
          }
        case 164: break;
        case 13: 
          { yybegin(AFTER_EOL);
                                        indent = 0;
                                        if (tokenLength > 0) {
                                            return JadeTokenId.EOL;
                                        }
          }
        case 165: break;
        case 15: 
          { return JadeTokenId.WHITESPACE;
          }
        case 166: break;
        case 11: 
          { yybegin(IN_PLAIN_TEXT_LINE);
                                        return JadeTokenId.PLAIN_TEXT_DELIMITER;
          }
        case 167: break;
        case 94: 
          { yybegin(AFTER_EACH);
                                        return JadeTokenId.KEYWORD_EACH;
          }
        case 168: break;
        case 16: 
          { yybegin(DOCTYPE);
                                      return JadeTokenId.DOCTYPE_TEMPLATE;
          }
        case 169: break;
        case 61: 
          { yybegin(AFTER_EOL);
                                        indent = 0;
                                        return JadeTokenId.EOL;
          }
        case 170: break;
        case 82: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.KEYWORD_IN;
          }
        case 171: break;
        case 50: 
          { System.out.println("consumuju WS");
          }
        case 172: break;
        case 92: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.KEYWORD_CASE;
          }
        case 173: break;
        case 46: 
          { lastReaded = tokenLength; continueJS = false; System.out.println("precten: " + (char)zzInput);
          }
        case 174: break;
        case 85: 
          { yypushback(2);
                                        yybegin(JAVASCRIPT_EXPRESSION);
                                        return JadeTokenId.TEXT;
          }
        case 175: break;
        case 89: 
          { yybegin(IN_UNBUFFERED_COMMENT);
                                        return JadeTokenId.UNBUFFERED_COMMENT_DELIMITER;
          }
        case 176: break;
        case 44: 
          { yybegin(AFTER_TAG);
                                        return JadeTokenId.BRACKET_RIGHT_PAREN;
          }
        case 177: break;
        case 20: 
          { // we expect = != / or Css Id or Css class
                                        return JadeTokenId.UNKNOWN;
          }
        case 178: break;
        case 71: 
          { yybegin(IN_FILTER_BLOCK_AFTER_EOL);
                                        eolPosition = tokenLength;
          }
        case 179: break;
        case 41: 
          { return JadeTokenId.ATTRIBUTE;
          }
        case 180: break;
        case 31: 
          { yybegin(IN_UNBUFFERED_COMMENT_AFTER_EOL);
                                        eolPosition = tokenLength;
          }
        case 181: break;
        case 34: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        indent = 0;
                                        
                                        if (tokenLength -1 > 0) {
                                            return JadeTokenId.TEXT;
                                        }
          }
        case 182: break;
        case 37: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        indent = 0;
                                        return JadeTokenId.PLAIN_TEXT;
          }
        case 183: break;
        case 101: 
          { yybegin(FILEPATH);
                                        return JadeTokenId.KEYWORD_EXTENDS;
          }
        case 184: break;
        case 66: 
          { System.out.println("String char: " + (char)zzInput);
          }
        case 185: break;
        case 39: 
          { blockIndent = -1;
                                        eolPosition = 0;
                                        yybegin(IN_PLAIN_TEXT_BLOCK_AFTER_EOL);
                                        return JadeTokenId.EOL;
          }
        case 186: break;
        case 68: 
          { System.out.println("consumed string '");  
                                        continueJS = false;
                                        lastReaded = tokenLength;
                                        yybegin(JAVASCRIPT_VALUE);
          }
        case 187: break;
        case 80: 
          { yybegin(IN_COMMENT); 
                                        return JadeTokenId.COMMENT_DELIMITER;
          }
        case 188: break;
        case 26: 
          { yypushback(1);
                                        yybegin(JAVASCRIPT_LINE);
          }
        case 189: break;
        case 29: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        return JadeTokenId.COMMENT;
          }
        case 190: break;
        case 99: 
          { yybegin(AFTER_DOCTYPE);
                                        return JadeTokenId.DOCTYPE;
          }
        case 191: break;
        case 64: 
          { braceBalance--;
                                        if (braceBalance == 0) {
                                            yypushback(1);
                                            return JadeTokenId.JAVASCRIPT;
                                        } else if (braceBalance == -1) {
                                            yybegin(TEXT_LINE);
                                            return JadeTokenId.EXPRESSION_DELIMITER_CLOSE; 
                                        }
          }
        case 192: break;
        case 62: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        if (tokenLength - 1 > 0) {
                                            return JadeTokenId.JAVASCRIPT;
                                        }
          }
        case 193: break;
        case 57: 
          { braceBalance--; lastReaded = tokenLength;
          }
        case 194: break;
        case 3: 
          { yypushback(1);
            indent = 0;
            yybegin(AFTER_EOL);
          }
        case 195: break;
        case 43: 
          { return JadeTokenId.OPERATOR_COMMA;
          }
        case 196: break;
        case 95: 
          { yybegin(AFTER_CODE_DELIMITER_WITH_BLOCK_EXPANSION);
                                        return JadeTokenId.KEYWORD_WHEN;
          }
        case 197: break;
        case 96: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.KEYWORD_WHILE;
          }
        case 198: break;
        case 51: 
          { parenBalance++; lastReaded = tokenLength;
          }
        case 199: break;
        case 60: 
          { return JadeTokenId.JAVASCRIPT;
          }
        case 200: break;
        case 81: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.KEYWORD_IF;
          }
        case 201: break;
        case 18: 
          { yypushback(1);
                                        yybegin(DOCTYPE_STRING_END);
                                        return JadeTokenId.DOCTYPE_STRING_END;
          }
        case 202: break;
        case 83: 
          { return JadeTokenId.CSS_CLASS;
          }
        case 203: break;
        case 1: 
          { 
          }
        case 204: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case IN_COMMENT_AFTER_EOL: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.COMMENT;
    } else {
        return null;
    }
            }
            case 228: break;
            case IN_PLAIN_TEXT_BLOCK: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.PLAIN_TEXT;
    } else {
        return null;
    }
            }
            case 229: break;
            case IN_FILTER_BLOCK_AFTER_EOL: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.FILTER_TEXT;
    } else {
        return null;
    }
            }
            case 230: break;
            case IN_UNBUFFERED_COMMENT: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.UNBUFFERED_COMMENT;
    } else {
        return null;
    }
            }
            case 231: break;
            case IN_COMMENT: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.COMMENT;
    } else {
        return null;
    }
            }
            case 232: break;
            case IN_FILTER_BLOCK: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.FILTER_TEXT;
    } else {
        return null;
    }
            }
            case 233: break;
            case IN_PLAIN_TEXT_BLOCK_AFTER_EOL: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.PLAIN_TEXT;
    } else {
        return null;
    }
            }
            case 234: break;
            case IN_UNBUFFERED_COMMENT_AFTER_EOL: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.UNBUFFERED_COMMENT;
    } else {
        return null;
    }
            }
            case 235: break;
            default:
              {
                if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.UNKNOWN;
    } else {
        return null;
    }
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
