/* The following code was generated by JFlex 1.4.3 on 2/17/15 10:06 AM */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development and
 * Distribution License("CDDL") (collectively, the "License"). You may not use
 * this file except in compliance with the License. You can obtain a copy of
 * the License at http://www.netbeans.org/cddl-gplv2.html or
 * nbbuild/licenses/CDDL-GPL-2-CP. See the License for the specific language
 * governing permissions and limitations under the License. When distributing
 * the software, include this License Header Notice in each file and include
 * the License file at nbbuild/licenses/CDDL-GPL-2-CP. Oracle designates this
 * particular file as subject to the "Classpath" exception as provided by
 * Oracle in the GPL Version 2 section of the License file that accompanied
 * this code. If applicable, add the following below the License Header, with
 * the fields enclosed by brackets [] replaced by your own identifying
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license." If you do not indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to its
 * licensees as provided above. However, if you add GPL Version 2 code and
 * therefore, elected the GPL Version 2 license, then the option applies only
 * if the new code is made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */

package org.netbeans.modules.javascript2.jade.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/17/15 10:06 AM from the specification file
 * <tt>/home/petr/mercurial/web-main/javascript2.jade/tools/JadeColoringScanner.flex</tt>
 */
public final class JadeColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int AFTER_CODE_DELIMITER = 14;
  public static final int IN_PLAIN_TEXT_BLOCK_AFTER_EOL = 32;
  public static final int JS_STRING = 52;
  public static final int JAVASCRIPT_WITH_BLOCK_EXPANSION = 48;
  public static final int IN_PLAIN_TEXT_LINE = 28;
  public static final int AFTER_CODE_DELIMITER_WITH_BLOCK_EXPANSION = 16;
  public static final int FILEPATH = 54;
  public static final int JAVASCRIPT_AFTER_EACH = 66;
  public static final int JS_SSTRING = 50;
  public static final int AFTER_INCLUDE = 60;
  public static final int MIXIN_ARGUMENTS = 70;
  public static final int IN_COMMENT_AFTER_EOL = 20;
  public static final int IN_FILTER_BLOCK = 56;
  public static final int MIXIN_CALL_ARGUMENT = 74;
  public static final int TEXT_LINE = 26;
  public static final int YYINITIAL = 0;
  public static final int AFTER_PLAIN_TEXT_BLOCK_DELIMITER = 34;
  public static final int AFTER_MIXIN = 68;
  public static final int IN_UNBUFFERED_COMMENT = 22;
  public static final int AFTER_PLUS_MIXIN = 72;
  public static final int AFTER_EACH = 64;
  public static final int AFTER_DOCTYPE = 6;
  public static final int IN_UNBUFFERED_COMMENT_AFTER_EOL = 24;
  public static final int JAVASCRIPT_VALUE = 40;
  public static final int JAVASCRIPT = 42;
  public static final int HTML_ATTRIBUTE = 36;
  public static final int DOCTYPE_STRING_END = 10;
  public static final int DOCTYPE_STRING = 8;
  public static final int IN_FILTER_BLOCK_AFTER_EOL = 58;
  public static final int JAVASCRIPT_EXPRESSION = 46;
  public static final int AFTER_TAG = 12;
  public static final int JAVASCRIPT_LINE = 44;
  public static final int IN_PLAIN_TEXT_BLOCK = 30;
  public static final int HTML_ATTRIBUTE_VALUE = 38;
  public static final int DOCTYPE = 4;
  public static final int AFTER_EOL = 2;
  public static final int IN_COMMENT = 18;
  public static final int AFTER_COLON_IN_TAG = 62;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 
    32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\13\1\12\1\1\2\12\1\7\16\13\4\0\1\12\1\47\1\10"+
    "\1\52\1\15\2\3\1\57\1\53\1\56\1\3\1\45\1\55\1\4"+
    "\1\50\1\17\12\14\1\5\1\0\1\2\1\46\1\0\1\0\1\6"+
    "\1\35\1\41\1\22\1\20\1\26\1\30\1\16\1\36\1\27\1\16"+
    "\1\42\1\31\1\44\1\34\1\21\1\25\1\16\1\37\1\32\1\23"+
    "\1\33\1\16\1\40\1\43\1\24\1\16\1\60\1\11\1\61\1\0"+
    "\1\15\1\0\1\35\1\41\1\22\1\20\1\26\1\30\1\16\1\36"+
    "\1\27\1\16\1\42\1\31\1\44\1\34\1\21\1\25\1\16\1\37"+
    "\1\32\1\23\1\33\1\16\1\40\1\43\1\24\1\16\1\54\1\51"+
    "\1\62\1\0\41\13\1\12\1\0\4\15\4\0\1\16\2\0\1\13"+
    "\7\0\1\16\4\0\1\16\5\0\27\16\1\0\37\16\1\0\u01ca\16"+
    "\4\0\14\16\16\0\5\16\7\0\1\16\1\0\1\16\21\0\160\13"+
    "\5\16\1\0\2\16\2\0\4\16\10\0\1\16\1\0\3\16\1\0"+
    "\1\16\1\0\24\16\1\0\123\16\1\0\213\16\1\0\5\13\2\0"+
    "\236\16\11\0\46\16\2\0\1\16\7\0\47\16\11\0\55\13\1\0"+
    "\1\13\1\0\2\13\1\0\2\13\1\0\1\13\10\0\33\16\5\0"+
    "\3\16\15\0\4\13\7\0\1\15\4\0\13\13\5\0\53\16\25\13"+
    "\12\14\4\0\2\16\1\13\143\16\1\0\1\16\10\13\1\0\6\13"+
    "\2\16\2\13\1\0\4\13\2\16\12\14\3\16\2\0\1\16\17\0"+
    "\1\13\1\16\1\13\36\16\33\13\2\0\131\16\13\13\1\16\16\0"+
    "\12\14\41\16\11\13\2\16\4\0\1\16\5\0\26\16\4\13\1\16"+
    "\11\13\1\16\3\13\1\16\5\13\22\0\31\16\3\13\244\0\4\13"+
    "\66\16\3\13\1\16\22\13\1\16\7\13\12\16\2\13\2\0\12\14"+
    "\1\0\7\16\1\0\7\16\1\0\3\13\1\0\10\16\2\0\2\16"+
    "\2\0\26\16\1\0\7\16\1\0\1\16\3\0\4\16\2\0\1\13"+
    "\1\16\7\13\2\0\2\13\2\0\3\13\1\16\10\0\1\13\4\0"+
    "\2\16\1\0\3\16\2\13\2\0\12\14\2\16\2\15\7\0\1\15"+
    "\5\0\3\13\1\0\6\16\4\0\2\16\2\0\26\16\1\0\7\16"+
    "\1\0\2\16\1\0\2\16\1\0\2\16\2\0\1\13\1\0\5\13"+
    "\4\0\2\13\2\0\3\13\3\0\1\13\7\0\4\16\1\0\1\16"+
    "\7\0\12\14\2\13\3\16\1\13\13\0\3\13\1\0\11\16\1\0"+
    "\3\16\1\0\26\16\1\0\7\16\1\0\2\16\1\0\5\16\2\0"+
    "\1\13\1\16\10\13\1\0\3\13\1\0\3\13\2\0\1\16\17\0"+
    "\2\16\2\13\2\0\12\14\1\0\1\15\17\0\3\13\1\0\10\16"+
    "\2\0\2\16\2\0\26\16\1\0\7\16\1\0\2\16\1\0\5\16"+
    "\2\0\1\13\1\16\7\13\2\0\2\13\2\0\3\13\10\0\2\13"+
    "\4\0\2\16\1\0\3\16\2\13\2\0\12\14\1\0\1\16\20\0"+
    "\1\13\1\16\1\0\6\16\3\0\3\16\1\0\4\16\3\0\2\16"+
    "\1\0\1\16\1\0\2\16\3\0\2\16\3\0\3\16\3\0\14\16"+
    "\4\0\5\13\3\0\3\13\1\0\4\13\2\0\1\16\6\0\1\13"+
    "\16\0\12\14\11\0\1\15\7\0\3\13\1\0\10\16\1\0\3\16"+
    "\1\0\27\16\1\0\12\16\1\0\5\16\3\0\1\16\7\13\1\0"+
    "\3\13\1\0\4\13\7\0\2\13\1\0\2\16\6\0\2\16\2\13"+
    "\2\0\12\14\22\0\2\13\1\0\10\16\1\0\3\16\1\0\27\16"+
    "\1\0\12\16\1\0\5\16\2\0\1\13\1\16\7\13\1\0\3\13"+
    "\1\0\4\13\7\0\2\13\7\0\1\16\1\0\2\16\2\13\2\0"+
    "\12\14\1\0\2\16\17\0\2\13\1\0\10\16\1\0\3\16\1\0"+
    "\51\16\2\0\1\16\7\13\1\0\3\13\1\0\4\13\1\16\10\0"+
    "\1\13\10\0\2\16\2\13\2\0\12\14\12\0\6\16\2\0\2\13"+
    "\1\0\22\16\3\0\30\16\1\0\11\16\1\0\1\16\2\0\7\16"+
    "\3\0\1\13\4\0\6\13\1\0\1\13\1\0\10\13\22\0\2\13"+
    "\15\0\60\16\1\13\2\16\7\13\4\0\1\15\7\16\10\13\1\0"+
    "\12\14\47\0\2\16\1\0\1\16\2\0\2\16\1\0\1\16\2\0"+
    "\1\16\6\0\4\16\1\0\7\16\1\0\3\16\1\0\1\16\1\0"+
    "\1\16\2\0\2\16\1\0\4\16\1\13\2\16\6\13\1\0\2\13"+
    "\1\16\2\0\5\16\1\0\1\16\1\0\6\13\2\0\12\14\2\0"+
    "\2\16\42\0\1\16\27\0\2\13\6\0\12\14\13\0\1\13\1\0"+
    "\1\13\1\0\1\13\4\0\2\13\10\16\1\0\44\16\4\0\24\13"+
    "\1\0\2\13\5\16\13\13\1\0\44\13\11\0\1\13\71\0\53\16"+
    "\24\13\1\16\12\14\6\0\6\16\4\13\4\16\3\13\1\16\3\13"+
    "\2\16\7\13\3\16\4\13\15\16\14\13\1\16\1\13\12\14\4\13"+
    "\2\0\46\16\12\0\53\16\1\0\1\16\3\0\u0149\16\1\0\4\16"+
    "\2\0\7\16\1\0\1\16\1\0\4\16\2\0\51\16\1\0\4\16"+
    "\2\0\41\16\1\0\4\16\2\0\7\16\1\0\1\16\1\0\4\16"+
    "\2\0\17\16\1\0\71\16\1\0\4\16\2\0\103\16\2\0\3\13"+
    "\40\0\20\16\20\0\125\16\14\0\u026c\16\2\0\21\16\1\0\32\16"+
    "\5\0\113\16\3\0\3\15\17\0\15\16\1\0\4\16\3\13\13\0"+
    "\22\16\3\13\13\0\22\16\2\13\14\0\15\16\1\0\3\16\1\0"+
    "\2\13\14\0\64\16\40\13\3\0\1\16\3\0\1\15\1\16\1\13"+
    "\2\0\12\14\41\0\3\13\2\0\12\14\6\0\130\16\10\0\51\16"+
    "\1\13\1\16\5\0\106\16\12\0\35\16\3\0\14\13\4\0\14\13"+
    "\12\0\12\14\36\16\2\0\5\16\13\0\54\16\4\0\21\13\7\16"+
    "\2\13\6\0\12\14\46\0\27\16\5\13\4\0\65\16\12\13\1\0"+
    "\35\13\2\0\1\13\12\14\6\0\12\14\15\0\1\16\130\0\5\13"+
    "\57\16\21\13\7\16\4\0\12\14\21\0\11\13\14\0\3\13\36\16"+
    "\12\13\3\0\2\16\12\14\6\0\46\16\16\13\14\0\44\16\24\13"+
    "\10\0\12\14\3\0\3\16\12\14\44\16\122\0\3\13\1\0\25\13"+
    "\4\16\1\13\4\16\1\13\15\0\300\16\47\13\25\0\4\13\u0116\16"+
    "\2\0\6\16\2\0\46\16\2\0\6\16\2\0\10\16\1\0\1\16"+
    "\1\0\1\16\1\0\1\16\1\0\37\16\2\0\65\16\1\0\7\16"+
    "\1\0\1\16\3\0\3\16\1\0\7\16\3\0\4\16\2\0\6\16"+
    "\4\0\15\16\5\0\3\16\1\0\7\16\16\0\5\13\32\0\5\13"+
    "\20\0\2\15\23\0\1\15\13\0\5\13\5\0\6\13\1\0\1\16"+
    "\15\0\1\16\20\0\15\16\3\0\32\15\26\0\15\13\4\0\1\13"+
    "\3\0\14\13\21\0\1\16\4\0\1\16\2\0\12\16\1\0\1\16"+
    "\3\0\5\16\6\0\1\16\1\0\1\16\1\0\1\16\1\0\4\16"+
    "\1\0\13\16\2\0\4\16\5\0\5\16\4\0\1\16\21\0\43\15"+
    "\2\16\4\15\u0a77\0\57\16\1\0\57\16\1\0\205\16\6\0\4\16"+
    "\3\13\16\0\46\16\12\0\66\16\11\0\1\16\17\0\1\13\27\16"+
    "\11\0\7\16\1\0\7\16\1\0\7\16\1\0\7\16\1\0\7\16"+
    "\1\0\7\16\1\0\7\16\1\0\7\16\1\0\40\13\57\0\1\16"+
    "\u01d5\0\2\16\1\15\31\0\11\15\6\13\1\0\5\16\2\0\3\15"+
    "\2\16\4\0\126\16\2\0\2\13\2\0\3\16\1\0\132\16\1\0"+
    "\4\16\5\0\51\16\3\0\136\16\21\0\33\16\65\0\20\16\u0200\0"+
    "\u19b6\16\112\0\u51cc\16\64\0\u048d\16\103\0\56\16\2\0\u010d\16\3\0"+
    "\20\16\12\14\2\16\24\0\57\16\1\13\14\0\2\13\1\0\31\16"+
    "\10\0\106\16\12\15\2\13\45\0\11\16\2\0\147\16\2\0\4\16"+
    "\1\0\2\16\16\0\12\16\120\0\10\16\1\13\3\16\1\13\4\16"+
    "\1\13\27\16\5\13\20\0\1\15\7\0\64\16\14\0\2\13\62\16"+
    "\21\13\13\0\12\14\6\0\22\13\6\16\3\0\1\16\4\0\12\14"+
    "\34\16\10\13\2\0\27\16\15\13\14\0\35\16\3\0\4\13\57\16"+
    "\16\13\16\0\1\16\12\14\46\0\51\16\16\13\11\0\3\16\1\13"+
    "\10\16\2\13\2\0\12\14\6\0\27\16\3\0\1\16\1\13\4\0"+
    "\60\16\1\13\1\16\3\13\2\16\2\13\5\16\2\13\1\16\1\13"+
    "\1\16\30\0\3\16\43\0\6\16\2\0\6\16\2\0\6\16\11\0"+
    "\7\16\1\0\7\16\221\0\43\16\10\13\1\0\2\13\2\0\12\14"+
    "\6\0\u2ba4\16\14\0\27\16\4\0\61\16\u2104\0\u012e\16\2\0\76\16"+
    "\2\0\152\16\46\0\7\16\14\0\5\16\5\0\1\16\1\13\12\16"+
    "\1\0\15\16\1\0\5\16\1\0\1\16\1\0\2\16\1\0\2\16"+
    "\1\0\154\16\41\0\u016b\16\22\0\100\16\2\0\66\16\50\0\14\16"+
    "\1\15\3\0\20\13\20\0\7\13\14\0\2\15\30\0\3\15\31\0"+
    "\1\15\6\0\5\16\1\0\207\16\2\0\1\13\4\0\1\15\13\0"+
    "\12\14\7\0\32\16\4\0\1\15\1\0\32\16\13\0\131\16\3\0"+
    "\6\16\2\0\6\16\2\0\6\16\2\0\3\16\3\0\2\15\3\0"+
    "\2\15\22\0\3\13\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\0\1\1\2\0\2\1\1\0\1\2"+
    "\12\0\1\1\11\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\4\1\5\1\10\1\11\1\4\11\11\1\12\1\7"+
    "\1\4\1\13\1\14\1\15\2\16\1\17\1\20\1\21"+
    "\1\1\2\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\25\1\31\1\25\1\32\1\33\1\34\1\1\1\35"+
    "\1\1\1\36\2\1\1\37\1\40\1\1\1\41\1\42"+
    "\2\43\1\1\1\44\1\1\1\45\1\1\1\46\1\47"+
    "\1\2\1\50\1\2\1\20\1\51\1\52\1\51\1\53"+
    "\1\4\1\54\1\55\1\56\1\57\2\60\1\61\1\1"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\74\2\76\1\1\1\77"+
    "\1\100\1\74\1\101\1\75\2\102\1\1\1\103\1\1"+
    "\2\104\1\105\1\1\1\106\1\107\2\110\1\111\2\112"+
    "\3\113\1\114\1\115\1\116\1\117\1\116\1\120\1\121"+
    "\1\122\1\123\1\124\1\0\1\125\1\126\6\11\1\127"+
    "\1\130\5\11\1\131\1\132\1\133\1\134\1\0\1\135"+
    "\1\60\1\0\1\136\1\137\4\0\1\140\7\11\1\141"+
    "\5\11\3\142\1\143\2\11\1\144\1\145\1\146\3\11"+
    "\1\147\10\11\1\150\1\151\1\152\4\11\1\153\1\154"+
    "\1\155\1\156\1\157";

  private static int [] zzUnpackAction() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495"+
    "\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa\0\u062d"+
    "\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792\0\u0792"+
    "\0\u0792\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u07c5\0\u0891"+
    "\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29"+
    "\0\u0a5c\0\u0792\0\u0792\0\u0a8f\0\u0792\0\u0792\0\u0ac2\0\u0792"+
    "\0\u0af5\0\u0792\0\u0b28\0\u0b5b\0\u0b8e\0\u0792\0\u0bc1\0\u0792"+
    "\0\u0792\0\u0792\0\u0792\0\u0bf4\0\u0792\0\u0a8f\0\u0c27\0\u0c5a"+
    "\0\u0792\0\u0792\0\u0792\0\u0c8d\0\u0792\0\u0cc0\0\u0792\0\u0792"+
    "\0\u0cf3\0\u0d26\0\u0792\0\u0d59\0\u0792\0\u0d8c\0\u0792\0\u0dbf"+
    "\0\u0df2\0\u0792\0\u0e25\0\u0792\0\u0e58\0\u0792\0\u0e8b\0\u0ebe"+
    "\0\u0792\0\u0ef1\0\u0f24\0\u0792\0\u0f57\0\u0f8a\0\u0792\0\u0fbd"+
    "\0\u0792\0\u0792\0\u0792\0\u0792\0\u0ff0\0\u1023\0\u0792\0\u1056"+
    "\0\u1089\0\u0792\0\u0792\0\u0792\0\u0792\0\u0792\0\u0792\0\u0792"+
    "\0\u0792\0\u0792\0\u10bc\0\u0792\0\u10ef\0\u0792\0\u1122\0\u1155"+
    "\0\u0792\0\u0792\0\u1188\0\u0792\0\u11bb\0\u0792\0\u11ee\0\u1221"+
    "\0\u0792\0\u1254\0\u0792\0\u1287\0\u0792\0\u12ba\0\u0792\0\u12ed"+
    "\0\u0792\0\u1320\0\u0792\0\u0792\0\u1353\0\u0792\0\u1386\0\u13b9"+
    "\0\u13ec\0\u0792\0\u0792\0\u141f\0\u1452\0\u0792\0\u0792\0\u0792"+
    "\0\u0792\0\u0792\0\u1485\0\u07f8\0\u14b8\0\u14eb\0\u151e\0\u1551"+
    "\0\u1584\0\u15b7\0\u15ea\0\u07c5\0\u161d\0\u1650\0\u1683\0\u16b6"+
    "\0\u16e9\0\u171c\0\u0c27\0\u174f\0\u0792\0\u0792\0\u1782\0\u0792"+
    "\0\u0792\0\u17b5\0\u0792\0\u1320\0\u1386\0\u13b9\0\u17e8\0\u181b"+
    "\0\u0792\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980"+
    "\0\u07c5\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u0792\0\u1ab2"+
    "\0\u1ae5\0\u0792\0\u1b18\0\u1b4b\0\u07c5\0\u07c5\0\u07c5\0\u1b7e"+
    "\0\u1bb1\0\u1be4\0\u07c5\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3"+
    "\0\u1d16\0\u1d49\0\u1d7c\0\u07c5\0\u07c5\0\u07c5\0\u1daf\0\u1de2"+
    "\0\u1e15\0\u1e48\0\u07c5\0\u07c5\0\u07c5\0\u07c5\0\u07c5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\63\47\1\50\1\51\1\52\1\50\1\53\1\54\1\50"+
    "\1\55\2\50\1\56\1\50\1\57\1\50\1\57\1\60"+
    "\1\61\1\57\1\62\3\57\1\63\1\64\1\65\2\57"+
    "\1\66\4\57\1\67\1\70\2\57\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\75\10\50\1\77\1\100\5\77"+
    "\1\101\1\102\1\77\1\103\44\77\1\102\3\77\1\104"+
    "\1\100\5\104\1\101\2\104\1\103\50\104\1\105\1\106"+
    "\5\105\1\107\1\110\46\105\1\110\3\105\10\0\1\111"+
    "\46\0\1\111\3\0\1\112\1\100\3\112\1\113\1\112"+
    "\1\101\2\112\1\114\4\112\1\115\26\112\1\73\1\116"+
    "\1\117\1\112\1\120\1\121\7\112\12\122\1\103\50\122"+
    "\12\123\1\103\50\123\1\124\1\125\5\124\1\126\53\124"+
    "\1\127\1\130\5\127\1\131\2\127\1\132\50\127\1\124"+
    "\1\133\5\124\1\134\53\124\1\135\1\130\5\135\1\131"+
    "\2\135\1\136\50\135\1\130\1\137\5\130\1\140\37\130"+
    "\1\141\2\130\1\141\10\130\1\124\1\142\5\124\1\143"+
    "\54\124\1\144\5\124\1\145\53\124\1\146\1\130\5\146"+
    "\1\131\2\146\1\147\50\146\1\150\1\151\5\150\1\152"+
    "\2\150\1\153\50\150\1\50\1\154\2\50\1\155\2\50"+
    "\1\156\2\50\1\103\1\50\1\155\1\50\1\155\1\50"+
    "\25\155\1\50\1\157\1\160\5\50\1\161\1\162\4\50"+
    "\1\163\1\154\5\163\1\156\2\163\1\103\50\163\3\164"+
    "\1\165\1\166\3\164\1\167\1\164\1\170\1\164\1\171"+
    "\1\164\1\171\1\165\25\171\1\165\2\164\2\165\1\164"+
    "\1\172\1\173\1\174\1\175\1\176\1\177\1\200\1\201"+
    "\1\130\1\202\5\130\2\202\42\130\5\202\2\130\1\202"+
    "\1\203\1\204\5\203\1\205\53\203\1\130\1\206\5\130"+
    "\1\207\37\130\1\210\2\130\1\210\1\130\1\211\5\130"+
    "\1\212\1\213\1\204\3\213\1\214\1\213\1\215\53\213"+
    "\1\130\1\216\5\130\1\217\1\130\1\220\45\130\1\221"+
    "\4\130\1\216\5\130\1\217\1\221\1\222\52\130\1\223"+
    "\5\130\1\224\53\130\1\124\1\225\5\124\1\226\53\124"+
    "\1\227\1\130\5\227\1\131\2\227\1\230\50\227\1\231"+
    "\1\0\3\231\1\232\55\231\1\50\1\204\2\50\1\57"+
    "\2\50\1\215\2\50\1\103\1\50\1\57\1\50\1\57"+
    "\1\50\25\57\16\50\1\233\1\234\5\233\1\235\2\233"+
    "\1\103\50\233\1\236\1\234\5\236\1\235\2\236\1\237"+
    "\14\236\1\240\33\236\1\0\1\234\5\0\1\235\2\0"+
    "\1\103\2\0\2\241\1\0\25\241\6\0\1\242\7\0"+
    "\1\243\1\234\5\243\1\235\2\243\1\103\2\243\2\244"+
    "\1\243\25\244\3\243\1\245\4\243\1\161\1\246\4\243"+
    "\1\0\1\234\5\0\1\235\2\0\1\103\2\0\2\241"+
    "\1\0\25\241\6\0\1\247\1\0\1\250\1\251\4\0"+
    "\53\130\4\252\3\130\1\252\67\0\1\57\1\253\6\0"+
    "\1\57\1\0\1\57\1\0\25\57\16\0\1\254\1\0"+
    "\5\254\1\0\2\254\1\0\50\254\1\0\1\51\73\0"+
    "\1\56\67\0\1\255\47\0\1\57\1\253\6\0\1\57"+
    "\1\0\1\57\1\0\1\57\1\256\4\57\1\257\16\57"+
    "\22\0\1\57\1\253\6\0\1\57\1\0\1\57\1\0"+
    "\15\57\1\260\7\57\22\0\1\57\1\253\6\0\1\57"+
    "\1\0\1\57\1\0\11\57\1\261\3\57\1\262\5\57"+
    "\1\263\1\57\22\0\1\57\1\253\6\0\1\57\1\0"+
    "\1\57\1\0\10\57\1\264\3\57\1\265\10\57\22\0"+
    "\1\57\1\253\6\0\1\57\1\0\1\57\1\0\1\57"+
    "\1\266\23\57\22\0\1\57\1\253\6\0\1\57\1\0"+
    "\1\57\1\0\14\57\1\267\10\57\22\0\1\57\1\253"+
    "\6\0\1\57\1\0\1\57\1\0\16\57\1\270\6\57"+
    "\22\0\1\57\1\253\6\0\1\57\1\0\1\57\1\0"+
    "\11\57\1\271\13\57\22\0\1\57\1\253\6\0\1\57"+
    "\1\0\1\57\1\0\7\57\1\272\15\57\64\0\1\73"+
    "\14\0\1\77\1\0\5\77\2\0\1\77\1\0\44\77"+
    "\1\0\3\77\1\0\1\100\73\0\1\103\50\0\1\104"+
    "\1\0\5\104\1\0\2\104\1\0\50\104\1\105\1\0"+
    "\5\105\2\0\46\105\1\0\3\105\1\0\1\106\73\0"+
    "\1\114\54\0\1\273\1\0\1\273\5\0\1\273\1\0"+
    "\1\273\1\0\25\273\22\0\1\274\1\0\1\274\5\0"+
    "\1\274\1\0\1\274\1\0\25\274\7\0\1\275\6\0"+
    "\1\124\1\0\62\124\1\125\61\124\1\0\1\130\73\0"+
    "\1\132\50\0\1\124\1\133\61\124\12\0\1\136\51\0"+
    "\1\137\135\0\1\276\6\0\1\124\1\142\62\124\1\144"+
    "\61\124\12\0\1\147\50\0\1\150\1\0\62\150\1\151"+
    "\62\150\1\0\10\150\1\153\50\150\4\0\1\155\1\277"+
    "\6\0\1\155\1\0\1\155\1\0\25\155\17\0\1\154"+
    "\127\0\1\300\62\0\1\301\20\0\1\171\1\302\6\0"+
    "\1\171\1\0\1\171\1\0\25\171\1\0\1\301\26\0"+
    "\1\170\54\0\1\171\1\302\6\0\1\171\1\0\1\171"+
    "\1\0\25\171\16\0\1\203\1\0\62\203\1\204\61\203"+
    "\1\0\1\206\135\0\1\303\6\0\1\213\1\0\3\213"+
    "\1\0\1\213\1\0\53\213\1\0\1\204\62\0\1\216"+
    "\140\0\1\130\13\0\1\130\53\0\1\223\61\0\1\124"+
    "\1\225\61\124\12\0\1\230\50\0\1\304\1\0\5\304"+
    "\1\0\2\304\1\0\50\304\1\0\1\234\73\0\1\305"+
    "\14\0\1\306\67\0\1\307\41\0\4\241\1\0\25\241"+
    "\31\0\4\244\1\0\25\244\66\0\1\310\16\0\1\57"+
    "\7\0\1\57\1\0\1\57\1\0\25\57\22\0\1\311"+
    "\62\0\1\57\1\253\6\0\1\57\1\0\1\57\1\0"+
    "\2\57\1\312\22\57\22\0\1\57\1\253\6\0\1\57"+
    "\1\0\1\57\1\0\10\57\1\313\14\57\22\0\1\57"+
    "\1\253\6\0\1\57\1\0\1\57\1\0\12\57\1\314"+
    "\12\57\22\0\1\57\1\253\6\0\1\57\1\0\1\57"+
    "\1\0\12\57\1\315\12\57\22\0\1\57\1\253\6\0"+
    "\1\57\1\0\1\57\1\0\2\57\1\316\22\57\22\0"+
    "\1\57\1\253\6\0\1\57\1\0\1\57\1\0\3\57"+
    "\1\317\21\57\22\0\1\57\1\253\6\0\1\57\1\0"+
    "\1\57\1\0\2\57\1\320\22\57\22\0\1\57\1\253"+
    "\6\0\1\57\1\0\1\57\1\0\17\57\1\321\5\57"+
    "\22\0\1\57\1\253\6\0\1\57\1\0\1\57\1\0"+
    "\11\57\1\322\13\57\22\0\1\57\1\253\6\0\1\57"+
    "\1\0\1\57\1\0\6\57\1\323\1\324\15\57\22\0"+
    "\1\57\1\253\6\0\1\57\1\0\1\57\1\0\1\57"+
    "\1\325\23\57\22\0\1\57\1\253\6\0\1\57\1\0"+
    "\1\57\1\0\23\57\1\326\1\57\22\0\1\274\1\0"+
    "\1\274\5\0\1\274\1\0\1\274\1\0\25\274\22\0"+
    "\1\155\7\0\1\155\1\0\1\155\1\0\25\155\22\0"+
    "\1\171\7\0\1\171\1\0\1\171\1\0\25\171\17\0"+
    "\1\327\5\0\1\330\2\0\1\331\120\0\1\332\16\0"+
    "\1\57\1\253\6\0\1\57\1\0\1\57\1\0\3\57"+
    "\1\333\21\57\22\0\1\57\1\253\6\0\1\57\1\0"+
    "\1\57\1\0\15\57\1\334\7\57\22\0\1\57\1\253"+
    "\6\0\1\57\1\0\1\57\1\0\6\57\1\335\16\57"+
    "\22\0\1\57\1\253\6\0\1\57\1\0\1\57\1\0"+
    "\6\57\1\336\16\57\22\0\1\57\1\253\6\0\1\57"+
    "\1\0\1\57\1\0\16\57\1\337\6\57\22\0\1\57"+
    "\1\253\6\0\1\57\1\0\1\57\1\0\6\57\1\340"+
    "\16\57\22\0\1\57\1\253\6\0\1\57\1\0\1\57"+
    "\1\0\11\57\1\341\13\57\22\0\1\57\1\253\6\0"+
    "\1\57\1\0\1\57\1\0\6\57\1\342\16\57\22\0"+
    "\1\57\1\253\6\0\1\57\1\0\1\57\1\0\14\57"+
    "\1\343\10\57\22\0\1\57\1\253\6\0\1\57\1\0"+
    "\1\57\1\0\11\57\1\344\13\57\22\0\1\57\1\253"+
    "\6\0\1\57\1\0\1\57\1\0\2\57\1\345\22\57"+
    "\22\0\1\57\1\253\6\0\1\57\1\0\1\57\1\0"+
    "\7\57\1\346\15\57\17\0\1\327\73\0\1\331\54\0"+
    "\1\57\1\253\6\0\1\57\1\0\1\57\1\0\4\57"+
    "\1\347\20\57\22\0\1\57\1\253\6\0\1\57\1\0"+
    "\1\57\1\0\13\57\1\350\11\57\22\0\1\57\1\253"+
    "\6\0\1\57\1\0\1\57\1\0\14\57\1\351\10\57"+
    "\22\0\1\57\1\253\6\0\1\57\1\0\1\57\1\0"+
    "\13\57\1\352\11\57\22\0\1\57\1\253\6\0\1\57"+
    "\1\0\1\57\1\0\12\57\1\353\12\57\22\0\1\57"+
    "\1\253\6\0\1\57\1\0\1\57\1\0\6\57\1\354"+
    "\16\57\22\0\1\57\1\253\6\0\1\57\1\0\1\57"+
    "\1\0\22\57\1\355\2\57\22\0\1\57\1\253\6\0"+
    "\1\57\1\0\1\57\1\0\14\57\1\356\10\57\22\0"+
    "\1\57\1\253\6\0\1\57\1\0\1\57\1\0\5\57"+
    "\1\357\17\57\22\0\1\57\1\253\6\0\1\57\1\0"+
    "\1\57\1\0\11\57\1\360\13\57\22\0\1\57\1\253"+
    "\6\0\1\57\1\0\1\57\1\0\1\361\24\57\22\0"+
    "\1\57\1\253\6\0\1\57\1\0\1\57\1\0\1\362"+
    "\24\57\22\0\1\57\1\253\6\0\1\57\1\0\1\57"+
    "\1\0\12\57\1\363\12\57\22\0\1\57\1\253\6\0"+
    "\1\57\1\0\1\57\1\0\6\57\1\364\16\57\22\0"+
    "\1\57\1\253\6\0\1\57\1\0\1\57\1\0\3\57"+
    "\1\365\21\57\22\0\1\57\1\253\6\0\1\57\1\0"+
    "\1\57\1\0\12\57\1\366\12\57\22\0\1\57\1\253"+
    "\6\0\1\57\1\0\1\57\1\0\6\57\1\367\16\57"+
    "\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7803];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\1\1\0\1\1\2\0\2\1\1\0\1\1"+
    "\12\0\1\1\11\0\4\11\17\1\2\11\1\1\2\11"+
    "\1\1\1\11\1\1\1\11\3\1\1\11\1\1\4\11"+
    "\1\1\1\11\3\1\3\11\1\1\1\11\1\1\2\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\11\2\1\1\11"+
    "\2\1\1\11\1\1\4\11\2\1\1\11\2\1\11\11"+
    "\1\1\1\11\1\1\1\11\2\1\2\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\2\11\1\1\1\11"+
    "\3\1\2\11\2\1\5\11\1\0\21\1\2\11\1\0"+
    "\2\11\1\0\1\11\1\1\4\0\1\11\15\1\1\11"+
    "\2\1\1\11\35\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private LexerInput input;
    private boolean canFollowTag = false;
    int parenBalance = 1;
    int braceBalance = 0;
    int bracketBalance = 0;
    int indent = 0;
    int eolPosition = 0;
    boolean dotAfterTag = false;
    int blockIndent = -1;
    boolean hasCssId = false;
    int lastReaded = 0;
    boolean continueJS = false;
    boolean inString = false;
    

    public JadeColoringLexer(LexerRestartInfo info) {
        this.input = info.input();

        if(info.state() != null) {
            //reset state
            setState((LexerState)info.state());
        } else {
            //initial state
            zzState = zzLexicalState = YYINITIAL;
        }
    }


    public LexerState getState() {
        if (zzState == YYINITIAL && zzLexicalState == YYINITIAL) {
            return null;
        }
        return new LexerState(zzState, zzLexicalState, canFollowTag, indent, hasCssId);
    }

    public void setState(LexerState state) {
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
        this.canFollowTag = state.canFollowTag;
        this.indent = state.indent;
        this.hasCssId = state.hasCssId;
    }

    public JadeTokenId nextToken() throws java.io.IOException {
        JadeTokenId token = yylex();
        return token;
    }

    public static final class LexerState  {
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;
        final boolean canFollowTag;
        /** indent of the new line */
        final int indent;
        final boolean hasCssId;

        LexerState (int zzState, int zzLexicalState, boolean canFollowTag, int indent, boolean hasCssId) {
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.canFollowTag = canFollowTag;
            this.indent = indent;
            this.hasCssId = hasCssId;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final LexerState other = (LexerState) obj;
            if (this.zzState != other.zzState) {
                return false;
            }
            if (this.zzLexicalState != other.zzLexicalState) {
                return false;
            }
            if (this.canFollowTag != other.canFollowTag) {
                return false;
            }
            if (this.hasCssId != other.hasCssId) {
                return false;
            }
            if (this.indent != other.indent) {
                return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            int hash = 7;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            hash = 31 * hash + (this.canFollowTag ? 0 : 1);
            hash = 31 * hash + (this.hasCssId ? 0 : 1);
            hash = 31 * hash + this.indent;
            return hash;
        }

        @Override
        public String toString() {
            return "LexerState{" + "zzState=" + zzState + ", zzLexicalState=" + zzLexicalState + '}';
        }
    }

 // End user code
    boolean checkEndJS(int tokenLength, char ch) {
        if (!continueJS 
                && ((ch == ')' && parenBalance == 0) 
                || (ch != ')' && parenBalance == 1))
                && braceBalance == 0 && bracketBalance == 0) {
            if (lastReaded > 0 && ((tokenLength - lastReaded) > 0)) {
                yypushback(tokenLength - lastReaded);
                yybegin(HTML_ATTRIBUTE);
                return true;
            }
        } 
        lastReaded = tokenLength;
        continueJS = false;
        
        return false;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JadeColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JadeColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2288) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JadeTokenId yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzMarkedPosL;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      int tokenLength = 0;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          zzInput = input.read();
         if(zzInput == LexerInput.EOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
          input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 46: 
          { parenBalance = 1;
                                        lastReaded = bracketBalance = braceBalance = 0;
                                        yypushback(1);
                                        yybegin(JAVASCRIPT_VALUE);
          }
        case 112: break;
        case 56: 
          { braceBalance++; lastReaded = tokenLength;
          }
        case 113: break;
        case 90: 
          { if (!hasCssId) {
                                            hasCssId = true;
                                            return JadeTokenId.CSS_ID;
                                        } else {
                                            // only one css id is allowed in tag
                                            return JadeTokenId.UNKNOWN;
                                        }
          }
        case 114: break;
        case 105: 
          { yybegin(AFTER_TAG);
                                        return JadeTokenId.KEYWORD_BLOCK;
          }
        case 115: break;
        case 31: 
          { int indentInComment = tokenLength - eolPosition;
                                        if (indent >= indentInComment) {
                                            yypushback(indentInComment + 1);  // return back also the EOL
                                            yybegin(AFTER_EOL);
                                            return JadeTokenId.COMMENT;
                                        }
                                        yybegin(IN_COMMENT);
          }
        case 116: break;
        case 67: 
          { continueJS = false;
                                        lastReaded = tokenLength;
                                        yybegin(JAVASCRIPT_VALUE);
          }
        case 117: break;
        case 73: 
          { yypushback(1);
                                        yybegin(JAVASCRIPT_AFTER_EACH);
          }
        case 118: break;
        case 18: 
          { yypushback(1);
                                        yybegin(DOCTYPE);
                                        if (tokenLength > 0) {
                                            return JadeTokenId.UNKNOWN;
                                        }
          }
        case 119: break;
        case 95: 
          { return JadeTokenId.FILTER;
          }
        case 120: break;
        case 4: 
          { return JadeTokenId.UNKNOWN;
          }
        case 121: break;
        case 48: 
          { continueJS = true; lastReaded = tokenLength;
          }
        case 122: break;
        case 34: 
          { int indentInComment = tokenLength - eolPosition;
                                        if (indent >= indentInComment) {
                                            yypushback(indentInComment);
                                            yybegin(AFTER_EOL);
                                            return JadeTokenId.UNBUFFERED_COMMENT;
                                        }
                                        yybegin(IN_UNBUFFERED_COMMENT);
          }
        case 123: break;
        case 26: 
          { yybegin(HTML_ATTRIBUTE);
                                        return JadeTokenId.BRACKET_RIGHT_PAREN;
          }
        case 124: break;
        case 9: 
          { yybegin(AFTER_TAG);
                                        dotAfterTag = true;
                                        hasCssId = false;
                                        return JadeTokenId.TAG ;
          }
        case 125: break;
        case 97: 
          { yybegin(AFTER_EACH);
                                        return JadeTokenId.KEYWORD_FOR;
          }
        case 126: break;
        case 92: 
          { yypushback(2);
                                        yybegin(JAVASCRIPT_EXPRESSION);
                                        if (tokenLength > 2) {
                                            return JadeTokenId.TEXT;
                                        }
          }
        case 127: break;
        case 43: 
          { yybegin(HTML_ATTRIBUTE_VALUE);
                                        return JadeTokenId.OPERATOR_ASSIGNMENT;
          }
        case 128: break;
        case 107: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.KEYWORD_UNLESS;
          }
        case 129: break;
        case 24: 
          { return JadeTokenId.OPERATOR_DIVISION;
          }
        case 130: break;
        case 8: 
          { indent = tokenLength;
                                        return JadeTokenId.WHITESPACE;
          }
        case 131: break;
        case 13: 
          { return JadeTokenId.DOCTYPE_ATTRIBUTE;
          }
        case 132: break;
        case 47: 
          { lastReaded = tokenLength; continueJS = false;
          }
        case 133: break;
        case 2: 
          { // the  text will not be renedered
                                        return JadeTokenId.UNKNOWN;
          }
        case 134: break;
        case 41: 
          { return JadeTokenId.EOL;
          }
        case 135: break;
        case 58: 
          { bracketBalance--; lastReaded = tokenLength;
          }
        case 136: break;
        case 85: 
          { yybegin (IN_FILTER_BLOCK);
                                        blockIndent = -1;
                                        return JadeTokenId.FILTER;
          }
        case 137: break;
        case 98: 
          { int delta = tokenLength - lastReaded;
                                        if (delta > 0) {
                                            yypushback(delta);
                                            yybegin(AFTER_EOL);
                                            return JadeTokenId.JAVASCRIPT;
                                        }
                                        yypushback(tokenLength);
                                        yybegin(AFTER_EOL);
          }
        case 138: break;
        case 52: 
          { bracketBalance++; lastReaded = tokenLength;
          }
        case 139: break;
        case 23: 
          { yybegin(TEXT_LINE);
                                        return JadeTokenId.WHITESPACE;
          }
        case 140: break;
        case 50: 
          { if (zzInput == ')') parenBalance--;
                                        if (checkEndJS(tokenLength, (char)zzInput)) {
                                            return JadeTokenId.JAVASCRIPT; 
                                        }
                                        if (zzInput == ')') parenBalance++;  // ned to return back
          }
        case 141: break;
        case 74: 
          { yybegin(AFTER_EOL);
                                        return JadeTokenId.EOL;
          }
        case 142: break;
        case 22: 
          { yybegin(AFTER_COLON_IN_TAG);
                                        return JadeTokenId.OPERATOR_COLON;
          }
        case 143: break;
        case 25: 
          { yybegin(AFTER_PLAIN_TEXT_BLOCK_DELIMITER);
                                        return JadeTokenId.PLAIN_TEXT_DELIMITER;
          }
        case 144: break;
        case 76: 
          { return JadeTokenId.MIXIN_NAME;
          }
        case 145: break;
        case 94: 
          { braceBalance = 1; return JadeTokenId.EXPRESSION_DELIMITER_OPEN;
          }
        case 146: break;
        case 91: 
          { yypushback(2);
                                        yybegin(JAVASCRIPT_EXPRESSION);
          }
        case 147: break;
        case 37: 
          { yybegin(IN_PLAIN_TEXT_BLOCK_AFTER_EOL);
                                        eolPosition = tokenLength;
          }
        case 148: break;
        case 81: 
          { yybegin(MIXIN_CALL_ARGUMENT);
                                        return JadeTokenId.BRACKET_LEFT_PAREN;
          }
        case 149: break;
        case 80: 
          { return JadeTokenId.BRACKET_RIGHT_PAREN;
          }
        case 150: break;
        case 28: 
          { yypushback(1);
                                        yybegin(JAVASCRIPT_WITH_BLOCK_EXPANSION);
          }
        case 151: break;
        case 6: 
          { yybegin(IN_PLAIN_TEXT_LINE);
          }
        case 152: break;
        case 49: 
          { yybegin(JS_STRING);
          }
        case 153: break;
        case 33: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        return JadeTokenId.UNBUFFERED_COMMENT;
          }
        case 154: break;
        case 93: 
          { yybegin(HTML_ATTRIBUTE_VALUE);
                                        return JadeTokenId.OPERATOR_NOT_EQUALS;
          }
        case 155: break;
        case 39: 
          { int currentIndent = tokenLength - eolPosition;
                                        if (currentIndent <= indent) {
                                            // the block has to have one more space than the tag
                                            yybegin(AFTER_EOL);
                                            indent = currentIndent;
                                            return JadeTokenId.WHITESPACE;
                                        }
                                        if (blockIndent < 0) {
                                            blockIndent = currentIndent;
                                        }
                                        if (blockIndent > currentIndent) {
                                            yypushback(currentIndent);
                                            yybegin(AFTER_EOL);
                                            return JadeTokenId.PLAIN_TEXT;
                                        }
                                        yybegin(IN_PLAIN_TEXT_BLOCK);
          }
        case 156: break;
        case 7: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.CODE_DELIMITER;
          }
        case 157: break;
        case 111: 
          { yybegin(AFTER_INCLUDE);
                                        return JadeTokenId.KEYWORD_INCLUDE;
          }
        case 158: break;
        case 11: 
          { hasCssId = false;
                                        yypushback(1);
                                        yybegin(AFTER_TAG);
          }
        case 159: break;
        case 70: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        if (tokenLength - 1 > 0) { 
                                            return JadeTokenId.FILTER_TEXT;
                                        }
          }
        case 160: break;
        case 63: 
          { braceBalance++;
          }
        case 161: break;
        case 78: 
          { // expect declaration of parameters
                                        return JadeTokenId.UNKNOWN;
          }
        case 162: break;
        case 15: 
          { yybegin(DOCTYPE_STRING);
                                        return JadeTokenId.DOCTYPE_STRING_START;
          }
        case 163: break;
        case 66: 
          { yypushback(1);
                                     yybegin(AFTER_EOL);
                                     if (tokenLength -1 > 0) {
                                         return JadeTokenId.UNKNOWN;
                                     }
          }
        case 164: break;
        case 55: 
          { yybegin(JS_SSTRING);
          }
        case 165: break;
        case 59: 
          { switch (zzInput) {
            case '(': parenBalance++; break;
            case '{': braceBalance++; break;
            case '}': braceBalance--; break; 
            case ')':
                parenBalance--;
                break;    
            case ',':
            case '\r':
            case '\n':
                if (parenBalance == 1 && braceBalance == 0) {
                    parenBalance = 0;
                }
                break;
        }
        if (parenBalance == 0 && braceBalance == 0) {
            yypushback(1);
            yybegin(HTML_ATTRIBUTE);
            parenBalance = 1;
            return JadeTokenId.JAVASCRIPT;
        }
          }
        case 166: break;
        case 65: 
          { yypushback(1);
                                        yybegin(AFTER_TAG);
          }
        case 167: break;
        case 101: 
          { return JadeTokenId.KEYWORD_ELSE;
          }
        case 168: break;
        case 29: 
          { yybegin(IN_COMMENT_AFTER_EOL);
                                        eolPosition = tokenLength;
          }
        case 169: break;
        case 109: 
          { yybegin(AFTER_TAG); // handling : after the keyword
                                        return JadeTokenId.KEYWORD_DEFAULT;
          }
        case 170: break;
        case 75: 
          { lastReaded = tokenLength;
          }
        case 171: break;
        case 72: 
          { yypushback(1); yybegin(FILEPATH);
          }
        case 172: break;
        case 68: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        if (tokenLength - 1 > 0) {
                                            return JadeTokenId.FILE_PATH;
                                        }
          }
        case 173: break;
        case 53: 
          { if (checkEndJS(tokenLength, (char)zzInput)) {
                                            return JadeTokenId.JAVASCRIPT; 
                                        }
          }
        case 174: break;
        case 71: 
          { int indentInBlock = tokenLength - eolPosition;
                                        if (blockIndent < 0) {
                                            blockIndent = indentInBlock;
                                        }
                                        if (blockIndent > indentInBlock) {
                                            yypushback(indentInBlock);
                                            yybegin(AFTER_EOL);
                                            return JadeTokenId.FILTER_TEXT;
                                        }
                                        yybegin(IN_FILTER_BLOCK);
          }
        case 175: break;
        case 20: 
          { yybegin(DOCTYPE);
                                        return JadeTokenId.DOCTYPE_STRING_END;
          }
        case 176: break;
        case 14: 
          { yybegin(AFTER_EOL);
                                        indent = 0;
                                        if (tokenLength > 0) {
                                            return JadeTokenId.EOL;
                                        }
          }
        case 177: break;
        case 16: 
          { return JadeTokenId.WHITESPACE;
          }
        case 178: break;
        case 36: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        if (tokenLength - 1 > 0 ) {
                                            return JadeTokenId.PLAIN_TEXT;
                                        }
          }
        case 179: break;
        case 12: 
          { yybegin(IN_PLAIN_TEXT_LINE);
                                        return JadeTokenId.PLAIN_TEXT_DELIMITER;
          }
        case 180: break;
        case 102: 
          { yybegin(AFTER_EACH);
                                        return JadeTokenId.KEYWORD_EACH;
          }
        case 181: break;
        case 5: 
          { indent = 0; 
                                        return JadeTokenId.EOL;
          }
        case 182: break;
        case 54: 
          { parenBalance--; 
                                        
                                        if (checkEndJS(tokenLength, (char)zzInput)) {
                                            return JadeTokenId.JAVASCRIPT; 
                                        }
          }
        case 183: break;
        case 77: 
          { yybegin(MIXIN_ARGUMENTS); 
                                        return JadeTokenId.BRACKET_LEFT_PAREN;
          }
        case 184: break;
        case 17: 
          { yybegin(DOCTYPE);
                                      return JadeTokenId.DOCTYPE_TEMPLATE;
          }
        case 185: break;
        case 61: 
          { yybegin(AFTER_EOL);
                                        indent = 0;
                                        return JadeTokenId.EOL;
          }
        case 186: break;
        case 88: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.KEYWORD_IN;
          }
        case 187: break;
        case 100: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.KEYWORD_CASE;
          }
        case 188: break;
        case 106: 
          { yybegin(AFTER_MIXIN);
                                        return JadeTokenId.KEYWORD_MIXIN;
          }
        case 189: break;
        case 96: 
          { yybegin(IN_UNBUFFERED_COMMENT);
                                        return JadeTokenId.UNBUFFERED_COMMENT_DELIMITER;
          }
        case 190: break;
        case 45: 
          { yybegin(AFTER_TAG);
                                        return JadeTokenId.BRACKET_RIGHT_PAREN;
          }
        case 191: break;
        case 82: 
          { yybegin(MIXIN_CALL_ARGUMENT);
                                        return JadeTokenId.OPERATOR_COMMA;
          }
        case 192: break;
        case 21: 
          { // we expect = != / or Css Id or Css class
                                        return JadeTokenId.UNKNOWN;
          }
        case 193: break;
        case 69: 
          { yybegin(IN_FILTER_BLOCK_AFTER_EOL);
                                        eolPosition = tokenLength;
          }
        case 194: break;
        case 42: 
          { return JadeTokenId.ATTRIBUTE;
          }
        case 195: break;
        case 32: 
          { yybegin(IN_UNBUFFERED_COMMENT_AFTER_EOL);
                                        eolPosition = tokenLength;
          }
        case 196: break;
        case 35: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        indent = 0;
                                        
                                        if (tokenLength -1 > 0) {
                                            return JadeTokenId.TEXT;
                                        }
          }
        case 197: break;
        case 38: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        indent = 0;
                                        return JadeTokenId.PLAIN_TEXT;
          }
        case 198: break;
        case 110: 
          { yybegin(FILEPATH);
                                        return JadeTokenId.KEYWORD_EXTENDS;
          }
        case 199: break;
        case 84: 
          { switch (zzInput) {
            case '(': parenBalance++; break;
            case '{': braceBalance++; break;
            case '}': braceBalance--; break; 
            case ')':
                parenBalance--;
                break;    
            case ',':
                if (parenBalance == 1 && braceBalance == 0) {
                    parenBalance = 0;
                }
                break;
        }
        if (parenBalance == 0 && braceBalance == 0) {
            yypushback(1);
            yybegin(AFTER_PLUS_MIXIN);
            parenBalance = 1;
            return JadeTokenId.JAVASCRIPT;
        }
          }
        case 200: break;
        case 40: 
          { blockIndent = -1;
                                        eolPosition = 0;
                                        yybegin(IN_PLAIN_TEXT_BLOCK_AFTER_EOL);
                                        return JadeTokenId.EOL;
          }
        case 201: break;
        case 86: 
          { yybegin(IN_COMMENT); 
                                        return JadeTokenId.COMMENT_DELIMITER;
          }
        case 202: break;
        case 27: 
          { yypushback(1);
                                        yybegin(JAVASCRIPT_LINE);
          }
        case 203: break;
        case 99: 
          { return JadeTokenId.OPERATOR_REST_ARGUMENTS;
          }
        case 204: break;
        case 30: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        return JadeTokenId.COMMENT;
          }
        case 205: break;
        case 108: 
          { yybegin(AFTER_DOCTYPE);
                                        return JadeTokenId.DOCTYPE;
          }
        case 206: break;
        case 64: 
          { braceBalance--;
                                        if (braceBalance == 0) {
                                            yypushback(1);
                                            return JadeTokenId.JAVASCRIPT;
                                        } else if (braceBalance == -1) {
                                            yybegin(TEXT_LINE);
                                            return JadeTokenId.EXPRESSION_DELIMITER_CLOSE; 
                                        }
          }
        case 207: break;
        case 62: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        if (tokenLength - 1 > 0) {
                                            return JadeTokenId.JAVASCRIPT;
                                        }
          }
        case 208: break;
        case 57: 
          { braceBalance--; lastReaded = tokenLength;
          }
        case 209: break;
        case 3: 
          { yypushback(1);
            indent = 0;
            yybegin(AFTER_EOL);
          }
        case 210: break;
        case 10: 
          { yybegin(AFTER_PLUS_MIXIN);
                                        return JadeTokenId.OPERATOR_PLUS;
          }
        case 211: break;
        case 83: 
          { yybegin(IN_PLAIN_TEXT_LINE);
                                        return JadeTokenId.BRACKET_LEFT_PAREN;
          }
        case 212: break;
        case 44: 
          { return JadeTokenId.OPERATOR_COMMA;
          }
        case 213: break;
        case 103: 
          { yybegin(AFTER_CODE_DELIMITER_WITH_BLOCK_EXPANSION);
                                        return JadeTokenId.KEYWORD_WHEN;
          }
        case 214: break;
        case 79: 
          { return JadeTokenId.IDENTIFIER;
          }
        case 215: break;
        case 104: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.KEYWORD_WHILE;
          }
        case 216: break;
        case 51: 
          { parenBalance++; lastReaded = tokenLength;
          }
        case 217: break;
        case 60: 
          { return JadeTokenId.JAVASCRIPT;
          }
        case 218: break;
        case 87: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.KEYWORD_IF;
          }
        case 219: break;
        case 19: 
          { yypushback(1);
                                        yybegin(DOCTYPE_STRING_END);
                                        return JadeTokenId.DOCTYPE_STRING_END;
          }
        case 220: break;
        case 89: 
          { return JadeTokenId.CSS_CLASS;
          }
        case 221: break;
        case 1: 
          { 
          }
        case 222: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case IN_PLAIN_TEXT_BLOCK_AFTER_EOL: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.PLAIN_TEXT;
    } else {
        return null;
    }
            }
            case 248: break;
            case IN_COMMENT_AFTER_EOL: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.COMMENT;
    } else {
        return null;
    }
            }
            case 249: break;
            case IN_FILTER_BLOCK: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.FILTER_TEXT;
    } else {
        return null;
    }
            }
            case 250: break;
            case IN_UNBUFFERED_COMMENT: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.UNBUFFERED_COMMENT;
    } else {
        return null;
    }
            }
            case 251: break;
            case IN_UNBUFFERED_COMMENT_AFTER_EOL: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.UNBUFFERED_COMMENT;
    } else {
        return null;
    }
            }
            case 252: break;
            case IN_FILTER_BLOCK_AFTER_EOL: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.FILTER_TEXT;
    } else {
        return null;
    }
            }
            case 253: break;
            case IN_PLAIN_TEXT_BLOCK: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.PLAIN_TEXT;
    } else {
        return null;
    }
            }
            case 254: break;
            case IN_COMMENT: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.COMMENT;
    } else {
        return null;
    }
            }
            case 255: break;
            default:
              {
                if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.UNKNOWN;
    } else {
        return null;
    }
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
