/* The following code was generated by JFlex 1.4.3 on 2/26/15 4:20 PM */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development and
 * Distribution License("CDDL") (collectively, the "License"). You may not use
 * this file except in compliance with the License. You can obtain a copy of
 * the License at http://www.netbeans.org/cddl-gplv2.html or
 * nbbuild/licenses/CDDL-GPL-2-CP. See the License for the specific language
 * governing permissions and limitations under the License. When distributing
 * the software, include this License Header Notice in each file and include
 * the License file at nbbuild/licenses/CDDL-GPL-2-CP. Oracle designates this
 * particular file as subject to the "Classpath" exception as provided by
 * Oracle in the GPL Version 2 section of the License file that accompanied
 * this code. If applicable, add the following below the License Header, with
 * the fields enclosed by brackets [] replaced by your own identifying
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license." If you do not indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to its
 * licensees as provided above. However, if you add GPL Version 2 code and
 * therefore, elected the GPL Version 2 license, then the option applies only
 * if the new code is made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */

package org.netbeans.modules.javascript2.jade.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/26/15 4:20 PM from the specification file
 * <tt>/home/petr/mercurial/web-main/javascript2.jade/tools/JadeColoringScanner.flex</tt>
 */
public final class JadeColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int AFTER_CODE_DELIMITER = 14;
  public static final int IN_PLAIN_TEXT_BLOCK_AFTER_EOL = 32;
  public static final int JS_STRING = 52;
  public static final int JAVASCRIPT_WITH_BLOCK_EXPANSION = 48;
  public static final int IN_PLAIN_TEXT_LINE = 28;
  public static final int AFTER_CODE_DELIMITER_WITH_BLOCK_EXPANSION = 16;
  public static final int FILEPATH = 54;
  public static final int JAVASCRIPT_AFTER_EACH = 66;
  public static final int JS_SSTRING = 50;
  public static final int AFTER_INCLUDE = 60;
  public static final int MIXIN_ARGUMENTS = 70;
  public static final int IN_COMMENT_AFTER_EOL = 20;
  public static final int IN_FILTER_BLOCK = 56;
  public static final int MIXIN_CALL_ARGUMENT = 74;
  public static final int TEXT_LINE = 26;
  public static final int YYINITIAL = 0;
  public static final int AFTER_PLAIN_TEXT_BLOCK_DELIMITER = 34;
  public static final int AFTER_MIXIN = 68;
  public static final int IN_UNBUFFERED_COMMENT = 22;
  public static final int AFTER_PLUS_MIXIN = 72;
  public static final int AFTER_EACH = 64;
  public static final int AFTER_DOCTYPE = 6;
  public static final int IN_UNBUFFERED_COMMENT_AFTER_EOL = 24;
  public static final int JAVASCRIPT_VALUE = 40;
  public static final int JAVASCRIPT = 42;
  public static final int HTML_ATTRIBUTE = 36;
  public static final int DOCTYPE_STRING_END = 10;
  public static final int DOCTYPE_STRING = 8;
  public static final int IN_FILTER_BLOCK_AFTER_EOL = 58;
  public static final int JAVASCRIPT_EXPRESSION = 46;
  public static final int AFTER_TAG = 12;
  public static final int JAVASCRIPT_LINE = 44;
  public static final int IN_PLAIN_TEXT_BLOCK = 30;
  public static final int HTML_ATTRIBUTE_VALUE = 38;
  public static final int DOCTYPE = 4;
  public static final int AFTER_EOL = 2;
  public static final int IN_COMMENT = 18;
  public static final int AFTER_COLON_IN_TAG = 62;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 
    32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\24\1\6\1\1\1\22\1\6\1\5\16\24\4\0\1\10\1\106"+
    "\1\21\1\112\1\26\1\15\1\111\1\117\1\113\1\116\1\15\1\104"+
    "\1\115\1\13\1\107\1\32\12\2\1\20\1\7\1\14\1\105\1\7"+
    "\2\7\1\66\1\75\1\40\1\34\1\50\1\54\1\27\1\70\1\52"+
    "\1\27\1\77\1\56\1\103\1\64\1\36\1\46\1\27\1\72\1\60"+
    "\1\42\1\62\1\27\1\74\1\101\1\44\1\27\1\120\1\4\1\121"+
    "\1\7\1\12\1\7\1\65\1\11\1\37\1\33\1\47\1\53\1\17"+
    "\1\67\1\51\1\17\1\76\1\55\1\102\1\63\1\35\1\45\1\17"+
    "\1\71\1\57\1\41\1\61\1\17\1\73\1\100\1\43\1\17\1\114"+
    "\1\110\1\122\1\7\1\24\40\25\1\23\1\3\4\12\4\3\1\17"+
    "\2\3\1\25\7\3\1\17\4\3\1\17\5\3\27\17\1\3\37\17"+
    "\1\3\10\17\u01c2\30\4\0\14\30\16\0\5\30\7\0\1\30\1\0"+
    "\1\30\21\0\160\24\5\30\1\0\2\30\2\0\4\30\10\0\1\30"+
    "\1\0\3\30\1\0\1\30\1\0\24\30\1\0\123\30\1\0\213\30"+
    "\1\0\5\24\2\0\236\30\11\0\46\30\2\0\1\30\7\0\47\30"+
    "\11\0\55\24\1\0\1\24\1\0\2\24\1\0\2\24\1\0\1\24"+
    "\10\0\33\30\5\0\3\30\15\0\4\24\7\0\1\31\4\0\13\24"+
    "\5\0\53\30\25\24\12\16\4\0\2\30\1\24\143\30\1\0\1\30"+
    "\10\24\1\0\6\24\2\30\2\24\1\0\4\24\2\30\12\16\3\30"+
    "\2\0\1\30\17\0\1\24\1\30\1\24\36\30\33\24\2\0\131\30"+
    "\13\24\1\30\16\0\12\16\41\30\11\24\2\30\4\0\1\30\5\0"+
    "\26\30\4\24\1\30\11\24\1\30\3\24\1\30\5\24\22\0\31\30"+
    "\3\24\244\0\4\24\66\30\3\24\1\30\22\24\1\30\7\24\12\30"+
    "\2\24\2\0\12\16\1\0\7\30\1\0\7\30\1\0\3\24\1\0"+
    "\10\30\2\0\2\30\2\0\26\30\1\0\7\30\1\0\1\30\3\0"+
    "\4\30\2\0\1\24\1\30\7\24\2\0\2\24\2\0\3\24\1\30"+
    "\10\0\1\24\4\0\2\30\1\0\3\30\2\24\2\0\12\16\2\30"+
    "\2\31\7\0\1\31\5\0\3\24\1\0\6\30\4\0\2\30\2\0"+
    "\26\30\1\0\7\30\1\0\2\30\1\0\2\30\1\0\2\30\2\0"+
    "\1\24\1\0\5\24\4\0\2\24\2\0\3\24\3\0\1\24\7\0"+
    "\4\30\1\0\1\30\7\0\12\16\2\24\3\30\1\24\13\0\3\24"+
    "\1\0\11\30\1\0\3\30\1\0\26\30\1\0\7\30\1\0\2\30"+
    "\1\0\5\30\2\0\1\24\1\30\10\24\1\0\3\24\1\0\3\24"+
    "\2\0\1\30\17\0\2\30\2\24\2\0\12\16\1\0\1\31\17\0"+
    "\3\24\1\0\10\30\2\0\2\30\2\0\26\30\1\0\7\30\1\0"+
    "\2\30\1\0\5\30\2\0\1\24\1\30\7\24\2\0\2\24\2\0"+
    "\3\24\10\0\2\24\4\0\2\30\1\0\3\30\2\24\2\0\12\16"+
    "\1\0\1\30\20\0\1\24\1\30\1\0\6\30\3\0\3\30\1\0"+
    "\4\30\3\0\2\30\1\0\1\30\1\0\2\30\3\0\2\30\3\0"+
    "\3\30\3\0\14\30\4\0\5\24\3\0\3\24\1\0\4\24\2\0"+
    "\1\30\6\0\1\24\16\0\12\16\11\0\1\31\7\0\3\24\1\0"+
    "\10\30\1\0\3\30\1\0\27\30\1\0\12\30\1\0\5\30\3\0"+
    "\1\30\7\24\1\0\3\24\1\0\4\24\7\0\2\24\1\0\2\30"+
    "\6\0\2\30\2\24\2\0\12\16\22\0\2\24\1\0\10\30\1\0"+
    "\3\30\1\0\27\30\1\0\12\30\1\0\5\30\2\0\1\24\1\30"+
    "\7\24\1\0\3\24\1\0\4\24\7\0\2\24\7\0\1\30\1\0"+
    "\2\30\2\24\2\0\12\16\1\0\2\30\17\0\2\24\1\0\10\30"+
    "\1\0\3\30\1\0\51\30\2\0\1\30\7\24\1\0\3\24\1\0"+
    "\4\24\1\30\10\0\1\24\10\0\2\30\2\24\2\0\12\16\12\0"+
    "\6\30\2\0\2\24\1\0\22\30\3\0\30\30\1\0\11\30\1\0"+
    "\1\30\2\0\7\30\3\0\1\24\4\0\6\24\1\0\1\24\1\0"+
    "\10\24\22\0\2\24\15\0\60\30\1\24\2\30\7\24\4\0\1\31"+
    "\7\30\10\24\1\0\12\16\47\0\2\30\1\0\1\30\2\0\2\30"+
    "\1\0\1\30\2\0\1\30\6\0\4\30\1\0\7\30\1\0\3\30"+
    "\1\0\1\30\1\0\1\30\2\0\2\30\1\0\4\30\1\24\2\30"+
    "\6\24\1\0\2\24\1\30\2\0\5\30\1\0\1\30\1\0\6\24"+
    "\2\0\12\16\2\0\2\30\42\0\1\30\27\0\2\24\6\0\12\16"+
    "\13\0\1\24\1\0\1\24\1\0\1\24\4\0\2\24\10\30\1\0"+
    "\44\30\4\0\24\24\1\0\2\24\5\30\13\24\1\0\44\24\11\0"+
    "\1\24\71\0\53\30\24\24\1\30\12\16\6\0\6\30\4\24\4\30"+
    "\3\24\1\30\3\24\2\30\7\24\3\30\4\24\15\30\14\24\1\30"+
    "\1\24\12\16\4\24\2\0\46\30\12\0\53\30\1\0\1\30\3\0"+
    "\u0149\30\1\0\4\30\2\0\7\30\1\0\1\30\1\0\4\30\2\0"+
    "\51\30\1\0\4\30\2\0\41\30\1\0\4\30\2\0\7\30\1\0"+
    "\1\30\1\0\4\30\2\0\17\30\1\0\71\30\1\0\4\30\2\0"+
    "\103\30\2\0\3\24\40\0\20\30\20\0\125\30\14\0\u026c\30\2\0"+
    "\21\30\1\0\32\30\5\0\113\30\3\0\3\31\17\0\15\30\1\0"+
    "\4\30\3\24\13\0\22\30\3\24\13\0\22\30\2\24\14\0\15\30"+
    "\1\0\3\30\1\0\2\24\14\0\64\30\40\24\3\0\1\30\3\0"+
    "\1\31\1\30\1\24\2\0\12\16\41\0\3\24\2\0\12\16\6\0"+
    "\130\30\10\0\51\30\1\24\1\30\5\0\106\30\12\0\35\30\3\0"+
    "\14\24\4\0\14\24\12\0\12\16\36\30\2\0\5\30\13\0\54\30"+
    "\4\0\21\24\7\30\2\24\6\0\12\16\46\0\27\30\5\24\4\0"+
    "\65\30\12\24\1\0\35\24\2\0\1\24\12\16\6\0\12\16\15\0"+
    "\1\30\130\0\5\24\57\30\21\24\7\30\4\0\12\16\21\0\11\24"+
    "\14\0\3\24\36\30\12\24\3\0\2\30\12\16\6\0\46\30\16\24"+
    "\14\0\44\30\24\24\10\0\12\16\3\0\3\30\12\16\44\30\122\0"+
    "\3\24\1\0\25\24\4\30\1\24\4\30\1\24\15\0\300\30\47\24"+
    "\25\0\4\24\u0116\30\2\0\6\30\2\0\46\30\2\0\6\30\2\0"+
    "\10\30\1\0\1\30\1\0\1\30\1\0\1\30\1\0\37\30\2\0"+
    "\65\30\1\0\7\30\1\0\1\30\3\0\3\30\1\0\7\30\3\0"+
    "\4\30\2\0\6\30\4\0\15\30\5\0\3\30\1\0\7\30\16\0"+
    "\5\24\32\0\5\24\20\0\2\31\23\0\1\31\13\0\5\24\5\0"+
    "\6\24\1\0\1\30\15\0\1\30\20\0\15\30\3\0\32\31\26\0"+
    "\15\24\4\0\1\24\3\0\14\24\21\0\1\30\4\0\1\30\2\0"+
    "\12\30\1\0\1\30\3\0\5\30\6\0\1\30\1\0\1\30\1\0"+
    "\1\30\1\0\4\30\1\0\13\30\2\0\4\30\5\0\5\30\4\0"+
    "\1\30\21\0\43\31\2\30\4\31\u0a77\0\57\30\1\0\57\30\1\0"+
    "\205\30\6\0\4\30\3\24\16\0\46\30\12\0\66\30\11\0\1\30"+
    "\17\0\1\24\27\30\11\0\7\30\1\0\7\30\1\0\7\30\1\0"+
    "\7\30\1\0\7\30\1\0\7\30\1\0\7\30\1\0\7\30\1\0"+
    "\40\24\57\0\1\30\u01d5\0\2\30\1\31\31\0\11\31\6\24\1\0"+
    "\5\30\2\0\3\31\2\30\4\0\126\30\2\0\2\24\2\0\3\30"+
    "\1\0\132\30\1\0\4\30\5\0\51\30\3\0\136\30\21\0\33\30"+
    "\65\0\20\30\u0200\0\u19b6\30\112\0\u51cc\30\64\0\u048d\30\103\0\56\30"+
    "\2\0\u010d\30\3\0\20\30\12\16\2\30\24\0\57\30\1\24\14\0"+
    "\2\24\1\0\31\30\10\0\106\30\12\31\2\24\45\0\11\30\2\0"+
    "\147\30\2\0\4\30\1\0\2\30\16\0\12\30\120\0\10\30\1\24"+
    "\3\30\1\24\4\30\1\24\27\30\5\24\20\0\1\31\7\0\64\30"+
    "\14\0\2\24\62\30\21\24\13\0\12\16\6\0\22\24\6\30\3\0"+
    "\1\30\4\0\12\16\34\30\10\24\2\0\27\30\15\24\14\0\35\30"+
    "\3\0\4\24\57\30\16\24\16\0\1\30\12\16\46\0\51\30\16\24"+
    "\11\0\3\30\1\24\10\30\2\24\2\0\12\16\6\0\27\30\3\0"+
    "\1\30\1\24\4\0\60\30\1\24\1\30\3\24\2\30\2\24\5\30"+
    "\2\24\1\30\1\24\1\30\30\0\3\30\43\0\6\30\2\0\6\30"+
    "\2\0\6\30\11\0\7\30\1\0\7\30\221\0\43\30\10\24\1\0"+
    "\2\24\2\0\12\16\6\0\u2ba4\30\14\0\27\30\4\0\61\30\u2104\0"+
    "\u012e\30\2\0\76\30\2\0\152\30\46\0\7\30\14\0\5\30\5\0"+
    "\1\30\1\24\12\30\1\0\15\30\1\0\5\30\1\0\1\30\1\0"+
    "\2\30\1\0\2\30\1\0\154\30\41\0\u016b\30\22\0\100\30\2\0"+
    "\66\30\50\0\14\30\1\31\3\0\20\24\20\0\7\24\14\0\2\31"+
    "\30\0\3\31\31\0\1\31\6\0\5\30\1\0\207\30\2\0\1\24"+
    "\4\0\1\31\13\0\12\16\7\0\32\30\4\0\1\31\1\0\32\30"+
    "\13\0\131\30\3\0\6\30\2\0\6\30\2\0\6\30\2\0\3\30"+
    "\3\0\2\31\3\0\2\31\22\0\3\24\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\0\1\1\2\0\2\1\1\0\1\2"+
    "\12\0\1\1\11\0\1\3\1\4\1\5\1\6\1\5"+
    "\1\7\1\6\1\10\1\11\2\4\10\6\1\12\1\10"+
    "\1\4\1\13\1\14\1\15\2\16\1\17\1\20\1\21"+
    "\1\1\2\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\25\1\31\1\25\1\32\1\33\1\34\1\1\1\35"+
    "\1\1\1\36\2\1\1\37\1\40\1\1\1\41\1\42"+
    "\2\43\1\1\1\44\1\1\1\45\1\1\1\46\1\47"+
    "\1\2\1\50\1\2\1\17\1\51\1\52\1\51\1\53"+
    "\1\4\1\54\1\55\1\56\1\57\1\60\1\1\2\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\74\2\76\1\1\1\77"+
    "\1\100\1\74\1\75\1\101\1\102\1\1\1\102\1\103"+
    "\1\1\2\104\1\105\1\1\1\106\1\107\2\110\1\111"+
    "\2\112\3\113\1\114\1\115\1\116\1\117\1\116\1\120"+
    "\1\121\1\122\1\123\1\124\1\0\1\6\1\125\1\126"+
    "\6\6\1\127\1\130\4\6\1\131\1\0\1\132\1\0"+
    "\1\133\1\134\1\0\1\135\1\0\1\61\1\136\1\137"+
    "\5\0\1\6\1\140\7\6\1\141\4\6\1\131\1\132"+
    "\3\142\1\143\3\6\1\144\1\145\1\146\3\6\1\147"+
    "\2\6\2\131\2\132\1\150\5\6\1\151\1\152\1\131"+
    "\1\132\4\6\1\153\1\131\1\132\1\154\1\155\1\156"+
    "\1\157\1\131\1\132\1\131\1\132";

  private static int [] zzUnpackAction() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\246\0\371\0\u014c\0\u019f\0\u01f2\0\u0245"+
    "\0\u0298\0\u02eb\0\u033e\0\u0391\0\u03e4\0\u0437\0\u048a\0\u04dd"+
    "\0\u0530\0\u0583\0\u05d6\0\u0629\0\u067c\0\u06cf\0\u0722\0\u0775"+
    "\0\u07c8\0\u081b\0\u086e\0\u08c1\0\u0914\0\u0967\0\u09ba\0\u0a0d"+
    "\0\u0a60\0\u0ab3\0\u0b06\0\u0b59\0\u0bac\0\u0bff\0\u0c52\0\u0c52"+
    "\0\u0c52\0\u0ca5\0\u0cf8\0\u0d4b\0\u0d9e\0\u0ca5\0\u0c52\0\u0df1"+
    "\0\u0e44\0\u0e97\0\u0eea\0\u0f3d\0\u0f90\0\u0fe3\0\u1036\0\u1089"+
    "\0\u10dc\0\u0c52\0\u0c52\0\u112f\0\u0c52\0\u0c52\0\u1182\0\u0c52"+
    "\0\u11d5\0\u1228\0\u0c52\0\u127b\0\u12ce\0\u0c52\0\u1321\0\u0c52"+
    "\0\u0c52\0\u0c52\0\u1374\0\u0c52\0\u0c52\0\u112f\0\u13c7\0\u141a"+
    "\0\u0c52\0\u0c52\0\u0c52\0\u146d\0\u0c52\0\u14c0\0\u0c52\0\u0c52"+
    "\0\u1513\0\u1566\0\u0c52\0\u15b9\0\u0c52\0\u160c\0\u0c52\0\u165f"+
    "\0\u16b2\0\u0c52\0\u1705\0\u0c52\0\u1758\0\u0c52\0\u17ab\0\u17fe"+
    "\0\u0c52\0\u1851\0\u18a4\0\u0c52\0\u18f7\0\u194a\0\u0c52\0\u199d"+
    "\0\u0c52\0\u0c52\0\u0c52\0\u0c52\0\u19f0\0\u1a43\0\u1a96\0\u1ae9"+
    "\0\u0c52\0\u0c52\0\u0c52\0\u0c52\0\u0c52\0\u0c52\0\u0c52\0\u0c52"+
    "\0\u0c52\0\u0c52\0\u1b3c\0\u0c52\0\u1b8f\0\u0c52\0\u1be2\0\u1c35"+
    "\0\u0c52\0\u0c52\0\u1c88\0\u1cdb\0\u0c52\0\u0c52\0\u1d2e\0\u1d81"+
    "\0\u0c52\0\u1dd4\0\u0c52\0\u1e27\0\u0c52\0\u1e7a\0\u0c52\0\u1ecd"+
    "\0\u0c52\0\u1f20\0\u0c52\0\u0c52\0\u1f73\0\u0c52\0\u1fc6\0\u2019"+
    "\0\u206c\0\u0c52\0\u0c52\0\u20bf\0\u2112\0\u0c52\0\u0c52\0\u0c52"+
    "\0\u0c52\0\u0c52\0\u2165\0\u21b8\0\u0df1\0\u220b\0\u225e\0\u22b1"+
    "\0\u2304\0\u2357\0\u23aa\0\u23fd\0\u0ca5\0\u2450\0\u24a3\0\u24f6"+
    "\0\u2549\0\u259c\0\u25ef\0\u2642\0\u2695\0\u26e8\0\u0c52\0\u0c52"+
    "\0\u273b\0\u0c52\0\u278e\0\u0c52\0\u0c52\0\u1f20\0\u1fc6\0\u2019"+
    "\0\u27e1\0\u2834\0\u2887\0\u28da\0\u0c52\0\u292d\0\u2980\0\u29d3"+
    "\0\u2a26\0\u2a79\0\u2acc\0\u2b1f\0\u0ca5\0\u2b72\0\u2bc5\0\u2c18"+
    "\0\u2c6b\0\u2cbe\0\u2d11\0\u0c52\0\u2d64\0\u2db7\0\u0c52\0\u2e0a"+
    "\0\u2e5d\0\u2eb0\0\u0ca5\0\u0ca5\0\u0ca5\0\u2f03\0\u2f56\0\u2fa9"+
    "\0\u0ca5\0\u2ffc\0\u304f\0\u30a2\0\u30f5\0\u3148\0\u319b\0\u0ca5"+
    "\0\u31ee\0\u3241\0\u3294\0\u32e7\0\u333a\0\u0ca5\0\u0ca5\0\u338d"+
    "\0\u33e0\0\u3433\0\u3486\0\u34d9\0\u352c\0\u0ca5\0\u357f\0\u35d2"+
    "\0\u0ca5\0\u0ca5\0\u0ca5\0\u0ca5\0\u3625\0\u3678\0\u36cb\0\u371e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\123\47\1\50\1\51\1\52\2\50\1\53\1\54\1\50"+
    "\1\54\1\55\1\50\1\56\1\57\1\50\2\52\1\60"+
    "\1\50\2\54\3\50\2\52\1\50\1\61\2\62\2\52"+
    "\2\63\6\52\2\64\2\65\2\66\4\52\2\67\10\52"+
    "\2\70\1\55\4\52\2\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\57\1\75\10\50\1\77\1\100\3\77\1\101"+
    "\1\102\1\77\1\102\10\77\1\103\2\102\73\77\1\103"+
    "\3\77\1\104\1\100\3\104\1\101\1\102\1\104\1\102"+
    "\11\104\2\102\77\104\1\105\1\106\3\105\1\107\13\105"+
    "\1\110\75\105\1\110\3\105\21\0\1\111\75\0\1\111"+
    "\3\0\1\112\1\100\3\112\1\101\1\113\1\112\1\113"+
    "\7\112\1\114\1\112\2\113\6\112\1\115\52\112\1\73"+
    "\1\116\1\117\2\112\1\120\1\121\7\112\6\122\1\102"+
    "\1\122\1\102\11\122\2\102\77\122\6\123\1\102\1\123"+
    "\1\102\11\123\2\102\77\123\1\124\1\125\3\124\1\126"+
    "\115\124\1\127\1\130\3\127\1\131\1\132\1\127\1\132"+
    "\11\127\2\132\77\127\1\124\1\133\3\124\1\134\115\124"+
    "\1\135\1\130\3\135\1\131\1\136\1\135\1\136\11\135"+
    "\2\136\77\135\1\130\1\137\3\130\1\140\100\130\1\141"+
    "\3\130\1\141\10\130\1\124\1\142\3\124\1\143\116\124"+
    "\1\144\3\124\1\145\115\124\1\146\1\130\3\146\1\131"+
    "\1\147\1\146\1\147\11\146\2\147\77\146\1\150\1\151"+
    "\3\150\1\152\1\153\1\150\1\153\11\150\2\153\77\150"+
    "\1\50\1\154\1\155\2\50\1\156\1\102\1\50\1\102"+
    "\1\155\1\50\1\155\2\50\2\155\2\50\2\102\3\50"+
    "\2\155\2\50\51\155\1\50\1\157\1\160\6\50\1\161"+
    "\1\162\4\50\1\163\1\154\3\163\1\156\1\102\1\163"+
    "\1\102\11\163\2\102\77\163\2\164\1\165\3\164\1\166"+
    "\1\164\1\166\1\165\1\164\1\167\1\164\1\170\2\165"+
    "\1\164\1\171\2\166\3\164\2\165\1\164\1\170\51\165"+
    "\1\170\2\164\3\170\1\164\1\172\1\173\1\174\1\175"+
    "\1\176\1\177\1\200\1\201\1\130\1\202\3\130\1\202"+
    "\13\130\1\202\71\130\5\202\2\130\1\202\1\203\1\204"+
    "\3\203\1\205\115\203\1\130\1\206\3\130\1\207\100\130"+
    "\1\210\3\130\1\210\1\130\1\211\5\130\1\212\1\213"+
    "\1\204\3\213\1\214\12\213\1\215\102\213\1\130\1\216"+
    "\2\130\1\217\1\220\111\130\1\221\4\130\1\216\2\130"+
    "\1\222\1\220\13\130\1\221\102\130\1\223\3\130\1\224"+
    "\115\130\1\124\1\225\3\124\1\226\115\124\1\227\1\130"+
    "\3\227\1\131\1\230\1\227\1\230\11\227\2\230\77\227"+
    "\1\231\1\0\16\231\1\232\102\231\1\50\1\204\1\52"+
    "\2\50\1\214\1\102\1\50\1\102\1\52\1\50\1\52"+
    "\2\50\2\52\2\50\2\102\3\50\2\52\2\50\51\52"+
    "\17\50\1\233\1\234\3\233\1\235\1\102\1\233\1\102"+
    "\11\233\2\102\77\233\1\236\1\234\3\236\1\235\1\237"+
    "\1\236\1\237\11\236\2\237\25\236\2\240\50\236\1\0"+
    "\1\234\1\241\2\0\1\235\1\102\1\0\1\102\1\241"+
    "\1\0\1\241\2\0\2\241\2\0\2\102\3\0\2\241"+
    "\2\0\51\241\7\0\1\242\7\0\1\243\1\234\3\243"+
    "\1\235\1\102\1\243\1\102\2\244\4\243\1\244\2\243"+
    "\2\102\2\243\4\244\1\243\51\244\3\243\1\245\5\243"+
    "\1\161\1\246\4\243\1\0\1\234\1\241\2\0\1\235"+
    "\1\102\1\0\1\102\1\241\1\0\1\241\2\0\2\241"+
    "\2\0\2\102\3\0\2\241\2\0\51\241\7\0\1\247"+
    "\1\0\1\250\1\251\4\0\113\130\4\252\3\130\1\252"+
    "\125\0\1\52\6\0\1\52\1\0\1\52\2\0\2\52"+
    "\1\253\6\0\2\52\2\0\51\52\20\0\1\51\127\0"+
    "\1\54\1\0\1\54\11\0\2\54\101\0\1\52\6\0"+
    "\1\52\1\0\1\52\2\0\2\52\1\253\6\0\2\52"+
    "\2\0\22\52\2\254\25\52\17\0\1\255\1\0\3\255"+
    "\2\0\1\255\1\0\11\255\2\0\77\255\32\0\1\256"+
    "\72\0\1\52\6\0\1\52\1\0\1\52\2\0\2\52"+
    "\1\253\6\0\2\52\2\0\2\52\2\257\10\52\2\260"+
    "\33\52\21\0\1\52\6\0\1\52\1\0\1\52\2\0"+
    "\2\52\1\253\6\0\2\52\2\0\32\52\2\261\15\52"+
    "\21\0\1\52\6\0\1\52\1\0\1\52\2\0\2\52"+
    "\1\253\6\0\2\52\2\0\22\52\2\262\6\52\2\263"+
    "\11\52\2\264\2\52\21\0\1\52\6\0\1\52\1\0"+
    "\1\52\2\0\2\52\1\253\6\0\2\52\2\0\20\52"+
    "\2\265\6\52\2\266\17\52\21\0\1\52\6\0\1\52"+
    "\1\0\1\52\2\0\2\52\1\253\6\0\2\52\2\0"+
    "\2\52\2\267\45\52\21\0\1\52\6\0\1\52\1\0"+
    "\1\52\2\0\2\52\1\253\6\0\2\52\2\0\30\52"+
    "\2\270\17\52\21\0\1\52\6\0\1\52\1\0\1\52"+
    "\2\0\2\52\1\253\6\0\2\52\2\0\34\52\2\271"+
    "\13\52\21\0\1\52\6\0\1\52\1\0\1\52\2\0"+
    "\2\52\1\253\6\0\2\52\2\0\16\52\2\272\31\52"+
    "\124\0\1\73\15\0\1\77\1\0\3\77\2\0\1\77"+
    "\1\0\10\77\3\0\73\77\1\0\3\77\1\0\1\100"+
    "\127\0\1\102\1\0\1\102\11\0\2\102\77\0\1\104"+
    "\1\0\3\104\2\0\1\104\1\0\11\104\2\0\77\104"+
    "\1\105\1\0\3\105\1\0\13\105\1\0\75\105\1\0"+
    "\3\105\1\0\1\106\127\0\1\113\1\0\1\113\11\0"+
    "\2\113\102\0\1\273\1\274\4\0\2\273\4\0\1\273"+
    "\3\0\1\273\1\0\1\273\5\0\1\273\1\0\1\273"+
    "\1\0\1\273\1\0\1\273\1\0\1\273\1\0\1\273"+
    "\1\0\1\273\1\0\1\273\1\0\1\273\1\0\1\273"+
    "\1\0\1\273\1\0\1\273\1\0\1\273\1\0\1\273"+
    "\1\0\1\273\1\0\1\273\1\0\1\273\2\0\1\273"+
    "\1\0\1\273\1\0\1\273\23\0\1\275\1\276\4\0"+
    "\2\275\4\0\1\275\3\0\1\275\1\0\1\275\5\0"+
    "\1\275\1\0\1\275\1\0\1\275\1\0\1\275\1\0"+
    "\1\275\1\0\1\275\1\0\1\275\1\0\1\275\1\0"+
    "\1\275\1\0\1\275\1\0\1\275\1\0\1\275\1\0"+
    "\1\275\1\0\1\275\1\0\1\275\1\0\1\275\1\0"+
    "\1\275\2\0\1\275\1\0\1\275\1\0\1\275\11\0"+
    "\1\277\6\0\1\124\1\0\122\124\1\125\121\124\1\0"+
    "\1\130\127\0\1\132\1\0\1\132\11\0\2\132\77\0"+
    "\1\124\1\133\121\124\6\0\1\136\1\0\1\136\11\0"+
    "\2\136\100\0\1\137\235\0\1\300\6\0\1\124\1\142"+
    "\122\124\1\144\121\124\6\0\1\147\1\0\1\147\11\0"+
    "\2\147\77\0\1\150\1\0\122\150\1\151\122\150\1\0"+
    "\4\150\1\153\1\150\1\153\11\150\2\153\77\150\2\0"+
    "\1\155\6\0\1\155\1\0\1\155\2\0\2\155\1\301"+
    "\6\0\2\155\2\0\51\155\20\0\1\154\226\0\1\302"+
    "\17\0\1\165\6\0\1\165\1\0\1\165\2\0\2\165"+
    "\1\303\6\0\2\165\2\0\51\165\25\0\1\166\1\0"+
    "\1\166\11\0\2\166\101\0\1\165\6\0\1\165\1\0"+
    "\1\165\2\0\2\165\1\303\6\0\2\165\2\0\51\165"+
    "\1\0\1\304\122\0\1\304\15\0\1\203\1\0\122\203"+
    "\1\204\121\203\1\0\1\206\235\0\1\305\6\0\1\213"+
    "\1\0\3\213\1\0\12\213\1\0\102\213\1\0\1\204"+
    "\240\0\1\130\4\0\1\216\142\0\1\130\102\0\1\223"+
    "\121\0\1\124\1\225\121\124\6\0\1\230\1\0\1\230"+
    "\11\0\2\230\77\0\1\306\1\0\3\306\2\0\1\306"+
    "\1\0\11\306\2\0\77\306\1\0\1\234\127\0\1\307"+
    "\1\0\1\307\11\0\2\307\25\0\2\310\133\0\2\311"+
    "\40\0\1\241\6\0\1\241\1\0\1\241\2\0\2\241"+
    "\1\312\6\0\2\241\2\0\51\241\21\0\1\244\6\0"+
    "\2\244\3\0\2\244\4\0\6\244\1\0\51\244\126\0"+
    "\1\313\15\0\1\52\6\0\1\52\1\0\1\52\2\0"+
    "\2\52\7\0\2\52\2\0\51\52\21\0\1\52\6\0"+
    "\1\52\1\0\1\52\2\0\2\52\1\253\6\0\2\52"+
    "\2\0\2\52\2\314\45\52\32\0\1\315\111\0\1\52"+
    "\6\0\1\52\1\0\1\52\2\0\2\52\1\253\6\0"+
    "\2\52\2\0\4\52\2\316\43\52\21\0\1\52\6\0"+
    "\1\52\1\0\1\52\2\0\2\52\1\253\6\0\2\52"+
    "\2\0\20\52\2\317\27\52\21\0\1\52\6\0\1\52"+
    "\1\0\1\52\2\0\2\52\1\253\6\0\2\52\2\0"+
    "\24\52\2\320\23\52\21\0\1\52\6\0\1\52\1\0"+
    "\1\52\2\0\2\52\1\253\6\0\2\52\2\0\24\52"+
    "\2\321\23\52\21\0\1\52\6\0\1\52\1\0\1\52"+
    "\2\0\2\52\1\253\6\0\2\52\2\0\4\52\2\322"+
    "\43\52\21\0\1\52\6\0\1\52\1\0\1\52\2\0"+
    "\2\52\1\253\6\0\2\52\2\0\6\52\2\323\41\52"+
    "\21\0\1\52\6\0\1\52\1\0\1\52\2\0\2\52"+
    "\1\253\6\0\2\52\2\0\4\52\2\324\43\52\21\0"+
    "\1\52\6\0\1\52\1\0\1\52\2\0\2\52\1\253"+
    "\6\0\2\52\2\0\36\52\2\325\11\52\21\0\1\52"+
    "\6\0\1\52\1\0\1\52\2\0\2\52\1\253\6\0"+
    "\2\52\2\0\22\52\2\326\25\52\21\0\1\52\6\0"+
    "\1\52\1\0\1\52\2\0\2\52\1\253\6\0\2\52"+
    "\2\0\14\52\2\327\2\330\31\52\21\0\1\52\6\0"+
    "\1\52\1\0\1\52\2\0\2\52\1\253\6\0\2\52"+
    "\2\0\45\52\2\331\2\52\21\0\2\273\1\274\4\0"+
    "\3\273\3\0\1\273\3\0\1\273\1\0\1\273\1\0"+
    "\1\273\3\0\51\273\21\0\1\332\2\273\2\0\2\273"+
    "\1\332\4\273\1\0\3\273\1\0\1\273\1\0\3\273"+
    "\2\0\1\273\1\332\3\273\1\332\7\273\1\332\3\273"+
    "\1\332\11\273\1\332\35\273\2\0\2\275\1\276\4\0"+
    "\3\275\3\0\1\275\3\0\1\275\1\0\1\275\1\0"+
    "\1\275\3\0\51\275\21\0\1\333\2\275\2\0\2\275"+
    "\1\333\4\275\1\0\3\275\1\0\1\275\1\0\3\275"+
    "\2\0\1\275\1\333\3\275\1\333\7\275\1\333\3\275"+
    "\1\333\11\275\1\333\35\275\2\0\1\155\6\0\1\155"+
    "\1\0\1\155\2\0\2\155\7\0\2\155\2\0\51\155"+
    "\21\0\1\165\6\0\1\165\1\0\1\165\2\0\2\165"+
    "\7\0\2\165\2\0\51\165\20\0\1\334\3\0\1\335"+
    "\1\336\1\0\1\336\11\0\2\336\101\0\1\241\6\0"+
    "\1\241\1\0\1\241\2\0\2\241\7\0\2\241\2\0"+
    "\51\241\126\0\1\337\15\0\1\52\6\0\1\52\1\0"+
    "\1\52\2\0\2\52\1\253\6\0\2\52\2\0\4\52"+
    "\2\340\43\52\21\0\1\52\6\0\1\52\1\0\1\52"+
    "\2\0\2\52\1\253\6\0\2\52\2\0\6\52\2\341"+
    "\41\52\21\0\1\52\6\0\1\52\1\0\1\52\2\0"+
    "\2\52\1\253\6\0\2\52\2\0\32\52\2\342\15\52"+
    "\21\0\1\52\6\0\1\52\1\0\1\52\2\0\2\52"+
    "\1\253\6\0\2\52\2\0\14\52\2\343\33\52\21\0"+
    "\1\52\6\0\1\52\1\0\1\52\2\0\2\52\1\253"+
    "\6\0\2\52\2\0\14\52\2\344\33\52\21\0\1\52"+
    "\6\0\1\52\1\0\1\52\2\0\2\52\1\253\6\0"+
    "\2\52\2\0\34\52\2\345\13\52\21\0\1\52\6\0"+
    "\1\52\1\0\1\52\2\0\2\52\1\253\6\0\2\52"+
    "\2\0\14\52\2\346\33\52\21\0\1\52\6\0\1\52"+
    "\1\0\1\52\2\0\2\52\1\253\6\0\2\52\2\0"+
    "\22\52\2\347\25\52\21\0\1\52\6\0\1\52\1\0"+
    "\1\52\2\0\2\52\1\253\6\0\2\52\2\0\14\52"+
    "\2\350\33\52\21\0\1\52\6\0\1\52\1\0\1\52"+
    "\2\0\2\52\1\253\6\0\2\52\2\0\30\52\2\351"+
    "\17\52\21\0\1\52\6\0\1\52\1\0\1\52\2\0"+
    "\2\52\1\253\6\0\2\52\2\0\22\52\2\352\25\52"+
    "\21\0\1\52\6\0\1\52\1\0\1\52\2\0\2\52"+
    "\1\253\6\0\2\52\2\0\16\52\2\353\31\52\20\0"+
    "\1\273\1\354\1\273\1\274\1\355\1\273\1\0\1\273"+
    "\1\354\2\273\3\0\1\273\3\0\1\273\1\0\1\273"+
    "\1\0\1\273\3\0\1\354\3\273\1\354\7\273\1\354"+
    "\3\273\1\354\11\273\1\354\16\273\20\0\1\275\1\356"+
    "\1\275\1\276\1\357\1\275\1\0\1\275\1\356\2\275"+
    "\3\0\1\275\3\0\1\275\1\0\1\275\1\0\1\275"+
    "\3\0\1\356\3\275\1\356\7\275\1\356\3\275\1\356"+
    "\11\275\1\356\16\275\20\0\1\334\127\0\1\336\1\0"+
    "\1\336\11\0\2\336\101\0\1\52\6\0\1\52\1\0"+
    "\1\52\2\0\2\52\1\253\6\0\2\52\2\0\43\52"+
    "\2\360\4\52\21\0\1\52\6\0\1\52\1\0\1\52"+
    "\2\0\2\52\1\253\6\0\2\52\2\0\10\52\2\361"+
    "\37\52\21\0\1\52\6\0\1\52\1\0\1\52\2\0"+
    "\2\52\1\253\6\0\2\52\2\0\26\52\2\362\21\52"+
    "\21\0\1\52\6\0\1\52\1\0\1\52\2\0\2\52"+
    "\1\253\6\0\2\52\2\0\30\52\2\363\17\52\21\0"+
    "\1\52\6\0\1\52\1\0\1\52\2\0\2\52\1\253"+
    "\6\0\2\52\2\0\26\52\2\364\21\52\21\0\1\52"+
    "\6\0\1\52\1\0\1\52\2\0\2\52\1\253\6\0"+
    "\2\52\2\0\24\52\2\365\23\52\21\0\1\52\6\0"+
    "\1\52\1\0\1\52\2\0\2\52\1\253\6\0\2\52"+
    "\2\0\14\52\2\366\33\52\21\0\1\52\6\0\1\52"+
    "\1\0\1\52\2\0\2\52\1\253\6\0\2\52\2\0"+
    "\30\52\2\367\17\52\20\0\1\273\1\370\1\273\1\274"+
    "\1\355\1\273\1\0\1\273\1\370\2\273\3\0\1\273"+
    "\3\0\1\273\1\0\1\273\1\0\1\273\3\0\1\370"+
    "\3\273\1\370\7\273\1\370\3\273\1\370\11\273\1\370"+
    "\16\273\20\0\3\273\1\274\4\0\3\273\3\0\1\273"+
    "\3\0\1\273\1\0\1\273\1\0\1\273\3\0\51\273"+
    "\20\0\1\275\1\371\1\275\1\276\1\357\1\275\1\0"+
    "\1\275\1\371\2\275\3\0\1\275\3\0\1\275\1\0"+
    "\1\275\1\0\1\275\3\0\1\371\3\275\1\371\7\275"+
    "\1\371\3\275\1\371\11\275\1\371\16\275\20\0\3\275"+
    "\1\276\4\0\3\275\3\0\1\275\3\0\1\275\1\0"+
    "\1\275\1\0\1\275\3\0\51\275\21\0\1\52\6\0"+
    "\1\52\1\0\1\52\2\0\2\52\1\253\6\0\2\52"+
    "\2\0\12\52\2\372\35\52\21\0\1\52\6\0\1\52"+
    "\1\0\1\52\2\0\2\52\1\253\6\0\2\52\2\0"+
    "\22\52\2\373\25\52\21\0\1\52\6\0\1\52\1\0"+
    "\1\52\2\0\2\52\1\253\6\0\2\52\2\0\2\374"+
    "\47\52\21\0\1\52\6\0\1\52\1\0\1\52\2\0"+
    "\2\52\1\253\6\0\2\52\2\0\2\375\47\52\21\0"+
    "\1\52\6\0\1\52\1\0\1\52\2\0\2\52\1\253"+
    "\6\0\2\52\2\0\24\52\2\376\23\52\20\0\1\273"+
    "\1\377\1\273\1\274\1\355\1\273\1\0\1\273\1\377"+
    "\2\273\3\0\1\273\3\0\1\273\1\0\1\273\1\0"+
    "\1\273\3\0\1\377\3\273\1\377\7\273\1\377\3\273"+
    "\1\377\11\273\1\377\16\273\20\0\1\275\1\u0100\1\275"+
    "\1\276\1\357\1\275\1\0\1\275\1\u0100\2\275\3\0"+
    "\1\275\3\0\1\275\1\0\1\275\1\0\1\275\3\0"+
    "\1\u0100\3\275\1\u0100\7\275\1\u0100\3\275\1\u0100\11\275"+
    "\1\u0100\16\275\21\0\1\52\6\0\1\52\1\0\1\52"+
    "\2\0\2\52\1\253\6\0\2\52\2\0\14\52\2\u0101"+
    "\33\52\21\0\1\52\6\0\1\52\1\0\1\52\2\0"+
    "\2\52\1\253\6\0\2\52\2\0\6\52\2\u0102\41\52"+
    "\21\0\1\52\6\0\1\52\1\0\1\52\2\0\2\52"+
    "\1\253\6\0\2\52\2\0\24\52\2\u0103\23\52\21\0"+
    "\1\52\6\0\1\52\1\0\1\52\2\0\2\52\1\253"+
    "\6\0\2\52\2\0\14\52\2\u0104\33\52\20\0\1\273"+
    "\1\u0105\1\273\1\274\1\355\1\273\1\0\1\273\1\u0105"+
    "\2\273\3\0\1\273\3\0\1\273\1\0\1\273\1\0"+
    "\1\273\3\0\1\u0105\3\273\1\u0105\7\273\1\u0105\3\273"+
    "\1\u0105\11\273\1\u0105\16\273\20\0\1\275\1\u0106\1\275"+
    "\1\276\1\357\1\275\1\0\1\275\1\u0106\2\275\3\0"+
    "\1\275\3\0\1\275\1\0\1\275\1\0\1\275\3\0"+
    "\1\u0106\3\275\1\u0106\7\275\1\u0106\3\275\1\u0106\11\275"+
    "\1\u0106\16\275\20\0\1\273\1\u0107\1\273\1\274\1\355"+
    "\1\273\1\0\1\273\1\u0107\2\273\3\0\1\273\3\0"+
    "\1\273\1\0\1\273\1\0\1\273\3\0\1\u0107\3\273"+
    "\1\u0107\7\273\1\u0107\3\273\1\u0107\11\273\1\u0107\16\273"+
    "\20\0\1\275\1\u0108\1\275\1\276\1\357\1\275\1\0"+
    "\1\275\1\u0108\2\275\3\0\1\275\3\0\1\275\1\0"+
    "\1\275\1\0\1\275\3\0\1\u0108\3\275\1\u0108\7\275"+
    "\1\u0108\3\275\1\u0108\11\275\1\u0108\16\275\20\0\3\273"+
    "\1\274\1\355\1\273\1\0\4\273\3\0\1\273\3\0"+
    "\1\273\1\0\1\273\1\0\1\273\3\0\51\273\20\0"+
    "\3\275\1\276\1\357\1\275\1\0\4\275\3\0\1\275"+
    "\3\0\1\275\1\0\1\275\1\0\1\275\3\0\51\275"+
    "\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14193];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\1\1\0\1\1\2\0\2\1\1\0\1\1"+
    "\12\0\1\1\11\0\3\11\5\1\1\11\12\1\2\11"+
    "\1\1\2\11\1\1\1\11\2\1\1\11\2\1\1\11"+
    "\1\1\3\11\1\1\2\11\3\1\3\11\1\1\1\11"+
    "\1\1\2\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\2\1\1\11\2\1\1\11\1\1\4\11\4\1\12\11"+
    "\1\1\1\11\1\1\1\11\2\1\2\11\2\1\2\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\2\11\1\1\1\11\3\1\2\11"+
    "\2\1\5\11\1\0\20\1\1\0\1\1\1\0\2\11"+
    "\1\0\1\11\1\0\2\11\1\1\5\0\1\1\1\11"+
    "\16\1\1\11\2\1\1\11\51\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private LexerInput input;
    private boolean canFollowTag = false;
    int parenBalance = 1;
    int braceBalance = 0;
    int bracketBalance = 0;
    int indent = 0;
    int eolPosition = 0;
    boolean dotAfterTag = false;
    int blockIndent = -1;
    boolean hasCssId = false;
    int lastReaded = 0;
    boolean continueJS = false;
    boolean inString = false;
    

    public JadeColoringLexer(LexerRestartInfo info) {
        this.input = info.input();

        if(info.state() != null) {
            //reset state
            setState((LexerState)info.state());
        } else {
            //initial state
            zzState = zzLexicalState = YYINITIAL;
        }
    }


    public LexerState getState() {
        if (zzState == YYINITIAL && zzLexicalState == YYINITIAL) {
            return null;
        }
        return new LexerState(zzState, zzLexicalState, canFollowTag, indent, hasCssId);
    }

    public void setState(LexerState state) {
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
        this.canFollowTag = state.canFollowTag;
        this.indent = state.indent;
        this.hasCssId = state.hasCssId;
    }

    public JadeTokenId nextToken() throws java.io.IOException {
        JadeTokenId token = yylex();
        return token;
    }

    public static final class LexerState  {
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;
        final boolean canFollowTag;
        /** indent of the new line */
        final int indent;
        final boolean hasCssId;

        LexerState (int zzState, int zzLexicalState, boolean canFollowTag, int indent, boolean hasCssId) {
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.canFollowTag = canFollowTag;
            this.indent = indent;
            this.hasCssId = hasCssId;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final LexerState other = (LexerState) obj;
            if (this.zzState != other.zzState) {
                return false;
            }
            if (this.zzLexicalState != other.zzLexicalState) {
                return false;
            }
            if (this.canFollowTag != other.canFollowTag) {
                return false;
            }
            if (this.hasCssId != other.hasCssId) {
                return false;
            }
            if (this.indent != other.indent) {
                return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            int hash = 7;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            hash = 31 * hash + (this.canFollowTag ? 0 : 1);
            hash = 31 * hash + (this.hasCssId ? 0 : 1);
            hash = 31 * hash + this.indent;
            return hash;
        }

        @Override
        public String toString() {
            return "LexerState{" + "zzState=" + zzState + ", zzLexicalState=" + zzLexicalState + '}';
        }
    }

 // End user code
    boolean checkEndJS(int tokenLength, char ch) {
        if (!continueJS 
                && ((ch == ')' && parenBalance == 0) 
                || (ch != ')' && parenBalance == 1))
                && braceBalance == 0 && bracketBalance == 0) {
            if (lastReaded > 0 && ((tokenLength - lastReaded) > 0)) {
                yypushback(tokenLength - lastReaded);
                yybegin(HTML_ATTRIBUTE);
                return true;
            }
        } 
        lastReaded = tokenLength;
        continueJS = false;
        
        return false;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JadeColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JadeColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2294) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JadeTokenId yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzMarkedPosL;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      int tokenLength = 0;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          zzInput = input.read();
         if(zzInput == LexerInput.EOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
          input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 46: 
          { parenBalance = 1;
                                        lastReaded = bracketBalance = braceBalance = 0;
                                        yypushback(1);
                                        yybegin(JAVASCRIPT_VALUE);
          }
        case 112: break;
        case 56: 
          { braceBalance++; lastReaded = tokenLength;
          }
        case 113: break;
        case 19: 
          { yypushback(1);
                                        yybegin(DOCTYPE_STRING_END);
                                        if (tokenLength > 1) {
                                            return JadeTokenId.DOCTYPE_STRING_END;
                                        }
          }
        case 114: break;
        case 90: 
          { if (!hasCssId) {
                                            hasCssId = true;
                                            return JadeTokenId.CSS_ID;
                                        } else {
                                            // only one css id is allowed in tag
                                            return JadeTokenId.UNKNOWN;
                                        }
          }
        case 115: break;
        case 18: 
          { yypushback(1);
                                        yybegin(DOCTYPE);
                                        if (tokenLength > 1) {
                                            return JadeTokenId.UNKNOWN;
                                        }
          }
        case 116: break;
        case 104: 
          { yybegin(AFTER_TAG);
                                        return JadeTokenId.KEYWORD_BLOCK;
          }
        case 117: break;
        case 98: 
          { int delta = tokenLength - lastReaded;
                                        if (delta > 0) {
                                            yypushback(delta);
                                            yybegin(AFTER_EOL);
                                            if (tokenLength > delta) {
                                                return JadeTokenId.JAVASCRIPT;
                                            }
                                        }
                                        yypushback(tokenLength);
                                        yybegin(AFTER_EOL);
          }
        case 118: break;
        case 67: 
          { continueJS = false;
                                        lastReaded = tokenLength;
                                        yybegin(JAVASCRIPT_VALUE);
          }
        case 119: break;
        case 73: 
          { yypushback(1);
                                        yybegin(JAVASCRIPT_AFTER_EACH);
          }
        case 120: break;
        case 95: 
          { return JadeTokenId.FILTER;
          }
        case 121: break;
        case 4: 
          { return JadeTokenId.UNKNOWN;
          }
        case 122: break;
        case 49: 
          { continueJS = true; lastReaded = tokenLength;
          }
        case 123: break;
        case 82: 
          { yybegin(MIXIN_CALL_ARGUMENT);
                                        parenBalance = 1; braceBalance = 0;
                                        return JadeTokenId.OPERATOR_COMMA;
          }
        case 124: break;
        case 6: 
          { yybegin(AFTER_TAG);
                                        dotAfterTag = true;
                                        hasCssId = false;
                                        return JadeTokenId.TAG ;
          }
        case 125: break;
        case 97: 
          { yybegin(AFTER_EACH);
                                        return JadeTokenId.KEYWORD_FOR;
          }
        case 126: break;
        case 92: 
          { yypushback(2);
                                        yybegin(JAVASCRIPT_EXPRESSION);
                                        if (tokenLength > 2) {
                                            return JadeTokenId.TEXT;
                                        }
          }
        case 127: break;
        case 43: 
          { yybegin(HTML_ATTRIBUTE_VALUE);
                                        return JadeTokenId.OPERATOR_ASSIGNMENT;
          }
        case 128: break;
        case 107: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.KEYWORD_UNLESS;
          }
        case 129: break;
        case 24: 
          { return JadeTokenId.OPERATOR_DIVISION;
          }
        case 130: break;
        case 7: 
          { indent = tokenLength;
                                        return JadeTokenId.WHITESPACE;
          }
        case 131: break;
        case 13: 
          { return JadeTokenId.DOCTYPE_ATTRIBUTE;
          }
        case 132: break;
        case 2: 
          { // the  text will not be renedered
                                        return JadeTokenId.UNKNOWN;
          }
        case 133: break;
        case 59: 
          { switch (zzInput) {
            case '(': parenBalance++; break;
            case '{': braceBalance++; break;
            case '}': braceBalance--; break; 
            case ')':
                parenBalance--;
                break;    
            case ',':
            case '\r':
            case '\n':
                if (parenBalance == 1 && braceBalance == 0) {
                    parenBalance = 0;
                }
                break;
        }
        if (parenBalance == 0 && braceBalance == 0) {
            yypushback(1);
            yybegin(HTML_ATTRIBUTE);
            parenBalance = 1;
            if (tokenLength > 1) {
                return JadeTokenId.JAVASCRIPT;
            }
        }
          }
        case 134: break;
        case 41: 
          { return JadeTokenId.EOL;
          }
        case 135: break;
        case 58: 
          { bracketBalance--; lastReaded = tokenLength;
          }
        case 136: break;
        case 85: 
          { yybegin (IN_FILTER_BLOCK);
                                        blockIndent = -1;
                                        return JadeTokenId.FILTER;
          }
        case 137: break;
        case 52: 
          { bracketBalance++; lastReaded = tokenLength;
          }
        case 138: break;
        case 22: 
          { yybegin(TEXT_LINE);
                                        return JadeTokenId.WHITESPACE;
          }
        case 139: break;
        case 48: 
          { if (zzInput == ')') parenBalance--;
                                        if (checkEndJS(tokenLength, (char)zzInput)) {
                                            return JadeTokenId.JAVASCRIPT; 
                                        }
                                        if (zzInput == ')') parenBalance++;  // ned to return back
          }
        case 140: break;
        case 74: 
          { yybegin(AFTER_EOL);
                                        return JadeTokenId.EOL;
          }
        case 141: break;
        case 23: 
          { yybegin(AFTER_COLON_IN_TAG);
                                        return JadeTokenId.OPERATOR_COLON;
          }
        case 142: break;
        case 25: 
          { yybegin(AFTER_PLAIN_TEXT_BLOCK_DELIMITER);
                                        return JadeTokenId.PLAIN_TEXT_DELIMITER;
          }
        case 143: break;
        case 81: 
          { yybegin(MIXIN_CALL_ARGUMENT);
                                        parenBalance = 1; braceBalance = 0;
                                        return JadeTokenId.BRACKET_LEFT_PAREN;
          }
        case 144: break;
        case 76: 
          { return JadeTokenId.MIXIN_NAME;
          }
        case 145: break;
        case 94: 
          { braceBalance = 1; return JadeTokenId.EXPRESSION_DELIMITER_OPEN;
          }
        case 146: break;
        case 33: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        if (tokenLength > 1) {
                                            return JadeTokenId.UNBUFFERED_COMMENT;
                                        }
          }
        case 147: break;
        case 21: 
          { yybegin(TEXT_LINE);
          }
        case 148: break;
        case 30: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        if (tokenLength > 1) {
                                            return JadeTokenId.COMMENT;
                                        }
          }
        case 149: break;
        case 91: 
          { yypushback(2);
                                        yybegin(JAVASCRIPT_EXPRESSION);
          }
        case 150: break;
        case 37: 
          { yybegin(IN_PLAIN_TEXT_BLOCK_AFTER_EOL);
                                        eolPosition = tokenLength;
          }
        case 151: break;
        case 80: 
          { return JadeTokenId.BRACKET_RIGHT_PAREN;
          }
        case 152: break;
        case 28: 
          { yypushback(1);
                                        yybegin(JAVASCRIPT_WITH_BLOCK_EXPANSION);
          }
        case 153: break;
        case 31: 
          { int indentInComment = tokenLength - eolPosition;
                                        if (indent >= indentInComment) {
                                            yypushback(indentInComment + 1);  // return back also the EOL
                                            yybegin(AFTER_EOL);
                                            if (tokenLength > (indentInComment + 1)) {
                                                return JadeTokenId.COMMENT;
                                            }
                                        } else {
                                            yybegin(IN_COMMENT);
                                        }
          }
        case 154: break;
        case 26: 
          { yybegin(HTML_ATTRIBUTE);
                                        return JadeTokenId.BRACKET_LEFT_PAREN;
          }
        case 155: break;
        case 9: 
          { yybegin(IN_PLAIN_TEXT_LINE);
          }
        case 156: break;
        case 50: 
          { yybegin(JS_STRING);
          }
        case 157: break;
        case 93: 
          { yybegin(HTML_ATTRIBUTE_VALUE);
                                        return JadeTokenId.OPERATOR_NOT_EQUALS;
          }
        case 158: break;
        case 8: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.CODE_DELIMITER;
          }
        case 159: break;
        case 111: 
          { yybegin(AFTER_INCLUDE);
                                        return JadeTokenId.KEYWORD_INCLUDE;
          }
        case 160: break;
        case 11: 
          { hasCssId = false;
                                        yypushback(1);
                                        yybegin(AFTER_TAG);
          }
        case 161: break;
        case 70: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        if (tokenLength - 1 > 0) { 
                                            return JadeTokenId.FILTER_TEXT;
                                        }
          }
        case 162: break;
        case 63: 
          { braceBalance++;
          }
        case 163: break;
        case 78: 
          { // expect declaration of parameters
                                        return JadeTokenId.UNKNOWN;
          }
        case 164: break;
        case 16: 
          { yybegin(DOCTYPE_STRING);
                                        return JadeTokenId.DOCTYPE_STRING_START;
          }
        case 165: break;
        case 66: 
          { yypushback(1);
                                     yybegin(AFTER_EOL);
                                     if (tokenLength -1 > 0) {
                                         return JadeTokenId.UNKNOWN;
                                     }
          }
        case 166: break;
        case 55: 
          { yybegin(JS_SSTRING);
          }
        case 167: break;
        case 65: 
          { yypushback(1);
                                        yybegin(AFTER_TAG);
          }
        case 168: break;
        case 101: 
          { return JadeTokenId.KEYWORD_ELSE;
          }
        case 169: break;
        case 29: 
          { yybegin(IN_COMMENT_AFTER_EOL);
                                        eolPosition = tokenLength;
          }
        case 170: break;
        case 109: 
          { yybegin(AFTER_TAG); // handling : after the keyword
                                        return JadeTokenId.KEYWORD_DEFAULT;
          }
        case 171: break;
        case 75: 
          { lastReaded = tokenLength;
          }
        case 172: break;
        case 72: 
          { yypushback(1); yybegin(FILEPATH);
          }
        case 173: break;
        case 68: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        if (tokenLength - 1 > 0) {
                                            return JadeTokenId.FILE_PATH;
                                        }
          }
        case 174: break;
        case 53: 
          { if (checkEndJS(tokenLength, (char)zzInput)) {
                                            return JadeTokenId.JAVASCRIPT; 
                                        }
          }
        case 175: break;
        case 20: 
          { yybegin(DOCTYPE);
                                        return JadeTokenId.DOCTYPE_STRING_END;
          }
        case 176: break;
        case 14: 
          { yybegin(AFTER_EOL);
                                        indent = 0;
                                        if (tokenLength > 0) {
                                            return JadeTokenId.EOL;
                                        }
          }
        case 177: break;
        case 15: 
          { return JadeTokenId.WHITESPACE;
          }
        case 178: break;
        case 36: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        if (tokenLength - 1 > 0 ) {
                                            return JadeTokenId.PLAIN_TEXT;
                                        }
          }
        case 179: break;
        case 12: 
          { yybegin(IN_PLAIN_TEXT_LINE);
                                        return JadeTokenId.PLAIN_TEXT_DELIMITER;
          }
        case 180: break;
        case 102: 
          { yybegin(AFTER_EACH);
                                        return JadeTokenId.KEYWORD_EACH;
          }
        case 181: break;
        case 5: 
          { indent = 0; 
                                        return JadeTokenId.EOL;
          }
        case 182: break;
        case 71: 
          { int indentInBlock = tokenLength - eolPosition;
                                        if (blockIndent < 0) {
                                            blockIndent = indentInBlock;
                                        }
                                        if (blockIndent > indentInBlock) {
                                            yypushback(indentInBlock);
                                            yybegin(AFTER_EOL);
                                            if (tokenLength > indentInBlock) {
                                                return JadeTokenId.FILTER_TEXT;
                                            }
                                        }
                                        yybegin(IN_FILTER_BLOCK);
          }
        case 183: break;
        case 54: 
          { parenBalance--; 
                                        
                                        if (checkEndJS(tokenLength, (char)zzInput)) {
                                            return JadeTokenId.JAVASCRIPT; 
                                        }
          }
        case 184: break;
        case 77: 
          { yybegin(MIXIN_ARGUMENTS); 
                                        return JadeTokenId.BRACKET_LEFT_PAREN;
          }
        case 185: break;
        case 17: 
          { yybegin(DOCTYPE);
                                      return JadeTokenId.DOCTYPE_TEMPLATE;
          }
        case 186: break;
        case 61: 
          { yybegin(AFTER_EOL);
                                        indent = 0;
                                        return JadeTokenId.EOL;
          }
        case 187: break;
        case 39: 
          { int currentIndent = tokenLength - eolPosition;
                                        if (currentIndent <= indent) {
                                            // the block has to have one more space than the tag
                                            yybegin(AFTER_EOL);
                                            indent = currentIndent;
                                            return JadeTokenId.WHITESPACE;
                                        }
                                        if (blockIndent < 0) {
                                            blockIndent = currentIndent;
                                        }
                                        if (blockIndent > currentIndent) {
                                            yypushback(currentIndent);
                                            yybegin(AFTER_EOL);
                                            if (tokenLength > currentIndent) {
                                                return JadeTokenId.PLAIN_TEXT;
                                            }
                                        }
                                        yybegin(IN_PLAIN_TEXT_BLOCK);
          }
        case 188: break;
        case 88: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.KEYWORD_IN;
          }
        case 189: break;
        case 34: 
          { int indentInComment = tokenLength - eolPosition;
                                        if (indent >= indentInComment) {
                                            yypushback(indentInComment);
                                            yybegin(AFTER_EOL);
                                            if (tokenLength > indentInComment) {
                                                return JadeTokenId.UNBUFFERED_COMMENT;
                                            }
                                        } else {
                                            yybegin(IN_UNBUFFERED_COMMENT);
                                        }
          }
        case 190: break;
        case 100: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.KEYWORD_CASE;
          }
        case 191: break;
        case 106: 
          { yybegin(AFTER_MIXIN);
                                        return JadeTokenId.KEYWORD_MIXIN;
          }
        case 192: break;
        case 96: 
          { yybegin(IN_UNBUFFERED_COMMENT);
                                        return JadeTokenId.UNBUFFERED_COMMENT_DELIMITER;
          }
        case 193: break;
        case 45: 
          { yybegin(AFTER_TAG);
                                        return JadeTokenId.BRACKET_RIGHT_PAREN;
          }
        case 194: break;
        case 69: 
          { yybegin(IN_FILTER_BLOCK_AFTER_EOL);
                                        eolPosition = tokenLength;
          }
        case 195: break;
        case 42: 
          { return JadeTokenId.ATTRIBUTE;
          }
        case 196: break;
        case 32: 
          { yybegin(IN_UNBUFFERED_COMMENT_AFTER_EOL);
                                        eolPosition = tokenLength;
          }
        case 197: break;
        case 35: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        indent = 0;
                                        
                                        if (tokenLength -1 > 0) {
                                            return JadeTokenId.TEXT;
                                        }
          }
        case 198: break;
        case 47: 
          { lastReaded = tokenLength; /*continueJS = false;*/
          }
        case 199: break;
        case 110: 
          { yybegin(FILEPATH);
                                        return JadeTokenId.KEYWORD_EXTENDS;
          }
        case 200: break;
        case 64: 
          { braceBalance--;
                                        if (braceBalance == 0) {
                                            yypushback(1);
                                            if (tokenLength > 1) {
                                                return JadeTokenId.JAVASCRIPT;
                                            }
                                        } else if (braceBalance == -1) {
                                            yybegin(TEXT_LINE);
                                            return JadeTokenId.EXPRESSION_DELIMITER_CLOSE; 
                                        }
          }
        case 201: break;
        case 40: 
          { blockIndent = -1;
                                        eolPosition = 0;
                                        yybegin(IN_PLAIN_TEXT_BLOCK_AFTER_EOL);
                                        return JadeTokenId.EOL;
          }
        case 202: break;
        case 86: 
          { yybegin(IN_COMMENT); 
                                        return JadeTokenId.COMMENT_DELIMITER;
          }
        case 203: break;
        case 27: 
          { yypushback(1);
                                        yybegin(JAVASCRIPT_LINE);
          }
        case 204: break;
        case 38: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        indent = 0;
                                        if (tokenLength > 1) {
                                            return JadeTokenId.PLAIN_TEXT;
                                        }
          }
        case 205: break;
        case 99: 
          { return JadeTokenId.OPERATOR_REST_ARGUMENTS;
          }
        case 206: break;
        case 108: 
          { yybegin(AFTER_DOCTYPE);
                                        return JadeTokenId.DOCTYPE;
          }
        case 207: break;
        case 84: 
          { switch (zzInput) {
            case '(': parenBalance++; break;
            case '{': braceBalance++; break;
            case '}': braceBalance--; break; 
            case ')':
                parenBalance--;
                break;    
            case ',':
                if (parenBalance == 1 && braceBalance == 0) {
                    parenBalance = 0;
                }
                break;
        }
        if (parenBalance == 0 && braceBalance == 0) {
            yypushback(1);
            yybegin(AFTER_PLUS_MIXIN);
            parenBalance = 1;
            if (tokenLength > 1) {
                return JadeTokenId.JAVASCRIPT;
            }
        }
          }
        case 208: break;
        case 62: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        if (tokenLength - 1 > 0) {
                                            return JadeTokenId.JAVASCRIPT;
                                        }
          }
        case 209: break;
        case 57: 
          { braceBalance--; lastReaded = tokenLength;
          }
        case 210: break;
        case 3: 
          { yypushback(1);
            indent = 0;
            yybegin(AFTER_EOL);
          }
        case 211: break;
        case 10: 
          { yybegin(AFTER_PLUS_MIXIN);
                                        return JadeTokenId.OPERATOR_PLUS;
          }
        case 212: break;
        case 83: 
          { yybegin(IN_PLAIN_TEXT_LINE);
                                        return JadeTokenId.BRACKET_LEFT_PAREN;
          }
        case 213: break;
        case 44: 
          { return JadeTokenId.OPERATOR_COMMA;
          }
        case 214: break;
        case 103: 
          { yybegin(AFTER_CODE_DELIMITER_WITH_BLOCK_EXPANSION);
                                        return JadeTokenId.KEYWORD_WHEN;
          }
        case 215: break;
        case 79: 
          { return JadeTokenId.IDENTIFIER;
          }
        case 216: break;
        case 105: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.KEYWORD_WHILE;
          }
        case 217: break;
        case 51: 
          { parenBalance++; lastReaded = tokenLength;
          }
        case 218: break;
        case 60: 
          { return JadeTokenId.JAVASCRIPT;
          }
        case 219: break;
        case 87: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.KEYWORD_IF;
          }
        case 220: break;
        case 89: 
          { return JadeTokenId.CSS_CLASS;
          }
        case 221: break;
        case 1: 
          { 
          }
        case 222: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case IN_PLAIN_TEXT_BLOCK_AFTER_EOL: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.PLAIN_TEXT;
    } else {
        return null;
    }
            }
            case 265: break;
            case IN_COMMENT_AFTER_EOL: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.COMMENT;
    } else {
        return null;
    }
            }
            case 266: break;
            case IN_FILTER_BLOCK: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.FILTER_TEXT;
    } else {
        return null;
    }
            }
            case 267: break;
            case TEXT_LINE: {
              {   if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.TEXT;
    } else {
        return null;
    }}
            }
            case 268: break;
            case IN_UNBUFFERED_COMMENT: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.UNBUFFERED_COMMENT;
    } else {
        return null;
    }
            }
            case 269: break;
            case IN_UNBUFFERED_COMMENT_AFTER_EOL: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.UNBUFFERED_COMMENT;
    } else {
        return null;
    }
            }
            case 270: break;
            case IN_FILTER_BLOCK_AFTER_EOL: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.FILTER_TEXT;
    } else {
        return null;
    }
            }
            case 271: break;
            case IN_PLAIN_TEXT_BLOCK: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.PLAIN_TEXT;
    } else {
        return null;
    }
            }
            case 272: break;
            case IN_COMMENT: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.COMMENT;
    } else {
        return null;
    }
            }
            case 273: break;
            default:
              {
                if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.UNKNOWN;
    } else {
        return null;
    }
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
