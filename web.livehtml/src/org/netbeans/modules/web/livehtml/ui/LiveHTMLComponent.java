/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2012 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2012 Sun Microsystems, Inc.
 */
package org.netbeans.modules.web.livehtml.ui;

import java.awt.BorderLayout;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import org.netbeans.api.project.FileOwnerQuery;
import org.netbeans.api.project.Project;
import org.netbeans.modules.web.browser.api.BrowserSupport;
import org.netbeans.modules.web.livehtml.LiveHTMLImpl;
import org.netbeans.modules.web.livehtml.Model;
import org.netbeans.spi.project.ActionProvider;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.RequestProcessor;
import org.openide.util.lookup.Lookups;

public class LiveHTMLComponent extends javax.swing.JPanel {

    static final String PREFERRED_ID = "live.html"; // NOI18N
    private FileObject fo;
    private Model model;
    private boolean beautify = false;
    private RealContent realContent;
    private LiveHTMLToolbar toolbar;
    
    /**
     * Creates new form LiveHTMLComponent
     */
    public LiveHTMLComponent(FileObject fo) {
        this.fo = fo;
        initComponents();
        showEmptyContent();
    }
    
    void setToolbar(LiveHTMLToolbar toolbar) {
        this.toolbar = toolbar;
    }
    
    private void showEmptyContent() {
        removeAll();
        add(new EmptyContent(), BorderLayout.CENTER);
        revalidate();
    }

    private void showRealContent() {
        removeAll();
        realContent = new RealContent(model, beautify);
        add(realContent, BorderLayout.CENTER);
        revalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    void go(String address) {
        URL url_ = null;
        try {
            url_ = new URL(address);
        } catch (MalformedURLException ex) {
            Exceptions.printStackTrace(ex);
            return;
        }
        final URL url = url_;
        model = Model.getModel(url, true);
        showRealContent();
        RequestProcessor.getDefault().post(new Runnable() {
            @Override
            public void run() {
                try {
                    File f = File.createTempFile("livehtml", "dummy");
                    FileObject fo = FileUtil.toFileObject(f);
                    getPrivateBrowserSupport().load(url, fo);
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        });
    }
    
    private static BrowserSupport bs;
    private static BrowserSupport getPrivateBrowserSupport() {
        // there seems to be some problem in Chrome's WebKit Debugging protocol:
        // if the same browser tab is reload with the same or different URL then
        // frequnetly Chrome crashs - an internal dark blue error page is displayed
        // in Chrome saying that something went wrong. For now let's not reuse the same
        // tab but always open a new one. If no better solution is found then perhaps
        // we could use Chrome's API to close old tab before opening a new one.
        if (/*bs == null*/ true) {
            bs = BrowserSupport.create();
            bs.disablePageInspector();
            bs.enabledLiveHTML();
        }
        return bs;
    }
    
    void beautify() {
        beautify = !beautify;
        realContent.setBeautify(beautify);
        
    }

}
