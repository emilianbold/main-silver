UNKNOWN:CLASS:[PUBLIC]:ESCAPED{UNKNOWN}:
  UNKNOWN:CLASS:[PUBLIC]:ESCAPED{UNKNOWN}:
cls:PARAMETER:[PUBLIC]:ESCAPED{cls}:
  $className:FIELD:[PUBLIC]:ESCAPED{$className}:
  displayName:FIELD:[PUBLIC]:ESCAPED{displayName}:
mixins:VARIABLE:[PRIVATE]:ESCAPED{mixins}<font color="#999999">ESCAPED{ : }cls.prototype.mixinsESCAPED{|}prototype.mixins</font>:
key:VARIABLE:[PRIVATE]:ESCAPED{key}:
Manager:CLASS:[PRIVATE]:ESCAPED{Manager}:
  addNameAliasMappings:METHOD:[PUBLIC]:ESCAPED{addNameAliasMappings}ESCAPED{(}<font color="#999999">ESCAPED{Object}ESCAPED{ }</font>ESCAPED{aliases}ESCAPED{)}<font color="#999999">ESCAPED{ : }Manager</font>:
  addNameAlternateMappings:METHOD:[PUBLIC]:ESCAPED{addNameAlternateMappings}ESCAPED{(}<font color="#999999">ESCAPED{Object}ESCAPED{ }</font>ESCAPED{alternates}ESCAPED{)}<font color="#999999">ESCAPED{ : }Manager</font>:
  classes:CLASS:[PUBLIC]:ESCAPED{classes}:
  create:METHOD:[PUBLIC]:ESCAPED{create}ESCAPED{(}ESCAPED{className}ESCAPED{, }ESCAPED{data}ESCAPED{, }ESCAPED{createdFn}ESCAPED{)}<font color="#999999">ESCAPED{ : }Class</font>:
    data:PARAMETER:[PUBLIC]:ESCAPED{data}:
      $className:FIELD:[PUBLIC]:ESCAPED{$className}:
      createdFn:FIELD:[PUBLIC]:ESCAPED{createdFn}<font color="#999999">ESCAPED{ : }Manager.create.createdFn</font>:
      postprocessors:FIELD:[PUBLIC]:ESCAPED{postprocessors}:
  createNamespaces:METHOD:[PUBLIC]:ESCAPED{createNamespaces}ESCAPED{(}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.ClassManager.createNamespaces.root</font>:
  createOverride:METHOD:[PUBLIC]:ESCAPED{createOverride}ESCAPED{(}ESCAPED{className}ESCAPED{, }ESCAPED{data}ESCAPED{, }ESCAPED{createdFn}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.ClassManager.createOverride.me</font>:
    classReady:METHOD:[PRIVATE]:ESCAPED{classReady}ESCAPED{(}ESCAPED{)}<font color="#999999">ESCAPED{ : }undefined</font>:
    me:VARIABLE:[PRIVATE]:ESCAPED{me}<font color="#999999">ESCAPED{ : }Manager</font>:
    overriddenClassName:VARIABLE:[PRIVATE]:ESCAPED{overriddenClassName}:
    requires:VARIABLE:[PRIVATE]:ESCAPED{requires}:
    uses:VARIABLE:[PRIVATE]:ESCAPED{uses}:
  createdListeners:FIELD:[PUBLIC]:ESCAPED{createdListeners}<font color="#999999">ESCAPED{ : }Array</font>:
  defaultPostprocessors:FIELD:[PUBLIC]:ESCAPED{defaultPostprocessors}<font color="#999999">ESCAPED{ : }Array</font>:
  dynInstantiate:METHOD:[PUBLIC]:ESCAPED{dynInstantiate}ESCAPED{(}ESCAPED{name}ESCAPED{, }ESCAPED{args}ESCAPED{)}:
  enableNamespaceParseCache:FIELD:[PUBLIC]:ESCAPED{enableNamespaceParseCache}<font color="#999999">ESCAPED{ : }Boolean</font>:
  existCache:CLASS:[PUBLIC]:ESCAPED{existCache}:
  get:METHOD:[PUBLIC]:ESCAPED{get}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{name}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.ClassManager.get.rootESCAPED{|}Ext.Class</font>:
  getAliasesByName:METHOD:[PUBLIC]:ESCAPED{getAliasesByName}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{name}ESCAPED{)}<font color="#999999">ESCAPED{ : }Array</font>:
  getByAlias:METHOD:[PUBLIC]:ESCAPED{getByAlias}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{alias}ESCAPED{)}<font color="#999999">ESCAPED{ : }unresolvedESCAPED{|}Ext.ClassESCAPED{|}Ext.ClassManager.get.root</font>:
  getClass:METHOD:[PUBLIC]:ESCAPED{getClass}ESCAPED{(}<font color="#999999">ESCAPED{Object}ESCAPED{ }</font>ESCAPED{object}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.ClassESCAPED{|}Ext.ClassManager.getClass.objectESCAPED{|}Object.self</font>:
  getInstantiator:METHOD:[PUBLIC]:ESCAPED{getInstantiator}ESCAPED{(}ESCAPED{length}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.ClassManager.getInstantiator.instantiator</font>:
  getName:METHOD:[PUBLIC]:ESCAPED{getName}ESCAPED{(}<font color="#999999">ESCAPED{Ext.Class|Object}ESCAPED{ }</font>ESCAPED{object}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.Class.$classNameESCAPED{|}Object.$classNameESCAPED{|}Ext.ClassManager.getName.objectESCAPED{|}String</font>:
  getNameByAlias:METHOD:[PUBLIC]:ESCAPED{getNameByAlias}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{alias}ESCAPED{)}<font color="#999999">ESCAPED{ : }String</font>:
  getNameByAlternate:METHOD:[PUBLIC]:ESCAPED{getNameByAlternate}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{alternate}ESCAPED{)}<font color="#999999">ESCAPED{ : }String</font>:
  getNamesByExpression:METHOD:[PUBLIC]:ESCAPED{getNamesByExpression}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{expression}ESCAPED{)}<font color="#999999">ESCAPED{ : }String[]ESCAPED{|}Ext.ClassManager.getNamesByExpression.names</font>:
  instantiate:METHOD:[PUBLIC]:ESCAPED{instantiate}ESCAPED{(}ESCAPED{)}:
  instantiateByAlias:METHOD:[PUBLIC]:ESCAPED{instantiateByAlias}ESCAPED{(}ESCAPED{)}<font color="#999999">ESCAPED{ : }Object</font>:
  instantiators:FIELD:[PUBLIC]:ESCAPED{instantiators}<font color="#999999">ESCAPED{ : }Array</font>:
  isCreated:METHOD:[PUBLIC]:ESCAPED{isCreated}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{className}ESCAPED{)}<font color="#999999">ESCAPED{ : }Boolean</font>:
  maps:CLASS:[PUBLIC]:ESCAPED{maps}:
    aliasToName:CLASS:[PUBLIC]:ESCAPED{aliasToName}:
    alternateToName:CLASS:[PUBLIC]:ESCAPED{alternateToName}:
    nameToAliases:CLASS:[PUBLIC]:ESCAPED{nameToAliases}:
    nameToAlternates:CLASS:[PUBLIC]:ESCAPED{nameToAlternates}:
  nameCreatedListeners:CLASS:[PUBLIC]:ESCAPED{nameCreatedListeners}:
  namespaceParseCache:CLASS:[PUBLIC]:ESCAPED{namespaceParseCache}:
  namespaceRewrites:FIELD:[PUBLIC]:ESCAPED{namespaceRewrites}<font color="#999999">ESCAPED{ : }Array</font>:
  onCreated:METHOD:[PUBLIC]:ESCAPED{onCreated}ESCAPED{(}ESCAPED{fn}ESCAPED{, }ESCAPED{scope}ESCAPED{, }ESCAPED{className}ESCAPED{)}<font color="#999999">ESCAPED{ : }unresolved</font>:
  parseNamespace:METHOD:[PUBLIC]:ESCAPED{parseNamespace}ESCAPED{(}ESCAPED{namespace}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.ClassManager.parseNamespace.parts</font>:
  postprocessors:CLASS:[PUBLIC]:ESCAPED{postprocessors}:
  processCreate:METHOD:[PUBLIC]:ESCAPED{processCreate}ESCAPED{(}ESCAPED{className}ESCAPED{, }ESCAPED{cls}ESCAPED{, }ESCAPED{clsData}ESCAPED{)}<font color="#999999">ESCAPED{ : }unresolved</font>:
  registerPostprocessor:METHOD:[PUBLIC]:ESCAPED{registerPostprocessor}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{name}ESCAPED{, }ESCAPED{fn}ESCAPED{, }ESCAPED{properties}ESCAPED{, }ESCAPED{position}ESCAPED{, }ESCAPED{relativeTo}ESCAPED{)}<font color="#999999">ESCAPED{ : }Manager</font>:
  set:METHOD:[PUBLIC]:ESCAPED{set}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{name}ESCAPED{, }<font color="#999999">ESCAPED{Object}ESCAPED{ }</font>ESCAPED{value}ESCAPED{)}<font color="#999999">ESCAPED{ : }ManagerESCAPED{|}Ext.ClassManager</font>:
  setAlias:METHOD:[PUBLIC]:ESCAPED{setAlias}ESCAPED{(}<font color="#999999">ESCAPED{Ext.Class|String}ESCAPED{ }</font>ESCAPED{cls}ESCAPED{, }<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{alias}ESCAPED{)}<font color="#999999">ESCAPED{ : }Manager</font>:
  setDefaultPostprocessorPosition:METHOD:[PUBLIC]:ESCAPED{setDefaultPostprocessorPosition}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{name}ESCAPED{, }<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{offset}ESCAPED{, }<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{relativeName}ESCAPED{)}<font color="#999999">ESCAPED{ : }ManagerESCAPED{|}Ext.ClassManager</font>:
  setDefaultPostprocessors:METHOD:[PUBLIC]:ESCAPED{setDefaultPostprocessors}ESCAPED{(}<font color="#999999">ESCAPED{String|Array}ESCAPED{ }</font>ESCAPED{postprocessors}ESCAPED{)}<font color="#999999">ESCAPED{ : }ManagerESCAPED{|}Ext.ClassManager</font>:
  setNamespace:METHOD:[PUBLIC]:ESCAPED{setNamespace}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{name}ESCAPED{, }<font color="#999999">ESCAPED{Object}ESCAPED{ }</font>ESCAPED{value}ESCAPED{)}<font color="#999999">ESCAPED{ : }unresolved</font>:
  triggerCreated:METHOD:[PUBLIC]:ESCAPED{triggerCreated}ESCAPED{(}ESCAPED{className}ESCAPED{)}<font color="#999999">ESCAPED{ : }undefined</font>:
makeCtor:METHOD:[PRIVATE]:ESCAPED{makeCtor}ESCAPED{(}ESCAPED{)}<font color="#999999">ESCAPED{ : }makeCtor.constructor</font>:
  constructor:METHOD:[PRIVATE]:ESCAPED{constructor}ESCAPED{(}ESCAPED{)}:
ln:VARIABLE:[PRIVATE]:ESCAPED{ln}:
aliases:VARIABLE:[PRIVATE]:ESCAPED{aliases}:
i:VARIABLE:[PRIVATE]:ESCAPED{i}:
ln:VARIABLE:[PRIVATE]:ESCAPED{ln}:
xtypes:VARIABLE:[PRIVATE]:ESCAPED{xtypes}:
widgetPrefixLength:VARIABLE:[PRIVATE]:ESCAPED{widgetPrefixLength}<font color="#999999">ESCAPED{ : }String.length</font>:
widgetPrefix:VARIABLE:[PRIVATE]:ESCAPED{widgetPrefix}<font color="#999999">ESCAPED{ : }String</font>:
aliases:VARIABLE:[PRIVATE]:ESCAPED{aliases}:
xtypesChain:VARIABLE:[PRIVATE]:ESCAPED{xtypesChain}:
i:VARIABLE:[PRIVATE]:ESCAPED{i}:
xtypesMap:VARIABLE:[PRIVATE]:ESCAPED{xtypesMap}:
cls:PARAMETER:[PUBLIC]:ESCAPED{cls}:
  xtype:FIELD:[PUBLIC]:ESCAPED{xtype}<font color="#999999">ESCAPED{ : }data.xtype</font>:
data:PARAMETER:[PUBLIC]:ESCAPED{data}:
  alias:FIELD:[PUBLIC]:ESCAPED{alias}:
  xtype:FIELD:[PUBLIC]:ESCAPED{xtype}:
  xtypes:FIELD:[PUBLIC]:ESCAPED{xtypes}<font color="#999999">ESCAPED{ : }mixin.xtypes</font>:
  xtypesChain:FIELD:[PUBLIC]:ESCAPED{xtypesChain}:
  xtypesMap:FIELD:[PUBLIC]:ESCAPED{xtypesMap}:
alternate:VARIABLE:[PRIVATE]:ESCAPED{alternate}:
ln:VARIABLE:[PRIVATE]:ESCAPED{ln}:
i:VARIABLE:[PRIVATE]:ESCAPED{i}:
alternates:VARIABLE:[PRIVATE]:ESCAPED{alternates}:
Ext:CLASS:[PUBLIC]:ESCAPED{Ext}:
  create:FIELD:[PUBLIC]:ESCAPED{create}:
  createByAlias:FIELD:[PUBLIC]:ESCAPED{createByAlias}:
  define:METHOD:[PUBLIC]:ESCAPED{define}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{className}ESCAPED{, }<font color="#999999">ESCAPED{Object}ESCAPED{ }</font>ESCAPED{data}ESCAPED{, }<font color="#999999">ESCAPED{Function}ESCAPED{ }</font>ESCAPED{createdFn}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.Base</font>:
  getClass:FIELD:[PUBLIC]:ESCAPED{getClass}:
  getClassName:FIELD:[PUBLIC]:ESCAPED{getClassName}:
  getDisplayName:METHOD:[PUBLIC]:ESCAPED{getDisplayName}ESCAPED{(}<font color="#999999">ESCAPED{Object}ESCAPED{ }</font>ESCAPED{object}ESCAPED{)}<font color="#999999">ESCAPED{ : }Object.$classNameESCAPED{|}StringESCAPED{|}Object.displayName</font>:
  namespace:FIELD:[PUBLIC]:ESCAPED{namespace}:
  undefine:METHOD:[PUBLIC]:ESCAPED{undefine}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{className}ESCAPED{)}<font color="#999999">ESCAPED{ : }unresolved</font>:
  widget:METHOD:[PUBLIC]:ESCAPED{widget}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{name}ESCAPED{, }<font color="#999999">ESCAPED{Object}ESCAPED{ }</font>ESCAPED{config}ESCAPED{)}<font color="#999999">ESCAPED{ : }widget.TESCAPED{|}Ext.ClassESCAPED{|}Ext.ClassManager.get.rootESCAPED{|}ObjectESCAPED{|}String</font>:
