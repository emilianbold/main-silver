/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2012 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2012 Sun Microsystems, Inc.
 */
package org.netbeans.modules.cordova.project;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import org.netbeans.api.options.OptionsDisplayer;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.SourceGroup;
import org.netbeans.api.project.Sources;
import org.netbeans.modules.cordova.CordovaPlatform;
import org.netbeans.modules.cordova.template.CordovaTemplate;
import org.netbeans.modules.cordova.template.CordovaTemplate.CordovaExtender;
import org.netbeans.modules.web.clientproject.api.WebClientProjectConstants;
import org.netbeans.spi.project.ProjectConfigurationProvider;
import org.openide.util.Lookup;

/**
 *
 * @author Jan Becicka
 */
public class CordovaCustomizerPanel extends javax.swing.JPanel {

    private Project project;
    /**
     * Creates new form CordovaCustomizerPanel
     */
    public CordovaCustomizerPanel(Project p) {
        this.project = p;
        initComponents();
        final boolean platformsReady = CordovaPlatform.getDefault().getSdkLocation()!=null;
        cordovaPanel.setVisible(platformsReady);
        mobilePlatforms.setVisible(!platformsReady);
        mobilePlatformsLabel.setVisible(!platformsReady);
        ProjectConfigurationProvider provider = p.getLookup().lookup(ProjectConfigurationProvider.class);
        boolean isCordovaProject = false;
        if (provider!=null) {
            for (Object conf:provider.getConfigurations()) {
                if (conf instanceof ClientProjectConfigurationImpl) {
                    isCordovaProject = true;
                    break;
                }
            }
            
        }
        enableCordovaButton.setVisible(platformsReady && !isCordovaProject);
        phoneGapLabel.setVisible(platformsReady && !isCordovaProject);
        cordovaPanel.setVisible(platformsReady && isCordovaProject);
        CordovaPlatform.getDefault().addPropertyChangeListener(new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                cordovaPanel.update();
                final boolean platformsReady = CordovaPlatform.getDefault().getSdkLocation()!=null;
                enableCordovaButton.setVisible(platformsReady);
                phoneGapLabel.setVisible(platformsReady);
                mobilePlatforms.setVisible(!platformsReady);
                mobilePlatformsLabel.setVisible(!platformsReady);
                CordovaCustomizerPanel.this.validate();
            }
        });
        cordovaPanel.update();
        validate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        enableCordovaButton = new javax.swing.JButton();
        cordovaPanel = new org.netbeans.modules.cordova.project.CordovaPanel();
        mobilePlatforms = new javax.swing.JButton();
        mobilePlatformsLabel = new javax.swing.JLabel();
        phoneGapLabel = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(enableCordovaButton, org.openide.util.NbBundle.getMessage(CordovaCustomizerPanel.class, "CordovaCustomizerPanel.enableCordovaButton.text")); // NOI18N
        enableCordovaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableCordovaButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mobilePlatforms, org.openide.util.NbBundle.getMessage(CordovaCustomizerPanel.class, "CordovaPanel.platformSetup.text")); // NOI18N
        mobilePlatforms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mobilePlatformsActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mobilePlatformsLabel, org.openide.util.NbBundle.getMessage(CordovaCustomizerPanel.class, "CordovaCustomizerPanel.mobilePlatformsLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(phoneGapLabel, org.openide.util.NbBundle.getMessage(CordovaCustomizerPanel.class, "CordovaCustomizerPanel.phoneGapLabel.text")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(mobilePlatformsLabel)
                    .add(mobilePlatforms))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(phoneGapLabel)
                    .add(enableCordovaButton))
                .addContainerGap())
            .add(cordovaPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(mobilePlatformsLabel)
                    .add(phoneGapLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(mobilePlatforms)
                    .add(enableCordovaButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cordovaPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void mobilePlatformsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mobilePlatformsActionPerformed
        OptionsDisplayer.getDefault().open("Advanced/MobilePlatforms");//NOI18N
    }//GEN-LAST:event_mobilePlatformsActionPerformed

    private void enableCordovaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableCordovaButtonActionPerformed
        cordovaPanel.setVisible(true);
        enableCordovaButton.setVisible(false);
        phoneGapLabel.setVisible(false);
        cordovaPanel.update();
        CordovaExtender extender = Lookup.getDefault().lookup(CordovaTemplate.CordovaExtender.class);
        extender.setEnabled(true);
        Sources sources = project.getLookup().lookup(Sources.class);
        SourceGroup[] sourceGroups = sources.getSourceGroups(WebClientProjectConstants.SOURCES_TYPE_HTML5);
        extender.apply(project.getProjectDirectory(), sourceGroups[0].getRootFolder(), "js/libs");
        extender.setEnabled(false);
        validate();
    }//GEN-LAST:event_enableCordovaButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.netbeans.modules.cordova.project.CordovaPanel cordovaPanel;
    private javax.swing.JButton enableCordovaButton;
    private javax.swing.JButton mobilePlatforms;
    private javax.swing.JLabel mobilePlatformsLabel;
    private javax.swing.JLabel phoneGapLabel;
    // End of variables declaration//GEN-END:variables
}
