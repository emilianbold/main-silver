/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2012 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2012 Sun Microsystems, Inc.
 */
package org.netbeans.modules.cordova.project;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.util.prefs.Preferences;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.ProjectUtils;
import org.netbeans.modules.cordova.CordovaPerformer;
import org.netbeans.modules.cordova.CordovaPlatform;
import org.netbeans.modules.cordova.platforms.MobilePlatformsSetup;
import org.netbeans.modules.cordova.platforms.MobileProjectExtender;
import org.netbeans.modules.cordova.updatetask.SourceConfig;
import org.netbeans.spi.project.ProjectConfigurationProvider;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;

/**
 *
 * @author Jan Becicka
 */
public class CordovaCustomizerPanel extends javax.swing.JPanel implements ActionListener {

    private Project project;
    /**
     * Creates new form CordovaCustomizerPanel
     */
    public CordovaCustomizerPanel(Project p) {
        this.project = p;
        if (!CordovaPlatform.getDefault().isReady()) {
            setLayout(new BorderLayout());
            add(new MobilePlatformsSetup(), BorderLayout.CENTER);
            validate();
            CordovaPlatform.getDefault().addPropertyChangeListener(new PropertyChangeListener() {
                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    if (CordovaPlatform.getDefault().isReady()) {
                        removeAll();
                        initControls();
                    }
                }
            });
            
        } else {
            initControls();
        }
    }
    

    private void createMobileConfigs() {
        try {
            MobileProjectExtender.createMobileConfigs(project.getProjectDirectory());
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cordovaPanel = new org.netbeans.modules.cordova.project.CordovaPanel();
        createConfigs = new javax.swing.JButton();
        createConfigsLabel = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(createConfigs, org.openide.util.NbBundle.getMessage(CordovaCustomizerPanel.class, "CordovaPanel.createConfigs.text")); // NOI18N
        createConfigs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createConfigsActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(createConfigsLabel, org.openide.util.NbBundle.getMessage(CordovaCustomizerPanel.class, "CordovaCustomizerPanel.createConfigsLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(createConfigsLabel)
                    .addComponent(createConfigs))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(cordovaPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 752, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createConfigsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createConfigs)
                .addGap(0, 0, 0)
                .addComponent(cordovaPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createConfigsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createConfigsActionPerformed
        createConfigs.setVisible(false);
        createConfigsLabel.setVisible(false);
        cordovaPanel.setVisible(true);
        createMobileConfigs();
        validate();
    }//GEN-LAST:event_createConfigsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.netbeans.modules.cordova.project.CordovaPanel cordovaPanel;
    private javax.swing.JButton createConfigs;
    private javax.swing.JLabel createConfigsLabel;
    // End of variables declaration//GEN-END:variables

    private void initControls() {
        initComponents();
        ProjectConfigurationProvider provider = project.getLookup().lookup(ProjectConfigurationProvider.class);
        boolean isCordovaProject = false;
        if (provider!=null) {
            for (Object conf:provider.getConfigurations()) {
                if (conf instanceof ClientProjectConfigurationImpl) {
                    isCordovaProject = true;
                    break;
                }
            }
            
        }
        
        createConfigs.setVisible(!isCordovaProject);
        createConfigsLabel.setVisible(!isCordovaProject);
        cordovaPanel.setVisible(isCordovaProject);
        Preferences preferences = ProjectUtils.getPreferences(project, CordovaPlatform.class, true);
        String phoneGapEnabled = preferences.get("phonegap", "false");
        cordovaPanel.setPanelEnabled(Boolean.parseBoolean(phoneGapEnabled));
        cordovaPanel.update();
        String pkg = CordovaPerformer.getConfig(project).getId();
        if (pkg!=null) {
            cordovaPanel.setPackageName(pkg);
        }
        validate();
    }

    @Override
    /**
     * Store listener
     */
    public void actionPerformed(ActionEvent e) {
        if (cordovaPanel == null) {
            return;
        }
        Preferences preferences = ProjectUtils.getPreferences(project, CordovaPlatform.class, true);
        preferences.put("phonegap", Boolean.toString(cordovaPanel.isPanelEnabled()));
        
        try {
            SourceConfig config = CordovaPerformer.getConfig(project);
            config.setId(cordovaPanel.getPackageName());
            config.save();
        } catch (IOException iOException) {
            Exceptions.printStackTrace(iOException);
        }
        
        
        if (cordovaPanel.isPanelEnabled()) {
            Lookup.getDefault().lookup(CordovaPerformer.class).perform("create-android", project);
            Lookup.getDefault().lookup(CordovaPerformer.class).perform("create-ios", project);
        }
    }
}
