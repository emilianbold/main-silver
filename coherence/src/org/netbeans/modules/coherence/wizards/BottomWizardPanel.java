/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */
package org.netbeans.modules.coherence.wizards;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.netbeans.api.java.classpath.ClassPath;
import org.netbeans.api.java.project.JavaProjectConstants;
import org.netbeans.api.java.project.classpath.ProjectClassPathModifier;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.ProjectUtils;
import org.netbeans.api.project.SourceGroup;
import org.netbeans.api.project.libraries.LibrariesCustomizer;
import org.netbeans.api.project.libraries.Library;
import org.netbeans.api.project.libraries.LibraryManager;
import org.netbeans.modules.coherence.library.LibraryUtils;
import org.netbeans.modules.coherence.project.CoherenceProjectUtils;
import org.netbeans.spi.project.ui.templates.support.Templates;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.WizardDescriptor;
import org.openide.util.NbBundle;

/**
 *
 * @author Martin Fousek <marfous@netbeans.org>
 */
public class BottomWizardPanel extends javax.swing.JPanel {

    private static final Logger LOGGER = Logger.getLogger(BottomWizardPanel.class.getName());
    private final List<Library> coherenceLibraries = new ArrayList<Library>();
    private final WizardDescriptor wizard;
    private boolean initialized;

    /**
     * Creates new form BottomWizardPanel.
     */
    public BottomWizardPanel(WizardDescriptor wizard) {
        this.wizard = wizard;

        initComponents();
        initLibrariesPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        libraryPanel = new javax.swing.JPanel();
        librariesComboBox = new javax.swing.JComboBox();
        classPathWarningLabel = new javax.swing.JLabel();
        addToProjectButton = new javax.swing.JButton();
        registerCoherenceLabel = new javax.swing.JLabel();

        librariesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Loading libraries..." }));

        classPathWarningLabel.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        classPathWarningLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/coherence/resources/icons/warning.gif"))); // NOI18N
        classPathWarningLabel.setText(org.openide.util.NbBundle.getMessage(BottomWizardPanel.class, "BottomWizardPanel.classPathWarningLabel.text")); // NOI18N

        addToProjectButton.setText(org.openide.util.NbBundle.getMessage(BottomWizardPanel.class, "BottomWizardPanel.addToProjectButton.text")); // NOI18N
        addToProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToProjectButtonActionPerformed(evt);
            }
        });

        registerCoherenceLabel.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        registerCoherenceLabel.setForeground(new java.awt.Color(204, 102, 0));
        registerCoherenceLabel.setText(org.openide.util.NbBundle.getMessage(BottomWizardPanel.class, "BottomWizardPanel.registerCoherenceLabel.text")); // NOI18N
        registerCoherenceLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        registerCoherenceLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                registerCoherenceLabelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout libraryPanelLayout = new javax.swing.GroupLayout(libraryPanel);
        libraryPanel.setLayout(libraryPanelLayout);
        libraryPanelLayout.setHorizontalGroup(
            libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(libraryPanelLayout.createSequentialGroup()
                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(classPathWarningLabel)
                    .addGroup(libraryPanelLayout.createSequentialGroup()
                        .addComponent(librariesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addToProjectButton))
                    .addComponent(registerCoherenceLabel))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        libraryPanelLayout.setVerticalGroup(
            libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, libraryPanelLayout.createSequentialGroup()
                .addComponent(classPathWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(librariesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addToProjectButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(registerCoherenceLabel))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(libraryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 233, Short.MAX_VALUE)
                .addComponent(libraryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addToProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToProjectButtonActionPerformed
        Object selectedItem = librariesComboBox.getSelectedItem();
        if (selectedItem instanceof LibraryItem) {
            LibraryItem libraryItem = (LibraryItem) selectedItem;
            Project project = Templates.getProject(wizard);
            try {
                SourceGroup[] group = ProjectUtils.getSources(project).getSourceGroups(JavaProjectConstants.SOURCES_TYPE_JAVA);
                if (group.length == 0) {
                    return;
                }
                ProjectClassPathModifier.addLibraries(
                        new Library[]{libraryItem.getLibrary()},
                        group[0].getRootFolder(),
                        ClassPath.COMPILE);
                initLibrariesPanel();
            } catch (IOException ioe) {
                LOGGER.log(Level.WARNING, "Libraries required for the Coherence project not added", ioe);
            } catch (UnsupportedOperationException uoe) {
                LOGGER.log(Level.WARNING, "This project does not support adding these types of libraries to the classpath", uoe);
            }
        }
    }//GEN-LAST:event_addToProjectButtonActionPerformed

    private void registerCoherenceLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_registerCoherenceLabelMousePressed
        registerCoherence();
    }//GEN-LAST:event_registerCoherenceLabelMousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToProjectButton;
    private javax.swing.JLabel classPathWarningLabel;
    private javax.swing.JComboBox librariesComboBox;
    private javax.swing.JPanel libraryPanel;
    private javax.swing.JLabel registerCoherenceLabel;
    // End of variables declaration//GEN-END:variables

    @NbBundle.Messages(
        "title.register.coherence.dialog=Register New Coherence"
    )
    private void registerCoherence() {
        final ServerOrLibraryPanel panel = new ServerOrLibraryPanel();
        DialogDescriptor desc = new DialogDescriptor(
                panel,
                Bundle.title_register_coherence_dialog(),
                true,
                DialogDescriptor.DEFAULT_OPTION,
                DialogDescriptor.OK_OPTION,
                null);
        Object ret = DialogDisplayer.getDefault().notify(desc);
        if (ret == DialogDescriptor.OK_OPTION) {
            if (panel.getLibraryChecked()) {
                Library library = LibrariesCustomizer.showCreateNewLibraryCustomizer(LibraryManager.getDefault());
                if (library != null) {
                    cleanInitialized();
                    initLibrariesPanel();
                }
            } else {
                // waiting for new API for new server creation
            }
        }
    }

    private void cleanInitialized() {
        initialized = false;
        coherenceLibraries.clear();
    }

    private void initLibrariesPanel() {
        if (CoherenceProjectUtils.isCoherenceProject(Templates.getProject(wizard))) {
            libraryPanel.setVisible(false);
        } else {
            libraryPanel.setVisible(true);
            if (!initialized) {
                coherenceLibraries.addAll(LibraryUtils.getRegisteredCoherenceLibraries());
                initialized = true;
                librariesComboBox.removeAllItems();
                if (coherenceLibraries.isEmpty()) {
                    librariesComboBox.addItem(NbBundle.getMessage(BottomWizardPanel.class, "LBL_NoCoherenceLibraryFound")); //NOI18N
                    addToProjectButton.setEnabled(false);
                } else {
                    addToProjectButton.setEnabled(true);
                    for (Library library : coherenceLibraries) {
                        librariesComboBox.addItem(new LibraryItem(library));
                    }
                }
            }
        }
    }

    private static class LibraryItem {

        private Library library;

        public LibraryItem(Library library) {
            this.library = library;
        }

        /**
         * Get the value of library
         *
         * @return the value of library
         */
        public Library getLibrary() {
            return library;
        }

        /**
         * Set the value of library
         *
         * @param library new value of library
         */
        public void setLibrary(Library library) {
            this.library = library;
        }

        @Override
        public String toString() {
            return library.getDisplayName();
        }
    }
}
