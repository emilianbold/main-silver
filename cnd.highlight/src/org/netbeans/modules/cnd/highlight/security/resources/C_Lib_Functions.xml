<?xml version="1.0" encoding="UTF-8"?>
<!--
DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

Copyright 2015 Oracle and/or its affiliates. All rights reserved.

Oracle and Java are registered trademarks of Oracle and/or its affiliates.
Other names may be trademarks of their respective owners.

The contents of this file are subject to the terms of either the GNU
General Public License Version 2 only ("GPL") or the Common
Development and Distribution License("CDDL") (collectively, the
"License"). You may not use this file except in compliance with the
License. You can obtain a copy of the License at
http://www.netbeans.org/cddl-gplv2.html
or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
specific language governing permissions and limitations under the
License.  When distributing the software, include this License Header
Notice in each file and include the License file at
nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
particular file as subject to the "Classpath" exception as provided
by Oracle in the GPL Version 2 section of the License file that
accompanied this code. If applicable, add the following below the
License Header, with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

If you wish your version of this file to be governed by only the CDDL
or only the GPL Version 2, indicate your decision by adding
"[Contributor] elects to include this software in this distribution
under the [CDDL or GPL Version 2] license." If you do not indicate a
single choice of license, a recipient has the option to distribute
your version of this file under either the CDDL, the GPL Version 2 or
to extend the choice of license to its licensees as provided above.
However, if you add GPL Version 2 code and therefore, elected the GPL
Version 2 license, then the option applies only if the new code is
made subject to such option by the copyright holder.

Contributor(s):

Portions Copyrighted 2015 Sun Microsystems, Inc.
-->

<unreliablefunctions xmlns="http://www.netbeans.org/ns/cnd-unreliable-functions/1">
    <level value="unsafe">
        <category name="gets">
            <function name="gets" header="stdio.h">
                <alt><![CDATA[fgets(buf, sizeof (buf), stdin)]]></alt>
            </function>
            <description>
                <![CDATA[
                    This function does not check for bounds while storing the input. This function can't be used securely.
                ]]>
            </description>
        </category>
        <category name="cftime">
            <function name="cftime" header="time.h">
                <alt><![CDATA[strftime(buf, sizeof (buf), fmt, &amp;tm)]]></alt>
            </function>
            <function name="ascftime" header="time.h">
                <alt><![CDATA[strftime(buf, sizeof (buf), fmt, &amp;tm)]]></alt>
            </function>
            <description>
                <![CDATA[
                    These routines do no bounds checking on the output buffer and may import user-data through the environment variable CFTIME
                ]]>
            </description>
        </category>
    </level>
    <level value="avoid">
        <category name="strcat">
            <function name="strcat" header="string.h">
                <alt><![CDATA[strlcat(dst, src, dstsize)]]></alt>
            </function>
            <function name="strcpy" header="string.h">
                <alt><![CDATA[strlcpy(dst, src, dstsize)]]></alt>
            </function>
            <description>
                <![CDATA[
                    It is not possible to limit these functions to a maximum buffer size.<br>
                    The use of these functions will always force reviewers to follow the logic, and prevent automated scanning of source code for vulnerabilities.
                ]]>
            </description>
        </category>
        <category name="access">
            <function name="access" header="unistd.h">
                <alt><![CDATA[open()]]></alt>
            </function>
            <description>
                <![CDATA[
                    This function is useless because the information it provides is outdated by the time you get to use it.<br>
                    Using access() followed by open() has a race condition that can't be solved.
                ]]>
            </description>
        </category>
        <category name="chmod">
            <function name="chmod" header="sys/stat.h"></function>
            <function name="fchmodat" header="sys/stat.h"></function>
            <function name="chown" header="unistd.h"></function>
            <function name="lchown" header="unistd.h"></function>
            <description>
                <![CDATA[
                    These functions operate on pathnames and are prone to race conditions.<br>
                    Normally, programs shouldn't need to call chown/chmod but honor the current uid (switch back to it before opening files.) and umask.
                ]]>
            </description>
        </category>
        <category name="alloca">
            <function name="alloca" header="stdlib.h">
                <alt><![CDATA[malloc(size_t)]]></alt>
            </function>
            <function name="strdupa" header="string.h">
                <alt><![CDATA[strdup(const char *)]]></alt>
            </function>
            <function name="strndupa" header="string.h">
                <alt><![CDATA[strdup(const char *)]]></alt>
            </function>
            <description>
                <![CDATA[
                    Does not check if the returned pointer is within the stack bounds <br>
                    and for memory allocations larger than a page may jump over stack guard page into other allocated pages and overwrite them.
                ]]>
            </description>
        </category>
    </level>
    <level value="caution">
        <category name="strncat">
            <function name="strncat" header="string.h">
                <alt><![CDATA[strlcat(dst, src, dstsize)]]></alt>
            </function>
            <description>
                <![CDATA[
                    strncat() is hard to use as it requires the proper size of the destination buffer to be calculated
                ]]>
            </description>
        </category>
        <category name="strncpy">
            <function name="strncpy" header="string.h">
                <alt><![CDATA[strlcpy(dst, src, dstsize)]]></alt>
            </function>
            <description>
                <![CDATA[
                    strncpy() is not guaranteed to null-terminate the destination buffer.
                ]]>
            </description>
        </category>
    </level>
</unreliablefunctions>
